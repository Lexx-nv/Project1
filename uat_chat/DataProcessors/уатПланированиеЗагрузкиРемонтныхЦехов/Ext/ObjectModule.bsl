#Если Клиент Тогда
Перем ДиаграммаГанта, СерияЗаказ, ЦветаДиаграммы, МассивДокументовОснований; // переменные объекта
Перем КартинкаЗаявки Экспорт; // картинка заявки
Перем КартинкаЦеха Экспорт;   // картинка цеха
Перем НП Экспорт; // Настройка периода отчета

// состояния отображения цехов
Процедура ПолучитьСостояниеОтображенияЦехов(ДиаграммаПланирования, Точки, СостояниеОтображенияЦехов) Экспорт
	
	Для Каждого ТекТочка Из Точки Цикл
		Если ТипЗнч(ТекТочка.Расшифровка)=Тип("СправочникСсылка.уатЦеха") Тогда
			СостояниеОтображенияЦехов.Вставить(ТекТочка.Расшифровка, ДиаграммаПланирования.РазвернутаТочка(ТекТочка));
			ПолучитьСостояниеОтображенияЦехов(ДиаграммаПланирования, ТекТочка.Точки, СостояниеОтображенияЦехов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// переход по периодам
Процедура ПерелестнутьПериод(ИмяКнопки) Экспорт
	
	Если ИмяКнопки = "кнДеньНазад" Тогда
		ДатаНачала	= ДатаНачала - 86400;
		ДатаКонца	= ДатаКонца  - 86400;
	ИначеЕсли ИмяКнопки = "кнСегодня" Тогда
		ВремяНачало = ДатаНачала-НачалоДня(ДатаНачала);
		ВремяКонец  = ДатаКонца - НачалоДня(ДатаКонца);
		Если ВремяКонец < ВремяНачало Тогда
			Буфер = ВремяКонец;
			ВремяКонец = ВремяНачало;
			ВремяНачало = Буфер;
		КонецЕсли;
		ТекущаяДата = НачалоДня(ТекущаяДата());
		ДатаНачала = ТекущаяДата + ВремяНачало;
		ДатаКонца  = ТекущаяДата + ВремяКонец;
	ИначеЕсли ИмяКнопки = "кнДеньВперед" Тогда
		ДатаНачала	= ДатаНачала + 86400;
		ДатаКонца	= ДатаКонца	 + 86400;
	КонецЕсли;
	
КонецПроцедуры

// открыть настройку
Процедура ОткрытьНастройкуПечати(ОтображатьЛегенду) Экспорт
	
	ФормаПечатиДиаграммы = ПолучитьФорму("ФормаНастройкиПечати");
	МакетПечати = ПолучитьМакет("МакетПечати");
	
	ДокументРезультат = ФормаПечатиДиаграммы.ЭлементыФормы.ТабличныйДокумент;
	ДокументРезультат.Очистить();
	
	ОбластьЗаголовка = МакетПечати.ПолучитьОбласть("Заголовок");
	ОбластьДиаграммаГанта = МакетПечати.ПолучитьОбласть("Диаграмма");
	ВысотаДиаграммы = ?(ОтображатьЛегенду, 140, 179);
	
	Если ДатаНачала = '00010101000000' И ДатаКонца = '00010101000000' Тогда
		Период = "Весь рабочий период !";
	Иначе
		Если ДатаНачала = '00010101000000' ИЛИ ДатаКонца = '00010101000000' Тогда
			СтрФорматирования = "ДФ = ""дд.ММ.гггг""; ДП = ""...""";
			Период = Формат(ДатаНачала, СтрФорматирования) + " - " + Формат(ДатаКонца,  СтрФорматирования);
		Иначе
			Если ДатаНачала <= ДатаКонца Тогда
				Период = ПредставлениеПериода(НачалоДня(ДатаНачала), КонецДня(ДатаКонца), "ФП = Истина");
			Иначе Период = "Неправильно задан период!"
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Текст отборов
	ТекстОтбора = "";
	Если Построитель.Отбор.Количество() = 0 Тогда
		ТекстОтбора = "Без отбора";
	Иначе
		ТекстОтбора = "";
		Для Каждого ТекОтбор Из Построитель.Отбор Цикл
			Если ТекОтбор.Использование Тогда
				ТекстОтбора = ТекстОтбора + ?(ТекстОтбора = "", "", ", ") + ТекОтбор.Представление + " " + ТекОтбор.ВидСравнения + " " + ТекОтбор.Значение;
			КонецЕсли;
		КонецЦикла;
		Если ТекстОтбора = "" Тогда ТекстОтбора = "Все"; КонецЕсли; 
	КонецЕсли; 
	
	ОбластьЗаголовка.Параметры.Период = Период;
	ОбластьЗаголовка.Параметры.ТекстОтбора = ТекстОтбора;
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	ОбластьДиаграммаГанта.Рисунки.ДиаграммаГанта.Высота = ВысотаДиаграммы;
	ДокументРезультат.Вывести(ОбластьДиаграммаГанта);
	ФормаПечатиДиаграммы.ЭлементыФормы.ТабличныйДокумент.Рисунки.ДиаграммаГанта.Верх = 21;
	ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("R"+(ДокументРезультат.ВысотаТаблицы-14)+":R"+ДокументРезультат.ВысотаТаблицы), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ТекДиаграммаГанта = ФормаПечатиДиаграммы.ЭлементыФормы.ТабличныйДокумент.Рисунки.ДиаграммаГанта.Объект;
	//ТекДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
	//ТекДиаграммаГанта.АвтоУстановкаТекстаСерий = Ложь;
	//ТекДиаграммаГанта.АвтоУстановкаТекстаТочек = Ложь;
	//ТекДиаграммаГанта.ВертикальнаяПрокрутка = Истина;
	ФормаПечатиДиаграммы.ДатаНач = НачалоДня(ДатаНачала);
	ФормаПечатиДиаграммы.ДатаКон = КонецДня(ДатаКонца);
	
	ТекДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	
	СформироватьДиаграмму(, ТекДиаграммаГанта);
	
	//шкала ганта
	ЭлементыШкалы = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	Для Каждого ТекЭлемент Из ЭлементыШкалы Цикл
		Если ТекЭлемент.Единица = ТипЕдиницыШкалыВремени.Час Тогда
			ТекЭлемент.Видимость = (ДатаНачала = ДатаКонца);
		ИначеЕсли ТекЭлемент.Единица = ТипЕдиницыШкалыВремени.День Тогда
			ТекЭлемент.Видимость = (ДатаНачала <> ДатаКонца);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтображатьЛегенду Тогда
		ОбластьПояснение = МакетПечати.ПолучитьОбласть("ПояснениеДиаграмма");
		ДокументРезультат.Вывести(ОбластьПояснение);
	КонецЕсли;
	
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку     = Ложь;
	ДокументРезультат.Защита              = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	ДокументРезультат.ТолькоПросмотр      = Истина;
	ФормаПечатиДиаграммы.Открыть();
	
КонецПроцедуры

// найти документы диаграммы
Функция НайтиДокументыДиаграммы(кнОткрытьЗнР, ДействиеРасшифровки, Дата, Цех) Экспорт
	
	СписокДокументовОткрытия = Новый Структура();
	
	// перебор цехов и получения рабочих интервалов		
	НайденныйГрафик = Цех.ГрафикРаботы;
	Если НЕ ЗначениеЗаполнено(НайденныйГрафик) Тогда
		ТекРодитель = Цех.Родитель;
		НайденныйГрафик = ТекРодитель.ГрафикРаботы;
		Пока ЗначениеЗаполнено(ТекРодитель) И (НЕ ЗначениеЗаполнено(НайденныйГрафик)) Цикл
			ТекРодитель = ТекРодитель.Родитель;
			НайденныйГрафик = ТекРодитель.ГрафикРаботы;
		КонецЦикла;
		//Если НЕ ЗначениеЗаполнено(НайденныйГрафик) Тогда
		//	НайденныйГрафик = Справочники.уатГрафикиРаботы.ГрафикРаботыКомпании;
		//КонецЕсли;
	КонецЕсли;
	
	ГрафикРесурса = уатОбщегоНазначения_проф.кпПолучитьГрафик(НайденныйГрафик, Дата, Дата);
	Если ГрафикРесурса.Количество()=0 Тогда
		Возврат СписокДокументовОткрытия;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СтрокаУсловия = "";
	ИскатьОснованияЗаказов = Истина;
	СтрокаУсловияОбъекта = "И (ГрафикРаботыРесурсов.Объект ССЫЛКА Документ.уатЗаявкаНаРемонт И ГрафикРаботыРесурсов.Объект НЕ В (&МассивДокументовОснований))";
	
	ТипыДокументов = 0;
	ЭлементОтбора = Построитель.Отбор.Найти("ВидДокумента");
	Если ЭлементОтбора<>Неопределено И ЭлементОтбора.Использование Тогда
		Если (ЭлементОтбора.Значение И ЭлементОтбора.ВидСравнения = ВидСравнения.Равно) ИЛИ (НЕ ЭлементОтбора.Значение И ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно) Тогда
			//СтрокаУсловияОбъекта = "И ГрафикРаботыРесурсов.Объект ССЫЛКА Документ.ЗаказНаряд";
			//ТипыДокументов = 1;
		Иначе
			СтрокаУсловияОбъекта = "И ГрафикРаботыРесурсов.Объект ССЫЛКА Документ.уатЗаявкаНаРемонт";
			ТипыДокументов = 2;
		КонецЕсли;
		ИскатьОснованияЗаказов = Ложь;
	КонецЕсли;
	
	СтрокаУсловия = СтрокаУсловия + Символы.ПС + СтрокаУсловияОбъекта;
	Для Каждого ТекОтбор Из Построитель.Отбор Цикл
		Если Не ТекОтбор.Использование Тогда Продолжить; КонецЕсли;
		
		Если Найти(ТекОтбор.ПутьКДанным, "Документ")=1 Тогда
			Если ТипыДокументов = 1 Тогда // только заказы
				//ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Регистратор КАК Документ.ЗаказНаряд)";
			ИначеЕсли ТипыДокументов = 2 Тогда // только заявки 
				ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Регистратор КАК Документ.уатЗаявкаНаРемонт)";
			Иначе
				ПутьКДанным = "ГрафикиРаботРесурсов.Регистратор";
			КонецЕсли;
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Документ", ПутьКДанным);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, Запрос.Параметры, ПутьКДанным);
			//Запрос.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "Мастер")=1 Тогда
			Если ТипыДокументов = 1 Тогда // только заказы
				//ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Регистратор КАК Документ.ЗаказНаряд).Мастер";
			ИначеЕсли ТипыДокументов = 2 Тогда // только заявки 
				ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Регистратор КАК Документ.уатЗаявкаНаРемонт).Мастер";
			Иначе
				ПутьКДанным = "ГрафикиРаботРесурсов.Регистратор.Мастер";
			КонецЕсли;
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Мастер", ПутьКДанным);
			//Запрос.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, Запрос.Параметры, ПутьКДанным);
		ИначеЕсли ТипыДокументов <> 2 И Найти(ТекОтбор.ПутьКДанным, "Состояние")=1 Тогда
			//ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Состояние",
			//	"ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Регистратор КАК Документ.ЗаказНаряд).Состояние");
			//СтрокаУсловияСостояния = отСформироватьСтрокуОтбора(ТекОтбор, Запрос.Параметры, ПутьКДанным);
			//СтрокаУсловия=СтрокаУсловия+Символы.ПС+"И (ГрафикиРаботРесурсов.Объект ССЫЛКА Документ.ЗаявкаНаРемонт
			//	ИЛИ "+СтрокаУсловияСостояния+")";
			//Запрос.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблицЗагрузки = Новый МенеджерВременныхТаблиц;
	
	ЕстьЗаказыПоЦеху = уатОбщегоНазначения_проф.кпПолучитьОбъектыИзГрафикаРаботыРесурсов(Цех, Справочники.уатСотрудники.ПустаяСсылка(), ,НачалоДня(Дата),КонецДня(Дата),,Ложь,0,МенеджерВременныхТаблицЗагрузки);
	
	Если ЕстьЗаказыПоЦеху Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ГрафикРаботыРесурсов.Объект КАК Объект,
		|	1 КАК ВидОбъекта
		|
		|ИЗ
		|	ГрафикиРаботРесурсов КАК ГрафикРаботыРесурсов
		|ГДЕ
		|	ГрафикРаботыРесурсов.НачалоРабочегоВремени <= &Время
		|	И ГрафикРаботыРесурсов.КонецРабочегоВремени >= &Время 
		|
		|" +СтрокаУсловия+ "
		|	
		|СГРУППИРОВАТЬ ПО
		|	ГрафикРаботыРесурсов.Объект";
		
		Запрос.Текст = ТекстЗапроса;
		Если ИскатьОснованияЗаказов Тогда
			Запрос.УстановитьПараметр("МассивДокументовОснований", МассивДокументовОснований);
		КонецЕсли;
		Запрос.УстановитьПараметр("Время", Дата(1,1,1,Час(Дата), Минута(Дата), Секунда(Дата)));
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицЗагрузки;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Представление = "Заявка на ремонт № "+СокрЛП(Выборка.Объект.Номер)+" от "+Формат(Выборка.Объект.Дата);
			УникальныйИдентификаторОбъекта = "Документ"+СтрЗаменить(Выборка.Объект.УникальныйИдентификатор(),"-","_");
			СписокДокументовОткрытия.Вставить(УникальныйИдентификаторОбъекта, Выборка.Объект);
			Если Выборка.ВидОбъекта = 1 Тогда
				НоваяКнопка = кнОткрытьЗнР.Добавить(УникальныйИдентификаторОбъекта, ТипКнопкиКоманднойПанели.Действие, Представление, ДействиеРасшифровки);
				НоваяКнопка.Пояснение = "Открыть документ: "+Представление;
				НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				НоваяКнопка.Картинка = КартинкаЗаявки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	МенеджерВременныхТаблицЗагрузки.Закрыть();
	
	Возврат СписокДокументовОткрытия;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИАГРАММОЙ ГАНТА

// вывести диаграмму с документами
Процедура ВывестиДиаграммуСДокументами(ВыборкаЦехов, ТочкаРодительПред=Неопределено, СостояниеОтображенияЦехов)
	флОтображатьПредставлениеДокумента = ПоляПредставленияДокументов.Найти("Документ", "Имя").Использование;
	
	Пока ВыборкаЦехов.Следующий() Цикл
		
		Если (Не ТочкаРодительПред=Неопределено) И ВыборкаЦехов.Цех=ТочкаРодительПред.Расшифровка Тогда
			ТочкаРодитель = ТочкаРодительПред;
		Иначе
			ТочкаРодитель = ДиаграммаГанта.УстановитьТочку(ВыборкаЦехов.ЦехПредставление, ?(ТочкаРодительПред = Неопределено, Неопределено, ТочкаРодительПред.Значение));
			ТочкаРодитель.ПриоритетЦвета	 = Истина;
			ТочкаРодитель.Цвет				 = ЦветаДиаграммы.ТемноБирюзовый;
			ТочкаРодитель.ДополнительныйЦвет = ЦветаДиаграммы.ТемноКрасный;
			ТочкаРодитель.Расшифровка		 = ВыборкаЦехов.Цех;
			ТочкаРодитель.Картинка			 = КартинкаЦеха;
		КонецЕсли;
		
		ВывестиДиаграммуСДокументами(ВыборкаЦехов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Цех"), ТочкаРодитель, СостояниеОтображенияЦехов);
		
		Если ВыборкаЦехов.ВидОбъекта =0  Тогда 
			Если СостояниеОтображенияЦехов[ВыборкаЦехов.Цех]=Истина Тогда
				ДиаграммаГанта.РазвернутьТочку(ТочкаРодитель, Ложь);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НомерЗаказа = 1;
		ВыборкаОбъектов = ВыборкаЦехов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Объект");
		ТекДерево = Новый ДеревоЗначений;
		ТекДерево.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
		ТекДерево.Колонки.Добавить("Конец",  Новый ОписаниеТипов("Дата"));
		Пока ВыборкаОбъектов.Следующий() Цикл
			ТочкаЗаголовок = Строка(НомерЗаказа) + ". "+ВыборкаОбъектов.ПредставлениеДокумента;
			Точка = ДиаграммаГанта.УстановитьТочку(ТочкаЗаголовок, ТочкаРодитель.Значение);
			Точка.ПриоритетЦвета = Истина;
			Точка.ДополнительныйЦвет = Новый Цвет(255, 0, 0);
			Точка.Цвет = ЦветаДиаграммы.Зеленый;
			Точка.Картинка = КартинкаЗаявки;
			Точка.Расшифровка = ВыборкаОбъектов.Объект;
			
			//удалим текст с документом, если он в представлении отключен
			Если НЕ флОтображатьПредставлениеДокумента Тогда
				ПозицияРазделитель = Найти(Точка.Значение, ";");
				Если ПозицияРазделитель = 0 Тогда //нет разделителя, значит в точке только представление документа
					Точка.Текст = " ";
				Иначе //есть разделитель, значит есть ТС, модель, мастер ...
					//порядковый номер заявки тоже надо оставить
					мПорядковыйНомер = Лев(Точка.Значение, Найти(Точка.Значение, "."));
					Точка.Текст = мПорядковыйНомер + " " + СокрЛП(Сред(Точка.Значение, ПозицияРазделитель+1));
				КонецЕсли;
			КонецЕсли;
			
			Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, СерияЗаказ);
			ЗначениеРодителя = ДиаграммаГанта.ПолучитьЗначение(ТочкаРодитель, СерияЗаказ);
			ВыборкаДетали = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ДатаНачалаПростоя = ВыборкаОбъектов.ДатаЗапускаРаботы;
			
			Работа = ТекДерево.Строки.Добавить();
			Работа.Начало = ВыборкаОбъектов.ДатаЗапускаРаботы;
			Работа.Конец = ВыборкаОбъектов.ДатаОкончанияРаботы;
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.КонецРабочегоПериода='00010101' Тогда Продолжить; КонецЕсли;
				// Рабочие интервалы
				НовыйИнтервал = Значение.Добавить();
				НовыйИнтервал.Начало = ВыборкаДетали.НачалоРабочегоПериода;
				НовыйИнтервал.Конец  = ВыборкаДетали.КонецРабочегоПериода;
				
				// Интервал простоя работы
				НовыйИнтервал = Значение.Добавить();
				НовыйИнтервал.Начало = ДатаНачалаПростоя;
				НовыйИнтервал.Конец  = ВыборкаДетали.НачалоРабочегоПериода;
				НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
				
				Если ФлагПоказыватьКоллизии Тогда
					НовыйИнтервал = ЗначениеРодителя.Добавить();
					НовыйИнтервал.Начало = ВыборкаДетали.НачалоРабочегоПериода;
					НовыйИнтервал.Конец  = ВыборкаДетали.КонецРабочегоПериода;
					
					// Интервал простоя работы
					НовыйИнтервал = ЗначениеРодителя.Добавить();
					НовыйИнтервал.Начало = ДатаНачалаПростоя;
					НовыйИнтервал.Конец  = ВыборкаДетали.НачалоРабочегоПериода;
					НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
				Иначе
					Интервал = Работа.Строки.Добавить();
					Интервал.Начало = ВыборкаДетали.НачалоРабочегоПериода;
					Интервал.Конец = ВыборкаДетали.КонецРабочегоПериода;
				КонецЕсли;
				
				ДатаНачалаПростоя = ВыборкаДетали.КонецРабочегоПериода;
			КонецЦикла;
			НовыйИнтервал = Значение.Добавить();
			НовыйИнтервал.Начало = ДатаНачалаПростоя;
			НовыйИнтервал.Конец  = ВыборкаОбъектов.ДатаОкончанияРаботы;
			НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
			Если ФлагПоказыватьКоллизии Тогда
				НовыйИнтервал = ЗначениеРодителя.Добавить();
				НовыйИнтервал.Начало = ДатаНачалаПростоя;
				НовыйИнтервал.Конец  = ВыборкаОбъектов.ДатаОкончанияРаботы;
				НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
			КонецЕсли;
			НомерЗаказа = НомерЗаказа + 1;
		КонецЦикла;
		
		Если Не ФлагПоказыватьКоллизии И ТекДерево.Строки.Количество()>0 Тогда
			ТекДерево.Строки.Сортировать("Начало ВОЗР, Конец УБЫВ", Истина);
			
			ДатаНачалаПростоя = ТекДерево.Строки[0].Начало;
			ТекДатаКон = ДатаНачалаПростоя;
			Для Каждого ТекОбъект Из ТекДерево.Строки Цикл
				Если ТекОбъект.Конец>ТекДатаКон Тогда
					Если ТекОбъект.Начало>ТекДатаКон Тогда
						НовыйИнтервал = ЗначениеРодителя.Добавить();
						НовыйИнтервал.Начало = ДатаНачалаПростоя;
						НовыйИнтервал.Конец  = ТекДатаКон;
						НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
						ДатаНачалаПростоя	 = ТекОбъект.Начало;
						Для Каждого ТекИнтервал Из ТекОбъект.Строки Цикл
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ТекИнтервал.Начало;
							НовыйИнтервал.Конец  = ТекИнтервал.Конец;
							
							// Интервал простоя работы
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ДатаНачалаПростоя;
							НовыйИнтервал.Конец  = ТекИнтервал.Начало;
							НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
							
							ДатаНачалаПростоя	 = ТекИнтервал.Конец;
						КонецЦикла;
					Иначе
						Для Каждого ТекИнтервал Из ТекОбъект.Строки Цикл
							Если ДатаНачалаПростоя>ТекИнтервал.Начало Тогда Продолжить; КонецЕсли;
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ТекИнтервал.Начало;
							НовыйИнтервал.Конец  = ТекИнтервал.Конец;
							
							// Интервал простоя работы
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ДатаНачалаПростоя;
							НовыйИнтервал.Конец  = ТекИнтервал.Начало;
							НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
							
							ДатаНачалаПростоя	 = ТекИнтервал.Конец;
						КонецЦикла;
					КонецЕсли;
					
					ТекДатаКон=ТекОбъект.Конец;
				КонецЕсли;
			КонецЦикла;
			НовыйИнтервал = ЗначениеРодителя.Добавить();
			НовыйИнтервал.Начало = ДатаНачалаПростоя;
			НовыйИнтервал.Конец  = ТекДатаКон;
			НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
		КонецЕсли;
		Если СостояниеОтображенияЦехов[ВыборкаЦехов.Цех]=Истина Тогда
			ДиаграммаГанта.РазвернутьТочку(ТочкаРодитель, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// вывести диаграмму
Процедура ВывестиДиаграмму(ВыборкаЦехов, ТочкаРодительПред=Неопределено, СостояниеОтображенияЦехов)
	
	Пока ВыборкаЦехов.Следующий() Цикл
		Если (Не ТочкаРодительПред=Неопределено) И ВыборкаЦехов.Цех=ТочкаРодительПред.Расшифровка Тогда
			ТочкаРодитель = ТочкаРодительПред;
		Иначе
			ТочкаРодитель = ДиаграммаГанта.УстановитьТочку(ВыборкаЦехов.ЦехПредставление, ?(ТочкаРодительПред = Неопределено, Неопределено, ТочкаРодительПред.Значение));
			ТочкаРодитель.ПриоритетЦвета	 = Истина;
			ТочкаРодитель.Цвет				 = ЦветаДиаграммы.ТемноБирюзовый;
			ТочкаРодитель.ДополнительныйЦвет = ЦветаДиаграммы.ТемноКрасный;
			ТочкаРодитель.Расшифровка		 = ВыборкаЦехов.Цех;
			ТочкаРодитель.Картинка			 = КартинкаЦеха;
		КонецЕсли;
		
		ВывестиДиаграмму(ВыборкаЦехов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Цех"), ТочкаРодитель, СостояниеОтображенияЦехов);
		
		Если ВыборкаЦехов.ВидОбъекта =0  Тогда 
			Если СостояниеОтображенияЦехов[ВыборкаЦехов.Цех]=Истина Тогда
				ДиаграммаГанта.РазвернутьТочку(ТочкаРодитель, Ложь);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ВыборкаОбъектов = ВыборкаЦехов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Объект");
		ТекДерево = Новый ДеревоЗначений;
		ТекДерево.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
		ТекДерево.Колонки.Добавить("Конец",  Новый ОписаниеТипов("Дата"));
		Пока ВыборкаОбъектов.Следующий() Цикл
			ЗначениеРодителя = ДиаграммаГанта.ПолучитьЗначение(ТочкаРодитель, СерияЗаказ);
			ВыборкаДетали = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ДатаНачалаПростоя = ВыборкаОбъектов.ДатаЗапускаРаботы;
			Работа = ТекДерево.Строки.Добавить();
			Работа.Начало = ВыборкаОбъектов.ДатаЗапускаРаботы;
			Работа.Конец = ВыборкаОбъектов.ДатаОкончанияРаботы;
			Пока ВыборкаДетали.Следующий() Цикл
				Если ВыборкаДетали.КонецРабочегоПериода='00010101' Тогда Продолжить; КонецЕсли;
				Если ФлагПоказыватьКоллизии Тогда
					// Рабочие интервалы
					НовыйИнтервал = ЗначениеРодителя.Добавить();
					НовыйИнтервал.Начало = ВыборкаДетали.НачалоРабочегоПериода;
					НовыйИнтервал.Конец  = ВыборкаДетали.КонецРабочегоПериода;
					// Интервал простоя работы
					НовыйИнтервал = ЗначениеРодителя.Добавить();
					НовыйИнтервал.Начало = ДатаНачалаПростоя;
					НовыйИнтервал.Конец  = ВыборкаДетали.НачалоРабочегоПериода;
					НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
				Иначе
					Интервал = Работа.Строки.Добавить();
					Интервал.Начало = ВыборкаДетали.НачалоРабочегоПериода;
					Интервал.Конец = ВыборкаДетали.КонецРабочегоПериода;
				КонецЕсли;
				
				ДатаНачалаПростоя = ВыборкаДетали.КонецРабочегоПериода;
			КонецЦикла;
			Если ФлагПоказыватьКоллизии Тогда
				НовыйИнтервал = ЗначениеРодителя.Добавить();
				НовыйИнтервал.Начало = ДатаНачалаПростоя;
				НовыйИнтервал.Конец  = ВыборкаОбъектов.ДатаОкончанияРаботы;
				НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ФлагПоказыватьКоллизии И ТекДерево.Строки.Количество()>0 Тогда
			ТекДерево.Строки.Сортировать("Начало ВОЗР, Конец УБЫВ", Истина);
			
			ДатаНачалаПростоя = ТекДерево.Строки[0].Начало;
			ТекДатаКон = ДатаНачалаПростоя;
			Для Каждого ТекОбъект Из ТекДерево.Строки Цикл
				Если ТекОбъект.Конец>ТекДатаКон Тогда
					Если ТекОбъект.Начало>ТекДатаКон Тогда
						НовыйИнтервал = ЗначениеРодителя.Добавить();
						НовыйИнтервал.Начало = ДатаНачалаПростоя;
						НовыйИнтервал.Конец  = ТекДатаКон;
						НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
						ДатаНачалаПростоя	 = ТекОбъект.Начало;
						Для Каждого ТекИнтервал Из ТекОбъект.Строки Цикл
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ТекИнтервал.Начало;
							НовыйИнтервал.Конец  = ТекИнтервал.Конец;
							
							// Интервал простоя работы
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ДатаНачалаПростоя;
							НовыйИнтервал.Конец  = ТекИнтервал.Начало;
							НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
							
							ДатаНачалаПростоя	 = ТекИнтервал.Конец;
						КонецЦикла;
					Иначе
						Для Каждого ТекИнтервал Из ТекОбъект.Строки Цикл
							Если ДатаНачалаПростоя>ТекИнтервал.Начало Тогда Продолжить; КонецЕсли;
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ТекИнтервал.Начало;
							НовыйИнтервал.Конец  = ТекИнтервал.Конец;
							
							// Интервал простоя работы
							НовыйИнтервал = ЗначениеРодителя.Добавить();
							НовыйИнтервал.Начало = ДатаНачалаПростоя;
							НовыйИнтервал.Конец  = ТекИнтервал.Начало;
							НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
							
							ДатаНачалаПростоя	 = ТекИнтервал.Конец;
						КонецЦикла;
					КонецЕсли;
					
					ТекДатаКон=ТекОбъект.Конец;
				КонецЕсли;
			КонецЦикла;
			НовыйИнтервал = ЗначениеРодителя.Добавить();
			НовыйИнтервал.Начало = ДатаНачалаПростоя;
			НовыйИнтервал.Конец  = ТекДатаКон;
			НовыйИнтервал.Цвет	 = ЦветаДиаграммы.СерыйЦвет;
		КонецЕсли;
		Если СостояниеОтображенияЦехов[ВыборкаЦехов.Цех]=Истина Тогда
			ДиаграммаГанта.РазвернутьТочку(ТочкаРодитель, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// получить данные по загрузке
Функция ПолучитьДанныеПоЗагрузке()
	
	СотрудникПустаяСсылка = Справочники.уатСотрудники.ПустаяСсылка();
	
	ТаблицаЗагрузкиЦехов = Новый ТаблицаЗначений;
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументСсылка.уатЗаявкаНаРемонт"));
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("ВидОбъекта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("ДатаЗапускаРаботы", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("ДатаОкончанияРаботы", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("НачалоРабочегоПериода", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("КонецРабочегоПериода", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаЗагрузкиЦехов.Колонки.Добавить("ВремяВыполненияРабот", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	НоваяСтрока = ТаблицаЗагрузкиЦехов.Добавить();
	НоваяСтрока.Объект = Документы.уатЗаявкаНаРемонт.ПустаяСсылка();
	
	ИскатьОснованияЗаказов = Истина;
	СтрокаУсловия = "ГДЕ 
	| (ВЫБОР
	|	КОГДА ГрафикиРаботРесурсов.Объект ССЫЛКА Документ.уатЗаявкаНаРемонт ТОГДА
	|		НЕ ГрафикиРаботРесурсов.Объект В (&МассивДокументовОснований)
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ)";
	
	ТипыДокументов = 0;
	ЭлементОтбора = Построитель.Отбор.Найти("ВидДокумента");
	Если ЭлементОтбора<>Неопределено И ЭлементОтбора.Использование Тогда
		Если (ЭлементОтбора.Значение И ЭлементОтбора.ВидСравнения = ВидСравнения.Равно) ИЛИ (НЕ ЭлементОтбора.Значение И ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно) Тогда
			//СтрокаУсловия = "ГДЕ ГрафикиРаботРесурсов.Объект ССЫЛКА Документ.ЗаказНаряд";
			//ТипыДокументов = 1;
		Иначе
			СтрокаУсловия = "ГДЕ ГрафикиРаботРесурсов.Объект ССЫЛКА Документ.ЗаявкаНаРемонт";
			ТипыДокументов = 2;
		КонецЕсли;
		ИскатьОснованияЗаказов = Ложь;
	КонецЕсли;
	
	//Если ИскатьОснованияЗаказов Тогда
	//	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	//	|		ВЫРАЗИТЬ(ГрафикРаботыРесурсов.Объект КАК Документ.ЗаказНаряд).ДокументОснование КАК ДокументОснование
	//	|		ИЗ
	//	|		РегистрСведений.ГрафикРаботыРесурсов КАК ГрафикРаботыРесурсов
	//	|		ГДЕ ГрафикРаботыРесурсов.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	//	|		И ГрафикРаботыРесурсов.Объект ССЫЛКА Документ.ЗаказНаряд
	//	|		И ВЫРАЗИТЬ(ГрафикРаботыРесурсов.Объект КАК Документ.ЗаказНаряд).ДокументОснование
	//		ССЫЛКА Документ.уатЗаявкаНаРемонт
	//	|		И Не ВЫРАЗИТЬ(ГрафикРаботыРесурсов.Объект КАК Документ.ЗаказНаряд).ДокументОснование
	//		= ЗНАЧЕНИЕ(Документ.ЗаявкаНаРемонт.ПустаяСсылка)";
	//	
	//	Запрос = Новый Запрос(ТекстЗапроса);
	//	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	//	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаКонца));
	//	МассивДокументовОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	//Иначе
		МассивДокументовОснований.Очистить();
	//КонецЕсли;
	
	СтрокаУсловияЦеха="ГДЕ 
	|	Не Цеха.ПометкаУдаления";
	ЗапросЦехов = Новый Запрос();
	ЗапросЗагрузки = Новый Запрос;
	Для Каждого ТекОтбор Из Построитель.Отбор Цикл
		Если Не ТекОтбор.Использование Тогда Продолжить; КонецЕсли;
		
		Если ТекОтбор.ПутьКДанным = "ВидДокумента" Тогда
			Продолжить;
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "Цех")=1 Тогда
			ПутьКДанным = "Цеха."+СтрЗаменить(СтрЗаменить(ТекОтбор.ПутьКДанным, "Цех.", ""), "Цех", "Ссылка");
			//ЗапросЦехов.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловияЦеха=СтрокаУсловияЦеха+Символы.ПС + "	И " + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, ЗапросЦехов.Параметры, ПутьКДанным);
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "Документ")=1 Тогда
			Если ТипыДокументов = 1 Тогда // только заказы
				//ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Объект КАК Документ.ЗаказНаряд)";
			ИначеЕсли ТипыДокументов = 2 Тогда // только заявки 
				ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Объект КАК Документ.уатЗаявкаНаРемонт)";
			Иначе
				ПутьКДанным = "ГрафикиРаботРесурсов.Объект";
			КонецЕсли;
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Документ", ПутьКДанным);
			//ЗапросЗагрузки.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, ЗапросЗагрузки.Параметры, ПутьКДанным);
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "Мастер")=1 Тогда
			Если ТипыДокументов = 1 Тогда // только заказы
				//ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Объект КАК Документ.ЗаказНаряд).Мастер";
			ИначеЕсли ТипыДокументов = 2 Тогда // только заявки 
				ПутьКДанным = "ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Объект КАК Документ.уатЗаявкаНаРемонт).Мастер";
			Иначе
				ПутьКДанным = "ГрафикиРаботРесурсов.Объект.Мастер";
			КонецЕсли;
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Мастер", ПутьКДанным);
			//ЗапросЗагрузки.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, ЗапросЗагрузки.Параметры, ПутьКДанным);
		ИначеЕсли ТипыДокументов <> 2 И Найти(ТекОтбор.ПутьКДанным, "Состояние") = 1 Тогда
			//ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Состояние",
			//	"ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Объект КАК Документ.ЗаказНаряд).Состояние");
			//СтрокаУсловияСостояния=отСформироватьСтрокуОтбора(ТекОтбор, ЗапросЗагрузки.Параметры, ПутьКДанным);
			//СтрокаУсловия=СтрокаУсловия+Символы.ПС+"И (ГрафикиРаботРесурсов.Объект ССЫЛКА Документ.ЗаявкаНаРемонт
			//	ИЛИ "+СтрокаУсловияСостояния+")";
			//ЗапросЗагрузки.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "Организация")=1 Тогда
			ПутьКДанным = "ГрафикиРаботРесурсов.Объект.Организация";
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Организация", ПутьКДанным);
			//ЗапросЗагрузки.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, ЗапросЗагрузки.Параметры, ПутьКДанным);
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "ТипТС")=1 Тогда
			ПутьКДанным = "ГрафикиРаботРесурсов.Объект.ТС.ТипТС";
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "ТипТС", ПутьКДанным);
			//ЗапросЗагрузки.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, ЗапросЗагрузки.Параметры, ПутьКДанным);
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "Модель")=1 Тогда
			ПутьКДанным = "ГрафикиРаботРесурсов.Объект.ТС.Модель";
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "Модель", ПутьКДанным);
			//ЗапросЗагрузки.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, ЗапросЗагрузки.Параметры, ПутьКДанным);
		ИначеЕсли Найти(ТекОтбор.ПутьКДанным, "ТС")=1 Тогда
			ПутьКДанным = "ГрафикиРаботРесурсов.Объект.ТС";
			ПутьКДанным = СтрЗаменить(ТекОтбор.ПутьКДанным, "ТС", ПутьКДанным);
			//ЗапросЗагрузки.УстановитьПараметр("Выб"+ТекОтбор.Имя, ТекОтбор.Значение);
			СтрокаУсловия=СтрокаУсловия + " И "+ Символы.ПС + уатОбщегоНазначения_проф.СформироватьСтрокуОтбора(ТекОтбор, ЗапросЗагрузки.Параметры, ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросаСГрафиком = "
	|//ГРАФИКИ ЗАНЯТОСТИ РЕСУРСОВ
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ГрафикиРаботРесурсов.Ресурс КАК Справочник.уатЦеха) КАК Ресурс,
	|	ГрафикиРаботРесурсов.Объект КАК Объект,
	|	ГрафикиРаботРесурсов.Дата КАК Дата,
	|	ГрафикиРаботРесурсов.НачалоРабочегоВремени КАК НачалоРабочегоВремени,
	|	ГрафикиРаботРесурсов.КонецРабочегоВремени КАК КонецРабочегоВремени
	|
	|ПОМЕСТИТЬ ГрафикиЗанятостиРесурсов
	|ИЗ
	|	ГрафикиРаботРесурсов КАК ГрафикиРаботРесурсов
	|" +СтрокаУсловия+ "
	|;
	|/////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГрафикиРаботРесурсов
	|;
	|/////////////////////////////////////////////////////////
	|//ГРАФИКИ ПРЕДЕЛОВ ЗАНЯТОСТИ РЕСУРСОВ
	|ВЫБРАТЬ
	|	ГрафикиЗанятостиРесурсов.Ресурс КАК Ресурс,
	|	ГрафикиЗанятостиРесурсов.Объект КАК Объект,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ГрафикиЗанятостиРесурсов.Дата, ЧАС, ЧАС(ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени)), МИНУТА, МИНУТА(ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени)), СЕКУНДА, СЕКУНДА(ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени))) КАК НачалоРабочегоВремени,
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ГрафикиЗанятостиРесурсов.Дата, ЧАС, ЧАС(ГрафикиЗанятостиРесурсов.КонецРабочегоВремени)), МИНУТА, МИНУТА(ГрафикиЗанятостиРесурсов.КонецРабочегоВремени)), СЕКУНДА, СЕКУНДА(ГрафикиЗанятостиРесурсов.КонецРабочегоВремени))) КАК КонецРабочегоВремени
	|
	|ПОМЕСТИТЬ ТаблицаПределовЗанятостиРесурсов
	|
	|ИЗ
	|	ГрафикиЗанятостиРесурсов КАК ГрафикиЗанятостиРесурсов
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиЗанятостиРесурсов.Ресурс,
	|	ГрафикиЗанятостиРесурсов.Объект
	|;
	|/////////////////////////////////////////////////////////
	|//РАСПИСАНИЕ ЦЕХОВ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИнтервалов.Дата КАК Дата,
	|	ТаблицаИнтервалов.НачалоРабочегоВремени КАК НачалоРабочегоВремени,
	|	ТаблицаИнтервалов.КонецРабочегоВремени КАК КонецРабочегоВремени
	|
	|ПОМЕСТИТЬ
	|	РасписанияЦехов
	|ИЗ
	|&ТаблицаИнтервалов КАК ТаблицаИнтервалов
	|;
	|/////////////////////////////////////////////////////////
	|//ТАБЛИЦА ИНТЕРВАЛОВ РАБОТ
	|ВЫБРАТЬ 
	|	ТаблицаИнтерваловРабот.Ресурс КАК Ресурс,
	|	### КАК ИндексЦеха,
	|	ТаблицаИнтерваловРабот.Объект КАК Объект,
	|	0 КАК ВремяВыполненияРабот,
	|	ТаблицаИнтерваловРабот.Дата КАК Дата,
	|	ТаблицаИнтерваловРабот.ВидОбъекта КАК ВидОбъекта,
	|	ТаблицаИнтерваловРабот.ДатаЗапускаРаботы КАК ДатаЗапускаРаботы,
	|	ТаблицаИнтерваловРабот.ДатаОкончанияРаботы КАК ДатаОкончанияРаботы,
	|	ВЫБОР 
	|		КОГДА ТаблицаИнтерваловРабот.Дата=ДатаВремя(1,1,1) ТОГДА
	|			ТаблицаИнтерваловРабот.Дата
	|		ИНАЧЕ
	|			ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ТаблицаИнтерваловРабот.Дата, ЧАС, ЧАС(ТаблицаИнтерваловРабот.НачалоРабочегоВремени)), МИНУТА, МИНУТА(ТаблицаИнтерваловРабот.НачалоРабочегоВремени)), СЕКУНДА, СЕКУНДА(ТаблицаИнтерваловРабот.НачалоРабочегоВремени))
	|	КОНЕЦ КАК НачалоРабочегоПериода,
	|	ВЫБОР 
	|		КОГДА ТаблицаИнтерваловРабот.Дата=ДатаВремя(1,1,1) ТОГДА
	|			ТаблицаИнтерваловРабот.Дата
	|		ИНАЧЕ
	|			ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ТаблицаИнтерваловРабот.Дата, ЧАС, ЧАС(ТаблицаИнтерваловРабот.КонецРабочегоВремени)), МИНУТА, МИНУТА(ТаблицаИнтерваловРабот.КонецРабочегоВремени)), СЕКУНДА, СЕКУНДА(ТаблицаИнтерваловРабот.КонецРабочегоВремени))
	|	КОНЕЦ КАК КонецРабочегоПериода
	|
	|ПОМЕСТИТЬ ТаблицаРаботРесурса###
	|
	|ИЗ (ВЫБРАТЬ
	|	ГрафикиЗанятостиРесурсов.Ресурс КАК Ресурс,
	|	ГрафикиЗанятостиРесурсов.Объект КАК Объект,
	|	1 КАК ВидОбъекта,
	|	МИНИМУМ(ТаблицаПределовЗанятостиРесурсов.НачалоРабочегоВремени) КАК ДатаЗапускаРаботы,
	|	МАКСИМУМ(ТаблицаПределовЗанятостиРесурсов.КонецРабочегоВремени) КАК ДатаОкончанияРаботы,
	|	ЕСТЬNULL(РасписанияЦехов.Дата, ДатаВремя(1,1,1)) КАК Дата,
	|	ВЫБОР
	|		КОГДА РасписанияЦехов.НачалоРабочегоВремени ЕСТЬ NULL ТОГДА
	|			ДатаВремя(1,1,1)
	|		КОГДА ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени>РасписанияЦехов.НачалоРабочегоВремени ТОГДА
	|			ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени 
	|		ИНАЧЕ
	|			РасписанияЦехов.НачалоРабочегоВремени
	|	КОНЕЦ КАК НачалоРабочегоВремени,
	|	ВЫБОР 
	|		КОГДА РасписанияЦехов.КонецРабочегоВремени ЕСТЬ NULL ТОГДА
	|			ДатаВремя(1,1,1)
	|		КОГДА РасписанияЦехов.КонецРабочегоВремени>ГрафикиЗанятостиРесурсов.КонецРабочегоВремени ТОГДА
	|			ГрафикиЗанятостиРесурсов.КонецРабочегоВремени
	|		ИНАЧЕ
	|			РасписанияЦехов.КонецРабочегоВремени
	|	КОНЕЦ КАК КонецРабочегоВремени
	|
	|ИЗ
	|	ГрафикиЗанятостиРесурсов КАК ГрафикиЗанятостиРесурсов
	|
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПределовЗанятостиРесурсов КАК ТаблицаПределовЗанятостиРесурсов
	|  ПО ГрафикиЗанятостиРесурсов.Объект = ТаблицаПределовЗанятостиРесурсов.Объект
	|ЛЕВОЕ СОЕДИНЕНИЕ РасписанияЦехов КАК РасписанияЦехов
	| 	ПО ГрафикиЗанятостиРесурсов.Дата = РасписанияЦехов.Дата
	|	И  ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени<РасписанияЦехов.КонецРабочегоВремени
	|	И  ГрафикиЗанятостиРесурсов.КонецРабочегоВремени>РасписанияЦехов.НачалоРабочегоВремени
	|	
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиЗанятостиРесурсов.Ресурс,
	|	ГрафикиЗанятостиРесурсов.Объект,
	|	ЕСТЬNULL(РасписанияЦехов.Дата, ДатаВремя(1,1,1)),
	|	ВЫБОР
	|		КОГДА РасписанияЦехов.НачалоРабочегоВремени ЕСТЬ NULL ТОГДА
	|			ДатаВремя(1,1,1)
	|		КОГДА ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени>РасписанияЦехов.НачалоРабочегоВремени ТОГДА
	|			ГрафикиЗанятостиРесурсов.НачалоРабочегоВремени 
	|		ИНАЧЕ
	|			РасписанияЦехов.НачалоРабочегоВремени
	|	КОНЕЦ,
	|	ВЫБОР 
	|		КОГДА РасписанияЦехов.КонецРабочегоВремени ЕСТЬ NULL ТОГДА
	|			ДатаВремя(1,1,1)
	|		КОГДА РасписанияЦехов.КонецРабочегоВремени>ГрафикиЗанятостиРесурсов.КонецРабочегоВремени ТОГДА
	|			ГрафикиЗанятостиРесурсов.КонецРабочегоВремени
	|		ИНАЧЕ
	|			РасписанияЦехов.КонецРабочегоВремени
	|	КОНЕЦ) КАК ТаблицаИнтерваловРабот
	|;
	|/////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГрафикиЗанятостиРесурсов
	|;
	|/////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПределовЗанятостиРесурсов
	|;
	|/////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасписанияЦехов
	|";
	
	Если ИскатьОснованияЗаказов Тогда
		ЗапросЗагрузки.УстановитьПараметр("МассивДокументовОснований", МассивДокументовОснований);
	КонецЕсли;
	
	МенеджерВременныхТаблицЗагрузки = Новый МенеджерВременныхТаблиц;
	ЗапросЗагрузки.МенеджерВременныхТаблиц = МенеджерВременныхТаблицЗагрузки;

	//Получаем список цехов
	ТекстЗапросаЦехов = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Цеха.Ссылка КАК Цех,
	|	Цеха.ГрафикРаботы
	|
	|ИЗ
	|	Справочник.уатЦеха КАК Цеха
	|" + СтрокаУсловияЦеха+"
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ЗапросЦехов.Текст = ТекстЗапросаЦехов;
	
	ТаблицаЦехов = Новый ТаблицаЗначений;
	ТаблицаЦехов.Колонки.Добавить("Цех");
	ТаблицаЦехов.Колонки.Добавить("ГрафикРаботы");
	
	ПолучитьИндексированныйСписокЦехов(ТаблицаЦехов, ЗапросЦехов.Выполнить());
	
	Если ТаблицаЦехов.Количество()=0 Тогда Возврат Неопределено КонецЕсли;
	
	ИтоговыйЗапрос = Новый Запрос();
	ИтоговыйЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицЗагрузки;
	ИтоговыйЗапрос.УстановитьПараметр("ТаблицаЗагрузкиЦехов", ТаблицаЗагрузкиЦехов);
	
	ТекстРаботРесурсов = "";
	ТекстУничтоженияЗапросов = "";
	// перебор цехов и получения рабочих интервалов		
	Для Каждого ТекСтрокаЦеха Из ТаблицаЦехов Цикл
		
		ТекущийЦех = ТекСтрокаЦеха.Цех;
		НайденныйГрафик = ТекСтрокаЦеха.ГрафикРаботы;
		Если НЕ ЗначениеЗаполнено(НайденныйГрафик) Тогда
			ТекРодитель = ТекущийЦех.Родитель;
			НайденныйГрафик = ТекРодитель.ГрафикРаботы;
			Пока ЗначениеЗаполнено(ТекРодитель) И (НЕ ЗначениеЗаполнено(НайденныйГрафик)) Цикл
				ТекРодитель = ТекРодитель.Родитель;
				НайденныйГрафик = ТекРодитель.ГрафикРаботы;
			КонецЦикла;
		КонецЕсли;
		ИндексЦеха = ТаблицаЦехов.Индекс(ТекСтрокаЦеха);
		ЕстьЗаказыПоЦеху = уатОбщегоНазначения_проф.кпПолучитьОбъектыИзГрафикаРаботыРесурсов(ТекущийЦех, СотрудникПустаяСсылка, , НачалоДня(ДатаНачала), КонецДня(ДатаКонца),,Ложь,0,МенеджерВременныхТаблицЗагрузки);
		НетЗаписей=Ложь;
		Если ЕстьЗаказыПоЦеху Тогда
			ГрафикРесурса = уатОбщегоНазначения_проф.кпПолучитьГрафик(НайденныйГрафик, ДатаНачала, КонецДня(ДатаКонца));
			ЗапросЗагрузки.УстановитьПараметр("ТаблицаИнтервалов", ГрафикРесурса);
			ЗапросЗагрузки.Текст = СтрЗаменить(ТекстЗапросаСГрафиком, "###", ИндексЦеха);
			Если ЗапросЗагрузки.ВыполнитьПакет()[4].Выгрузить()[0].Количество>0 Тогда
				ТекстРаботРесурсов = ТекстРаботРесурсов+?(ТекстРаботРесурсов="","",Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ")+"
				|ВЫБРАТЬ 
				|	ТаблицаРаботРесурса.Ресурс КАК Ресурс,
				|	ТаблицаРаботРесурса.ИндексЦеха КАК ИндексЦеха,
				|	ТаблицаРаботРесурса.Объект КАК Объект,
				|	ТаблицаРаботРесурса.ВремяВыполненияРабот КАК ВремяВыполненияРабот,
				|	ТаблицаРаботРесурса.Дата КАК Дата,
				|	ТаблицаРаботРесурса.ВидОбъекта КАК ВидОбъекта,
				|	ТаблицаРаботРесурса.ДатаЗапускаРаботы КАК ДатаЗапускаРаботы,
				|	ТаблицаРаботРесурса.ДатаОкончанияРаботы КАК ДатаОкончанияРаботы,
				|	ТаблицаРаботРесурса.НачалоРабочегоПериода КАК НачалоРабочегоПериода,
				|	ТаблицаРаботРесурса.КонецРабочегоПериода КАК КонецРабочегоПериода
				|
				|ИЗ ТаблицаРаботРесурса"+ИндексЦеха+" КАК ТаблицаРаботРесурса";
				ТекстУничтоженияЗапросов = ТекстУничтоженияЗапросов+Символы.ПС+";"+Символы.ПС+"УНИЧТОЖИТЬ ТаблицаРаботРесурса"+ИндексЦеха;
			Иначе
				НетЗаписей=Истина;
			КонецЕсли;
		Иначе
			ЗапросЗагрузки.Текст = "	УНИЧТОЖИТЬ ГрафикиРаботРесурсов";
			ЗапросЗагрузки.Выполнить();
			НетЗаписей=Истина;
		КонецЕсли;
		Если НетЗаписей Тогда
			ТекстРаботРесурсов = ТекстРаботРесурсов+?(ТекстРаботРесурсов="","",Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ")+"
			|ВЫБРАТЬ 
			|	ВЫРАЗИТЬ(&Ресурс"+ИндексЦеха+" КАК Справочник.уатЦеха) КАК Ресурс,
			|	ВЫРАЗИТЬ("+ИндексЦеха+" КАК Число(10,0)) КАК ИндексЦеха,
			|	ТаблицаЗагрузкиЦехов.Объект КАК Объект,
			|	ТаблицаЗагрузкиЦехов.ВремяВыполненияРабот КАК ВремяВыполненияРабот,
			|	ТаблицаЗагрузкиЦехов.Дата КАК Дата,
			|	ТаблицаЗагрузкиЦехов.ВидОбъекта КАК ВидОбъекта,
			|	ТаблицаЗагрузкиЦехов.ДатаЗапускаРаботы КАК ДатаЗапускаРаботы,
			|	ТаблицаЗагрузкиЦехов.ДатаОкончанияРаботы КАК ДатаОкончанияРаботы,
			|	ТаблицаЗагрузкиЦехов.НачалоРабочегоПериода КАК НачалоРабочегоПериода,
			|	ТаблицаЗагрузкиЦехов.КонецРабочегоПериода КАК КонецРабочегоПериода";
			ИтоговыйЗапрос.УстановитьПараметр("Ресурс"+ИндексЦеха, ТекущийЦех);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "";
	ТекстДополнительныхПолей = "";
	ТекстПромежуточныхПредставлений = "";
	ТекстПредставлениеДокумента = "";
	ТекстДополнительныхСоединений = "";
	Если ФлагПоказыватьДокументы Тогда
		ТекстДополнительныхПолей = ","+Символы.ПС+"	""ЗнР"" КАК ВидДокумента,
		|	ТаблицаРезультата.Объект.Дата КАК ОбъектДата";
		ТекстПромежуточныхПредставлений = ","+Символы.ПС+"ТаблицаРаботРесурса.ВидДокумента КАК ВидДокумента,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.ОбъектДата) КАК ДатаДокумента";
		ТекстПредставлениеДокумента = ",
		| МАКСИМУМ(ВидДокумента) + "" "" + МАКСИМУМ(ДатаДокумента)";
		
		Для Каждого ТекПоле Из ПоляПредставленияДокументов Цикл
			Если Не ТекПоле.Использование Тогда Продолжить; КонецЕсли;
			Если ТекПоле.Имя = "Состояние" Тогда
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + ","+Символы.ПС+" """" КАК Состояние";
				ТекстПромежуточныхПредставлений = ТекстПромежуточныхПредставлений + ","+Символы.ПС+"	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.Объект.Состояние) КАК Состояние";
				ТекстПредставлениеДокумента = ТекстПредставлениеДокумента+" + ВЫБОР КОГДА МАКСИМУМ(Состояние) = """" ТОГДА """" ИНАЧЕ ""; "" + МАКСИМУМ(Состояние) КОНЕЦ";
			//ИначеЕсли ТекПоле.Имя = "Заказчик" Тогда
			//	ТекстДополнительныхПолей = ТекстДополнительныхПолей + ","+Символы.ПС
			//		+"	ТаблицаРезультата.Объект.Заказчик КАК Заказчик";
			//	ТекстПромежуточныхПредставлений = ТекстПромежуточныхПредставлений + ","+Символы.ПС
			//		+"	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.Заказчик) КАК Заказчик";
			//	ТекстПредставлениеДокумента = ТекстПредставлениеДокумента+" + ""; Зак.: "" + МАКСИМУМ(Заказчик)";
			ИначеЕсли ТекПоле.Имя = "Модель" Тогда
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + ","+Символы.ПС+"	ТаблицаРезультата.Объект.ТС.Модель КАК Модель";
				ТекстПромежуточныхПредставлений = ТекстПромежуточныхПредставлений + ","+Символы.ПС+"	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.Модель) КАК Модель";
				ТекстПредставлениеДокумента = ТекстПредставлениеДокумента+" + ""; "" + МАКСИМУМ(Модель)";
				//ТекстДополнительныхСоединений = "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(,
				//	ВидЗначения=ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)) КАК АвтомобилиСрезПоследних
				//|	ПО  ТаблицаРезультата.Объект.Автомобиль ССЫЛКА Справочник.Автомобили И
				//|		ВЫРАЗИТЬ(ТаблицаРезультата.Объект.ТС КАК Справочник.уатТС) = АвтомобилиСрезПоследних.Автомобиль";
			ИначеЕсли ТекПоле.Имя = "ТС" Тогда
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + ","+Символы.ПС+"	ТаблицаРезультата.Объект.ТС КАК ТС,
				|	ТаблицаРезультата.Объект.ТС." + ?(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер), "ГосударственныйНомер", "ГаражныйНомер") + " КАК ГосНомер";
				ТекстПромежуточныхПредставлений = ТекстПромежуточныхПредставлений + ","+Символы.ПС+"	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.ТС) КАК ТС,
				|	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.Объект.ТС." + ?(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер), "ГосударственныйНомер", "ГаражныйНомер") + ") КАК ГосНомер";
				ТекстПредставлениеДокумента = ТекстПредставлениеДокумента+" + ""; "" + МАКСИМУМ(ГосНомер)";
				//ТекстДополнительныхСоединений = "	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Автомобили.СрезПоследних(,
				//	ВидЗначения=ЗНАЧЕНИЕ(Перечисление.ДополнительнаяИнформацияАвтомобилей.ГосНомер)) КАК АвтомобилиСрезПоследних
				//|	ПО  ТаблицаРезультата.Объект.Автомобиль ССЫЛКА Справочник.Автомобили И
				//|		ВЫРАЗИТЬ(ТаблицаРезультата.Объект.ТС КАК Справочник.уатТС) = АвтомобилиСрезПоследних.Автомобиль";
			ИначеЕсли ТекПоле.Имя = "Мастер" Тогда
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + ","+Символы.ПС+"	ТаблицаРезультата.Объект.Мастер КАК Мастер";
				ТекстПромежуточныхПредставлений = ТекстПромежуточныхПредставлений + ","+Символы.ПС+"	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.Объект.Мастер) КАК Мастер";
				ТекстПредставлениеДокумента = ТекстПредставлениеДокумента+" + ""; "" + МАКСИМУМ(Мастер)";
			ИначеЕсли ТекПоле.Имя = "ПричинаОбращения" Тогда
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + ","+Символы.ПС+"	ТаблицаРезультата.Объект.ПричинаОбращения КАК ПричинаОбращения";
				ТекстПромежуточныхПредставлений = ТекстПромежуточныхПредставлений + ","+Символы.ПС+"	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.ПричинаОбращения) КАК ПричинаОбращения";
				ТекстПредставлениеДокумента = ТекстПредставлениеДокумента+" + ""; "" + МАКСИМУМ(ПричинаОбращения)";
			КонецЕсли;
		КонецЦикла;
		
		ТекстПромежуточныхПредставлений = ТекстПромежуточныхПредставлений +","+ Символы.ПС + """"" КАК ПредставлениеДокумента";
		ТекстПредставлениеДокумента = ТекстПредставлениеДокумента + " КАК ПредставлениеДокумента";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаЗагрузкиЦехов.Объект КАК Объект,
	|	ТаблицаЗагрузкиЦехов.Дата КАК Дата,
	|	ТаблицаЗагрузкиЦехов.ВидОбъекта КАК ВидОбъекта,
	|	ТаблицаЗагрузкиЦехов.ДатаЗапускаРаботы КАК ДатаЗапускаРаботы,
	|	ТаблицаЗагрузкиЦехов.ДатаОкончанияРаботы КАК ДатаОкончанияРаботы,
	|	ТаблицаЗагрузкиЦехов.НачалоРабочегоПериода КАК НачалоРабочегоПериода,
	|	ТаблицаЗагрузкиЦехов.КонецРабочегоПериода КАК КонецРабочегоПериода,
	|	ТаблицаЗагрузкиЦехов.ВремяВыполненияРабот
	|ПОМЕСТИТЬ ТаблицаЗагрузкиЦехов
	|ИЗ
	|	&ТаблицаЗагрузкиЦехов КАК ТаблицаЗагрузкиЦехов
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРаботРесурса.Ресурс КАК Ресурс,
	|	ТаблицаРаботРесурса.ИндексЦеха КАК ИндексЦеха,
	|	ТаблицаРаботРесурса.Объект КАК Объект,
	|	ТаблицаРаботРесурса.ВремяВыполненияРабот КАК ВремяВыполненияРабот,
	|	ТаблицаРаботРесурса.Дата КАК Дата,
	|	ТаблицаРаботРесурса.ВидОбъекта КАК ВидОбъекта,
	|	ТаблицаРаботРесурса.ДатаЗапускаРаботы КАК ДатаЗапускаРаботы,
	|	ТаблицаРаботРесурса.ДатаОкончанияРаботы КАК ДатаОкончанияРаботы,
	|	ТаблицаРаботРесурса.НачалоРабочегоПериода КАК НачалоРабочегоПериода,
	|	ТаблицаРаботРесурса.КонецРабочегоПериода КАК КонецРабочегоПериода
	|ПОМЕСТИТЬ ТаблицаРаботРесурса
	|ИЗ ("+ТекстРаботРесурсов+") КАК ТаблицаРаботРесурса
	|ИНДЕКСИРОВАТЬ ПО
	|	Ресурс"+ТекстУничтоженияЗапросов+"
	|;
	|ВЫБРАТЬ 
	|	ТаблицаРез.Ресурс КАК Ресурс,
	| 	ТаблицаРез.Объект КАК Объект,
	| 	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ КоличествоЗаписейВЦеху
	|ИЗ
	|  ТаблицаРаботРесурса КАК ТаблицаРез
	|СГРУППИРОВАТЬ ПО
	| 	ТаблицаРез.Ресурс,
	| 	ТаблицаРез.Объект 
	|ИНДЕКСИРОВАТЬ ПО
	|	Ресурс
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаРезультата.Ресурс КАК Цех,
	|	ТаблицаРезультата.ИндексЦеха КАК ИндексЦеха,
	|	ТаблицаРезультата.Объект КАК Объект,
	|	ТаблицаРезультата.Объект.ДатаНачала КАК ОбъектДатаНачала,
	|	ТаблицаРезультата.Объект.Номер КАК ОбъектНомер,
	|	ТаблицаРезультата.ВремяВыполненияРабот/ЕСТЬNULL(КоличествоЗаписейВЦеху.КоличествоЗаписей, 1) КАК ВремяВыполненияРабот,
	|	ТаблицаРезультата.ВидОбъекта КАК ВидОбъекта,
	|	ВЫБОР 
	|		КОГДА ТаблицаРезультата.ДатаЗапускаРаботы<&ДатаНач ТОГДА
	|			&ДатаНач
	|		КОГДА ТаблицаРезультата.ДатаЗапускаРаботы>&ДатаКон ТОГДА
	|			&ДатаКон
	|		ИНАЧЕ 
	|			ТаблицаРезультата.ДатаЗапускаРаботы 
	|	КОНЕЦ КАК ДатаЗапускаРаботы,
	|	ВЫБОР КОГДА ТаблицаРезультата.ДатаОкончанияРаботы>&ДатаКон ТОГДА &ДатаКон ИНАЧЕ ТаблицаРезультата.ДатаОкончанияРаботы КОНЕЦ КАК ДатаОкончанияРаботы,
	|	ВЫБОР 
	|		КОГДА ТаблицаРезультата.НачалоРабочегоПериода<&ДатаНач ТОГДА
	|			&ДатаНач
	|		КОГДА ТаблицаРезультата.НачалоРабочегоПериода>&ДатаКон ТОГДА
	|			&ДатаКон
	|		ИНАЧЕ 
	|			ТаблицаРезультата.НачалоРабочегоПериода 
	|	КОНЕЦ КАК НачалоРабочегоПериода,
	|	ВЫБОР КОГДА ТаблицаРезультата.КонецРабочегоПериода>&ДатаКон ТОГДА &ДатаКон ИНАЧЕ ТаблицаРезультата.КонецРабочегоПериода КОНЕЦ КАК КонецРабочегоПериода"+Символы.ПС+ТекстДополнительныхПолей+"
	|ПОМЕСТИТЬ ТаблицаРабот
	|ИЗ
	|  ТаблицаРаботРесурса КАК ТаблицаРезультата
	|  ЛЕВОЕ СОЕДИНЕНИЕ КоличествоЗаписейВЦеху КАК КоличествоЗаписейВЦеху
	|	ПО ТаблицаРезультата.Ресурс = КоличествоЗаписейВЦеху.Ресурс
	| 	И ТаблицаРезультата.Объект = КоличествоЗаписейВЦеху.Объект
	| "+ТекстДополнительныхСоединений+"
	|;
	|УНИЧТОЖИТЬ	ТаблицаРаботРесурса
	|;
	|УНИЧТОЖИТЬ	КоличествоЗаписейВЦеху
	|;
	|ВЫБРАТЬ
	|	ТаблицаРаботРесурса.Цех КАК Цех,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаРаботРесурса.Цех) КАК ЦехПредставление,
	|	ТаблицаРаботРесурса.ИндексЦеха КАК ИндексЦеха,
	|	ТаблицаРаботРесурса.Объект КАК Объект,
	|	ТаблицаРаботРесурса.ОбъектДатаНачала КАК ОбъектДатаНачала,
	|	ТаблицаРаботРесурса.ОбъектНомер КАК ОбъектНомер,
	|	ТаблицаРаботРесурса.ВремяВыполненияРабот КАК ВремяВыполненияРабот,
	|	ТаблицаРаботРесурса.ВидОбъекта КАК ВидОбъекта,
	|	ТаблицаРаботРесурса.ДатаЗапускаРаботы КАК ДатаЗапускаРаботы,
	|	ТаблицаРаботРесурса.ДатаОкончанияРаботы КАК ДатаОкончанияРаботы,
	|	ТаблицаРаботРесурса.НачалоРабочегоПериода КАК НачалоРабочегоПериода,
	|	"""" КАК ччч,
	|	ТаблицаРаботРесурса.КонецРабочегоПериода КАК КонецРабочегоПериода"+Символы.ПС+ТекстПромежуточныхПредставлений+"
	|	
	|ИЗ ТаблицаРабот КАК ТаблицаРаботРесурса
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРаботРесурса.ИндексЦеха,
	|	ТаблицаРаботРесурса.Цех.Наименование,
	//|	ДатаЗапускаРаботы,
	//|	ТаблицаРаботРесурса.ОбъектДатаНачала,
	|	ОбъектДатаНачала,
	|	ОбъектНомер,
	|	ТаблицаРаботРесурса.НачалоРабочегоПериода,
	|	ТаблицаРаботРесурса.КонецРабочегоПериода
	|
	|ИТОГИ 
	//|	ВЫБОР КОГДА Объект ЕСТЬ NULL ТОГДА 
	//|		1
	//|	ИНАЧЕ
	//|		МИНИМУМ(ОбъектДатаНачала)
	//|	КОНЕЦ КАК ОбъектДатаНачала,
	|	МИНИМУМ(ОбъектДатаНачала),
	|	МИНИМУМ(ОбъектНомер),
	|	ВЫРАЗИТЬ(СУММА(ВремяВыполненияРабот) КАК Число(15,3)) КАК ВремяВыполненияРабот,
	|	МАКСИМУМ(ИндексЦеха),
	|	МАКСИМУМ(ВидОбъекта),
	|	МИНИМУМ(ДатаЗапускаРаботы),
	|	МАКСИМУМ(ДатаОкончанияРаботы)"+Символы.ПС+ТекстПредставлениеДокумента+"
	|ПО
	|	Цех ИЕРАРХИЯ,
	|	Объект";
	
	ИтоговыйЗапрос.Текст = ТекстЗапроса;
	ИтоговыйЗапрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	ИтоговыйЗапрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКонца));
	Результат = ИтоговыйЗапрос.Выполнить();
	
	МенеджерВременныхТаблицЗагрузки.Закрыть();
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоЗагрузке()

// индексировать список цехов
Процедура ПолучитьИндексированныйСписокЦехов(ТаблицаЦехов, Выборка)
	
	ВыборкаСлед = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаСлед.СледующийПоЗначениюПоля("Цех") Цикл
		НоваяСтрока = ТаблицаЦехов.Добавить();
		НоваяСтрока.Цех = ВыборкаСлед.Цех;
		НоваяСтрока.ГрафикРаботы = ВыборкаСлед.ГрафикРаботы;
		ПолучитьИндексированныйСписокЦехов(ТаблицаЦехов, ВыборкаСлед);
	КонецЦикла;
	
КонецПроцедуры

// Формирует отчет в виде диаграммы Ганта
Процедура СформироватьДиаграмму(ФормаДиаграммы = Неопределено, ТекДиаграммаГанта = Неопределено) Экспорт
	Если ДатаНачала > ДатаКонца Тогда
		Предупреждение("Некорректный период!", 10);
		Возврат;
	ИначеЕсли (НЕ ЗначениеЗаполнено(ДатаНачала)) ИЛИ (НЕ ЗначениеЗаполнено(ДатаКонца)) Тогда
		Предупреждение("Начало и окончание периода диаграммы должны быть указаны!", 10);
		Возврат;
	КонецЕсли;
	
	// получим цвета
	ЦветаДиаграммы = РаскраскаДиаграммы();
		
	// получим из формы элемент управления - диаграмму Ганта
	Если ТекДиаграммаГанта = Неопределено Тогда
		ДиаграммаГанта = ФормаДиаграммы.ЭлементыФормы.ДиаграммаГантаПланирование;
	Иначе
		ДиаграммаГанта = ТекДиаграммаГанта;
	КонецЕсли;
	ДиаграммаГанта.Очистить();
	ДиаграммаГанта.УстановитьПолныйИнтервал(ДатаНачала, КонецДня(ДатаКонца));
	
	// установим серии
	СерияЗаказ = ДиаграммаГанта.УстановитьСерию("Цеха", Неопределено);
	СерияЗаказ.ПриоритетЦвета = Ложь;
	ДиаграммаГанта.Обновление = Ложь;
	
	РезультатЗагрузки = ПолучитьДанныеПоЗагрузке();
	Если РезультатЗагрузки <> Неопределено Тогда
		СостояниеОтображенияЦехов = ВосстановитьЗначение("ПланированиеРабот_СостояниеОтображенияЦехов"+СокрЛП(ПараметрыСеанса.ТекущийПользователь));
		Если Не ТипЗнч(СостояниеОтображенияЦехов)=Тип("Соответствие") Тогда
			СостояниеОтображенияЦехов = Новый Соответствие;
		КонецЕсли;
		
		//СерияЗаказ
		Если ФлагПоказыватьДокументы Тогда
			ВывестиДиаграммуСДокументами(РезультатЗагрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией),,СостояниеОтображенияЦехов);
		Иначе
			ВывестиДиаграмму(РезультатЗагрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией),,СостояниеОтображенияЦехов);
		КонецЕсли;
	КонецЕсли;
	
	ДиаграммаГанта.Обновление = Истина;
	
	Если ФормаДиаграммы <> Неопределено Тогда
		// выводим пояснение цветов диаграммы
		ТабДокумент = ФормаДиаграммы.ЭлементыФормы.ТабДокументСерии;
		ТабДокумент.Очистить();
		ТабДокумент.Автомасштаб = Ложь;
		ТабДокумент.Вывести(ПолучитьМакет("Макет").ПолучитьОбласть("ПояснениеДиаграмма"));
		// показываем форму диаграммы пользователю
		ФормаДиаграммы.Открыть();
	КонецЕсли;
КонецПроцедуры

Функция РаскраскаДиаграммы()
	РезСтруктура = Новый Структура;
	
	//РезСтруктура.Вставить("Красный", Новый Цвет(255, 0, 0));
	//РезСтруктура.Вставить("Синий", Новый Цвет(0, 0, 255));
	//РезСтруктура.Вставить("Зеленый", Новый Цвет(0, 255, 0));
	//РезСтруктура.Вставить("ТемноБирюзовый", Новый Цвет(60, 200, 200));
	//РезСтруктура.Вставить("ТемноКрасный", Новый Цвет(150, 0, 0));
	//РезСтруктура.Вставить("СерыйЦвет", Новый Цвет(240, 240, 240));
	
	МакетРаскраски = ПолучитьМакет("Макет");
	
	РезСтруктура.Вставить("Синий", Новый Цвет(0, 0, 255));
	РезСтруктура.Вставить("Зеленый", МакетРаскраски.ПолучитьОбласть("Раскраска_ЗанятостьОбъекты").Область(1,2,1,2).ЦветФона);
	РезСтруктура.Вставить("ТемноБирюзовый", МакетРаскраски.ПолучитьОбласть("Раскраска_ЗанятостьЦеха").Область(1,2,1,2).ЦветФона);
	РезСтруктура.Вставить("ТемноКрасный", МакетРаскраски.ПолучитьОбласть("Раскраска_ПересечениеЦеха").Область(1,2,1,2).ЦветФона);
	РезСтруктура.Вставить("СерыйЦвет", МакетРаскраски.ПолучитьОбласть("Раскраска_НерабочееВремя").Область(1,2,1,2).ЦветФона);
	
	Возврат РезСтруктура;
КонецФункции

	
МассивДокументовОснований = Новый Массив;
КартинкаЗаявки = БиблиотекаКартинок.уатЗаявкаНаРемонт;
КартинкаЦеха   = БиблиотекаКартинок.уатЦеха;

Построитель.Текст = 
"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ЗаявкаНаРемонт.Ссылка
|ИЗ
|	Документ.уатЗаявкаНаРемонт КАК ЗаявкаНаРемонт
|{ГДЕ
|	ЗаявкаНаРемонт.Ссылка.* КАК Документ,
|	ЗаявкаНаРемонт.Организация.* КАК Организация,
|	ЗаявкаНаРемонт.ТС.* КАК ТС,
|	ЗаявкаНаРемонт.ТС.ТипТС.* КАК ТипТС,
|	ЗаявкаНаРемонт.ТС.Модель.* КАК Модель,
|	ЗаявкаНаРемонт.Цех.* КАК Цех,
//|	ЗаявкаНаРемонт.Состояние КАК Состояние,
|	ЗаявкаНаРемонт.Мастер.* КАК Мастер}";
//Отбор.УстановитьДоступныеПоля(ДоступныеПоляОтбора);
Построитель.Отбор.Добавить("Организация", "Организация", "Организация");
Построитель.Отбор.Добавить("Цех", "Цех", "Цех");
Построитель.Отбор.Добавить("ТипТС", "ТипТС", "Тип ТС");
Построитель.Отбор.Добавить("Модель", "Модель", "Модель ТС");
Построитель.Отбор.Добавить("ТС", "ТС", "Транспортное средство");
Построитель.Отбор.Добавить("Мастер", "Мастер", "Мастер");
Построитель.Отбор.Добавить("Документ", "Документ", "Документ");
//Построитель.Отбор.Добавить("Состояние", "Состояние", "Состояние");

//НоваяСтрока = ПоляПредставленияДокументов.Добавить();
//НоваяСтрока.Представление = "Состояние";
//НоваяСтрока.Имя = "Состояние";

НоваяСтрока = ПоляПредставленияДокументов.Добавить();
НоваяСтрока.Представление = "Документ";
НоваяСтрока.Имя = "Документ";
НоваяСтрока.Использование = Истина;

НоваяСтрока = ПоляПредставленияДокументов.Добавить();
НоваяСтрока.Представление = "Модель";
НоваяСтрока.Имя = "Модель";

НоваяСтрока = ПоляПредставленияДокументов.Добавить();
НоваяСтрока.Представление = "Транспортное средство";
НоваяСтрока.Имя = "ТС";

НоваяСтрока = ПоляПредставленияДокументов.Добавить();
НоваяСтрока.Представление = "Мастер";
НоваяСтрока.Имя = "Мастер";

НоваяСтрока = ПоляПредставленияДокументов.Добавить();
НоваяСтрока.Представление = "Причина обращения";
НоваяСтрока.Имя = "ПричинаОбращения";

//НоваяСтрока = ПоляПредставленияДокументов.Добавить();
//НоваяСтрока.Представление = "Заказчик";
//НоваяСтрока.Имя	  = "Заказчик";

//Для Каждого ТекПоле Из ПоляПредставленияДокументов Цикл
//	ТекПоле.Использование = Ложь;
//КонецЦикла;

СписокДокументовОткрытия = Новый Структура;

НП = Новый НастройкаПериода;
#КонецЕсли