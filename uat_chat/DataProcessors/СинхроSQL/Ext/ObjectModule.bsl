Перем ИмяБазыЦентр,ТекстСообщения;

//Возвращает ссылку справочника по ид элемента из SQL
// Стр - Ид вида 0x8dba00262d74918711e2427f3ccbe96f
//Вид - имя справочника, ссылку которого нужно получить
Функция ПолучитьСсылкуПоИдSQL(Знач Стр,Вид) Экспорт
	
	Если Лев(Стр,2) = "0x" ТОгда
		Стр = Сред(Стр,3);
	КонецЕСЛИ;
	
	
	
	стрГУИД = Сред(Стр,25,8)+"-"+Сред(Стр,21,4)+"-"+Сред(Стр,17,4)+"-"+Сред(Стр,1,4)+"-"+Сред(Стр,5,12);
	Попытка
		Гуид = Новый УникальныйИдентификатор(стрГУИД);
	Исключение
		Сообщить("Ошибка определения ГУИД "+Стр+" справочник вид "+Вид);
		Возврат Справочники[Вид].ПустаяСсылка()
	КонецПопытки;
	
	сс = Справочники[Вид].ПолучитьСсылку(ГУИД);
	Если Лев(СокрЛП(сс),18) = "<Объект не найден>" ТОгда
		Сообщить("Элемент вида "+Вид+" по ИД - "+Стр+" не найден!");
	КонецЕСЛИ;
	
	Возврат сс;
	
КонецФункции

Функция ПолучитьМассивМета(ВариантРасходГСМ=Ложь) Экспорт
	
	Мас = Новый Массив;
	Мас.Добавить("Справочник.упрМодели");
	Мас.Добавить("РегистрСведений.НормыГСМ");
	//Мас.Добавить("РегистрСведений.SQLтипы");
	Мас.Добавить("Документ.ИзменениеНорм");
	Мас.Добавить("Справочник.ОборудованиеРаботыГСМ");
	
	//Мас.Добавить("Справочник.уатСостояниеТС");
	//Мас.Добавить("РегистрСведений.уатМестонахождениеТС");
	
	Если  ВариантРасходГСМ Тогда
		Мас.Добавить("Справочник.уатТС");
		Мас.Добавить("Справочник.уатТипыТС");
		Мас.Добавить("Документ.уатПутевойЛист");
		Мас.Добавить("Документ.уатРемонтныйЛист");
		Мас.Добавить("Документ.РасходГСМзаМесяц");
		Мас.Добавить("Справочник.Организации");
		Мас.Добавить("Справочник.уатОбъектыСтроительства");
		Мас.Добавить("РегистрНакопления.уатРасходГСМнаТС");
		Мас.Добавить("РегистрНакопления.уатВыработкаТС");
		Мас.Добавить("РегистрНакопления.РаботаТС");
		Мас.Добавить("РегистрНакопления.РеестрыУслуг");
		Мас.Добавить("РегистрСведений.уатРегламентированныйПроизводственныйКалендарь");
		Если Метаданные.НайтиПоПолномуИмени("РегистрНакопления.РаботаТССубподряд")<>Неопределено Тогда
			Мас.Добавить("РегистрНакопления.РаботаТССубподряд");
		КонецеслИ;
	КонецЕСлИ;
	
	Возврат Мас;
КонецФункции

Функция Мета(МетаРек,префБД)
	
	Мас = Новый Массив;
	Мас.Добавить(МетаРек);
	//Мас.Добавить("Справочник.упрМодели");
	
	Тбл = ПолучитьСтруктуруХраненияБазыДанных(Мас);
	
	тбДанные = Новый ТаблицаЗначений;
	тбДанные.Колонки.Добавить("ИмяПоляХранения");
	тбДанные.Колонки.Добавить("ИмяПоля");
	тбДанные.Колонки.Добавить("ИмяТаблицы");
	тбДанные.Колонки.Добавить("ЭтоРеквизит");
	тбДанные.Колонки.Добавить("RRef");
	
	
	Для каждого Стр из Тбл Цикл
		Если Стр.Назначение = "Основная" Тогда 		
			НовСтр = тбДанные.Добавить();
			НовСтр.ИмяПоляХранения = "_"+Стр.ИмяТаблицыХранения;
			НовСтр.ИмяПоля = префБД+СокрЛП(Стр.ИмяТаблицы);
			НовСтр.ИмяТаблицы =  СокрЛП(Стр.ИмяТаблицы);
			НовСтр.ЭтоРеквизит = ложь;
			
			Для каждого с из Стр.Поля Цикл
				Если С.ИмяПоляХранения = "Version" Тогда Продолжить; КонецЕСЛИ;
				
				НовСтр = тбДанные.Добавить();
				НовСтр.ИмяПоляХранения = "_"+С.ИмяПоляХранения;
				НовСтр.ИмяПоля = префБД+Стр.ИмяТаблицы+"."+С.ИмяПоля;
				НовСтр.ИмяТаблицы =  СокрЛП(Стр.ИмяТаблицы);
				НовСтр.ЭтоРеквизит = Истина;
				НовСтр.RRef = ОпределитьRRef(С,Стр);
				
			КонецЦикла;
		ИНачеЕсли Стр.Назначение = "ТабличнаяЧасть" Тогда 
			
			НовСтр = тбДанные.Добавить();
			НовСтр.ИмяПоляХранения = "_"+СтрЗаменить(Стр.ИмяТаблицыХранения,".","_");
			НовСтр.ИмяПоля = префБД+СокрЛП(Стр.ИмяТаблицы);
			НовСтр.ИмяТаблицы =  СокрЛП(Стр.ИмяТаблицы);
			НовСтр.ЭтоРеквизит = ложь;
			
			Для каждого тбСтр из Стр.Поля Цикл
				Если тбСтр.ИмяПоляХранения = "Version" Тогда Продолжить; КонецЕСЛИ;
				
				НовСтр = тбДанные.Добавить();
				НовСтр.ИмяПоляХранения = "_"+тбСтр.ИмяПоляХранения;
				НовСтр.ИмяПоля = префБД+Стр.ИмяТаблицы+"."+тбСтр.ИмяПоля;
				НовСтр.ИмяТаблицы =  СокрЛП(Стр.ИмяТаблицы);
				НовСтр.ЭтоРеквизит = Истина;
				НовСтр.RRef = ОпределитьRRef(тбСтр,Стр);
				
			КонецЦикла;
		КонецЕСЛИ;
		
	КонецЦикла;
	
	Возврат тбДанные;
	
	
КонецФункции

Функция ПолучитьТекстЗапросаТипы(ИмяСервера,ИмяБазы)
	
	Мас = Новый Массив;
	Мас.Добавить("РегистрСведений.SQLтипы");
	Тбл = ПолучитьСтруктуруХраненияБазыДанных(Мас);
	
	СтртипТбл = тбл.НАйти("РегистрСведений.SQLтипы","ИмяТаблицы");
	
	ТабТипЦнт = ""+ИмяБазыЦентр+".dbo."+"_"+СтртипТбл.ИмяТаблицыХранения;
	цнМета    = "_"+СтртипТбл[4].Найти("ТипМета","ИмяПоля").ИмяПоляХранения;
	цнТип     = "_"+СтртипТбл[4].Найти("ПустаяСС","ИмяПоля").ИмяПоляХранения+"_RTRef";
	
	ТабТипПрф = "["+ИмяСервера+"]."+ИмяБазы+".dbo."+""+Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.SQLтипы").Код;
	прМета    = ""+Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.SQLтипы.ТипМета").Код;
	прТип     = ""+Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.SQLтипы.ПустаяСС").Код+"_RTRef";
	
	ТекстЗапроса = "SELECT тбТипЦнт."+цнТип+" tpCnt, тбТипПРф."+прТип+" tpPrf 
	|INTO #tbType"+ИмяБазыЦентр+"
	 |FROM "+ТабТипЦнт+" тбТипЦнт
	 |INNER JOIN "+ТабТипПрф+" тбТипПРф ON тбТипЦнт."+цнМета+" = тбТипПРф."+прМета+"";
	
	
	 Возврат ТекстЗапроса;
	
КонецФункции

Функция ОпределитьRRef(С,Стр)
	
	Если С.ИмяПоляХранения = "ID" or С.ИмяПоляХранения = "ParentID" Тогда
		Возврат "RRef";
	ИНачеЕсли С.ИмяПоляХранения = "Recorder" ТОгда
		Мета = Метаданные.НайтиПоПолномуИмени(Стр.Метаданные).СтандартныеРеквизиты.Регистратор;
	ИНачеЕсли СокрЛП(С.Метаданные)="" или С.ИмяПоля="НомерСтроки" Тогда
		Возврат "";
	ИНаче
		Мета = Метаданные.НайтиПоПолномуИмени(С.Метаданные);
	КонецЕСЛИ;
	
	Если Найти(СокрЛП(Мета.Тип),",")<>0 Тогда
		Возврат "TYPE";
	ИНачеЕсли Найти(",Число,Строка,Дата,Булево,",","+СокрЛП(Мета.Тип)+",")<>0 Тогда
		Возврат "";
	Иначе
		Возврат "RRef";
	КонЕЦЕСЛИ;
		
	
КонецФункции

Процедура ВывестиОтклонения(Соединение,МетаРек,ИмяТабЦн,ИмяТабПрф,ТОлькоПроверить)
	
	
	Если нрег(МетаРек)<>  нрег("Справочник.упрМодели") ТОгда Возврат; КонецЕСЛИ;
	
	ТекстЗапроса= "
	| SELECT _Code, _Description, master.dbo.fn_sqlvarbasetostr(_IDRREF) _IDRREF
	| FROM   "+ИмяТабЦн+"
	| WHERE  _IDRREF NOT IN (SELECT _IDRREF FROM "+ИмяТабПрф+")
	|
	|
	|";
	
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Макет");
	Таб.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	МасУдл = Новый Массив;
	Обл = Макет.ПолучитьОбласть("Строка");
	СообщитьЗаписать(ТекстЗапроса);
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	Пока Записи.EOF() = 0 Цикл
		
		Если ТОлькоПроверить Тогда
			Обл.Параметры._Code = Записи.Fields("_Code").Value;
			Обл.Параметры._Description = Записи.Fields("_Description").Value;
			Обл.Параметры._IDRREF = Записи.Fields("_IDRREF").Value;
			Таб.Вывести(Обл);
		ИНаче
			МасУдл.Добавить(ПолучитьСсылкуПоИдSQL(Записи.Fields("_IDRREF").Value,"упрМодели"));
		КонецЕСЛИ;
		 
		 
		Записи.MoveNext(); 
	 КонецЦикла; 
	 
	Записи.Close(); 
	
	
	Если ТОлькоПроверить Тогда
		Таб.Показать();
	ИНАче
		
		ТБл = НайтиПоСсылкам(МасУдл);
		Для каждого Эл из МасУдл Цикл
			нс = Тбл.Найти(Эл);
			Если нс=Неопределено ТОгда
				СообщитьЗаписать("Удалено : "+Эл);
				Обк = Эл.ПолучитьОбъект();
				Обк.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		
	КонеЦЕСЛИ;
	
	
КонецПроцедуры

Процедура СделатьЗапрос(Соединение,МетаРек,ИмяТабЦн,ИмяТабПрф,СтрРекЦн,СтрРекПрф,ТекстЗапросаТБлТИПЫ,крИдТабЦентр="_IDRREF",крИдТабПрф="_IDRREF",ТОлькоПроверить=Ложь,КонтрольIDref=Ложь)
	
	Если СокрЛП(ИмяТабЦн) = "" Тогда ВозвраТ; КонецесЛИ;
	
	
	ВывестиОтклонения(Соединение,МетаРек,ИмяТабЦн,ИмяТабПрф,ТОлькоПроверить);
	
	//Скопируем данные во врем таблицу
	ТекИмяТабПрф = "#tb"+ИмяБазыЦентр;
	Попытка
	Соединение.Execute("DROP Table "+ТекИмяТабПрф);
	Исключение КонецПопытки;
	Соединение.Execute("SELECT * INTO "+ТекИмяТабПрф+" FROM  "+ИмяТабПрф+" ");
	
	
	ТекстЗапроса = "
	|DELETE  "+ИмяТабЦн+"    
	|";
	Если КонтрольIDref Тогда
	//ТекстЗапроса = ТекстЗапроса+" WHERE _IDRREF IN (SELECT _IDRREF FROM "+ИмяТабПрф+")	 ";
	ТекстЗапроса = ТекстЗапроса+" WHERE "+крИдТабЦентр+" IN (SELECT "+крИдТабПрф+" FROM "+ТекИмяТабПрф+")	 ";
	КонецЕСЛИ;
	
	СообщитьЗаписать(ТекстЗапроса);
	Соединение.Execute(ТекстЗапроса);
	
	
	//Подтянем типы во временную таблицу
	Попытка
	Соединение.Execute("DROP Table #tbType"+ИмяБазыЦентр);
	Исключение КонецПопытки;
	Соединение.Execute(ТекстЗапросаТБлТИПЫ);
	
	
	ТекстЗапроса = "
	|INSERT  "+ИмяТабЦн+" ("+СтрРекЦн+") SELECT "+СтрРекПрф+" FROM "+ТекИмяТабПрф+" 
	|
	|";
	
	СообщитьЗаписать(ТекстЗапроса);
	Соединение.Execute(ТекстЗапроса);
	
	
	
	ВЫб = ПланыОбмена.ДИСП.Выбрать();
	ТекУзел = ПланыОбмена.ДИСП.ЭтотУзел();
	Пока Выб.Следующий() Цикл
		Если Выб.ссылка = ТекУзел Тогда Продолжить; КонецеСЛИ;
		ПланыОбмена.ЗарегистрироватьИзменения(Выб.ссылка,Метаданные.НайтиПоПолномуИмени(МетаРек));
	КонецЦикла;

	
КонецПроцедуры

Функция ПолучитьСтрокуСоединенияSQL() Экспорт
	
	СтрСоединения = Константы.кcСтрокаSQLпроизводство.Получить();
	
	пСтр = Нрег(СтрСоединения);
	п1 = найти(пСтр,"database");
	Если п1 <> 0 Тогда
		пСтр = Сред(пСтр,п1);
		п2 = Найти(пСтр,";");
		Если п2<>0 Тогда
			СтрСоединения = Лев(СтрСоединения,п1-1)+Сред(СтрСоединения,п1+п2);
		ИНаче
			СтрСоединения = Лев(СтрСоединения,п1-1);
		КонецеСЛИ;
	КонецЕСЛИ;
	
	Возврат СтрСоединения;
	
	
КонецФункции

Функция ПриЛинковатьСервер(Соединение,ИмяСервера)

	ТекстЗапроса = "
|	Declare @ServerName as VarChar(99)
|set @ServerName = '"+ИмяСервера+"'
|
|
|IF (SELECT top 1 name FROM sys.servers WHERE is_linked = 1 and name = @ServerName)
|is not NULL 
|EXEC sp_dropserver 
|@server = @ServerName, 
|@droplogins = 'droplogins'
|
|EXEC sp_addlinkedserver 
|	@server = @ServerName
|,	@srvproduct = 'SQL Server'
|
|EXEC sp_addlinkedsrvlogin @rmtsrvname = @ServerName 
|,	@useself = 'false'	-- true=Connect using current UserID/Password, false=use rmtuser/rmtpassword below
|,	@locallogin = null	-- NULL=All local logins use this remote login account, otherwise local login UserName being set up (repeat for each one required)
|-- Execute ONLY to here IF @UseSelf='TRUE' (above)
|,	@rmtuser = 'sa'	-- UserName on Remote corresponding to this @LocalLogin.   
|,	@rmtpassword = 'VmF-092222'
|";

	Соединение.Execute(ТекстЗапроса);
	
	ТекстЗапроса = "select top 1 name from ["+ИмяСервера+"].master.dbo.sysdatabases";
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	Если  Записи.EOF() = 0 Тогда 
		Возврат Истина;
	ИНаче
		Возврат Ложь;
	КонецЕсли; 

	
КонецФункции

Процедура ОтлинковатьСервер(Соединение,ИмяСервера)
	
	Возврат; //Зачем отлинковывать сервер? если он пользуется постоянно? Ресурсы не ест...
	
	ТекстЗапроса = "
|	Declare @ServerName as VarChar(99)
|set @ServerName = '"+ИмяСервера+"'
|
|
|IF (SELECT top 1 name FROM sys.servers WHERE is_linked = 1 and name = @ServerName)
|is not NULL 
|EXEC sp_dropserver 
|@server = @ServerName, 
|@droplogins = 'droplogins'
|
|";

	Соединение.Execute(ТекстЗапроса);
	
КонецПроцедуры

Функция ПолучитьКрИмя(Имя) //_Reference94_VT1049
	
	п = СтрЗаменить(Имя,"_",Символы.ПС);
	Возврат "_"+СтрПолучитьСтроку(п,2)+"_IDRRef";
	
	
КонецФункции

Функция ПолучитьVID(МетаРек,ДляЦентра=ложь) Экспорт
	
	п = СтрЗаменить(МетаРек,".","_");
	БазаСКЛ = ПолучитьКластерИИмяБазы().База;
	Если Найти(нрег(БазаСКЛ),"centr")<>0 или ДляЦентра Тогда
		Возврат ""+п;
	ИНаче
		Возврат ""+п+"_"+БазаСКЛ+"";
	КонецЕСЛИ;
	
КонецФункции

Функция ПроверитьДатуМодификацииСправочника(Соединение,ИмяСервера,МетаРек) Экспорт
	
	 НадоОбновить = Истина;
	
	ТекстЗапроса = "SELECT
|(SELECT Date_Time FROM ["+ИмяСервера+"].ksSynchro.dbo.ksSync WHERE vid = LOWER('"+ПолучитьVID(МетаРек,Истина)+"')) DtCentr,
|(SELECT Date_Time FROM ksSynchro.dbo.ksSync WHERE vid = LOWER('"+ПолучитьVID(МетаРек)+"')) Dt";
	                                                                     
	
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	Если  Записи.EOF() = 0 Тогда 
		дтЦентр = Записи.Fields("DtCentr").Value;
		Дт      = Записи.Fields("Dt").Value;
		
		СообщитьЗаписать("дтЦентр = "+дтЦентр+" Дт = "+Дт+" "+МетаРек);
		Если ЗначениеЗаполнено(дтЦентр) и ЗначениеЗаполнено(Дт) Тогда
			НадоОбновить = дтЦентр >= Дт;
		КонецЕСЛИ;
	КонецЕсли; 
	
	Записи.Close(); 
	
	Возврат НадоОбновить;
	
КонецФункции


Функция ПолучитьКластерИИмяБазы() Экспорт
	
	пСтр = СтрокаСоединенияИнформационнойБазы();   //Srvr="192.168.20.13";Ref="BUHCentr";
	Если Найти(пСтр,"Srvr")=0 Тогда
		Сообщить("Фугнкция работает только для серверной ИБ!");
		Возврат Неопределено;
	КонецЕСЛИ;
	
	пСтр = СтрЗаменить(пСтр,"""",Символы.ПС);
	
	Стк = Новый Структура("Кластер,База",СтрПолучитьСтроку(пСтр,2),СтрПолучитьСтроку(пСтр,4));
	Возврат Стк;
	
КонецФункции

Функция ПолучитьКластерИИмяБазы1() Экспорт
	
	пСтр = СтрокаСоединенияИнформационнойБазы();   //Srvr="192.168.20.13";Ref="BUHCentr";
	Если Найти(пСтр,"Srvr")=0 Тогда
		Сообщить("Фугнкция работает только для серверной ИБ!");
		Возврат Неопределено;
	КонецЕСЛИ;
	
	пСтр = СтрЗаменить(пСтр,"""",Символы.ПС);
	
	Стк = Новый Структура("Кластер,База",СтрПолучитьСтроку(пСтр,2),СтрПолучитьСтроку(пСтр,4));
	
	
	
	ЕстьПользовательРегРаботы();
	
	COMСоединитель = Новый COMОбъект("V83.COMConnector");
	СоединениеСРабочимПроцессом = COMСоединитель.ConnectWorkingProcess(Стк.Кластер+":1562");
	
	СоединениеСРабочимПроцессом.AddAuthentication("1с_Рег_Работы","19621209091262");
	комМас =  СоединениеСРабочимПроцессом.GetInfoBases();
	Для каждого эл из комМас Цикл
		Если Эл.name = Стк.База ТОгда
			Стк.Кластер = Эл.DBServerName;
			//Сообщить(Эл.DBServerName);
			прервать;
		КонецеСЛИ;
	КонецЦикла;
	
	
	Возврат Стк;
	
КонецФункции


Процедура ЕстьПользовательРегРаботы()
	
	Имя = "1с_Рег_Работы";
	
	Мас = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для каждого Эл из Мас Цикл
		Если Эл.Имя = Имя Тогда
			Возврат ;
		КонецеСЛИ;
	КонецЦикла;
	
	НовПлз = ПользователиИнформационнойБазы.СоздатьПользователя();
	НовПлз.Имя = Имя;
	НовПлз.АутентификацияСтандартная = Истина;
	НовПлз.Пароль = "19621209091262";
	НовПлз.ПоказыватьВСпискеВыбора = Ложь;
	НовПлз.Роли.Добавить(Метаданные.Роли.уатАдминистратор);
	НовПлз.Записать();
	

КонецПроцедуры

Функция НайтиРекВТбл(Тбл,Рек)
	
	нс = Тбл.НАйти(нрег(Рек),"ИмяПоля");
	Если нс = Неопределено ТОгда
		Сообщить("Не найден "+Рек);
		Возврат Неопределено;
	КонецесЛИ;
	
	Если СокрЛП(нс.RREF) <> "" Тогда
		Возврат нс.ИмяПоляХранения+"RRef";
	ИНАче
		Возврат нс.ИмяПоляХранения;
	КонецеСЛИ;
	
	
КонецФункции


Процедура СообщитьЗаписать(Тхт)
	
	ТекстСообщения = ТекстСообщения+Тхт+Символы.ПС;
	Сообщить(Тхт);
	
	
КонецПроцедуры


Процедура СинхроРазВДень(ТОлькоПроверить=Ложь,ИмяСервера = "192.168.20.13",ИмяБазы = "ENTcentr")  Экспорт
	
	ТекстСообщения = "";           
	
	ЕстьИзменениеДанных = АлгаРасходГСМ(ИмяСервера,ИмяБазы);
	
	
	Если СокрЛП(ЕстьИзменениеДанных)="" ТОгда
		ЕстьИзменениеДанных = "Ошибка";
	КонецЕСЛИ;
	
	ВыгрузитьАзур();
	//ВыгрузитьАЗУРШиротаДолгота();

	
	//обработка501 = Обработки.ОтправкаОф501.Создать();
	//Тхт501 = обработка501.СформироватьСообщение("Обмен SQL расход ГСМ",ЕстьИзменениеДанных,"База : "+ИмяБазыЦентр+символы.ПС+ТекстСообщения);
	//обработка501.Почта(Тхт501);
	
	
КонецПроцедуры

Процедура Синхро(ТОлькоПроверить=Ложь,ИмяСервера = "192.168.20.13",ИмяБазы = "ENTcentr")  Экспорт
	
	ТекстСообщения = "";
	ЕстьИзменениеДанных = Алга(ТОлькоПроверить,ИмяСервера,ИмяБазы);
	
	Если СокрЛП(ЕстьИзменениеДанных)="" ТОгда
		ЕстьИзменениеДанных = "Ошибка";
	КонецЕСЛИ;
	
	
	
	обработка501 = Обработки.ОтправкаОф501.Создать();
	Тхт501 = обработка501.СформироватьСообщение("Обмен SQL",ЕстьИзменениеДанных,"База : "+ИмяБазыЦентр+символы.ПС+ТекстСообщения);
	обработка501.Почта(Тхт501);
	
	
КонецПроцедуры

Функция Алга(ТОлькоПроверить=Ложь,ИмяСервера = "192.168.20.13",ИмяБазы = "ENTcentr")  
	
	
	Соединение=Новый ComObject("ADODB.Connection");
	СтрСоединения = ПолучитьСтрокуСоединенияSQL();
	Попытка
		Соединение.Open(СтрСоединения);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	//ИмяСервера = "192.168.20.13";
	//ИмяБазы = "ENTcentr";//"CHAT_PL";
	ИмяБазыЦентр = ПолучитьКластерИИмяБазы().база;//"ENTcentr";
	
	Если ПриЛинковатьСервер(Соединение,ИмяСервера)=Ложь Тогда
		СообщитьЗаписать("Ошибка связи с сервером "+ИмяСервера);
		ВозврАт Неопределено;
	КонецЕСЛИ;
	
	ТекстЗапросаТБлТИПЫ = ПолучитьТекстЗапросаТипы(ИмяСервера,ИмяБазы);
	МетаМас = ПолучитьМассивМета();
	
	ЕстьИзменениеДанных = "Отмена";
	Для каждого МетаРек из МетаМас Цикл
		
		Если ПроверитьДатуМодификацииСправочника(Соединение,ИмяСервера,МетаРек)=Ложь Тогда
			продолжить;
		КонецЕСЛИ;
		ЕстьИзменениеДанных = "Выполнено";
		
		ТБл = Мета(МетаРек,ИмяБазы+".");
		
		ИмяТабЦн  = "";
		ИмяТабПрф = "";
		СтрРекЦн  = "";
		СтрРекПрф = "";
		пИмяТаблицы = "";
		ИдТабЦентр = "";
		ИдТабПрф   = "";
		
		Тбл.сортировать("Имятаблицы,ЭтоРеквизит");
		Для каждого Стр из Тбл Цикл
			
			Если пИмяТаблицы<>Стр.ИмяТаблицы Тогда
				СделатьЗапрос(Соединение,МетаРек,ИмяТабЦн,ИмяТабПрф,Сред(СтрРекЦн,2),Сред(СтрРекПрф,2),ТекстЗапросаТБлТИПЫ,ИдТабЦентр,ИдТабПрф,ТОлькоПроверить,истина);
				
				сс = Справочники.SQLтаблицы.НайтиПоНаименованию(Стр.ИмяПоля);
				Если сс.Пустая() Тогда Продолжить; КонецЕСЛИ;
				пИмяТаблицы = Стр.ИмяТаблицы;
				Сообщить(Стр.ИмяПоля);
				
				ИмяТабЦн  = ""+ИмяБазыЦентр+".dbo."+Стр.ИмяПоляХранения;
				ИмяТабПрф = "["+ИмяСервера+"]."+ИмяБазы+".dbo."+Сс.Код;
				
				крИдТабЦентр = ПолучитьКрИмя(Стр.ИмяПоляХранения);
				крИдТабПрф   = ПолучитьКрИмя(Сс.Код);
				ИдТабЦентр = "_IDRRef";
				ИдТабПрф   = "_IDRRef";
				
				СтрРекЦн  = "";
				СтрРекПрф = "";
				
			КонецЕСЛИ;
			
			Если Стр.ЭтоРеквизит = Ложь Тогда Продолжить; КонецЕСЛИ;
			
			сс = Справочники.SQLтаблицы.НайтиПоНаименованию(Стр.ИмяПоля);
			Если сс.Пустая() Тогда Продолжить; КонецЕСЛИ;
			
			Если Стр.ИмяПоляХранения = "_Recorder" Тогда
				СтрРекЦн  = СтрРекЦн +","+Стр.ИмяПоляХранения+"RRef"   +Символы.пс;
				СтрРекПрф = СтрРекПрф+","+сс.Код+"RRef"   +Символы.пс;
				Если  Стр.RREF = "TYPE" тогда
					СтрРекЦн  = СтрРекЦн +","+Стр.ИмяПоляХранения+"TRef"   +Символы.пс;
					СтрРекПрф = СтрРекПрф+","+сс.Код+"TRef"                +Символы.пс;
				КонецЕСЛИ;	
				ИдТабЦентр = Стр.ИмяПоляХранения+"RRef";
				ИдТабПрф   = сс.Код+"RRef";
				
			ИНачеЕсли  Стр.RREF = "TYPE" тогда
				СтрРекЦн  = СтрРекЦн +","+Стр.ИмяПоляХранения+"_TYPE,"+Стр.ИмяПоляХранения+"_RRRef,"+Символы.пс+Стр.ИмяПоляХранения+"_RTRef"+Символы.пс   ;
				СтрРекПрф = СтрРекПрф+","+сс.Код+"_TYPE,"+сс.Код+"_RRRef," +Символы.пс  + ""
				+"(SELECT TOP 1 tbType.tpCnt FROM #tbType"+ИмяБазыЦентр+" tbType where tbType.tpPrf = "+сс.Код+"_RTRef)"+Символы.пс;
				
			ИНаче
				СтрРекЦн  = СтрРекЦн +","+Стр.ИмяПоляХранения+Стр.RREF+Символы.пс;
				СтрРекПрф = СтрРекПрф+","+сс.Код+Стр.RREF+Символы.пс;
			КонецЕСЛИ;
			
			//Определем ИД для табличных частей 
			Если (Найти(Стр.ИмяПоляХранения,"_LineNo")<>0 и СтрДлина(Стр.ИмяПоляХранения)>СтрДлина("_LineNo"))
				или (Лев(Стр.ИмяПоляХранения,9)="_Document" и Найти(Стр.ИмяПоляХранения,"_VT")<>0 ) Тогда
				
				//Поменяем ИД для таблиц   _Document236_IDRRef
				ИдТабЦентр = крИдТабЦентр;
				ИдТабПрф   = крИдТабПрф;
				
				СтрРекЦн  = СтрРекЦн +",_KeyField,"+крИдТабЦентр+Символы.пс;
				СтрРекПрф = СтрРекПрф+",_KeyField,"+крИдТабПрф  +Символы.пс;
				
			КонецЕСЛИ;
			
		КонецЦиклА;
		
		СделатьЗапрос(Соединение,МетаРек,ИмяТабЦн,ИмяТабПрф,Сред(СтрРекЦн,2),Сред(СтрРекПрф,2),ТекстЗапросаТБлТИПЫ,ИдТабЦентр,ИдТабПрф,ТОлькоПроверить,истина);
		
		
	КонецЦикла;
	
	ОтлинковатьСервер(Соединение,ИмяСервера);
	
	Возврат ЕстьИзменениеДанных;
	
КонецФункции


Функция ПолучитьСтрОрганизаций()
	
	Стр = "";
	Выб = Справочники.Организации.Выбрать();
	Пока Выб.Следующий() Цикл
		Стр = Стр+",'"+Выб.Наименование+"'";
	КонецЦикла;
	
	Возврат Сред(Стр,2);
	
	
КонецФункции

Функция АлгаРасходГСМ(ИмяСервера = "192.168.20.13",ИмяБазы = "ENTcentr")
	
	//ИмяСервера = "192.168.20.13";
	//ИмяБазы    = "ENTcentr";
	
	ИмяТекБазы = ПолучитьКластерИИмяБазы().база+".dbo.";//"ENT.dbo.";
	
	Если СокрлП(нрег(Константы.ксБазаПЛ.Получить())) <> СокрлП(нрег(ИмяТекБазы)) Тогда
		СообщитьЗаписать("Ошибка попытка отправки данных из неосновной БД : "+ИмяТекБазы);
		СообщитьЗаписать("    имя рабочей БД : "+Константы.ксБазаПЛ.Получить());
		Возврат Неопределено;		
	КонецеСЛИ;
	
	ЕстьИзменениеДанных = "Выполнено";

	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.CommandTimeout = 600;
	Соединение.ConnectionTimeout = 0;
	СтрСоединения = ПолучитьСтрокуСоединенияSQL();
	//СтрСоединения = "Driver={SQL Server};Server=192.168.50.11;Uid=sa;Pwd=VmF-092222;";
	Попытка
		Соединение.Open(СтрСоединения);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	

	Если ПриЛинковатьСервер(Соединение,ИмяСервера)=Ложь Тогда
		СообщитьЗаписать("Ошибка связи с сервером "+ИмяСервера);
		ВозврАт Неопределено;
	КонецЕСЛИ;
	
	
	
	МетаМас = ПолучитьМассивМета(Истина);
	
	ТБл =Неопределено;
	Для каждого МетаРек из МетаМас Цикл
		
		Т = Мета(МетаРек,"");
		Если Тбл = Неопределено ТОгда
			ТБл = Т.СкопироватьКолонки();
		КонецЕСЛИ;
		
		Для каждого С из Т Цикл
			с.ИмяПоля = нрег(с.имяПоля);
			ЗаполнитьЗначенияСвойств(Тбл.Добавить(),с);
		КонецЦиклА;
		
	КонецЦикла;	
	
	
//Данные центр		
ИмяТабЦентр = "["+ИмяСервера+"]."+ИмяБазы+".dbo."+Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ").код;
цнДтСинхро = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.дтСинхро").код;
цнВер = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.Версия").код;
цнОрг = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.Организация").код;
цнГАрНомер = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ГарНомер").код;
цнГосНомер = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ГосНомер").код;
цнИмяТС = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ИмяТС").код;
цнТипТС = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ТипТС").код;
цнУпрМодель = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.упрМодель").код+"RRef";
цнОбр = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.Оборудование").код+"RRef";
цнРодОбр = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.РодОборудование").код+"RRef";
цнМесГод = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.МесяцГод").код;
цнВсегоПробег = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ВсегоПробег").код;
цнКолПЛ  = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.КолПЛ").код;
цнТемп  = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.Температура").код;
цнКолДней = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.колДней").код;
цнВсегоЧасов = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ВсегоЧасов").код;
цнВсегоЧасовГСМ = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ВсегоЧасовГСМ").код;
цнЧасыЗкзОбр = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ЧасыЗкзОбр").код;
цнРасходПоФакту = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.РасходПоФакту").код;
цнРасходПоНорме = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.РасходПоНорме").код;
цнРасходТемп = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.РасходТемп").код;
цнОгрРАсхода = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ОграничениеРасхода").код;
цнПоказательРасчета = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ПоказательРасчета").код;
цнГодВыпуска = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.ГодВыпуска").код;
цнВес = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.Вес").код;
цнМощностьЛС = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРасходГСМ.МощностьЛС").код;

	
	//Данные местные
	 СправочникуатТС 		= ИмяТекБазы+НайтиРекВТбл(Тбл,"Справочник.уатТС");
	 СпрТСссылка 			= НайтиРекВТбл(Тбл,"Справочник.уатТС.ссылка");
	 ГаражныйНомер 			= НайтиРекВТбл(Тбл,"Справочник.уатТС.ГаражныйНомер");
	 ГосударственныйНомер 	= НайтиРекВТбл(Тбл,"Справочник.уатТС.ГосударственныйНомер");
	 ТСНаименование 		= НайтиРекВТбл(Тбл,"Справочник.уатТС.Наименование");
	 СпрТСТипТС 			= НайтиРекВТбл(Тбл,"Справочник.уатТС.типТС");
	 упрМодель 				= НайтиРекВТбл(Тбл,"Справочник.уатТС.упрМодель");
	 ТСгодВыпуска			= НайтиРекВТбл(Тбл,"Справочник.уатТС.ГодВыпуска");
	 ТСВес	 				= НайтиРекВТбл(Тбл,"Справочник.уатТС.СобственныйВес");
	 ТСЛС	 				= НайтиРекВТбл(Тбл,"Справочник.уатТС.МощностьДвигателяЛС");
	 
	 ДокЗкГСМ               = ИмяТекБазы+НайтиРекВТбл(Тбл,"Документ.РасходГСМзаМесяц");
	 ДокЗкГСМВерсия    		= "_version";
	 ДокЗкГСМДата    		= НайтиРекВТбл(Тбл,"документ.РасходГСМзаМесяц.Дата");
	 ДокЗкГСМПроведен  		= НайтиРекВТбл(Тбл,"документ.РасходГСМзаМесяц.Проведен");
	 
	 документуатпутевойлист = ИмяТекБазы+НайтиРекВТбл(Тбл,"документ.уатпутевойлист");
	 ДокПЛссылка    		= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.ссылка");
	 ДокПЛПроведен    		= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.Проведен");
	 СпидометрВозвращения 	= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.СпидометрВозвращения");
	 СпидометрВыезда      	= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.СпидометрВыезда");
	 ДокПлТС		      	= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.ТранспортноеСредство");
	 ДатаВыезда      		= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.ДатаВыезда");
	 ДатаВозвращения      	= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.ДатаВозвращения");
	 ВсегоЧасов     		= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.ВсегоЧасов");
	 ПлТемп		     		= НайтиРекВТбл(Тбл,"документ.уатпутевойлист.Температура");
	 
	 РегКлд  = ИмяТекБазы+НайтиРекВТбл(Тбл,"РегистрСведений.уатРегламентированныйПроизводственныйКалендарь");
	 клдДт    = НайтиРекВТбл(Тбл,"РегистрСведений.уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря");
	 
	 РегРаб  = ИмяТекБазы+НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС");
	 рбТС    = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.ТС");
	 рбЧас   = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.КоличествоЧасов");
	 
	 РегВыр  = ИмяТекБазы+НайтиРекВТбл(Тбл,"РегистрНакопления.уатВыработкаТС");
	 вырТС   = НайтиРекВТбл(Тбл,"РегистрНакопления.уатВыработкаТС.ТС");
	 вырКол  = НайтиРекВТбл(Тбл,"РегистрНакопления.уатВыработкаТС.Количество");
	 
	 РегистрНакопленияуатРасходГСМнаТС  = ИмяТекБазы+НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС");
	 уатРасходГСМнаТСРегистратор 		= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.Регистратор");
	 РасходПоФакту 						= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.РасходПоФакту");
	 ЧасыЗкзОбр 						= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.КоличествоЧасов");
	 ТКоэф 								= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.ТКоэф");
	 РасходПоНорме 						= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.РасходПоНорме");
	 ОграничениеРасхода 				= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.ОграничениеРасхода");
	 ПоказательРасчета 					= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.ПоказательРасчета");
	 уатРасходГСМнаТСТС 				= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.ТС");
	 Оборудование 						= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.Оборудование");
	 Период		 						= НайтиРекВТбл(Тбл,"РегистрНакопления.уатРасходГСМнаТС.Период");
	 
	 СправочникуатТипТС 				= ИмяТекБазы+НайтиРекВТбл(Тбл,"Справочник.уатТипыТС");
	 СпрТипссылка 						= НайтиРекВТбл(Тбл,"Справочник.уатТипыТС.ссылка");
	 ТипНаименование 					= НайтиРекВТбл(Тбл,"Справочник.уатТипыТС.Наименование");
	 
	 СправочникОрганизации 				= ИмяТекБазы+НайтиРекВТбл(Тбл,"Справочник.Организации");
	 ОргИмя				 				= НайтиРекВТбл(Тбл,"Справочник.Организации.Наименование");
	 
	 СправочникОбр		 				= ИмяТекБазы+НайтиРекВТбл(Тбл,"Справочник.ОборудованиеРаботыГСМ");
	 ОБрссылка 							= НайтиРекВТбл(Тбл,"Справочник.ОборудованиеРаботыГСМ.ссылка");
	 ОБрРод				 				= НайтиРекВТбл(Тбл,"Справочник.ОборудованиеРаботыГСМ.Родитель");
	 
	 
	 
	 
	 
	 ТекстЗапроса = "
	 | SELECT
	 |    "+цнОрг+" Орг,
	 |    "+цнВер+" Вер,
	 |    Cast("+цнМЕсГод+" as DateTime) Дт,
	 |    SUM("+цнРасходПоФакту+") КолЦн,
	 |    0 КолПрф
	 |
	 |FROM "+ИмяТабЦентр+" ТТТ
	 |WHERE "+цнОрг+" IN (N'"+ПолучитьОРг()+"')
	 |GROUP BY 
	 |    "+цнОрг+" ,
	 |    "+цнВер+" ,
	 |    "+цнМЕсГод+" 
	 |
	 |UNION ALL
	 |
	 |SELECT
	 |	N'"+ПолучитьОРг()+"' Орг,
	 |	master.dbo.fn_varbintohexstr(ISNULL(ДокЗкГСм."+ДокЗкГСМВерсия+",0)) Версия,
	 |  dateadd( month, datediff( month, 0, уатРасходГСМнаТС._Period), 0) МесГод,
	 |  0 КолЦн,
	 |	SUM("+РасходПоФакту+")  КолПрф
	 |	
	 |FROM
	 |	"+РегистрНакопленияуатРасходГСМнаТС+" (NOLOCK) уатРасходГСМнаТС
	 |INNER JOIN (SELECT TOP 1 "+ОргИмя+" _Descr FROM "+СправочникОрганизации+" (NOLOCK) ) СпрОрг ON 1=1
	 |LEFT OUTER JOIN "+ДокЗкГСМ+" (NOLOCK) ДокЗкГСМ ON Month(ДокЗкГСм."+ДокЗкГСМДата+") = Month(уатРасходГСМнаТС._Period)	
	 |	                                  and YEAR(ДокЗкГСм."+ДокЗкГСМДата+")  = YEAR(уатРасходГСМнаТС._Period)
	 |	                                  and ДокЗкГСм."+ДокЗкГСМПроведен+" = 1
	 |	
	 |	
	 | GROUP BY
	 |	dateadd( month, datediff( month, 0, уатРасходГСМнаТС._Period), 0),
	 |	СпрОрг._Descr,
	 |	ISNULL(ДокЗкГСм."+ДокЗкГСМВерсия+",0) 
	 |
	 |
	 |";
	 
	 //Сообщить(ТекстЗапроса);
	 
	 ТблПер = Новый ТаблицаЗначений;
	 ТблПер.Колонки.Добавить("Вер");
	 ТблПер.Колонки.Добавить("Дт");
	 ТблПер.Колонки.Добавить("КолЦн", Новый ОписаниеТипов("Число"));
	 ТблПер.Колонки.Добавить("КолПрф",Новый ОписаниеТипов("Число"));
	 
	Записи=Новый ComObject("ADODB.RecordSet");
	Попытка
		Записи.Open(ТекстЗапроса,Соединение);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	 
	Пока Записи.EOF() = 0 Цикл 
		Стр = ТблПер.Добавить();
		стр.Вер    =  СокрЛП(Записи.Fields("Вер").Value);
		стр.Дт     = Записи.Fields("Дт").Value;
		стр.КолЦн  = Записи.Fields("КолЦн").Value;
		стр.КолПрф = Записи.Fields("КолПрф").Value;
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	
	ТблПер.Свернуть("Дт,Вер","КолЦн,КолПрф");
	ДЛя а=-ТБлПер.Количество() по -1 Цикл
		Если ТблПер[-а-1].КолЦн = ТблПер[-а-1].КолПрф Тогда
			ТблПер.Удалить(-а-1);
		КонецеСлИ;
	КонецЦикла;
	
	Для а=0 по 3 Цикл
	НовСтр = ТблПер.Добавить();
	новСтр.Дт = Дата(Формат(ДобавитьМЕсяц(НачалоМЕсяца(ТекущаяДата()),-а),"ДФ='''40''yyMMdd'"));
	новСтр.КолЦн = 1;
	новСТр.колПрф = 2;
	КонецЦикла;
	
	
	ТблПер.Свернуть("Дт","КолЦн,КолПрф");
	ТБлПер.сортировать("Дт");
	//ТблПер.Выбратьстроку(); Возврат;
	
	
//Синхро	 

Для каждого стПер из ТблПер Цикл 
	
	Если стПер.КолЦн = стПер.КолПрф Тогда Продолжить; КонецеСЛИ;
	
	СообщитьЗаписать("Синхро : "+Формат(стПер.Дт,"ДФ='MMMM yy'"));
	
	Дт1 = Формат(НачалоМесяца(стПер.Дт),"ДФ=yyyyMMdd");
	Дт2 = Формат(КонецМесяца(стПер.Дт)+1,"ДФ=yyyyMMdd");
	ТекДт = "40"+Формат(ТекущаяДата(),"ДФ=yy-MM-ddTHH:mm:ss.000");
	
	Попытка
		Соединение.Execute("DELETE   "+ИмяТабЦентр+" WHERE "+цнМесГод+" >= CONVERT(DateTime,'"+Дт1+"',104) 
							|                          and "+цнМесГод+" < CONVERT(DateTime,'"+Дт2+"',104) 
							|                          and "+цнОрг+" IN ("+ПолучитьСтрОрганизаций()+" )
							|");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	 
	ТекстЗапроса = "
|SELECT	
|	ТранспортноеСредство,
|	Дт,
|	ISNULL(AVG(Темп),99) Темп
|INTO #T1	
|FROM	
| (	
|	SELECT DISTINCT
|		"+ДокПлТС+" ТранспортноеСредство,
|		ISNULL("+клдДт+",CONVERT(DateTime,'"+Дт1+"',104)) Дт,
|		CASE WHEN "+плТемп+"> 50 THEN NULL ELSE "+плТемп+" END Темп
|	
|	FROM "+документуатпутевойлист+" (NOLOCK) ДокПЛ	
|	LEFT OUTER JOIN "+РегКлд+" (NOLOCK) РегКлд ON РегКлд."+клдДт+" >= "+ДатаВыезда+" 
|	    	and  CASE WHEN datediff( Hour, "+ДатаВыезда+", "+ДатаВозвращения+") < 24 
|	              	  THEN dateadd( day, datediff( day, 0, "+ДатаВыезда+")+1, 0)
|	              	  ELSE dateadd( day, datediff( day, 0, "+ДатаВозвращения+")+1, 0) END > РегКлд."+клдДт+"
|	
|	WHERE   "+ДатаВыезда+" >= CONVERT(DateTime,'"+Дт1+"',104) 	
|  		and "+ДатаВыезда+" <  CONVERT(DateTime,'"+Дт2+"',104)
|  		and "+ДокПЛПроведен+" = 1	
|  ) WWW	
|	
|GROUP BY	ТранспортноеСредство,
|  	        Дт
|	
|;	
|SELECT	
|	ТранспортноеСредство,
|	ISNULL(РегРаб.ВсегоЧасов,0) ВсегоЧасов,
|	ISNULL(РегРаб.ВсегоЧасовГСМ,0) ВсегоЧасовГСМ,
|	ISNULL(РегВыр.ВсегоПробег,0) ВсегоПробег,
|	AVG(Темп) Темп,
|	SUM(1) КолДней
|	
|INTO #T2	
|FROM #T1 W	
|	
|LEFT OUTER JOIN (SELECT 
|                       "+рбТС+" ТС, 
|                       SUM(CASE WHEN РегГСМ.Рег IS NOT NULL THEN "+рбЧас+" ELSE 0 END) ВсегоЧасовГСМ,
|                       SUM("+рбЧас+") ВсегоЧасов
|                 FROM "+РегРаб+" (NOLOCK) Рег 
|	              LEFT OUTER JOIN (SELECT DISTINCT _RecorderRRef Рег 
|                                    FROM "+РегистрНакопленияуатРасходГСМнаТС+" (NOLOCK) РегГСМ0
|                                   WHERE  _Period >= CONVERT(DateTime,'"+Дт1+"',104) 	
|                                     and  _Period <  CONVERT(DateTime,'"+Дт2+"',104)) РегГСМ ON РегГСМ.Рег = Рег._RecorderRRef
|	
|                 WHERE _Period >= CONVERT(DateTime,'"+Дт1+"',104) 	
|                   and _Period <  CONVERT(DateTime,'"+Дт2+"',104)      
|                 GROUP BY "+рбТС+"
|                   ) РегРаб ON РегРаб.ТС = ТранспортноеСредство	
|	
|LEFT OUTER JOIN (SELECT 
|                       "+вырТС+" ТС, 
|                       SUM("+вырКол+") ВсегоПробег
|                 FROM "+РегВыр+" (NOLOCK) Рег 
|                 WHERE _Period >= CONVERT(DateTime,'"+Дт1+"',104) 	
|                   and _Period <  CONVERT(DateTime,'"+Дт2+"',104)      
|                 GROUP BY "+вырТС+"
|                   ) РегВыр ON РегВыр.ТС = ТранспортноеСредство	
|	
|GROUP BY ТранспортноеСредство,	
|	ISNULL(РегРаб.ВсегоЧасовГСМ,0),
|	ISNULL(РегРаб.ВсегоЧасов,0) ,
|	ISNULL(РегВыр.ВсегоПробег,0) 
|	
|	
|	
|;	
|SELECT
|   CONVERT(DateTime,'"+Дт1+"',104) МесГод,  
|	СпрТС."+ГаражныйНомер+" ГарНом,
|	СпрТС."+ГосударственныйНомер+" ГосНом,
|	СпрТС."+ТСНаименование+" ИмяТС,
|	ISNULL(СпрТип."+ТипНаименование+",'') ТипТС,
|	ISNULL(СпрОБр."+ОБрРод+",0) РодОбр,
|	СпрТС."+упрМодель+" Шасси,
|	СпрТС."+ТСгодВыпуска+" ГодВыпуска,
|	СпрТС."+ТСвес+" Вес,
|	СпрТС."+тсЛС+" ЛС,
|	ISNULL(уатРасходГСМнаТС."+Оборудование+",0) Оборудование,
|	ISNULL(ТСИтог.ВсегоПробег,0) ВсегоПробег,
|	0 колПл,
|	ISNULL(ТСИтог.Темп,0) Темп,
|	ISNULL(ТСИтог.колДней,0) колДней,
|	ISNULL(ТСИтог.ВсегоЧасов,0)  Всегочасов,
|	ISNULL(ТСИтог.ВсегоЧасовГСМ,0) ВсегоЧасовГСМ,
|	СпрОрг._Descr Орг,
|	ISNULL(ДокЗкГСм."+ДокЗкГСМВерсия+",0) Версия,
|	SUM(ISNULL("+ЧасыЗкзОбр+",0))  ЧасыЗкзОбр,
|	SUM(ISNULL("+РасходПоФакту+",0))  РасходПоФакту,
|	SUM(ISNULL("+РасходПоФакту+" * "+ТКоэф+"/100,0))  РасходТемп,
|	SUM(ISNULL("+РасходПоНорме+",0))  РасходПоНорме,
|	SUM(ISNULL("+ОграничениеРасхода+",0))  ОграничениеРасхода,
|	SUM(ISNULL("+ПоказательРасчета+",0)) ПоказательРасчета
|INTO #vrTbl0	
|FROM
|	   "+СправочникуатТС+" (NOLOCK) СпрТС
|	
|	
|LEFT OUTER JOIN #T2 (NOLOCK) ТСИтог                                              ON ТСИтог.ТранспортноеСредство = СпрТС."+СпрТСссылка+"
|LEFT OUTER JOIN "+РегистрНакопленияуатРасходГСМнаТС+" (NOLOCK) уатРасходГСМнаТС  ON СпрТС."+СпрТСссылка+" = уатРасходГСМнаТС."+уатРасходГСМнаТСТС+"
|	                                                                             and уатРасходГСМнаТС."+Период+" >= CONVERT(DateTime,'"+Дт1+"',104) 	
|  																				 and уатРасходГСМнаТС."+Период+" <  CONVERT(DateTime,'"+Дт2+"',104)
|	
|	
|	
|LEFT OUTER JOIN "+СправочникуатТипТС+" (NOLOCK) СпрТип   ON СпрТип."+СпрТипссылка+" = СпрТС."+СпрТСТипТС+"
|LEFT OUTER JOIN "+СправочникОбр+" (NOLOCK) СпрОбр        ON СпрОбр."+ОБрссылка+"  = уатРасходГСМнаТС."+Оборудование+"
|INNER JOIN (SELECT TOP 1 "+ОргИмя+" _Descr FROM "+СправочникОрганизации+" (NOLOCK) ) СпрОрг ON 1=1
|LEFT OUTER JOIN "+ДокЗкГСМ+" (NOLOCK) ДокЗкГСМ ON Month(ДокЗкГСм."+ДокЗкГСМДата+") = Month(уатРасходГСМнаТС._Period)	
|	                                  and YEAR(ДокЗкГСм."+ДокЗкГСМДата+")  = YEAR(уатРасходГСМнаТС._Period)
|	                                  and ДокЗкГСм."+ДокЗкГСМПроведен+" = 1
|	
|	
|WHERE  ТСИтог.ТранспортноеСредство IS NOT NULL  or  уатРасходГСМнаТС."+уатРасходГСМнаТСТС+" IS NOT NULL 
|	
|	
| GROUP BY
|	СпрТС."+ГаражныйНомер+" ,
|	СпрТС."+ГосударственныйНомер+" ,
|	СпрТС."+ТСНаименование+" ,
|	ISNULL(СпрТип."+ТипНаименование+",'') ,
|	ISNULL(СпрОБр."+ОБрРод+",0) ,
|	СпрТС."+упрМодель+" ,
|	СпрТС."+ТСгодВыпуска+" ,
|	СпрТС."+ТСвес+" ,
|	СпрТС."+тсЛС+" ,
|	ISNULL(уатРасходГСМнаТС."+Оборудование+",0) ,
|	ТСИтог.ВсегоПробег ,
|	ТСИтог.Темп,
|	ТСИтог.колДней,
|	ТСИтог.ВсегоЧасов  ,
|	ТСИтог.ВсегоЧасовГСМ  ,
|	СпрОрг._Descr ,
|	ISNULL(ДокЗкГСм."+ДокЗкГСМВерсия+",0) 
|;
|SELECT  
|    newid() ID,
|    CONVERT(DateTime,'"+ТекДт+"',126) ДтСинхро,
|	 master.dbo.fn_varbintohexstr(Версия) Версия,
|    МесГод,
|    N'"+ПолучитьОРг()+"' орг,
|    гарНом,
|    имяТС,
|    госНом,
|    ТипТС,
|    Шасси,
|    ГодВыпуска,
|    ЛС,
|    Вес,
|	РодОбр,
|	Оборудование,
|	ВсегоПробег ВсегоПробег,
|	Всегочасов Всегочасов,
|	ВсегочасовГСМ,
|	колПл КолПЛ,
|	Темп,
|	колДней КолДней,
|	ЧасыЗкзОбр ЧасыЗкзОбр,
|	РасходПоФакту  РасходПоФакту,
|	РасходТемп  РасходТемп,
|	РасходПоНорме  РасходПоНорме,
|	ОграничениеРасхода  ОграничениеРасхода,
|	ПоказательРасчета ПоказательРасчета
|INTO #vrTbl
|FROM #vrTbl0
|;
|";

//Сообщить(ТекстЗапроса); Возврат Неопределено;

	
ТекИмяТабПрф = "#vrTbl";//+ИмяБазыЦентр;
Попытка  Соединение.Execute("DROP Table #T1"); Исключение КонецПопытки;
Попытка  Соединение.Execute("DROP Table #T2"); Исключение КонецПопытки;
Попытка  Соединение.Execute("DROP Table #vrTbl0"); Исключение КонецПопытки;
Попытка  Соединение.Execute("DROP Table "+ТекИмяТабПрф); Исключение КонецПопытки;


//СтрРекЦн = "_SimpleKey,"+
  СтрРекЦн =   цнДтСинхро+","+
			   цнВер+","+
			   цнОрг+","+
               цнГАрНомер+","+
               цнГосНомер+","+
               цнИмяТС+","+
               цнТипТС+","+
               цнУпрМодель+","+
               цнРодОбр+","+
               цнОбр+","+
               цнМесГод+","+
               цнВсегоПробег+","+
               цнКолПЛ+","+
               цнТемп+","+
               цнКолДней+","+
               цнЧасыЗкзОбр+","+
               цнВсегоЧасов+","+
               цнВсегоЧасовГСМ+","+
               цнРасходПоФакту+","+
               цнРасходПоНорме+","+
               цнРасходТемп+","+
               цнОгрРАсхода+","+
               цнПоказательРасчета+","+
               цнГодВыпуска+","+
               цнВес+","+
               цнМощностьЛС+
               "";
			   
СтрРекПрф = "дтСинхро,Версия,орг,гарНом,госНом,имяТС,ТипТС,Шасси,РодОбр,Оборудование,МесГод,ВсегоПробег,КолПЛ,Темп,КолДней,ЧасыЗкзОбр,Всегочасов,ВсегочасовГСМ,РасходПоФакту,РасходПоНорме,РасходТемп,ОграничениеРасхода,ПоказательРасчета,ГодВыпуска,Вес,ЛС";		
			   


	ТекстЗапроса = ТекстЗапроса + "
	|INSERT  "+ИмяТабЦентр+" ("+СтрРекЦн+") SELECT "+СтрРекПрф+" FROM "+ТекИмяТабПрф+" 
	|
	|";
	

	//СообщитьЗаписать(ТекстЗапроса);
	Попытка
		Соединение.Execute(ТекстЗапроса);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	
	//Загрузим РаботуТС
	Если стПер.Дт > Дата(2017,11,30) ТОгда
		
		Попытка
			АлгаКИП_КТГ(Соединение,Тбл,Дт1,Дт2,ТекДт,ИмяСервера,ИмяБазы,ИмяТекБазы);
		Исключение
			СообщитьЗаписать(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		Попытка
			АлгаРаботаТС(Соединение,Тбл,Дт1,Дт2,ТекДт,ИмяСервера,ИмяБазы,ИмяТекБазы);
		Исключение
			СообщитьЗаписать(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
	Конецесли;
	
	
	
КонецЦикла;	

АлгаПеревозкаГрунта(Соединение,ИмяСервера,ИмяБазы,ИмяТекБазы);
	
	ОтлинковатьСервер(Соединение,ИмяСервера);

	Соединение.Close(); 
//Сообщить(ТекстЗапроса);

Возврат ЕстьИзменениеДанных;
	
	
КонецФункции


Функция АлгаПеревозкаГрунта(Соединение,ИмяСервера,ИмяБазы,ИмяТекБазы)
	
	Если Метаданные.НайтиПоПолномуИмени("РегистрСведений.сводПланРаботыТСпоОбъектам")=Неопределено Тогда Возврат Истина; КонецЕСЛИ;
 
	
	
	
//Данные центр		
ИмяТабЦентр = "["+ИмяСервера+"]."+ИмяБазы+".dbo."+Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводПланРаботыТС").код;
цнДтСинхро  = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводПланРаботыТС.дтСинхро").код;
цнОрг       = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводПланРаботыТС.Организация").код;
цнМесГод    = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводПланРаботыТС.МесяцГод").код;
цнОбк       = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводПланРаботыТС.Объект").код;

цнТнПодпис  = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводПланРаботыТС.ТонныРаботаТС").код;
цнТнплан    = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводПланРаботыТС.ТонныРеестр").код;


	  //---

	Попытка
		Соединение.Execute("DELETE   "+ИмяТабЦентр+" WHERE "+цнОбк+" = '1'
							|                          and "+цнОрг+" IN ("+ПолучитьСтрОрганизаций()+" )
							|");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CASE WHEN сводПланРаботыТСпоОбъектам.МесяцГод<ДатаВремя(2018,1,1) THEN ДатаВремя(2018,1,1) ELSE МесяцГод END МесяцГод,
	               |	СУММА(сводПланРаботыТСпоОбъектам.ТонныРаботаТС) КАК ТонныРаботаТС,
	               |	СУММА(сводПланРаботыТСпоОбъектам.ТонныРеестр) КАК ТонныРеестр
	               |ИЗ
	               |	РегистрСведений.сводПланРаботыТСпоОбъектам КАК сводПланРаботыТСпоОбъектам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	CASE WHEN сводПланРаботыТСпоОбъектам.МесяцГод<ДатаВремя(2018,1,1) THEN ДатаВремя(2018,1,1) ELSE МесяцГод END ";
				   
				   ТБл = Запрос.Выполнить().Выгрузить();
	
				   
	ТекДт = "40"+Формат(ТекущаяДата(),"ДФ=yy-MM-ddTHH:mm:ss.000");
				   

ТекстЗапроса  = "INSERT INTO "+ИмяТабЦентр+" VALUES ";
Для каждого Стр из Тбл Цикл
	
	ТекстЗапроса = ТекстЗапроса + "(N'"+ПолучитьОРг()+"', 
	                               |CONVERT(DateTime,'40"+Формат(Стр.МесяцГод,"ДФ=yyMMdd")+"',104),
								   |'1',
								   |0,
								   |0,
								   |0,
								   |0,
								   |"+Формат(Стр.ТонныРаботаТС,"ЧРД=.; ЧН=0; ЧГ=0")+",
								   |"+Формат(Стр.ТонныРеестр,"ЧРД=.; ЧН=0; ЧГ=0")+",
								   |0,
								   |0,
								   |0,
								   |0,
	                               |CONVERT(DateTime,'"+ТекДт+"',126),
								   |'load synchro'
								//   |,newid()
								   |) ";
								   Если Тбл.Индекс(Стр)<>Тбл.Количество()-1 ТОгда
									     ТекстЗапроса = ТекстЗапроса+", ";
									ИНАче
									     ТекстЗапроса = ТекстЗапроса+"; ";
								   КонецЕСЛИ;
	
КонецЦиклА;

	//СообщитьЗаписать(ТекстЗапроса);
	Попытка
		Соединение.Execute(ТекстЗапроса);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	
	
	
КонецФункции


Функция АлгаРаботаТС(Соединение,Тбл,Дт1,Дт2,ТекДт,ИмяСервера,ИмяБазы,ИмяТекБазы)
	
	
//Данные центр		
ИмяТабЦентр = "["+ИмяСервера+"]."+ИмяБазы+".dbo."+Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС").код;
цнДтСинхро  = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.дтСинхро").код;
цнОрг       = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.Организация").код;
цнМесГод    = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.МесяцГод").код;
цнЧсМес     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ЧислоМесяца").код;
цнЧсРаб     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ЧасыРаботаТС").код;
цнСмРаб     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.СуммаРаботаТС").код;
цнЧсДек     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ЧасыРеестр").код;
цнЧсСуб     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ЧасыСубподряд").код;
цнСмДек     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.СуммаРеестр").код;
цнТнРаб     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ТонныРаботаТС").код;
цнТнДек     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ТонныРеестр").код;
цнДнРем     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ДниВРемонте").код;
цнТнКмРаб   = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.ТнКмРаботаТС").код;
цнОбк       = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводРаботыТС.Объект").код;


	//Данные местные
	 
	 ДокРем					= ИмяТекБазы+НайтиРекВТбл(Тбл,"документ.уатРемонтныйЛист");
	 рлСсылка	    		= НайтиРекВТбл(Тбл,"документ.уатРемонтныйЛист.ссылка");
	 рлПроведен	    		= НайтиРекВТбл(Тбл,"документ.уатРемонтныйЛист.Проведен");
	 рлНач 					= НайтиРекВТбл(Тбл,"документ.уатРемонтныйЛист.ДатаНачала");
	 рлКон		        	= НайтиРекВТбл(Тбл,"документ.уатРемонтныйЛист.ДатаОкончания");
	 
	 РегКлд  = ИмяТекБазы+НайтиРекВТбл(Тбл,"РегистрСведений.уатРегламентированныйПроизводственныйКалендарь");
	 клДт    = НайтиРекВТбл(Тбл,"РегистрСведений.уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря");
	 
	 РегРаб  = ИмяТекБазы+НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС");
	 рбТС    = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.ТС");
	 рбОбк   = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.Объект");
	 рбЧас   = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.КоличествоЧасов");
	 рбСум   = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.Сумма");
	 рбТн    = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.Тонны");
	 рбТнКм  = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.ТнКм");
	 рбМ3    = НайтиРекВТбл(Тбл,"РегистрНакопления.РаботаТС.Объем");
	 
	 РегДек  = ИмяТекБазы+НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг");
	 дкПЛ    = НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.ПутевойЛист");
	 дкИд    = НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.идСтроки");
	 дкЧас   = НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Количество");
	 дкСумСуб= НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.СуммаСуб");
	 дкСум   = НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Сумма")  +"+"
	         + НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.СуммаКм")+"+"
	         + НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Сумма1") +"+"
	         + НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Сумма2") +"+"
	         + НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Сумма3") +"+"
	         + НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Сумма4") +"+"
	         + НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Сумма5") +"+"
	         + НайтиРекВТбл(Тбл,"РегистрНакопления.РеестрыУслуг.Сумма6");
	 
	 СправочникОрганизации 				= ИмяТекБазы+НайтиРекВТбл(Тбл,"Справочник.Организации");
	 ОргИмя				 				= НайтиРекВТбл(Тбл,"Справочник.Организации.Наименование");
	 
	 СправочникОбъекты   				= ИмяТекБазы+НайтиРекВТбл(Тбл,"Справочник.уатОбъектыСтроительства");
	 ОбкИмя				 				= НайтиРекВТбл(Тбл,"Справочник.уатОбъектыСтроительства.Наименование");
	 

	Попытка
		Соединение.Execute("DELETE   "+ИмяТабЦентр+" WHERE "+цнМесГод+" >= CONVERT(DateTime,'"+Дт1+"',104) 
							|                          and "+цнМесГод+" < CONVERT(DateTime,'"+Дт2+"',104) 
							|                          and "+цнОрг+" IN ("+ПолучитьСтрОрганизаций()+" )
							|");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	


ТекстЗапроса = "
|SELECT	
|   newid() ID,
|   CONVERT(DateTime,'"+ТекДт+"',126) ДтСинхро,
|	N'"+ПолучитьОРг()+"' Орг,
|	Обк,
|	CONVERT(DateTime,'"+Дт1+"',104) МесГод,
|	дн,	
|   SUM(ЧасРаб) ЧасРаб,
|   SUM(СумРаб) СумРаб,
|   SUM(ЧасДек) ЧасДек,                	
|   SUM(СумДек) СумДек,                	
|   SUM(Тн)     Тн,
|   SUM(ТнКм)   ТнКм,
|   0           ТнДек,
|   SUM(М3)     М3,
|	SUM(ЧасСуб) ЧасСуб,
|	SUM(Рем)    Рем
|	
|INTO #vrRab	
|FROM	
|	 (
|       SELECT 
|          DAY(_Period) Дн,                	
|          ISNULL("+ОбкИмя+",'') Обк,                	
|          "+рбЧас+" ЧасРаб,
|          "+рбСум+" СумРаб,
|          "+рбТн +" Тн,
|          "+рбТнКм +" ТнКм,
|          "+рбМ3 +" М3,
|          0 ЧасДек,                	
|          0 СумДек,                	
|          0 Рем,                	
|          0 ЧасСуб                	
|                          	
|       FROM "+РегРаб+" (NOLOCK) Рег 
|       LEFT OUTER JOIN "+СправочникОбъекты+" (NOLOCK) СпрОБК ON СпрОбк._IDRREF = "+рбОбк+"                   	
|       WHERE _Period >= CONVERT(DateTime,'"+Дт1+"',104) 	
|         and _Period <  CONVERT(DateTime,'"+Дт2+"',104)      
|                          	
|       UNION ALL	
|                          	
|       SELECT 
|          DAY(Рег._Period) Дн,                	
|          '' Обк,                	
|          0 ЧасРаб,
|          0 СумРаб,
|          0 Тн,
|          0 ТнКм,
|          0 М3,
|          "+дкЧас+" ЧасДек,                	
|          "+дкСум+" СумДек,                	
|          0 Рем,                	
|          0 ЧасСуб                	
|                          	
|       FROM "+РегДек+" (NOLOCK) Рег 
|                          	
|       WHERE Рег._Period >= CONVERT(DateTime,'"+Дт1+"',104) 	
|         and Рег._Period <  CONVERT(DateTime,'"+Дт2+"',104)      
|                          	
|       UNION ALL	
|      
//Субподряд
|      
|       SELECT 
|          DAY(Рег._Period) Дн,                	
|          '' Обк,                	
|          0 ЧасРаб,
|          0 СумРаб,
|          0 Тн,
|          0 ТнКм,
|          0 М3,
|          0 ЧасДек,                	
|          0 СумДек,                	
|          0 Рем,                	
|          Рег."+дкЧас+"  ЧасСуб                	
|                          	
|       FROM "+РегДек+" (NOLOCK) Рег 
|       INNER JOIN "+РегДек+" (NOLOCK) РегСуб ON РегСуб."+дкПЛ+" = Рег."+дкПЛ+"                   	
|                          	                 and РегСуб."+дкИд+" = Рег."+дкИд+"
|                          	                 and РегСуб."+дкСумСуб+" <> 0
|                          	
|       WHERE Рег._Period >= CONVERT(DateTime,'"+Дт1+"',104) 	
|         and Рег._Period <  CONVERT(DateTime,'"+Дт2+"',104)      
|         and Рег."+дкЧас+" <> 0                	
|                          	
|    ) WWW                      	
|                   	
|INNER JOIN (SELECT TOP 1 "+ОргИмя+" _Descr FROM "+СправочникОрганизации+" (NOLOCK) ) СпрОрг ON 1=1
|                   	
|GROUP BY Дн,СпрОрг._Descr, Обк	
|                   	
|";	


//Сообщить(ТекстЗапроса); //Возврат Неопределено;

	
ТекИмяТабПрф = "#vrRab";//+ИмяБазыЦентр;
Попытка  Соединение.Execute("DROP Table "+ТекИмяТабПрф); Исключение КонецПопытки;



//СтрРекЦн = "_SimpleKey,"+
СтрРекЦн =	   цнДтСинхро+","+
			   цнОрг+","+
			   цнОбк+","+
               цнМесГод+","+
               цнЧсМес+","+
               цнЧсРаб+","+
               цнСмРаб+","+
               цнЧсДек+","+
               цнСмДек+","+
               цнТнРаб+","+
               цнТнКмРаб+","+
               цнТнДек+","+
               цнЧсСуб+","+
               цнДнРем+
               "";
			   
СтрРекПрф = "дтСинхро,Орг,Обк,МесГод,дн,ЧасРаб,СумРаб,ЧасДек,СумДек,Тн,ТнКм,ТнДек,ЧасСуб,Рем";		
			   


	ТекстЗапроса = ТекстЗапроса + "
	|INSERT  "+ИмяТабЦентр+" ("+СтрРекЦн+") SELECT "+СтрРекПрф+" FROM "+ТекИмяТабПрф+" 
	|
	|";
	

	//СообщитьЗаписать(ТекстЗапроса);
	Попытка
		Соединение.Execute(ТекстЗапроса);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	

	
	
КонецФункции

Функция АлгаКИП_КТГ(Соединение,Тбл,Дт1,Дт2,ТекДт,ИмяСервера,ИмяБазы,ИмяТекБазы)
	
	
//Данные центр		
ИмяТабЦентр = "["+ИмяСервера+"]."+ИмяБазы+".dbo."+Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ").код;
цнДтСинхро  = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.дтСинхро").код;
цнОрг       = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.Организация").код;
цнМесГод    = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.МесяцГод").код;
цнЧсМес     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.ЧислоМесяца").код;
цнДнХоз     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.днХоз").код;
цнДнЛин     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.днЛин").код;
цнДнРем     = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.днРем").код;
цнДнОЖ      = Справочники.SQLтаблицы.НайтиПоНаименованию(""+ИмяБазы+".РегистрСведений.сводКИП_КТГ.днОЖ").код;


	//Данные местные
	аДт = Дата("20"+Сред(Дт1,3));
	//аДт = Дата(2018,1,1);
	//Пока аДт < КонецМесяца(ТекущаяДата())+1 Цикл
		оОБр =Обработки.ТабельТС.Создать();
		оОБр.Дт = аДт;//;Дата("20"+Сред(Дт1,3));
		оОбр.ВывПодр = Ложь;
		оОбр.ВывВсеТипы = Истина;
		оТбл = оОБр.Данные();
		
		ВыгрузитьАЗУРтблТС(оТбл);
		ВыгрузитьАЗУРтблТСКИПКТГ(оТбл);		
	//	аДт = ДобавитьМесяц(аДт,1);
	//Конеццикла;
	возврат истина;
	
	
	оТбл.Свернуть("Дт","днХоз,днХозКИП,днЛинКИП,днРемКИП,днОЖ");
	
	оТБл.Колонки.Добавить("дтСинхро");
	оТбл.ЗаполнитьЗначения(ТекущаяДата(),"дтСинхро");
	
	  //---

	Попытка
		Соединение.Execute("DELETE   "+ИмяТабЦентр+" WHERE "+цнМесГод+" >= CONVERT(DateTime,'"+("20"+Сред(Дт1,3))+"',104) 
							|                          and "+цнМесГод+" < CONVERT(DateTime,'" +("20"+Сред(Дт2,3))+"',104) 
							|                          and "+цнОрг+" IN ("+ПолучитьСтрОрганизаций()+" )
							|");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	


//СтрРекЦн = "_SimpleKey,"+
СтрРекЦн =	   цнДтСинхро+","+
			   цнОрг+","+
               цнМесГод+","+
               цнЧсМес+","+
               цнДнХоз+","+
               цнДнЛин+","+
               цнДнРем+","+
               цнДнОЖ+
               "";
			   
СтрРекПрф = "дтСинхро,Орг,Обк,МесГод,дн,ЧасРаб,СумРаб,ЧасДек,СумДек,Тн,ТнКм,ТнДек,Рем";		
			   

ТекстЗапроса  = "INSERT INTO "+ИмяТабЦентр+" VALUES ";
Для каждого Стр из оТбл Цикл
	ТекстЗапроса = ТекстЗапроса + "(N'"+ПолучитьОРг()+"', 
	                               |CONVERT(DateTime,'"+Дт1+"',104),
								   |"+Стр.Дт+",
								   |"+Стр.днХозКИП+",
								   |"+Стр.днЛинКИП+",
								   |"+Стр.днРемКИП+",
								   |"+Стр.днОЖ+",
								   |"+Стр.днХоз+",
	                               |CONVERT(DateTime,'"+ТекДт+"',126),
								   |newid()
								   |) ";
								   Если оТбл.Индекс(Стр)<>оТбл.Количество()-1 ТОгда
									     ТекстЗапроса = ТекстЗапроса+", ";
									ИНАче
									     ТекстЗапроса = ТекстЗапроса+"; ";
								   КонецЕСЛИ;
	
КонецЦиклА;

	//СообщитьЗаписать(ТекстЗапроса);
	Попытка
		Соединение.Execute(ТекстЗапроса);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	

	
	
КонецФункции


Функция ПолучитьСоединениеАЗУР()
	
	  
	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.CommandTimeout = 600;
	Соединение.ConnectionTimeout = 30;
	СтрСоединения = "Driver={SQL Server};Server=tcp:azuremax.database.windows.net,1433;Initial Catalog=SVOD;Persist Security Info=False;User ID=max;Password=1!qqqqqq;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";//ПолучитьСтрокуСоединенияSQL();
	Попытка
		Соединение.Open(СтрСоединения);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	Возврат Соединение;
	
КонецФункции



Функция ПолучитьСоединениеАзурЮралс()
	
	  
	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.CommandTimeout = 600;
	Соединение.ConnectionTimeout = 30;
	СтрСоединения = "Driver={SQL Server};Server=tcp:urals.database.windows.net,1433;Initial Catalog=SVOD;Persist Security Info=False;User ID=max;Password=1!qqqqqq;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";//ПолучитьСтрокуСоединенияSQL();
	Попытка
		Соединение.Open(СтрСоединения);
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	Возврат Соединение;
	
КонецФункции


Процедура ВыгрузитьАЗУР()
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|
	|SELECT
	|	Рег.ТС,
	|	MAX(Рег.Период) Период
	|INTO врТбл0
	|FROM РегистрСведений.уатМестонахождениеТС Рег
	|INNER JOIN  Документ.уатВыбытиеТСиОборудования.ТС Док ON Док.ТС = Рег.ТС 
	|                                                       и Рег.Период < Док.ДатаВыбытия
	|                                                       и Док.ДатаВыбытия >= &Дата
	|GROUP BY Рег.ТС
	
	|;
	
	|SELECT
	|	Рег.ТС,
	|	Рег.Состояние
	|INTO врТбл	
	|FROM   РегистрСведений.уатМестонахождениеТС Рег
	|INNER JOIN врТбл0 Тбл ON Тбл.ТС = Рег.ТС и Рег.Период = Тбл.Период
	|;
	|
	|
	|
	|
				   |
				   |ВЫБРАТЬ
				   |    уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Организация.Наименование Орг,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.упрМодель.Наименование упрМодель,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ГодВыпуска ГодВыпуска,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ТипТС.Наименование ТипТС,
	               |	НачалоПериода(уатВводВЭксплуатациюТСиОборудованияТС.ДатаВвода,Месяц) МесяцГод,
				   |    SUM(CASE WHEN СпрСос.ВидСостояния = Значение(Перечисление.уатВидыСостоянийТС.Арендованный) THEN 0 ELSE 1 END) Прх,
				   |    SUM(CASE WHEN СпрСос.ВидСостояния = Значение(Перечисление.уатВидыСостоянийТС.Арендованный) THEN 1 ELSE 0 END) прхАренда,
				   |    0 рсх,
				   |    0 рсхАренда
				   |INTO врТБл1
	               |ИЗ
	               |	Документ.уатВводВЭксплуатациюТСиОборудования.ТС КАК уатВводВЭксплуатациюТСиОборудованияТС
				   |INNER JOIN Справочник.уатСостояниеТС СпрСос On СпрСос.ссылка = уатВводВЭксплуатациюТСиОборудованияТС.Состояние
	               |ГДЕ
	               |	уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Проведен = Истина
				   |	И уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Дата >= &Дата
				   |    и СпрСос.ЭтоПривленный = Ложь
				   |
				   |GROUP BY
				   |    уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Организация.Наименование ,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.упрМодель.Наименование ,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ГодВыпуска ,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ТипТС,
	               |	НачалоПериода(уатВводВЭксплуатациюТСиОборудованияТС.ДатаВвода,Месяц) 
				   |
				   |
				   |UNION ALL
				   |
				   |ВЫБРАТЬ             
				   |    уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Организация.Наименование Орг,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.упрМодель.Наименование упрМодель,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ГодВыпуска ГодВыпуска,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ТипТС.Наименование ТипТС,
				   |	НачалоПериода(уатВводВЭксплуатациюТСиОборудованияТС.ДатаВыбытия,Месяц) МесяцГод,
				   |	0 Прх,
				   |	0 ПрхАренда,
				   | SUM(CASE WHEN СпрСос.ВидСостояния = Значение(Перечисление.уатВидыСостоянийТС.Арендованный) THEN 0 ELSE 1 END) Рсх,
				   | SUM(CASE WHEN СпрСос.ВидСостояния = Значение(Перечисление.уатВидыСостоянийТС.Арендованный) THEN 1 ELSE 0 END) рсхАренда
				   |ИЗ
				   |	Документ.уатВыбытиеТСиОборудования.ТС КАК уатВводВЭксплуатациюТСиОборудованияТС
				   | LEFT OUTER JOIN врТбл Тбл ON Тбл.ТС =  уатВводВЭксплуатациюТСиОборудованияТС.ТС
				   | LEFT OUTER JOIN Справочник.уатСостояниеТС СпрСос On СпрСос.ссылка = Тбл.Состояние
				   |ГДЕ
				   |	уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Проведен = Истина
				   |	И уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Дата >= &Дата
				   |	и ISNULL(СпрСос.ЭтоПривленный,ложь) = Ложь
				   |	
				   |GROUP BY     
				   |    уатВводВЭксплуатациюТСиОборудованияТС.Ссылка.Организация.Наименование ,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.упрМодель.Наименование ,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ГодВыпуска ,
				   |	уатВводВЭксплуатациюТСиОборудованияТС.ТС.ТипТС,
				   |	НачалоПериода(уатВводВЭксплуатациюТСиОборудованияТС.ДатаВыбытия,Месяц) 
				   |;
				   |SELECT
				   |   &Орг Орг,
				   |   ISNULL(упрМодель,"""") упрМодель,
				   |   ISNULL(ГодВыпуска,0) ГодВыпуска,
				   |   ISNULL(ТипТС,"""") ТипТС,
				   |   МесяцГод,
				   |   SUM(прх) Прх,
				   |   SUM(прхАренда) прхАренда,
				   |   SUM(рсх) Рсх,
				   |   SUM(рсхАренда) РсхАренда
				   |
				   |FROM врТбл1 Тбл
				   |GROUP BY 
				   |   Орг,
				   |   упрМодель,
				   |   ГодВыпуска,
				   |   ТипТС,
				   |   МесяцГод
				   |
				   |";
	
	Запрос.УстановитьПараметр("дата",Макс(Дата(2018,1,1),ДобавитьМесяц(ТекущаяДата(),-6)));
	Запрос.УстановитьПараметр("Орг",ПолучитьОРг());
	ТБл = Запрос.Выполнить().Выгрузить();
	
	  
Соединение = ПолучитьСоединениеАзурЮралс();	
ИмяБазы = "EntIzmKolTS";
ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
ном = 1;

ТекДт = "CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"',104)";

Т = Тбл.Скопировать();
Т.свернуть("МесяцГод,Орг","");

Для каждого С из Т Цикл
	
	дтМес = "CONVERT(DateTime,'"+Формат(С.МесяцГод,"ДФ=yyyyMMdd")+"',104)";
	Попытка
		Соединение.Execute("DELETE "+ИмяБазы+" WHERE dtMonth = "+дтМес+" and org = N'"+С.орг+"'");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
	мас = Тбл.НайтиСтроки(Новый Структура("МесяцГод",С.МесяцГод));
	
	Для а=1 по мас.Количество() Цикл
		Стр = мас[а-1];
		
		ТекстЗапроса = ТекстЗапроса + "
		|(N'"+СокрЛП(Стр.Орг)+"', 
		| N'"+СокрЛП(Стр.упрМодель)+"',
		| N'"+СокрЛП(Стр.типТС)+"',
		|"+Формат(Стр.ГодВыпуска,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.прх,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.прхАренда,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.рсх,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.рсхАренда,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+дтМес+",
		|"+ТекДт+"
		|) ";
		
		Если а=мас.Количество() или ном = 500 ТОгда
			ТекстЗапроса = ТекстЗапроса+"; ";
			ном = 1;
			Сообщить(""+а+"/"+мас.Количество()+" "+С.МесяцГод);
			Попытка
				Соединение.Execute(ТекстЗапроса);
			Исключение
				СообщитьЗаписать(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
		ИНАче
			ТекстЗапроса = ТекстЗапроса+", ";
		КонецЕСЛИ;
		
		ном=ном+1;
		
	КонецЦиклА;
	
	СообщитьЗаписать("Синхро [dbo].["+ИмяБазы+"] выпонена "+ТекДт);
КонецЦиклА;
	
КонецПроцедуры

Функция ПолучитьОРг()
	
	Выб = Справочники.Организации.Выбрать();
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("ОсновнаяОрганизация") <> Неопределено ТОгда
		Пока ВЫб.Следующий() Цикл
			ТекОрг = Выб.Наименование;
			Если Выб.ОсновнаяОрганизация = Истина ТОгда ПРервать; КонецеСЛИ;
		КонецЦикла;
	ИНАче
		Выб.Следующий();
		ТекОРг = Выб.Наименование;
	КонецеСЛИ;
	
	Возврат ТекОРг;
	
КонецФункции

Процедура ВыгрузитьАЗУРтблТС(оТбл) 
	
	
	ТБл = оТБл.скопировать();
	ТБл.Свернуть("МесяцГод,упрМодель,типТСимя,ГодВыпуска","днХоз,днХозКИП,днХозКИПкон,днЛинКИП,днРем,днРемКИП,днОЖ,РабЧасы,рееЧасы,коэфРабЧасы,ГСМ,Пробег,мтЧасы,КонЧсл");
	
	ТекОрг = ПолучитьОРг();
	
	  
Соединение = ПолучитьСоединениеАзурЮралс();	
ИмяБазы = "EntKolTS";
ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
ном = 1;

ТекДт = "CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"',104)";

Т = Тбл.Скопировать();
Т.свернуть("МесяцГод","");

Для каждого С из Т Цикл
	
	дтМес = "CONVERT(DateTime,'"+Формат(С.МесяцГод,"ДФ=yyyyMMdd")+"',104)";
	ФорматДтКвартал = Формат(С.МесяцГод,"ДФ='q ''кв.'' yyyy'");
	Попытка
		Соединение.Execute("DELETE "+ИмяБазы+" WHERE dtMonth = "+дтМес+" and org = N'"+ТекОРг+"'");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
	мас = Тбл.НайтиСтроки(Новый Структура("МесяцГод",С.МесяцГод));
	
	Для а=1 по мас.Количество() Цикл
		Стр = мас[а-1];
		//стрДт = "CONVERT(DateTime,'"+Формат(стр.ДтДень,"ДФ=yyyyMMdd")+"',104)";
		
		ТекстЗапроса = ТекстЗапроса + "
		|(N'"+СокрЛП(ТекОРг)+"', 
		| "+дтМес+",
		| N'"+СокрЛП(Стр.упрМодель)+"',
		| N'"+СокрЛП(Стр.типТСимя)+"',
		| N'"+СокрЛП(ФорматДтКвартал)+"',
		|"+Формат(Стр.ГодВыпуска,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.КонЧсл,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.днХоз,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.днРем,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.днЛинКИП,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.КонЧсл-Стр.днХозКИПкон,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.днХозКИПкон,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.РабЧасы,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.рееЧасы,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.коэфРабЧасы,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.ГСМ,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.Пробег,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.мтЧасы,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+дтМес+",
		|"+ТекДт+"
		|) ";
		
		Если а=мас.Количество() или ном = 500 ТОгда
			ТекстЗапроса = ТекстЗапроса+"; ";
			ном = 1;
			Сообщить(""+а+"/"+мас.Количество()+" "+С.МесяцГод);
			Попытка
				Соединение.Execute(ТекстЗапроса);
			Исключение
				СообщитьЗаписать(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
		ИНАче
			ТекстЗапроса = ТекстЗапроса+", ";
		КонецЕСЛИ;
		
		ном=ном+1;
		
	КонецЦиклА;
	
	СообщитьЗаписать("Синхро [dbo].["+ИмяБазы+"] выпонена "+ТекДт);
КонецЦиклА;
	
КонецПроцедуры

Процедура ВыгрузитьАЗУРтблТСКИПКТГ(оТбл) 
	
	
	ТБл = оТБл.скопировать();
	ТБл.Свернуть("МесяцГод,ДтДень","днХоз,днХозКИП,днЛинКИП,днРемКИП");
	
	ТекОрг = ПолучитьОРг();
	
	  
Соединение = ПолучитьСоединениеАзурЮралс();	
ИмяБазы = "KipKtg";
ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
ном = 1;

ТекДт = "CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"',104)";

Т = Тбл.Скопировать();
Т.свернуть("МесяцГод","");

Для каждого С из Т Цикл
	
	дтМес = "CONVERT(DateTime,'"+Формат(С.МесяцГод,"ДФ=yyyyMMdd")+"',104)";
	ФорматДтКвартал = Формат(С.МесяцГод,"ДФ='q ''кв.'' yyyy'");
	Попытка
		Соединение.Execute("DELETE "+ИмяБазы+" WHERE dtMonth = "+дтМес+" and org = N'"+ТекОРг+"'  and planKIP IS NULL ");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
	мас = Тбл.НайтиСтроки(Новый Структура("МесяцГод",С.МесяцГод));
	
	Для а=1 по мас.Количество() Цикл
		Стр = мас[а-1];
		стрДт = "CONVERT(DateTime,'"+Формат(стр.ДтДень,"ДФ=yyyyMMdd")+"',104)";
		Если Стр.днХозКип = 0 Тогда Продолжить; КонецеСЛИ;
		кип = Стр.днЛинКИП/Стр.днХозКип;
		КТГ = (Стр.днХозКип-Стр.днРемКИП)/Стр.днХозКип;
		
		ТекстЗапроса = ТекстЗапроса + "
		|(N'"+СокрЛП(ТекОРг)+"', 
		| "+стрДт+",
		|"+Формат(кип,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(КТГ,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|NULL,
		|NULL,
		|"+Формат(Стр.днХозКип,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.днЛинКИП,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+ТекДт+",
		|"+дтМес+"
		|) ";
		
		Если а=мас.Количество() или ном = 500 ТОгда
			ТекстЗапроса = ТекстЗапроса+"; ";
			ном = 1;
			Сообщить(""+а+"/"+мас.Количество()+" "+С.МесяцГод);
			Попытка
				Соединение.Execute(ТекстЗапроса);
			Исключение
				СообщитьЗаписать(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
		ИНАче
			ТекстЗапроса = ТекстЗапроса+", ";
		КонецЕСЛИ;
		
		ном=ном+1;
		
	КонецЦиклА;
	
	СообщитьЗаписать("Синхро [dbo].["+ИмяБазы+"] выпонена "+ТекДт);
КонецЦиклА;
	
КонецПроцедуры

Процедура ВыгрузитьАЗУРШиротаДолгота()
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачалоПериода(РаботаТС.Период,МЕсяц) МесяцГод,	
	               |	ISNULL(Месторождения.Широта, ISNULL(Контрагенты.Широта,60.934400) )	 Широта,
	               |	ISNULL(Месторождения.Долгота, ISNULL(Контрагенты.Долгота,76.553100) )	 Долгота,
	               |	SUM(РаботаТС.КоличествоЧасов) Часы
	               |ИЗ
	               |	РегистрНакопления.РаботаТС КАК РаботаТС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты  ПО РаботаТС.Контрагент = Контрагенты.Ссылка
	               |			               
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦехаКонтрагента КАК ЦехаКонтрагента ПО РаботаТС.ЦехКонтрагента = ЦехаКонтрагента.Ссылка
				   
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Месторождения КАК Месторождения ПО ЦехаКонтрагента.Месторождение = Месторождения.Ссылка
	               |		
	               |ГДЕ
	               |	РаботаТС.Период >= &Дт1
	           //    | и	РаботаТС.Период <  &Дт2
				   |GROUP BY
	               |	НачалоПериода(РаботаТС.Период,МЕсяц) ,	
	               |	ISNULL(Месторождения.Широта, ISNULL(Контрагенты.Широта,60.934400) )	 ,
	               |	ISNULL(Месторождения.Долгота, ISNULL(Контрагенты.Долгота,76.553100) )	 
				   |
				   |";	
	Запрос.УстановитьПараметр("Дт1",Макс(Дата(2018,1,1),ДобавитьМесяц(ТекущаяДата(),-14)));
	Запрос.УстановитьПараметр("дата",Макс(Дата(2018,1,1),ДобавитьМесяц(ТекущаяДата(),-14)));
	ТБл = Запрос.Выполнить().Выгрузить();
	
		ТекОрг = ПолучитьОРг();

	
Соединение = ПолучитьСоединениеАзурЮралс();	
ИмяБазы = "EntLitLon";
ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
ном = 1;

ТекДт = "CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"',104)";

Т = Тбл.Скопировать();
Т.свернуть("МесяцГод","");

Для каждого С из Т Цикл
	
	дтМес = "CONVERT(DateTime,'"+Формат(С.МесяцГод,"ДФ=yyyyMMdd")+"',104)";
	Попытка
		Соединение.Execute("DELETE "+ИмяБазы+" WHERE dtMonth = "+дтМес+" and org = N'"+ТекОрг+"'");
	Исключение
		СообщитьЗаписать(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
	мас = Тбл.НайтиСтроки(Новый Структура("МесяцГод",С.МесяцГод));
	
	Для а=1 по мас.Количество() Цикл
		Стр = мас[а-1];
		
		ТекстЗапроса = ТекстЗапроса + "
		|(N'"+СокрЛП(ТекОрг)+"', 
		|"+Формат(Стр.Широта,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.Долгота,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+Формат(Стр.Часы,"ЧРД=.; ЧН=0; ЧГ=0")+",
		|"+дтМес+",
		|"+ТекДт+"
		|) ";
		
		Если а=мас.Количество() или ном = 500 ТОгда
			ТекстЗапроса = ТекстЗапроса+"; ";
			ном = 1;
			Сообщить(""+а+"/"+мас.Количество()+" "+С.МесяцГод);
			Попытка
				Соединение.Execute(ТекстЗапроса);
			Исключение
				СообщитьЗаписать(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
		ИНАче
			ТекстЗапроса = ТекстЗапроса+", ";
		КонецЕСЛИ;
		
		ном=ном+1;
		
	КонецЦиклА;
	
	СообщитьЗаписать("Синхро [dbo].["+ИмяБазы+"] выпонена "+ТекДт);
КонецЦиклА;
	
КонецПроцедуры

Процедура А() экспорт
	                ТекстСообщения = "";
	аДт = Дата(2019,1,1);
	Пока аДт < Дата(2019,5,1) Цикл
		оОБр = Обработки.ТабельТС.Создать();
		оОБр.Дт = аДт;//;Дата("20"+Сред(Дт1,3));
		оОбр.ВывПодр = Ложь;
		оОбр.ВывВсеТипы = Истина;
		оТбл = оОБр.Данные();
		
		ВыгрузитьАЗУРтблТС(оТбл);
		ВыгрузитьАЗУРтблТСКИПКТГ(оТбл);		
		аДт = ДобавитьМесяц(аДт,1);
	Конеццикла;
	
КонецПроцедуры
	
	


ОбщаяПапка = "\\192.168.20.225\1c\";
