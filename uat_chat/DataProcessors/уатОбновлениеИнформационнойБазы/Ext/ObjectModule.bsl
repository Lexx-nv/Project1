
//==================================================================================
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда
	
	// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
	//
	// Параметры:
	//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
	//                            назначается владельцем открываемых из нее форм.
	//
	// Возвращаемое значение:
	//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
	//
	Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт
		
		МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
		Параметры               = МакетОписаниеОбновлений.Параметры;
		
		// Заполнение параметров расшифровок макета описания обновлений,
		Параметры.ФормаПодбораВалют        = Справочники.Валюты.ПолучитьФорму("ФормаПодбораИзКлассификатора");
		Параметры.ФормаСпискаВалют         = Справочники.Валюты.ПолучитьФормуСписка();
		Параметры.ФормаЗагрузкиКурсов      = Обработки.КурсыВалютРБК.ПолучитьФорму();
		Параметры.ФормаПодбораЕдиниц       = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора");
		Параметры.ФормаСпискаЕдиниц        = Справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуСписка();
		Параметры.ФормаСпискаКонтрагентов  = Справочники.Контрагенты.ПолучитьФормуСписка();
		Параметры.ФормаСпискаНоменклатуры  = Справочники.Номенклатура.ПолучитьФормуСписка();
		Параметры.ФормаСпискаОрганизаций   = Справочники.Организации.ПолучитьФормуСписка();
		Если Метаданные.Справочники.Найти("ПодразделенияОрганизаций") <> Неопределено тогда
			Параметры.ФормаСпискаПодразделений = Справочники.ПодразделенияОрганизаций.ПолучитьФормуСписка();
		КонецЕсли;
		
		Параметры.ФормаСпискаСкладов       = Справочники.Склады.ПолучитьФормуСписка();
		Параметры.ФормаКонстант            = ПолучитьОбщуюФорму("уатФормаКонстант");
		Параметры.ФормаСпискаПользователей = Справочники.Пользователи.ПолучитьФормуСписка();
		Параметры.ФормаПользователя        = глЗначениеПеременной("глТекущийПользователь");
		Параметры.ФормаСписокМоделиТС      = Справочники.уатМоделиТС.ПолучитьФормуСписка();
		Параметры.ФормаСпискаТС            = Справочники.уатТС.ПолучитьФормуСписка();
		
		Организации = Справочники.Организации.Выбрать();
		Организация = Неопределено;
		Если Организации.Следующий() Тогда
			Организация = Организации.ПолучитьОбъект();
		КонецЕсли;
		Если Организация = Неопределено Тогда
			Параметры.ФормаНовойОрганизации = "ФормаНовойОрганизации";
		Иначе
			Параметры.ФормаНовойОрганизации = Организация.ПолучитьФорму();
		КонецЕсли;
		
		//1.0.2.1
		Параметры.ФормаДокКомандировкиОрг1021		   = Документы.уатКомандировкиОрганизаций.ПолучитьФормуСписка();
		Параметры.ФормаДокИнвентАгрегатов1021		   = Документы.уатИнвентаризацияАгрегатов.ПолучитьФормуСписка();			
		Параметры.ФормаПраваИНастройки1021             = Обработки.уатУстановкаПравИНастроек.ПолучитьФорму();		
		Параметры.ФормаОтчетОстаткиГСМНаТС1021		   = Отчеты.уатОстаткиГСМНаТС.ПолучитьФорму();
		Параметры.ФормаВыгрузкиУПП1021                 = Обработки.уатВыгрузкаДанныхВУППИКА.ПолучитьФорму();
		
		
		//1.0.3.1
		Параметры.ФормаПараметрыВыработки1031		   = Справочники.уатПараметрыВыработки.ПолучитьФормуСписка();
		Параметры.ФормаОтчетЗадолженностьПоКонтрагентам1031 = Отчеты.уатЗадолженностьПоКонтрагентам.ПолучитьФорму();
		Параметры.ФормаОтчетВедомостьВзаиморасчетыСКонтрагентами1031 = Отчеты.уатВедомостьВзаиморасчетыСКонтрагентами.ПолучитьФорму();
		
		//1.0.4.1
		Параметры.ФормаГруппыПользователей1041		   = Справочники.уатГруппыПользователейДляСогласования.ПолучитьФормуСписка();		
		Параметры.ФормаУстановкиПравИНастроек1041      = Обработки.уатУстановкаПравИНастроек.ПолучитьФорму();		
		Параметры.ФормаДокПланирование1041			   = Документы.уатПланированиеРаботыТС.ПолучитьФормуСписка();		
		Параметры.ФормаОтчетПланФакт1041		       = Отчеты.уатПланФактныйАнализРаботыТС.ПолучитьФорму();		
		
		//1.0.5.1
		Параметры.ФормаКонстант105					   = ПолучитьОбщуюФорму("уатФормаКонстант");
		
		//1.0.6.1
		Параметры.ФормаОтчетИзменениеМестоположения106 = Отчеты.уатИзменениеМестоположенияТС.ПолучитьФорму();
		Параметры.ФормаНастрФормАгр106 = ПолучитьОбщуюФорму("уатНастройкаФормированияНаименованийАгрегатов");
		Параметры.ФормаДокРемонтыйЛист106 = "ФормаДокРемонтыйЛист106";
		
		////
		Возврат МакетОписаниеОбновлений;
		
	КонецФункции
	
	// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
	//
	// Параметры
	//  НомерВерсии  – Строка – полный номер версии
	//
	// Возвращаемое значение:
	//  Строка – номер релиза без номера сборки
	//
	Функция ПолучитьНомерРелиза(НомерВерсии)
		
		КоличествоТочек = 0;
		ДлинаОписанияНомераРелиза = 0;
		
		Для х = 1 По СтрДлина(НомерВерсии) Цикл
			
			Если Сред(НомерВерсии, х, 1) = "." Тогда
				КоличествоТочек = КоличествоТочек + 1;
			КонецЕсли;
			
			Если КоличествоТочек = 3 Тогда
				ДлинаОписанияНомераРелиза = х - 1;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
		
	КонецФункции // ПолучитьНомерРелиза()
	
#КонецЕсли

Процедура ВывестиСостояниеОбновления(ТекстСообщения = "",ТекущийНомер = 0,КоличествоЭлементов = 0)
	#Если Клиент тогда
		мТекст = ТекстСообщения + ?(ТекущийНомер <> 0 И КоличествоЭлементов <> 0 И ЗначениеЗаполнено(ТекстСообщения)
		," Выполнено: " + Формат(ТекущийНомер / КоличествоЭлементов * 100,"ЧЦ=10; ЧДЦ=0") + " %"
		,""); 	
		Состояние(мТекст);
	#КонецЕсли
КонецПроцедуры

// процедура производит обновление элемента справочника виды контактной информации
Процедура УстановитьПараметрыВидаКонтактнойИнформации(СсылкаВидыКонтактнойИнформации, Знач Тип, Знач ВидОбъектаКонтактнойИнформации)
	
	Если НЕ ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();
		ОбъектВидКонтактнойИнформации.Тип = Тип;
		ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;
	
		ОбъектВидКонтактнойИнформации.Записать();
		
	Исключение
		ОбщегоНазначения.Сообщение("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");
	КонецПопытки;

	
КонецПроцедуры

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт
	
	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		уатОбщегоНазначенияТиповые.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьВалюту()

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт
	
	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;
	
	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);
	
	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ " +
	"назначено значение """ + ЗначениеКонстанты + """";
	
	Сообщить(СтрСообщения, СтатусСообщения.Обычное);
	
КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт
	
	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;
	
	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;
	
	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";
	
	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3, СтатусСообщения.Обычное);
		КонецЕсли; 
		
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьДокументОбъект(ДокументОбъект, Сообщать = Ложь, РежимЗаписи_ = Неопределено) Экспорт
	Если НЕ ДокументОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи_ = Неопределено Тогда
		РежимЗаписи_ = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;
	СтрСообщения2 = " документ";
	СтрСообщения2 = СтрСообщения2 + " """ + ДокументОбъект.Метаданные().Синоним + """";
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи_);
		Если Сообщать = Истина Тогда
			Сообщить(СтрСообщения1 + СтрСообщения2 + "код """ + ДокументОбъект.ПолныйКод() + """ ", СтатусСообщения.Обычное);
		КонецЕсли; 
		
	Исключение
		Сообщить("Не записан"  + СтрСообщения2 + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		
	КонецПопытки;
КонецПроцедуры

// Добавляет в справочник "уатКлассификаторИспользованияРабочегоВремени" новый элемент
//
Процедура ОписатьКодИспользованияРабочегоВремени(КодИспользованияРабочегоВремени, Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени)
	
	КодИспользованияРабочегоВремени.БуквенныйКод = СокрЛП(БуквенныйКод);
	КодИспользованияРабочегоВремени.ЦифровойКод  = СокрЛП(ЦифровойКод);
	КодИспользованияРабочегоВремени.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	КодИспользованияРабочегоВремени.Наименование = СокрЛП(?(Наименование = Неопределено,ПолноеНаименование,Наименование));
	КодИспользованияРабочегоВремени.ВидВремени = ВидВремени;
	КодИспользованияРабочегоВремени.Записать();
	
КонецПроцедуры

// Добавляет в справочник "уатКлассификаторИспользованияРабочегоВремени" новый элемент
//
Процедура ДобавитьКодИспользованияРабочегоВремени(Знач БуквенныйКод, Знач  ЦифровойКод, Знач  Наименование = Неопределено, Знач  ПолноеНаименование, ВидВремени)
	
	ЦифровойКод    = СокрЛП(ЦифровойКод);
	СсылкаНаЭлемент = Справочники.уатКлассификаторИспользованияРабочегоВремени.НайтиПоРеквизиту("ЦифровойКод", ЦифровойКод);
	
	Если  СсылкаНаЭлемент.Пустая() Тогда
		Элемент              = Справочники.уатКлассификаторИспользованияРабочегоВремени.СоздатьЭлемент();
		Элемент.ЦифровойКод  = СокрЛП(ЦифровойКод);
	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	КонецЕсли;
	
	Элемент.БуквенныйКод = СокрЛП(БуквенныйКод);
	Элемент.ПолноеНаименование = СокрЛП(ПолноеНаименование);
	Элемент.Наименование = СокрЛП(?(Наименование = Неопределено,ПолноеНаименование,Наименование));
	Элемент.ВидВремени = ВидВремени;
	Элемент.Записать();
	
КонецПроцедуры

// Заполнение справочника Регламентированные отчеты УАТ.
//
Процедура ЗаполнитьРегламентированныеОтчеты() Экспорт
	ЕстьСпрРегламентированныеОтчеты = (Метаданные.Справочники.Найти("уатРегламентированныеОтчеты") <> Неопределено);
	Если ЕстьСпрРегламентированныеОтчеты Тогда
		ЭлементДекларация = Справочники.уатРегламентированныеОтчеты.ДекларацияПоТранспортномуНалогу;
		
		Если ЭлементДекларация.Наименование <> "Декларация по транспортному налогу" ИЛИ
			ЭлементДекларация.ИсточникОтчета <> "уатДекларацияПоТранспортномуНалогу" Тогда
			
			ЭлементДекларацияОбъект = ЭлементДекларация.ПолучитьОбъект();
			ЭлементДекларацияОбъект.Наименование   = "Декларация по транспортному налогу";
			ЭлементДекларацияОбъект.ИсточникОтчета = "уатДекларацияПоТранспортномуНалогу";
			ЭлементДекларацияОбъект.Описание       = "Декларация по транспортному налогу";
			
			Попытка
				ЭлементДекларацияОбъект.Записать();
				Сообщить("Справочник ""Регламентированные отчеты (уат)"". Обновлен элемент ""Декларация по транспортному налогу""");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = Истина
	|	И (ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|		ИЛИ ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ПустойВидОбъектаКонтактнойИнформации)
	|";
	
	Запрос.УстановитьПараметр("ПустойТип"                           , Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
									
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.КонтактнТелефонКандидата Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.РабочийТелефонКонтактногоЛицаКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
					
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
			
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонСлужебный Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
						
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица Тогда
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailОрганизации Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Организации);
		ИначеЕсли Выборка.ссылка = Справочники.ВидыКонтактнойИнформации.EmailФизЛица Тогда				
			
			УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации()


//==================================================================================
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

#Если Клиент Тогда
	
	// Функция выполняет начальное заполнение информационной базы.
	//
	// Параметры:
	//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
	//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
	//
	// Возвращаемое значение:
	//  Функция возвращает номер первой коммерческой версии конфигурации.
	//
	Процедура ВыполнитьОбновление(НовыйНомерВерсииКонфигурации) Экспорт
		
		// Подготовка к выводу формы описания обновлений.
		
		ФормаОписаниеОбновлений    = ПолучитьФорму("ОписаниеОбновлений");
		МакетОписаниеОбновлений    = ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений);
		ДокументОписаниеОбновлений = ФормаОписаниеОбновлений.ЭлементыФормы.ДокументОписаниеОбновлений;
		ДокументОписаниеОбновлений.Очистить();
		
		// Обновление информационной базы.
		// Последовательно вызываются функции для обновления с соответствующей версии.
		
		ТекущаяВерсияИБ = Константы.уатНомерВерсииКонфигурации.Получить();
		
		//Вызов функций заполнения данных для пустой информационной базы
		Если ТекущаяВерсияИБ = "" Тогда
			
			Сообщить("Выполняется начальное заполнение информационной базы ...", СтатусСообщения.Информация);
			
			НачатьТранзакцию();
			
			Если НЕ ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда 
				ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
				ItobОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
			КонецЕсли;
			
			// Установка номера версии информационной базы
			Константы.уатНомерВерсииКонфигурации.Установить(НовыйНомерВерсииКонфигурации); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			
			Если ЗначениеЗаполнено(Константы.уатНомерВерсииКонфигурации.Получить()) Тогда
				Сообщить("Начальное заполнение информационной базы выполнено успешно!", СтатусСообщения.Информация);
				
				ФормаСтартовогоПомощника = Обработки.уатСтартовыйПомощник.ПолучитьФорму("Форма");
				ФормаСтартовогоПомощника.ПервыйЗапуск = Истина;
				ФормаСтартовогоПомощника.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Максимизированное;
				ФормаСтартовогоПомощника.Открыть();
				Если ФормаСтартовогоПомощника.Открыта() Тогда
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапускДополнительная.Видимость = Ложь;
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьПервыйЗапуск.Значение = 
					"Начальное заполнение информационной базы выполнено успешно. 
					|Для продолжения работы нажмите кнопку ""Далее"".";
					ФормаСтартовогоПомощника.ЭлементыФормы.НадписьВперед.Доступность = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
				ФормаОписаниеОбновлений.Открыть(); // для заполнения справочников при первом запуске.
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		//выполним проверку и заполнение справочника Регл. отчеты УАТ
		ЗаполнитьРегламентированныеОтчеты();
		
		// отключим лишние проверки и сообщения
		// Сначала запомним их текущие состояния
		ПВХ = ПланыВидовХарактеристик.уатПраваИНастройки;
		//ВыводитьСообщенияПроверкиПравДоступа      = уатПраваИНастройки.уатПраво(ПВХ.ВыводитьСообщенияПроверкиПравДоступа,
		//глПраваУАТ);
		ПроверкаДоступаКСправочникамИДокументам   = уатПраваИНастройки.уатПраво(ПВХ.ПроверкаДоступаКСправочникамИДокументам, глПраваУАТ);
		//ПроверкаЗаполненияСправочниковИДокументов = уатПраваИНастройки.уатПраво(
		//ПВХ.ПроверкаЗаполненияСправочниковИДокументов, глПраваУАТ);
		//права обновлены, нужно перечитать кэш прав
		Объект = ПланыВидовХарактеристик.уатПраваИНастройки.СоздатьЭлемент();
		Объект.ИнициализироватьПраваИНастройки();
		//
		//ВыводитьСообщениеОбОшибкахВИнформационноеПоле = уатПраваИНастройки.уатПраво(
		//ПВХ.ВыводитьСообщениеОбОшибкахВИнформационноеПоле, глПраваУАТ);
		//	ПриЗаписиПерепроводить = уатПраваИНастройки.уатПраво("ПриЗаписиПерепроводить", глПраваУАТ);
		// Потом отключим
		//глПраваУАТ.Вставить(ПВХ.ВыводитьСообщенияПроверкиПравДоступа, Ложь);
		глПраваУАТ.Вставить(ПВХ.ПроверкаДоступаКСправочникамИДокументам, Ложь);
		//	глПраваУАТ.Вставить(ПВХ.ПроверкаЗаполненияСправочниковИДокументов, Ложь);
		//глПраваУАТ.Вставить(ПВХ.ВыводитьСообщениеОбОшибкахВИнформационноеПоле, Ложь);
		//	глПраваУАТ.Вставить(ПВХ.ПриЗаписиПерепроводить, Ложь);
		
		// Проверим правила префиксации
		// Вдруг ввели новый вид справочника или документа
		// для которого необходимо установить правило префиксации по умолчанию
		//ПланыВидовХарактеристик.уатПраваИНастройки.СоздатьЭлемент().ПроверитьПравилаПрефиксации();
		ПланыВидовХарактеристик.уатПраваИНастройки.СоздатьЭлемент().ПроверитьПраваДоступа();
		
		ТекущаяВерсияИБ    = Константы.уатНомерВерсииКонфигурации.Получить();
		ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
		НоваяВерсияИБ      = "1.0.2.3";
		НовыйНомерРелиза   = ПолучитьНомерРелиза(НоваяВерсияИБ);
		СтрокаВерсии       = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
		СтрокаШапки        = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
		
		Если (ТекущаяВерсияИБ = "1.0.1.3" ИЛИ ТекущаяВерсияИБ = "1.0.2.1" ИЛИ ТекущаяВерсияИБ = "1.0.2.2") Тогда
			
			СтрСообщения = "обновление информационной базы УАТ 1.0 Проф с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			#Если Клиент Тогда
				Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
			#КонецЕсли
			НачатьТранзакцию();
			
			ОбновлениеРасходаТЖВПЛ102();
			ПеренестиНастройкиУчетнойПолитики102();			
			ОбновитьПараметрыВыработки102();
			ЗаполнитьСправочникВидыКонтактнойИнформации();
			ОбновлениеКонтактныхЛицКонтрагентов102();
			ОбновлениеТабличнойЧастиФОВвПЛ102();
			
			// Обновление подсистемы ИТОБ ЦСМ
			ItobОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
			
			// Установка номера версии информационной базы
			Константы.уатНомерВерсииКонфигурации.Установить(НоваяВерсияИБ); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			Если Константы.уатНомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
				//Вывод строк описания обновлений.
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
				ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
				ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
				
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
				"Выполнено " + СтрСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяВерсияИБ    = Константы.уатНомерВерсииКонфигурации.Получить();
		ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
		НоваяВерсияИБ      = "1.0.3.1";
		НовыйНомерРелиза   = ПолучитьНомерРелиза(НоваяВерсияИБ);
		СтрокаВерсии       = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
		СтрокаШапки        = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
		
		Если (ТекущаяВерсияИБ = "1.0.2.3") Тогда
			
			СтрСообщения = "обновление информационной базы УАТ 1.0 Проф с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			#Если Клиент Тогда
				Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
			#КонецЕсли
			НачатьТранзакцию();
			
			ОбновлениеТарифовТС103();
			ОбновлениеДвиженийОтчетовПоставщиковПЦ103();
			ОбновлениеТС_ЗаполнятьПутевойЛистСпискомОборудования103();
			ОбновлениеДатвПЛ103();
			ПереносДанныхИзРНПредоставленныеИВыставленныеУслуги103();
			ОбновитьЗаказыГрузоотправителей103();
			ОбновитьМаршрутныеЛисты103();
		
			// Установка номера версии информационной базы
			Константы.уатНомерВерсииКонфигурации.Установить(НоваяВерсияИБ); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			Если Константы.уатНомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
				//Вывод строк описания обновлений.
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
				ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
				ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
				
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
				"Выполнено " + СтрСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяВерсияИБ    = Константы.уатНомерВерсииКонфигурации.Получить();
		ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
		НоваяВерсияИБ      = "1.0.4.1";
		НовыйНомерРелиза   = ПолучитьНомерРелиза(НоваяВерсияИБ);
		СтрокаВерсии       = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
		СтрокаШапки        = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
		
		Если (ТекущаяВерсияИБ = "1.0.3.1") Тогда
			
			СтрСообщения = "обновление информационной базы УАТ 1.0 Проф с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			#Если Клиент Тогда
				Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
			#КонецЕсли
			НачатьТранзакцию();
			
			ЗаполнениеСуммыРеглВыработкаПоСтоимости104();
			
			// Установка номера версии информационной базы
			Константы.уатНомерВерсииКонфигурации.Установить(НоваяВерсияИБ); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			Если Константы.уатНомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
				//Вывод строк описания обновлений.
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
				ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
				ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
				
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
				"Выполнено " + СтрСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		ТекущаяВерсияИБ    = Константы.уатНомерВерсииКонфигурации.Получить();
		ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
		НоваяВерсияИБ      = "1.0.5.1";
		НовыйНомерРелиза   = ПолучитьНомерРелиза(НоваяВерсияИБ);
		СтрокаВерсии       = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
		СтрокаШапки        = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
		
		Если (ТекущаяВерсияИБ = "1.0.4.1") Тогда
			
			СтрСообщения = "обновление информационной базы УАТ 1.0 Проф с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			#Если Клиент Тогда
				Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
			#КонецЕсли
			НачатьТранзакцию();
			
			ОбновитьРегистрОборотыПоМЛ105();
			//ОбновитьВалютуРубль105();
			
			// Установка номера версии информационной базы
			Константы.уатНомерВерсииКонфигурации.Установить(НоваяВерсияИБ); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			Если Константы.уатНомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
				//Вывод строк описания обновлений.
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
				ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
				ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
				
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
				"Выполнено " + СтрСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		ТекущаяВерсияИБ    = Константы.уатНомерВерсииКонфигурации.Получить();
		ТекущийНомерРелиза = ПолучитьНомерРелиза(ТекущаяВерсияИБ);
		НоваяВерсияИБ      = "1.0.6.3";
		НовыйНомерРелиза   = ПолучитьНомерРелиза(НоваяВерсияИБ);
		СтрокаВерсии       = "Версия" + СтрЗаменить(НоваяВерсияИБ, ".", "");
		СтрокаШапки        = "Шапка"  + СтрЗаменить(НоваяВерсияИБ, ".", "");
		
		Если (ТекущаяВерсияИБ = "1.0.5.1" ИЛИ ТекущаяВерсияИБ = "1.0.6.1") Тогда
			
			СтрСообщения = "обновление информационной базы УАТ 1.0 Проф с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
			#Если Клиент Тогда
				Сообщить("Выполняется " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
			#Иначе
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполняется " + СтрСообщения);
			#КонецЕсли
			НачатьТранзакцию();
			
			ЗаполнитьКодыМоделейАгрегатов106();
				
			// Установка номера версии информационной базы
			Константы.уатНомерВерсииКонфигурации.Установить(НоваяВерсияИБ); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			Если Константы.уатНомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
				// Если удалось зафиксировать транзакцию, то сообщение об успешном обновлении информационной базы.
				Сообщить("Выполнено " + СтрСообщения + Символы.ПС, СтатусСообщения.Информация);
				
				//Вывод строк описания обновлений.
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаШапки));
				ДокументОписаниеОбновлений.НачатьГруппуСтрок(СтрокаВерсии);
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(СтрокаВерсии));
				ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
				ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
				
				ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,
				"Выполнено " + СтрСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		

		
		// Восстановим исходное состояние проверок и сообщений
		//	глПраваУАТ.Вставить(ПВХ.ВыводитьСообщенияПроверкиПравДоступа, ВыводитьСообщенияПроверкиПравДоступа);
		глПраваУАТ.Вставить(ПВХ.ПроверкаДоступаКСправочникамИДокументам, ПроверкаДоступаКСправочникамИДокументам);
		//	глПраваУАТ.Вставить(ПВХ.ПроверкаЗаполненияСправочниковИДокументов, ПроверкаЗаполненияСправочниковИДокументов);
		//	глПраваУАТ.Вставить(ПВХ.ВыводитьСообщениеОбОшибкахВИнформационноеПоле,
		//	ВыводитьСообщениеОбОшибкахВИнформационноеПоле);
		//	глПраваУАТ.Вставить(ПВХ.ПриЗаписиПерепроводить, ПриЗаписиПерепроводить);
		
		
		Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
			ФормаОписаниеОбновлений.Открыть();
		КонецЕсли;
		
		ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Ложь;
		Если Найти("""ХХХХ""", ТекущийНомерРелиза) <> 0 Тогда
			ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации = Истина;
		КонецЕсли;
		
		Если ТребуетсяЗапускПакетаОбработокОбновленияКонфигурации Тогда
			
			ТекстВопроса = "При обновлении версии конфигурации " + 
			"для обеспечения корректной работы системы необходимо выполнение ряда дополнительных действий. " + 
			"Автоматический последовательный запуск этих действий может быть осуществлен при помощи обработки ""Запуск пакета обработок обновления конфигурации"". " +
			"Перед запуском этой обработки рекомендуется ознакомиться с описанием во встроенной справке обработки." +
			"
			|
			|Выполнение действий в пакетном режиме может занять продолжительное время, поэтому предоставляется возможность выполнить дополнительные действия позже: 
			| 1) Вызов обработки ""Запуск пакета обработок обновления конфигурации"" производится из формы обработки "+
			"""Обновление информационной базы"" (меню ""Справка - Дополнения к описанию""), по нажатию кнопки командной панели.
			| 2) Интерактивный запуск каждой отдельной процедуры. Ссылки на эти процедуры находятся в окне описания обновлений (меню ""Справка - Дополнения к описанию""). " +
			"
			|
			|Открыть обработку   ""Запуск пакета обработок обновления конфигурации""  сейчас?";	
			
			Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Форма = ПолучитьФорму("ЗапускПакетаОбработокОбновленияКонфигурации");
				Форма.Открыть();
				Если ТекущийНомерРелиза <> "ХХХХ" Тогда
					Корень = Форма.ЭлементыФормы.СписокОбработок.Значение.Строки[0];
					Корень.Пометка = Ложь;
					МассивПомеченных = Корень.Строки.НайтиСтроки(Новый Структура("Пометка", Истина),Истина);
					Для Каждого Строка Из МассивПомеченных Цикл
						Строка.Пометка = Ложь;
					КонецЦикла;
					Форма.ЭлементыФормы.СписокОбработок.Свернуть(Корень);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецПроцедуры // ЗаполнитьПустуюИБ()
	
	// Функция выполняет начальное заполнение информационной базы.
	//
	// Параметры:
	//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
	//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
	//
	// Возвращаемое значение:
	//  Функция возвращает номер первой коммерческой версии конфигурации.
	//
	Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
		
		// Обязательное начальное заполнение информационной базы.
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Количество() тогда
			Организация = Справочники.Организации.СоздатьЭлемент();
			Организация.Наименование = "Наша организация";
			Организация.ЮрФизЛицо    = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Организация.Записать();
			Организация = Организация.Ссылка;
			//первая запись учетной политики
			МенЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
			МенЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
			МенЗаписи.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
			МенЗаписи.Значение     = Организация;
			МенЗаписи.Записать();
		Иначе
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
		// пропишем эту организацию текущему пользователю, если для него уже не установлена другая
		МенЗаписи = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		МенЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
		МенЗаписи.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
		МенЗаписи.Прочитать();
		Если НЕ (МенЗаписи.Выбран() И ЗначениеЗаполнено(МенЗаписи.Значение)) Тогда
			МенЗаписи.Пользователь = глЗначениеПеременной("глТекущийПользователь");
			МенЗаписи.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация;
			МенЗаписи.Значение = Организация;
			МенЗаписи.Записать();
		КонецЕсли;
		
		// Граница запрета изменения данных
		//Граница = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
		//СтрокаНабора = Граница.Добавить();
		//СтрокаНабора.ГраницаЗапретаИзменений = Дата('19800101');
		//Граница.Записать();
		
		// Заполнение данных для механизма контактной информации
		// только для отдельно стоящего решения
		ЭтоОбъединеннаяКонфигурация = уатОбщегоНазначения.ЭтоОбъединеннаяКонфигурация();
		Если НЕ ЭтоОбъединеннаяКонфигурация Тогда
			ЗаполнитьСправочникВидыКонтактнойИнформации();
		КонецЕсли;
		
		// Заполнение справочника Валюты.
		Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
			ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("643", "RUB", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
			УстановитьКонстанту("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") И НЕ ЗначениеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить()) Тогда
			ВалютаУправленческогоУчета     = НайтиСоздатьВалюту("840", "USD", "Доллар США",       "доллар, доллара, долларов, м, цент, цента, центов, м, 2");
			УстановитьКонстанту("ВалютаУправленческогоУчета", ВалютаУправленческогоУчета);
		КонецЕсли;
		
		// Заполнение справочника КлассификаторЕдиницИзмерения.
		ЕдиницаИзмеренияВеса = НайтиСоздатьЕдиницу("166", "кг", "Килограмм");
		ЕдиницаПоУмолчанию   = НайтиСоздатьЕдиницу("796", "шт", "Штука");
		
		// Создадим типы цен
		ТипЦенУслуги = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Основная цена услуги");
		Если ТипЦенУслуги = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда
			ТипЦенУслуги = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
			ТипЦенУслуги.Наименование		= "Основная цена услуги";
			ТипЦенУслуги.ВалютаЦены		= ВалютаРегламентированногоУчета;
			ТипЦенУслуги.ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
			ТипЦенУслуги.Записать();
		КонецЕсли;
		
		НастроитьСправочникПараметрыВыработки();
		НастроитьСправочникСостоянияТС();
		НастроитьПланВидовРасчета();
		ЗаполнитьКлассификаторИспользованияРабочегоВремени();
		ЗаполнитьТипыТС();
		
		//выполним проверку и заполнение справочника Регл. отчеты УАТ
		ЗаполнитьРегламентированныеОтчеты();
		
		// Вывод строк описания обновлений.
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ШапкаЗаполнениеПустойИБ"));
		ДокументОписаниеОбновлений.НачатьГруппуСтрок("Заполнение пустой ИБ");
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("ЗаполнениеПустойИБ"));
		ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
		
		
	КонецФункции // ЗаполнитьПустуюИБ()  
	
	// Функция для проверки возможности открытия форм - обработчиков обновления
	//
	Функция ПолучитьРазрешениеНаОткрытиеФормы() Экспорт
		
		Если РольДоступна("уатАдминистратор") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Предупреждение("Форму обработки может открывать только пользователь с ролью ""Администратор (УАТ)""");
		
		Возврат Ложь;
		
	КонецФункции
	
#КонецЕсли

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Параметры выработки"
Процедура НастроитьСправочникПараметрыВыработки()
	
	спрПараметрыВыработки = Справочники.уатПараметрыВыработки;
	
	Выборка = спрПараметрыВыработки.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочник = Выборка.ПолучитьОбъект();
		ОбъектСправочник.ДействуетНаТС = Истина;
		
		Если Не Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем Тогда
			ОбъектСправочник.ДействуетНаСотрудников = Истина;
		КонецЕсли;	
		
		Если (Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПробегОбщий) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПробегСГрузом) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПробегПорожний) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВРаботе) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.КоличествоЕздок) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВесГруза) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.Объем) Или			
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ТнКм) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ОбъемКм) Или			
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодПогрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.Подача) Тогда
			
			ОбъектСправочник.ИспользоватьВТарифахНаУслуги = Истина;
		КонецЕсли;
		
		Если (Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВРаботе) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВНаряде) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВПростое) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяВРемонте) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяНочное) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяПраздничное) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ВремяСпециальнойРаботы) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодПогрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой) Или
			(Выборка.Ссылка = Справочники.уатПараметрыВыработки.Подача) Тогда
			
			ОбъектСправочник.Временный = Истина;
		КонецЕсли;
		
		ЗаписатьСправочникОбъект(ОбъектСправочник);
		
	КонецЦикла;	
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
// справочника "Состояния ТС"
Процедура НастроитьСправочникСостоянияТС()
	
	спрСостояниеТС = Справочники.уатСостояниеТС;
	
	Выборка = спрСостояниеТС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ВидСостояния) Тогда
			ОбъектСправочник = Выборка.ПолучитьОбъект();
			Если Выборка.Ссылка = спрСостояниеТС.ВРейсе Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРейсе;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.Выбыло Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.Выбыло;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.ВыполнениеЗаказа Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.Запланирован;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.НаКапитальномРемонте Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРемонте;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.НаКонсервацииИсправен Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.НаКонсервации;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.НаКонсервацииНеИсправен Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.НаКонсервации;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.НаСреднемРемонте Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРемонте;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.НаТекущемРемонте Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРемонте;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.ОформленоЗадание Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.Запланирован;
			ИначеЕсли Выборка.Ссылка = спрСостояниеТС.СформированаРазнарядка Тогда
				ОбъектСправочник.ВидСостояния = Перечисления.уатВидыСостоянийТС.ВРейсе;
			КонецЕсли;
			
			ЗаписатьСправочникОбъект(ОбъектСправочник);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Процедура устанавливает реквизиты предопределенных элементов
//
Процедура НастроитьПланВидовРасчета()
	
	мВидыРасчет = ПланыВидовРасчета.уатОсновныеНачисления;
	
	Выборка = мВидыРасчет.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектПланВидаРасчета = Выборка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = мВидыРасчет.ДоплатаЗаНочныеЧасы Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ДоплатаЗаПраздничныеИВыходные Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ОплатаЗаРемонт Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ОплатаПоЧасовомуТарифу Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок;
			
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.СдельнаяОплата Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок;
			
		ИначеЕсли Выборка.Ссылка = мВидыРасчет.ФиксированнойСуммой Тогда
			ОбъектПланВидаРасчета.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой;
			
		КонецЕсли;	
		
		ОбъектПланВидаРасчета.Записать();
		
	КонецЦикла;	
КонецПроцедуры

// Выполняет заполнение справочника "уатКлассификаторИспользованияРабочегоВремени" 
//
Процедура ЗаполнитьКлассификаторИспользованияРабочегоВремени()
	// Установка реквизитов предопределенных элементов
	ВремяОтработанноеВПределахНормы = Перечисления.уатВидыВремени.ОтработанноеВПределахНормы;
	ВремяДополнительноОплачиваемоеВПределахНормы = Перечисления.уатВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
	ВремяОтработанноеСверхНормы = Перечисления.уатВидыВремени.ОтработанноеСверхНормы;
	ВремяЦелодневноеНеотработанное = Перечисления.уатВидыВремени.ЦелодневноеНеотработанное;
	ВремяЧасовоеНеотработанное = Перечисления.уатВидыВремени.ЧасовоеНеотработанное;
	
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ВыходныеДни.ПолучитьОбъект(),									"В", "26", , "Выходные дни (еженедельный отпуск) и  нерабочие праздничные дни",Перечисления.уатВидыВремени.ПустаяСсылка());
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Работа.ПолучитьОбъект(),										"Я", "01", "Явка", "Продолжительность работы в дневное время", ВремяОтработанноеВПределахНормы);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Командировка.ПолучитьОбъект(),									"К", "06", "Командировка", "Служебная командировка",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.КомандировкаПочасовая.ПолучитьОбъект(),						"К", "06", "Командировка", "Служебная командировка",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации.ПолучитьОбъект(),						"ПК","07", "Повышение квалификации", "Повышение квалификации с отрывом от работы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииПочасовое.ПолучитьОбъект(),				"ПК","07", "Повышение квалификации", "Повышение квалификации с отрывом от работы",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности.ПолучитьОбъект(),		"ПМ","08", "Повышение квалификации в другой местности", "Повышение квалификации с отрывом от работы в другой местности",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск.ПолучитьОбъект(),								"ОТ","09", "Отпуск", "Ежегодный основной оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск.ПолучитьОбъект(),							"ОД","10", "Дополнительный отпуск", "Ежегодный дополнительный оплачиваемый отпуск",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение.ПолучитьОбъект(),								"У", "11", "Отпуск дополнительный (оплачиваемый учебный)", "Дополнительный отпуск в связи с обучением с сохранением среднего заработка работникам, совмещающим работу с обучением",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый.ПолучитьОбъект(),				"УД","13", "Отпуск дополнительный (неоплачиваемый учебный)", "Дополнительный отпуск в связи с обучением без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам.ПолучитьОбъект(),					"Р", "14", "Отпуск по беременности и родам", "Отпуск по беременности и родам (отпуск в связи с усыновлением новорожденного ребенка)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком.ПолучитьОбъект(),						"ОЖ","15", , "Отпуск по уходу за ребенком до достижения им возраста трех лет",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя.ПолучитьОбъект(),	"ДО","16", , "Отпуск без сохранения заработной платы, предоставляемый работнику по разрешению работодателя",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству.ПолучитьОбъект(),		"ОЗ","17", , "Отпуск без сохранения заработной платы в случаях, предусмотренных законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск.ПолучитьОбъект(),			"ДБ","18", , "Ежегодный дополнительный отпуск без сохранения заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Болезнь.ПолучитьОбъект(),										"Б ","19", "Больничный", "Временная нетрудоспособность с назначением пособия согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.БолезньБезОплаты.ПолучитьОбъект(),								"Т", "20", "Больничный неоплачиваемый", "Временная нетрудоспособность без назначения пособия в случаях, предусмотренных законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул.ПолучитьОбъект(),							"ПВ","22", , "Время вынужденного прогула в случае признания увольнения, перевода на другую работу или отстранения от работы незаконными с восстановлением на прежней работе",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности.ПолучитьОбъект(),					"Г", "23", , "Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанностиПочасовые.ПолучитьОбъект(),			"Г", "23", , "Невыходы на время исполнения государственных или общественных обязанностей согласно законодательству",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Прогулы.ПолучитьОбъект(),										"ПР","24", "Прогул", "Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПрогулыПочасовые.ПолучитьОбъект(),								"ПР","24", "Прогул", "Прогулы (отсутствие на рабочем месте без уважительных причин в течение времени, установленного законодательством)",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые.ПолучитьОбъект(),		"ОВ","27", , "Дополнительные выходные дни (оплачиваемые)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые.ПолучитьОбъект(),		"НВ","28", , "Дополнительные выходные дни (без сохранения заработной платы)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Забастовка.ПолучитьОбъект(),									"ЗБ","29", "Забастовка", "Забастовка (при условиях и в порядке, предусмотренных законом)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ЗабастовкаПочасовая.ПолучитьОбъект(),							"ЗБ","29", "Забастовка", "Забастовка (при условиях и в порядке, предусмотренных законом)",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам.ПолучитьОбъект(),					"НН","30", , "Неявки по невыясненным причинам (до выяснения обстоятельств)",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинамПочасовые.ПолучитьОбъект(),		"НН","30", , "Неявки по невыясненным причинам (до выяснения обстоятельств)",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя.ПолучитьОбъект(),					"РП","31", , "Время простоя по вине работодателя",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателяПочасовой.ПолучитьОбъект(),			"РП","31", , "Время простоя по вине работодателя",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Простой.ПолучитьОбъект(),										"НП","32", , "Время простоя по причинам, не зависящим от работодателя и работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПростойПочасовой.ПолучитьОбъект(),								"НП","32", , "Время простоя по причинам, не зависящим от работодателя и работника",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника.ПолучитьОбъект(),						"ВП","33", "Простой", "Простои по вине работника",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботникаПочасовой.ПолучитьОбъект(),				"ВП","33", "Простой", "Простои по вине работника",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой.ПолучитьОбъект(),					"НО","34", , "Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатойПочасовое.ПолучитьОбъект(),			"НО","34", , "Отстранение от работы (недопущение к работе) с оплатой (пособием) в соответствии с законодательством",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты.ПолучитьОбъект(),					"НБ","35", , "Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплатыПочасовое.ПолучитьОбъект(),		"НБ","35", , "Отстранение от работы (недопущение к работе) по причинам, предусмотренным законодательством, без начисления заработной платы",ВремяЧасовоеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты.ПолучитьОбъект(),				"НЗ","36", , "Время приостановки работы в случае задержки выплаты заработной платы",ВремяЦелодневноеНеотработанное);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Ночные.ПолучитьОбъект(),									"Н", "02", , "Продолжительность работы в ночное время",ВремяДополнительноОплачиваемоеВПределахНормы);
	ОписатьКодИспользованияРабочегоВремени(Справочники.уатКлассификаторИспользованияРабочегоВремени.Ремонт.ПолучитьОбъект(),										"РЕ", "1", , "Время работы в ремонте", ВремяОтработанноеВПределахНормы);
	
	// Создание остальных элементов классификатора
	ДобавитьКодИспользованияРабочегоВремени("РВ","03", "Праздники", "Продолжительность работы в выходные и нерабочие, праздничные дни",ВремяОтработанноеСверхНормы);
	ДобавитьКодИспользованияРабочегоВремени("С", "04", "Сверхурочно", "Продолжительность сверхурочной работы",ВремяОтработанноеСверхНормы);
	ДобавитьКодИспользованияРабочегоВремени("ВМ","05", "Вахта", "Продолжительность работы вахтовым методом",ВремяОтработанноеВПределахНормы);
	ДобавитьКодИспользованияРабочегоВремени("УВ","12", , "Сокращенная продолжительность рабочего для обучающихся без отрыва от производства с частичным сохранением заработной платы",ВремяОтработанноеВПределахНормы);
	ДобавитьКодИспользованияРабочегоВремени("ЛЧ","21", , "Сокращенная продолжительность рабочего времени против нормальной продолжительности рабочего дня в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы);
	ДобавитьКодИспользованияРабочегоВремени("НС","25", , "Продолжительность работы в режиме неполного рабочего времени по инициативе работодателя в случаях, предусмотренных законодательством",ВремяОтработанноеВПределахНормы);
	
	
КонецПроцедуры

// Заполняет предопределенные элементы справочника ТипыТС
Процедура ЗаполнитьТипыТС()
	Выборка = Справочники.уатТипыТС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа ИЛИ ((НЕ Выборка.ТипТС.Пустая()) И (НЕ Выборка.ВидТС.Пустая())) Тогда
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.Ссылка = Справочники.уатТипыТС.АвтобусыМалогоКласса Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.Автобус;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Автобус;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.АвтобусыОбщегоНазначения Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.Автобус;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Автобус;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ГрузовыеАвтобетоносмесители Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Строительный;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ГрузовыеБортовые Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.ГрузовойБортовой;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ГрузовыеРастворовозы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Строительный;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ГрузовыеСамосвалы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Самосвал;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ГрузовыеТрубовозыЛесовозы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.ГрузовойБортовой;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ГрузовыеФургоны Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.ГрузовойФургон;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ГрузовыеЦистерны Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Цистерна;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ЛегковыеОбщегоНазначения Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ЛегковойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Легковой;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ЛегковыеСпециальногоНазначения Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ЛегковойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Легковой;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыБортовые Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыКонтейнеровозы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыПанелевозы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыПлатформы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыРефрижераторы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыСамосвальные Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыФургоны Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыЦементовозы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПолуприцепыЦистерны Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Полуприцеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПрицепыБортовые Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Прицеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПрицепыПлатформы Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Прицеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПрицепыСамосвальные Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.ПрицепСамосвал;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПрицепыФургоны Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.Прицеп;
		ИначеЕсли Выборка.Ссылка = Справочники.уатТипыТС.ПрицепыЦистерны Тогда
			СпрОбъект.ТипТС = Перечисления.уатТипыТС.ГрузовойАвтотранспорт;
			СпрОбъект.ВидТС = Перечисления.уатВидыТС.ПрицепЦистерна;
		КонецЕсли;
		
		Попытка
			СпрОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////
// 1.0.2.1

Процедура ОбновлениеРасходаТЖВПЛ102()
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатРасходТехническихЖидкостей.Регистратор
	|ИЗ
	|	РегистрНакопления.уатРасходТехническихЖидкостей КАК уатРасходТехническихЖидкостей
	|ГДЕ
	|	уатРасходТехническихЖидкостей.Регистратор ССЫЛКА Документ.уатПутевойЛист";
	Выборка = мЗапрос.Выполнить().Выбрать();
	Номер = 0;
	КоличествоЭлементов = Выборка.Количество();
	Пока Выборка.Следующий() цикл	
		ВывестиСостояниеОбновления("Выполняется обновление документов ""Путевой лист (уат)"": обновление расхода технических жидкостей.", Номер , КоличествоЭлементов);
		Номер = Номер + 1;
		
		мДок = Выборка.регистратор.ПолучитьОбъект();
		набЗаписей = РегистрыНакопления.уатРасходТехническихЖидкостей.СоздатьНаборЗаписей();
		набЗаписей.Отбор.регистратор.Установить(Выборка.регистратор);
		набЗаписей.Прочитать();
		Для Каждого текЗапись ИЗ набЗаписей Цикл
			НовСтрока = мДок.РасходТехническихЖидкостей.Добавить();
			НовСтрока.ТС = ТекЗапись.ТС;
			НовСтрока.ГСМ = ТекЗапись.ГСМ;
			НовСтрока.количество = ТекЗапись.КоличествоРасход;
		КонецЦикла;
		Попытка
			мДок.ОбменДанными.Загрузка = Истина;
			мДок.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Возникла ошибка при обновлении документов Путевой лист. (1.0.2.1-ПЛ1)" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиНастройкиУчетнойПолитики102()
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.уатУчетнаяПолитика КАК уатУчетнаяПолитика";
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	
	
	ЗапросПВХ = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПраваИНастройки.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.уатПраваИНастройки КАК уатПраваИНастройки
	|ГДЕ
	|	уатПраваИНастройки.Предопределенный");
	мсвПраваИНастройкиПредопределенные = ЗапросПВХ.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Сч = 0;
	Для Каждого ТекНастройка Из мсвПраваИНастройкиПредопределенные Цикл
		мсвПраваИНастройкиПредопределенные[Сч] = ПланыВидовХарактеристик.уатПраваИНастройки.ПолучитьИмяПредопределенного(ТекНастройка);
		Сч = Сч + 1;
	КонецЦикла;
	
	мсвНастроек = Новый Массив;
		
	Для Каждого ТекРесурс Из Метаданные.РегистрыСведений.уатУчетнаяПолитика.Ресурсы Цикл
		мсвНастроек.Добавить(ТекРесурс.Имя);
	КонецЦикла;
		
	Пока Выборка.Следующий() Цикл
		СоответствиеЗначенияПоУмолчанию = Новый Соответствие;
		
		Для Каждого ТекИмяНастройки Из мсвНастроек Цикл
			Если мсвПраваИНастройкиПредопределенные.Найти(ТекИмяНастройки) = Неопределено Тогда
				Продолжить; //не нашли настройку в ПВХ, соответствующую текущему ресурсу учетной политики (имя настройки = имени ресурса)
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка[ТекИмяНастройки]) И ПланыВидовХарактеристик.уатПраваИНастройки[ТекИмяНастройки].ЗначениеПоУмолчанию <> Выборка[ТекИмяНастройки] Тогда
				СоответствиеЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.уатПраваИНастройки[ТекИмяНастройки], Выборка[ТекИмяНастройки]);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Выборка.РегистрироватьЗаявкиНаЗаказыНаТС) Тогда			
			Если Выборка.РегистрироватьЗаявкиНаЗаказыНаТС = 0 Тогда
				СоответствиеЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.уатПраваИНастройки.РегистрироватьЗаявкиНаЗаказыНаТС, Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.НеРегистрировать);
			ИначеЕсли Выборка.РегистрироватьЗаявкиНаЗаказыНаТС = 1 Тогда
				СоответствиеЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.уатПраваИНастройки.РегистрироватьЗаявкиНаЗаказыНаТС, Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.РегистрироватьНаОснованииЗаказовПокупателей);
			ИначеЕсли Выборка.РегистрироватьЗаявкиНаЗаказыНаТС = 2 Тогда
				СоответствиеЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.уатПраваИНастройки.РегистрироватьЗаявкиНаЗаказыНаТС, Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.РегистрироватьНаОснованииРеализацииТоваровИУслуг);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекЗначениеПоУмолчанию Из СоответствиеЗначенияПоУмолчанию Цикл
			МенеджерЗаписи = РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = Выборка.Организация;
			МенеджерЗаписи.ПравоНастройка = ТекЗначениеПоУмолчанию.Ключ;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Объект = Выборка.Организация;
				МенеджерЗаписи.ПравоНастройка = ТекЗначениеПоУмолчанию.Ключ;
				МенеджерЗаписи.Значение = ТекЗначениеПоУмолчанию.Значение;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьПараметрыВыработки102()
	
	ОбъемОбъект = Справочники.уатПараметрыВыработки.Объем.ПолучитьОбъект();
	ОбъемОбъект.ДействуетНаСотрудников	     = Истина;	
	ОбъемОбъект.ДействуетНаТС				 = Истина;
	ОбъемОбъект.ИспользоватьВТарифахНаУслуги = Истина;
	ЗаписатьСправочникОбъект(ОбъемОбъект);
	
	ОбъемКмОбъект = Справочники.уатПараметрыВыработки.ОбъемКм.ПолучитьОбъект();
	ОбъемКмОбъект.ДействуетНаСотрудников	   = Истина;	
	ОбъемКмОбъект.ДействуетНаТС			       = Истина;
	ОбъемКмОбъект.ИспользоватьВТарифахНаУслуги = Истина;
	ЗаписатьСправочникОбъект(ОбъемКмОбъект);
	
КонецПроцедуры

Процедура ОбновлениеКонтактныхЛицКонтрагентов102()
	Если уатОбщегоНазначения.ЭтоОбъединеннаяКонфигурация() Тогда
		Возврат;
	КонецЕсли;
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|		ПО (КонтактныеЛицаКонтрагентов.КонтактноеЛицо = КонтактныеЛица.Ссылка)
	|			И (КонтактныеЛицаКонтрагентов.Владелец = КонтактныеЛица.ОбъектВладелец)
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец ССЫЛКА Справочник.Контрагенты
	|	И КонтактныеЛицаКонтрагентов.Ссылка ЕСТЬ NULL 
	|	И КонтактныеЛица.ВидКонтактногоЛица = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента)";
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Номер = 0;
	КоличествоЭлементов = Выборка.Количество();
	Пока Выборка.Следующий() цикл	
		ВывестиСостояниеОбновления("Выполняется обновление документов ""Путевой лист (уат)"".", Номер , КоличествоЭлементов);
		Номер = Номер + 1;
		НовКЛК = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		НовКЛК.Владелец       = Выборка.Ссылка.ОбъектВладелец;
		НовКЛК.КонтактноеЛицо = Выборка.Ссылка;
		НовКЛК.Наименование   = Выборка.Ссылка.наименование;
		НовКЛК.Должность      = Выборка.Ссылка.Должность;
		Попытка 
			НовКЛК.Записать();
		Исключение
			Сообщить("Возникла ошибка при обновлении контактных лиц контрагетов (1.0.2.1-КЛК1)." + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		КЛОБ = Выборка.ссылка.ПолучитьОбъект();
		КлОб.ОбъектВладелец = Неопределено;
		КЛОб.ВидКонтактногоЛица = Неопределено;
		Попытка 
			КЛОб.Записать();
		Исключение
			Сообщить("Возникла ошибка при обновлении контактных лиц контрагетов (1.0.2.1-КЛК2)." + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеТабличнойЧастиФОВвПЛ102()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Рассчитан
	|	И (НЕ уатПутевойЛист.НеВыполнятьАвтоРасчетФОВ)");
	ВыборкаПЛ = Запрос.Выполнить().Выбрать();
	
	КоличествоЭлементов = ВыборкаПЛ.Количество();
	Номер = 1;
	Пока ВыборкаПЛ.Следующий() Цикл
		ВывестиСостояниеОбновления("Выполняется обновление документов ""Путевой лист (уат)"": заполнение фактически отработанного времени", Номер , КоличествоЭлементов);
		Номер = Номер + 1;
		
		ТекПЛОбъект = ВыборкаПЛ.Ссылка.ПолучитьОбъект();
		ТекПЛОбъект.РасчетФОВ();
		Попытка
			ТекПЛОбъект.ОбменДанными.Загрузка = Истина;
			ТекПЛОбъект.Записать();
		Исключение
			Сообщить("Возникла ошибка при обновлении документов Путевой лист. (1.0.2.1-ПЛ2) " + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////
// 1.0.3.1

Процедура ОбновлениеДвиженийОтчетовПоставщиковПЦ103()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.уатОборотыПоОтчетамПоставщиковПЦ КАК уатОборотыПоОтчетамПоставщиковПЦ
	|ГДЕ
	|	уатОборотыПоОтчетамПоставщиковПЦ.АЗС = ЗНАЧЕНИЕ(Справочник.уатАЗС.ПустаяСсылка)");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		ВывестиСостояниеОбновления("Выполняется перепроведение документов ""Отчет поставщика ПЦ (уат)"": ", Номер , КоличествоЭлементов);
		Номер = Номер + 1;
		
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ТекОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Возникла ошибка при перепроведении документов Отчет поставщика ПЦ. (1.0.3.1-ПЦ) " + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеТС_ЗаполнятьПутевойЛистСпискомОборудования103()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатСоставТС.ВСоставе КАК ТС
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	(НЕ уатСоставТС.ВСоставе.ЗаполнятьПутевойЛистСпискомОборудования)");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		ВывестиСостояниеОбновления("Выполняется установка флага ""Заполнять путевой лист списком оборудования"" элементов справочника ""ТС"": ", Номер , КоличествоЭлементов);
		Номер = Номер + 1;
		
		ТекОбъект = Выборка.ТС.ПолучитьОбъект();
		ТекОбъект.ОбменДанными.Загрузка = Истина;
		ТекОбъект.ЗаполнятьПутевойЛистСпискомОборудования = Истина;
		Попытка
			ТекОбъект.Записать();
		Исключение
			Сообщить("Возникла ошибка при записи элемента справочника ТС. (1.0.3.1-ТС) " + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновлениеДатвПЛ103()
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.КонвертацияДатВыполнена = ЛОЖЬ";
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	Пока Выборка.Следующий() Цикл
	
		ВывестиСостояниеОбновления("Выполняется обновление документов ""Путевой лист"". ", Номер , КоличествоЭлементов);
		Номер = Номер + 1;

		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекОбъект.КонвертацияДатВыполнена = Истина;
		//ТекОбъект.ДатаЗакрытия = ТекОбъект.Дата;
		ТекОбъект.Дата         = ТекОбъект.ДатаВыписки;
		ТекОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ТекОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Возникла ошибка при обновление документов ""Путевой лист"". (1.0.3.1-ПЛ) " + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеТарифовТС103()
	Сообщить("Выполняется обновление справочника ""Тарифы на транспортные услуги (уат)"" ...", СтатусСообщения.Информация);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТарифыТС.Ссылка
	|ИЗ
	|	Справочник.уатТарифыТС КАК уатТарифыТС
	|ГДЕ
	|	(НЕ уатТарифыТС.ПометкаУдаления)
	|	И (НЕ уатТарифыТС.ЭтоГруппа)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатТарифыТС.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(уатТарифыТС.УдалитьОбластиДействия.Ссылка) > 0");
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		
		Номер = Номер + 1;
		
		ОблДействия = Выборка.Ссылка.ОбластьДействия.Получить();
		Если ТипЗнч(ОблДействия) = Тип("Структура") И ОблДействия.Количество() > 0 Тогда
			Продолжить; //не трогаем элементы, у которых уже заполнена область действия
		КонецЕсли;
		
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		//используем промежуточную таблицу для возможности указания отбора в списке
		ОбластиДействияПромежут = Новый Структура("ТС, МодельТС, ТипТС, Контрагент, ДоговорКонтрагента, Маршрут, Номенклатура, ОбъектСтроительства");
		Для Каждого ТекОбластьСтарая Из ТекОбъект.УдалитьОбластиДействия Цикл
			Если ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.уатТС") Тогда
				КлючОбласти = "ТС";
			ИначеЕсли ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.уатМоделиТС") Тогда
				КлючОбласти = "МодельТС";
			ИначеЕсли ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.уатТипыТС") Тогда
				КлючОбласти = "ТипТС";
			ИначеЕсли ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.Контрагенты") Тогда
				КлючОбласти = "Контрагент";
			ИначеЕсли ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				КлючОбласти = "ДоговорКонтрагента";
			ИначеЕсли ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.уатМаршруты") Тогда
				КлючОбласти = "Маршрут";	
			ИначеЕсли ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.Номенклатура") Тогда
				КлючОбласти = "Номенклатура";
			ИначеЕсли ТипЗнч(ТекОбластьСтарая.ОбластьДействия) = Тип("СправочникСсылка.уатОбъектыСтроительства") Тогда
				КлючОбласти = "ОбъектСтроительства";
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ОбластиДействияПромежут[КлючОбласти] = Неопределено Тогда
				ОбластиДействияПромежут[КлючОбласти] = ТекОбластьСтарая.ОбластьДействия;
			Иначе
				Если ТипЗнч(ОбластиДействияПромежут[КлючОбласти]) = Тип("СписокЗначений") Тогда
					ОбластиДействияПромежут[КлючОбласти].Добавить(ТекОбластьСтарая.ОбластьДействия);
				Иначе
					СписОблДействия = Новый СписокЗначений;
					СписОблДействия.Добавить(ОбластиДействияПромежут[КлючОбласти]);
					СписОблДействия.Добавить(ТекОбластьСтарая.ОбластьДействия);
					ОбластиДействияПромежут[КлючОбласти] = СписОблДействия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОблДействия = Новый Структура;
		Сч = 0;
		Для Каждого ТекЭл Из ОбластиДействияПромежут Цикл
			Если ТекЭл.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Сч = Сч + 1;
			
			СтруктураПоляОтбора = Новый Структура("Имя, Значение, ЗначениеС, ЗначениеПо, ВидСравнения, Использование, Представление");
			Если ТекЭл.Ключ = "ТС" Тогда
				СтруктураПоляОтбора.Имя = "Тягач";
				СтруктураПоляОтбора.Представление = "Тягач";
				СтруктураПоляОтбора.ЗначениеС = Справочники.уатТС.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.уатТС.ПустаяСсылка();
			ИначеЕсли ТекЭл.Ключ = "МодельТС" Тогда
				СтруктураПоляОтбора.Имя = "МодельТягача";
				СтруктураПоляОтбора.Представление = "Модель тягача";
				СтруктураПоляОтбора.ЗначениеС = Справочники.уатМоделиТС.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.уатМоделиТС.ПустаяСсылка();
			ИначеЕсли ТекЭл.Ключ = "ТипТС" Тогда
				СтруктураПоляОтбора.Имя = "ТипТягача";
				СтруктураПоляОтбора.Представление = "Тип тягача";
				СтруктураПоляОтбора.ЗначениеС = Справочники.уатТипыТС.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.уатТипыТС.ПустаяСсылка();
			ИначеЕсли ТекЭл.Ключ = "Контрагент" Тогда
				СтруктураПоляОтбора.Имя = "Контрагент";
				СтруктураПоляОтбора.Представление = "Контрагент";
				СтруктураПоляОтбора.ЗначениеС = Справочники.Контрагенты.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.Контрагенты.ПустаяСсылка();
			ИначеЕсли ТекЭл.Ключ = "ДоговорКонтрагента" Тогда
				СтруктураПоляОтбора.Имя = "ДоговорКонтрагента";
				СтруктураПоляОтбора.Представление = "Договор контрагента";
				СтруктураПоляОтбора.ЗначениеС = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ИначеЕсли ТекЭл.Ключ = "Маршрут" Тогда
				СтруктураПоляОтбора.Имя = "Маршрут";
				СтруктураПоляОтбора.Представление = "Маршрут";
				СтруктураПоляОтбора.ЗначениеС = Справочники.уатМаршруты.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.уатМаршруты.ПустаяСсылка();
			ИначеЕсли Метаданные.Справочники.Найти("уатОбъектыСтроительства") <> Неопределено И ТекЭл.Ключ = "ОбъектСтроительства" Тогда
				СтруктураПоляОтбора.Имя = "ОбъектСтроительства";
				СтруктураПоляОтбора.Представление = "Объект строительства";
				СтруктураПоляОтбора.ЗначениеС = Справочники.уатОбъектыСтроительства.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.уатОбъектыСтроительства.ПустаяСсылка();
			ИначеЕсли ТекЭл.Ключ = "Номенклатура" Тогда
				СтруктураПоляОтбора.Имя = "Номенклатура";
				СтруктураПоляОтбора.Представление = "Груз";
				СтруктураПоляОтбора.ЗначениеС = Справочники.Номенклатура.ПустаяСсылка();
				СтруктураПоляОтбора.ЗначениеПо = Справочники.Номенклатура.ПустаяСсылка();
			Иначе
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ТекЭл.Значение) = Тип("СписокЗначений") Тогда
				СтруктураПоляОтбора.ВидСравнения = ВидСравнения.ВСписке;
			Иначе
				Если ТекЭл.Значение.ЭтоГруппа Тогда
					СтруктураПоляОтбора.ВидСравнения = ВидСравнения.ВИерархии;
				Иначе
					СтруктураПоляОтбора.ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;
			КонецЕсли;
			СтруктураПоляОтбора.Значение = ТекЭл.Значение;
			СтруктураПоляОтбора.Использование = Истина;
						
			ОблДействия.Вставить("Отбор" + Сч, СтруктураПоляОтбора);
		КонецЦикла;
	
		ТекОбъект.ОбластьДействия = Новый ХранилищеЗначения(ОблДействия);
		
		ЗаписатьСправочникОбъект(ТекОбъект, Истина);
	КонецЦикла;
	Сообщить("Завершено обновление справочника ""Тарифы на транспортные услуги (уат)"".", СтатусСообщения.Информация);
КонецПроцедуры

Процедура ПереносДанныхИзРНПредоставленныеИВыставленныеУслуги103()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПредоставленныеИВыставленныеУслуги.Регистратор,
	|	уатПредоставленныеИВыставленныеУслуги.ВидДвижения
	|ИЗ
	|	РегистрНакопления.уатПредоставленныеИВыставленныеУслуги КАК уатПредоставленныеИВыставленныеУслуги";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписейСтарый = РегистрыНакопления.уатПредоставленныеИВыставленныеУслуги.СоздатьНаборЗаписей();
		НаборЗаписейСтарый.Отбор.Регистратор.Использование = Истина;
		НаборЗаписейСтарый.Отбор.Регистратор.Значение      = Выборка.Регистратор;
		НаборЗаписейСтарый.Прочитать();
		
		Если Выборка.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			НаборЗаписейНовый = РегистрыНакопления.уатВыставленныеУслуги.СоздатьНаборЗаписей();
		Иначе
			НаборЗаписейНовый = РегистрыНакопления.уатПредоставленныеУслуги.СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписейНовый.Отбор.Регистратор.Использование = Истина;
		НаборЗаписейНовый.Отбор.Регистратор.Значение      = Выборка.Регистратор;
		НаборЗаписейНовый.Прочитать();
		
		Для Каждого ЗаписьСтарая Из НаборЗаписейСтарый Цикл
			ЗаписьНовая = НаборЗаписейНовый.Добавить();
			ЗаписьНовая.Активность 		    = ЗаписьСтарая.Активность;
			ЗаписьНовая.Период 			    = ЗаписьСтарая.Период;
			ЗаписьНовая.Регистратор		    = ЗаписьСтарая.Регистратор;			
			ЗаписьНовая.ПолучательУслуг	    = Перечисления.уатПолучателиУслуг.Контрагент;
			ЗаписьНовая.Организация		    = ЗаписьСтарая.Организация;
			ЗаписьНовая.ДоговорКонтрагента  = ЗаписьСтарая.ДоговорКонтрагента;
			ЗаписьНовая.Номенклатура	    = ЗаписьСтарая.Номенклатура;
			ЗаписьНовая.Сделка			    = ЗаписьСтарая.Сделка;
			ЗаписьНовая.СтавкаНДС		    = ЗаписьСтарая.СтавкаНДС;
			ЗаписьНовая.ОбъектСтроительства = ЗаписьСтарая.ОбъектСтроительства;
			ЗаписьНовая.Количество		    = ЗаписьСтарая.Количество;
			ЗаписьНовая.Сумма 			    = ЗаписьСтарая.Сумма;
			ЗаписьНовая.СуммаНДС		    = ЗаписьСтарая.СуммаНДС;
			ЗаписьНовая.СуммаРегл		    = ЗаписьСтарая.СуммаРегл;
		КонецЦикла;
		НаборЗаписейНовый.Записать();
		
		НаборЗаписейСтарый.Очистить();
		НаборЗаписейСтарый.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьЗаказыГрузоотправителей103()
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.ВидОперации <> Значение(Перечисление.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка)";
	Выборка = мЗапрос.Выполнить().Выбрать();
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	мВалРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока Выборка.Следующий() цикл
		
		ВывестиСостояниеОбновления("Выполняется обновление документов ""Заказ на ТС""", Номер , КоличествоЭлементов);
		Номер = Номер + 1;
		
		ДкОб = Выборка.Ссылка.ПолучитьОбъект();
		ДкОб.ВидОперации   = Перечисления.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка;
		ДкОб.ВалютаТоваров = ДкОб.ВалютаДокумента;
		ДкОб.ТипПеревозки  = Перечисления.уатТипПеревозки_уэ.Автотранспортом;
		ДкОб.ЭтоЭтап       = Истина;
		Если ДкОб.Товары.Количество() тогда
			ДкОб.НазваниеГруза = ДкОб.Товары[0].Номенклатура.Наименование;
		Иначе
			ДкОб.НазваниеГруза = "Груз №" + ДкОб.Номер;
		КонецЕсли;
		
		Попытка
			ДкОб.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Возникла ошибка при записи документа " + ДкОб + " (1.0.5.1-ЗнТ1)" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		НабЗаписей = РегистрыНакопления.уатЗаказыГрузоотправителей.СоздатьНаборЗаписей();
		НабЗаписей.Отбор.регистратор.Установить(Выборка.Ссылка);
		Для каждого ТекЗапись ИЗ ДкОб.Движения.уатЗаказыНаТС Цикл
			НовЗапись = НабЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись,ТекЗапись.Период,"Период, Регистратор, ВидДвижения, Номенклатура, ЕдиницаИзмерения, Количество");
			НовЗапись.Контрагент = ТекЗапись.Заказчик;
			НовЗапись.ЗаказГрузоотправителя = ТекЗапись.ЗаказНаТС;
			НовЗапись.ДоговорКонтрагента = ДкОб.ДоговорКонтрагента;
		Конеццикла;
		
		Попытка 
			НабЗаписей.Записать();
		Исключение
			Сообщить("Возникла ошибка при записи регистра накопления ""Заказы грузоотправителей"" документа " + ДкОб + " (1.0.5.1-ЗнТ2)" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Если Выборка.Ссылка.Услуги.Количество() тогда
			НабЗаписей = РегистрыНакопления.уатПредоставленныеУслуги.СоздатьНаборЗаписей();
			НабЗаписей.Отбор.Регистратор.установить(Выборка.Ссылка);
			Для каждого ТекСтрока ИЗ Выборка.Ссылка.Услуги Цикл
				НовЗапись = НабЗаписей.Добавить();
				НовЗапись.Период		  = Выборка.Ссылка.Дата;
				НовЗапись.Регистратор     = Выборка.Ссылка;
				НовЗапись.Организация     = Выборка.Ссылка.Организация;
				НовЗапись.ПолучательУслуг = Перечисления.уатПолучателиУслуг.Контрагент;
				НовЗапись.ДоговорКонтрагента = Выборка.Ссылка.ДоговорКонтрагента;
				НовЗапись.Номенклатура    = ТекСтрока.номенклатура;
				НовЗапись.СтавкаНДС       = ТекСтрока.СтавкаНДС;
				НовЗапись.Количество      = ТекСтрока.Количество;
				мСумма = ?(Выборка.Ссылка.СуммаВключаетНДС,ТекСтрока.Сумма,ТекСтрока.Сумма + текСтрока.СуммаНДС);
				НовЗапись.Сумма           = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСумма,
											Выборка.Ссылка.ВалютаДокумента,
											Выборка.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
											уатОбщегоНазначенияТиповые.уатКурсДокумента(Выборка.Ссылка,мВалРегл),
											Выборка.Ссылка.КурсВзаиморасчетов,
											уатОбщегоНазначенияТиповые.уатКратностьДокумента(Выборка.Ссылка,мВалРегл),
											Выборка.Ссылка.КратностьВзаиморасчетов);
				НовЗапись.СуммаРегл       = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСумма,
											Выборка.Ссылка.ВалютаДокумента,
											мВалРегл,
											уатОбщегоНазначенияТиповые.уатКурсДокумента(Выборка.Ссылка,мВалРегл),
											1,
											уатОбщегоНазначенияТиповые.уатКратностьДокумента(Выборка.Ссылка,мВалРегл),
											1);
				НовЗапись.СуммаНДС        = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
											Выборка.Ссылка.ВалютаДокумента,
											мВалРегл,
											уатОбщегоНазначенияТиповые.уатКурсДокумента(Выборка.Ссылка,мВалРегл),
											1,
											уатОбщегоНазначенияТиповые.уатКратностьДокумента(Выборка.Ссылка,мВалРегл),
											1);
			КонецЦикла;
			Попытка 
				НабЗаписей.Записать();
			Исключение
				Сообщить("Возникла ошибка при записи регистра накопления ""Предоставленные услуги"" документа " + ДкОб + " (1.0.5.1-ЗнТ3)" + Символы.ПС + ОписаниеОшибки());
			КОнецПопытки;
		КонецЕсли;
		
	Конеццикла;
	
КонецПроцедуры

Процедура ОбновитьМаршрутныеЛисты103()
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатМаршрутныйЛист.Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист";
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	Пока Выборка.Следующий() цикл
		
		ВывестиСостояниеОбновления("Выполняется обновление документов ""Маршрутный лист""", Номер , КоличествоЭлементов);
		Номер = Номер + 1;

		ДкОб = Выборка.Ссылка.ПолучитьОбъект();
		Если Ложь тогда
			ДкОб = Документы.уатМаршрутныйЛист.СоздатьДокумент();
		КонецЕсли;
		Для каждого ТекСтрока ИЗ ДкОб.Заказы цикл
			ТекСтрока.Выполнен = Истина;	
		Конеццикла;
		Попытка
			ДкОб.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Возникла ошибка при записи документа " + ДкОб + " (1.0.5.1-МЛ1)" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;		
		Если НЕ ДкОб.Движения.уатЗаказыНаТС.Количество() тогда
			Продолжить;
		КонецЕсли;
		НабЗаписей = РегистрыНакопления.уатЗаказыГрузоотправителей.СоздатьНаборЗаписей();
		НабЗаписей.Отбор.регистратор.Установить(Выборка.Ссылка);
		Для каждого ТекЗапись ИЗ ДкОб.Движения.уатЗаказыНаТС Цикл
			НовЗапись = НабЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись,ТекЗапись.Период,"Период, Регистратор, ВидДвижения, Номенклатура, ЕдиницаИзмерения, Количество");
			НовЗапись.Контрагент = ТекЗапись.Заказчик;
			НовЗапись.ЗаказГрузоотправителя = ТекЗапись.ЗаказНаТС;
			НовЗапись.ДоговорКонтрагента = ДкОб.ДоговорКонтрагента;
		КонецЦикла;
		
		Попытка 
			НабЗаписей.Записать();
		Исключение
			Сообщить("Возникла ошибка при записи регистра накопления ""Заказы грузоотправителей"" документа " + ДкОб + " (1.0.5.1-МЛ1)" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;

	КонецЦикла;	
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////
// 1.0.4.1

Процедура ЗаполнениеСуммыРеглВыработкаПоСтоимости104()
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатВыработкаПоСтоимости.Регистратор,
	|	уатВыработкаПоСтоимости.Регистратор.ВалютаДокумента КАК ВалютаДокумента,
	|	уатВыработкаПоСтоимости.Регистратор.Дата КАК Дата,
	|	уатВыработкаПоСтоимости.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.уатВыработкаПоСтоимости КАК уатВыработкаПоСтоимости
	|ГДЕ
	|	уатВыработкаПоСтоимости.Сумма > 0";
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	КоличествоЭлементов = Выборка.Количество();
	
	РегНаборЗаписей = РегистрыНакопления.уатВыработкаПоСтоимости.СоздатьНаборЗаписей();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУпр = ВалютаРегл;
	КонецЕсли;
	
	Номер = 1;
	Пока Выборка.Следующий() Цикл
		
		ВывестиСостояниеОбновления("Выполняется заполнение суммы (регл.) в регистре ""Выработка по стоимости""", Номер, КоличествоЭлементов);
		Номер = Номер + 1;

		РегНаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		РегНаборЗаписей.Прочитать();
		
		флЗаписи = Ложь;
		
		СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Выборка.ВалютаДокумента, Выборка.Дата);
		СтруктураКурсаУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаУпр, Выборка.Дата);
		
		Для Каждого ТекСтрока Из РегНаборЗаписей Цикл
			Если ВалютаРегл = ВалютаУпр Тогда
				СуммаРеглЭталон = ТекСтрока.СуммаУпр;
			ИначеЕсли ВалютаРегл = Выборка.ВалютаВзаиморасчетов Тогда
				СуммаРеглЭталон = ТекСтрока.СуммаВзаиморасчетов;
			Иначе
				СуммаРеглЭталон = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр, ВалютаУпр, ВалютаРегл, СтруктураКурсаУпр.Курс, 1, СтруктураКурсаУпр.Кратность, 1);
			КонецЕсли;
			СуммаРеглЭталон = Окр(СуммаРеглЭталон, 2);
			
			Если ТекСтрока.Сумма <> СуммаРеглЭталон Тогда
				ТекСтрока.Сумма = СуммаРеглЭталон;
				флЗаписи = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если флЗаписи Тогда
			Попытка 
				РегНаборЗаписей.Записать();
			Исключение
				Сообщить("Возникла ошибка при записи регистра накопления ""Выработка по стоимости"" (1.0.4.1-РегВырабСтоим)" + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////
// 1.0.5.1

Процедура ОбновитьРегистрОборотыПоМЛ105()
	
	мЗапрос = новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатОборотыПоМаршрутномуЛисту.Регистратор
	|ИЗ
	|	РегистрНакопления.уатОборотыПоМаршрутномуЛисту КАК уатОборотыПоМаршрутномуЛисту
	|ГДЕ
	|	уатОборотыПоМаршрутномуЛисту.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Выборка = мЗапрос.Выполнить().Выбрать();
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	мНаборЗаписей = РегистрыНакопления.уатОборотыПоМаршрутномуЛисту.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		ВывестиСостояниеОбновления("Выполняется заполнение суммы (регл.) в регистре ""Выработка по стоимости""", Номер, КоличествоЭлементов);
		Номер = Номер + 1;	
		
		мНаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		мНаборЗаписей.Прочитать();
		Для каждого ТекЗапись ИЗ мНаборЗаписей Цикл
			ТекЗапись.Организация = Выборка.Регистратор.Организация;
			текЗапись.МаршрутныйЛист = Выборка.Регистратор;
			текЗапись.Перевозчик = Выборка.Регистратор.Контрагент;
			ТекЗапись.ВремяВПути = ТекЗапись.КоличествоЧасовУдалить * 60;
		Конеццикла;
		мНаборЗаписей.ОбменДанными.Загрузка = Истина;
		Попытка 
			мНаборЗаписей.Записать();
		Исключение
			Сообщить("Возникла ошибка при записи регистра накопления ""Обороты по маршнутным листам"" (1.0.5.1-РегОбМЛ)" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

//Процедура ОбновитьВалютуРубль105()
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Валюты.Ссылка
//	|ИЗ
//	|	Справочник.Валюты КАК Валюты
//	|ГДЕ
//	|	Валюты.Код = ""810""
//	|	И (НЕ Валюты.ПометкаУдаления)");
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		Если Справочники.Валюты.НайтиПоКоду("643").Пустая() Тогда
//			ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			ТекОбъект.Код = "643";
//			ТекОбъект.Наименование = "RUB";
//			ЗаписатьСправочникОбъект(ТекОбъект, Истина);
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////
// 1.0.6.1 - // 1.0.6.3

Процедура ЗаполнитьКодыМоделейАгрегатов106()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатМоделиАгрегатов.Ссылка,
	|	уатМоделиАгрегатов.Код
	|ИЗ
	|	Справочник.уатМоделиАгрегатов КАК уатМоделиАгрегатов
	|ГДЕ
	|	НЕ уатМоделиАгрегатов.ПометкаУдаления
	|	И уатМоделиАгрегатов.Код = """" ";
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЭлементов = Выборка.Количество();
	Номер = 1;
	
	Пока Выборка.Следующий() Цикл
		ВывестиСостояниеОбновления("Выполняется обновление справочника ""Модели агрегатов""", Номер, КоличествоЭлементов);
		Номер = Номер + 1;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.УстановитьНовыйКод();
		Попытка 
			СпрОбъект.Записать();
		Исключение
			Сообщить("Возникла ошибка при обновлении справочника ""Модели агрегатов"" " + СпрОбъект + " (1.0.8.1-СпрМодАгр)" + Символы.ПС + ОписаниеОшибки());
		КОнецПопытки;
	КонецЦикла;
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
КонецПроцедуры