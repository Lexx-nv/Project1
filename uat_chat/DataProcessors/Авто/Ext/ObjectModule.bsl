Перем ТОКЕН;
Перем ПользовательАГ, ПарольАГ,СерверАГ;


#Область РаботаСJSON

Функция ФорматСтрокиJSON(Стр)
	
	п = СтрЗаменить(Стр,"""","\""");
	Возврат п;
	
КонецФункции

Функция ТекЗн(Джс)
	
	Если ДЖс.ТипТекущегоЗначения=ТипЗначенияJSON.Число ТОгда
		Возврат ОКР(Джс.ТекущееЗначение,1);
	ИНАчеЕсли ДЖс.ТипТекущегоЗначения=ТипЗначенияJSON.Строка ТОгда
		Зн = Джс.ТекущееЗначение;
		Если Найти(Зн,":")<>0 Тогда
			пСтр = СтрЗаменить(Зн,":",Символы.ПС);
			Возврат Число(СтрПолучитьСтроку(пСтр,1))+ОКР(Число(СтрПолучитьСтроку(пСтр,2))/60,2,1);
		КонецеСЛИ;
	КонецеСЛИ;
	
	Возврат 0;
	
КонецФункции

Функция JSONвСтк(Джс,Стк)
	
	ПОка ДЖс.Прочитать() Цикл
		Если Джс.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			пИмя=Джс.ТекущееЗначение;
			Джс.Прочитать();
			
			
			Если      пИмя = "TotalDistance" 		Тогда Стк.Пробег 	  = ТекЗн(Джс); 
				
			ИНАчеЕсли пИмя = "Tank1FuelLevel First" Тогда Стк.Бак1Нач 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelLevel Last" 	Тогда Стк.Бак1Кон 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelUpVol Diff" 	Тогда Стк.Бак1Зап 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelDnVol Diff" 	Тогда Стк.Бак1слив	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelUpCount" 	Тогда Стк.Бак1ЗапКол  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelDnCount" 	Тогда Стк.Бак1сливКол = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelLevel First" Тогда Стк.Бак2Нач 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelLevel Last" 	Тогда Стк.Бак2Кон 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelUpVol Diff" 	Тогда Стк.Бак2Зап 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelDnVol Diff" 	Тогда Стк.Бак2слив	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelUpCount" 	Тогда Стк.Бак2ЗапКол  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelDnCount" 	Тогда Стк.Бак2сливКол = ТекЗн(Джс); 
				
			ИНАчеЕсли пИмя = "Engine1Motohours" 	Тогда Стк.ЧасыРаб 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Engine2MHOnParks" 	Тогда Стк.ЧасыРабВО   = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Engine1MHOnParks" 	Тогда Стк.ХХ 		  = ТекЗн(Джс); 
			КонецеСЛИ;
			
			
		ИНАчеЕсли Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта или Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			прервать;
		КонецЕСЛИ;
	КонецЦикла;
	
	Возврат Стк;
	
КонецФункции

Функция ЗаполнитьСтруктуруИзОтветаJSON1(Знач ТекстJSON) Экспорт
	
	Результат = Новый Структура;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции   

Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON)
//TotalDistance,Engine1Motohours,Engine2Motohours,Engine1MHOnParks


	Стк = Новый Структура("Пробег,Бак1Нач,Бак1Кон,Бак1Зап,Бак1слив,Бак1ЗапКол,Бак1сливКол,Бак2Нач,Бак2Кон,Бак2Зап,Бак2слив,Бак2сливКол,Бак2ЗапКол,ЧасыРаб,ЧасыРабВО,ХХ,РасходПоДУТ");
	ДЛя каждого Эл из Стк Цикл
		Стк.Вставить(Эл.Ключ,0);
	КонецЦикла;
	
	
	Мас = Новый Массив;
	СткДжс = Неопределено;
	
	Джс = Новый ЧтениеJSON;
	Джс.УстановитьСтроку(ТекстJSON);
	ПОка ДЖс.Прочитать() Цикл
		Если Джс.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			пИмя=Джс.ТекущееЗначение;
		ИНАчеЕсли Джс.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта или Джс.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			
			Если пИмя = "Total" Тогда
				//Сообщить(МасСтр(Мас));	
				СткДжс = JSONвСтк(Джс,Стк);
				прервать;
			ИНачеЕсли МасСтр(Мас) = "/Trips/"	Тогда
				Джс.Пропустить();
				Если  Джс.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
					пИмя=Джс.ТекущееЗначение;
				КонецЕсли;
				Продолжить;
			КонецЕСЛИ;
			
			Мас.Вставить(0,пИмя);
			пИмя = "";
		ИНАчеЕсли Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта или Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Мас.Удалить(0);
			пИмя = "";
		КонецеСЛИ;
		
		
	КонецЦикла;
	
	
			
	Возврат Стк;
	
КонецФункции	

Функция ЗаполнитьСтруктуруИзОтветаJSON_Старая(Знач ТекстJSON)

	Стк = Новый Структура();
	
	Стк.Вставить("Пробег",     ОКР(НайтиЗн(ТекстJSON,"""TotalDistance"",""Value"":")       ,0,1));
	
	Стк.Вставить("Бак1Нач",    ОКР(НайтиЗн(ТекстJSON,"""Tank1FuelLevel First"",""Value"":"),3,1));
	Стк.Вставить("Бак1Кон",    ОКР(НайтиЗн(ТекстJSON,"""Tank1FuelLevel Last"",""Value"":") ,3,1));
	Стк.Вставить("Бак1Зап",    ОКР(НайтиЗн(ТекстJSON,"""Tank1FuelUpVol Diff"",""Value"":") ,3,1));
	Стк.Вставить("Бак1слив",   ОКР(НайтиЗн(ТекстJSON,"""Tank1FuelDnVol Diff"",""Value"":") ,3,1));
	Стк.Вставить("Бак1ЗапКол", ОКР(НайтиЗн(ТекстJSON,"""Tank1FuelUpCount"",""Value"":")    ,3,1));
	Стк.Вставить("Бак1сливКол",ОКР(НайтиЗн(ТекстJSON,"""Tank1FuelDnCount"",""Value"":")    ,3,1));
	
	Стк.Вставить("Бак2Нач",    ОКР(НайтиЗн(ТекстJSON,"""Tank2FuelLevel First"",""Value"":"),3,1));
	Стк.Вставить("Бак2Кон",    ОКР(НайтиЗн(ТекстJSON,"""Tank2FuelLevel Last"",""Value"":") ,3,1));
	Стк.Вставить("Бак2Зап",    ОКР(НайтиЗн(ТекстJSON,"""Tank2FuelUpVol Diff"",""Value"":") ,3,1));
	Стк.Вставить("Бак2слив",   ОКР(НайтиЗн(ТекстJSON,"""Tank2FuelDnVol Diff"",""Value"":") ,3,1));
	Стк.Вставить("Бак2ЗапКол", ОКР(НайтиЗн(ТекстJSON,"""Tank2FuelUpCount"",""Value"":")    ,3,1));
	Стк.Вставить("Бак2сливКол",ОКР(НайтиЗн(ТекстJSON,"""Tank2FuelDnCount"",""Value"":")    ,3,1));
	
	Стк.Вставить("ЧасыРаб",НайтиЗн(ТекстJSON,"""Engine1Motohours"",""Value"":"));
	Стк.Вставить("ЧасыРабВО",НайтиЗн(ТекстJSON,"""Engine2Motohours"",""Value"":"));
	Стк.Вставить("ХХ",НайтиЗн(ТекстJSON,"""Engine1MHOnParks"",""Value"":"));
	Стк.Вставить("ХХ",НайтиЗн(ТекстJSON,"""Engine1MHOnParks"",""Value"":"));
	
	//Для универсализма
	Стк.Вставить("РасходПоДУТ",0);
		 
	
	
	Возврат Стк;
	
КонецФункции	

Функция ЗаполнитьСтруктуруИзОтветаJSONВиалон(Знач ТекстJSON)

	Стк = Новый Структура();
	
	 Стк.Вставить("Пробег",     ОКР(НайтиЗн(ТекстJSON,"[""Пробег в поездках"",""","km""]")       ,0,1));
	 Стк.Вставить("Бак1Нач",     ОКР(НайтиЗн(ТекстJSON,"[""Нач. уровень"",""","lt""]")       ,0,1));
	 Стк.Вставить("Бак1Кон",     ОКР(НайтиЗн(ТекстJSON,"[""Конеч. уровень"",""","lt""]")       ,0,1));
	 Стк.Вставить("Бак1слив",     ОКР(НайтиЗн(ТекстJSON,"[""Всего топлива слито"",""","lt""]")       ,0,1));
	 Стк.Вставить("Бак1Зап",     ОКР(НайтиЗн(ТекстJSON,"[""Всего заправлено"",""","lt""]")       ,0,1));
	 Стк.Вставить("ЧасыРаб",     НайтиЗн(ТекстJSON,"[""Моточасы"",""","""]"));
	 Стк.Вставить("ЧасыРабВО",     0 );  
	 Стк.Вставить("РасходПоДУТ",     ОКР(НайтиЗн(ТекстJSON,"[""Потрачено по ДУТ"",""","lt""]")       ,0,1));  
	 //Стк.Вставить("ХХ",     ОКР(НайтиЗн(ТекстJSON,"[""Пробег в поездках"",""","km""]")       ,0,1));
	 Стк.Вставить("ХХ",0);
	 
	Возврат Стк;
	
КонецФункции	

Функция СформироватьСтрокуJSONИзМассива(Объект)
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + ФорматСтрокиJSON(Элемент) + """";
		ИначеЕсли ТипЗнч(Элемент) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект)
	СтрокаJSON = "{"+символы.ПС;
	
	Для каждого Элемент Из Объект Цикл
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + ФорматСтрокиJSON(Элемент.Значение) + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ","+Символы.ПС;
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 2) = ","+Символы.ПС Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-2);
	КонецЕсли;
	
	Возврат СтрокаJSON +Символы.ПС+ "}";
КонецФункции

Функция СформироватьСтрокуJSON(Объект) Экспорт
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	КонецЕсли;
	
	Возврат СтрокаJSON;
КонецФункции

Функция ПрочитатьJSONШтатно(ТекстОтвета);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Отчет = ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть();			
	Возврат Отчет;
КонецФункции   

Функция ЗаполнитьСтруктуруИзОтветаJSON0(Знач ТекстJSON) Экспорт
	Результат = Новый Структура;
	
	//Подготовим текст
	//Т.е. разложим формат JSON в многострочный текст для удобства
    ТекстJSON = СтрЗаменить(ТекстJSON,"[",Символы.ПС+"["+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"],",Символы.ПС+"]"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"]",Символы.ПС+"]"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"{",Символы.ПС+"{"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"},",Символы.ПС+"}"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"}",Символы.ПС+"}"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,""",",""""+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,",""",Символы.ПС+"""");	
    ТекстJSON = СтрЗаменить(ТекстJSON,"""Key"":","");	
    ТекстJSON = СтрЗаменить(ТекстJSON,"""Value"":",":");	
    ТекстJSON = СтрЗаменить(ТекстJSON,":",Символы.ПС+":"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"""","");	
    ТекстJSON = СтрЗаменить(ТекстJSON,Символы.ПС+Символы.ПС,Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,Символы.ПС+Символы.ПС,Символы.ПС);	
	
	
	тхтДок = Новый ТекстовыйДокумент;
	тхтДОк.УстановитьТекст(СокрЛП(ТекстJSON));
	
	//А теперь преобразуем полученный текст в структуру данных
	Результат = ЦиклСтрок(тхтДОк,1,тхтДОк.КоличествоСтрок(),"");
	
	
//	Результат = ЦиклСтрок(СокрЛП(ТекстJSON),1,СтрЧислоСтрок(ТекстJSON),"");
	
		
	Возврат Результат;
КонецФункции   

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ТипДанных = "Структура" Тогда
				
				
				Поз = Найти(ТекстJSON, ":");
				
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				ИмяЗначения = СтрЗаменить(ИмяЗначения,"/","_");
				ИмяЗначения = СтрЗаменить(ИмяЗначения,"\","_");
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
				Иначе
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если (Символ = "," и ИмяЗначения<>"Value")  ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
			ИначеЕсли ТипДанных = "Массив" Тогда
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаСАвтографом

Функция ПолучитьТОКЕН() 
	
	
	//Авторизация
	ФаилJSONАвторизация = ПолучитьимяВременногоФайла("json");	
	СткJSON = Новый Структура;
	СткJSON.Вставить("UserName",ПользовательАГ);
	СткJSON.Вставить("Password",ПарольАГ);
	
	Тхт = Новый ЗаписьТекста(ФаилJSONАвторизация,,, Истина, Символы.ПС);
	Тхт.Записать(СформироватьСтрокуJSONИзСтруктуры(СткJSON));
	Тхт = Неопределено;
	
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/json");
	HTTPСоединение = Новый HTTPСоединение(СерверАГ,,,,,, );
	HTTPЗапрос = Новый HTTPЗапрос("/Login", Заголовки);
	HTTPЗапрос.УстановитьИмяФайлаТела(ФаилJSONАвторизация);
	
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, имяВыходногоФайла, Заголовки);
	
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		Сообщить("Ошибка запроса авторизации");
	КонецЕсли;
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		Сообщить("Ошибка сервера");
	КонецЕсли;
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Сообщить("Ошибка перенаправления сервера: " + Результат.КодСостояния );
	КонецЕсли;
	Если Результат.КодСостояния = 200 Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(имяВыходногоФайла, "UTF-8");
		Строка = Текст.ПолучитьСтроку(1);
		Токен = Строка;
		//Токен = "Token " + Сред(Строка, 11, 40);
		УдалитьФайлы(имяВыходногоФайла);
	Иначе
		Токен = Неопределено;
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

Функция Алга(ТекстЗапроса,РазобратьJSON0 = Ложь) Экспорт
	
	ПосмотретьФайлВыгрузки=Ложь;
	
	Если ТОкен = Неопределено ТОгда
		Токен = ПолучитьТОКЕН();
	КонецЕСЛИ;
	
	ФаилЗапросаJSON = ПолучитьимяВременногоФайла("json");
	
	Если ПосмотретьФайлВыгрузки ТОгда
		ТхтОкно = Новый ТекстовыйДокумент;
		ТхтОкно.Прочитать(ФаилЗапросаJSON,КодировкаТекста.UTF8);
		ТхтОкно.Показать("Файл_Отправки");
	КонецЕСЛИ;
	
	
//Отправка
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("AG-TOKEN", Токен);
	Заголовки.Вставить("Content-Type", "text/json");
	HTTPСоединение = Новый HTTPСоединение(СерверАГ,,,,,, );
	
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	Результат = HTTPСоединение.Получить(HTTPЗапрос, имяВыходногоФайла);
	
	
	
	//Ошибки
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
	
	Если Результат.КодСостояния = 200 Тогда
		Отказ = Ложь;
		Если РазобратьJSON0 Тогда
			Рез = ЗаполнитьСтруктуруИзОтветаJSON0(ТекстОтвета);
		ИНАче //Просто ищем вхождение нужной строки
			Рез = ЗаполнитьСтруктуруИзОтветаJSON(ТекстОтвета);
		КонецеСЛИ;
	Иначе
		Сообщить("Произошла ошибка");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"\/",Символы.ПС);
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"{""detail"":""",Символы.ПС);	
		ТекстОтвета = СтрЗаменить(ТекстОтвета,""",""title"":""Invalid Attribute""}","");
		Сообщить(ТекстОтвета);
		Рез = Неопределено;
	КонецЕсли;
	
	
	УдалитьФайлы(имяВыходногоФайла);
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти

#Область РаботаСВиалоном

//Получаем идентификационные данные для подключения к веб-серверу Виалон:
//Возвращает структуру из двух параметров: СИД и ИДПользователя
Функция ПолучитьИДДанные(СистемаМониторинга) Экспорт
	
	ИДДанные = Новый Структура();
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	
	АдресСервера = СокрЛП(СистемаМониторинга.АдресСервера);
	//АдресСервера = "hst-api.wialon.com";	 //Это МТК
	
	ТокенВиалон = СокрЛП(СистемаМониторинга.Параметр1);
	
	
	URL = "/wialon/ajax.html?svc=token/login&params={""token"":"""+ТокенВиалон+"""}";
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("GET " + URL + " HTTP/1.1");
	Заголовки.Вставить("Host", АдресСервера);
	HTTPСоединение = Новый HTTPСоединение(АдресСервера);
	HTTPЗапрос = Новый HTTPЗапрос(URL,Заголовки);
	
	//Отправляет данные на указанный адрес для обработки при помощи HTTP-запроса POST
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос,имяВыходногоФайла);
	
	//Получает данные с HTTP-сервера, используя GET-запрос - тоже рабочий вариант - возвращает тот же самый текст - проверено 17.09.2018
	//Результат = HTTPСоединение.Получить(HTTPЗапрос, имяВыходногоФайла);	
	
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
		
	Если Результат.КодСостояния = 200 Тогда
		//Рез - это структура, одним из свойств которой является "eid" - это и есть СИД текущей сессии
		Рез = РаботаСФайлами.ПрочитатьJSONНеШтатно(ТекстОтвета);
		ИДДанные.Вставить("СИД",Рез.eid);
		ИДДанные.Вставить("ИДПользователя",Рез.user.bact);
		Возврат ИДДанные;
	ИНаче
		Сообщить(ТекстОтвета);
		Возврат Неопределено;
	КонецеСЛИ;	
КонецФункции   

//ЕСли ТС = Неопределено, значит возвращается весь перечень ТС из системы мониторинга
//В противном случае возвращаются парпаметры работы по конкретной машинке
Функция ЗапросВВиалон(ТС = Неопределено,Дт1=Неопределено,Дт2=Неопределено,ЗакрытьСессию=Истина) Экспорт
	
	ФаилЗапросаJSON = ПолучитьимяВременногоФайла("json");
	имяВыходногоФайла = ПолучитьимяВременногоФайла();

	//Определим данные подключения из карточки справочника "Системы мониторинга"
	СистемаМониторинга = ТС.СистемаМониторинга;
	
	// 1. Получим ИД данные сессии
	ИДДанные = ПолучитьИДДанные(СистемаМониторинга);
	Если ИДДанные = Неопределено Тогда
		Предупреждение("Невозможно получить идентификационные данные для подключения - СИД и ИД пользователя!!!");
		Возврат Неопределено;
	КонецЕсли;	
	СИД = ИДДанные.СИД;
	ИДПользователя = ИДДанные.ИДПользователя;
	
	// 2. Создаем новое SSL соединение
	СерверАГ = СистемаМониторинга.АдресСервера;
	ИДОтчета = СистемаМониторинга.Параметр2;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPСоединение = Новый HTTPСоединение(СерверАГ,,,,,,ssl );
	
	// 3. Формируем текст запроса
	Если ТС = Неопределено ТОгда
		//Если в качестве параметра ТС не передано - 
		//это значит мы делаем общий запрос по всем ТС для определения ИД для тех ТС, который занесены в Виалон
		стрЗапрос = "?svc=core/search_items&params={""spec"":{""itemsType"":""avl_unit"",""propName"":""sys_name"",""propValueMask"":""*"",""sortType"":""sys_name""},""force"":1,""flags"":""0x00000001"",""from"":0,""to"":0}&sid="+СИД;
	ИНаче   
		//Если же ТС передано, то формируем запрос по конкретной машинке для получения отчета по пробегу и др. параметрам
		//В строке запроса указываем ИД машинки в системе Виалон (берется из карточки ТС), дату начала и дату окончания запроса и СИД текущей сессии.
		идТС = ТС.ИДвСистемеНавигации;
		пДТ1 = Формат(Дт1 - Дата(1970,1,1,1,0,0) - 3600*4, "ЧГ=0"); //tzOffset не отрабатывает, будем сами учитывать
		пДТ2 = Формат(Дт2 - Дата(1970,1,1,1,0,0) - 3600*4, "ЧГ=0");
		стрЗапрос = "?svc=report/exec_report&params={""reportResourceId"":" + ИДПользователя + 
					",""reportTemplateId"":" + ИДОтчета +
					",""reportObjectId"":"+идТС +
					",""reportObjectSecId"":0,
					|""interval"":
					|{""from"":"+пДТ1+",
					|""to"":"+пДТ2+",
					|""flags"":0
					|},
					|""tzOffset"":14400
					|}
					|&sid="+
					СИД;
	КонецЕСЛИ;
	
	// 4. Выполняем запрос
	Результат = HTTPСоединение.Получить("wialon/ajax.html"+стрЗапрос+"", имяВыходногоФайла);
	
	//Ошибки
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
	
	
	// 5. Обрабатываем результат
	Если Результат.КодСостояния = 200 Тогда //Результат получен без ошибок
		Отказ = Ложь;
		Если ТС <> Неопределено Тогда
			//Рез - структура, в которой содержатся данные о пробеге и др. параметрах по конкретному ТС
			ХХХ = ПрочитатьJSONШтатно(ТекстОтвета);
			Если Не ХХХ = Неопределено Тогда
				Рез = РазложитьСтруктуруВиалон(ХХХ,ИДОтчета);
			КонецЕсли;	
		ИНАче // просто получим перечень всех машинок из "Виалон"
			//ХХХ - структура, в которой содержатся данные о всех ТС, которые заведены в системе Виалон
			ХХХ = РаботаСФайлами.ПрочитатьJSONШтатно(ТекстОтвета);
			//Рез.items - items - это массив, каждый элемент которого  - это структура:
					//nm - наименование тс. Например "1033 Камаз А200РТ89"
					//clc - не знаю, что за реквизит
					//id - ИД в системе Виалон
					//mu - не знаю, что за реквизит
					//uacl - не знаю, что за реквизит
			Рез = ХХХ.items;
		КонецЕСЛИ;
	Иначе
		Сообщить("Произошла ошибка");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"{""detail"":""",Символы.ПС);	
		ТекстОтвета = СтрЗаменить(ТекстОтвета,""",""title"":""Invalid Attribute""}","");
		Сообщить(ТекстОтвета);
		Рез = Неопределено;
	КонецЕсли;
	
	ВиалонЗакрытьСесию(СистемаМониторинга,ИДДанные);
	УдалитьФайлы(имяВыходногоФайла);
	
	Возврат Рез;
	
КонецФункции	


//ЕСли идТС=Неопределено, значит выгрузим весь список ТС
Функция АлгаВиалон(ИдТС=Неопределено,Дт1=Неопределено,Дт2=Неопределено,ЗакрытьСессию=Истина) Экспорт
	
	ФаилЗапросаJSON = ПолучитьимяВременногоФайла("json");
	имяВыходногоФайла = ПолучитьимяВременногоФайла();

	//Определим данные подключения из карточки справочника "Системы мониторинга"
	СистемаМониторинга = Справочники.СистемыМониторинга.Виалон;
	
	// 1. Получим ИД данные сессии
	ИДДанные = ПолучитьИДДанные(СистемаМониторинга);
	Если ИДДанные = Неопределено Тогда
		Предупреждение("Невозможно получить идентификационные данные для подключения - СИД и ИД пользователя!!!");
		Возврат Неопределено;
	КонецЕсли;	
	
	СИД = ИДДанные.СИД;
	ИДПользователя = ИДДанные.ИДПользователя;

	
	
	// 2. Создаем новое SSL соединение
	СерверАГ = СистемаМониторинга.АдресСервера;
	ИДОтчета = СистемаМониторинга.Параметр2;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPСоединение = Новый HTTPСоединение(СерверАГ,,,,,,ssl );
	
	// 3. Формируем текст запроса
	Если идТС = Неопределено ТОгда
		//Если в качестве параметра ТС не передано - 
		//это значит мы делаем общий запрос по всем ТС для определения ИД для тех ТС, который занесены в Виалон
		стрЗапрос = "?svc=core/search_items&params={""spec"":{""itemsType"":""avl_unit"",""propName"":""sys_name"",""propValueMask"":""*"",""sortType"":""sys_name""},""force"":1,""flags"":""0x00000001"",""from"":0,""to"":0}&sid="+СИД;
	ИНаче   
		//Если же ТС передано, то формируем запрос по конкретной машинке для получения отчета по пробегу и др. параметрам
		//В строке запроса указываем ИД машинки в системе Виалон (берется из карточки ТС), дату начала и дату окончания запроса и СИД текущей сессии.
		пДТ1 = Формат(Дт1 - Дата(1970,1,1,1,0,0) - 3600*4, "ЧГ=0"); //tzOffset не отрабатывает, будем сами учитывать
		пДТ2 = Формат(Дт2 - Дата(1970,1,1,1,0,0) - 3600*4, "ЧГ=0");
		//стрЗапрос = "?svc=report/exec_report&params={""reportResourceId"":14971447,""reportTemplateId"":18,""reportObjectId"":"+идТС+",""reportObjectSecId"":0,""interval"":{""from"":"+пДТ1+",""to"":"+пДТ2+",""flags"":0},""tzOffset"":14400 }&sid="+СидВиалон;
		стрЗапрос = "?svc=report/exec_report&params={""reportResourceId"":" + ИДПользователя + 
					",""reportTemplateId"":" + ИДОтчета +
					",""reportObjectId"":"+идТС +
					",""reportObjectSecId"":0,
					|""interval"":
					|{""from"":"+пДТ1+",
					|""to"":"+пДТ2+",
					|""flags"":0
					|},
					|""tzOffset"":14400
					|}
					|&sid="+
					СИД;
	КонецЕСЛИ;
	
	// 4. Выполняем запрос
	Результат = HTTPСоединение.Получить("wialon/ajax.html"+стрЗапрос+"", имяВыходногоФайла);
	
	//Ошибки
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
	
	
	// 5. Обрабатываем результат
	Если Результат.КодСостояния = 200 Тогда //Результат получен без ошибок
		Отказ = Ложь;
		Если ИдТС <> Неопределено Тогда
			//Рез - структура, в которой содержатся данные о пробеге и др. параметрах по конкретному ТС
			ХХХ = ПрочитатьJSONШтатно(ТекстОтвета);
			Если Не ХХХ = Неопределено Тогда
				Рез = РазложитьСтруктуруВиалон(ХХХ,ИДОтчета);
			КонецЕсли;	
		ИНАче
			//Рез - структура, в которой содержатся данные о всех ТС, которые заведены в системе Виалон
			//Рез = ЗаполнитьСтруктуруИзОтветаJSONВиалон(ТекстОтвета);
			Рез = ЗаполнитьСтруктуруИзОтветаJSON0(ТекстОтвета);
		КонецЕСЛИ;
	Иначе
		Сообщить("Произошла ошибка");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"{""detail"":""",Символы.ПС);	
		ТекстОтвета = СтрЗаменить(ТекстОтвета,""",""title"":""Invalid Attribute""}","");
		Сообщить(ТекстОтвета);
		Рез = Неопределено;
	КонецЕсли;
	
	ВиалонЗакрытьСесию(СистемаМониторинга,ИДДанные);
	УдалитьФайлы(имяВыходногоФайла);
	
	Возврат Рез;
	
КонецФункции

Функция РазложитьСтруктуруВиалон(Отчет,ИДОтчетаВВиалон);
	Стр = Новый Структура("Пробег,Бак1Зап,Бак2Зап,Бак1Нач,Бак2Нач,Бак1Кон,Бак2Кон,Бак1слив,Бак2слив,ЧасыРаб,ЧасыРабВО,ХХ");
	Стр.Бак1Зап = 0;;
	Стр.Бак2Зап = 0;
	Стр.Бак1Нач = 0;
	Стр.Бак2Нач = 0;
	Стр.Бак1Кон = 0;
	Стр.Бак2Кон = 0;
	Стр.Бак1слив = 0;
	Стр.Бак2слив = 0;
	Стр.ЧасыРабВО = 0;
	Стр.ЧасыРаб = "";
	Стр.ХХ = "";

	//ТЗ = Новый ТаблицаЗначений();
	Если ИДОтчетаВВиалон = "9" Тогда
		
		//Нас в данном случае будет интересовать и таблица "Поездки" и таблица "Моточасы" - поэтому раскладываем обе
		ТЗПоездки = Отчет.reportResult.tables[0];
		// "Поездки"
		Для х=0 По ТЗПоездки.columns - 1 Цикл
			Если ТЗПоездки.header[х] = "Пробег" Тогда
				Пробег = ТЗПоездки.total[х];
				Пробег = Число(СтрЗаменить(Пробег," km",""));
				Стр.Пробег = Пробег;
			КонецЕсли;	
		КонецЦикла;	
		
		//А этой таблицы может и не быть - не стоят соответствующие датчики!!!
		Если Отчет.reportResult.tables.Количество() > 1 Тогда
			ТЗМоточасы = Отчет.reportResult.tables[1];
			// "Моточасы"
			Для х=0 По ТЗМоточасы.columns - 1 Цикл
				Если ТЗМоточасы.header[х] = "Длительность" Тогда
					Стр.ЧасыРабВО = ТЗМоточасы.total[х];
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
		
	КонецЕсли;	
	
	Возврат Стр;
КонецФункции   

Процедура ВиалонЗакрытьСесию(СистемаМониторинга,ИДДанные) Экспорт
	
	Если ЗначениеЗаполнено(ИДДанные.СИД) = Ложь Тогда Возврат; КонецеСЛИ;
	
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	АдресСервера = СистемаМониторинга.АдресСервера;
	СИД = ИДДанные.СИД;
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPСоединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl );
	стрЗапрос = "?svc=core/logout&params={}&sid=" + СИД;
	Результат = HTTPСоединение.Получить("wialon/ajax.html"+стрЗапрос+"",имяВыходногоФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция ПреобразоватьвСистему(Число10,система) Экспорт
	Если система > 36 или система < 2 тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
КонецФункции

Функция URLEncode(стр) Экспорт	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		если ((Знак>="a")и(Знак<="z")) или
			 ((Знак>="A")и(Знак<="Z")) или
			 ((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Итог;
КонецФункции

Функция ПрочитатьДанные(п,ТипЗн)
	
	ТипЗн = "";
	
	Если п = "" ТОгда
		Рез =Неопределено;
	ИНАчеЕсли п = "[" Тогда
		Рез = Новый Массив;
		ТипЗн = "Массив";
	ИНАчеЕсли п = "{" Тогда
		Рез = Новый Структура;
		ТипЗн = "Структура";
	ИНАчеЕсли Лев(п,6) = "\/Date" Тогда//    \/Date(1500145140000+0500)\/
		пДт = Число(сред(п,8,10));	
		п = СтрЗаменить(п,"+",Символы.ПС);	
		пДт1 = 0;
		Если СтрЧислоСтрок(п)>1 Тогда
			пДТ1 = Число(Лев(СтрПолучитьСтроку(п,2),2));	
		КонецЕСЛИ;
		Рез = Дата(1970,1,1)+пДт + 3600*пДт1;
	ИНАче
		Рез = п;
	КонецЕСлИ;
	
	Возврат Рез;
	
КонецФункции

//Функция преобразует многострочный текст в структуру, которая будет отражать данные,переданные через формат JSON
//Параметры:
//ТекстJSON - многострочный текст
//текА - начальная строка текста - 1
//СтрЧислоСтрок - число строк в многострочном тексте
//ТипЗн - !!! непонятный параметр - он в дальнейшем все равно обнуляется
Функция ЦиклСтрок(ТекстJSON,текА,СтрЧислоСтрок,ТипЗн)
	
	//Если многострочный текст пустой - то возвращиемся сразу - нечего раскладывать!!!
	Если текА > СтрЧислоСтрок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЗн = "";
	
	//Получаем первую строку из многострочного текста и анализируем ее
	ппп =  ТекстJSON.ПолучитьСтроку(текА);
	
	Рез = ПрочитатьДанные(ппп,ТипЗн);
	
	Если ТипЗн = "Массив" Тогда
		Для ТекА = ТекА+1 по СтрЧислоСтрок Цикл
			п =  ЦиклСтрок(ТекстJSON,текА,СтрЧислоСтрок,ТипЗн);
			Если п = Неопределено Тогда
				Продолжить;
			КонецеСЛИ;
			Если п = "]" ТОгда
				ПРервать;
			КонецЕСЛИ;
			Рез.Добавить(п);
		КонецЦикла;
	ИНачеЕсли ТипЗн = "Структура" Тогда
		Пока текА <= СтрЧислоСтрок Цикл
			пКлюч = Неопределено;
			пЗн = Неопределено;
			Есть2тчк = Ложь;
			Пока пЗн = Неопределено и текА <= СтрЧислоСтрок Цикл
				ТекА = ТекА+1;
				п = ЦиклСтрок(ТекстJSON,текА,СтрЧислоСтрок,ТипЗн);
				Если п = "}" ТОгда
					ПРервать;
				КонецЕСЛИ;
				если п = Неопределено ТОгда
					Продолжить;
				КонецеслИ;
				Если п=":" Тогда 
					Есть2тчк = Истина;
					продолжить;
				КонецЕсли;
				Если Есть2тчк Тогда
					пЗн = п;
				ИНаче
					п = СтрЗаменить(п," ","_");
					пКлюч = СтрЗаменить(п,"-","_");
				КонецеслИ;
			КонецЦикла;
			
			Если п = "}" ТОгда
				ПРервать;
			КонецЕСЛИ;
			Если пКлюч = Неопределено ТОгда
				пКлюч = "Value";
			КонецесЛИ;
			Попытка
				Рез.вставить(пКлюч,пЗн);
			Исключение
				//Сообщить(""+ТекА+" "+пКлюч);
			КОнецПопытки;
		КонецЦикла;
	КонецЕСЛИ;
	Возврат Рез;
КонецФункции

Функция  НайтиЗн(ТекстJSON,СтрПск,конСтр="}")
	
	Рез = 0;
	
	п = Найти(ТекстJSON,СтрПск);
	Если п<>0 ТОгда
		
		пСтр = Сред(ТекстJSON,п+СтрДЛина(СтрПск));
		п = Найти(пСтр,конСтр);
		Зн = Лев(пСтр,п-1);
		Зн = СтрЗаменить(Зн,"""","");
		
		Если СРЕД(Зн,3,1) = ":" или СРЕД(Зн,2,1) = ":" Тогда //PT12H48M30S 
			
			пСтр = СтрЗаменить(Зн,":",Символы.ПС);
			Зн = Число(СтрПолучитьСтроку(пСтр,1))+ОКР(Число(СтрПолучитьСтроку(пСтр,2))/60,2,1);
			
			//пСтр = СтрЗаменить(Сред(Зн,3),"H","H"+Символы.ПС);
			//пСтр = СтрЗаменить(пСтр,"M","M"+Символы.ПС);
			//
			//зн=0;
			//ДЛя а=1 по СтрЧислоСтрок(пСтр) Цикл
			//	п = СтрПолучитьСтроку(пСтр,а);
			//	Если Прав(п,1) = "H" Тогда
			//		Зн = Зн + Число(СтрЗаменить(п,"H",""));
			//	КонецеСЛИ;
			//	Если Прав(п,1) = "M" Тогда
			//		Зн = Зн + ОКР(Число(СтрЗаменить(п,"M","")/60),2,1);
			//	КонецеСЛИ;
			//	
			//Конеццикла;
			
			
		КонецЕСЛИ;
		
		Попытка
			Рез = Число(Зн);
		Исключение
			Рез = 0;
		КонецПопытки;	
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Процедура СткВставить(Стк,Ключ,Зн)
	
	п = 0;
	Если Стк.Свойство(Ключ,п)=ложь ТОгда
		Стк.Вставить(Ключ,зн);
	ИНАче
		Стк.вставить(Ключ,Макс(п,зн));
	КонецЕСЛИ;
	
	
КонецПроцедуры

Функция МасСтр(Мас)
	
	Стр = "";
	Для а=0 по Мас.Количество()-3 Цикл
		Стр = Стр+Мас[а]+"/";
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

#КонецОбласти

#Область Отчеты

//****************************************************

//Функция ДанныеПоБСМТС(ДатаНачала,ДатаОкончания) Экспорт
//	//Стр = Новый Структура("РаботавшиеТС,ОборудованныеБСМТС,ЕстьДанныеБСМТС,НеРаботалиСБСМТС,НеРаботалиСБСМТСНаРемонте",);
//	//Активные - состояние.ЗапретитьВыпискуПЛ = Ложь + состояние.Привлеченный = Ложь
//	
//	Стр = Новый Структура("АктивныеТС,"+
//						  "АктивныеТСОборудованныеБСМТС,"+
//						  "АктивныеТСсПЛбезДанныхБСМТСзаПериод,"+
//						  "ПривлеченныеТСсПЛзаПериод,"+
//						  "ПривлеченныеТСсПЛОборудованныеБСМТС,"+
//						  "ПривлеченныеТСсПЛбезДанныхБСМТСзаПериод",);
//	
//	
//	
//	//АктивныеТС - наши машинки, которые в эксплуатации
//	//АктивныеТСОборудованныеБСМТС - наши машинки, которые в эксплуатации ОБОРУДОВАННЫЕ БСМТС
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	уатМестонахождениеТССрезПоследних.ТС,
//		|	уатМестонахождениеТССрезПоследних.ТС.ГаражныйНомер Как ГаражныйНомер,
//        |	0 КАК ЕстьДанныеИзБСМТС,
//		|	ВЫБОР
//		|		КОГДА уатМестонахождениеТССрезПоследних.ТС.ВидСистемыGPS = ЗНАЧЕНИЕ(Перечисление.ВидСистемыGPS.ПустаяСсылка)
//		|			ТОГДА 0
//		|		ИНАЧЕ 1
//		|	КОНЕЦ КАК ФлагТСсБСМТС
//		|ИЗ
//		|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаОкончания, ) КАК уатМестонахождениеТССрезПоследних
//		|ГДЕ
//		|	уатМестонахождениеТССрезПоследних.Состояние.ЗапретитьВыпискуПЛ = ЛОЖЬ
//		|	И уатМестонахождениеТССрезПоследних.Состояние.ЭтоПривленный = ЛОЖЬ
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	уатМестонахождениеТССрезПоследних.ТС.ГаражныйНомер
//		|АВТОУПОРЯДОЧИВАНИЕ";
//	
//	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
//	Тбл = Запрос.Выполнить().Выгрузить();
//	Стр.АктивныеТС = Тбл.Количество();
//	Стр.АктивныеТСОборудованныеБСМТС = Тбл.Итог("ФлагТСсБСМТС");
//	ПроверитьПробегИзБСМТС(ТБл,ДатаНачала,ДатаОкончания);
//	Стр.АктивныеТСсПЛбезДанныхБСМТСзаПериод = Тбл.Итог("ФлагТСсБСМТС") - Тбл.Итог("ЕстьДанныеИзБСМТС");
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	СписокТС.ТранспортноеСредство Как ТС,
//		|	СписокТС.ТранспортноеСредство.ГаражныйНомер КАК ГаражныйНомер,
//        |	0 КАК ЕстьДанныеИзБСМТС,
//		|	ВЫБОР
//		|		КОГДА уатМестонахождениеТССрезПоследних.ТС.ВидСистемыGPS = ЗНАЧЕНИЕ(Перечисление.ВидСистемыGPS.ПустаяСсылка)
//		|			ТОГДА 0
//		|		ИНАЧЕ 1
//		|	КОНЕЦ КАК ФлагТСсБСМТС
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		уатПутевойЛист.ТранспортноеСредство КАК ТранспортноеСредство
//		|	ИЗ
//		|		Документ.уатПутевойЛист КАК уатПутевойЛист
//		|	ГДЕ
//		|		уатПутевойЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|		И уатПутевойЛист.Проведен = ИСТИНА
//		|	
//		|	СГРУППИРОВАТЬ ПО
//		|		уатПутевойЛист.ТранспортноеСредство) КАК СписокТС
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаОкончания, ) КАК уатМестонахождениеТССрезПоследних
//		|		ПО СписокТС.ТранспортноеСредство = уатМестонахождениеТССрезПоследних.ТС
//		|ГДЕ
//		|	уатМестонахождениеТССрезПоследних.Состояние.ЭтоПривленный = ИСТИНА
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ГаражныйНомер
//		|АВТОУПОРЯДОЧИВАНИЕ";
//	
//	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
//	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
//	Тбл = Запрос.Выполнить().Выгрузить();
//	Стр.ПривлеченныеТСсПЛзаПериод = Тбл.Количество();
//	Стр.ПривлеченныеТСсПЛОборудованныеБСМТС = Тбл.Итог("ФлагТСсБСМТС");
//	ПроверитьПробегИзБСМТС(ТБл,ДатаНачала,ДатаОкончания);
//	Стр.ПривлеченныеТСсПЛбезДанныхБСМТСзаПериод = Тбл.Итог("ФлагТСсБСМТС") - Тбл.Итог("ЕстьДанныеИзБСМТС");
//	
//	Возврат Стр;
//КонецФункции	

Процедура ПроверитьПробегИзБСМТС(ТБл,ДатаНачала,ДатаОкончания) Экспорт
	Сообщить(ТекущаяДата());
	
	ТБл.Сортировать("СистемаМониторинга");
	ТекСисМон = "Начало";
	
	Для Каждого Стр Из Тбл Цикл
		Если ТекСисМон <> Стр.СистемаМониторинга Тогда
			ТекСисМон = Стр.СистемаМониторинга;
			//Если ТекСисМон = "" Тогда
			Если (ТекСисМон = "") Или ТекСисМон = Справочники.СистемыМониторинга.Автограф Тогда
				ИДДанные = Неопределено;
			Иначе
				ИДДанные = глАвтограф.ПолучитьИДДанные(ТекСисМон);
			КонецЕсли;	
		КонецЕсли;	
		Если ИДДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Стк = глАвтограф.ПолучитьДанныеПоТС(Стр.ТС,ДатаНачала,ДатаОкончания,ИДДанные,Ложь);
		Стр.ЕстьДанныеИзБСМТС = Число(Стк.Пробег > 0); 
	КонецЦикла;	
	
	Сообщить(ТекущаяДата());
КонецПроцедуры

//****************************************************
#КонецОбласти





ПользовательАГ = "1c";
ПарольАГ = "1c";
//ПользовательАГ = "1c@nvds";
//ПарольАГ = "nvds";
СерверАГ = "172.16.40.142:8300";
//------------------------------------------

