
&НаКлиенте
Процедура КомандаСформировать(Команда)
	фРезультат = СформироватьНаСервере(фДата, фМакет);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПослеИзменения(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		КомандаСформировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
функция СформироватьНаСервере(пДата, пМакет)
	вТабличныйДокумент = Новый ТабличныйДокумент;
	
	мЗапрос = Новый Запрос("ВЫБРАТЬ // 4 - Отсторнированные лоты, движения которых не должны попадать как детальные строки регистра ДополнительныеСведенияЗаявок
	|ДополнительныеСведенияЗаявок.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота,
	|ДополнительныеСведенияЗаявок.ДокументЛота КАК ДокументЛота
	|ПОМЕСТИТЬ ОтсторнированныеДокументы
	|ИЗ РегистрНакопления.ДополнительныеСведенияЗаявок КАК ДополнительныеСведенияЗаявок
	|ГДЕ ДополнительныеСведенияЗаявок.ДокументЛота <> ЗНАЧЕНИЕ(Документ.юкЛот.ПустаяСсылка) И ДополнительныеСведенияЗаявок.ДокументЛота <> ДополнительныеСведенияЗаявок.Регистратор
	|;ВЫБРАТЬ
	|	
	|	ВЫБОР КОГДА ЛотыПроизводственнойПрограммы.Контрагент.ИНН = уатМестонахождениеТС.Владелец.ИНН ТОГДА ""Собственные нужды"" ИНАЧЕ ЛотыПроизводственнойПрограммы.Договор КОНЕЦ КАК Договор,
	|	ВЫБОР КОГДА ЛотыПроизводственнойПрограммы.Контрагент.ИНН = уатМестонахождениеТС.Владелец.ИНН ТОГДА ""Собственные нужды"" ИНАЧЕ ЛотыПроизводственнойПрограммы.Договор.Представление КОНЕЦ КАК ДоговорПредставление,
	|	ВЫБОР КОГДА ЛотыПроизводственнойПрограммы.Контрагент.ИНН = уатМестонахождениеТС.Владелец.ИНН ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПризнакСобственныеНужды,
	|	уатМестонахождениеТС.ТС.ТипТС.ВидТС КАК ГруппаТипов,
	|	МИНИМУМ(ЕСТЬNULL(ЛотыПроизводственнойПрограммы.ОграничениеПоВозрастуТС, 0)) КАК ОграничениеПоВозрастуТС,
	|	уатМестонахождениеТС.ТС.Представление КАК ТСПредставление,
	|	уатМестонахождениеТС.ТС КАК ТС,
	|	уатМестонахождениеТС.ТС.ТипТС КАК ТипТС,
	|	уатМестонахождениеТС.ТС.ГаражныйНомер КАК ГаражныйНомер,
	|	уатМестонахождениеТС.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатМестонахождениеТС.ТС.ГодВыпуска КАК ГодВыпуска,
	|	уатМестонахождениеТС.Подразделение КАК Колонна,
	|	уатМестонахождениеТС.Состояние КАК Состояние,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА уатМестонахождениеТС.Владелец ССЫЛКА Справочник.Организации
	|				ТОГДА уатМестонахождениеТС.Владелец.НаименованиеДляАЗС
	|			ИНАЧЕ уатМестонахождениеТС.Владелец
	|		КОНЕЦ) КАК Владелец,
	|	ЛотыПроизводственнойПрограммы.РежимРаботы КАК РежимРаботы,
	|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(ЛотыПроизводственнойПрограммы.ЧасыРаботы, 0) > 4 ТОГДА ЕСТЬNULL(ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену, 0) ИНАЧЕ 0 КОНЕЦ) КАК ДнейВРаботе,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР КОГДА ЕСТЬNULL(ЛотыПроизводственнойПрограммы.ЧасыРаботы, 0) > 4 ТОГДА ЕСТЬNULL(ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену, 0) ИНАЧЕ 0 КОНЕЦ) / ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ((2020 - ГОД(&Год)) / 4 КАК ЧИСЛО(15, 0))) = (ВЫРАЗИТЬ((2020 - ГОД(&Год)) / 4 КАК ЧИСЛО(15, 2)))
	|			ТОГДА 366
	|		ИНАЧЕ 365
	|	КОНЕЦ КАК ЧИСЛО(15, 2))КАК КИП,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, уатМестонахождениеТС.ТС.ГодВыпуска), ГОД, МИНИМУМ(ЛотыПроизводственнойПрограммы.ОграничениеПоВозрастуТС) - 1) КАК ГоденПоДоговоруДо,
	|	ДополнительныеЗаписиНаличиеТС.ДоговорДополнение КАК ДоговорДополнение,
	|	ДополнительныеЗаписиНаличиеТС.Комментарий КАК Комментарий,
	|	ДополнительныеЗаписиНаличиеТС.ИдентификаторСтрокиОтчета КАК ИдентификаторСтрокиОтчета
	|ИЗ
	|	РегистрНакопления.ЛотыПроизводственнойПрограммы.Обороты(НАЧАЛОПЕРИОДА(&Год, ГОД), КОНЕЦПЕРИОДА(&Год, ГОД), , ) КАК ЛотыПроизводственнойПрограммыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЛотыПроизводственнойПрограммы КАК ЛотыПроизводственнойПрограммы
	|		ПО ЛотыПроизводственнойПрограммыОбороты.Идентификатор = ЛотыПроизводственнойПрограммы.Идентификатор
	|			И ВЫБОР КОГДА (ЛотыПроизводственнойПрограммы.Идентификатор В(ВЫБРАТЬ ОтсторнированныеДокументы.ИдентификаторСтрокиЛота ИЗ ОтсторнированныеДокументы)) ТОГДА НЕ ЛотыПроизводственнойПрограммы.ДокументЛота В(ВЫБРАТЬ ОтсторнированныеДокументы.ДокументЛота ИЗ ОтсторнированныеДокументы) ИНАЧЕ ИСТИНА КОНЕЦ
	|			И (НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммы.МесяцЛота, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммыОбороты.МесяцЛота, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПроизводственнаяПрограмма КАК ПроизводственнаяПрограмма
	|		ПО ЛотыПроизводственнойПрограммыОбороты.Идентификатор = ПроизводственнаяПрограмма.Идентификатор
	|			И (НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммыОбороты.МесяцЛота, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПроизводственнаяПрограмма.Месяц, МЕСЯЦ))
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Год, ДЕНЬ),
	|				) КАК уатМестонахождениеТС
	|		ПО (ПроизводственнаяПрограмма.ТС = уатМестонахождениеТС.ТС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.юкДополнительныеЗаписиНаличиеТС КАК ДополнительныеЗаписиНаличиеТС
	|			ПО НАЧАЛОПЕРИОДА(ДополнительныеЗаписиНаличиеТС.Год, ГОД) = НАЧАЛОПЕРИОДА(&Год, ГОД)
	|			И ДополнительныеЗаписиНаличиеТС.ТС = уатМестонахождениеТС.ТС
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ ЛотыПроизводственнойПрограммы.Договор ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммыОбороты.МесяцЛота, ГОД) = НАЧАЛОПЕРИОДА(&Год, ГОД)
	|						И ЕСТЬNULL(ПроизводственнаяПрограмма.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|			ИНАЧЕ уатМестонахождениеТС.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		КОНЕЦ
	|	И уатМестонахождениеТС.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И уатМестонахождениеТС.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|	И уатМестонахождениеТС.Состояние <> ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.Привлеченный)
	|	//И НЕ уатМестонахождениеТС.ТС.ТипТС.НеВыводитьВТабельТС// прицепы нужны - закомментировал
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМестонахождениеТС.ТС,
	|	ВЫБОР КОГДА ЛотыПроизводственнойПрограммы.Контрагент.ИНН = уатМестонахождениеТС.Владелец.ИНН ТОГДА ""Собственные нужды"" ИНАЧЕ ЛотыПроизводственнойПрограммы.Договор КОНЕЦ,
	|	ВЫБОР КОГДА ЛотыПроизводственнойПрограммы.Контрагент.ИНН = уатМестонахождениеТС.Владелец.ИНН ТОГДА ""Собственные нужды"" ИНАЧЕ ЛотыПроизводственнойПрограммы.Договор.Представление КОНЕЦ,
	|	ВЫБОР КОГДА ЛотыПроизводственнойПрограммы.Контрагент.ИНН = уатМестонахождениеТС.Владелец.ИНН ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|	ЛотыПроизводственнойПрограммы.РежимРаботы,
	|	уатМестонахождениеТС.Подразделение,
	|	уатМестонахождениеТС.Состояние,
	|	ДополнительныеЗаписиНаличиеТС.ДоговорДополнение,
	|	ДополнительныеЗаписиНаличиеТС.Комментарий,
	|	ДополнительныеЗаписиНаличиеТС.ИдентификаторСтрокиОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"""" КАК Договор,
	|	"""" КАК ДоговорПредставление,
	|	ЛОЖЬ КАК ПризнакСобственныеНужды,
	|	ДополнительныеЗаписиНаличиеТС.ГруппаТипов КАК ГруппаТипов,
	|	"""" КАК ОграничениеПоВозрастуТС,
	|	"""" КАК ТСПредставление,
	|	"""" КАК ТС,
	|	"""" КАК ТипТС,
	|	"""" КАК ГаражныйНомер,
	|	"""" КАК ГосударственныйНомер,
	|	0 КАК ГодВыпуска,
	|	ДополнительныеЗаписиНаличиеТС.Колонна КАК Колонна,
	|	ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.ВЭксплуатации) КАК Состояние,
	|	"""" КАК Владелец,
	|	"""" КАК РежимРаботы,
	|	0 КАК ДнейВРаботе,
	|	0 КАК КИП,
	|	0 КАК ГоденПоДоговоруДо,
	|	ДополнительныеЗаписиНаличиеТС.ДоговорДополнение КАК ДоговорДополнение,
	|	ДополнительныеЗаписиНаличиеТС.Комментарий КАК Комментарий,
	|	ДополнительныеЗаписиНаличиеТС.ИдентификаторСтрокиОтчета КАК ИдентификаторСтрокиОтчета
	
	|ИЗ
	|	РегистрСведений.юкДополнительныеЗаписиНаличиеТС КАК ДополнительныеЗаписиНаличиеТС
	|ГДЕ НАЧАЛОПЕРИОДА(ДополнительныеЗаписиНаличиеТС.Год, ГОД) = НАЧАЛОПЕРИОДА(&Год, ГОД)
	|	И ДополнительныеЗаписиНаличиеТС.ТС = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Колонна,
	|	Состояние,
	|	ГруппаТипов,
	|	ГаражныйНомер,
	|	ИдентификаторСтрокиОтчета
	|");
	
	мЗапрос.УстановитьПараметр("Год", пДата);
	мРезультат = мЗапрос.Выполнить().Выгрузить();
	мРезультат.Индексы.Добавить("ТС");
	
	мОбластьШапка = пМакет.ПолучитьОбласть("ОбластьШапка");
	мОбластьКолонна = пМакет.ПолучитьОбласть("ОбластьСтрокаАвтоколонна");
	мОбластьСостояние = пМакет.ПолучитьОбласть("ОбластьСтрокаСостояние");
	мОбластьГруппаТипов = пМакет.ПолучитьОбласть("ОбластьСтрокаГруппаТипов");
	мОбластьСтрока = пМакет.ПолучитьОбласть("ОбластьСтрокаТС");
	мОбластьСтрокаПустая = пМакет.ПолучитьОбласть("ОбластьСтрокаТС");
	мОбластьСтрокаСобственныеНужды = пМакет.ПолучитьОбласть("ОбластьСтрокаТССобственныеНужды");
	мОбластьСтрокаСобственныеНуждыПустая = пМакет.ПолучитьОбласть("ОбластьСтрокаТССобственныеНужды");
	
	мСтруктураОбластей = Новый Структура("ОбластьКолонна, ОбластьСостояние, ОбластьГруппаТипов", мОбластьКолонна, мОбластьСостояние, мОбластьГруппаТипов);
	
	вТабличныйДокумент.Вывести(мОбластьШапка, 0);
	
	мРезультатСвернутый = мРезультат.Скопировать();
	мРезультатСвернутый.Свернуть("Колонна, Состояние, ГруппаТипов, ГаражныйНомер, ТС, ТСПредставление, ИдентификаторСтрокиОтчета, ДоговорДополнение, Комментарий, ТипТС, ГосударственныйНомер, ГодВыпуска, Состояние, Владелец", "ДнейВРаботе, КИП");
	мРезультатСвернутый.Сортировать("Колонна, Состояние, ГруппаТипов, ГаражныйНомер, ИдентификаторСтрокиОтчета");
	
	мАвтоколонна = Неопределено;
	мСостояние = Неопределено;
	мГруппаТипов = Неопределено;
	мТС = Неопределено;
	мНомерПП = 1;
	
	вТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	Для Каждого мСтрока Из мРезультатСвернутый Цикл
		мОтборПоТС = Новый Структура("ТС, ИдентификаторСтрокиОтчета", мСтрока.ТС, мСтрока.ИдентификаторСтрокиОтчета);
		мСтрокиТС = мРезультат.НайтиСтроки(мОтборПоТС);
		Если мСтрокиТС.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		мЕстьКомментарий = ЗначениеЗаполнено(мСтрокиТС[0].ДоговорДополнение);
		//	вывод колонны / Состояния / Типа ТС
		ВывестиПодраздел(вТабличныйДокумент, мСтрока, мАвтоколонна, мСостояние, мГруппаТипов, мСтруктураОбластей, мНомерПП);
		//	выводСтроки
		Если мСтрокиТС.Количество() = 1 Тогда
			Если мСтрокиТС[0].ПризнакСобственныеНужды Тогда
				мОбластьСтрокаТС = мОбластьСтрокаСобственныеНужды;
			Иначе
				мОбластьСтрокаТС = мОбластьСтрока;
			КонецЕсли;
			мОбластьСтрокаТС.Параметры.Заполнить(мСтрокиТС[0]);
			Если мЕстьКомментарий Тогда
				мОбластьСтрокаТС.Параметры.ДоговорПредставление = ?(мЕстьКомментарий, "" + мСтрокиТС[0].ДоговорПредставление + " (" + мСтрокиТС[0].ДоговорДополнение + ")", мСтрокиТС[0].ДоговорДополнение);
			КонецЕсли;
			мОбластьСтрокаТС.Параметры.НомерПП = мНомерПП;
			мОбластьСтрокаТС.Параметры.СтруктураРасшифровки = ПолучитьСтруктуруРасшифровки(мСтрокиТС[0]);
			мНомерПП = мНомерПП + 1;
			вТабличныйДокумент.Вывести(мОбластьСтрокаТС, 0); 	
			Если мЕстьКомментарий Тогда
				вТабличныйДокумент.Область("R" + Формат(вТабличныйДокумент.ВысотаТаблицы, "ЧГ=") + "C10").ЦветФона = ?(Найти(НРег(мСтрокиТС[0].ДоговорДополнение), "резерв") <> 0, WebЦвета.СветлоЗеленый, WebЦвета.НейтральноПурпурный);
			КонецЕсли;
		ИначеЕсли мСтрокиТС.Количество() > 1 Тогда
			мОбластьСтрокаТС = мОбластьСтрока;
			мОбластьСтрокаТС.Параметры.Заполнить(мСтрока);
			Если мЕстьКомментарий Тогда
				мОбластьСтрокаТС.Параметры.ДоговорПредставление = ?(мЕстьКомментарий, "" + мСтрокиТС[0].ДоговорПредставление + " (" + мСтрокиТС[0].ДоговорДополнение + ")", мСтрокиТС[0].ДоговорДополнение);
			КонецЕсли;
			мОбластьСтрокаТС.Параметры.НомерПП = мНомерПП;
			мОбластьСтрокаТС.Параметры.СтруктураРасшифровки = ПолучитьСтруктуруРасшифровки(мСтрокиТС[0]);
			Если ЗначениеЗаполнено(мСтрокиТС[0].ТС) Тогда
				мНомерПП = мНомерПП + 1;
			КонецЕсли;
			вТабличныйДокумент.Вывести(мОбластьСтрокаТС,  0);
			Если мЕстьКомментарий Тогда
				вТабличныйДокумент.Область("R" + Формат(вТабличныйДокумент.ВысотаТаблицы, "ЧГ=") + "C10").ЦветФона = ?(Найти(НРег(мСтрокиТС[0].ДоговорДополнение), "резерв") <> 0, WebЦвета.СветлоЗеленый, WebЦвета.НейтральноПурпурный);
			КонецЕсли;
			Для Каждого мСтрокаПодробногоРезультата из мСтрокиТС Цикл
				Если мСтрокаПодробногоРезультата.ПризнакСобственныеНужды Тогда
					мОбластьСтрокаТС = мОбластьСтрокаСобственныеНуждыПустая;
				Иначе
					мОбластьСтрокаТС = мОбластьСтрокаПустая;
				КонецЕсли;
				мСтруктураЗаполнения = Новый Структура("Договор, ГоденПоДоговоруДо, РежимРаботы, ДнейВРаботе, КИП");
				ЗаполнитьЗначенияСвойств(мСтруктураЗаполнения, мСтрокаПодробногоРезультата);
				
				мОбластьСтрокаТС.Параметры.Заполнить(мСтруктураЗаполнения);
				вТабличныйДокумент.Вывести(мОбластьСтрокаТС, 1);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	вТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	вТабличныйДокумент.АвтоМасштаб = Истина;
	вТабличныйДокумент.ФиксацияСверху = 4;
	вТабличныйДокумент.ФиксацияСлева = 5;
	Возврат вТабличныйДокумент;
КонецФункции

&НаСервереБезКонтекста
Функция ВывестиПодраздел(пТабличныйДокумент, пСтрокаДанных, пАвтоколонна, пСостояние, пГруппаТипов, пСтруктураОбластей, пНомерПП)
	Если пАвтоколонна = Неопределено Или пСтрокаДанных.Колонна <>  пАвтоколонна Тогда
		пСтруктураОбластей.ОбластьКолонна.Параметры.Заполнить(пСтрокаДанных);
		пТабличныйДокумент.Вывести(пСтруктураОбластей.ОбластьКолонна, 0);
		//вывод итогов по предыдущей?
		пАвтоколонна = пСтрокаДанных.Колонна;
		пНомерПП = 1;
	КонецЕсли;
	Если пСостояние = Неопределено Или пСтрокаДанных.Состояние <>  пСостояние Тогда
		пСтруктураОбластей.ОбластьСостояние.Параметры.Заполнить(пСтрокаДанных);
		пТабличныйДокумент.Вывести(пСтруктураОбластей.ОбластьСостояние, 0);
		пСостояние = пСтрокаДанных.Состояние;
		пНомерПП = 1;
	КонецЕсли;
	Если пГруппаТипов = Неопределено Или пСтрокаДанных.ГруппаТипов <>  пГруппаТипов Тогда
		пСтруктураОбластей.ОбластьГруппаТипов.Параметры.Заполнить(пСтрокаДанных);
		пТабличныйДокумент.Вывести(пСтруктураОбластей.ОбластьГруппаТипов, 0);
		пГруппаТипов = пСтрокаДанных.ГруппаТипов;
		пНомерПП = 1;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	мОбъект = РеквизитФормыВЗначение("Объект");
	фМакет = мОбъект.ПолучитьМакет("Макет");
КонецПроцедуры

&НаКлиенте
Процедура фРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мДополнительныеПараметры = Новый Структура("Расшифровка", Расшифровка);
	мОписаниеОбработкиЗавершенияВыбораИзМеню = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораИзМеню", ЭтаФорма, мДополнительныеПараметры);
	мСписокЗначенийМеню = Новый СписокЗначений();
	
	
	Если ЗначениеЗаполнено(Расшифровка.ИдентификаторСтрокиОтчета) Тогда
		мСписокЗначенийМеню.Добавить(0, "Изменить комментарий");
		мСписокЗначенийМеню.Добавить(2, "Удалить комментарий");
	Иначе
		мСписокЗначенийМеню.Добавить(0, "Добавить комментарий");
		мСписокЗначенийМеню.Добавить(1, "Добавить строку в колонну");
	КонецЕсли;
	ПоказатьВыборИзМеню(мОписаниеОбработкиЗавершенияВыбораИзМеню, мСписокЗначенийМеню);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗавершенияВыбораИзМеню(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		мОписаниеОповещенияОбновитьОтчет = Новый ОписаниеОповещения("СформироватьПослеИзменения", ЭтаФорма);
		мСтруктураЗаписи = Новый Структура("Год, ИдентификаторСтрокиОтчета", НачалоГода(фДата), пДополнительныеПараметры.Расшифровка.ИдентификаторСтрокиОтчета);
		Если пРезультат.Значение = 0 Или пРезультат.Значение = 1 Тогда
			//мИдентификатор = ?(ЗначениеЗаполнено(пДополнительныеПараметры.Расшифровка.ИдентификаторСтрокиОтчета), пДополнительныеПараметры.Расшифровка.ИдентификаторСтрокиОтчета, Новый УникальныйИдентификатор);
			мПараметрыФормыЗаписи = Новый Структура("Год", НачалоГода(фДата));
			Если пРезультат.Значение = 0 Тогда
				мПараметрыФормыЗаписи.Вставить("ТС", пДополнительныеПараметры.Расшифровка.ТС);
			ИначеЕсли пРезультат.Значение = 1 Тогда
				мПараметрыФормыЗаписи.Вставить("Колонна", пДополнительныеПараметры.Расшифровка.Колонна);
				мПараметрыФормыЗаписи.Вставить("ГруппаТипов", пДополнительныеПараметры.Расшифровка.ГруппаТипов);
			КонецЕсли;
			Если ЗначениеЗаполнено(пДополнительныеПараметры.Расшифровка.ИдентификаторСтрокиОтчета) Тогда
				мПараметрыФормыЗаписи.Вставить("Ключ", ПолучитьКлючЗаписи(мСтруктураЗаписи));
			КонецЕсли;
			ОткрытьФорму("РегистрСведений.юкДополнительныеЗаписиНаличиеТС.Форма.ФормаЗаписи", мПараметрыФормыЗаписи, ЭтаФорма, Истина, , , мОписаниеОповещенияОбновитьОтчет, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли пРезультат.Значение = 2 Тогда
			УдалитьКомментарий(мСтруктураЗаписи);
			КомандаСформировать(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруРасшифровки(пСтрока)
	вСтруктура = Новый Структура("ИдентификаторСтрокиОтчета, ДоговорДополнение, Комментарий, ТС, ГруппаТипов, Колонна");
	ЗаполнитьЗначенияСвойств(вСтруктура, пСтрока);
	Возврат вСтруктура;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписи(пСтруктураЗаписи)
	Возврат РегистрыСведений.юкДополнительныеЗаписиНаличиеТС.СоздатьКлючЗаписи(пСтруктураЗаписи);
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьКомментарий(пСтруктураЗаписи)
	мМенеджерЗаписи = РегистрыСведений.юкДополнительныеЗаписиНаличиеТС.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(мМенеджерЗаписи, пСтруктураЗаписи);
	мМенеджерЗаписи.Удалить();
КонецПроцедуры