#Если Клиент Тогда
	
	//==================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ДОПОЛНИТЕЛЬНЫХ МЕТОДОВ ОБЪЕКТА
	
	// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
	// Если необходимо - выполняется обновление.
	// Если обновление не удалось выполнить - предлагается завершить работу системы.
	//
	// Параметры:
	//  Нет.
	//
	Функция ВыполнитьОбновлениеИнформационнойБазыУАТ() Экспорт
		
		Если (НЕ ПустаяСтрока(НомерВерсииКонфигурации)) и Константы.уатНомерВерсииКонфигурации.Получить() <> НомерВерсииКонфигурации Тогда
			Если ПустаяСтрока(Константы.уатНомерВерсииКонфигурации.Получить()) тогда
				//Обработка первого запуска
				// отключим лишние проверки и сообщения
				// Сначала запомним их текущие состояния
				ПВХ = ПланыВидовХарактеристик.уатПраваИНастройки;
				ПроверкаДоступаКСправочникамИДокументам   = уатПраваИНастройки.уатПраво(ПВХ.ПроверкаДоступаКСправочникамИДокументам, глПраваУАТ);
				//права обновлены - нужно перечитать кэш прав
				Объект = ПланыВидовХарактеристик.уатПраваИНастройки.СоздатьЭлемент();
				Объект.ИнициализироватьПраваИНастройки();
				глПраваУАТ.Вставить(ПВХ.ПроверкаДоступаКСправочникамИДокументам, Ложь);
				ПланыВидовХарактеристик.уатПраваИНастройки.СоздатьЭлемент().ПроверитьПраваДоступа();
								
				// Восстановим исходное состояние проверок и сообщений
				глПраваУАТ.Вставить(ПВХ.ПроверкаДоступаКСправочникамИДокументам, ПроверкаДоступаКСправочникамИДокументам);

			Иначе
				Если РольДоступна("уатАдминистратор") Тогда
					Форма = Обработки.уатЛегальностьПолученияОбновлений.ПолучитьФорму();
					Форма.ПоказыватьПредупреждениеОПерезапуске = Истина;
					Результат = Форма.ОткрытьМодально();
					Если Результат <> Истина Тогда
						ЗавершитьРаботуСистемы(Ложь);
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Предупреждение("Изменился номер версии конфигурации, но недостаточно прав для выполнения обновления! Обратитесь к администратору.");
					ЗавершитьРаботуСистемы();
					Возврат Ложь;
				КонецЕсли;
				
				Предупреждение("Изменился номер версии конфигурации. Будет выполнено обновление информационной базы.");
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		// Проверка наличия прав для обновления информационной базы.
		Если НЕ ПравоДоступа("МонопольныйРежим", Метаданные) 
			ИЛИ НЕ ПравоДоступа("Использование",    Метаданные.Обработки.уатОбновлениеИнформационнойБазы) 
			ИЛИ НЕ ПравоДоступа("Просмотр",         Метаданные.Обработки.уатОбновлениеИнформационнойБазы) 
			ИЛИ НЕ РольДоступна("уатАдминистратор") Тогда
			
			Предупреждение("Недостаточно прав для выполнения обновления. Работа системы будет завершена.");
			
			ЗавершитьРаботуСистемы();
			Возврат Ложь;
			
		КонецЕсли;
		
		// Установка монопольного режима для обновления информационной базы.
		Попытка
			УстановитьМонопольныйРежим(Истина);
			
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Предупреждение("Не удалось установить монопольный режим. Работа системы будет завершена.");
			
			ЗавершитьРаботуСистемы();
			Возврат Ложь;
			
		КонецПопытки;
		
		// Обновление информационной базы.
		Обработки.уатОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление(НомерВерсииКонфигурации);
		
		// Отключение монопольного режима.
		УстановитьМонопольныйРежим(Ложь);
		
		// Проверка выполнения обновления информационной базы.
		Если СокрЛП(Константы.уатНомерВерсииКонфигурации.Получить()) <> СокрЛП(НомерВерсииКонфигурации) Тогда
			
			Сообщить("Обновление информационной базы не выполнено.", СтатусСообщения.Важное);
			
			Текст = "Не выполнено обновление информационной базы! Завершить работу системы?";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗавершитьРаботуСистемы();
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Сообщить("Обновление информационной базы выполнено успешно.", СтатусСообщения.Информация);
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
	
	// Инициализация подсистемы УАТ
	// Возвращает Истина - все ОК, Ложь - что-то не в порядке.
	// ЗакрытьБезВопросов - если параметр будет установлен в "Истина", то программа закроется не спросив об этом
	Функция ИнициализацияСистемыУАТ() Экспорт
		// Создадим компьютер
		Состояние("Обновляем информацию о компьютере ...");
		Имя = ИмяКомпьютера();
		Комп=Справочники.уатКомпьютеры.НайтиПоНаименованию(Имя,Истина);
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Комп) Тогда
			Комп=Справочники.уатКомпьютеры.СоздатьЭлемент();
			Комп.УстановитьНовыйКод("");
			Комп.Наименование = Имя;
			Комп.ПроверкаПередЗаписью = Ложь;
			Комп.Записать();
		КонецЕсли;
		// Установим флаги режима работы с оборудованием
		ПараметрыСеанса.уатКомпьютер = Комп.Ссылка;
		
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		// Инициализация системы прав и настроек системы УАТ
		// Проверим и исправим при необходимости, заполнение ПВХ уатПраваИНастройки
		Состояние("Инициализация системы прав и настроек...");
		Объект = ПланыВидовХарактеристик.уатПраваИНастройки.СоздатьЭлемент();
		Объект.ИнициализироватьПраваИНастройки();
		
		// Получение прав и настроек текущего пользователя
		Состояние("Получение прав и настроек текущего пользователя...");
		глПраваУАТ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(глЗначениеПеременной("глТекущийПользователь"));
		
		// Проверим, а можно ли пользователю работать с программой
		Если НЕ уатПраваИНастройки.уатПраво("РазрешитьРаботуСПрограммой", глПраваУАТ) Тогда
			Предупреждение("Текущему пользователю <" + СокрЛП(Пользователь.Код) + "> запрещено работать с программой!
			|Обратитесь к администратору базы данных.", 15);
			ЗавершитьРаботуСистемы(Ложь);
			Возврат Ложь;
		КонецЕсли;
		
		флЗащита = ИнициализацияЗащиты();
			
		флОбновление = Ложь;
		Если флЗащита Тогда
			Состояние("Обновление информационной базы ...");
			флОбновление = ВыполнитьОбновлениеИнформационнойБазыУАТ();
		КонецЕсли;
			
		//Если неудачно обновились или не нашли защиту то выходим
		Если НЕ (флОбновление И флЗащита) Тогда
			Сообщить("Обновление конфигурации не выполнено!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
			
		// Включим индикацию пользователя в заголовке системы
		Если уатПраваИНастройки.уатПраво("ИндикацияПользователяВЗаголовкеСистемы", глПраваУАТ) Тогда
			Если ЗначениеЗаполнено(Пользователь.ФизЛицо) Тогда
				Пользователь = СокрЛП(Пользователь.ФизЛицо.Наименование);	
			Иначе
				Пользователь = СокрЛП(Пользователь.Наименование);
			КонецЕсли;
			УстановитьЗаголовокСистемы(ПолучитьЗаголовокСистемы() + "    Пользователь: <" + Пользователь + ">");
		КонецЕсли;
		
		// Проверим нужно ли запустить пусковую панель
		Если уатПраваИНастройки.уатПраво("ОткрыватьПриВходеАРМ", глПраваУАТ) Тогда
			Обработки.уатПанельАРМ.ПолучитьФорму("Форма").Открыть();
		КонецЕсли;
		
		//Панель функций
		ЗначОткрыватьПриЗапускеПанельФункций = уатОбщегоНазначенияТиповые.уатПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеПанельФункций");
		Если ЗначОткрыватьПриЗапускеПанельФункций = Неопределено ИЛИ ЗначОткрыватьПриЗапускеПанельФункций = Истина Тогда
			Обработки.уатПанельФункций.ПолучитьФорму().Открыть();
		КонецЕсли;
		
		// Приветствие при старте системы
		Если уатПраваИНастройки.уатПраво("ПоказыватьПриветствиеПриСтарте", глПраваУАТ) Тогда
			Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Если ЗначениеЗаполнено(Пользователь.ФизЛицо) Тогда
				ИмяПользователя = СокрЛП(Пользователь.ФизЛицо.Наименование);
			Иначе
				ИмяПользователя = СокрЛП(Пользователь.Наименование);
			КонецЕсли;
			//Предупреждение("Здравствуйте уважаемый пользователь """ + ИмяПользователя + """
			//|Система готова к работе.", 3);
		КонецЕсли;
		
		глСоответствиеТекстовЭлектронныхПисемУАТ = Новый Соответствие;
		
		//Проверка напоминаний
		уатОтношенияСКлиентами.уатПроверитьПодключениеОбработчикаОжидания();
		
		//Запускаем обработку АвтоПолученияОтправкиЭлектронныхПисем 
		Если РольДоступна("уатАдминистратор") ИЛИ РольДоступна("уатCRM") ИЛИ РольДоступна("уатОбновлениеОбменИФЗ") Тогда
			глОбработкаАвтоПолученияОтправкиЭлектронныхПисемУАТ = Обработки.уатАвтоПолучениеОтправкаЭлектронныхПисем.ПолучитьФорму();
		КонецЕсли;
		
		Возврат Истина;
	КонецФункции
	
	// Функция получает компоненты защиты УАТ
	//
	// Параметры:
	//  нет
	//
	// Возвращаемое значение:
	//  Компонента защиты
	//
	Функция ПолучитьКомпонентуЗащиты() Экспорт
		Возврат глКомпонентаЗащитыУАТ;
	КонецФункции

	// Загрузка защиты.
	// Возвращает Истина - все ОК, Ложь - что-то не в порядке.
	// ЗакрытьБезВопросов - если параметр будет установлен в "Истина", то программа закроется не спросив об этом
	Функция ИнициализацияЗащиты() Экспорт
		
		Состояние("Подключение системы защиты...");
		КомпонентаЗагруженаУспешно = Истина;
		ФормаМастер = ПолучитьФорму();
		// Цикл попыток загрузить внешнюю компоненту типового решения
		Пока НЕ КомпонентаЗагруженаУспешно Цикл
			// "Бесконечный" цикл. Выход успешная загрузка или отказ пользователя продолжать
			КомпонентаЗагруженаУспешно=ФормаМастер.ОткрытьМодально(); // Когда компонента загрузится успешно форма должна вернуть Истина
			Если КомпонентаЗагруженаУспешно=НЕОПРЕДЕЛЕНО Тогда
				КомпонентаЗагруженаУспешно=Ложь;
			ИначеЕсли ТипЗнч(КомпонентаЗагруженаУспешно)=Тип("Строка") Тогда
				// Запущена программа-инсталлятор, срочно завершаем свою работу дабы не мешать инсталлятору делать свое черное дело
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Ложь;
			КонецЕсли;
			// Проверка загрузилась ли компонента
			Если КомпонентаЗагруженаУспешно Тогда
				Если НЕ ПустаяСтрока(ФормаМастер.ТекстСообщения) Тогда
					// Похоже есть обновление, спросим пользователя а не хочет ли он прекратить работу чтобы его применить
					Если Вопрос(ФормаМастер.ТекстСообщения,РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
						// Хороший выбор! Все выходим 
						ЗавершитьРаботуСистемы(Ложь);
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
				Прервать; // Компоненту загрузили успешно - пошли дальше
			КонецЕсли;
			ТекстСообщения=ФормаМастер.ТекстСообщения;
			Если ПустаяСтрока(ТекстСообщения) Тогда
				ТекстСообщения=	"	Из-за возникших ошибок система защиты типового решения не была подключена."+Символы.ПС+
				"Рекомендуется исправить возникшие проблемы перед следующей попыткой запуска программы."+Символы.ПС+
				"(возможно вам следует заново установить систему защиты типового решения)";
			КонецЕсли;
			// Сначала спросим пользователя хочет ли он попробовать все исправить, а то может устал уже?
			ОтветПользователя=Вопрос(ТекстСообщения+"
			|
			|            ЗАПУСТИТЬ МАСТЕР НАСТРОЙКИ СИСТЕМЫ ЗАЩИТЫ ?
			|
			|Нажатие на кнопку ""Да"" откроет форму мастера настройки защиты.
			|Нажатие на кнопку ""Нет"" приведет к НЕМЕДЛЕННОМУ ЗАВЕРШЕНИЮ РАБОТЫ",РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Нет);
			
			
			Если ОтветПользователя=КодВозвратаДиалога.Отмена Тогда
				// Выбрал плохой, не рекомендуемый вариант, ну пусть сам плачет
				//ПараметрыСеанса.РежимРаботы="120"; // не включать автоматически, работа с оборудованием запрещена,
				//сессия не серверная
				Прервать; // прервем внутренний цикл
			ИначеЕсли ОтветПользователя=КодВозвратаДиалога.Да Тогда
				ФормаМастер.ЭтоПовторныйВызовМастера=Истина;
				// Захотел попробовать все исправить, ну-ну
			Иначе // Ответил "Нет" или проспал таймаут - нужно выходить (это наиболее правильный вариант)
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла; // попыток загрузить внешнюю компоненту типового решения
		
		// Сюда дойдем если инициализация прошла успешно
		Состояние("Инициализация системы завершена успешно.");
		Возврат Истина;
		
	КонецФункции
	

#КонецЕсли

//текущий номер релиза
НомерВерсииКонфигурации = "1.0.6.3";
