
Перем ДокументСсылка Экспорт; // Документ- основание
Перем Контрагент Экспорт; //Контрагент для платежа
Перем РасшифровкаПлатежаДок Экспорт; //Документ в расшифровке платежа
Перем ДатаДок Экспорт; //Дата документа
Перем ТипЗадолженности Экспорт; //Тип задолжности платежа
Перем КурсДокумента Экспорт; //Курс валюты документа
Перем КратностьДокумента Экспорт; // Кратность валюты документа
Перем ВалютаДокумента Экспорт; // Валюта документа
Перем БанковскийСчетКасса Экспорт; //Банковский счёт или касса  из документа
Перем Организация Экспорт; // Организация
Перем ДоговорКонтрагента Экспорт; // Договор контрагента, в разрезе которого будет производится платёж
Перем Сделка Экспорт; // Аналитика платежа
Перем Проект Экспорт; // Аналитика платежа
//Перем ВидОперацииПлан Экспорт;
Перем СтатьяДвиженияДенежныхСредств Экспорт; // Аналитика платежа
Перем МножественныйВыбор Экспорт; //Не закрывать форму при выборе
Перем ЕстьПодбор Экспорт; // Подбор осуществляется

#Если Клиент Тогда

// Отбирает неоплаченные задолженности по переданным контрагенту и типу задолженности
// и формирует таблицу для подбора.
//
Процедура СформироватьСписокДолговПоРегистру(ТабРасшифровка)
		
	ДопСтрокаОтборов = "";
	
	Запрос = Новый Запрос;
	
	Отбор = ПостроительОтбораДоговоров.Отбор;
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(ЭлементОтбора.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		н = Отбор.Индекс(ЭлементОтбора)+1;
		СтрокаЗначения   = "Значение"   + Формат(н, "ЧГ=");
		СтрокаЗначенияС  = "ЗначениеС"  + Формат(н, "ЧГ=");
		СтрокаЗначенияПо = "ЗначениеПо" + Формат(н, "ЧГ=");
		
		ДопСтрокаОтборов = ДопСтрокаОтборов + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(ЭлементОтбора.ВидСравнения, "&"+СтрокаЗначения, ЭлементОтбора.ПутьКДанным, "&"+СтрокаЗначенияС, "&"+СтрокаЗначенияПо);
		
		Запрос.УстановитьПараметр(СтрокаЗначения,   ЭлементОтбора.Значение);
		Запрос.УстановитьПараметр(СтрокаЗначенияС,  ЭлементОтбора.ЗначениеС);
		Запрос.УстановитьПараметр(СтрокаЗначенияПо, ЭлементОтбора.ЗначениеПо);
	
	КонецЦикла;
	
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущиеЗадолженности.ТипЗадолженности КАК ВидВзаиморасчетов,
	|	ТекущиеЗадолженности.ДоговорКонтрагента,
	|	ТекущиеЗадолженности.Сделка КАК Сделка,
	|	ТекущиеЗадолженности.ДатаВозникновения КАК ДатаВозникновения,
	|	МАКСИМУМ(ТекущиеЗадолженности.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ТекущиеЗадолженности.КурсВзаиморасчетов,
	|	ТекущиеЗадолженности.КратностьВзаиморасчетов,
	|	МАКСИМУМ(ТекущиеЗадолженности.СуммаПлатежа) КАК СуммаПлатежа
	|ИЗ (";
	
	ТекстОсновнойЗапрос = "
	// Из регистра "уатВзаиморасчетыСКонтрагентами" выбираем задолженности по договорам,
	// не ведущимся по расчетным документам
	|ВЫБРАТЬ // Выбираем задолженности по договорам, ведущимся по расчетным документам или по заказам
	|	&ПараметрФактические КАК ТипЗадолженности,   																			//а нужны ли 
	|	РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	РасчетыСКонтрагентамиОстатки.Сделка.Дата КАК ДатаВозникновения,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток"+?(ТипЗадолженности="<0","*(-1)","")+" КАК СуммаВзаиморасчетов,
	|  	КурсыДоговоры.Курс КАК КурсВзаиморасчетов,
	|  	КурсыДоговоры.Кратность КАК КратностьВзаиморасчетов,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов=&ВалютаДокумента
	|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток"+?(ТипЗадолженности="<0","*(-1)","")+"
	|		КОГДА НЕ РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов=&ВалютаДокумента 
	|			И НЕ КурсыДоговоры.Курс=0 
	|			И НЕ &КурсДокумента=0
	|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток"+?(ТипЗадолженности="<0","*(-1)","")+"*КурсыДоговоры.Курс * &КратностьДокумента 
	|			/ (&КурсДокумента * КурсыДоговоры.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаПлатежа,
	|	ЛОЖЬ КАК ДвиженияДокумента
	|	ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(, Контрагент=&Контрагент
	|"+?(ЗначениеЗаполнено(Организация)," И (Организация=&Организация ИЛИ Организация=&ПустаяОрганизация)","")+"
	|			И ДоговорКонтрагента.ВидДоговора = &ВидДоговора
	|			И (ДоговорКонтрагента.ВедениеВзаиморасчетов <> &ПоДоговоруВЦелом"+ДопСтрокаОтборов+")) КАК РасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПлатежа, ) КАК КурсыДоговоры
	|		ПО РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыДоговоры.Валюта
	|
	|	ГДЕ
	|	(РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток " + ТипЗадолженности+")
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Выбираем задолженности по договорам, ведущимся по договору в целом
	|	&ПараметрФактические КАК ТипЗадолженности,
	|	РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиОстатки.Сделка,
	|	ПоследнееДвижение.Период КАК ДатаВозникновения,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток"+?(ТипЗадолженности="<0","*(-1)","")+",
	|	КурсыДоговоры.Курс,
	|	КурсыДоговоры.Кратность,
	|	ВЫРАЗИТЬ 
	|	(ВЫБОР 
	|		КОГДА РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов=&ВалютаДокумента
	|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток"+?(ТипЗадолженности="<0","*(-1)","")+"
	|		КОГДА НЕ РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов=&ВалютаДокумента 
	|			И НЕ КурсыДоговоры.Курс=0 
	|			И НЕ &КурсДокумента=0
	|			ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток"+?(ТипЗадолженности="<0","*(-1)","")+"*КурсыДоговоры.Курс * &КратностьДокумента 
	|			/ (&КурсДокумента * КурсыДоговоры.Кратность)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаПлатежа,
	|	ЛОЖЬ КАК ДвиженияДокумента
	|	ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(, Контрагент=&Контрагент 
	|"+?(ЗначениеЗаполнено(Организация)," И (Организация=&Организация ИЛИ Организация=&ПустаяОрганизация)","")+"
	|			И ДоговорКонтрагента.ВидДоговора = &ВидДоговора
	|			И ДоговорКонтрагента.ВедениеВзаиморасчетов=&ПоДоговоруВЦелом"+ДопСтрокаОтборов+") КАК РасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПлатежа, ) КАК КурсыДоговоры
	|		ПО РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыДоговоры.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РасчетыСКонтрагентами.Период) КАК Период,
	|			РасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			РегистрНакопления.уатВзаиморасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|		ГДЕ РасчетыСКонтрагентами.Активность=Истина
	|		И РасчетыСКонтрагентами.ВидДвижения=&ВидДвижения
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСКонтрагентами.ДоговорКонтрагента) КАК ПоследнееДвижение
	|		ПО РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ПоследнееДвижение.ДоговорКонтрагента
	|	ГДЕ
	|	(РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток "+ТипЗадолженности+")
	|";
		
	Если НЕ ДокументСсылка = Неопределено И ДокументСсылка.Проведен Тогда
		
		ТекстОсновнойЗапрос = ТекстОсновнойЗапрос+"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|	&ПараметрДвижения КАК ТипЗадолженности,
		|	ТЧДокументаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТЧДокументаПлатежа.Сделка КАК Сделка,
		|	ВЫБОР 
		|		КОГДА НЕ ТЧДокументаПлатежа.Сделка=Неопределено
		|		ТОГДА ТЧДокументаПлатежа.Сделка.Дата
		|		ИНАЧЕ ТЧДокументаПлатежа.Ссылка.Дата 
		|	КОНЕЦ КАК ДатаВозникновения,
		|	ТЧДокументаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТЧДокументаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ТЧДокументаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	ТЧДокументаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ИСТИНА КАК ДвиженияДокумента
		|	ИЗ
		|	ДОКУМЕНТ." + ДокументСсылка.Метаданные().Имя + ".РасшифровкаПлатежа КАК ТЧДокументаПлатежа
		|	ГДЕ
		|		ТЧДокументаПлатежа.Ссылка = &Регистратор И
		|		ТЧДокументаПлатежа.Ссылка.Проведен";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстОсновнойЗапрос + ") КАК ТекущиеЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеЗадолженности.ТипЗадолженности,
	|	ТекущиеЗадолженности.ДоговорКонтрагента,
	|	ТекущиеЗадолженности.Сделка,
	|	ТекущиеЗадолженности.КурсВзаиморасчетов,
	|	ТекущиеЗадолженности.КратностьВзаиморасчетов,
	|	ТекущиеЗадолженности.ДатаВозникновения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВозникновения "+ ?(СпособЗаполнения="ФИФО", "Возр", "Убыв")+",
	|	Сделка";	
	
	
	Запрос.УстановитьПараметр("ПараметрФактические", "Фактические");
	Запрос.УстановитьПараметр("Организация"        , Организация);
	Запрос.УстановитьПараметр("Контрагент"         , Контрагент);
	Запрос.УстановитьПараметр("ВалютаДокумента"    , ВалютаДокумента);
	Запрос.УстановитьПараметр("КурсДокумента"      , КурсДокумента);
	Запрос.УстановитьПараметр("КратностьДокумента" , КратностьДокумента);
	Запрос.УстановитьПараметр("ПустаяОрганизация"  , Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПоДоговоруВЦелом"   , Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	Запрос.УстановитьПараметр("ВидДвижения"        , ?(ТипЗадолженности="<0",ВидДвиженияНакопления.Расход,ВидДвиженияНакопления.Приход));
	Запрос.УстановитьПараметр("ДатаПлатежа"        , ДатаДок);
	Запрос.УстановитьПараметр("Регистратор"        ,  ?(ДокументСсылка = Неопределено, Неопределено, ДокументСсылка.Ссылка));
	Запрос.УстановитьПараметр("ПараметрОперативные", "Оперативные");
	Запрос.УстановитьПараметр("ПараметрДвижения"   , "Текущий документ");
	Если ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПлатежноеПоручениеВходящее")
	 ИЛИ ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПриходныйКассовыйОрдер") тогда 
		мВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ИначеЕсли ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПлатежноеПоручениеИсходящее")
	 ИЛИ ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатРасходныйКассовыйОрдер") тогда 
		мВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	КонецЕсли;	
	Запрос.УстановитьПараметр("ВидДоговора"        , мВидДоговора);
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьПодбор Тогда
		// убираем из таблицы значения, уже присутствующие в форме документа		
		Для Каждого СтрокаДок ИЗ РасшифровкаПлатежаДок Цикл
			
			МассивКУдалению=Новый Массив;
			
			СуммаПлатежаДок=СтрокаДок.СуммаПлатежа;
			СуммаВзаиморасчетовДок=СтрокаДок.СуммаВзаиморасчетов;
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ДоговорКонтрагента", СтрокаДок.ДоговорКонтрагента);
			СтруктураПоиска.Вставить("Сделка"            , СтрокаДок.Сделка);
			
			МассивПодбора=ТабРезультат.НайтиСтроки(СтруктураПоиска);
			
			Для Индекс = 0 ПО МассивПодбора.Количество()-1 Цикл
				
				СтрокаПодбор=МассивПодбора[Индекс];
				
				Если СтрокаПодбор.СуммаПлатежа>=СуммаПлатежаДок И СтрокаПодбор.СуммаВзаиморасчетов>=СуммаВзаиморасчетовДок Тогда
					
					СтрокаПодбор.СуммаПлатежа=СтрокаПодбор.СуммаПлатежа-СуммаПлатежаДок;
					СтрокаПодбор.СуммаВзаиморасчетов=СтрокаПодбор.СуммаВзаиморасчетов-СуммаВзаиморасчетовДок;
					
					СуммаПлатежаДок=0;
					СуммаВзаиморасчетовДок=0;
													
				ИначеЕсли СтрокаПодбор.СуммаПлатежа>0 И СтрокаПодбор.СуммаВзаиморасчетов>0 Тогда
					
					СуммаСписанияПлатеж=Мин(СуммаПлатежаДок,СтрокаПодбор.СуммаПлатежа);
					СуммаСписанияРасчеты=Мин(СуммаВзаиморасчетовДок,СтрокаПодбор.СуммаВзаиморасчетов);
					
					СтрокаПодбор.СуммаПлатежа=СтрокаПодбор.СуммаПлатежа-СуммаСписанияПлатеж;
					СтрокаПодбор.СуммаВзаиморасчетов=СтрокаПодбор.СуммаВзаиморасчетов-СуммаСписанияРасчеты;
					
					СуммаПлатежаДок=СуммаПлатежаДок-СуммаСписанияПлатеж;
					СуммаВзаиморасчетовДок=СуммаВзаиморасчетовДок-СуммаСписанияРасчеты;
					
				КонецЕсли;
				
				Если НЕ (СтрокаПодбор.СуммаВзаиморасчетов=0 ИЛИ СтрокаПодбор.СуммаПлатежа=0) Тогда
					
					СтрокаПодбор.КурсВзаиморасчетов=?(НЕ КратностьДокумента=0,Окр((СтрокаПодбор.СуммаПлатежа * КурсДокумента*СтрокаПодбор.КратностьВзаиморасчетов/(СтрокаПодбор.СуммаВзаиморасчетов*КратностьДокумента)),4),0);
					
				Иначе
					
					МассивКУдалению.Добавить(СтрокаПодбор);
					
				КонецЕсли;
				
				Если СуммаПлатежаДок=0 И СуммаВзаиморасчетовДок=0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Строка ИЗ МассивКУдалению Цикл
				
				ТабРезультат.Удалить(Строка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабРезультат, ТабРасшифровка);
		
КонецПроцедуры // СформироватьСписокДолговПоРегистру()

// Отбирает неоплаченные задолженности из сформированной таблицы для подбора.
//
Процедура СформироватьСписокДолгов() Экспорт
	
	ТабРасшифровка=РасшифровкаПлатежа.Выгрузить();
	ТабРасшифровка.Очистить();
	
	//Если УчитыватьФактическиеЗадолженности Тогда
		
		СформироватьСписокДолговПоРегистру(ТабРасшифровка);
		
	//КонецЕсли;
	
	РасшифровкаПлатежа.Загрузить(ТабРасшифровка);
	
КонецПроцедуры // СформироватьСписокДолгов() 

Функция ПолучитьДоговорПоУмолчанию()
	
	Если ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПлатежноеПоручениеВходящее")
	 ИЛИ ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПриходныйКассовыйОрдер") Тогда 
		мВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ИначеЕсли ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПлатежноеПоручениеИсходящее")
	 ИЛИ ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатРасходныйКассовыйОрдер") Тогда 
		мВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ИначеЕсли ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатЗаявкаНаРасходованиеДС") Тогда
		Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
			мВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		Иначе
			мВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда 
		
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	ИначеЕсли мВидДоговора <> Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора
	 И (Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая() ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация) Тогда
		
		ДоговорПоУмолчанию = Контрагент.ОсновнойДоговорКонтрагента;
		
	Иначе
		
		// Подбираем первый по списку договор контрагента, подходящий по виду операции
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Владелец"   , Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидДоговора", мВидДоговора);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ДоговорПоУмолчанию = Результат.ДоговорКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции // ПолучитьДоговорПоУмолчанию()

// Процедура формирует список долгов в развёрнутом виде
//
// Параметры:
//	ПодборПоСуммеПлатежа - флаг использования подбора по сумме платежа
//	КурсПоДоговору - флаг учёта курса в разрезе договоров
//
Процедура ЗаполнитьРасшифровкуПоДолгам(ПодборПоСуммеПлатежа=Истина,КурсПоДоговору=Истина) Экспорт
	
	СформироватьСписокДолгов();
	
	СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	ВсегоПлатежей=0;
	
	РеглУчет = Истина;
	
	Если Не СпособЗаполнения="ТЧ" Тогда
	
		Если СпособЗаполнения="ЛИФО" Тогда
			
			РасшифровкаПлатежа.Сортировать("ДатаВозникновения Убыв");
			
		КонецЕсли;
					
		Для Каждого СтрокаДолг Из РасшифровкаПлатежа Цикл
			
			Если ПодбиратьСумму Тогда
				
				Если ВсегоПлатежей+СтрокаДолг.СуммаПлатежа <= СуммаДляПодбора Тогда
					
					СуммаПлатежа=СтрокаДолг.СуммаПлатежа;
					СуммаВзаиморасчетов=СтрокаДолг.СуммаВзаиморасчетов;
					
					ВсегоПлатежей=ВсегоПлатежей+СуммаПлатежа;
					
				ИначеЕсли ВсегоПлатежей<СуммаДляПодбора Тогда
					
					СуммаПлатежа=СуммаДляПодбора-ВсегоПлатежей;
					СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаПлатежа,ВалютаДокумента,СтрокаДолг.ДоговорКонтрагента.ВалютаВзаиморасчетов,
																	КурсДокумента,СтрокаДолг.КурсВзаиморасчетов,
																	КратностьДокумента,СтрокаДолг.КратностьВзаиморасчетов);
					ВсегоПлатежей=ВсегоПлатежей+СуммаПлатежа;												
																	
				Иначе
					
					Прервать;
					
				КонецЕсли;
				
			Иначе
				
				СуммаПлатежа=СтрокаДолг.СуммаПлатежа;
				СуммаВзаиморасчетов=СтрокаДолг.СуммаВзаиморасчетов;
				
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежаДок.Добавить();
			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаДолг.ДоговорКонтрагента;
			СтрокаПлатеж.Сделка                  = СтрокаДолг.Сделка;
			СтрокаПлатеж.СуммаПлатежа            = СуммаПлатежа;
			СтрокаПлатеж.КурсВзаиморасчетов      = СтрокаДолг.КурсВзаиморасчетов;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтрокаДолг.КратностьВзаиморасчетов;
			СтрокаПлатеж.СуммаВзаиморасчетов     = СуммаВзаиморасчетов;
			
		КонецЦикла;
		
		Если ПодбиратьСумму И ВсегоПлатежей<СуммаДляПодбора Тогда
			
			СтрокаПлатеж=РасшифровкаПлатежаДок.Добавить();
			СтрокаПлатеж.СуммаПлатежа=СуммаДляПодбора-ВсегоПлатежей;
			
			ДоговорПоУмолчанию=ПолучитьДоговорПоУмолчанию();
			
			Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
				
				СтрокаПлатеж.КурсВзаиморасчетов=1;
				СтрокаПлатеж.КратностьВзаиморасчетов=1;
				СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
				
			Иначе
				
				СтрокаПлатеж.ДоговорКонтрагента=ДоговорПоУмолчанию;
				ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов,ДатаДок);
				
				СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				
				СтрокаПлатеж.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,ВалютаДокумента,СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
										КурсДокумента,СтрокаПлатеж.КурсВзаиморасчетов,
										КратностьДокумента,СтрокаПлатеж.КратностьВзаиморасчетов);
										
				Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("ОсновнаяСтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
					СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
	Иначе
		
		Для Каждого СтрокаПлатеж Из РасшифровкаПлатежаДок Цикл

			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("ДоговорКонтрагента",СтрокаПлатеж.ДоговорКонтрагента);
			СтруктураОтбора.Вставить("Сделка",СтрокаПлатеж.Сделка);
			
			СтрокаДолг = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(РасшифровкаПлатежа, СтруктураОтбора);
			
			Если НЕ СтрокаДолг=Неопределено Тогда
				
				КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,СтрокаДолг.КурсВзаиморасчетов,СтрокаПлатеж.КурсВзаиморасчетов);
				КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,СтрокаДолг.КратностьВзаиморасчетов,СтрокаПлатеж.КратностьВзаиморасчетов);
				
				Если ПодбиратьСумму Тогда
					
					Если ВсегоПлатежей+СтрокаДолг.СуммаПлатежа <= СуммаДляПодбора Тогда
						
						СтрокаПлатеж.СуммаПлатежа=СтрокаДолг.СуммаПлатежа;
						ВсегоПлатежей=ВсегоПлатежей+СтрокаДолг.СуммаПлатежа;
						
					ИначеЕсли ВсегоПлатежей<СуммаДляПодбора Тогда
						
						СтрокаПлатеж.СуммаПлатежа=СуммаДляПодбора-ВсегоПлатежей;
						ВсегоПлатежей=СуммаДляПодбора;
						
					Иначе
						
						Прервать;
						
					КонецЕсли;
					
				Иначе
					
					СтрокаПлатеж.СуммаПлатежа=СтрокаДолг.СуммаПлатежа;
					
				КонецЕсли;
				
				СтрокаПлатеж.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,ВалютаДокумента,СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
															КурсДокумента,КурсВзаиморасчетов,
															КратностьДокумента,КратностьВзаиморасчетов);
																		
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаПлатеж Из РасшифровкаПлатежаДок Цикл
		ЗаполнитьРеквизитыРеглУчета(ДокументСсылка,СтрокаПлатеж, СтавкаНДС);
	КонецЦикла;
			
КонецПроцедуры // ЗаполнитьРасшифровкуПоДолгам()

// Проставляет реквизиты, необходимые для проведения по регламентированному учету
// Парам.
// ДокументОбъект - документ,содержащий строку платежа
// СтрокаПлатеж - строка платежа
// НДСПоУмолчанию -значение ставки НДС по умолчанию
//
Процедура ЗаполнитьРеквизитыРеглУчета(ДокументОбъект, СтрокаПлатеж, НДСПоУмолчанию) Экспорт
	//проверяем есть ли в ТЧ поле "Ставка НДС"
	Попытка
		СтавкаНДС_ = СтрокаПлатеж.СтавкаНДС;
	Исключение
		СтавкаНДС_ = Неопределено;
	КонецПопытки;
	
	Если СтавкаНДС_ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
		СтрокаПлатеж.СтавкаНДС=НДСПоУмолчанию;
	КонецЕсли;				
	
	уатОбщегоНазначенияТиповые.ПересчитатьСуммуНДС(СтрокаПлатеж);
					
КонецПроцедуры // ЗаполнитьРеквизитыРеглУчета()


// Инициализируем отбор договоров
ПостроительОтбораДоговоров.Текст =
"ВЫБРАТЬ
|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,
|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
|ИЗ
|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(, Контрагент = &Контрагент {ДоговорКонтрагента.*}) КАК ВзаиморасчетыСКонтрагентамиОстатки";

Поле = ПостроительОтбораДоговоров.ДоступныеПоля.Найти("ДоговорКонтрагента");
Поле.Представление = "Договор";


#КонецЕсли

