////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
&НаКлиенте
Перем мМассивТочекВыбора;  // Точки выбора при подборе маршрута
&НаКлиенте
Перем мСчетчикДокументСформирован; // Счетчик срабатывания процедуры "ПолеHTMLДокументСформирован"
&НаКлиенте
Перем мТекстОтложеннойКоманды;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Сохранение настроек пользователя
//
&НаСервере
Процедура СохранитьНастройкуПользователя(Раздел, Настройка, ЗначениеНастройки)

	ХранилищеОбщихНастроек.Сохранить(Раздел, Настройка, ЗначениеНастройки);		

КонецПроцедуры

// Чтение настроек пользователя
//
&НаСервере
Функция ПрочитатьНастройкуПользователя(Раздел, Настройка)

	Возврат ХранилищеОбщихНастроек.Загрузить(Раздел, Настройка);	

КонецФункции // ПрочитатьНастройкуПользователя()

// Заполнение дерева объектов
//
&НаСервере
Процедура ЗаполнитьДеревоОбъектовМониторинга()
	
	ДеревоОбъектов = РеквизитФормыВЗначение("ДеревоОбъектовМониторинга");
	
	// Сохраним состояние пометок
	КопияДерева = ДеревоОбъектов.Скопировать();	
		
	ПараметрыСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());
	Запрос.Текст = "ВЫБРАТЬ  разрешенные
	               |	""Транспортные средства"" КАК ВидОбъекта,
	               |	ItobПривязкиТерминаловСрезПоследних.Объект КАК Объект,
	               |	ВЫБОР
	               |		КОГДА ItobПривязкиТерминаловСрезПоследних.Объект.ЭтоГруппа = ИСТИНА
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Картинка,
	               |	0 КАК Пометка,
	               |	ВЫБОР
	               |		КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя ЕСТЬ NULL 
	               |			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ItobАктуальностьДанныхТерминалов.ДатаВремя, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |						ТОГДА ВЫБОР
	               |								КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |									ТОГДА &СдвигЛетнееВремя
	               |								ИНАЧЕ 0
	               |							КОНЕЦ
	               |					КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |						ТОГДА ВЫБОР
	               |								КОГДА ItobАктуальностьДанныхТерминалов.ДатаВремя МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobАктуальностьДанныхТерминалов.ДатаВремя, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |									ТОГДА &СдвигЛетнееВремя
	               |								ИНАЧЕ 0
	               |							КОНЕЦ
	               |					ИНАЧЕ 0
	               |				КОНЕЦ)
	               |	КОНЕЦ КАК АктуальностьДанных,
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Долгота, 0) КАК Долгота,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) КАК Скорость,
	               |	ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Направление, 0) КАК Направление,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ItobАктуальностьДанныхТерминалов.Скорость, 0) >= &МинимальнаяСкоростьДвижения
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОбъектВДвижении,
	               |	ItobАктуальностьДанныхТерминалов.ДатаВремя КАК ПериодUTC0,
				   |	ItobПривязкиТерминаловСрезПоследних.Объект.ИконкаНаКарте КАК ИконкаНаКарте
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних(&Период, ТерминалУстановлен) КАК ItobПривязкиТерминаловСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов
	               |		ПО ItobПривязкиТерминаловСрезПоследних.Терминал = ItobАктуальностьДанныхТерминалов.Терминал
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидОбъекта,
	               |	Объект
	               |ИТОГИ ПО
	               |	ВидОбъекта,
	               |	Объект ТОЛЬКО ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	ДеревоОбъектов.Строки.Очистить();
	
	ВыборкаПоВидамОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВидамОбъектов.Следующий() Цикл
		НовСтрокаДерева = ДеревоОбъектов.Строки.Добавить();
		НовСтрокаДерева.Объект = ВыборкаПоВидамОбъектов.ВидОбъекта;
		НовСтрокаДерева.Картинка = 0;
		НовСтрокаДерева.ЭтоГруппа = Истина;
		
		ЗаполнитьСтрокиДереваОбъектов(ВыборкаПоВидамОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), НовСтрокаДерева.Строки);
	
	КонецЦикла;
			
	// Установим значения сохраненных пометок
	Если КопияДерева.Колонки.Количество() > 0 И КопияДерева.Строки.Количество() > 0 Тогда
		
		ТаблицаОбъектовСПометкой = Новый ТаблицаЗначений;
		ТаблицаОбъектовСПометкой.Колонки.Добавить("Объект");
		ТаблицаОбъектовСПометкой.Колонки.Добавить("Пометка");
		
		ЗаполнитьТаблицуОбъектовСПометкой(КопияДерева.Строки, ТаблицаОбъектовСПометкой);
		
		Для Каждого СтрокаОбъектов Из ТаблицаОбъектовСПометкой Цикл
			
			СтрокаПоиска = ДеревоОбъектов.Строки.Найти(СтрокаОбъектов.Объект, "Объект", Истина);
			Если СтрокаПоиска <> Неопределено Тогда
				СтрокаПоиска.Пометка = СтрокаОбъектов.Пометка;	
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъектов, "ДеревоОбъектовМониторинга");	
	
КонецПроцедуры // ЗаполнитьДеревоОбъектовМониторинга

// Заполнение строка дерева объектов
//
&НаСервере
Процедура ЗаполнитьСтрокиДереваОбъектов(Выборка, Строки)
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Объект) Тогда
			// элементы первого уровня
			ЗаполнитьСтрокиДереваОбъектов(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), Строки);
			Продолжить;
		
		КонецЕсли;
		
		НовСтрокаДерева = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Выборка);
		НовСтрокаДерева.ЭтоГруппа = Выборка.Объект.ЭтоГруппа;
		Если Выборка.Объект.ЭтоГруппа Тогда
			ЗаполнитьСтрокиДереваОбъектов(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), НовСтрокаДерева.Строки);
			
		ИначеЕсли Выборка.ОбъектВДвижении Тогда
			// Объект мониторинга в движении, заполним крайние точки
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Терминал", Выборка.Терминал);
			Запрос.УстановитьПараметр("Период", Выборка.ПериодUTC0);
			Запрос.Текст = "ВЫБРАТЬ разрешенные ПЕРВЫЕ 3
			               |	ItobДанныеТерминалов.Период КАК Период,
			               |	ItobДанныеТерминалов.Широта,
			               |	ItobДанныеТерминалов.Долгота,
			               |	ItobДанныеТерминалов.Направление
			               |ИЗ
			               |	РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
			               |ГДЕ
			               |	ItobДанныеТерминалов.Терминал = &Терминал
			               |	И ItobДанныеТерминалов.Период < &Период
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Период УБЫВ";
						   
						   
			НовСтрокаДерева.КрайниеТочки = "";
			ВыборкаКрайниеТочки = Запрос.Выполнить().Выбрать();
			Пока ВыборкаКрайниеТочки.Следующий() Цикл
				НовСтрокаДерева.КрайниеТочки = ?(НовСтрокаДерева.КрайниеТочки="","",
					НовСтрокаДерева.КрайниеТочки + Символы.ПС) +
					ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаКрайниеТочки.Широта) + Символы.Таб +
					ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ВыборкаКрайниеТочки.Долгота) + Символы.Таб +
					Формат(ВыборкаКрайниеТочки.Направление,"ЧГ=0");				
			
			КонецЦикла;			
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтрокиДереваОбъектов()

// Заполнение дерева объектов - объекты с пометкой 
//
&НаСервере
Процедура ЗаполнитьТаблицуОбъектовСПометкой(СтрокиДерева, ТаблицаОбъектовСПометкой)
	
	Для Каждого СтрокаКопииДерева Из СтрокиДерева Цикл
		
		Если СтрокаКопииДерева.Пометка > 0 Тогда
			НовСтрокаОбъектов = ТаблицаОбъектовСПометкой.Добавить();
			НовСтрокаОбъектов.Объект = СтрокаКопииДерева.Объект;
			НовСтрокаОбъектов.Пометка = СтрокаКопииДерева.Пометка;			
		
		КонецЕсли;		
		
		Если СтрокаКопииДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуОбъектовСПометкой(СтрокаКопииДерева.Строки, ТаблицаОбъектовСПометкой)	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОбъектовСПометкой()

// Обновление дерева деталей 
//
&НаСервере
Процедура ОбновитьДеревоДеталей(Данные)
	
	Дерево = РеквизитФормыВЗначение("ДеревоДатчиков");
	
	Дерево.Строки.Очистить();
	
	НовСтрокаДетали = Дерево.Строки.Добавить();
	НовСтрокаДетали.Показатель = "Местоположение";

	НовСтрокаДетали = Дерево.Строки.Добавить();
	НовСтрокаДетали.Показатель = "Крайнее сообщение";
	НовСтрокаДетали.Значение = ?(НачалоДня(ТекущаяДата())=НачалоДня(Данные.АктуальностьДанных),
		Формат(Данные.АктуальностьДанных,"ДФ=HH:mm:ss"),
		Формат(Данные.АктуальностьДанных,"ДФ='dd.MM.yyyy HH:mm:ss'")) ;
	НовСтрокаДетали.Терминал = Данные.Терминал;	
	
	ЗапросПитание = Новый Запрос();
	ЗапросПитание.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ItobДанныеДатчиков.Значение < ItobДанныеДатчиков.Терминал.Модель.МинимальноеЗначениеОсновногоПитания
	|			ТОГДА ""Резервное""
	|		ИНАЧЕ ""Основное""
	|	КОНЕЦ КАК Питание
	|ИЗ
	|	РегистрСведений.ItobДанныеДатчиков КАК ItobДанныеДатчиков
	|ГДЕ
	|	ItobДанныеДатчиков.Период = &Период
	|	И ItobДанныеДатчиков.Терминал = &Терминал
	|	И ItobДанныеДатчиков.Датчик = ItobДанныеДатчиков.Терминал.Модель.ОсновноеПитание
	|			И ItobДанныеДатчиков.Терминал.Модель.МинимальноеЗначениеОсновногоПитания <> 0";
	ЗапросПитание.УстановитьПараметр("Период", Данные.ПериодUTC0);
	ЗапросПитание.УстановитьПараметр("Терминал", Данные.Терминал);
	РезультатЗапросПитание = ЗапросПитание.Выполнить().Выбрать();;
	Если РезультатЗапросПитание.Следующий() Тогда
		
		НовСтрокаДетали = Дерево.Строки.Добавить();
		НовСтрокаДетали.Показатель = "Питание";
		НовСтрокаДетали.Значение = РезультатЗапросПитание.Питание;
	КонецЕсли;	
	
	НовСтрокаДетали = Дерево.Строки.Добавить();
	НовСтрокаДетали.Показатель = "Скорость";
	НовСтрокаДетали.Значение = ""+Данные.Скорость+" км/ч";
	НовСтрокаДетали.Терминал = Данные.Терминал;	
		
	НовСтрокаДетали = Дерево.Строки.Добавить();
	НовСтрокаДетали.Показатель = "Направление";
	НовСтрокаДетали.Значение = ""+Данные.Направление+"°";
	НовСтрокаДетали.Терминал = Данные.Терминал;	
	
	НовСтрокаДетали = Дерево.Строки.Добавить();
	НовСтрокаДетали.Показатель = "Терминал";
	НовСтрокаДетали.Значение = Данные.Терминал;
	НовСтрокаДетали.Терминал = Данные.Терминал;	
	
	СтрокаДатчики = Дерево.Строки.Добавить();
	СтрокаДатчики.Показатель = "Датчики";
	
	// Датчики
	ЗапросДатчики = Новый Запрос("ВЫБРАТЬ
	                             |	ВложенныйЗапрос.Назначение КАК Показатель,
	                             |	ВЫБОР
	                             |		КОГДА ВложенныйЗапрос.ТипДатчика = ЗНАЧЕНИЕ(Перечисление.ItobТипыДатчиков.Дискретный)
	                             |				И (НЕ ItobНазначенияДатчиковРасшифровкаПоказаний.Расшифровка ЕСТЬ NULL )
	                             |			ТОГДА ItobНазначенияДатчиковРасшифровкаПоказаний.Расшифровка
	                             |		ИНАЧЕ ВложенныйЗапрос.Значение
	                             |	КОНЕЦ КАК Значение,
	                             |	ВложенныйЗапрос.ТипДатчика,
	                             |	ВложенныйЗапрос.КалибровочныйГрафик,
	                             |	ВложенныйЗапрос.Значение КАК ЗначениеДатчика,
	                             |	ВложенныйЗапрос.Терминал,
	                             |	ВложенныйЗапрос.Датчик
	                             |ИЗ
	                             |	(ВЫБРАТЬ
	                             |		ItobТерминалыДатчики.Датчик.ТипДатчика КАК ТипДатчика,
	                             |		ItobДанныеДатчиков.Датчик КАК Датчик,
	                             |		ItobДанныеДатчиков.Значение КАК Значение,
	                             |		ItobТерминалыДатчики.Назначение КАК Назначение,
	                             |		ItobТерминалыДатчики.КалибровочныйГрафик КАК КалибровочныйГрафик,
	                             |		ItobТерминалыДатчики.Ссылка КАК Терминал
	                             |	ИЗ
	                             |		Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	                             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobДанныеДатчиков КАК ItobДанныеДатчиков
	                             |			ПО ItobТерминалыДатчики.Датчик = ItobДанныеДатчиков.Датчик
	                             |	ГДЕ
	                             |		ItobДанныеДатчиков.Период = &Период
	                             |		И ItobДанныеДатчиков.Терминал = &Терминал
	                             |		И ItobТерминалыДатчики.Ссылка = &Терминал) КАК ВложенныйЗапрос
	                             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobНазначенияДатчиков.РасшифровкаПоказаний КАК ItobНазначенияДатчиковРасшифровкаПоказаний
	                             |		ПО ВложенныйЗапрос.Назначение = ItobНазначенияДатчиковРасшифровкаПоказаний.Ссылка
	                             |			И ВложенныйЗапрос.Значение = ItobНазначенияДатчиковРасшифровкаПоказаний.Показание");		
	ЗапросДатчики.УстановитьПараметр("Период", Данные.ПериодUTC0);
	ЗапросДатчики.УстановитьПараметр("Терминал", Данные.Терминал);
	ВыборкаДатчики = ЗапросДатчики.Выполнить().Выбрать();
	Пока ВыборкаДатчики.Следующий() Цикл
		НовСтрокаДатчики = СтрокаДатчики.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаДатчики, ВыборкаДатчики);
		НовСтрокаДатчики.Объект = Данные.Объект;
		
		Если ЗначениеЗаполнено(ВыборкаДатчики.КалибровочныйГрафик) Тогда
			
			НовСтрокаДатчики.Значение = "Неопределено";
			Для п = 0 По ВыборкаДатчики.КалибровочныйГрафик.Показатели.Количество()-2 Цикл
				Если ВыборкаДатчики.ЗначениеДатчика >= ВыборкаДатчики.КалибровочныйГрафик.Показатели[п].Вход
					И ВыборкаДатчики.ЗначениеДатчика <= ВыборкаДатчики.КалибровочныйГрафик.Показатели[п+1].Вход Тогда
					
					СтрКалиб1 = ВыборкаДатчики.КалибровочныйГрафик.Показатели[п];
					СтрКалиб2 = ВыборкаДатчики.КалибровочныйГрафик.Показатели[п+1];
					
					Преобразование = (СтрКалиб1.Выход-СтрКалиб2.Выход)/(СтрКалиб1.Вход-СтрКалиб2.Вход)*ВыборкаДатчики.ЗначениеДатчика
						+ (СтрКалиб1.Вход*СтрКалиб2.Выход-СтрКалиб2.Вход*СтрКалиб1.Выход)/(СтрКалиб1.Вход-СтрКалиб2.Вход);
					НовСтрокаДатчики.Значение = ""+Окр(Преобразование,1);
				
				КонецЕсли; 
			
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаДатчики.Строки.Количество() = 0 Тогда
		Дерево.Строки.Удалить(СтрокаДатчики);	
	
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДатчиков");	

КонецПроцедуры // ОбновитьДеревоДеталей()

// Процедура изменяет подменю местоположения.
//
&НаСервере
Процедура ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты)

	ВыбраннаяКнопка = Неопределено;
	Счетчик = 1;
	Для каждого ТекущаяКнопка Из Элементы.ПодменюВыборКарты.ПодчиненныеЭлементы Цикл
		
		Если Счетчик = НомерВыбраннойКарты Тогда
		
			ВыбраннаяКнопка = ТекущаяКнопка;
			ТекущаяКнопка.Пометка = Истина;
			
		Иначе
			ТекущаяКнопка.Пометка = Ложь;
		
		КонецЕсли;
				
		Счетчик = Счетчик+1;
	
	КонецЦикла;
		
	ТекущееМестоположение = Справочники.ItobМестоположенияПоУмолчанию.НайтиПоКоду(Сред(ВыбраннаяКнопка.Имя, 3));
	ТекущийМасштаб = ТекущееМестоположение.Масштаб;
	ТекущаяШирота = ТекущееМестоположение.Широта;
	ТекущаяДолгота = ТекущееМестоположение.Долгота;
	
КонецПроцедуры // ИзменитьПодменюВыбораМестоположенияНаСервере()

// Процедура очищает и заполняет новые координаты геозоны.
//
&НаСервере
Процедура ЗаписатьНовыеКоординатыТочекГеозоны(ГеозонаСсылка, НовыеКоординаты)
	
	ГеозонаОбъект = ГеозонаСсылка.ПолучитьОбъект();
	ГеозонаОбъект.Точки.Очистить();
	
	Для п = 1 По СтрЧислоСтрок(НовыеКоординаты) Цикл
		СтрокаКоординат = СтрПолучитьСтроку(НовыеКоординаты,п);
		СтрокаКоординат = СтрЗаменить(СтрокаКоординат,",",Символы.ПС);
		НовСтрокаТочки = ГеозонаОбъект.Точки.Добавить();
		НовСтрокаТочки.Долгота = Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,1)));
		НовСтрокаТочки.Широта = Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,2)));
	
	КонецЦикла;
	
	ГеозонаОбъект.Записать();

КонецПроцедуры // ЗаписатьНовыеКоординатыТочекГеозоны()

// по текущему объекту определяем местоположение
//
&НаКлиенте
Процедура ОпределитьИЗаполнитьМестоположение()
		
	Если НЕ Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные = Неопределено Тогда
		
		Терминал = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.Терминал;  
		ОпределитьИЗаполнитьМестоположениеСервер(Терминал);

	КонецЕсли;
	
КонецПроцедуры // ОпределитьИЗаполнитьМестоположение()

// Определяем текущее местоположение по терминалу и заполняем его в дереве деталей
//
&НаСервере
Процедура ОпределитьИЗаполнитьМестоположениеСервер(Терминал)
		
	ВыборкаКоординатыОбъекта = РегистрыСведений.ItobАктуальностьДанныхТерминалов.Выбрать(Новый Структура("Терминал", Терминал));
	Если ВыборкаКоординатыОбъекта.Следующий() Тогда
		
		Местоположение = ItobОперативныйМониторинг.НайтиБлижайшийАдрес(ВыборкаКоординатыОбъекта.Широта, ВыборкаКоординатыОбъекта.Долгота);
		ЭлементыДереваДатчиков = ДеревоДатчиков.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДереваДатчиков Цикл
			Если Элемент.Показатель = "Местоположение" Тогда
				Элемент.Значение = Местоположение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьИЗаполнитьМестоположениеСервер()

// Функция возвращает строку переведенного числа из 10-ой системы счисления.
//
&НаСервере
Функция Из_10_В_Любую(Знач Значение=0,Нотация=36)
	
	Если Значение=0 Тогда
		Результат = "00";
	Иначе
		Результат="";
		Пока Значение>0 Цикл
			Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%Нотация+1,1)+Результат;
			Значение=Цел(Значение/Нотация);
		КонецЦикла;
		Результат = ?(СтрДлина(Результат)=1,"0","")+Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // Из_10_В_Любую()

// Функция возвращает текст скрипта отображения маршрута объектов.
//
&НаСервере
Функция ПолучитьСкриптМаршрутыОбъектов(МассивОбъектов, НачДата, КонДата)
    	
	ТекстСкрипта = "";
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект = МассивОбъектов[ИндексМассива];
						
		Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(ТекущийОбъект, НачДата, КонДата);
		Если Маршрут.Количество() = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		ТекстСкрипта = ТекстСкрипта + "
		    |
			|var find_lays2 = m_map.getLayersByName(""PlayRouteFeatures"");
			|var vectorLayer2 = null;
			|if (find_lays2.length == 0) {
			|	vectorLayer2 = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
			|	m_map.addLayer(vectorLayer2);
			|} else {
			|	vectorLayer2 = find_lays2[0];
			|	vectorLayer2.destroyFeatures();
			|}
			|
			|var pointList = [];
			|var pt = null;
			|var Features = [];
			|var find_lays2 = m_map.getLayersByName(""Markers"");
			|var markers = null;
			|if (find_lays2.length == 0) {
			|	markers = new OpenLayers.Layer.Markers( ""Markers"" , {displayInLayerSwitcher: false});			
			|	m_map.addLayer(markers);
			|}
			|else {markers = find_lays2[0];}
			|var ParckFeatures = [];";
			
		Попытка
		
			ЦветМаршрута = ItobОбщегоНазначенияКлиентСервер.ПолучитьЦветПоЗначениюХранения(
				ТекущийОбъект.ЦветМаршрутаНаКарте);	
		
		Исключение
			
			ЦветМаршрута = Новый Цвет(50, 225, 50);
			
		КонецПопытки;		
		
		ВебЦветМаршрута = Из_10_В_Любую(ЦветМаршрута.Красный,16)+Из_10_В_Любую(ЦветМаршрута.Зеленый,16)+Из_10_В_Любую(ЦветМаршрута.Синий,16);
		
		НомСтоянки = 1;
		
		Для п = 0 По Маршрут.Количество()-1 Цикл
			
			Если Маршрут[п].Долгота = Неопределено
				ИЛИ Маршрут[п].Широта = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если Маршрут[п].Долгота = 0
				ИЛИ Маршрут[п].Широта = 0 Тогда
			
				Продолжить;
			
			КонецЕсли;
						
			ТекстСкрипта = ТекстСкрипта+"
				|pt = new OpenLayers.LonLat("+Формат(Маршрут[п].Долгота,"ЧРД=.; ЧН=0")+
					", "+Формат(Маршрут[п].Широта,"ЧРД=.; ЧН=0")+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));";			
			
			Если Маршрут[п].Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка Тогда
					
					ПолныеДаты = НачалоДня(Маршрут[п].Период) <> НачалоДня(Маршрут[п].ПериодКон);
					Строка1 = "Стоянка № "+НомСтоянки+" ("+ItobОперативныйМониторинг.ПредставлениеВремени(Окр((Маршрут[п].ВремяСтоянки-'00010101')/60)*60)+")";
			    	Строка2 = "Адрес: "+ItobОперативныйМониторинг.НайтиБлижайшийАдрес(Маршрут[п].Широта,Маршрут[п].Долгота);			
					Строка3 = "С "+Формат(Маршрут[п].Период, ?(ПолныеДаты,"ДФ='dd.MM.yy HH:mm'","ДФ=HH:mm"))
	    			+" по "+Формат(Маршрут[п].ПериодКон, ?(ПолныеДаты,"ДФ='dd.MM.yy HH:mm'","ДФ=HH:mm"));
	                				
					НадписьHTML = 
					"<div style=""font:Courier New; font-size:12px; width:190px; height:90px; text-align:left; word-wrap:break-word;""><b>"+
					
					Строка1+"</b><br />"+
					Строка2+"<br />"+
					Строка3+"</div>";
					
						
			    	ТекстСкрипта = ТекстСкрипта+"
					|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Маршрут[п].Долгота)+
						", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Маршрут[п].Широта)+");
					|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
	                |var size = new OpenLayers.Size(23,23);
					|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
				    |var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"images/parking.png',size,offset);
					|
					|marker = new OpenLayers.Marker(pt,icon);
					|
					|marker.events.on({
					|	""mousedown"": function(event) { 
				    |					
					|if (this.popup == null) {

					|	var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Маршрут[п].Долгота)+
					", "+ ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(Маршрут[п].Широта)+");
					|	pt.transform(m_map.displayProjection, m_map.getProjectionObject());
					|	
					|     this.popup = new OpenLayers.Popup(""chicken"",
					|	   pt,
					|	   new OpenLayers.Size(200,100),
					|	   '"+НадписьHTML+"'"+",
					|	   true);
					|     m_map.addPopup(this.popup);
					|     this.popup.show();
					| } else {
					|     this.popup.toggle();
					| }
					| currentPopup = this.popup;
					| OpenLayers.Event.stop(event);
					|	}
					|   
					|});
					|	markers.addMarker(marker);
	                |";
								
				НомСтоянки = НомСтоянки+1;		
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстСкрипта = ТекстСкрипта+"
			|var LineString = new OpenLayers.Geometry.LineString(pointList);
			|var lineFeature = new OpenLayers.Feature.Vector(
			|                LineString,null,{
			|                strokeColor: ""#"+ВебЦветМаршрута+""",
			|                strokeWidth: 5,
			|				 strokeOpacity: 0.8,
			|                strokeDashstyle: ""solid"",
			|				 strokeLinecap: ""round"",
			|                pointRadius: 6,
			|                pointerEvents: ""visiblePainted""
			|});
			|var find_lays = m_map.getLayersByName(""Geometry"");
			|var vectorLayer = null;
			|if (find_lays.length == 0) {
			|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
			|	m_map.addLayer(vectorLayer);
			|}
			|else {vectorLayer = find_lays[0];}
			|Features.push(lineFeature);
			|vectorLayer.addFeatures(Features);
			|vectorLayer.addFeatures(ParckFeatures);
		    |//m_map.zoomToExtent(LineString.getBounds());
			|//===================================================";			
	
	КонецЦикла;
	
	
	Возврат ТекстСкрипта;		

КонецФункции // ПолучитьСкриптМаршрутыОбъектов

&НаСервере
Функция ПолучитьСкриптЗаправкиИСливы(МассивОбъектов, НачДата, КонДата)
    	
	ТекстСкрипта = "";
		
	Возврат ТекстСкрипта;		

КонецФункции

// Функция возвращает текст скрипта отображения геозоны
//
&НаСервере
Функция ПолучитьСкриптОтображенияГеозоныСервер(ГеозонаСсылка, Автомасштаб)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ГеозонаСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическиеЗоныТочки.Широта,
	               |	ItobГеографическиеЗоныТочки.Долгота
	               |ИЗ
	               |	Справочник.ItobГеографическиеЗоны.Точки КАК ItobГеографическиеЗоныТочки
	               |ГДЕ
	               |	ItobГеографическиеЗоныТочки.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ItobГеографическиеЗоныТочки.НомерСтроки";
	
	ТаблицаВершинПолигона = Запрос.Выполнить().Выгрузить();
	
	ТекстСкрипта = 
		"var pointList = [];
		|var pt = null;
		|destroy_geozones_control();
		|create_geozones_control();";		

	Для п = 0 По ТаблицаВершинПолигона.Количество()-1 Цикл		
		ТекстСкрипта = ТекстСкрипта+"
			|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТаблицаВершинПолигона[п].Долгота)+
				", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТаблицаВершинПолигона[п].Широта)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));";
	
	КонецЦикла;
	
	ТекстСкрипта = ТекстСкрипта+"
		|geozones_control.handler.setPoints(pointList);";		
	
	// Автомасштаб
	Если Автомасштаб И (ТаблицаВершинПолигона.Количество() > 0) Тогда
		ТекстСкрипта = ТекстСкрипта + "
			|m_map.zoomToExtent(geozones_control.handler.polygon.geometry.getBounds());";
	
	КонецЕсли;
		
	Возврат ТекстСкрипта;	

КонецФункции // ПолучитьСкриптОтображенияГеозоныСервер()

// Функция возвращает структуру с точками оптимизированного маршрута.
//
&НаСервере
Функция РасчитатьМаршрутНаСервере(МассивТочек, Оптимизация)

	ТаблицаТочек = Новый ТаблицаЗначений;
	ТаблицаТочек.Колонки.Добавить("Широта");
	ТаблицаТочек.Колонки.Добавить("Долгота");
	
	Для п = 0 По МассивТочек.Количество()/2 -1  Цикл			
		НовСтрока  = ТаблицаТочек.Добавить();
		НовСтрока.Широта  = МассивТочек[п*2];
		НовСтрока.Долгота = МассивТочек[п*2+1];
			
	КонецЦикла;
	
	ТекстОшибки = "";
	
	ТаблицаРассчитанногоМаршрута = ItobРаботаСКартой.РассчитатьМаршрутCloudMade(ТаблицаТочек, ТекстОшибки, Оптимизация);
	
	СтруктураРезультата = Новый Структура("ТочкиМаршрута,ТекстОшибки,ОписаниеДеталейМаршрута", Неопределено, ТекстОшибки, "");
	
	Если ТекстОшибки <> "" ИЛИ ТаблицаРассчитанногоМаршрута = Неопределено Тогда
		Возврат СтруктураРезультата;
	
	КонецЕсли;
	
	МассивМаршрутныхТочек = Новый Массив;
	
	ОбщРасстояние = 0;
	ОбщВремя = 0;
	
	Для каждого СтрТаб Из ТаблицаРассчитанногоМаршрута Цикл
		Для каждого СтрPath Из СтрТаб.Path Цикл
			МассивМаршрутныхТочек.Добавить(СтрPath.Lat);
			МассивМаршрутныхТочек.Добавить(СтрPath.Lon);
		
		КонецЦикла;
		
		ОбщРасстояние = ОбщРасстояние + СтрТаб.Length;
		ОбщВремя = ОбщВремя + СтрТаб.Duration;
	
	КонецЦикла;
	
	Если МассивМаршрутныхТочек.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	
	КонецЕсли;
	
	ТекстДеталиМаршрута = "Длина пути "+Окр(ОбщРасстояние/1000,1)+"км, время "+ItobОперативныйМониторинг.ПредставлениеВремени(ОбщВремя,Ложь);
	
	СтруктураРезультата.ТочкиМаршрута = МассивМаршрутныхТочек;
	СтруктураРезультата.ОписаниеДеталейМаршрута = ТекстДеталиМаршрута;
	
	Возврат СтруктураРезультата;	

КонецФункции // РасчитатьМаршрутНаСервере()

// Функция возвращает скрипт для проигрывания маршрута
//
&НаСервере
Функция ПолучитьСкриптПроигратьМаршруты(МассивОбъектов, НачДата, КонДата)
    	
	ТекстСкрипта = 
		"routes_list = [];
		|var pt = null;";
		
	МаксЧислоСекунд = 0;	
	
	Для ИндексМассива = 0 По МассивОбъектов.Количество()-1 Цикл
		ТекущийОбъект = МассивОбъектов[ИндексМассива];
						
		Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(ТекущийОбъект, НачДата, КонДата);
		Если Маршрут.Количество() = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		ТекстСкрипта = ТекстСкрипта + "
			|var CurrentRoute = [];";
		
		Для п = 0 По Маршрут.Количество()-1 Цикл
			
			Если Маршрут[п].Долгота = Неопределено
				ИЛИ Маршрут[п].Широта = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ЧислоСекундСНачалаМаршрута = МАКС(Маршрут[п].Период-НачДата,0);
			МаксЧислоСекунд = МАКС(МаксЧислоСекунд,ЧислоСекундСНачалаМаршрута);
			
			ТекстСкрипта = ТекстСкрипта+"
				|pt = new OpenLayers.LonLat("+Формат(Маршрут[п].Долгота,"ЧРД=.; ЧН=0")+
					", "+Формат(Маршрут[п].Широта,"ЧРД=.; ЧН=0")+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|CurrentRoute.push([pt, "+Формат(ЧислоСекундСНачалаМаршрута,"ЧН=0; ЧГ=0")+",'"+Формат(Маршрут[п].Период,"ДФ='dd.MM.yy HH:mm:ss'")+"']);";			
			
		КонецЦикла;
		
		ТекстСкрипта = ТекстСкрипта+"
			|routes_list.push(CurrentRoute);";					
	
	КонецЦикла;
	
	ТекстСкрипта = ТекстСкрипта+"
		|var find_lays = m_map.getLayersByName(""PlayRouteFeatures"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|	//m_map.setLayerIndex(vectorLayer,0);
		|} else {
		|	vectorLayer = find_lays[0];
		|}
		|
		|vectorLayer.destroyFeatures();
		|											
		|if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|	play_route_intervalid = null;
		|}
		|				
		|
		|var LayerFeatures = [];
		|
		|routes_list_pos = [];
		|for (var i = 0, len = routes_list.length; i < len; i++) {
		|						
		|	pt = routes_list[i][0][0];					
		|	
		|	var pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
		|						graphicWidth: 21,
		|	                    graphicHeight: 25,
		|	                    graphicXOffset: -10,
		|	                    graphicYOffset: -25,
		|	                    externalGraphic: """+ВебСсылкаСервер+"img/marker-gold.png"",
		|	                    graphicOpacity: 1,
		|	                    fontSize: ""11px"",
		|	                    fontWeight: ""normal"",
		|	                    fontColor: ""0000ff"",
		|	                    labelYOffset: 12,
		|	                    labelXOffset: 12,
		|						labelAlign: ""lm"",
		|						labelHTMLFormat: true,				
		|	                    label : """"
		|	});
		|	LayerFeatures.push(pointFeature);
		|	
		|	routes_list_pos.push([0, pointFeature]);
		|}
		|
		|vectorLayer.addFeatures(LayerFeatures);
		|
		|play_route_sec = 0;
		|play_route_max = "+Формат(МаксЧислоСекунд,"ЧН=0; ЧГ=0")+";
		|play_route_k = "+Формат(КоэффициентУскоренияПроигрываниеМаршрута,"ЧН=0; ЧГ=0")+";
		|play_route_start_date = new Date("+Формат(Год(НачДата),"ЧГ=0")+","+Формат(Месяц(НачДата)-1,"ЧН=0; ЧГ=0")+","+День(НачДата)+","+Час(НачДата)+","+Минута(НачДата)+","+Секунда(НачДата)+",0);
		|play_route_pause = false;
		|play_route_intervalid = setInterval(PlayRouteHandlier, 100);		
		|";	
	
	Возврат ТекстСкрипта;		

КонецФункции // ПолучитьСкриптПроигратьМаршруты


// Установка пометки подчиненных элементов дерева.
//
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(СтрокаРодитель, ТекстАлгоритма, Параметры) Экспорт

	Пометка     = СтрокаРодитель.Пометка;
	Подчиненные = СтрокаРодитель.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого ТекСтрока из Подчиненные Цикл
            Отказ = Ложь;
			Если НЕ ПустаяСтрока(ТекстАлгоритма) Тогда
				Выполнить(ТекстАлгоритма);
			КонецЕсли;
			Если НЕ Отказ Тогда
				ТекСтрока.Пометка = Пометка;
			КонецЕсли;
			
			УстановитьПометкиПодчиненных(ТекСтрока, ТекстАлгоритма, Параметры);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Установка пометки родителей дерева.
//
&НаКлиенте
Процедура УстановитьПометкиРодителей(Родитель) Экспорт

	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	ВложенныеЭлементыСтроки = Родитель.ПолучитьЭлементы();
	
	Если ВложенныеЭлементыСтроки.Количество() > 0 Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для Каждого Строка из ВложенныеЭлементыСтроки Цикл
	        Если Строка.Пометка = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка.Пометка = 1 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Пометка = 2;
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			Пометка = 1;
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			Пометка = 0;
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			Пометка = 2;
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	УстановитьПометкиРодителей(Родитель.ПолучитьРодителя());
	
КонецПроцедуры // УстановитьПометкиРодителей()

// Установка пометок.
//
&НаКлиенте
Процедура УстановитьПометки(ТекущиеДанные, ТекстАлгоритма = "", Параметры = Неопределено) Экспорт

	Если НЕ ПустаяСтрока(ТекстАлгоритма) Тогда
        Отказ = Ложь;
		Выполнить(ТекстАлгоритма);
		Если Отказ Тогда
			ТекущиеДанные.Пометка = 0;
		КонецЕсли;
	КонецЕсли;

	УстановитьПометкиПодчиненных(ТекущиеДанные, ТекстАлгоритма, Параметры);
	УстановитьПометкиРодителей(ТекущиеДанные);

КонецПроцедуры // УстановитьПометки()

// Процедура заполняет массив подчиненных строк дерева объектов.
//
&НаКлиенте
Процедура СобратьОтмеченныеОбъектыДерева(Родитель, МассивОбъектов)
	
	Для каждого СтрокаДерева Из Родитель.ПолучитьЭлементы() Цикл
		Если (СтрокаДерева.Пометка = 1) И (НЕ СтрокаДерева.ЭтоГруппа) Тогда
			МассивОбъектов.Добавить(СтрокаДерева);	
			
		ИначеЕсли СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			СобратьОтмеченныеОбъектыДерева(СтрокаДерева, МассивОбъектов);	
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // СобратьОтмеченныеОбъектыДерева()

// Действия при изменении флажка дерева объектов.
//
&НаКлиенте
Процедура ПриИзмененииФлажкаДереваОбъектов(ТекущиеДанные)
		
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	
	КонецЕсли;
	
	ТекстАлгоритма = "Отказ = Ложь;";
	
	УстановитьПометки(ТекущиеДанные, ТекстАлгоритма, Истина);

КонецПроцедуры // ПриИзмененииФлажкаДереваОбъектов()

// Процедура изменяет пометки дерева объектов.
//
&НаКлиенте
Процедура ИзменитьПометкиДереваОбъектов(ЭлементДерево, НовЗначение)
	
	Для Каждого СтрокаДерева Из ЭлементДерево.ПолучитьЭлементы() Цикл
		СтрокаДерева.Пометка = НовЗначение;
		УстановитьПометки(СтрокаДерева, "", Истина);	
	КонецЦикла;

КонецПроцедуры // ИзменитьПометкиДереваОбъектов()

// Процедура разворачивает дерево объектов маршрута.
//
&НаКлиенте
Процедура РазвернутьДеревоОбъектовМаршруты()
    	
	ЭлементыДерева = ДеревоОбъектовМониторинга.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл

		Элементы.ДеревоОбъектовМаршруты.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		Элементы.ДеревоОбъектовМониторинга.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры // РазвернутьДеревоОбъектовМаршруты()

// Процедура разворачивает дерево объектов мониторинга.
//
&НаКлиенте
Процедура РазвернутьДеревоОбъектовМониторинга()
    	
	ЭлементыДерева = ДеревоОбъектовМониторинга.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл

		Элементы.ДеревоОбъектовМаршруты.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		Элементы.ДеревоОбъектовМониторинга.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры // РазвернутьДеревоОбъектовМониторинга()

//Процедура выполняет скрипт на поле HTML, с учетом вида браузера.
//
&НаКлиенте
Процедура ВыполнитьСкрипт(ТекстСкрипта)
			
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);		

КонецПроцедуры // ВыполнитьСкрипт()

// Функция возвращает признак загрузки HTML документа.
//
&НаКлиенте
Функция КартаЗагружена() Экспорт
	
	ТекстСкрипта = 
		"try {
		|	document.form.result.value = mapLoaded;
		|}
		|catch(err) {}";
		
	Результат = Ложь;
	Попытка
		ВыполнитьСкрипт(ТекстСкрипта);
		Результат = НРег(Элементы.ПолеHTML.Документ.form.result.value) = "true";
	Исключение	
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // КартаЗагружена()

// Функция возвращает имя файла иконки для обозначения объекта
//
&НаКлиенте
Функция ПолучитьИмяИконки(ЗначениеХранения)

	СоответствиеИмен = Новый Соответствие;
	СоответствиеИмен.Вставить("ItobИконкаАвтомобильЛегковой", "car.png");
	СоответствиеИмен.Вставить("ItobИконкаАвтомобильЗеленый", "car_green.png");
	СоответствиеИмен.Вставить("ItobИконкаАвтомобильСпортивный", "sportcar.png");
	СоответствиеИмен.Вставить("ItobИконкаВертолет", "heli.png");
	СоответствиеИмен.Вставить("ItobИконкаВрач", "doctor.png");
	СоответствиеИмен.Вставить("ItobИконкаГрузовик", "truck.png");
	СоответствиеИмен.Вставить("ItobИконкаГрузовикЖелтый", "truck_yel.png");
	СоответствиеИмен.Вставить("ItobИконкаКабриолет", "cabri.png");
	СоответствиеИмен.Вставить("ItobИконкаКорабль", "ship.png");
	СоответствиеИмен.Вставить("ItobИконкаМикроавтобус", "micbus.png");
	СоответствиеИмен.Вставить("ItobИконкаМилиционер", "policeman.png");
	СоответствиеИмен.Вставить("ItobИконкаМилиция", "police.png");
	СоответствиеИмен.Вставить("ItobИконкаПожарнаяМашина", "fire.png");
	СоответствиеИмен.Вставить("ItobИконкаСкораяПомощь", "ambulance.png");
	СоответствиеИмен.Вставить("ItobИконкаЧеловек", "man.png");
	
	Если ПустаяСтрока(ЗначениеХранения) Тогда
		Возврат "truck.png";	
		
	Иначе
		Возврат СоответствиеИмен[ЗначениеХранения];		
	
	КонецЕсли; 

КонецФункции // ПолучитьИмяИконки()

// Отображает на карте текущие объекты мониторинга
//
&НаКлиенте
Процедура ПоказатьНаКартеТекущиеОбъекты(ОбновитьТолькоЦентрКарты=Ложь) 
	
	Если НЕ КартаЗагружена() Тогда
		Возврат;
	
	КонецЕсли;
	
	Если ТекущийРежим <> 0 Тогда
		Возврат;
	
	КонецЕсли;
	
	ТекстСкрипта = "";
	
	Если НЕ ОбновитьТолькоЦентрКарты Тогда
		
		МассивОтмеченныхСтрок = Новый Массив;
		СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);
		
		ТекстСкрипта = ТекстСкрипта + "
			|var find_lays = m_map.getLayersByName(""Geometry"");
			|var vectorLayer = null;
			|if (find_lays.length == 0) {
			|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
			|	m_map.addLayer(vectorLayer);
			|}
			|else {vectorLayer = find_lays[0];}
			|vectorLayer.destroyFeatures();
			|var Features = new Array;	
			|";
			
		Для каждого СтрокаОбъектов Из МассивОтмеченныхСтрок Цикл
			
			Если СтрокаОбъектов.Широта = 0
				ИЛИ СтрокаОбъектов.Долгота = 0 Тогда
				
			    Продолжить;
			
			КонецЕсли;
										
			Если СтрДлина(СтрокаОбъектов.КрайниеТочки) > 0 Тогда
				Для НомСтроки = 1 По СтрЧислоСтрок(СтрокаОбъектов.КрайниеТочки) Цикл
					ТекСтрока = СтрЗаменить(СтрПолучитьСтроку(СтрокаОбъектов.КрайниеТочки,НомСтроки), Символы.Таб, Символы.ПС);
					
					Угол = 30*Окр(Число(?(СтрПолучитьСтроку(ТекСтрока,3)="",0,СтрПолучитьСтроку(ТекСтрока,3)))/30,0);
					Угол = ?(Угол=360,0,Угол);
					
					ТекстСкрипта = ТекстСкрипта+"				
						|pt = new OpenLayers.LonLat("+СтрПолучитьСтроку(ТекСтрока,2)+
							", "+СтрПолучитьСтроку(ТекСтрока,1)+");
						|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
						|pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
						|					 graphicWidth: 16,
						|                    graphicHeight: 16,
						|                    graphicXOffset: -8,
						|                    graphicYOffset: -8,
						|                    externalGraphic: """+ВебСсылкаСервер+"images/pt_"+Угол+".gif"",
						|                    graphicOpacity: 1		
						|});				
						|Features.push(pointFeature);";
				
				КонецЦикла;							
			
			КонецЕсли;
			
			ТекстСкрипта = ТекстСкрипта+"
				|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Долгота)+
					", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(СтрокаОбъектов.Широта)+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());			
				|var pointFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pt.lon, pt.lat),null,{
				|					 graphicWidth: 24,
				|                    graphicHeight: 24,
				|                    graphicXOffset: -12,
				|                    graphicYOffset: -12,
				|                    externalGraphic: """+ВебСсылкаСервер+"images/"+ПолучитьИмяИконки(СтрокаОбъектов.ИконкаНаКарте)+""",
				|                    graphicOpacity: 1,
				|                    fontSize: ""13px"",
				|                    fontWeight: ""bold"",
				|                    fontColor: ""ff0000"",
				|                    labelYOffset: -13,
				|                    label : """+СокрЛП(СтрокаОбъектов.Объект)+"""
				|});			
				|Features.push(pointFeature);";
					
			
		КонецЦикла;

		ТекстСкрипта = ТекстСкрипта+"
			|
			|vectorLayer.addFeatures(Features);
			|";		
	
	КонецЕсли;
		
	ТекущиеДанные = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если НЕ (ТекущиеДанные.ЭтоГруппа ИЛИ ТекущиеДанные.Пометка = 0
			ИЛИ ТекущиеДанные.Широта = 0 ИЛИ ТекущиеДанные.Долгота = 0) Тогда
			
			ТекстСкрипта = ТекстСкрипта+"
				|var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанные.Долгота)+
					", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущиеДанные.Широта)+");
				|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
				|m_map.setCenter(pt, m_map.getZoom());";			
	
		КонецЕсли;
	
	КонецЕсли;

	//Выполняем скрипт	
	Если Не ПустаяСтрока(ТекстСкрипта) Тогда
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;	

КонецПроцедуры // ПоказатьНаКартеТекущиеОбъекты()

// Процедура отображает точки геозоны.
//
&НаКлиенте
Процедура ПоказатьРеперыРедактируемойГеоЗоны(Автомасштаб=Истина)
	
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГеозонаСсылка = ТекущиеДанные.Ссылка;
	ТекстСкрипта = ПолучитьСкриптОтображенияГеозоныСервер(ГеозонаСсылка, Автомасштаб);
	ВыполнитьСкрипт(ТекстСкрипта);
	
КонецПроцедуры // ПоказатьРеперыРедактируемойГеоЗоны

// Функция возвращает список параметров отчета.
//
&НаКлиенте
Функция СобратьДанныеДляПостроенияОтчета()

	Если ТекущийРежим = 0 Тогда
		ИмяЭлемента = "ДеревоОбъектовМониторинга";
		НачалоОтчета = НачалоДня(ТекущаяДата());
		КонецОтчета = КонецДня(ТекущаяДата());
		
	Иначе
		ИмяЭлемента = "ДеревоОбъектовМаршруты";
		НачалоОтчета = Объект.ДатаНачала;
		КонецОтчета = Объект.ДатаОкончания;
	
	КонецЕсли;
	
	Если Элементы[ИмяЭлемента].ВыделенныеСтроки.Количество() > 1 Тогда
		Предупреждение(НСтр("ru = 'Для просмотра отчета выберите в списке только один объект.'"));
		Возврат Неопределено;
	КонецЕсли;
		
	ТекущиеДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Невозможно открыть отчет для выбранного объекта.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийОбъект  = ТекущиеДанные.Объект;
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(НачалоОтчета,"НачПериода");
	СписокПараметров.Добавить(КонецОтчета,"КонПериода");
	СписокПараметров.Добавить(ТекущийОбъект,"Объект");
			
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	ПараметрыОтчета.Вставить("Терминал", ТекущиеДанные.Терминал);
	
	Возврат ПараметрыОтчета;

КонецФункции // СобратьДанныеДляПостроенияОтчета()

// Обрабатывает добавление точки (щелчок мышки по карте).
//
&НаКлиенте
Процедура РежимРасчетаМаршрутаПриДобавленииТочки()
	
	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|vectorLayer.destroyFeatures();
		|
		|var find_lays2 = m_map.getLayersByName(""PlayRouteFeatures"");
		|var vectorLayer2 = null;
		|if (find_lays2.length == 0) {
		|	vectorLayer2 = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer2);
		|} else {
		|	vectorLayer2 = find_lays2[0];
		|	vectorLayer2.destroyFeatures();
		|}
		|
		|var find_lays2 = m_map.getLayersByName(""Markers"");
		|var markers = null;
		|if (find_lays2.length == 0) {
		|	markers = new OpenLayers.Layer.Markers(""Markers"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(markers);
		|	}
		|else {markers = find_lays2[0];}
		|markers.clearMarkers();
		|";
		
	Для п = 0 По мМассивТочекВыбора.Количество()/2 -1  Цикл			
		ТекущаяШирота  = мМассивТочекВыбора[п*2];
		ТекущаяДолгота = мМассивТочекВыбора[п*2+1];
		
		ТекстСкрипта = ТекстСкрипта+"
			|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+
				", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());	
			|var size = new OpenLayers.Size(23,26);
			|var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
			|var icon = new OpenLayers.Icon('"+ВебСсылкаСервер+"images/route_icon_"+Строка(п+1)+".png',size,offset);		
			|marker = new OpenLayers.Marker(pt,icon);
			|markers.addMarker(marker);";
			
	КонецЦикла;	
		
	ВыполнитьСкрипт(ТекстСкрипта);	
	
	Если мМассивТочекВыбора.Количество() >= 4 Тогда
		РасчитатьМаршрутИВывестиНаКарте(мМассивТочекВыбора);	
	КонецЕсли;
	
КонецПроцедуры // РежимРасчетаМаршрутаПриДобавленииТочки()

// Процедура расчитывает маршрут и выводит его на карту.
//
&НаКлиенте
Процедура РасчитатьМаршрутИВывестиНаКарте(ТочкиМаршрута)
				
	ОшибкаРасчета = "";
	ТекстДеталиМаршрута = "";
			
	Попытка
		СтруктураМаршрута = РасчитатьМаршрутНаСервере(ТочкиМаршрута, ?(СпособОптимизацииМаршрута = "Расстояние",1,0));
		ТочкиРассчитанногоМаршрута = СтруктураМаршрута.ТочкиМаршрута;
		ОшибкаРасчета = СтруктураМаршрута.ТекстОшибки;
		ТекстДеталиМаршрута = СтруктураМаршрута.ОписаниеДеталейМаршрута;
	
	Исключение		
		ОшибкаРасчета = "Ошибка расчета маршрута: "+ОписаниеОшибки();	
			
	КонецПопытки;
			
	Если ОшибкаРасчета <> "" ИЛИ ТочкиРассчитанногоМаршрута = Неопределено Тогда
		Сообщить("Ошибка рассчета маршрута: "+ОшибкаРасчета, СтатусСообщения.ОченьВажное);
		Возврат;
	
	КонецЕсли;
	
	// Выводим маршрут на карту
	
	ТекстСкрипта = 
		"var pointList = [];
		|var pt = null;
		|var Features = [];";	
	
	ВебЦветМаршрута = "7f98e6";
	
	Для п = 0 По ТочкиРассчитанногоМаршрута.Количество()/2 -1 Цикл		
						
		ТекстСкрипта = ТекстСкрипта+"
			|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТочкиРассчитанногоМаршрута[п*2+1])+
				", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТочкиРассчитанногоМаршрута[п*2])+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));";
			
	КонецЦикла;
		
	ТекстСкрипта = ТекстСкрипта+"
		|var LineString = new OpenLayers.Geometry.LineString(pointList);
		|var lineFeature = new OpenLayers.Feature.Vector(
		|                LineString,null,{
		|                strokeColor: ""#"+ВебЦветМаршрута+""",
		|                strokeWidth: 5,
		|				 strokeOpacity: 0.8,
		|                strokeDashstyle: ""solid"",
		|				 strokeLinecap: ""round"",
		|                pointRadius: 6,
		|                pointerEvents: ""visiblePainted""
		|});
		|var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|Features.push(lineFeature);
		|vectorLayer.addFeatures(Features);";	
		
	ВыполнитьСкрипт(ТекстСкрипта);	

КонецПроцедуры // РасчитатьМаршрутИВывестиНаКарте()

// Процедура обрабатывает масштабирование карты.
//
&НаКлиенте
Процедура АвтомасштабироватьКарту()
    	
	ТекстСкрипта = "";
	Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
		ТекстСкрипта = 
			"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(pt, "+Формат(ТекущийМасштаб,"ЧГ=0")+");
			|pt = null;";
	
	КонецЕсли;	
	
	Если ТекстСкрипта <> "" Тогда
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;

КонецПроцедуры // АвтомасштабироватьКарту()

// Процедура обрабатывает выбор карты и масштабирует по текущему масштабу.
//
&НаКлиенте
Процедура ОбработатьВыборКарты(НомерВыбраннойКарты)
	
	ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты);
		
	АвтомасштабироватьКарту();
	
КонецПроцедуры // ОбработатьВыборКарты()

// Процедура показывает панель географической карты,
// выполняя при этом необходимые проверки доступности сервиса CsmSvc
//
&НаСервере
Процедура ПоказатьГеографическуюКарту()

	АдресСервиса = Константы.ItobАдресСервисаCsmSvc.Получить();
	ОшибкаДоступаНаСервер = Ложь;
	ОписаниеОшибки = "";
	
	Если ПустаяСтрока(АдресСервиса) Тогда
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = "Ошибка отображения карты!
						 |В настройках системы не указан адрес сервиса CsmSvc!
						 |Воспользуйтесь мастером настройки службы CsmSvc.";
		
	ИначеЕсли НЕ ItobОперативныйМониторинг.ПроверитьДоступностьСервисаCsmSvc(АдресСервиса) Тогда
		ОшибкаДоступаНаСервер = Истина;
		ОписаниеОшибки = "Ошибка отображения карты!
						 |Cервис CsmSvc не доступен!
						 |Воспользуйтесь мастером настройки службы CsmSvc.";
						 
	КонецЕсли;
					 
	Если ОшибкаДоступаНаСервер Тогда
		Элементы.НадписьОшибкаОтображенияКарты.Заголовок = ОписаниеОшибки;
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["СтраницаОшибкиОтображенияКарты"];
		КартаДоступна = Ложь;
		
	Иначе
		ВебСсылкаСервер = "http://"+Константы.ItobАдресСервисаCsmSvc.Получить()+"/map/";
		
		АтрибутыКарты = "";
		// Необходимо установить координаты по умолчанию
		Если ТекущийМасштаб <> 0 И ТекущаяШирота <> 0 И ТекущаяДолгота <> 0 Тогда
			
			АтрибутыКарты = 
				"firstZoom = "+Формат(ТекущийМасштаб,"ЧГ=0")+";
				|firstLat = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяШирота)+";
				|firstLon = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекущаяДолгота)+";";			
			
		КонецЕсли;
			
		ИмяСлояПоУмолчанию = ПрочитатьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию");
		Если ЗначениеЗаполнено(ИмяСлояПоУмолчанию) Тогда
			АтрибутыКарты = АтрибутыКарты + "
				|firstLayerName = """+ИмяСлояПоУмолчанию+""";";
		
		КонецЕсли;
		
		ПолеHTML = ItobОперативныйМониторинг.ПолучитьАдресКарты(АтрибутыКарты);		
		
		Элементы.ГруппаГеоданные.ТекущаяСтраница = Элементы.ГруппаГеоданные.ПодчиненныеЭлементы["ГруппаКарта"];
		КартаДоступна = Истина;
	
	КонецЕсли;				 

КонецПроцедуры

// Показывает маршрут, обработчик расширофвки отчетов
//
&НаКлиенте
Процедура ПоказатьМаршрутПоСтруктуреДанных(СтруктураДанных)
	
	РежимРаботы = 1;
	
	НачатьРежимОтображенияМаршрута();
	
	Объект.ДатаНачала    = СтруктураДанных.НачПериода;
	Объект.ДатаОкончания = СтруктураДанных.КонПериода;
    	
	УстановитьПометкуДляОбъекта(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы()); 

	Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока = ПолучитьИдентификаторПоОбъекту(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(),0);
	
	Если КартаЗагружена() Тогда
	
		ПоказатьМаршрутыНаКарте(Неопределено);
		
	Иначе
		ВыполнитьОтложеннуюКоманду("ПоказатьМаршрутыНаКарте(Неопределено);");
	
	КонецЕсли;	
    	
КонецПроцедуры // ПоказатьМаршрутПоСтруктуреДанных()

// Функция возвращает идентификатор текущего объекта в дереве объектов.
//
&НаКлиенте
Функция ПолучитьИдентификаторПоОбъекту(Объект, ЭлементыДерева, НайденныйИдентификатор)
		
Рез = Ложь;

Для Каждого Элемент Из ЭлементыДерева Цикл
	
	Если Элемент.Объект = Объект Тогда				
		Рез = Истина;
		НайденныйИдентификатор = Элемент.ПолучитьИдентификатор();
		Прервать;
	КонецЕсли;
	
	Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда 
		
		Рез = ПолучитьИдентификаторПоОбъекту(Объект, Элемент.ПолучитьЭлементы(), НайденныйИдентификатор);				
		
		Если Рез Тогда
			Прервать;	
		КонецЕсли;
		
	КонецЕсли;				
	
КонецЦикла;

Возврат Рез;

КонецФункции // ПолучитьИдентификаторПоОбъекту()

// Процедура устанавливает пометку в дереве для текущего объекта.
//
&НаКлиенте
Процедура УстановитьПометкуДляОбъекта(Объект, ЭлементыДерева)
		
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.ЭтоГруппа = Истина Тогда 
			УстановитьПометкуДляОбъекта(Объект, Элемент.ПолучитьЭлементы());
		Иначе
			Если Элемент.Объект = Объект Тогда
				Элемент.Пометка = Истина;
				УстановитьПометкиРодителей(Элемент);
			Иначе
				Элемент.Пометка = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометкуДляОбъекта()
 
// Процедура запускает обновление дерева объектов мониторинга с переодичностью.
//
&НаКлиенте
Процедура ВключитьОбновлениеДанныхОбъектовРежимСлежения()

	ОбновлениеДанныхОбъектовРежимСлежения();
	ПодключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимСлежения", 20, Ложь); 
	
КонецПроцедуры // ВключитьОбновлениеДанныхОбъектовРежимСлежения()

// Процедура отключает обновление данных объектов мониторинга.
//
&НаКлиенте
Процедура ОтключитьОбновлениеДанныхОбъектовРежимСлежения()
	
	ОтключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимСлежения");
	
КонецПроцедуры // ОтключитьОбновлениеДанныхОбъектовРежимСлежения()
 
// Процедура запускает обновление дерева объектов мониторинга с переодичностью.
//
&НаКлиенте
Процедура ВключитьОбновлениеДанныхОбъектовРежимМаршрутов()

	ОбновлениеДанныхОбъектовРежимСлежения();
	ПодключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимМаршрутов", 20, Ложь); 
	
КонецПроцедуры // ВключитьОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура отключает обновление данных объектов мониторинга.
//
&НаКлиенте
Процедура ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов()
	
	ОтключитьОбработчикОжидания("ОбновлениеДанныхОбъектовРежимМаршрутов");
	
КонецПроцедуры // ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура заполняет заполняет и разворачивает дерево объектов мониторинга.
//
&НаКлиенте
Процедура ОбновлениеДанныхОбъектовРежимСлежения()

	Если ТекущийРежим <> 0 Тогда
		Возврат;
	
	КонецЕсли;	
	
	ТекОбъект = Неопределено;
	
	Если НЕ Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные = Неопределено Тогда
		ТекОбъект = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.Объект;  
	КонецЕсли;
	 
	ЗаполнитьДеревоОбъектовМониторинга();
	
	РазвернутьДеревоОбъектовМониторинга();    
	
	ПоказатьНаКартеТекущиеОбъекты();
		
	НайденныйИдентификатор = Неопределено;
	
	РезультатПоиска = ПолучитьИдентификаторПоОбъекту(ТекОбъект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(), НайденныйИдентификатор);
	Если РезультатПоиска Тогда
		Элементы.ДеревоОбъектовМониторинга.ТекущаяСтрока = НайденныйИдентификатор;			
	КонецЕсли;	 
 КонецПроцедуры // ОбновлениеДанныхОбъектовРежимСлежения()

// Процедура заполняет заполняет и разворачивает дерево объектов мониторинга в режиме 
// построения маршрутов.
//
&НаКлиенте
Процедура ОбновлениеДанныхОбъектовРежимМаршрутов()
	
	ТекОбъект = Неопределено;
	
	Если НЕ Элементы.ДеревоОбъектовМаршруты.ТекущиеДанные = Неопределено Тогда
		ТекОбъект = Элементы.ДеревоОбъектовМаршруты.ТекущиеДанные.Объект;  
	КонецЕсли;
	
	ЗаполнитьДеревоОбъектовМониторинга();
	РазвернутьДеревоОбъектовМаршруты();
	
	НайденныйИдентификатор = Неопределено;
	
	РезультатПоиска = ПолучитьИдентификаторПоОбъекту(ТекОбъект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(), НайденныйИдентификатор);
	Если РезультатПоиска Тогда
		Элементы.ДеревоОбъектовМаршруты.ТекущаяСтрока = НайденныйИдентификатор;			
	КонецЕсли;	 
КонецПроцедуры // ОбновлениеДанныхОбъектовРежимМаршрутов()

// Процедура обновлет содержимое поля HTML
//
&НаКлиенте
Процедура ОбновитьПолеHTML()

	ВыполнитьСкрипт("location.reload(true);");

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаправкиСливыПоСтруктуреДанных(СтруктураДанных)

	РежимРаботы = 4;
	
	НачатьРежимЗаправкиИСливы();
	
	Объект.ДатаНачала    = СтруктураДанных.НачПериода;
	Объект.ДатаОкончания = СтруктураДанных.КонПериода;

	
	УстановитьПометкуДляОбъекта(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы()); 

	Элементы.ДеревоОбъектовТопливо.ТекущаяСтрока = ПолучитьИдентификаторПоОбъекту(СтруктураДанных.Объект, ДеревоОбъектовМониторинга.ПолучитьЭлементы(),0);
	
	ПоказатьЗаправкиИСливы(Неопределено);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ РЕЖИМАМИ ОТОБРАЖЕНИЯ
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ УПРАВЛЕНИЯ РЕЖИМАМИ

// Прекращает все режимы
//
&НаКлиенте
Процедура ЗакончитьВсеРежимы()
	
	Если ТекущийРежим = 0 Тогда      // On-line слежение
		ЗакончитьРежимСлежения();
		
	ИначеЕсли ТекущийРежим = 1 Тогда // Потсроение маршрутов
		ЗакончитьРежимОтображенияМаршрута();
		
	ИначеЕсли ТекущийРежим = 2 Тогда // Редактирование геозон
		ЗакончитьРежимРедактированияГеоЗон();
		
	ИначеЕсли ТекущийРежим = 3 Тогда // Расчет маршрута
		ЗакончитьРежимРасчетаМаршрута();
		
	ИначеЕсли ТекущийРежим = 4 Тогда // Заправки и сливы
		ЗакончитьРежимЗаправкиИСливы();
			
	КонецЕсли;
	
	ТекущийРежим = -1;

КонецПроцедуры // ЗакончитьВсеРежимы()

////////////////////////////////////////////////////////////////////////////////
// РЕЖИМ СЛЕЖЕНИЯ

// Инициализация режима слежения
//
&НаКлиенте
Процедура НачатьРежимСлежения()

	ЗакончитьВсеРежимы();
	
	ТекущийРежим = 0;
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	Элементы.КнопкаOnLineСлежение.Пометка = Истина;
		
	//ПоказатьНаКартеТекущиеОбъекты();	
	ВключитьОбновлениеДанныхОбъектовРежимСлежения();
	
КонецПроцедуры // НачатьРежимСлежения()

// Конец режима слежения
//
&НаКлиенте
Процедура ЗакончитьРежимСлежения()

	ТекущийРежим = -1;
	Элементы.КнопкаOnLineСлежение.Пометка = Ложь;
	
	ОтключитьОбновлениеДанныхОбъектовРежимСлежения();
	
	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|vectorLayer.destroyFeatures();";
			
	ВыполнитьСкрипт(ТекстСкрипта);	
	 
КонецПроцедуры // ЗакончитьРежимСлежения()

////////////////////////////////////////////////////////////////////////////////
// РЕЖИМ МАРШРУТА

// Инициализация режима отображения маршрута
//
&НаКлиенте
Процедура НачатьРежимОтображенияМаршрута()
	
	ЗакончитьВсеРежимы();
		
	ВключитьОбновлениеДанныхОбъектовРежимМаршрутов();

	ТекущийРежим = 1;
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	Элементы.КнопкаПостроениеМаршрутов.Пометка = Истина;
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;

КонецПроцедуры // НачатьРежимОтображенияМаршрута()

// Конец режима отображения маршрута
//
&НаКлиенте
Процедура ЗакончитьРежимОтображенияМаршрута()
	
	ТекущийРежим = -1;
	
	Элементы.КнопкаПостроениеМаршрутов.Пометка = Ложь;
	
	ОтключитьОбновлениеДанныхОбъектовРежимМаршрутов();
	
	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|vectorLayer.destroyFeatures();
		|
		|var find_lays2 = m_map.getLayersByName(""PlayRouteFeatures"");
		|var vectorLayer2 = null;
		|if (find_lays2.length == 0) {
		|	vectorLayer2 = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer2);
		|} else {
		|	vectorLayer2 = find_lays2[0];
		|	vectorLayer2.destroyFeatures();
		|}
		|
		|var find_lays1 = m_map.getLayersByName(""Markers"");
		|var vectorLayer1 = null;
		|if (find_lays1.length == 0) {
		|	vectorLayer1 = new OpenLayers.Layer.Markers(""Markers"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer1);
		|	}
		|else {vectorLayer1 = find_lays1[0];}
		|vectorLayer1.clearMarkers();	
		|
		|if (play_route_intervalid != null) {
		|	StopPlayRoute();
		|}
        |";
			
	ВыполнитьСкрипт(ТекстСкрипта);
	
КонецПроцедуры // ЗакончитьРежимОтображенияМаршрута()

////////////////////////////////////////////////////////////////////////////////
// РЕЖИМ РЕДАКТИРОВАНИЯ ГЕОЗОН

// Инициализация режима редактирования геозон
//
&НаКлиенте
Процедура НачатьРежимРедактированияГеоЗон()

	ЗакончитьВсеРежимы();
	
	ТекущийРежим = 2;
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	Элементы.КнопкаРедакторГеозон.Пометка = Истина;
	
	Попытка
	
		СписокГеозонПриАктивизацииСтроки(Неопределено);
	
	Исключение
	
	КонецПопытки;
	
КонецПроцедуры // НачатьРежимРедактированияГеоЗон()
	
// Конец режима редактирования геозон
//
&НаКлиенте
Процедура ЗакончитьРежимРедактированияГеоЗон()

	ТекущийРежим = -1;
	Элементы.КнопкаРедакторГеозон.Пометка = Ложь;
	
	ТекстСкрипта = "destroy_geozones_control();
				   |var AllGeozonLayer = m_map.getLayersByName(""Geozone Geometry"");
				   |if (AllGeozonLayer.length > 0)
				   |{ m_map.removeLayer(AllGeozonLayer[0]); }";
	
	ВыполнитьСкрипт(ТекстСкрипта);

КонецПроцедуры // ЗакончитьРежимРедактированияГеоЗон()

////////////////////////////////////////////////////////////////////////////////
// РЕЖИМ РАСЧЕТА МАРШРУТА

// Инициализация режима расчета маршрута
//
&НаКлиенте
Процедура НачатьРежимРежимРасчетаМаршрута()
	
    ЗакончитьВсеРежимы();
		
	ТекущийРежим = 3;
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
	Элементы.КнопкаРасчетМаршрута.Пометка = Истина;
			
	//ВыполнитьСкрипт("disable_double_click_control.activate();");
	
	мМассивТочекВыбора = Новый Массив;
	
КонецПроцедуры // НачатьРежимРежимРасчетаМаршрута()

// Конец режима расчета маршрута
//
&НаКлиенте
Процедура ЗакончитьРежимРасчетаМаршрута()

	ТекущийРежим = -1;
	
	Элементы.КнопкаРасчетМаршрута.Пометка = Ложь;
		
	ТекстСкрипта = 
		"//disable_double_click_control.deactivate();
		|var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|vectorLayer.destroyFeatures();
		|
		|var find_lays2 = m_map.getLayersByName(""PlayRouteFeatures"");
		|var vectorLayer2 = null;
		|if (find_lays2.length == 0) {
		|	vectorLayer2 = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer2);
		|} else {
		|	vectorLayer2 = find_lays2[0];
		|	vectorLayer2.destroyFeatures();
		|}
		|
		|var find_lays1 = m_map.getLayersByName(""Markers"");
		|var vectorLayer1 = null;
		|if (find_lays1.length == 0) {
		|	vectorLayer1 = new OpenLayers.Layer.Markers(""Markers"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer1);
		|	}
		|else {vectorLayer1 = find_lays1[0];}
		|   vectorLayer1.clearMarkers();	
        |";
	
	ВыполнитьСкрипт(ТекстСкрипта);
	
	мМассивТочекВыбора.Очистить();

КонецПроцедуры // ЗакончитьРежимРасчетаМаршрута()

////////////////////////////////////////////////////////////////////////////////
// РЕЖИМ ЗАПРАВКИ И СЛИВЫ

// Инициализация режима заправок и сливов
//
&НаКлиенте
Процедура НачатьРежимЗаправкиИСливы()
	
    ЗакончитьВсеРежимы();
		
	ТекущийРежим = 4;
	
	Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];
		
КонецПроцедуры // НачатьРежимРежимРасчетаМаршрута()

// Конец режима заправок и сливов
//
&НаКлиенте
Процедура ЗакончитьРежимЗаправкиИСливы()

	ТекущийРежим = -1;
	
	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|vectorLayer.destroyFeatures();
		
		|var find_lays1 = m_map.getLayersByName(""Markers"");
		|var vectorLayer1 = null;
		|if (find_lays1.length == 0) {
		|	vectorLayer1 = new OpenLayers.Layer.Markers(""Markers"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer1);
		|	}
		|else {vectorLayer1 = find_lays1[0];}
		|   vectorLayer1.clearMarkers();	
        |";
			
	ВыполнитьСкрипт(ТекстСкрипта);

КонецПроцедуры // ЗакончитьРежимРасчетаМаршрута()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Константы.уатИспользуемаяСистемаGPS.Получить() <> Перечисления.уатСистемаGPS._1СЦСМ Тогда
		#Если Клиент тогда
			ТекстСообщения = "Открытие возможно только тогда, когда используемая система GPS - 1C:Центр спутникового мониторинга.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ItobОбработкаСобытийСервер.УстановитьДатуНачалаВыборкиСобытий(ТекущаяДата());
			
	КартаДоступна = Ложь;
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	               |	ItobМестоположенияПоУмолчанию.Ссылка КАК Ссылка,
	               |	ItobМестоположенияПоУмолчанию.Код,
	               |	ItobМестоположенияПоУмолчанию.Представление КАК Представление,
	               |	ItobМестоположенияПоУмолчанию.Наименование КАК Наименование,
	               |	ItobМестоположенияПоУмолчанию.Масштаб,
	               |	ItobМестоположенияПоУмолчанию.Широта,
	               |	ItobМестоположенияПоУмолчанию.Долгота
	               |ИЗ
	               |	Справочник.ItobМестоположенияПоУмолчанию КАК ItobМестоположенияПоУмолчанию
	               |ГДЕ
	               |	ItobМестоположенияПоУмолчанию.Широта <> 0
	               |	И ItobМестоположенияПоУмолчанию.Долгота <> 0
	               |	И ItobМестоположенияПоУмолчанию.Масштаб <> 0
	               |	И (НЕ ItobМестоположенияПоУмолчанию.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
				   
	Счетчик = 1;
	
	СохраненноеМестоположение = ПрочитатьНастройкуПользователя("НастройкиКарты", "МестоположениеПоУмолчанию");
	ТекущееМестоположение = Неопределено;
	Если ЗначениеЗаполнено(СохраненноеМестоположение) Тогда
		ТекущееМестоположение = СохраненноеМестоположение;
				
	КонецЕсли;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовКоманда = ЭтаФорма.Команды.Добавить("НажатиеНаКнопку"+Счетчик+"ВыбораКарты");
		НовКоманда.Действие = "НажатиеНаКнопку"+Счетчик+"ВыбораКарты";
		НовКоманда.Заголовок = Выборка.Представление;
		НовКоманда.Подсказка = "Выбрать местоположение """+Выборка.Представление+"""";
		
		НовКнопка = ЭтаФорма.Элементы.Добавить(
			"к_"+Выборка.Код, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВыборКарты);
		НовКнопка.ИмяКоманды = НовКоманда.Имя;
		НовКнопка.Заголовок = Выборка.Представление;
		
		Счетчик = Счетчик + 1;
		
		Если НЕ ЗначениеЗаполнено(ТекущееМестоположение) Тогда
			ТекущееМестоположение = Выборка.Ссылка;
		
		КонецЕсли;
		
		Если ТекущееМестоположение = Выборка.Ссылка Тогда
			НовКнопка.Пометка = Истина;
			
			ТекущийМасштаб = Выборка.Масштаб;
			ТекущаяШирота = Выборка.Широта;
			ТекущаяДолгота = Выборка.Долгота;			
		
		КонецЕсли;
	
	КонецЦикла;
	
	//Если Выборка.Количество() > 0 Тогда
	//	
	//	Кнопка = ЭтаФорма.Элементы.ПодменюВыборКарты.ПодчиненныеЭлементы[0];
	//	Кнопка.Пометка = Истина;		
	//	
	//	ТекущееМестоположение = Справочники.ItobМестоположенияПоУмолчанию.НайтиПоКоду(Сред(Кнопка.Имя,3));
	//	ТекущийМасштаб = ТекущееМестоположение.Масштаб;
	//	ТекущаяШирота = ТекущееМестоположение.Широта;
	//	ТекущаяДолгота = ТекущееМестоположение.Долгота;
	//	
	//КонецЕсли;
	
	ПоказатьГеографическуюКарту();
	
	ЗаполнитьДеревоОбъектовМониторинга();
	
	Объект.ДатаНачала = НачалоДня(ТекущаяДата());
	Объект.ДатаОкончания = КонецДня(ТекущаяДата());
	
	СпособОптимизацииМаршрута = "Время";
			
	ТекущийРежим = 0;
	
	РежимОткрытия = Неопределено;
	Если Параметры.Свойство("РежимОткрытия", РежимОткрытия) Тогда
		
		Если РежимОткрытия = "OnLineСлежение" Тогда
			ТекущийРежим = 0;
			Элементы.КнопкаOnLineСлежение.Пометка = Истина;
			
		ИначеЕсли РежимОткрытия = "ПостроениеМаршрутов" Тогда
			ТекущийРежим = 1;			
			Элементы.КнопкаПостроениеМаршрутов.Пометка = Истина;			
			
		ИначеЕсли РежимОткрытия = "РедакторГеозон" Тогда
			ТекущийРежим = 2;			
			Элементы.КнопкаРедакторГеозон.Пометка = Истина;
			
		ИначеЕсли РежимОткрытия = "РасчетМаршрута" Тогда
			ТекущийРежим = 3;			
			Элементы.КнопкаРасчетМаршрута.Пометка = Истина;			
		
		КонецЕсли;
		
		Элементы.ПанельЗакладок.ТекущаяСтраница = Элементы.ПанельЗакладок.ПодчиненныеЭлементы[ТекущийРежим];		
		РежимРаботы = ТекущийРежим;
		
	КонецЕсли;
	
	КоэффициентУскоренияПроигрываниеМаршрута = 1000;
	
	Если Метаданные.НайтиПоПолномуИмени("Справочник.ItobГеографическиеЗоны") = Неопределено Тогда
		
		ЭтаФорма.Элементы.ОтчетМаршрутПоГеозонамКонтекст.Видимость = Ложь;
		ЭтаФорма.Элементы.ОтчетМаршрутПоГеозонамМаршрутыКонтекст.Видимость = Ложь;
		ЭтаФорма.Элементы.ОтчетПосещениеГеозонКонтекст.Видимость = Ложь;
		ЭтаФорма.Элементы.ОтчетПосещениеГеозонМаршрутыКонтекст.Видимость = Ложь;
		ЭтаФорма.Элементы.ОтчетПоТопливуКонтекст.Видимость = Ложь;
		ЭтаФорма.Элементы.ОтчетПоТопливуМаршрутыКонтекст.Видимость = Ложь;				
	
	КонецЕсли;
				
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии".
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
		
	Если ТекущийРежим = 0  Тогда
		ВключитьОбновлениеДанныхОбъектовРежимСлежения();
	ИначеЕсли ТекущийРежим = 1  Тогда
		ВключитьОбновлениеДанныхОбъектовРежимМаршрутов();
	КонецЕсли;
	
	мСчетчикДокументСформирован = 0;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если КартаЗагружена() Тогда
		
		ВыполнитьСкрипт(
			"document.form.result.value = m_map.baseLayer.name;");
			
		ИмяСлоя = Элементы.ПолеHTML.Документ.form.result.value;	
		Если Не ПустаяСтрока(ИмяСлоя) Тогда
			СохранитьНастройкуПользователя("НастройкиКарты", "КартаПоУмолчанию", ИмяСлоя);
					
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееМестоположение) Тогда
		СохранитьНастройкуПользователя("НастройкиКарты", "МестоположениеПоУмолчанию", ТекущееМестоположение);		
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РежимМаршрута" Тогда
		
		ПоказатьМаршрутПоСтруктуреДанных(Параметр);
		
	ИначеЕсли ИмяСобытия = "РежимЗаправокСливов" Тогда
		
		ПоказатьЗаправкиСливыПоСтруктуреДанных(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

// Процедура - обработчик события "ДокументСформирован" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	
	СисИнфо = Новый СистемнаяИнформация;
	//Сообщить(СисИнфо.ИнформацияПрограммыПросмотра);
	
	Если мСчетчикДокументСформирован = 0
		И Найти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") <> 0 
		Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьПолеHTML", 0.1, Истина);
		
	Иначе
		
				
	
	КонецЕсли;
	
	мСчетчикДокументСформирован = мСчетчикДокументСформирован + 1;
	
КонецПроцедуры // ПолеHTMLДокументСформирован()

// Процедура - обработчик события "ПриИзменении" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	Если ТекущийРежим = 3 Тогда
		
		Если ДанныеСобытия.Event.type = "click" И ДанныеСобытия.Event.ctrlKey = Истина Тогда
			
			х = ДанныеСобытия.Event.clientX;
			y = ДанныеСобытия.Event.clientY;
			
			ФлагДобавитьТочку = Истина;			
			Для п = 0 По мМассивТочекВыбора.Количество()/2 -1  Цикл
								
				ТекШирота  = мМассивТочекВыбора[п*2];
				ТекДолгота = мМассивТочекВыбора[п*2+1];
				
				ТекстСкрипта = 
					"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекДолгота)+
					", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТекШирота)+");
					|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
					|var px = m_map.getPixelFromLonLat(pt);
					|document.form.result.value = px.x+"",""+px.y;
					|pt = null;";
				ВыполнитьСкрипт(ТекстСкрипта);
				
				СтрокаКоординат = Элементы.ПолеHTML.Документ.form.result.value;		
				СтрокаКоординат = СтрЗаменить(СтрокаКоординат,",",Символы.ПС);
												
				х1 = Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,1)));
				у1 = Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,2)));
								
				Если (ItobОбщегоНазначенияКлиентСервер.Abs(х1 - х) <= 12
					И у1 - y >= -1 И у1 - y <= 26)  Тогда // Удаляем точку, так захотел пользователь
					Для ж = п*2+2 По мМассивТочекВыбора.Количество()-1 Цикл
						мМассивТочекВыбора[ж-2] = мМассивТочекВыбора[ж];					
					КонецЦикла;
					
					мМассивТочекВыбора.Удалить(мМассивТочекВыбора.Количество()-1);
					мМассивТочекВыбора.Удалить(мМассивТочекВыбора.Количество()-1);										
					ФлагДобавитьТочку = Ложь;
					Прервать;
					
				КонецЕсли;			
			КонецЦикла;
			
			Если ФлагДобавитьТочку Тогда
				
				ТекстСкрипта = 
					"var px = new OpenLayers.Pixel("+Формат(х,"ЧГ=0")+","+Формат(y,"ЧГ=0")+");
					|var pt = m_map.getLonLatFromPixel(px);
					|pt.transform(m_map.getProjectionObject(), m_map.displayProjection);
					|document.form.result.value = pt.toShortString();
					|pt = null;";
				
				ВыполнитьСкрипт(ТекстСкрипта);
				
				СтрокаКоординат = Элементы.ПолеHTML.Документ.form.result.value;		
				СтрокаКоординат = СтрЗаменить(СтрокаКоординат,",",Символы.ПС);
				
				Широта  = Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,2)));	
				Долгота = Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,1)));
				
				мМассивТочекВыбора.Добавить(Широта);
				мМассивТочекВыбора.Добавить(Долгота);			
				
			КонецЕсли;
			
			РежимРасчетаМаршрутаПриДобавленииТочки();
		
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры // ПолеHTMLПриНажатии()

// Процедура - обработчик события "ПриАктивизацииСтроки" дерева значений "ДеревоОбъектов".
//
&НаКлиенте
Процедура ДеревоОбъектовМониторингаПриАктивизацииСтроки(Элемент)
	
	Если ТекущийРежим = 0 Тогда
		
		ПоказатьНаКартеТекущиеОбъекты(Истина);
		
		ДанныеСтроки = Неопределено;
		Если Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные <> Неопределено Тогда
			Если НЕ Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные.ЭтоГруппа Тогда
				ДанныеСтроки = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеСтроки = Неопределено Тогда
			
			ЭлементыДерева = ДеревоДатчиков.ПолучитьЭлементы();
			ЭлементыДерева.Очистить();
			
		Иначе
		
			СтруктураДанных = Новый Структура("Объект,АктуальностьДанных,Скорость,Направление,Терминал,ПериодUTC0");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеСтроки);
			
			ОбновитьДеревоДеталей(СтруктураДанных);
			
			Для каждого СтрокаДерева Из ДеревоДатчиков.ПолучитьЭлементы() Цикл
				Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
					
					Элементы.ДеревоДатчиков.Развернуть(СтрокаДерева.ПолучитьИдентификатор());	
					
				КонецЕсли;				
			КонецЦикла;
			
			ПодключитьОбработчикОжидания("ОпределитьИЗаполнитьМестоположение",0.01 ,Истина);

		КонецЕсли;

		
	КонецЕсли;
	
КонецПроцедуры // ДеревоОбъектовМониторингаПриАктивизацииСтроки()

// Процедура - обработчик события "ПриИзменении".
//
&НаКлиенте
Процедура ДеревоОбъектовМониторингаПометкаПриИзменении(Элемент)
				
	ТекущиеДанные = Элементы.ДеревоОбъектовМониторинга.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФлажкаДереваОбъектов(ТекущиеДанные);
	
	ПоказатьНаКартеТекущиеОбъекты();
		
КонецПроцедуры // ДеревоОбъектовМониторингаПометкаПриИзменении()

// Процедура - обработчик события "ПриИзменении".
//
&НаКлиенте
Процедура ДеревоОбъектовМаршрутыПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъектовМаршруты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФлажкаДереваОбъектов(ТекущиеДанные);	
	
КонецПроцедуры // ДеревоОбъектовМаршрутыПометкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" панели закладок "ПанельЗакладок".
//
&НаКлиенте
Процедура ПанельЗакладокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	//Сообщить("ТекущийРежим = "+ТекущийРежим);
	ТекущийРежим = Элемент.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
КонецПроцедуры // ПанельЗакладокПриСменеСтраницы()

// Процедура - обработчик события "ПриАктивизацииСтроки" динамического списка "СписокГеозон".
//
&НаКлиенте
Процедура СписокГеозонПриАктивизацииСтроки(Элемент)
			
	Если НЕ КартаЗагружена() Тогда
		Возврат;
	
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСкрипта = 
		"destroy_geozones_control();";
	ВыполнитьСкрипт(ТекстСкрипта);	
		
	ПоказатьРеперыРедактируемойГеоЗоны(Истина);
	
КонецПроцедуры // СписокГеозонПриАктивизацииСтроки()

// Процедура - обработчик события "Регулирование" поля "ДатаНачала".
//
&НаКлиенте
Процедура ДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала + Направление*24*3600);
	
КонецПроцедуры // ДатаНачалаРегулирование()

// Процедура - обработчик события "Регулирование" поля "ДатаОкончания".
//
&НаКлиенте
Процедура ДатаОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаОкончания = КонецДня(Объект.ДатаОкончания + Направление*24*3600);	
	
КонецПроцедуры // ДатаОкончанияРегулирование()

// Процедура - обработчик события "ОбработкаВыбора" поля "ДатаОкончания".
//
&НаКлиенте
Процедура ДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НачалоДня(ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
		Объект.ДатаОкончания = ВыбранноеЗначение;
		
		Элемент.УстановитьГраницыВыделения(1,СтрДлина(Элемент.ТекстРедактирования));
		Элемент.ВыделенныйТекст = Строка(ВыбранноеЗначение);
			
	КонецЕсли;	
	
КонецПроцедуры // ДатаОкончанияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы "ТекущийРежим".
//
&НаКлиенте
Процедура ТекущийРежимПриИзменении(Элемент)
	
	Если РежимРаботы = 0 Тогда
		НачатьРежимСлежения();
		
	ИначеЕсли РежимРаботы = 1 Тогда
		НачатьРежимОтображенияМаршрута();
		
	ИначеЕсли РежимРаботы = 2 Тогда
		НачатьРежимРедактированияГеоЗон();
		
	ИначеЕсли РежимРаботы = 3 Тогда
		НачатьРежимРежимРасчетаМаршрута();
		
	ИначеЕсли РежимРаботы = 4 Тогда
		НачатьРежимЗаправкиИСливы();
	
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииПометки" элемента формы "ДеревоОбъектовТопливо".
//
&НаКлиенте
Процедура ДеревоОбъектовТопливоПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъектовТопливо.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИд = ТекущиеДанные.ПолучитьИдентификатор();
	ТекущееЗначениеПометки = ТекущиеДанные.Пометка;
	
	// Снимем все пометки дерева
	Для каждого ЭлементДерева Из ДеревоОбъектовМониторинга.ПолучитьЭлементы() Цикл
		ЭлементДерева.Пометка = 0;
		УстановитьПометкиПодчиненных(ЭлементДерева, "Отказ = Ложь;", Неопределено);		
	КонецЦикла;	
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество()=0
		И ТекущееЗначениеПометки > 0 Тогда
		
		ТекущиеДанные.Пометка = 1;
	
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

// Процедура - обработчик команды "АвтомасштабКарты".
//
&НаКлиенте
Процедура АвтомасштабКарты(Команда)
	
	АвтомасштабироватьКарту();	
	
КонецПроцедуры // АвтомасштабКарты()

// Процедура - обработчик команды "УвеличитьКарту".
//
&НаКлиенте
Процедура УвеличитьКарту(Команда)
			
	ВыполнитьСкрипт("m_map.zoomIn();");	
	
КонецПроцедуры // УвеличитьКарту()

// Процедура - обработчик команды "УменьшитьКарту".
//
&НаКлиенте
Процедура УменьшитьКарту(Команда)
	
	ВыполнитьСкрипт("m_map.zoomOut();");
	
КонецПроцедуры // УменьшитьКарту()

// Процедура - обработчик команды "УстановитьИнтервал".
//
&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаНачала;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончания;
	
	Если Диалог.Редактировать() Тогда
		
		Объект.ДатаНачала    = Диалог.Период.ДатаНачала;
		Объект.ДатаОкончания = Диалог.Период.ДатаОкончания;
	
	КонецЕсли;
	
КонецПроцедуры // УстановитьИнтервал()

// Процедура - обработчик команды "ПоказатьМаршрутыНаКарте".
//
&НаКлиенте
Процедура ПоказатьМаршрутыНаКарте(Команда)
			
	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|vectorLayer.destroyFeatures();
		|
		|var find_lays2 = m_map.getLayersByName(""PlayRouteFeatures"");
		|var vectorLayer2 = null;
		|if (find_lays2.length == 0) {
		|	vectorLayer2 = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer2);
		|} else {
		|	vectorLayer2 = find_lays2[0];
		|	vectorLayer2.destroyFeatures();
		|}
		|
		|var find_lays1 = m_map.getLayersByName(""Markers"");
		|var vectorLayer1 = null;
		|if (find_lays1.length == 0) {
		|	vectorLayer1 = new OpenLayers.Layer.Markers(""Markers"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer1);
		|	}
		|else {vectorLayer1 = find_lays1[0];}
		|vectorLayer1.clearMarkers();	
		|
		|if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|}
		|";
		
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
		Предупреждение("Не задан период!");
		Возврат;
		
	ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		Предупреждение("Некорректный период!");
		Возврат;
		
	КонецЕсли;	
	
	МассивОтмеченныхСтрок = Новый Массив;
	СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

	МассивОбъектов = Новый Массив;
	Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
		МассивОбъектов.Добавить(СтрокаДерева.Объект);
	
	КонецЦикла;
	
	Если МассивОбъектов.Количество() > 0 Тогда
		ТекстСкрипта = ПолучитьСкриптМаршрутыОбъектов(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания);
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;
	
	// Автомасштаб
	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];};
		|var Features = vectorLayer.features;
		|var CurArBounds = null;
		|if (Features.length > 0){
		|	var ArBounds = Features[0].geometry.getBounds().toArray();
		|	for (var i = 1; i < Features.length-1; i++) {
		|		CurArBounds = Features[i].geometry.getBounds().toArray();
		|		ArBounds[0] = Math.min(ArBounds[0],CurArBounds[0]);
		|		ArBounds[1] = Math.min(ArBounds[1],CurArBounds[1]);
		|		ArBounds[2] = Math.max(ArBounds[2],CurArBounds[2]);
		|		ArBounds[3] = Math.max(ArBounds[3],CurArBounds[3]);
		|	}
		|	var NewBounds = new OpenLayers.Bounds(ArBounds[0],ArBounds[1],ArBounds[2],ArBounds[3]);
		|	m_map.zoomToExtent(NewBounds);
		|	if (m_map.getZoom() > 15) { m_map.zoomTo(15); }
		|}
	    |";
		
	ВыполнитьСкрипт(ТекстСкрипта);
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	
КонецПроцедуры // ПоказатьМаршрутыНаКарте()

// Процедура - обработчик команды "ОтменитьИзменения".
//
&НаКлиенте
Процедура ОтменитьИзменения(Команда)
					
	ПоказатьРеперыРедактируемойГеоЗоны(Ложь);
	
КонецПроцедуры // ОтменитьИзменения()

// Процедура - обработчик команды "РежимOnLineСлежения".
//
&НаКлиенте
Процедура РежимOnLineСлежения(Команда)
	
	Если ТекущийРежим <> 0 Тогда
		
		НачатьРежимСлежения();
	
	КонецЕсли;	
	
КонецПроцедуры // РежимOnLineСлежения()

// Процедура - обработчик команды "РежимПостроенияМаршрутов".
//
&НаКлиенте
Процедура РежимПостроенияМаршрутов(Команда)
	
	Если ТекущийРежим <> 1 Тогда
		НачатьРежимОтображенияМаршрута();
	
	КонецЕсли;	
	
КонецПроцедуры // РежимПостроенияМаршрутов()

// Процедура - обработчик команды "РежимРедактораГеозон".
//
&НаКлиенте
Процедура РежимРедактораГеозон(Команда)
	
	Если ТекущийРежим <> 2 Тогда
		НачатьРежимРедактированияГеоЗон();
	
	КонецЕсли;	
	
КонецПроцедуры // РежимРедактораГеозон()

// Процедура - обработчик команды "РежимРасчетаМаршрута".
//
&НаКлиенте
Процедура РежимРасчетаМаршрута(Команда)
	
	Если ТекущийРежим <> 3 Тогда
		НачатьРежимРежимРасчетаМаршрута();
	
	КонецЕсли;	
	
КонецПроцедуры // РежимРасчетаМаршрута()

// Процедура - обработчик команды "УстановитьФлажкиДереваОбъектовМониторинга".
//
&НаКлиенте
Процедура УстановитьФлажкиДереваОбъектовМониторинга(Команда)
	
	ИзменитьПометкиДереваОбъектов(ДеревоОбъектовМониторинга, 1);
	
	ПоказатьНаКартеТекущиеОбъекты();
	
КонецПроцедуры // УстановитьФлажкиДереваОбъектовМониторинга()

// Процедура - обработчик команды "СнятьФлажкиДереваОбъектовМониторинга".
//
&НаКлиенте
Процедура СнятьФлажкиДереваОбъектовМониторинга(Команда)
	
	ИзменитьПометкиДереваОбъектов(ДеревоОбъектовМониторинга, 0);
	
	ПоказатьНаКартеТекущиеОбъекты();	
	
КонецПроцедуры // СнятьФлажкиДереваОбъектовМониторинга()

// Процедура - обработчик команды "ОбновитьДеревоОбъектовМониторинга".
//
&НаКлиенте
Процедура ОбновитьДеревоОбъектовМониторинга(Команда)
	
	ОбновлениеДанныхОбъектовРежимСлежения();
	
КонецПроцедуры // ОбновитьДеревоОбъектовМониторинга()

// Процедура - обработчик команды "ОбновитьДеревоОбъектовМаршруты".
//
&НаКлиенте
Процедура ОбновитьДеревоОбъектовМаршруты(Команда)

	ОбновлениеДанныхОбъектовРежимМаршрутов();
	
КонецПроцедуры // ОбновитьДеревоОбъектовМаршруты()

// Процедура - обработчик команды "ОткрытьОтчетПоДвижениюИСтоянкам".
//
&НаКлиенте
Процедура ОткрытьОтчетПоДвижениюИСтоянкам(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
				
	ОткрытьФорму("Отчет.ItobДвиженияИСтоянки.Форма", ПараметрыОтчета);
	
КонецПроцедуры // ОткрытьОтчетПоДвижениюИСтоянкам()

// Процедура - обработчик команды "ОткрытьОтчетПосещениеГеозон".
//
&НаКлиенте
Процедура ОткрытьОтчетПосещениеГеозон(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
				
	ОткрытьФорму("Отчет.ItobПосещениеГеозон.Форма", ПараметрыОтчета);	
	
КонецПроцедуры // ОткрытьОтчетПосещениеГеозон()

// Процедура - обработчик команды "ОткрытьОтчетПоПростоям".
//
&НаКлиенте
Процедура ОткрытьОтчетПоПростоям(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
				
	ОткрытьФорму("Отчет.ItobОтчетПоПростоямПриЗаведенномДвигателе.Форма", ПараметрыОтчета);	
	
КонецПроцедуры // ОткрытьОтчетПоПростоям()

// Процедура - обработчик команды "ОткрытьОтчетПоТопливу".
//
&НаКлиенте
Процедура ОткрытьОтчетПоТопливу(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
	
	ПараметрыОтчета.СписокПараметров.Добавить("Пробег","Метод");
				
	ОткрытьФорму("Отчет.ItobОтчетПоТопливу.Форма", ПараметрыОтчета);	
	
КонецПроцедуры // ОткрытьОтчетПоТопливу()

// Процедура - обработчик команды "ОткрытьОтчетМаршрутПоГеозонам".
//
&НаКлиенте
Процедура ОткрытьОтчетМаршрутПоГеозонам(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
				
	ОткрытьФорму("Отчет.ItobМаршрутПоГеозонам.Форма", ПараметрыОтчета);	
	
КонецПроцедуры // ОткрытьОтчетМаршрутПоГеозонам()

// Процедура - обработчик команды "ОчиститьВсеТочкиРассчитанногоМаршрута".
//
&НаКлиенте
Процедура ОчиститьВсеТочкиРассчитанногоМаршрута(Команда)
	
	мМассивТочекВыбора.Очистить();
	РежимРасчетаМаршрутаПриДобавленииТочки();
	
КонецПроцедуры // ОчиститьВсеТочкиРассчитанногоМаршрута()

// Процедура - обработчик команды "ОткрытьОтчетПоДатчику".
//
&НаКлиенте
Процедура ОткрытьОтчетПоДатчику(Команда)
	
	Если Элементы.ДеревоДатчиков.ВыделенныеСтроки.Количество() > 1 Тогда
		Предупреждение(НСтр("ru = 'Для просмотра отчета выберите в списке только один датчик.'"));
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элементы.ДеревоДатчиков.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Невозможно открыть отчет для выбранного датчика.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект)
		И ЗначениеЗаполнено(ТекущиеДанные.Датчик) Тогда
		
		Если Строка(ТекущиеДанные.ТипДатчика) = "Дискретный" Тогда
			ИмяОтчета = "ItobОтчетПоДискретнымДатчикам";
			
		Иначе
			ИмяОтчета = "ItobОтчетПоАналоговымДатчикам";
		
		КонецЕсли;
		
		СписокПараметров = Новый СписокЗначений;
		СписокПараметров.Добавить(НачалоДня(ТекущаяДата()),"НачПериода");
		СписокПараметров.Добавить(КонецДня(ТекущаяДата()),"КонПериода");
		СписокПараметров.Добавить(ТекущиеДанные.Объект,"Объект");
		СписокПараметров.Добавить(ТекущиеДанные.Датчик,"Датчик");
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		ОткрытьФорму("Отчет."+ИмяОтчета+".Форма", ПараметрыОтчета);
		
	ИначеЕсли ТекущиеДанные.ПолучитьРодителя() = Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Терминал) Тогда
		// Показываем отчет "Сообщения терминала"
		
		СписокПараметров = Новый СписокЗначений;
		СписокПараметров.Добавить(НачалоДня(ТекущаяДата()),"НачПериода");
		СписокПараметров.Добавить(КонецДня(ТекущаяДата()),"КонПериода");
		СписокПараметров.Добавить(ТекущиеДанные.Терминал,"Терминал");
				
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		ОткрытьФорму("Отчет.ItobСообщенияТерминала.Форма", ПараметрыОтчета);
		
		
	КонецЕсли;		
	
КонецПроцедуры // ОткрытьОтчетПоДатчику()

// Процедура - обработчик команды "ОткрытьОтчетПоИмпульснымДатчикам".
//
&НаКлиенте
Процедура ОткрытьОтчетПоИмпульснымДатчикам(Команда)
	
	ПараметрыОтчета = СобратьДанныеДляПостроенияОтчета();
	Если ПараметрыОтчета = Неопределено Тогда
	 	Возврат;		
	
	КонецЕсли;
				
	ОткрытьФорму("Отчет.ItobОтчетПоИмпульснымДатчикам.Форма", ПараметрыОтчета);	
	
КонецПроцедуры // ОткрытьОтчетПоИмпульснымДатчикам()

// Процедура - обработчик команды "ПринятьИзменения".
//
&НаКлиенте
Процедура ПринятьИзменения(Команда)
	
	ТекущиеДанные = Элементы.СписокГеозон.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// узнаем количество точек
	ВыполнитьСкрипт("document.form.result.value = geozones_control.handler.getPoints().length;");
	КоличествоТочек = Число(Элементы.ПолеHTML.Документ.form.result.value);
	
	СтрНовыеКоординатыГеозоны = "";
	Для п = 0 По КоличествоТочек-1 Цикл
		ВыполнитьСкрипт(
			"var pt = geozones_control.handler.getPoints()["+п+"];
			|pt.transform(m_map.getProjectionObject(), m_map.displayProjection);
			|document.form.result.value = pt.toShortString();");
		СтрокаКоординат = Элементы.ПолеHTML.Документ.form.result.value;
		СтрНовыеКоординатыГеозоны = 
			?(СтрНовыеКоординатыГеозоны="","",СтрНовыеКоординатыГеозоны+Символы.ПС)+СтрокаКоординат;		
		
	КонецЦикла;
		
	ГеозонаСсылка = ТекущиеДанные.Ссылка;
	ЗаписатьНовыеКоординатыТочекГеозоны(ГеозонаСсылка, СтрНовыеКоординатыГеозоны);
	
КонецПроцедуры // ПринятьИзменения()

// Процедура - обработчик команды "ЗапуститьМастерНастройкиСлужбыCsmSvc".
//
&НаКлиенте
Процедура ЗапуститьМастерНастройкиСлужбыCsmSvc(Команда)
	
	Форма = ПолучитьФорму("Обработка.ItobМастерНастройкиСервисаCsmSvc.Форма");
	РезультатФормы = Форма.ОткрытьМодально();
	
	Если РезультатФормы = Истина Тогда
		ПоказатьГеографическуюКарту();
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ПоказатьЗаправкиИСливы".
//
&НаКлиенте
Процедура ПоказатьЗаправкиИСливы(Команда)
	
	ТекстСкрипта = 
		"var find_lays = m_map.getLayersByName(""Geometry"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|}
		|else {vectorLayer = find_lays[0];}
		|vectorLayer.destroyFeatures();
		|
		|var find_lays2 = m_map.getLayersByName(""PlayRouteFeatures"");
		|var vectorLayer2 = null;
		|if (find_lays2.length == 0) {
		|	vectorLayer2 = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer2);
		|} else {
		|	vectorLayer2 = find_lays2[0];
		|	vectorLayer2.destroyFeatures();
		|}
		|
		|var find_lays1 = m_map.getLayersByName(""Markers"");
		|var vectorLayer1 = null;
		|if (find_lays1.length == 0) {
		|	vectorLayer1 = new OpenLayers.Layer.Markers(""Markers"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer1);
		|	}
		|else {vectorLayer1 = find_lays1[0];}
		|   vectorLayer1.clearMarkers();	
		|";
		
	ВыполнитьСкрипт(ТекстСкрипта);
	
	Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
		Предупреждение("Не задан период!");
		Возврат;
		
	ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		Предупреждение("Некорректный период!");
		Возврат;
		
	КонецЕсли;	
	
	МассивОтмеченныхСтрок = Новый Массив;
	СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

	МассивОбъектов = Новый Массив;
	Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
		МассивОбъектов.Добавить(СтрокаДерева.Объект);
		Прервать;
	
	КонецЦикла;
	
	Если МассивОбъектов.Количество() > 0 Тогда
		ТекстСкрипта = ПолучитьСкриптЗаправкиИСливы(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания);
		ВыполнитьСкрипт(ТекстСкрипта);
	
	КонецЕсли;
	
	//// Автомасштаб
	//ТекстСкрипта = 
	//	"var find_lays = m_map.getLayersByName(""Geometry"");
	//	|var vectorLayer = null;
	//	|if (find_lays.length == 0) {
	//	|	vectorLayer = new OpenLayers.Layer.Vector(""Geometry"", {displayInLayerSwitcher: false});
	//	|	m_map.addLayer(vectorLayer);
	//	|}
	//	|else {vectorLayer = find_lays[0];};
	//	|var Features = vectorLayer.features;
	//	|var CurArBounds = null;
	//	|if (Features.length > 0){
	//	|	var ArBounds = Features[0].geometry.getBounds().toArray();
	//	|	for (var i = 1; i < Features.length-1; i++) {
	//	|		CurArBounds = Features[i].geometry.getBounds().toArray();
	//	|		ArBounds[0] = Math.min(ArBounds[0],CurArBounds[0]);
	//	|		ArBounds[1] = Math.min(ArBounds[1],CurArBounds[1]);
	//	|		ArBounds[2] = Math.max(ArBounds[2],CurArBounds[2]);
	//	|		ArBounds[3] = Math.max(ArBounds[3],CurArBounds[3]);
	//	|	}
	//	|	var NewBounds = new OpenLayers.Bounds(ArBounds[0],ArBounds[1],ArBounds[2],ArBounds[3]);
	//	|	m_map.zoomToExtent(NewBounds);
	//	|	if (m_map.getZoom() > 15) { m_map.zoomTo(15); }
	//	|}
	//	|";
	//	
	//ВыполнитьСкрипт(ТекстСкрипта);	
	
КонецПроцедуры

// Процедура - обработчик команды "ПроигратьМаршрут".
//
&НаКлиенте
Процедура ПроигратьМаршрут(Команда)
	
	Если ФлагПаузаПроигрыванияМаршрута Тогда
		ВыполнитьСкрипт("play_route_pause = false;");
		ФлагПаузаПроигрыванияМаршрута = Ложь;
		
	Иначе
		
		Если Объект.ДатаНачала = '00010101' ИЛИ Объект.ДатаОкончания = '00010101' Тогда
			Предупреждение("Не задан период!");
			Возврат;
			
		ИначеЕсли Объект.ДатаНачала > Объект.ДатаОкончания Тогда
			Предупреждение("Некорректный период!");
			Возврат;
			
		КонецЕсли;	
		
		МассивОтмеченныхСтрок = Новый Массив;
		СобратьОтмеченныеОбъектыДерева(ДеревоОбъектовМониторинга, МассивОтмеченныхСтрок);

		МассивОбъектов = Новый Массив;
		Для каждого СтрокаДерева Из МассивОтмеченныхСтрок Цикл
			МассивОбъектов.Добавить(СтрокаДерева.Объект);
		
		КонецЦикла;
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ТекстСкрипта = ПолучитьСкриптПроигратьМаршруты(МассивОбъектов, Объект.ДатаНачала, Объект.ДатаОкончания);
			
			ВыполнитьСкрипт(ТекстСкрипта);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ПаузаПроигрыванияМаршрута".
//
&НаКлиенте
Процедура ПаузаПроигрыванияМаршрута(Команда)
	
	ФлагПаузаПроигрыванияМаршрута = Истина;
	ВыполнитьСкрипт("play_route_pause = true;");
	
КонецПроцедуры

// Процедура - обработчик команды "ЗакончитьПроигрываниеМаршрута".
//
&НаКлиенте
Процедура ЗакончитьПроигрываниеМаршрута(Команда)
	
	ФлагПаузаПроигрыванияМаршрута = Ложь;
	
	ТекстСкрипта = 
		"if (play_route_intervalid != null) {
		|	clearInterval(play_route_intervalid);
		|	play_route_intervalid = null;
		|}
		|
		|var find_lays = m_map.getLayersByName(""PlayRouteFeatures"");
		|var vectorLayer = null;
		|if (find_lays.length == 0) {
		|	vectorLayer = new OpenLayers.Layer.Vector(""PlayRouteFeatures"", {displayInLayerSwitcher: false});
		|	m_map.addLayer(vectorLayer);
		|} else {
		|	vectorLayer = find_lays[0];
		|}
		|
		|vectorLayer.destroyFeatures();
		|";
	ВыполнитьСкрипт(ТекстСкрипта);	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ВЫБОРА МЕСТОПОЛОЖЕНИЯ
// ИСПОЛЬЗУЮТСЯ ДИНАМИЧЕСКИ

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку1ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку1ВыбораКарты(Команда)	
	ОбработатьВыборКарты(1);
КонецПроцедуры // НажатиеНаКнопку1ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку2ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку2ВыбораКарты(Команда)	
	ОбработатьВыборКарты(2);
КонецПроцедуры // НажатиеНаКнопку2ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку3ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку3ВыбораКарты(Команда)	
	ОбработатьВыборКарты(3);
КонецПроцедуры // НажатиеНаКнопку3ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку4ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку4ВыбораКарты(Команда)	
	ОбработатьВыборКарты(4);
КонецПроцедуры // НажатиеНаКнопку4ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку5ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку5ВыбораКарты(Команда)	
	ОбработатьВыборКарты(5);
КонецПроцедуры // НажатиеНаКнопку5ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку6ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку6ВыбораКарты(Команда)	
	ОбработатьВыборКарты(6);
КонецПроцедуры // НажатиеНаКнопку6ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку7ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку7ВыбораКарты(Команда)	
	ОбработатьВыборКарты(7);
КонецПроцедуры // НажатиеНаКнопку7ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку8ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку8ВыбораКарты(Команда)	
	ОбработатьВыборКарты(8);
КонецПроцедуры // НажатиеНаКнопку8ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку9ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку9ВыбораКарты(Команда)	
	ОбработатьВыборКарты(9);
КонецПроцедуры // НажатиеНаКнопку9ВыбораКарты()

//Подключается динамически при открытии формы
// Процедура - обработчик команды "НажатиеНаКнопку10ВыбораКарты".
//
&НаКлиенте
Процедура НажатиеНаКнопку10ВыбораКарты(Команда)	
	ОбработатьВыборКарты(10);
КонецПроцедуры // НажатиеНаКнопку10ВыбораКарты()

&НаКлиенте
Процедура ВыполнитьОтложеннуюКоманду(ТекстКоманды)
	
	мТекстОтложеннойКоманды = ТекстКоманды;
	ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикВыполненияОтложеннойКоманды",0.5,Истина);	

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыполненияОтложеннойКоманды()
 
	Если ПустаяСтрока(мТекстОтложеннойКоманды) Тогда		
		Возврат;
	
	КонецЕсли;
	
	Если КартаЗагружена() Тогда
		ВЫПОЛНИТЬ(мТекстОтложеннойКоманды);
		мТекстОтложеннойКоманды = "";
		
	Иначе
		ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикВыполненияОтложеннойКоманды",0.5,Истина);
	
	КонецЕсли;	

КонецПроцедуры