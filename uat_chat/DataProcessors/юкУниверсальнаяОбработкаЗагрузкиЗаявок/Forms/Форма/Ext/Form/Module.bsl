//////////////////////////// Доп.методы /////////////////////////////////////
&НаКлиенте
Перем ПостоянноеЗначение;

#Область Вспомогательные

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") 
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции    

&НаСервереБезКонтекста
Функция ВычислитьПроцентСовпадениеСтроки(Знач ИсходнаяСтрока, СтрокаПоиска, ОбщаяДлинаСтроки, КолСловПоиска)
	
	КолВхождений = 0;
	ДлинаСтроки = СтрДлина(СтрокаПоиска);
	
	Для Сч = 1 По ДлинаСтроки - 1 Цикл
		Если Найти(ИсходнаяСтрока, Лев(СтрокаПоиска, Сч)) > 0 Тогда
			КолВхождений = Сч;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КолВхождений >= 3 И ДлинаСтроки >= 3 Тогда
		Если КолВхождений = СтрДлина(ИсходнаяСтрока) Тогда
			ПроцентСовпадения = Окр(100/КолСловПоиска, 2);
		Иначе
			ПроцентСовпадения = Окр(КолВхождений / ОбщаяДлинаСтроки * 100, 2);
		КонецЕсли;	
		Если КолВхождений >= 3 Тогда
			ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, Лев(СтрокаПоиска, КолВхождений), "");			
		КонецЕсли;	
	Иначе 
		ПроцентСовпадения = 0;
	КонецЕсли;	
	
	Возврат ПроцентСовпадения; 
		
КонецФункции    

&НаСервереБезКонтекста
Функция ФорматСтрокиДляПоиска(Знач Значение)
	
	СимволыЗамены = ";:()[],.";
	Для Сч = 0 По СтрДлина(СимволыЗамены)-1 Цикл
		Значение = СтрЗаменить(Значение, Сред(СимволыЗамены, Сч, 1)," ");		
	КонецЦикла;	
	
	Сч = 4;
	Пробелы = "    ";
	Пока Сч <> 0 Цикл
		Значение = СтрЗаменить(Значение, Лев(Пробелы, СЧ)," ");
		Сч = Сч -1;		
	КонецЦикла;	

	Возврат Значение;
	
КонецФункции	

&НаСервереБезКонтекста
Функция УбратьСкрытыеСимивола(Знач Текст)	
	Текст = СтрЗаменить(СтрЗаменить(Текст, Символ(10), ""), Символ(13), " ");
	Текст = СтрЗаменить(Текст, Символы.ПС, " ");
	Возврат СокрЛП(Текст);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМаску(Маски, кЧисло)
	
	МасРезультат = Новый Массив;
	Для Сч = 0 По кЧисло Цикл
		Для каждого Маска Из Маски Цикл
			Стр = Новый Структура;
			Стр.Вставить("Маска", СтрЗаменить(Маска, "*", Сч));
			Стр.Вставить("Число", Сч);
			МасРезультат.Добавить(Стр);
		КонецЦикла;	
	КонецЦикла;
	
	Возврат МасРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДнейРаботы(ОбластьТекст)
	Если СтрНайти(ОбластьТекст, "*") <> 0 Тогда
		Возврат СтрЧислоВхождений(ОбластьТекст, "*");
	Иначе
		Возврат ОбластьТекст;
	КонецЕсли;	
КонецФункции	

#КонецОбласти

#Область Заголовки

&НаСервере
Функция ПолучитьЗаголовкиExcel(пТабличныйДокумент, пНомерСтрЗаголовка, пНомерСтрЗаголовкаНиз)
	Результат = ПолучитьЗаголовкиExcelНаСервере(пТабличныйДокумент, пНомерСтрЗаголовка, пНомерСтрЗаголовкаНиз);
	Возврат Результат;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЗаголовкиExcelНаСервере(пТабличныйДокумент, пНомерСтрЗаголовка, пНомерСтрЗаголовкаНиз)
	мЗаголовки = Новый Соответствие;
	вСписокЗначений = новый СписокЗначений;
	Для вИтр = пНомерСтрЗаголовка По пНомерСтрЗаголовкаНиз Цикл	// Алексей: многострочных заголовков не было
		мПредыдущееЗначение = "";
		Для Итр = 1 По пТабличныйДокумент.ШиринаТаблицы Цикл
			Область = пТабличныйДокумент.Область("R" + вИтр + "C" + Итр);
			мТекстЯчейки = СтрЗаменить(СтрЗаменить(УбратьСкрытыеСимивола(Область.Текст), Символы.ПС, " "), "  ", " ");
			Если мЗаголовки[Формат(Итр, "ЧГ=")] = Неопределено Тогда
				мЗаголовки.Вставить(Формат(Итр, "ЧГ="), ?(мТекстЯчейки = "", мПредыдущееЗначение, мТекстЯчейки));
			Иначе
				мЗаголовки.Вставить(Формат(Итр, "ЧГ="), СокрЛП(мЗаголовки[Формат(Итр, "ЧГ=")] + " " + ?(мТекстЯчейки = "", мПредыдущееЗначение, мТекстЯчейки)));
			КонецЕсли;
			Если мТекстЯчейки <> "" Тогда
				мПредыдущееЗначение = мТекстЯчейки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//// Алексей: пустые столбцы слева (отступы) убираем
	Для Каждого мЭлементСоответствия Из мЗаголовки Цикл
		Если СокрЛП(мЭлементСоответствия.Значение) <> "" Тогда
			вСписокЗначений.Добавить(мЭлементСоответствия.Ключ, мЭлементСоответствия.Значение);
		КонецЕсли;
	КонецЦикла;
	
	вСписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Возврат вСписокЗначений;
КонецФункции

&НаСервере
Функция НайтиЗаголовкиТЧ()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	МетДанные = ЭтаОбработка.Метаданные();
	
	МасЗаголовокТЧ = Новый Массив();
		
	Для каждого Данные Из МетДанные.ТабличныеЧасти.Заявки.Реквизиты Цикл
		Если Найти(Данные.Имя, "Excel") = 0 И Данные.Имя <> "Пометка" И Данные.Имя <> "ПостоянноеЗначение" Тогда
			СтрокаТЧ = Новый Структура;
			СтрокаТЧ.Вставить("Имя", ?(ЗначениеЗаполнено(Данные.Синоним), Данные.Синоним, Данные.Имя));
			СтрокаТЧ.Вставить("ИмяExcel", "");
			СтрокаТЧ.Вставить("Тип", Данные.Тип);
			СтрокаТЧ.Вставить("КолонкаExcel", 0);
			СтрокаТЧ.Вставить("ДополнительнаяКолонкаИзПараметров", Ложь);
			СтрокаТЧ.Вставить("ОсновнаяКолонкаМесяца", Ложь);
			СтрокаТЧ.Вставить("СмещениеОтОсновнойКолонки", 0);
			МасЗаголовокТЧ.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Данные Из МетДанные.ТабличныеЧасти.Заявки.Реквизиты Цикл
		Если Найти(Данные.Имя, "Excel") <> 0 Тогда
			ИмяExcel = ?(ЗначениеЗаполнено(Данные.Синоним), Данные.Синоним, Данные.Имя);
			ИмяExcel = СтрЗаменить(ИмяExcel, " (Excel)", "");
			Для каждого МасЭлемент Из МасЗаголовокТЧ Цикл
				Если МасЭлемент.Имя = ИмяExcel Тогда
					МасЭлемент.ИмяExcel = Данные.Имя;
					Прервать;
				КонецЕсли;				
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МасЗаголовокТЧ;
		
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиНомерКолонкиExcel(Имя, ЗаголовкиExcel)
	
	ТЗПоиска = Новый ТаблицаЗначений();
	ТЗПоиска.Колонки.Добавить("НомерСтолбцаExcel");
	ТЗПоиска.Колонки.Добавить("ЗначениеСтолбцаExcel");
	ТЗПоиска.Колонки.Добавить("ПроцентСовпадения");
	
	МаксПроцент = 0;
	
	МасТЧ = РазложитьСтрокуВМассив(НРег(Имя), " ");
	ОбщаяДлинаСтроки = СтрДлина(Имя);
	
	Для каждого ЗаголовокExcel Из ЗаголовкиExcel Цикл
		СуммаПроцентов = 0;
		ЗаголовокExcelПроверка = НРег(ЗаголовокExcel.Представление);
		Для каждого ТЧ Из МасТЧ Цикл
			ПроцентСовпадения = ВычислитьПроцентСовпадениеСтроки(ЗаголовокExcelПроверка, ТЧ, ОбщаяДлинаСтроки, МасТЧ.Количество());
			Если ПроцентСовпадения <> 0 Тогда
				СуммаПроцентов = СуммаПроцентов + ПроцентСовпадения;
			КонецЕсли;
		КонецЦикла;
		Если СуммаПроцентов <> 0 Тогда
			НоваяСтрока = ТЗПоиска.Добавить();
			НоваяСтрока.НомерСтолбцаExcel = ЗаголовокExcel.Значение;
			НоваяСтрока.ЗначениеСтолбцаExcel = ЗаголовокExcel.Представление;
			НоваяСтрока.ПроцентСовпадения = СуммаПроцентов;
			
			Если МаксПроцент < СуммаПроцентов Тогда
				МаксПроцент = СуммаПроцентов;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	МаксСтрока = ТЗПоиска.Найти(МаксПроцент, "ПроцентСовпадения");
	
	Если ТЗПоиска.Количество() > 0 И МаксСтрока <> Неопределено Тогда
		МасРезультат = Новый Массив();
		МасРезультат.Добавить(МаксСтрока.НомерСтолбцаExcel);
		МасРезультат.Добавить(Имя);
		МасПоиска = Новый Массив();
		Для каждого ЭлементПоиска Из ТЗПоиска Цикл
			СтрПоиска = Новый Структура;
			Для каждого ТЗКолонка Из ТЗПоиска.Колонки Цикл
				СтрПоиска.Вставить(ТЗКолонка.Имя, "");
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(СтрПоиска, ЭлементПоиска);
			МасПоиска.Добавить(СтрПоиска);
		КонецЦикла;
		МасРезультат.Добавить(МасПоиска);
		Возврат МасРезультат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбрезатьТабличныйДокумент(ИсходныйТабДок, пНомСтрЗаголовка)
	
	КолСтрокОбразец = 25;
	ТабДокумент = Новый ТабличныйДокумент;
	
	Итр = пНомСтрЗаголовка;
	Если ИсходныйТабДок.ВысотаТаблицы < КолСтрокОбразец Тогда
		До = ИсходныйТабДок.ВысотаТаблицы;
	Иначе
		До = пНомСтрЗаголовка + КолСтрокОбразец;
	КонецЕсли;	
	
	Пока Итр <= До Цикл
		Область = ИсходныйТабДок.Область("R" + Формат(Итр, "ЧГ=") + "C1"+ ":" + "R" + Формат(Итр, "ЧГ=") + "C" + Формат(ИсходныйТабДок.ШиринаТаблицы, "ЧГ="));
		Область.Шрифт = Новый Шрифт(,10,Истина);
		ТабДокумент.ВставитьОбласть(Область, ,ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
		Итр = Итр + 1;
	КонецЦикла;	
		
	Возврат ТабДокумент;
	
КонецФункции 

#КонецОбласти

#Область ТабличнаяЧасть

&НаСервере
Процедура ДобавитьАналитикуДляПоиска(Значение, Объект, Контрагент)
	
	НоваяСтрока = АналитикаПоиска.Добавить();
	НоваяСтрока.Значение = НРег(СокрЛП(Значение));
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Контрагент = Контрагент;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокиПоАналитике(Отбор, кТип)
	
	Строки = АналитикаПоиска.НайтиСтроки(Отбор);
	
	Сч = 0;
	Пока Сч <= Строки.Количество()-1 Цикл
		Если ТипЗнч(Строки[Сч].Объект) <> кТип Тогда
			Строки.Удалить(Сч);
			Сч = ?(Сч <> 0, Сч - 1, 0);
			Продолжить;
		КонецЕсли;		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат Строки;  
	
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиСовпадениеСтрокиСОбъектом(кТип, ЗначенияДляПоиска, ТЗТипыТС)
	
	ТаблицаВыборки = Метаданные.НайтиПоТипу(кТип).ПолноеИмя();
	
	ФЗначенияДляПоиска = ФорматСтрокиДляПоиска(ЗначенияДляПоиска);
	МасЗначенияДляПоиска = РазложитьСтрокуВМассив(ФЗначенияДляПоиска, " ");
		
	Запрос = Новый Запрос();
	МВТ = Новый МенеджерВременныхТаблиц();
	Запрос.МенеджерВременныхТаблиц = МВТ;
		
	Сч = 0;
	
	Для каждого ЭлементПоиска Из МасЗначенияДляПоиска Цикл
		Сч = Сч + 1;
		СтрПроцентОтЗначения = Окр(СтрДлина(ЭлементПоиска) / СтрДлина(ЗначенияДляПоиска) * 100, 2); 
		ПроцентОтЗначения = СтрЗаменить(СтрПроцентОтЗначения, ",", ".");
		Если Сч = 1 Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			| ТЗ.Ссылка КАК Ссылка,
			| ТЗ.Наименование КАК Наименование
			|ПОМЕСТИТЬ ВТТаблица 
			|ИЗ 
			| &ТипыТС КАК ТЗ
			|;
			|ВЫБРАТЬ
			| Таблица.Ссылка КАК Ссылка,
			| " + ПроцентОтЗначения + " КАК Процент
			|ПОМЕСТИТЬ ВТОбъекты
			|ИЗ
			| ВТТаблица КАК Таблица
			|ГДЕ
			| Таблица.Наименование ПОДОБНО " + """" + "%" + ЭлементПоиска + "%" + """";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			| Таблица.Ссылка КАК Ссылка,
			| " + ПроцентОтЗначения + " КАК Процент 
			|ИЗ
			| ВТТаблица КАК Таблица
			|ГДЕ
			| Таблица.Наименование ПОДОБНО " + """" + "%" + ЭлементПоиска + "%" + """"; 			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|ВЫБРАТЬ
	| ВТОбъекты.Ссылка,
	| СУММА(ВТОбъекты.Процент) КАК Процент
	|ПОМЕСТИТЬ ВТОбъектСумма
	|ИЗ
	| ВТОбъекты КАК ВТОбъекты
	|СГРУППИРОВАТЬ ПО
	| ВТОбъекты.Ссылка
    |;
	|ВЫБРАТЬ
	| МАКСИМУМ(ВТОбъектСумма.Процент) КАК Процент
	|ПОМЕСТИТЬ ВТМакс
	|ИЗ
	| ВТОбъектСумма КАК ВТОбъектСумма";
	
	
	Если ТаблицаВыборки = "Справочник.уатТС" Тогда
		Запрос.Текст = Запрос.Текст + "
		|;		
		|ВЫБРАТЬ
		| ВТОбъектСумма.Ссылка,
		| ВТМакс.Процент,
		| ВТОбъектСумма.Ссылка.ТипТС
		|ПОМЕСТИТЬ ВТТСТип
		|ИЗ
		| ВТМакс КАК ВТМакс
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектСумма КАК ВТОбъектСумма
		| 	ПО ВТМакс.Процент = ВТОбъектСумма.Процент
		|;
		|ВЫБРАТЬ
		| ВТТСТип.СсылкаТипТС КАК Ссылка,
		| ВТТСТип.Процент
		|ИЗ
		| ВТТСТип КАК ВТТСТип
		|ГДЕ
		| ВТТСТип.СсылкаТипТС <> ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		| ВТТСТип.СсылкаТипТС,
		| ВТТСТип.Процент";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		| ВТОбъектСумма.Ссылка,
		| ВТМакс.Процент
		|ИЗ
		| ВТМакс КАК ВТМакс
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектСумма КАК ВТОбъектСумма
		|	ПО ВТМакс.Процент = ВТОбъектСумма.Процент";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыТС", ТЗТипыТС.Выгрузить());
			
	Возврат Запрос.Выполнить().Выгрузить();  	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВремяПодачи(ОбластьТекст)
	
	КС = Новый КвалификаторыСтроки(250);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ТЗВремяПодачи = Новый ТаблицаЗначений;
	ТЗВремяПодачи.Колонки.Добавить("Подача", Новый ОписаниеТипов("Строка",,,,КС));
	
	НоваяЗапись = ТЗВремяПодачи.Добавить();
	ОбластьТекстБезПробелов = СтрЗаменить(ОбластьТекст, " ", "");
	НоваяЗапись.Подача = ОбластьТекст;
		
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ВремяПодачи.Подача
	              |ПОМЕСТИТЬ ВТВремяПодачи
	              |ИЗ
	              |	&ТЗВремяПодачи КАК ВремяПодачи";
		
	//1 символ (час)
	МаскаЧас1 = Новый Массив();
	МаскаЧас1.Добавить("%[*][0-9]-[0-9][0-9]%");
	МаскаЧас1.Добавить("%[*][0-9]:[0-9][0-9]%");
	//2 символ (час) 
	МаскаЧас2 = Новый Массив();
	МаскаЧас2.Добавить("%[0-9][*]-[0-9][0-9]%");
	МаскаЧас2.Добавить("%[0-9][*]:[0-9][0-9]%");
	МаскаЧас2.Добавить("%[^0-9][*]-[0-9][0-9]%");
	МаскаЧас2.Добавить("%[^0-9][*]:[0-9][0-9]%");
	//1 символ (минута)
	МаскаМинута1 = Новый Массив();
	МаскаМинута1.Добавить("%[0-9][0-9]-[*][0-9]%");
	МаскаМинута1.Добавить("%[0-9][0-9]:[*][0-9]%");
	МаскаМинута1.Добавить("%[^0-9][0-9]-[*][0-9]%");
	МаскаМинута1.Добавить("%[^0-9][0-9]:[*][0-9]%");
	//2 символ (минута)
	МаскаМинута2 = Новый Массив();
	МаскаМинута2.Добавить("%[0-9][0-9]-[0-9][*]%)");
	МаскаМинута2.Добавить("%[0-9][0-9]:[0-9][*]%)");
	МаскаМинута2.Добавить("%[^0-9][0-9]-[0-9][*]%");
	МаскаМинута2.Добавить("%[^0-9][0-9]:[0-9][*]%");
	
	МасМаскаЧас1 = ПолучитьМаску(МаскаЧас1, 9);
	МасМаскаЧас2 = ПолучитьМаску(МаскаЧас2, 9);
	МасМаскаМинута1 = ПолучитьМаску(МаскаМинута1, 9);
	МасМаскаМинута2 = ПолучитьМаску(МаскаМинута2, 9);
    	
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаЧас1, "Час1");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаЧас2, "Час2");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаМинута1, "Минута1");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаМинута2, "Минута2");
		
	Запрос.Текст = Запрос.Текст + ";
	        |ВЫБРАТЬ
			|	МАКСИМУМ(ЕСТЬNULL(ВТЧас1.Час1, 0)) КАК Час1,
	        |	МАКСИМУМ(ЕСТЬNULL(ВТЧас2.Час2, 0)) КАК Час2,
	        |	МАКСИМУМ(ЕСТЬNULL(ВТМинута1.Минута1, 0)) КАК Минута1,
	        |	МАКСИМУМ(ЕСТЬNULL(ВТМинута2.Минута2, 0)) КАК Минута2
            |ИЗ
	        |ВТЧас1 КАК ВТЧас1
		    |	ПОЛНОЕ СОЕДИНЕНИЕ ВТЧас2 КАК ВТЧас2
			|	ПОЛНОЕ СОЕДИНЕНИЕ ВТМинута1 КАК ВТМинута1
			| 	ПОЛНОЕ СОЕДИНЕНИЕ ВТМинута2 КАК ВТМинута2
			|		ПО (ИСТИНА)
			|	ПО (ИСТИНА)
			|ПО (ИСТИНА)";	
	
	Запрос.УстановитьПараметр("ТЗВремяПодачи", ТЗВремяПодачи);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		Если Результат[0].Час1 <> Null И Результат[0].Час2 <> Null 
			И Результат[0].Минута1 <> Null И Результат[0].Минута1 <> Null Тогда
			
			Часы = Число(Строка(Результат[0].Час1) + Результат[0].Час2);
			Минуты = Число(Строка(Результат[0].Минута1) + Результат[0].Минута2);
			
			Если Часы <= 23 И Минуты <= 59 Тогда
				Возврат Дата(0001, 01, 01, Часы, Минуты, 0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДату(ОбластьТекст)
	
	КС = Новый КвалификаторыСтроки(250);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ТЗВремяПодачи = Новый ТаблицаЗначений;
	ТЗВремяПодачи.Колонки.Добавить("Подача", Новый ОписаниеТипов("Строка",,,,КС));
	
	НоваяЗапись = ТЗВремяПодачи.Добавить();
	ОбластьТекстБезПробелов = СтрЗаменить(ОбластьТекст, " ", "");
	НоваяЗапись.Подача = ОбластьТекст;
		
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ВремяПодачи.Подача 
	              |ПОМЕСТИТЬ ВТВремяПодачи
	              |ИЗ
	              |	&ТЗВремяПодачи КАК ВремяПодачи";
	
	/////////////////////// 1 символ (дата) ///////////////////////
	МаскаДень1 = Новый Массив();
	МаскаДень1.Добавить("%[*][0-9]-[0-9][0-9]-[0-9][0-9]%");
	МаскаДень1.Добавить("%[*][0-9]-[0-9]-[0-9][0-9]%");
	
	МаскаДень1.Добавить("%[*][0-9].[0-9][0-9].[0-9][0-9]%");
	МаскаДень1.Добавить("%[*][0-9].[0-9].[0-9][0-9]%");	
	
	/////////////////////// 2 символ (дата) ///////////////////////
	МаскаДень2 = Новый Массив();
	МаскаДень2.Добавить("%[*]-[0-9][0-9]-[0-9][0-9]%");
	МаскаДень2.Добавить("%[*]-[0-9]-[0-9][0-9]%");
	
	МаскаДень2.Добавить("%[*].[0-9][0-9].[0-9][0-9]%");
	МаскаДень2.Добавить("%[*].[0-9].[0-9][0-9]%");
	
	/////////////////////// 1 символ (месяц) ///////////////////////
	МаскаМесяц1 = Новый Массив();
	МаскаМесяц1.Добавить("%[0-9]-[*][0-9]-[0-9][0-9]%");
	МаскаМесяц1.Добавить("%[0-9].[*][0-9].[0-9][0-9]%");
	
	
	/////////////////////// 2 символ (месяц) ///////////////////////
	МаскаМесяц2 = Новый Массив();
	МаскаМесяц2.Добавить("%[0-9]-[0-9][*]-[0-9][0-9]%");
	МаскаМесяц2.Добавить("%[0-9].[0-9][*].[0-9][0-9]%");
	//доб.маску если нет первого символа (месяц)
	МаскаМесяц2.Добавить("%[0-9]-[*]-[0-9][0-9]%");
	МаскаМесяц2.Добавить("%[0-9].[*].[0-9][0-9]%");

	/////////////////////// 1 символ (год) ///////////////////////
	МаскаГод1 = Новый Массив();
	МаскаГод1.Добавить("%[0-9]-[0-9][0-9]-[*][0-9]%");
	МаскаГод1.Добавить("%[0-9]-[0-9]-[*][0-9]%");
	
	МаскаГод1.Добавить("%[0-9]-[0-9][0-9]-[0-9][0-9][*][0-9]%");
	МаскаГод1.Добавить("%[0-9]-[0-9]-[0-9][0-9][*][0-9]%");
	
	МаскаГод1.Добавить("%[0-9].[0-9][0-9].[*][0-9]%");
	МаскаГод1.Добавить("%[0-9].[0-9].[*][0-9]%");
	
	МаскаГод1.Добавить("%[0-9].[0-9][0-9].[0-9][0-9][*][0-9]%");
	МаскаГод1.Добавить("%[0-9].[0-9].[0-9][0-9][*][0-9]%");
	
	/////////////////////// 2 символ (год) ///////////////////////
	МаскаГод2 = Новый Массив();
	МаскаГод2.Добавить("%[0-9]-[0-9][0-9]-[0-9][*]%");
	МаскаГод2.Добавить("%[0-9]-[0-9]-[0-9][*]%");
	
	МаскаГод2.Добавить("%[0-9]-[0-9][0-9]-[0-9][0-9][0-9][*]%");
	МаскаГод2.Добавить("%[0-9]-[0-9]-[0-9][0-9][0-9][*]%");
	
	МаскаГод2.Добавить("%[0-9].[0-9][0-9].[0-9][*]%");
	МаскаГод2.Добавить("%[0-9].[0-9].[0-9][*]%");
	
	МаскаГод2.Добавить("%[0-9].[0-9][0-9].[0-9][0-9][0-9][*]%");
	МаскаГод2.Добавить("%[0-9].[0-9].[0-9][0-9][0-9][*]%");

	МасМаскаДень1 = ПолучитьМаску(МаскаДень1, 3);
	МасМаскаДень2 = ПолучитьМаску(МаскаДень2, 9);
	МасМаскаМесяц1 = ПолучитьМаску(МаскаМесяц1, 1);
	МасМаскаМесяц2 = ПолучитьМаску(МаскаМесяц2, 9);
    МасМаскаГод1 = ПолучитьМаску(МаскаГод1, 2);
	МасМаскаГод2 = ПолучитьМаску(МаскаГод2, 9);
	
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаДень1, "День1");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаДень2, "День2");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаМесяц1, "Месяц1");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаМесяц2, "Месяц2");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаГод1, "Год1");
	Запрос.Текст = Запрос.Текст + ПолучитьЗапросВремяПодачиПоМаске(МасМаскаГод2, "Год2");
	
	Запрос.Текст = Запрос.Текст + ";
	        |ВЫБРАТЬ
			|	МАКСИМУМ(ЕСТЬNULL(ВТДень1.День1, 0)) КАК День1,
	        |	МАКСИМУМ(ЕСТЬNULL(ВТДень2.День2, 0)) КАК День2,
	        |	МАКСИМУМ(ЕСТЬNULL(ВТМесяц1.Месяц1, 0)) КАК Месяц1,
	        |	МАКСИМУМ(ЕСТЬNULL(ВТМесяц2.Месяц2, 0)) КАК Месяц2,
			|	МАКСИМУМ(ЕСТЬNULL(ВТГод1.Год1, 0)) КАК Год1,
	        |	МАКСИМУМ(ЕСТЬNULL(ВТГод2.Год2, 0)) КАК Год2
			|ИЗ       	    	
			|ВТДень1 КАК ВТДень1
			|	ПОЛНОЕ СОЕДИНЕНИЕ ВТДень2 КАК ВТДень2
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТМесяц2 КАК ВТМесяц2
			|			ПОЛНОЕ СОЕДИНЕНИЕ ВТМесяц1 КАК ВТМесяц1
			|			ПО (ИСТИНА)
			|			ПОЛНОЕ СОЕДИНЕНИЕ ВТГод1 КАК ВТГод1
			|				ПОЛНОЕ СОЕДИНЕНИЕ ВТГод2 КАК ВТГод2
			|				ПО (ИСТИНА)
			|			ПО (ИСТИНА)
			|		ПО (ИСТИНА)
			|	ПО (ИСТИНА)";	
			
	Запрос.УстановитьПараметр("ТЗВремяПодачи", ТЗВремяПодачи);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 1 Тогда
		Если Результат[0].День1 <> Null И Результат[0].День2 <> Null
			И Результат[0].Месяц1 <> Null И Результат[0].Месяц2 <> Null
			И Результат[0].Год1 <> Null И Результат[0].Год2 <> Null Тогда
			
			мДень = Число(Строка(Результат[0].День1) + Результат[0].День2);
			мМесяц = Число(Строка(Результат[0].Месяц1) + Результат[0].Месяц2);
			мГод = Число("20" + Строка(Результат[0].Год1) + Результат[0].Год2);		
			
			Если мДень <= 31 И мМесяц <= 12 И мГод <= 2025 Тогда
				Возврат Дата(мГод, мМесяц, мДень);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗапросВремяПодачиПоМаске(МасМаска, Период)
	
	ТекстЗапроса = "";
	Сч = 0;
	Для каждого Маска Из МасМаска Цикл
		Если Сч = 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|ВЫБРАТЬ
			|	ВремяПодачи.Подача,
			| МАКСИМУМ(" + Маска.Число + ") КАК " + Период + "
			|ПОМЕСТИТЬ ВТ" + Период + " 
			|ИЗ
			|	ВТВремяПодачи КАК ВремяПодачи
			|ГДЕ
			|	ВремяПодачи.Подача ПОДОБНО " + """" + Маска.Маска + """" + "
			|СГРУППИРОВАТЬ ПО
			|	ВремяПодачи.Подача";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ВремяПодачи.Подача,
			| " + Маска.Число + " КАК " + Период + "
			|ИЗ
			|	ВТВремяПодачи КАК ВремяПодачи
			|ГДЕ
			|	ВремяПодачи.Подача ПОДОБНО " + """" + Маска.Маска + """";
		КонецЕсли;
		Сч = Сч + 1;	
	КонецЦикла;
		
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////

#Область НачальноеЗаполнение

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Контрагент") Тогда
		Объект.Контрагент = Параметры.Контрагент;		
	КонецЕсли;
	
	Если Параметры.Свойство("ДополнительныеКолонки") Тогда
		мМассивРеквизитов = Новый Массив;
		
		фСтруктураДополнительныхКолонок = Новый СписокЗначений;
		фСтруктураДополнительныхКолонок.ЗагрузитьЗначения(Параметры.ДополнительныеКолонки);
		Для Каждого мЭлементСпискаДополнительныхКолонок Из фСтруктураДополнительныхКолонок Цикл
			мМассивРеквизитов.Добавить(Новый РеквизитФормы("" + мЭлементСпискаДополнительныхКолонок.Значение, Новый ОписаниеТипов("Число"), "Объект.Заявки", "" + мЭлементСпискаДополнительныхКолонок.Значение, Ложь));
		КонецЦикла;
	КонецЕсли;
	ИзменитьРеквизиты(мМассивРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Фильтр = "Файлы Excel (*.xls;*.xlsx)|*.xls;*.xlsx|";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ИмяФайла = ДиалогОткрытияФайла.ВыбранныеФайлы[0];
	Иначе
		Предупреждение("Файл не выбран!");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьExcelИЗагрузитьТЗ(АдресВременногоХранилища);
	
	ДД = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);     
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx"); 
    ДД.Записать(ИмяВременногоФайла); 
	
	ТабДокумент.Очистить();
	ТабДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	УдалитьФайлы(ИмяВременногоФайла);
	
	АналитикаПоиска.Очистить();
	ТЗТипыТС.Очистить();
	ТЗТС.Очистить();
	ТЗЦехаКонтрагента.Очистить();
	ТЗРежимыРаботыТС.Очистить();
	ТЗКонтактныеЛицаКонтрагентов.Очистить();
	
	//Заполнение первоначальных данных
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	юкАналитикаПоискаExcel.Значение,
	               |	юкАналитикаПоискаExcel.Контрагент,
	               |	юкАналитикаПоискаExcel.Объект
	               |ИЗ
	               |	РегистрСведений.юкАналитикаПоискаExcel КАК юкАналитикаПоискаExcel
	               |ГДЕ
	               |	юкАналитикаПоискаExcel.Контрагент = &Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	уатТипыТС.Ссылка,
	               |	уатТипыТС.Наименование
	               |ИЗ
	               |	Справочник.уатТипыТС КАК уатТипыТС
	               |ГДЕ
	               |	уатТипыТС.ЭтоГруппа = ЛОЖЬ
	               |	И уатТипыТС.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	уатТС.Ссылка,
	               |	уатТС.Наименование
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.ЭтоГруппа = ЛОЖЬ
	               |	И уатТС.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦехаКонтрагента.Ссылка,
	               |	ЦехаКонтрагента.Наименование
	               |ИЗ
	               |	Справочник.ЦехаКонтрагента КАК ЦехаКонтрагента
	               |ГДЕ
	               |	ЦехаКонтрагента.ЭтоГруппа = ЛОЖЬ
	               |	И ЦехаКонтрагента.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	уатРежимыРаботыТС.Ссылка,
	               |	уатРежимыРаботыТС.Наименование
	               |ИЗ
	               |	Справочник.уатРежимыРаботыТС КАК уатРежимыРаботыТС
	               |ГДЕ
	               |	уатРежимыРаботыТС.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтактныеЛицаКонтрагентов.Ссылка,
	               |	КонтактныеЛицаКонтрагентов.Наименование
	               |ИЗ
	               |	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	               |ГДЕ
	               |	КонтактныеЛицаКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	               
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	ВыборкаДляАналитики = МассивРезультатов[0].Выбрать();
	Пока ВыборкаДляАналитики.Следующий() Цикл
		НоваяАналитика = АналитикаПоиска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяАналитика, ВыборкаДляАналитики, , "Значение");
		НоваяАналитика.Значение = НРЕГ(ВыборкаДляАналитики.Значение);
	КонецЦикла;	
	ТЗТипыТС.Загрузить(МассивРезультатов[1].Выгрузить());
	ТЗТС.Загрузить(МассивРезультатов[2].Выгрузить());
	ТЗЦехаКонтрагента.Загрузить(МассивРезультатов[3].Выгрузить());
	ТЗРежимыРаботыТС.Загрузить(МассивРезультатов[4].Выгрузить());
	ТЗКонтактныеЛицаКонтрагентов.Загрузить(МассивРезультатов[5].Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзменении_Зявки

&НаКлиенте
Процедура ЗаявкиПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заявки.ТекущиеДанные;
	ТЧКолонка = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "Заявки", "");
	тСтрока = ТекДанные[ТЧКолонка];
	тСтрокаExcel = ТекДанные[ТЧКолонка + "Excel"];

	Если Не ЗначениеЗаполнено(тСтрокаExcel) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(тСтрока) = Тип("Число") ИЛИ ТипЗнч(тСтрока) = Тип("Строка") ИЛИ ТипЗнч(тСтрока) = Тип("Булево") Тогда
		Возврат;
	КонецЕсли;	
		
	ДобавитьЗаписьАналитикуФорма(тСтрока, тСтрокаExcel);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Значение", НРег(тСтрокаExcel));
	Отбор.Вставить("Контрагент", Объект.Контрагент);
	Строки = НайтиСтрокиПоАналитике(Отбор, ТипЗнч(тСтрока));
	Для каждого СтрокаЭлемента Из Строки Цикл
		Если СтрокаЭлемента.Объект <> тСтрока Тогда
			СтрокаЭлемента.Объект = тСтрока;
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Парам = Новый Структура;
			Парам.Вставить("ТЧКолонка", ТЧКолонка);
			Парам.Вставить("тСтрока", тСтрока);
			Парам.Вставить("тСтрокаExcel", тСтрокаExcel);
			Оповещение = Новый ОписаниеОповещения("ПослеВопросаПерезаполнения", ЭтаФорма, Парам);
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Перезаполнить строки с такими же данными Excel?';"
			+ " en = 'Do rewrite a rows with the Excel data?'"), Режим, 0);
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПерезаполнения(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	Для каждого Заявка Из Объект.Заявки Цикл
		Если Заявка[Параметры.ТЧКолонка + "Excel"] = Параметры.тСтрокаExcel Тогда
			Заявка[Параметры.ТЧКолонка] = Параметры.тСтрока;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьЗаписьАналитикуФорма(СоответствиеРеквизита, СтрокаТЧ)
	РеквизитФормыВЗначение("Объект").ДобавитьЗаписьАналитику(СоответствиеРеквизита, СтрокаТЧ, Объект.Контрагент);	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Загрузить(Команда)
	
	Перем ВыбКонтрагент;
		
	Если ПустаяСтрока(Объект.ИмяФайла) Тогда
		ПоказатьПредупреждение(,"Для запуска обработки необходимо предварительно выбрать файл Microsoft Excel.", 10);
		Возврат;
	КонецЕсли;

	Если Объект.Заявки.Количество() > 0 Тогда
		Объект.Заявки.Очистить();		
	КонецЕсли;	
	
	НомСтрЗаголовка = 0;
	Объект.ЗаголовкиExcel.Очистить();
	Объект.ВыбранныеКолонки.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПослеВыбораКонтрагента(Объект.Контрагент, Неопределено);
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораКонтрагента", ЭтаФорма);
		ПоказатьВводЗначения(Оповещение, ВыбКонтрагент, "Укажите контрагента заявки:", ОписаниеТипа);
	КонецЕсли;	
	             		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКонтрагента(ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Объект.Контрагент = ВыбранноеЗначение;
		
		// Алексей: теперь поддерживаем многострочные заголовки и пустые стобцы-отступы слева
		мСтруктураЗаголовка = ПолучитьНомСтрЗаголовкoвExcel();
		НомСтрЗаголовка = мСтруктураЗаголовка.Верх;
		НомСтрЗаголовкаНиз = мСтруктураЗаголовка.Низ;
		
		мЗаголовки = ПолучитьЗаголовкиExcel(ТабДокумент, НомСтрЗаголовка, НомСтрЗаголовкаНиз);
		
		Для каждого мЗаголовокExcel Из мЗаголовки Цикл
			Ошибка = Найти(мЗаголовокExcel.Представление, ";");
			Если Ошибка <> 0 Тогда
				ПоказатьПредупреждение(,"В заголовке таблицы """ + СокрЛП(мЗаголовокExcel.Представление) + """ нельзя использовать символ "";"". Удалите символ и загрузите документ снова!", 20, "Ошибка заголовка таблицы Excel");
				Продолжить;
			КонецЕсли;
			// Алексей: контроль уникальности
			мОтборПоЗначению = Новый Структура("Значение", мЗаголовокExcel.Представление);
			мСтрокиСоЗначением = Объект.ЗаголовкиExcel.НайтиСтроки(мОтборПоЗначению);
			Если мСтрокиСоЗначением.Количество() = 0 Тогда
				НоваяСтрока = Объект.ЗаголовкиExcel.Добавить();
				НоваяСтрока.НомерСтолбца = мЗаголовокExcel.Значение;
				НоваяСтрока.Значение = мЗаголовокExcel.Представление;
			Иначе
				мСтрока = мСтрокиСоЗначением[0];
				мСтрока.НомерСтолбца = Мин(мСтрока.НомерСтолбца, мЗаголовокExcel.Значение);
			КонецЕсли;
		КонецЦикла;
		
		КолонкиТЧ = НайтиЗаголовкиТЧ();
		
		// Алексей: через параметры принимаем список дополнительных колонок
		Если фСтруктураДополнительныхКолонок <> Неопределено Тогда
			Для Каждого мДопКолонка Из фСтруктураДополнительныхКолонок Цикл
				мНоваяКолонка = Новый Структура;
				мНоваяКолонка.Вставить("Имя", мДопКолонка.Значение);
				мНоваяКолонка.Вставить("ИмяExcel", "");
				мНоваяКолонка.Вставить("Тип", Новый ОписаниеТипов("Число"));
				мНоваяКолонка.Вставить("КолонкаExcel", 0);
				мНоваяКолонка.Вставить("ДополнительнаяКолонкаИзПараметров", Истина);
				мНоваяКолонка.Вставить("ОсновнаяКолонкаМесяца", Найти("ЯнварьФевральМартАпрельМайИюньИюльАвгустСентябрьОктябрьНоябрьДекабрь", мДопКолонка.Значение) > 0);
				мНоваяКолонка.Вставить("СмещениеОтОсновнойКолонки", Истина);
				КолонкиТЧ.Добавить(мНоваяКолонка);
			КонецЦикла;
		КонецЕсли;
		
		МасПроцентExcel = Новый Массив();
		Для каждого СтрокаТЧ Из КолонкиТЧ Цикл
			КолонкаПроцентExcel = НайтиНомерКолонкиExcel(СтрокаТЧ.Имя, мЗаголовки);
			Если КолонкаПроцентExcel <> Неопределено Тогда
				СтрокаТЧ.КолонкаExcel = КолонкаПроцентExcel[0];
				СтрПроцентExcel = Новый Структура;
				СтрПроцентExcel.Вставить("КолонкаExcel", КолонкаПроцентExcel[0]);
				СтрПроцентExcel.Вставить("ИмяСтолбцаТЧ", КолонкаПроцентExcel[1]);
				СтрПроцентExcel.Вставить("ПроцентExcel", КолонкаПроцентExcel[2]);
				МасПроцентExcel.Добавить(СтрПроцентExcel);
			КонецЕсли;				
		КонецЦикла;
		
		ТабДокументОбразец = ОбрезатьТабличныйДокумент(ТабДокумент, НомСтрЗаголовка);		
				
		П = Новый Структура;
		П.Вставить("ЗаголовкиExcel", мЗаголовки);
		П.Вставить("КолонкиТЧ", КолонкиТЧ);
		П.Вставить("МасПроцентExcel", МасПроцентExcel);
		П.Вставить("ТабДокументОбразец", ТабДокументОбразец);
		П.Вставить("Контрагент", Объект.Контрагент);
		П.Вставить("НомСтрЗаголовка", НомСтрЗаголовка);
		П.Вставить("ЗакрыватьПриВыборе", Истина);
		ОповещениеОВыборе = Новый ОписаниеОповещения("ВыполнитьЗаполнениеПослеВыбора", ЭтаФорма, П);
		ОткрытьФорму("Обработка.юкУниверсальнаяОбработкаЗагрузкиЗаявок.Форма.ФормаСтолбцов", П, ЭтаФорма,,,, ОповещениеОВыборе);
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Функция ПолучитьНомСтрЗаголовкoвExcel()
	мВерхняяГраницаЗаголовка = Неопределено;
	мНижняяГраницаЗаголовка = Неопределено;
	
	Двоичное = Новый ДвоичныеДанные(Объект.ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное, ЭтаФорма.УникальныйИдентификатор);
	
	ПрочитатьExcelИЗагрузитьТЗ(Адрес);
	
	Для Итр = 1 По Мин(ТабДокумент.ВысотаТаблицы, 15) Цикл
		Область = ТабДокумент.Область("R" + Формат(Итр, "ЧГ=") + "C1");
		Если Область.Текст = "" И мВерхняяГраницаЗаголовка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ГраницаСверху = Область.ГраницаСверху;
		ГраницаСнизу = Область.ГраницаСнизу;
		Если ТипЗнч(ГраницаСверху) = Тип("Линия") Тогда
			Если мВерхняяГраницаЗаголовка = Неопределено И (ГраницаСверху.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная 
				ИЛИ ГраницаСверху.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Двойная) Тогда
				мВерхняяГраницаЗаголовка = Итр;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ГраницаСнизу) = Тип("Линия") Тогда
			Если мВерхняяГраницаЗаголовка <> Неопределено И мНижняяГраницаЗаголовка = Неопределено И (ГраницаСнизу.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная 
				ИЛИ ГраницаСнизу.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Двойная) Тогда
				мНижняяГраницаЗаголовка = Итр;
			КонецЕсли;
		КонецЕсли;
		Если мВерхняяГраницаЗаголовка <> Неопределено И мНижняяГраницаЗаголовка <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	вСтруктураЗаголовка = Новый Структура("Верх, Низ", мВерхняяГраницаЗаголовка, мНижняяГраницаЗаголовка);
	Возврат вСтруктураЗаголовка;
КонецФункции	

&НаКлиенте
Функция ПоискПостоянногоЗначения(Итр)
	
	пРезультат = Новый Структура;
	пРезультат.Вставить("КолЗапКолонок", 0);
	пРезультат.Вставить("ПостоянноеЗначение", "");
	
	ИтрШирина = 1;
	Пока ИтрШирина <= ТабДокумент.ШиринаТаблицы Цикл
		Область = ТабДокумент.Область("R" + Формат(Итр, "ЧГ=") + "C" + Формат(ИтрШирина, "ЧГ="));
		Если ЗначениеЗаполнено(Область.Текст) Тогда
			пРезультат.КолЗапКолонок = пРезультат.КолЗапКолонок + 1;
			пРезультат.ПостоянноеЗначение = пРезультат.ПостоянноеЗначение + СокрЛП(СтрЗаменить(Область.Текст, """", " "));
		КонецЕсли;
		ИтрШирина = ИтрШирина + 1;
	КонецЦикла;

	Возврат пРезультат;

КонецФункции	

&НаКлиенте
Функция ЕстьЗаполенныеПоляПоВыбраннымКолонкам(Итр)
	
	КолЗапКолонок = 0;
	Для каждого Колонка Из Объект.ВыбранныеКолонки Цикл
		Если Колонка.КолонкаExcel = "" ИЛИ Колонка.Фикс Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Найти(Колонка.НомерКолонкиExcel, ";") <> 0 Тогда
			МасКолонки = РазложитьСтрокуВМассив(Колонка.НомерКолонкиExcel, ";");
			Для каждого МасКолонка Из МасКолонки Цикл
				Область = ТабДокумент.Область("R" + Формат(Итр, "ЧГ=") + "C" + Формат(МасКолонка, "ЧГ="));
				Если ЗначениеЗаполнено(Область.Текст) Тогда
					КолЗапКолонок = КолЗапКолонок + 1;					
				КонецЕсли;
			КонецЦикла;	
		Иначе
			Область = ТабДокумент.Область("R" + Формат(Итр, "ЧГ=") + "C" + Формат(Колонка.НомерКолонкиExcel, "ЧГ="));
			Если ЗначениеЗаполнено(Область.Текст) Тогда
				КолЗапКолонок = КолЗапКолонок + 1;					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
		
	Если КолЗапКолонок = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции	
	
&НаКлиенте
Процедура ЗаполнитьЗаявки(РезультатВыбора = Неопределено, ДопПараметры = Неопределено)
	
	КолонкиТЧ = ДопПараметры.КолонкиТЧ;
		 						
	Если РезультатВыбора <> Неопределено Тогда
		Итр = НомСтрЗаголовка;
		Если ЗначениеЗаполнено(РезультатВыбора.СоответствиеРеквизита) Тогда
			ДобавитьАналитикуДляПоиска(РезультатВыбора.СтрокаТЧ, РезультатВыбора.СоответствиеРеквизита, Объект.Контрагент);
		КонецЕсли;	
		БыстрыйВыбор = РезультатВыбора.БыстрыйВыбор;
	Иначе	
		Итр = НомСтрЗаголовка + 1;
	КонецЕсли;
	
	Пока Итр <= ТабДокумент.ВысотаТаблицы Цикл
		
		//Ищем есть ли хоть одно заполненное значение по выбранным колонкам
		ЕстьЗаполВыбПоля = ЕстьЗаполенныеПоляПоВыбраннымКолонкам(Итр);
		//
		
		////// + Алексей, ЗАКОММЕНТИРОВАНО 27.07.2020 - вывести из цикла или ввести признак наличия (уже найденного)/(указанного вручную) реквизита ПостоянноеЗначение
		////Ищем ПостоянноеЗначение
		//пРезультат = ПоискПостоянногоЗначения(Итр);
		//Если пРезультат.КолЗапКолонок = 0 Тогда
		//	Итр = Итр + 1;
		//	Продолжить;
		//ИначеЕсли пРезультат.КолЗапКолонок >= 1 И пРезультат.КолЗапКолонок <= 2 Тогда
		//	ПостоянноеЗначение = пРезультат.ПостоянноеЗначение;
		//	Итр = Итр + 1;
		//	Продолжить;
		//ИначеЕсли ЕстьЗаполВыбПоля = Ложь Тогда
		//	Итр = Итр + 1;
		//	Продолжить;
		//КонецЕсли;	
		////
		////// - Алексей, ЗАКОММЕНТИРОВАНО 27.07.2020
		
		Если РезультатВыбора <> Неопределено Тогда
			НоваяЗаявка = Объект.Заявки[Объект.Заявки.Количество()-1];
		Иначе
			НоваяЗаявка = Объект.Заявки.Добавить();
		КонецЕсли;
		//НоваяЗаявка.ПостоянноеЗначение = ПостоянноеЗначение;
		
		//Полоса прокрутки вниз
		КолСтрок = Объект.Заявки.Количество()-1;
		Если КолСтрок > 10 Тогда
			Элементы.Заявки.ТекущаяСтрока = КолСтрок;
		КонецЕсли;
		
		Для каждого Колонка Из Объект.ВыбранныеКолонки Цикл
			
			Если Колонка.КолонкаТЧ = "Количество ТС" И Не ЗначениеЗаполнено(Колонка.КолонкаExcel) Тогда
				НоваяЗаявка["КоличествоТС"] = 1;
				Продолжить;	
			КонецЕсли;
			
			Если Колонка.КолонкаТЧ = "Смена" И Не ЗначениеЗаполнено(Колонка.КолонкаExcel) Тогда
				НоваяЗаявка["Смена"] = 1;
				Продолжить;	
			КонецЕсли;
			
			Если Колонка.КолонкаExcel = "" Тогда
				Продолжить;	
			КонецЕсли;
			
			ОбластьТекст = "";
			Сч = 0;
			Если НЕ Колонка.Фикс Тогда
				//Несколько колонок
				Если Найти(Колонка.НомерКолонкиExcel, ";") <> 0 Тогда
					МасКолонки = РазложитьСтрокуВМассив(Колонка.НомерКолонкиExcel, ";");
					Для каждого МасКолонка Из МасКолонки Цикл
						МасОбласть = ТабДокумент.Область("R" + Формат(Итр, "ЧГ=") + "C" + Формат(МасКолонка, "ЧГ="));
						ОбластьТекст = ?(Сч = 0, СокрЛП(СтрЗаменить(МасОбласть.Текст, """", " ")), ОбластьТекст + ";" + СокрЛП(СтрЗаменить(МасОбласть.Текст, """", " ")));
						Сч = Сч + 1;
					КонецЦикла;	
				Иначе
					Область = ТабДокумент.Область("R" + Формат(Итр, "ЧГ=") + "C" + Формат(Колонка.НомерКолонкиExcel, "ЧГ="));
					ОбластьТекст = СокрЛП(СтрЗаменить(Область.Текст, """", " "));
				КонецЕсли;
			КонецЕсли;
				
			Если ОбластьТекст <> "" ИЛИ Колонка.Фикс Тогда
				Для каждого ЭлементТЧ Из КолонкиТЧ Цикл
					Если Колонка.КолонкаТЧ = ЭлементТЧ.Имя Тогда
						Если ЭлементТЧ.ИмяExcel <> "" Тогда НоваяЗаявка[ЭлементТЧ.ИмяExcel] = ОбластьТекст; КонецЕсли;
												
						Типы = ЭлементТЧ.Тип.Типы();
						Для каждого кТип Из Типы Цикл
							ИмяКолонки = СтрЗаменить(ТРег(Колонка.КолонкаТЧ), " ", "");
							
							Если РезультатВыбора <> Неопределено И ИмяКолонки = РезультатВыбора.ИмяКолонки Тогда
								НоваяЗаявка[ИмяКолонки] = РезультатВыбора.СоответствиеРеквизита;
								РезультатВыбора = Неопределено;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли РезультатВыбора <> Неопределено И ИмяКолонки <> РезультатВыбора.ИмяКолонки Тогда
								Продолжить;
							КонецЕсли;
							
							Если Колонка.Фикс Тогда
								НоваяЗаявка[ИмяКолонки] = Колонка.ФиксЗначение;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							КонецЕсли;
							
							Если кТип = Тип("СправочникСсылка.уатТипыТС") Тогда
								Отбор = Новый Структура();
								Отбор.Вставить("Значение", НРег(ОбластьТекст));
								Отбор.Вставить("Контрагент", Объект.Контрагент);
								Строки = АналитикаПоиска.НайтиСтроки(Отбор);
								Если Строки.Количество() > 0 Тогда
									НоваяЗаявка[ИмяКолонки] = Строки[0].Объект;
									НоваяЗаявка.Пометка = Истина;
								Иначе
									НомСтрЗаголовка = Итр;
									МасТип = НайтиСовпадениеТипТС(кТип, ОбластьТекст, ТЗТипыТС, ТЗТС);
									П = Новый Структура;
									П.Вставить("СтрокаТЧ", ОбластьТекст);
									П.Вставить("МасТип", МасТип);
									П.Вставить("Контрагент", Объект.Контрагент);
									П.Вставить("кТипы", Типы);
									П.Вставить("ИмяКолонки", ИмяКолонки);
									П.Вставить("БыстрыйВыбор", БыстрыйВыбор);
									П.Вставить("Заголовок", Колонка.КолонкаТЧ);
									П.Вставить("ЗакрыватьПриВыборе", Истина);
									ОповещениеОВыборе = Новый ОписаниеОповещения("ВыполнитьЗаполнениеПослеВыбора", ЭтаФорма, ДопПараметры);
									ОткрытьФорму("Обработка.юкУниверсальнаяОбработкаЗагрузкиЗаявок.Форма.ФормаСоответствия", П, ЭтаФорма,,,, ОповещениеОВыборе);
									Возврат;
								КонецЕсли;
					        	Прервать;
							ИначеЕсли кТип = Тип("СправочникСсылка.уатМаршруты") ИЛИ кТип = Тип("СправочникСсылка.ЦехаКонтрагента") Тогда
								Если кТип = Тип("СправочникСсылка.уатМаршруты") Тогда
									Продолжить;
								КонецЕсли;
								Отбор = Новый Структура();
								Отбор.Вставить("Значение", НРег(ОбластьТекст));
								Отбор.Вставить("Контрагент", Объект.Контрагент);
								//Строки = АналитикаПоиска.НайтиСтроки(Отбор);
								Строки = НайтиСтрокиПоАналитике(Отбор, кТип);
								Если Строки.Количество() > 0 Тогда
									НоваяЗаявка[ИмяКолонки] = Строки[0].Объект;
									НоваяЗаявка.Пометка = Истина;
								Иначе
									НомСтрЗаголовка = Итр;
									МасТип = НайтиСовпадениеТипТС(кТип, ОбластьТекст, ТЗЦехаКонтрагента, Неопределено);
									П = Новый Структура;
									П.Вставить("СтрокаТЧ", ОбластьТекст);
									П.Вставить("МасТип", МасТип);
									П.Вставить("Контрагент", Объект.Контрагент);
									П.Вставить("кТипы", Типы);
									П.Вставить("ИмяКолонки", ИмяКолонки);
									П.Вставить("БыстрыйВыбор", БыстрыйВыбор);
									П.Вставить("Заголовок", Колонка.КолонкаТЧ);
									П.Вставить("ЗакрыватьПриВыборе", Истина);
									ОповещениеОВыборе = Новый ОписаниеОповещения("ВыполнитьЗаполнениеПослеВыбора", ЭтаФорма, ДопПараметры);
									ОткрытьФорму("Обработка.юкУниверсальнаяОбработкаЗагрузкиЗаявок.Форма.ФормаСоответствия", П, ЭтаФорма,,,, ОповещениеОВыборе);
									Возврат;
								КонецЕсли;
								Прервать;
							ИначеЕсли кТип = Тип("СправочникСсылка.уатРежимыРаботыТС") Тогда
								Отбор = Новый Структура();
								Отбор.Вставить("Значение", НРег(ОбластьТекст));
								Отбор.Вставить("Контрагент", Объект.Контрагент);
								Строки = АналитикаПоиска.НайтиСтроки(Отбор);
								Если Строки.Количество() > 0 Тогда
									НоваяЗаявка[ИмяКолонки] = Строки[0].Объект;
									НоваяЗаявка.Пометка = Истина;
								Иначе
									НомСтрЗаголовка = Итр;
									МасТип = НайтиСовпадениеТипТС(кТип, ОбластьТекст, ТЗРежимыРаботыТС, Неопределено);
									П = Новый Структура;
									П.Вставить("СтрокаТЧ", ОбластьТекст);
									П.Вставить("МасТип", МасТип);
									П.Вставить("Контрагент", Объект.Контрагент);
									П.Вставить("кТип", кТип);
									П.Вставить("ИмяКолонки", ИмяКолонки);
									П.Вставить("БыстрыйВыбор", БыстрыйВыбор);
									П.Вставить("Заголовок", Колонка.КолонкаТЧ);
									П.Вставить("ЗакрыватьПриВыборе", Истина);
									ОповещениеОВыборе = Новый ОписаниеОповещения("ВыполнитьЗаполнениеПослеВыбора", ЭтаФорма, ДопПараметры);	
									ОткрытьФорму("Обработка.юкУниверсальнаяОбработкаЗагрузкиЗаявок.Форма.ФормаСоответствия", П, ЭтаФорма,,,, ОповещениеОВыборе);
									Возврат;
								КонецЕсли;
								Прервать;
							ИначеЕсли кТип = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
								Отбор = Новый Структура();
								Отбор.Вставить("Значение", НРег(ОбластьТекст));
								Отбор.Вставить("Контрагент", Объект.Контрагент);
								Строки = АналитикаПоиска.НайтиСтроки(Отбор);
								Если Строки.Количество() > 0 Тогда
									НоваяЗаявка[ИмяКолонки] = Строки[0].Объект;
									НоваяЗаявка.Пометка = Истина;
								Иначе
									НомСтрЗаголовка = Итр;
									МасТип = НайтиСовпадениеТипТС(кТип, ОбластьТекст, ТЗКонтактныеЛицаКонтрагентов, Неопределено);
									П = Новый Структура;
									П.Вставить("СтрокаТЧ", ОбластьТекст);
									П.Вставить("МасТип", МасТип);
									П.Вставить("Контрагент", Объект.Контрагент);
									П.Вставить("кТип", кТип);
									П.Вставить("ИмяКолонки", ИмяКолонки);
									П.Вставить("БыстрыйВыбор", БыстрыйВыбор);
									П.Вставить("Заголовок", Колонка.КолонкаТЧ);
									П.Вставить("ЗакрыватьПриВыборе", Истина);
									ОповещениеОВыборе = Новый ОписаниеОповещения("ВыполнитьЗаполнениеПослеВыбора", ЭтаФорма, ДопПараметры);
									ОткрытьФорму("Обработка.юкУниверсальнаяОбработкаЗагрузкиЗаявок.Форма.ФормаСоответствия", П, ЭтаФорма,,,, ОповещениеОВыборе);
									Возврат;
								КонецЕсли;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Количество ТС" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Работа с" Тогда
								НоваяЗаявка[ИмяКолонки] = ПолучитьДату(ОбластьТекст);
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Дней работы" Тогда
								НоваяЗаявка[ИмяКолонки] = ПолучитьДнейРаботы(ОбластьТекст);
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Смена" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Время подачи" Тогда
								НоваяЗаявка[ИмяКолонки] = ПолучитьВремяПодачи(ОбластьТекст);
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Суточный пробег" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Комментарий" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Режим работы" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Ответственный" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Место оказания услуг" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Позиция ПП" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							ИначеЕсли Колонка.КолонкаТЧ = "Количество часов" Тогда
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							Иначе
								НоваяЗаявка[ИмяКолонки] = ОбластьТекст;
								НоваяЗаявка.Пометка = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Итр = Итр + 1;
	КонецЦикла;
	
	//------------------------------- Корректировка ТЧ -------------------------------
	//по Кол-ву
	КолЗаполнено = Ложь;
	Отбор = Новый Структура("КолонкаТЧ", "Количество ТС");
	КолНайти = Объект.ВыбранныеКолонки.НайтиСтроки(Отбор);
	Если КолНайти.Количество() > 0 Тогда
		КолЗаполнено = ?(КолНайти[0].КолонкаExcel <> "", Истина, Ложь); 		
	КонецЕсли;
	
	Сч = 0;
	Пока Сч <= Объект.Заявки.Количество()-1 Цикл
		Если НЕ Объект.Заявки[Сч].Пометка Тогда
			Объект.Заявки.Удалить(Сч);
			Сч = ?(Сч <> 0, Сч - 1, 0);
			Продолжить;
		КонецЕсли;		
				
		Если НЕ КолЗаполнено Тогда
			Объект.Заявки[Сч].КоличествоТС = 1;			
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция НайтиСовпадениеТипТС(кТип, ОбластьТекст, Знач ТЗТипыТС, Знач ТЗТС)
	
	ТЗТип = НайтиСовпадениеСтрокиСОбъектом(кТип, ОбластьТекст, ТЗТипыТС);
	
	Если ТЗТС <> Неопределено Тогда
		ТЗОТС = НайтиСовпадениеСтрокиСОбъектом(Тип("СправочникСсылка.уатТС"), ОбластьТекст, ТЗТС);	
		Для каждого ТипТС Из ТЗОТС Цикл
			НовыйТип = ТЗТип.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйТип, ТипТС);
		КонецЦикла;	
	КонецЕсли;
	
	ТЗТип.Свернуть("Ссылка", "Процент");
	ТЗТип.Сортировать("Процент Убыв, Ссылка Возр");
	
	МасТип = Новый Массив();
	Для каждого ЭлементТип Из ТЗТип Цикл
	    СтрТип = Новый Структура;
		СтрТип.Вставить("Ссылка", ЭлементТип.Ссылка);
		СтрТип.Вставить("Процент", ЭлементТип.Процент);
		МасТип.Добавить(СтрТип);	
	КонецЦикла;         	
	
	Если МасТип.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МасТип;
	КонецЕсли;	
		
КонецФункции 

&НаКлиенте
Процедура ВыполнитьЗаполнениеПослеВыбора(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("ДанныеФормыСтруктура") Тогда
		КопироватьДанныеФормы(РезультатВыбора.ВыбранныеКолонки, Объект.ВыбранныеКолонки);
		ЗаполнитьЗаявки(Неопределено, ДопПараметры);
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		ЗаполнитьЗаявки(РезультатВыбора, ДопПараметры);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииОбновитьАналитикуПоиска()
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьВыгрузкуНаСервере()
	
	ПриЗакрытииОбновитьАналитикуПоиска();
	
	МасДанных = Новый Массив();
	
	Для каждого Заявка Из Объект.Заявки Цикл
		ДанныеДляВыгрузки = Новый Структура;
		ДанныеДляВыгрузки.Вставить("ТипТС", "");
		ДанныеДляВыгрузки.Вставить("ЦехМаршрут", "");
		ДанныеДляВыгрузки.Вставить("КоличествоТС", "");
		ДанныеДляВыгрузки.Вставить("ПозицияПП", "");
		ДанныеДляВыгрузки.Вставить("РаботаС", "");
		ДанныеДляВыгрузки.Вставить("ДнейРаботы", "");
		ДанныеДляВыгрузки.Вставить("Смены", "");
		ДанныеДляВыгрузки.Вставить("ВремяПодачи", "");
		ДанныеДляВыгрузки.Вставить("Ответственный", "");
		ДанныеДляВыгрузки.Вставить("РежимРаботы", "");
		ДанныеДляВыгрузки.Вставить("СуточныйПробег", "");
		ДанныеДляВыгрузки.Вставить("Комментарий", "");
		ДанныеДляВыгрузки.Вставить("МестоОказанияУслуг", "");
		ДанныеДляВыгрузки.Вставить("ПостоянноеЗначение", "");
		ДанныеДляВыгрузки.Вставить("КоличествоЧасов", "");
		Для Каждого мДополнительнаяКолонка Из фСтруктураДополнительныхКолонок Цикл
			ДанныеДляВыгрузки.Вставить("" + СокрЛП(мДополнительнаяКолонка.Значение));
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ДанныеДляВыгрузки, Заявка);
		
		ДанныеДляВыгрузки.Вставить("СтрокаИсходныхДанных", Строка(Заявка.ТипТСExcel) 
		                                                   + "&" + Заявка.ЦехМаршрутExcel
														   + "&" + Заявка.КоличествоТСExcel
														   + "&" + Заявка.РаботаСExcel
														   + "&" + Заявка.ДнейРаботыExcel
														   + "&" + Заявка.СменаExcel
														   + "&" + Заявка.ВремяПодачиExcel
														   + "&" + Заявка.ОтветственныйExcel
														   + "&" + Заявка.РежимРаботыExcel
														   + "&" + Заявка.СуточныйПробегExcel
														   + "&" + Заявка.МестоОказанияУслуг);					
		
		МасДанных.Добавить(ДанныеДляВыгрузки);
	КонецЦикла;
	
	Возврат МасДанных;

КонецФункции	

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Закрыть(ПолучитьВыгрузкуНаСервере());
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Закрыть(ПолучитьВыгрузкуНаСервере());
	
КонецПроцедуры



	

	


