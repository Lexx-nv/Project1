
Процедура Заполнить(ссПутЛист = Неопределено, Контрагент = Неопределено, пМассивПутевых = Неопределено) Экспорт
	
	Если ссПутЛист <> Неопределено Тогда
		Дата1 = ссПутЛист.Дата;
		Дата2 = ссПутЛист.Дата;
	Конецесли;
	
	ОтборПоКонтрагенту = ЗначениеЗаполнено(Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПутевойЛист.Ссылка КАК ПутевойЛист,
	               |	уатПутевойЛист.Организация.НаименованиеПолное КАК Организация,
	               |	уатПутевойЛист.Номер КАК Номер,
	               |	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	               |	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	               |	уатПутевойЛист.ТранспортноеСредство,
	               |	уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КАК ГарНом,
	               |	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосНом,
				   
				   //+Lexx - договор берем из реквизита "ПрейскурантПлан" путевого листа
	               |	уатПутевойЛист.ПрейскурантПлан.Договор КАК Договор,
	               |	уатПутевойЛист.ПрейскурантПлан.Договор.Номер КАК ДоговорНомер,
				   //-Lexx - договор берем из реквизита "ПрейскурантПлан" путевого листа
				   
	               |	уатПутевойЛист.ПозицияПП КАК НомерПП,
	               |	уатПутевойЛистПрицепы.ТС КАК Прицеп,
	               |	уатПутевойЛистПрицепы.ТС.ГаражныйНомер КАК ГарНомПрц,
	               |	уатПутевойЛистПрицепы.ТС.ГосударственныйНомер КАК ГосНомПрц,
	               |	уатПутевойЛист.Водитель1,
	               |	уатПутевойЛист.Водитель1.Код КАК Водитель1Код,
	               |	уатПутевойЛист.Водитель2,
	               |	уатПутевойЛист.Водитель2.Код КАК Водитель2Код,
	               |	уатПутевойЛист.Контрагент КАК Контрагент,
	               |	ISNULL(РегСМА3.НаименованиеЗаказчика, ISNULL(РегСМА2.НаименованиеЗаказчика,РегСМА1.НаименованиеЗаказчика) ) КАК КонтрагентИмяСМА,
	               |	уатПутевойЛист.ЦехКонтрагента,
				   |	ВЫБОР
				   |		КОГДА уатПутевойЛист.ЦехКонтрагента.МесторождениеДляСМА = """"
				   |			ТОГДА уатПутевойЛист.ЦехКонтрагента.Месторождение
				   |		ИНАЧЕ уатПутевойЛист.ЦехКонтрагента.МесторождениеДляСМА
				   |	КОНЕЦ КАК Месторождение,
				   
				   |	уатПутевойЛист.ЦехКонтрагента.МВЗ КАК НомерЦеха0,
	               |	уатПутевойЛист.ЦехКонтрагента.Доп КАК НомерЦеха,
	               |	ДопАналитикаПоТСдляКонтрагента.Зн,
	               |	ВЫБОР
	               |		КОГДА ЧАС(уатПутевойЛист.ДатаВыезда) >= 4
	               |				И ЧАС(уатПутевойЛист.ДатаВыезда) < 14
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК КодСМА,
	               |	ЕСТЬNULL(логВыгрузкиСМА.Отказ, ИСТИНА) КАК ФлагНеЗагружен
	               |ИЗ
	               |	Документ.уатПутевойЛист КАК уатПутевойЛист
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопАналитикаПоТСдляКонтрагента КАК ДопАналитикаПоТСдляКонтрагента
	               |		ПО уатПутевойЛист.ТранспортноеСредство = ДопАналитикаПоТСдляКонтрагента.Модель
	               |			И уатПутевойЛист.Контрагент = ДопАналитикаПоТСдляКонтрагента.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	               |		ПО (уатПутевойЛистПрицепы.Ссылка = уатПутевойЛист.Ссылка)
	               |			И (уатПутевойЛистПрицепы.НомерСтроки = 1)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.логВыгрузкиСМА КАК логВыгрузкиСМА
	               |		ПО уатПутевойЛист.Ссылка = логВыгрузкиСМА.ПЛ
				   |
				   |
				   |        LEFT OUTER JOIN РегистрСведений.ВыгрузкаСМАЗаказчики КАК РегСМА1 ON  РегСМА1.Заказчик = уатПутевойЛист.Контрагент
				   |        LEFT OUTER JOIN РегистрСведений.ВыгрузкаСМАЗаказчики КАК РегСМА2 ON  РегСМА2.Заказчик = уатПутевойЛист.Контрагент.ГоловнойКонтрагент
				   |        LEFT OUTER JOIN РегистрСведений.ВыгрузкаСМАЗаказчики КАК РегСМА3 ON  РегСМА3.Заказчик = уатПутевойЛист.ЦехКонтрагента.ГенЗаказчик
				   |
				   |
	               |ГДЕ	ВЫБОР КОГДА &ПоМассивуПЛ ТОГДА уатПутевойЛист.Ссылка В(&МассивПутевых) ИНАЧЕ
	               |	(уатПутевойЛист.Дата >= &Дата1
	               |	И ВЫБОР
	               |		КОГДА &ОтборПоКонтрагенту
	               |			ТОГДА уатПутевойЛист.Контрагент = &Контрагент 
	               |			ИНАЧЕ Истина = Истина
	               |	КОНЕЦ
				   |
				   |    И (РегСМА1.Заказчик IS NOT NULL OR РегСМА2.Заказчик IS NOT NULL OR РегСМА3.Заказчик IS NOT NULL)
				   |
	               |	И уатПутевойЛист.Дата < &Дата2
				   
				   |	И (уатПутевойЛист.Ссылка = &ссПутЛист
	               |			ИЛИ &ссПутЛист = НЕОПРЕДЕЛЕНО)) КОНЕЦ";
				   
		Запрос.УстановитьПараметр("Дата1",НачалоДня(Дата1));		   
		Запрос.УстановитьПараметр("Дата2",КонецДня(Дата2)+1);		   
		Запрос.УстановитьПараметр("ссПутЛист",ссПутЛист);		   
		Запрос.УстановитьПараметр("Контрагент",Контрагент);		   
		Запрос.УстановитьПараметр("ОтборПоКонтрагенту",ОтборПоКонтрагенту);		   
		Запрос.УстановитьПараметр("МассивПутевых", пМассивПутевых);
		Запрос.УстановитьПараметр("ПоМассивуПЛ", ?(пМассивПутевых = Неопределено, Ложь, Истина));
		
		ПутевыеЛисты.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

//Функция ПолучитьТОКЕН() Экспорт
Функция ПолучитьТОКЕН(ЛогинСМА,ПарольСМА) Экспорт
	//Авторизация
	ФаилJSONАвторизация = ПолучитьимяВременногоФайла("json");	
	СткJSON = Новый Структура;
	
	СткJSON.Вставить("username",ЛогинСМА);
	СткJSON.Вставить("password",ПарольСМА);
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПроксиСервер = глАвтограф.СформироватьДанныеПроксиСервера();
	
	HTTPСоединение = Новый HTTPСоединение(
										"smabrdportal.gazprom-neft.ru", // сервер (хост)
										443, // порт, по умолчанию для http используется 80, для https 443
										, // пользователь для доступа к серверу (если он есть)
										, // пароль для доступа к серверу (если он есть)
										ПроксиСервер, // здесь указывается прокси, если он есть
										, // таймаут в секундах, 0 или пусто - не устанавливать
										ssl// защищенное соединение, если используется https
										);
	
	
	
	HTTPЗапрос = Новый HTTPЗапрос("/services/api-token-auth/", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СформироватьСтрокуJSONИзСтруктуры(СткJSON),КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		Сообщить("Ошибка запроса авторизации");
		Сообщить(Результат.получитьтелокакстроку());

	КонецЕсли;
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		Сообщить("Ошибка сервера СМА");
		Сообщить(Результат.получитьтелокакстроку());
	КонецЕсли;
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Сообщить("Ошибка перенаправления сервера: " + Результат.КодСостояния );
		Сообщить(Результат.получитьтелокакстроку());
	КонецЕсли;
	Если Результат.КодСостояния = 200 Тогда
		Строка = Результат.получитьтелокакстроку();
		Токен = "Token " + Сред(Строка, 11, 40);
	Иначе
		Токен = Неопределено;
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

Функция ВремяДатаВСтроку(СтрДанные)
	
	Дата = СтрДанные.ДатаВыезда;
	ДатаВыезда = СтрДанные.ДатаВыезда;
	ДатаВозвращения = СтрДанные.ДатаВозвращения;
	
	
	//Даты Путевого Листа
	ВремяВыпискиСтр = Формат(Дата, "ДЛФ=T");
	Если СтрДлина(ВремяВыпискиСтр) = 7 Тогда
		ВремяВыпискиСтр = "0" + ВремяВыпискиСтр;
	КонецЕсли;
	ДатаВыпискиСтр = Формат(Дата, "ДФ=yyyy-MM-dd") + "T" + ВремяВыпискиСтр;
	
	ВремяВыездаСтр = Формат(ДатаВыезда, "ДЛФ=T");
	Если СтрДлина(ВремяВыездаСтр) = 7 Тогда
		ВремяВыездаСтр = "0" +ВремяВыездаСтр;
	КонецЕсли;
	ДатаВыездаСтр = Формат(ДатаВыезда, "ДФ=yyyy-MM-dd") + "T" + ВремяВыездаСтр; 
	
	ВремяВозвращенияСтр = Формат(ДатаВозвращения, "ДЛФ=T");
	Если СтрДлина(ВремяВозвращенияСтр) = 7 Тогда
		ВремяВозвращенияСтр = "0" + ВремяВозвращенияСтр;
	КонецЕсли;
	ДатаВозвращенияСтр = Формат(ДатаВозвращения, "ДФ=yyyy-MM-dd") + "T" + ВремяВозвращенияСтр;
	
	//ЧАСОВОЙ пояс НАЧАЛО
	РазностьВремени = (МестноеВремя(Дата) - Дата) / 3600;
	РазностьВремениСтр = "";
	РазностьКолЗн = Цел(РазностьВремени);
	Если  Цел(РазностьВремени) - РазностьВремени = 0.75 ИЛИ Цел(РазностьВремени) - РазностьВремени = - 0.75 Тогда
		Если РазностьВремени < 0 Тогда
			РазностьВремениСтр = "-";           
			РазностьКолЗн = РазностьКолЗн * (-1);
		Иначе
			РазностьВремениСтр = "+";
		КонецЕсли;
		РазностьВремениСтр = РазностьВремениСтр + ?(СтрДлина(Строка(РазностьКолЗн)) = 2, Строка(Цел(РазностьКолЗн)), "0" + Строка(Цел(РазностьКолЗн))) + ":" + "45";
	КонецЕсли;
	
	Если  Цел(РазностьВремени) - РазностьВремени = 0.5 ИЛИ Цел(РазностьВремени) - РазностьВремени = -0.5 Тогда
		Если РазностьВремени < 0 Тогда
			РазностьВремениСтр = "-";
			РазностьКолЗн = РазностьКолЗн * (-1);
		Иначе
			РазностьВремениСтр = "+";
		КонецЕсли;
		РазностьВремениСтр = РазностьВремениСтр + ?(СтрДлина(Строка(РазностьКолЗн)) = 2, Строка(Цел(РазностьКолЗн)), "0" + Строка(Цел(РазностьКолЗн))) + ":" + "30";
	КонецЕсли;
	
	Если  Цел(РазностьВремени) - РазностьВремени = 0 Тогда
		Если РазностьВремени < 0 Тогда
			РазностьВремениСтр = "-";
			РазностьКолЗн = РазностьКолЗн * (-1);
		Иначе
			РазностьВремениСтр = "+";
		КонецЕсли;
		РазностьВремениСтр = РазностьВремениСтр + ?(СтрДлина(Строка(РазностьКолЗн)) = 2,Строка(Цел(РазностьКолЗн)), "0" + Строка(Цел(РазностьКолЗн))) + ":" + "00";
	КонецЕсли;	
	//ЧАСОВОЙ пояс КОНЕЦ
	
	
	Возврат Новый Структура("РазностьВремениСтр,ДатаВыпискиСтр,ДатаВыездаСтр,ДатаВозвращенияСтр",РазностьВремениСтр,ДатаВыпискиСтр,ДатаВыездаСтр,ДатаВозвращенияСтр);
	
КонецФункции

Процедура ЗаписьВJSON(Отказ,СтрДанные,ФаилЗапросаJSON,СткJSON)
	
	
	//СтрДанные - текущая строка из ТЗ "ПутевыеЛисты" формы обработки
	
	//Реквизиты Путевого Листа
	СткДата = ВремяДатаВСтроку(СтрДанные);
	
	//Запрос JSON
	
	СткJSON = Новый Структура();
	
	
	СткJSON.Вставить("dateCreate",СокрЛП(СткДата.ДатаВыпискиСтр+СткДата.РазностьВремениСтр));
	СткJSON.Вставить("number",СтрДанные.Номер);  //Номер строки
	
	СткJSON.Вставить("serviceNumber",СтрЗаменить(СокрЛП(СтрДанные.НомерПП)," ","")); //Номер путевого листа
	СткJSON.Вставить("dateStart",СокрЛП(СткДата.ДатаВыездаСтр+СткДата.РазностьВремениСтр)); //Дата выезда
	СткJSON.Вставить("dateFinish",СокрЛП(СткДата.ДатаВозвращенияСтр+СткДата.РазностьВремениСтр)); //Дата заезда
	//КодСМА не знаю
	СткJSON.Вставить("shift",СтрДанные.КодСМА); //Код СМА - неизвестный реквизит
	СткJSON.Вставить("agreementNumber",СтрДанные.ДоговорНомер); //Номер договора
	СткJSON.Вставить("vehicleGosNumber",СтрЗаменить(СокрЛП(Врег(СтрДанные.ГосНом)), " ", "")); //Гос. номер ТС
	СткJSON.Вставить("trailerGosNumber",СтрЗаменить(СокрЛП(Врег(СтрДанные.ГосНомПрц)), " ", "")); //Гос. номер прицепа
	СткJSON.Вставить("subsidiaryName",СокрЛП(СтрДанные.КонтрагентИмяСМА)); //Имя контраагента СМА - его надо правильно написать в регистре сведений в доп. реквизите
	СткJSON.Вставить("departmentName",СокрЛП(СтрДанные.НомерЦеха)); //Наименование цеха - берется из карточки цеха контрагента из реквизита "Доп. значение 1"
	//Месторождение не знаю
	СткJSON.Вставить("fieldName",СокрЛП(СтрДанные.Месторождение));//Наименование месторождения - берется из карточки цеха контрагента
	
	МасВод = Новый Массив;
	МасВод.Добавить(СокрЛП(СтрДанные.Водитель1Код));
	Если ЗначениеЗаполнено(СтрДанные.Водитель2Код) Тогда
		МасВод.Добавить(СокрЛП(СтрДанные.Водитель2Код));
	КонецЕсли;
	//МасВод.Добавить("11111");
	СткJSON.Вставить("driverIds",МасВод);	
	
	Если ЗначениеЗаполнено(СтрДанные.КодСМА)=Ложь Тогда
		Сообщить("Поле " "Режим работы" " не заполнено");
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрДанные.Договор)=Ложь Тогда
		Сообщить("Поле ""Договор"" не заполнено");
		Отказ = Истина;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СтрДанные.Контрагент)=Ложь Тогда
		Сообщить("Поле ""Контрагент"" не заполнено");
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрДанные.НомерЦеха)=Ложь Тогда
		Сообщить("Поле ""Номер цеха"" не заполнено");
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрДанные.Месторождение)=Ложь Тогда
		Сообщить("Поле ""Месторождение"" не заполнено");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		//Возврат;
	КонецЕсли;	
	
	УдалитьФайлы(ФаилЗапросаJSON);
	
	Тхт = Новый ЗаписьТекста(ФаилЗапросаJSON,КодировкаТекста.ANSI);
	Тхт.Закрыть();
	Тхт = Новый ЗаписьТекста(ФаилЗапросаJSON,,, Истина, Символы.ПС);
	Тхт.Записать(СформироватьСтрокуJSONИзСтруктуры(СткJSON));
	
	
	
	
КонецПроцедуры


Функция КонтрольРаскладки(Данные)
	Соо = новый Соответствие; 
	соо.вставить("`","ё");
	соо.вставить("~","Ё");
	соо.вставить("!","!");
	соо.вставить("@","""");
	соо.вставить("#","№");
	соо.вставить("$",";");
	соо.вставить("^",":");
	соо.вставить("&","?");
	соо.вставить("q","й");
	соо.вставить("w","ц");
	соо.вставить("e","у");
	соо.вставить("r","к");
	соо.вставить("t","е");
	соо.вставить("y","н");
	соо.вставить("u","г");
	соо.вставить("i","ш");
	соо.вставить("o","щ");
	соо.вставить("p","з");
	соо.вставить("[","х");
	соо.вставить("]","ъ");
	соо.вставить("a","ф");
	соо.вставить("s","ы");
	соо.вставить("d","в");
	соо.вставить("f","а");
	соо.вставить("g","п");
	соо.вставить("h","р");
	соо.вставить("j","о");
	соо.вставить("k","л");
	соо.вставить("l","д");
	соо.вставить(";","ж");
	соо.вставить("'","э");
	соо.вставить("z","я");
	соо.вставить("x","ч");
	соо.вставить("c","с");
	соо.вставить("v","м");
	соо.вставить("b","и");
	соо.вставить("n","т");
	соо.вставить("m","ь");
	соо.вставить(",","б");
	соо.вставить(".","ю");
	соо.вставить("/",".");
	
	соо.вставить("{","Х");
	соо.вставить("}","Ъ");
	соо.вставить(":","Ж");
	соо.вставить("""","Э");
	соо.вставить("<","Б");
	соо.вставить(">","Ю");
	соо.вставить("?",",");
	соо.вставить(Символы.ПС," ");
	
	Для каждого Эл из Соо Цикл
		Если ВРЕГ(Эл.Ключ)=эл.ключ Тогда Продолжить; КонецесЛИ;
		Соо.Вставить(ВРЕГ(Эл.Ключ),ВРЕГ(Эл.Значение));
	Конеццикла;
	
	Рез = "";
	Есть=ЛожЬ;
	Для а=1 по СтрДлина(Данные) Цикл
		
		п0 = Сред(Данные,а,1); 
		п = Соо.Получить(п0);
		Если п=Неопределено ТОгда
			Рез = Рез + п0;
		ИНаче
			Рез = Рез + "_" + п;
			Есть = Истина;
		КонецЕСЛИ;
		
		//Если Есть = Ложь Тогда
		//	Рез = Данные;
		//	прервать;
		//КонецЕСЛИ;
		
	КонецЦикла;
	
	Возврат Рез;
	
	
КонецФункции

Функция ЗаменаСлеша(Данные)
	//Если СокрЛП(Данные) <> "" Тогда
	//	НовыеДанные = СтрЗаменить(Данные,"\","-");
	//	НовыеДанные = СтрЗаменить(НовыеДанные,"/","-");
	//	Возврат НовыеДанные;
	//КонецЕсли;	
	Возврат Данные;
КонецФункции	


Функция ПолучитьСтрокуQR(Ссылка)
	
	ВодителиСтрокаФИО =?(ЗначениеЗаполнено(Ссылка.Водитель1),Ссылка.Водитель1.Наименование,"");
	ВодителиСтрокаКоды =?(ЗначениеЗаполнено(Ссылка.Водитель1),СокрЛП(Ссылка.Водитель1.Код),"");
	МаркаАвто = КонтрольРаскладки(Сред(Ссылка.ТранспортноеСредство.Наименование,1,16));
	
	Если Ссылка.Контрагент <> Неопределено Тогда
		КодКонтрагента = Ссылка.Контрагент.Код;
		Если ТипЗнч(Ссылка.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			НаименованиеПолное = СокрЛП(Ссылка.Контрагент.НаименованиеПолное);
		Иначе
			НаименованиеПолное = СокрЛП(Ссылка.Контрагент.Наименование);
		КонецЕсли;	
	Иначе	
		НаименованиеПолное = "Заказчик";
		КодКонтрагента = "00000";
	КонецЕсли;	
	
	
	QRСтрока =  СокрЛП(Ссылка.Организация)+"|"+ 											//1 Наименование нашей организации
	СокрЛП(Ссылка.Номер)+"|"+																//2 Номер путевого листа
	СокрЛП(Ссылка.ДатаВыписки)+"|"+ 														//3 Дата/время выписки путевого листа
	СокрЛП(Ссылка.ДатаВыезда)+"|"+ 															//4 Дата/время выезда ТС по путевому листу
	СокрЛП(Ссылка.ДатаВозвращения)+"|"+ 													//5 Дата/время заезда ТС по путевому листу
	СтрЗаменить(Строка(Врег(Ссылка.ТранспортноеСредство.ГосударственныйНомер))," ","")+"|"+	//6 Гос. номер ТС
	""+"|"+																					//7 Гос. номер прицепа (если есть)
	СокрЛП(ВодителиСтрокаКоды)+"|"+															//8 Код(таб. номер) водителей
	//Здесь надо еще подправить!!!
	КодКонтрагента +"|"+																	//9 Принимает значение "1" или "2" в зависимости от часа выезда ТС
	НаименованиеПолное +"|"+																//10 Наименование контрагента
	СокрЛП(Ссылка.ЦехКонтрагента.Код)+"|"+													//11 Номер цеха - это реквизит "уатПутевойЛист.ЦехКонтрагента.Доп"
	СокрЛП(Ссылка.Месторождение)+"|"+														//12 Реквизит "ЦехКонтрагента.Месторождение"
	""+"|"+																					//13 Реквизит "уатПутевойЛист.НомерПП" - номер производственной программы (для СМА ГпзПром)
	""+"|!!"+																				//14 Номер договора, реквизит "Договор.Номер"
	//Нашм хотелки
	СокрЛП(ВодителиСтрокаФИО)+"|"+															//15 Полное ФИО водителей
	СокрЛП(МаркаАвто)+"|"+																	//16 Марка ТС (первые 16 символов)
	СокрЛП(Ссылка.ТранспортноеСредство.ГаражныйНомер)+"|"+									//17 Гаражный номер ТС
	СокрЛП(Ссылка.ВыдатьКоличествоГорючего);												//18 Количество ГСМ к выдаче по путевому листу, реквизит "уатПутевойЛист.ВыдатьКоличествоГорючего"
	
	Возврат QRСтрока;
	
КонецФункции	


Функция ПолучитьСтрокуДанныхСМА(ТекущийДокумент) Экспорт
	
	Заполнить(ТекущийДокумент.ссылка);
	Если ПутевыеЛисты.Количество()=0 ТОгда
		QRСтрока = ПолучитьСтрокуQR(ТекущийДокумент);
		Возврат QRСтрока;
	КонецЕСЛИ;
	
	ТекСтр = ПутевыеЛисты[0];
	
	СткДата = ВремяДатаВСтроку(ТекСтр);
	ВодителиСтрокаКоды = ?(ЗначениеЗаполнено(ТекСтр.Водитель2Код),"" + СокрЛП(ТекСтр.Водитель1Код) + "," + ТекСтр.Водитель2Код + "","" + СокрЛП(ТекСтр.Водитель1Код) + "");
	ВодителиСтрокаФИО=?(ЗначениеЗаполнено(ТекСтр.Водитель1),ТекСтр.Водитель1.Наименование,"");
	МаркаАвто = КонтрольРаскладки(Сред(ТекСтр.ТранспортноеСредство.Наименование,1,16));
	
	QRСтрока =  СокрЛП(ТекСтр.Организация)+"|"+								//1 Наименование нашей организации
	СокрЛП(ТекСтр.Номер)+"|"+ 												//2 Номер путевого листа
	СокрЛП(СткДата.ДатаВыпискиСтр+СткДата.РазностьВремениСтр)+"|"+  		//3 Дата/время выписки путевого листа
	СокрЛП(СткДата.ДатаВыездаСтр+СткДата.РазностьВремениСтр)+"|"+ 			//4 Дата/время выезда ТС по путевому листу
	СокрЛП(СткДата.ДатаВозвращенияСтр+СткДата.РазностьВремениСтр)+"|"+  	//5 Дата/время заезда ТС по путевому листу
	СтрЗаменить(Строка(Врег(ТекСтр.ГосНом))," ","")+"|"+ 					//6 Гос. номер ТС
	СтрЗаменить(Строка(Врег(ТекСтр.ГосНомПрц))," ","")+"|"+ 				//7 Гос. номер прицепа (если есть)
	СокрЛП(ВодителиСтрокаКоды)+"|"+ 											//8 Код(таб. номер) водителей
	СокрЛП(ТекСтр.КодСМА)+"|"+ 												//9 Принимает значение "1" или "2" в зависимости от часа выезда ТС
	СокрЛП(ТекСтр.КонтрагентИмяСМА)+"|"+ 									//10 Наименование контрагента
	СокрЛП(ТекСтр.НомерЦеха)+"|"+ 											//11 Номер цеха - это реквизит "уатПутевойЛист.ЦехКонтрагента.Доп"
	СокрЛП(ТекСтр.Месторождение)+"|"+ 										//12 Реквизит "ЦехКонтрагента.МесторождениеДляСМА", а если незаполнено, то "ЦехКонтрагента.Месторождение"
	СокрЛП(ТекСтр.НомерПП)+"|"+ 											//13 Реквизит "уатПутевойЛист.НомерПП" - номер производственной программы (для СМА ГпзПром)
	СокрЛП(ТекСтр.Договор.Номер)+"|!!"+ 									//14 Номер договора, реквизит "Договор.Номер"
	//Нашм хотелки
	СокрЛП(ВодителиСтрокаФИО)+"|"+ 											//15 Полное ФИО водителей
	СокрЛП(МаркаАвто)+"|"+													//16 Марка ТС (первые 16 символов)
	СокрЛП(ТекСтр.ГарНом)+"|"+ 												//17 Гаражный номер ТС
	СокрЛП(Строка(ТекСтр.ПутевойЛист.ВыдатьКоличествоГорючего)); 			//18 Количество ГСМ к выдаче по путевому листу, реквизит "уатПутевойЛист.ВыдатьКоличествоГорючего"
	
	Возврат QRСтрока;
	
КонецФункции

Процедура ОтправкаВСМА(Отказ,СтрДанные,Токен,ПосмотретьФайлВыгрузки=ЛОжь) Экспорт
	
	СткJSON = Неопределено;
	
	ФаилЗапросаJSON = ПолучитьимяВременногоФайла("json");
	ЗаписьВJSON(Отказ,СтрДанные,ФаилЗапросаJSON,СткJSON);
	//СткДляВыгрузки = СформироватьСтруктуруДляВыгрузки(Отказ,СтрДанные)
	СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(СткJSON);

	ЛогОтвет = "";
	
	Если ПосмотретьФайлВыгрузки ТОгда
		ТхтОкно = Новый ТекстовыйДокумент;
		ТхтОкно.Прочитать(ФаилЗапросаJSON,КодировкаТекста.UTF8);
		ТхтОкно.Показать("Файл_Отправки");
	КонецЕСЛИ;
	
	
	//Отправка
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", Токен);
	Заголовки.Вставить("Content-Type", "application/json");
	HTTPСоединение = Новый HTTPСоединение("smabrdportal.gazprom-neft.ru",,,,,, ssl);
	HTTPЗапрос = Новый HTTPЗапрос("/services/api/waybills-1c-s/", Заголовки);
	
	//HTTPЗапрос.УстановитьИмяФайлаТела(ФаилЗапросаJSON);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, имяВыходногоФайла, Заголовки);
	
	//Ошибки
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
	Если Найти(ТекстОтвета,"error")<>0 ТОгда
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"{""detail"":""",Символы.ПС);	
		ТекстОтвета = СтрЗаменить(ТекстОтвета,""",""title"":""Invalid Attribute""}","");
		Сообщить(ТекстОтвета);
		Отказ = Истина;
	ИначеЕсли Найти(ТекстОтвета,"Время сессии закончилось")<>0 Тогда
		Сообщить("Сервер СМА принудительно закончил Вашу сессию в связи с долгим простоем!");
		Сообщить("Путевой лист не создан в СМА!");
		Отказ = Истина;
	ИначеЕсли Найти(ТекстОтвета,"Недопустимый токен")<>0 Тогда // Если проблема с токеном, то начинаем все с начала.
		Выгрузить(СтрДанные,Ложь);
		Возврат;
	КонецЕСЛИ;
	
	
	Если Результат.КодСостояния = 201 Тогда
		СообщитьЛог(ЛогОтвет,"Путевой лист создан в СМА");
		//+Lexx от 30.06.2017
		Отказ = Ложь;
		//-Lexx от 30.06.2017
	ИначеЕсли Результат.КодСостояния = 400 Тогда
		СообщитьЛог(ЛогОтвет,"Данные путевого листа не найдены в СМА");
		Отказ = Истина;
	Иначе
		Сообщить(ТекстОтвета);
		СообщитьЛог(ЛогОтвет,"Произошла ошибка при попытке создании путевого листа в СМА");
		Отказ = Истина;
	КонецЕсли;
	
	НовЗап = РегистрыСведений.логВыгрузкиСМА.СоздатьМенеджерЗаписи();
	НовЗап.ПЛ = СтрДанные.ПутевойЛист;
	НовЗап.Отказ = Отказ;
	//+Lexx от 30.06.2017
	НовЗап.Ответ = Строка(ТекущаяДата()) + " " + СокрЛП(ЛогОтвет) + " " + ТекстОтвета;
	//НовЗап.Ответ = ЛогОтвет;
	//-Lexx от 30.06.2017
	НовЗап.Записать();
	
	
	УдалитьФайлы(имяВыходногоФайла);

	
	
КонецПроцедуры

Процедура СообщитьЛог(ЛогОтвет,Тхт);
	ЛогОтвет = ЛогОтвет + Символы.ПС + Тхт;
	Сообщить(Тхт);
КонецПроцедуры

Процедура Выгрузить(флтСтр=Неопределено,ПосмотретьФайлВыгрузки=Ложь) Экспорт
	
	//Токен = ПолучитьТОКЕН();
	//Если ТОкен = Неопределено ТОгда
	//	Возврат;
	//КонецЕсЛИ;
	
	Отказ = Ложь;
	Если флтСтр= Неопределено Тогда
		Для каждого Стр из ПутевыеЛисты Цикл
			
			// + Lexx от 23.03.2017
			//Принимаем новую систему логина и пароля для получение Токена
			//Данные берутся из карточки контрагента, указанного в путевом листе
			//- это может быть непосредственно контрагент СМА - работа напрямую, а может быть субподрядчик, через которого идет работа с контрагентом СМА
			//Обязательно проверим заполнение этих реквизитов
			ЛогинСМА = Стр.ПутевойЛист.Контрагент.ПользовательСМА;
			ПарольСМА = Стр.ПутевойЛист.Контрагент.ПарольСМА;
			Если СокрЛП(ЛогинСМА) = "" Или СокрЛП(ПарольСМА) = "" Тогда
				Сообщить("В путевом листе - " + СокрЛП(Стр.ПутевойЛист.Номер) + " для контрагента " + Стр.ПутевойЛист.Контрагент + "  не указаны данные для входа в СМА! ПЛ не выгружен!");
				Продолжить;
			КонецЕсли;	
			
			Токен = ПолучитьТОКЕН(ЛогинСМА,ПарольСМА);
			Если ТОкен = Неопределено ТОгда
				Сообщить("В путевом листе - " + СокрЛП(Стр.ПутевойЛист.Номер) + " для контрагента " + Стр.ПутевойЛист.Контрагент + " не удается получить токен для входа в СМА! ПЛ не выгружен!");
				Возврат;
			КонецЕсЛИ;
			// - Lexx от 23.03.2017
			
			
			
			// + Lexx от 12.09.2017
			//А если путевой лист уже выгружался, то его повторно отправлять не будем
			//Если Не Стр.ФлагНеЗагружен Тогда
			//	Продолжить;
			//КонецЕсли;	
			// - Lexx от 12.09.2017
			ОтправкаВСМА(Отказ,Стр,Токен);
		КонеЦЦикла;
	ИНаче
		// + Lexx от 09.10.2017
		//Попытаемся выгрузить ПЛ по этой строке, если он еще не был загружен в СМА
		Если флтСтр.ФлагНеЗагружен Тогда
			// + Lexx от 23.03.2017
			ЛогинСМА = флтСтр.ПутевойЛист.Контрагент.ПользовательСМА;
			ПарольСМА = флтСтр.ПутевойЛист.Контрагент.ПарольСМА;
			Если СокрЛП(ЛогинСМА) = "" Или СокрЛП(ПарольСМА) = "" Тогда
				Сообщить("В путевом листе - " + СокрЛП(флтСтр.ПутевойЛист.Номер) + " для контрагента " + флтСтр.ПутевойЛист.Контрагент + " не указаны данные для входа в СМА! ПЛ не выгружен!");
				Возврат;
			КонецЕсли;	
			
			Токен = ПолучитьТОКЕН(ЛогинСМА,ПарольСМА);
			Если ТОкен = Неопределено ТОгда
				Сообщить("В путевом листе - " + СокрЛП(флтСтр.ПутевойЛист.Номер) + " для контрагента " + флтСтр.ПутевойЛист.Контрагент + " не удается получить токен для входа в СМА! ПЛ не выгружен!");
				Возврат;
			КонецЕсЛИ;
			// - Lexx от 23.03.2017
			
			ОтправкаВСМА(Отказ,флтСтр,Токен,ПосмотретьФайлВыгрузки);
			флтСтр.ФлагНеЗагружен = Отказ;
		КонецЕсли;	
		// - Lexx от 09.10.2017
	КонецЕСЛИ;
	
КонецПроцедуры

Процедура ВыполнитьПоПЛ(ФильтрПутевойЛист) Экспорт
	
	Если ЗначениеЗаполнено(ФильтрПутевойЛист)=Ложь ТОгда
		Сообщить("Не заполнен путевой лист");
		Возврат;
	КонецЕСЛИ;
	
	Заполнить(ФильтрПутевойЛист);
	Если ПутевыеЛисты.Количество()=0 ТОгда
		Сообщить("Нет данных по "+ФильтрПутевойЛист);
		Возврат;
	КонецЕСЛИ;
	
	Выгрузить();
	
КонецПроцедуры
///////////////////////////////////////////////////////
Функция ПреобразоватьвСистему(Число10,система) Экспорт
	Если система > 36 или система < 2 тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
КонецФункции


Функция URLEncode(стр) Экспорт	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		если ((Знак>="a")и(Знак<="z")) или
			 ((Знак>="A")и(Знак<="Z")) или
			 ((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Итог;
КонецФункции


Функция СформироватьСтрокуJSONИзМассива(Объект)
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + ФорматСтрокиJSON(Элемент) + """";
		ИначеЕсли ТипЗнч(Элемент) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
КонецФункции

Функция ФорматСтрокиJSON(Стр)
	
	п = СтрЗаменить(Стр,"""","\""");
	Возврат п;
	
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект)
	СтрокаJSON = "{"+символы.ПС;
	
	Для каждого Элемент Из Объект Цикл
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + ФорматСтрокиJSON(Элемент.Значение) + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ","+Символы.ПС;
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 2) = ","+Символы.ПС Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-2);
	КонецЕсли;
	
	Возврат СтрокаJSON +Символы.ПС+ "}";
КонецФункции


Функция СформироватьСтрокуJSON(Объект) Экспорт
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	КонецЕсли;
	
	Возврат СтрокаJSON;
КонецФункции


Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
				Иначе
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
			ИначеЕсли ТипДанных = "Массив" Тогда
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON) Экспорт
	Результат = Новый Структура;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции   