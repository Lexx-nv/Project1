Перем ЭтоОбъединеннаяКонфигурация;
Перем ЭтоОбъединениеСТЛЭ;

#Если Клиент Тогда
	// Модуль обработки ПраваИНастройки 
	
	////////////////////////////////////////////////////////////////////////////////
	// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	// Эта функция осуществляет поиск строки
	// Если строка найдена, возвращает найденною строку дерева
	// Если строка не найдена, возвращает неопределено
	Функция НайтиОтмеченноеЗначениеВДеревеЗначений(СтрокиДерева, ПравоНастройка) Экспорт
		
		Для каждого Строка из СтрокиДерева Цикл
			Если Строка.ПравоНастройка = ПравоНастройка Тогда
				Возврат Строка;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Строка из СтрокиДерева Цикл
			НайденнаяСтрока = НайтиОтмеченноеЗначениеВДеревеЗначений(Строка.Строки, ПравоНастройка);
			Если НайденнаяСтрока <> неопределено Тогда
				Возврат НайденнаяСтрока;
			КонецЕсли;
		КонецЦикла;
		
		Возврат неопределено;
		
	КонецФункции
	
	//выгружает текущие настройки во внешний файл
	Процедура СохранитьНастройкиВФайл() Экспорт
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = "ПраваИНастройки" + ТипОбъектаНастройки;
		Диалог.Расширение = "xml";
		Диалог.Фильтр = "Файлы XML (*.xml)|*.xml";
		Если Диалог.Выбрать() Тогда
			ФайлВыгрузки = Новый ЗаписьXML();
			ФайлВыгрузки.ОткрытьФайл(Диалог.ПолноеИмяФайла);
			ФайлВыгрузки.ЗаписатьОбъявлениеXML();
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ОбъектНастройки");
			ФайлВыгрузки.ЗаписатьАтрибут("ТипОбъектаНастройки", ЗначениеВСтрокуВнутр(ТипОбъектаНастройки));
			
			//выборка и выгрузка прав и настроек пользователя
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ПраваИНастройки");
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ПраваИНастройки.Объект КАК Объект,
			|	ПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
			|	ПраваИНастройки.Значение КАК Значение
			|ИЗ
			|	РегистрСведений.уатПраваИНастройки КАК ПраваИНастройки
			|ГДЕ
			|	ПраваИНастройки.Объект = &Объект
			|";
			Запрос.УстановитьПараметр("Объект", ОбъектНастройкиПрав);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
				ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗаписьРегистра"); 
				ФайлВыгрузки.ЗаписатьАтрибут("ПравоНастройка", ЗначениеВСтрокуВнутр(СтрокаТЗ.ПравоНастройка));
				ФайлВыгрузки.ЗаписатьАтрибут("Значение", ЗначениеВСтрокуВнутр(СтрокаТЗ.Значение));
				ФайлВыгрузки.ЗаписатьКонецЭлемента();
			КонецЦикла; 
			ФайлВыгрузки.ЗаписатьКонецЭлемента();
			
			//если объект настройки пользователь, то так же выгрузим права доступа к документам и справочникам
			Если ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь Тогда
				
				//выборка и выгрузка прав доступа к документам
				ФайлВыгрузки.ЗаписатьНачалоЭлемента("ДоступКДокументам");
				Запрос = Новый Запрос();
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	ДоступКДокументам.Пользователь КАК Пользователь,
				|	ДоступКДокументам.Право КАК Право,
				|	ДоступКДокументам.Объект КАК Объект,
				|	ДоступКДокументам.ДоступЕсть КАК ДоступЕсть
				|ИЗ
				|	РегистрСведений.уатДоступКДокументам КАК ДоступКДокументам
				|ГДЕ
				|	ДоступКДокументам.Пользователь = &Пользователь
				|";
				Запрос.УстановитьПараметр("Пользователь", ОбъектНастройкиПрав);
				РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
					ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗаписьРегистра"); 
					ФайлВыгрузки.ЗаписатьАтрибут("Право", ЗначениеВСтрокуВнутр(СтрокаТЗ.Право));
					ФайлВыгрузки.ЗаписатьАтрибут("Объект", ЗначениеВСтрокуВнутр(СтрокаТЗ.Объект));				
					ФайлВыгрузки.ЗаписатьАтрибут("ДоступЕсть", ЗначениеВСтрокуВнутр(СтрокаТЗ.ДоступЕсть));
					ФайлВыгрузки.ЗаписатьКонецЭлемента();
				КонецЦикла; 
				ФайлВыгрузки.ЗаписатьКонецЭлемента();
				
				//выборка и выгрузка прав доступа к справочникам
				ФайлВыгрузки.ЗаписатьНачалоЭлемента("ДоступКСправочникам");
				Запрос = Новый Запрос();
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	ДоступКСправочникам.Пользователь КАК Пользователь,
				|	ДоступКСправочникам.Право КАК Право,
				|	ДоступКСправочникам.Объект КАК Объект,
				|	ДоступКСправочникам.ДоступЕсть КАК ДоступЕсть
				|ИЗ
				|	РегистрСведений.уатДоступКСправочникам КАК ДоступКСправочникам
				|ГДЕ
				|	ДоступКСправочникам.Пользователь = &Пользователь
				|";
				Запрос.УстановитьПараметр("Пользователь", ОбъектНастройкиПрав);
				РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
					ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗаписьРегистра"); 
					ФайлВыгрузки.ЗаписатьАтрибут("Право", ЗначениеВСтрокуВнутр(СтрокаТЗ.Право));
					ФайлВыгрузки.ЗаписатьАтрибут("Объект", ЗначениеВСтрокуВнутр(СтрокаТЗ.Объект));				
					ФайлВыгрузки.ЗаписатьАтрибут("ДоступЕсть", ЗначениеВСтрокуВнутр(СтрокаТЗ.ДоступЕсть));
					ФайлВыгрузки.ЗаписатьКонецЭлемента();
				КонецЦикла; 
				ФайлВыгрузки.ЗаписатьКонецЭлемента();
				
			КонецЕсли; 	
			ФайлВыгрузки.ЗаписатьКонецЭлемента();		
			ФайлВыгрузки.Закрыть();
		Иначе
			Возврат; 					
		КонецЕсли; 	                                       
		
	КонецПроцедуры
	
	//загружает настройки из внешнего файла
	Процедура ЗагрузитьНастройкиИзФайла() Экспорт
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.Фильтр = "Файлы XML (*.xml)|*.xml";
		
		Если Диалог.Выбрать() Тогда
			ФайлЗагрузки = Новый ЧтениеXML();
			ФайлЗагрузки.ОткрытьФайл(Диалог.ПолноеИмяФайла);
			ФайлЗагрузки.Прочитать();
			
			Если ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ТипОбъектаНастройки")) <> ТипОбъектаНастройки Тогда 
				Сообщить("Тип объекта настройки отличается от загружаемого!"); 
				Возврат;
			КонецЕсли;
			
			НастройкиДляПользователя = ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь;
			
			//временная таблица для хранеия восстановленных значений регистра "ПраваИНастройки"
			ТаблицаПравИНастроек = Новый ТаблицаЗначений;
			ТаблицаПравИНастроек.Колонки.Добавить("ПравоНастройка");
			ТаблицаПравИНастроек.Колонки.Добавить("Значение");
			
			//если объект настройки пользователь, то так же загрузим права доступа к документам и справочникам
			Если НастройкиДляПользователя Тогда 
				//временная таблица для хранеия восстановленных значений регистра "ДоступКДокументам"
				ТаблицаДоступаКДокументам = Новый ТаблицаЗначений;
				ТаблицаДоступаКДокументам.Колонки.Добавить("Право");
				ТаблицаДоступаКДокументам.Колонки.Добавить("Объект");
				ТаблицаДоступаКДокументам.Колонки.Добавить("ДоступЕсть");
				
				//временная таблица для хранеия восстановленных значений регистра "ДоступКСправочникам"
				ТаблицаДоступаКСправочникам = Новый ТаблицаЗначений;
				ТаблицаДоступаКСправочникам.Колонки.Добавить("Право");
				ТаблицаДоступаКСправочникам.Колонки.Добавить("Объект");
				ТаблицаДоступаКСправочникам.Колонки.Добавить("ДоступЕсть");
			КонецЕсли;
			
			Пока ФайлЗагрузки.Прочитать() Цикл
				
				Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.НачалоЭлемента) И ФайлЗагрузки.Имя = "ПраваИНастройки" Тогда
					ЗагрузкаПравИНастроек = Истина;
					Продолжить;
				КонецЕсли; 
				
				Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента) И ФайлЗагрузки.Имя = "ПраваИНастройки" Тогда
					ЗагрузкаПравИНастроек = Ложь;
					Продолжить;
				КонецЕсли; 
				
				Если НастройкиДляПользователя Тогда
					Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.НачалоЭлемента) И ФайлЗагрузки.Имя = "ДоступКДокументам" Тогда
						ЗагрузкаДоступаКДокументам = Истина;
						Продолжить;
					КонецЕсли; 
					
					Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента) И ФайлЗагрузки.Имя = "ДоступКДокументам" Тогда
						ЗагрузкаДоступаКДокументам = Ложь;
						Продолжить;
					КонецЕсли; 
					
					Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.НачалоЭлемента) И ФайлЗагрузки.Имя = "ДоступКСправочникам" Тогда
						ЗагрузкаДоступаКСправочникам = Истина;
						Продолжить;
					КонецЕсли; 
					
					Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента) И ФайлЗагрузки.Имя = "ДоступКСправочникам" Тогда
						ЗагрузкаДоступаКСправочникам = Ложь;
						Продолжить;
					КонецЕсли; 
				КонецЕсли; 
				
				
				Если ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда Продолжить; КонецЕсли; 
				
				Если ЗагрузкаПравИНастроек Тогда
					НоваяСтрока = ТаблицаПравИНастроек.Добавить();
					НоваяСтрока.ПравоНастройка = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ПравоНастройка"));
					НоваяСтрока.Значение = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Значение"));
					Продолжить;
				КонецЕсли;
				
				Если НастройкиДляПользователя Тогда
					Если ЗагрузкаДоступаКДокументам Тогда
						НоваяСтрока = ТаблицаДоступаКДокументам.Добавить();
						НоваяСтрока.Право = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Право"));
						НоваяСтрока.Объект = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Объект"));
						НоваяСтрока.ДоступЕсть = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ДоступЕсть"));
						Продолжить;
					КонецЕсли; 
					
					Если ЗагрузкаДоступаКСправочникам Тогда
						НоваяСтрока = ТаблицаДоступаКСправочникам.Добавить();
						НоваяСтрока.Право = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Право"));
						НоваяСтрока.Объект = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Объект"));
						НоваяСтрока.ДоступЕсть = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ДоступЕсть"));
						Продолжить;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
		Иначе
			Сообщить("Не указано имя файла загрузки!", СтатусСообщения.ОченьВажное);	
		КонецЕсли;
		
		//запишем все данные в регистр "ПраваИНастройки"
		НаборЗаписей = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ОбъектНастройкиПрав);
		Для каждого СтрокаТЗ Из ТаблицаПравИНастроек Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект = ОбъектНастройкиПрав;
			НоваяЗапись.ПравоНастройка = СтрокаТЗ.ПравоНастройка;
			НоваяЗапись.Значение = СтрокаТЗ.Значение;
		КонецЦикла;  	
		НаборЗаписей.Записать();
		
		Если НастройкиДляПользователя Тогда	
			//запишем все данные в регистр "ДоступКДокументам"
			НаборЗаписей = РегистрыСведений.уатДоступКДокументам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ОбъектНастройкиПрав);
			Для каждого СтрокаТЗ Из ТаблицаДоступаКДокументам Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Пользователь = ОбъектНастройкиПрав;
				НоваяЗапись.Право = СтрокаТЗ.Право;		
				НоваяЗапись.Объект = СтрокаТЗ.Объект;		
				НоваяЗапись.ДоступЕсть = СтрокаТЗ.ДоступЕсть;
			КонецЦикла;  	
			НаборЗаписей.Записать();
			
			//запишем все данные в регистр "ДоступКСправочникам"
			НаборЗаписей = РегистрыСведений.уатДоступКСправочникам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ОбъектНастройкиПрав);
			Для каждого СтрокаТЗ Из ТаблицаДоступаКСправочникам Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Пользователь = ОбъектНастройкиПрав;
				НоваяЗапись.Право = СтрокаТЗ.Право;		
				НоваяЗапись.Объект = СтрокаТЗ.Объект;		
				НоваяЗапись.ДоступЕсть = СтрокаТЗ.ДоступЕсть;
			КонецЦикла;  	
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецПроцедуры
	
	// копирование набора прав для другого пользователя/организации/подразделения
	Процедура СкопироватьНаборПрав(ОбъектИсточник, ОбъектПриемник) Экспорт
		НаборИсточник = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
		НаборИсточник.Отбор.Объект.Установить(ОбъектИсточник);
		НаборИсточник.Прочитать();
		НаборПриемник = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
		НаборПриемник.Отбор.Объект.Установить(ОбъектПриемник);
		НаборПриемник.Очистить();
		Для Каждого Запись Из НаборИсточник Цикл
			НоваяЗапись = НаборПриемник.Добавить();
			НоваяЗапись.Объект = ОбъектПриемник;
			НоваяЗапись.ПравоНастройка = Запись.ПравоНастройка;
			НоваяЗапись.Значение = Запись.Значение;
		КонецЦикла;
		НаборПриемник.Записать();
	КонецПроцедуры
	
	// Заполняет реквизит "СтруктураОписаний" из макета "НастройкиПоУмолчанию"
	// В дальнейшем эта структура может использоваться для вывода описаний в форме
	Процедура ПолучитьСтруктуруОписаний() Экспорт
		Состояние("Получение структуры описания прав и настроек...");
		Макет = ПланыВидовХарактеристик.уатПраваИНастройки.ПолучитьМакет("НастройкиПоУмолчанию");	
		Для Номер = 1 По 10000 Цикл	// Заведомо больше, чем есть в макете
			Код = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C3").ТекущаяОбласть.Текст);
			Описание=СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C8").ТекущаяОбласть.Текст);
			Если Код = "" Тогда Прервать;
			ИначеЕсли Описание = "" Тогда Продолжить;
			КонецЕсли;
			СтруктураОписаний.Вставить("_" + Код, Описание);
		КонецЦикла;
	КонецПроцедуры
	
	//Сохранение прав объекта в регистр сведений.
	// Функция осуществляет рекурсивный обход дерева прав с поиском и сохранением изменений.
	// Если ОбъектНастройкиПрав соответствует текущему пользователю,
	// его подразделению или организации, а так же компании в целом, производится
	// обновление кэша прав (только для клиента).
	Функция ЗаписатьПраваИНастройки(ВеткаДерева = Неопределено) Экспорт
		// При неопределенном входном параметре берем корень дерева
		Если ВеткаДерева = Неопределено Тогда
			ВеткаДерева = ДеревоПрав;
		КонецЕсли; 
		
		// проверим заполненность способа распределения затрат
		нсУчетЗатрат = НайтиОтмеченноеЗначениеВДеревеЗначений(ДеревоПрав.Строки, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиУчетЗатрат);
		Если нсУчетЗатрат <> Неопределено И нсУчетЗатрат.Значение Тогда
			нсРаспределениеЗатрат = НайтиОтмеченноеЗначениеВДеревеЗначений(ДеревоПрав.Строки, ПланыВидовХарактеристик.уатПраваИНастройки.СпособРаспределенияЗатратМеждуТС);
			Если нсРаспределениеЗатрат <> Неопределено И НЕ ЗначениеЗаполнено(нсРаспределениеЗатрат.Значение) Тогда
				Сообщить("Необходимо указать способ распределения затрат между ТС!");
				Возврат Ложь;
			КонецЕсли;			
		КонецЕсли;
		
		// проверим правильность выбора основной АЗС типа склад
		нсАЗС = НайтиОтмеченноеЗначениеВДеревеЗначений(ДеревоПрав.Строки, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);	
		Если нсАЗС <> Неопределено Тогда
			Если ТипЗнч(нсАЗС.Значение.Контрагент_Склад) <> Тип("СправочникСсылка.Склады") Тогда
				нсВидЗаправки = НайтиОтмеченноеЗначениеВДеревеЗначений(ДеревоПрав.Строки, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
				Если нсВидЗаправки <> Неопределено И (нсВидЗаправки.Значение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад ИЛИ нсВидЗаправки.Значение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны) Тогда
					Сообщить("Должна быть выбрана основная АЗС - склад!");
					Возврат Ложь;
				КонецЕсли;			
			ИначеЕсли ТипЗнч(нсАЗС.Значение.Контрагент_Склад) <> Тип("СправочникСсылка.Контрагенты") Тогда
				нсВидЗаправки = НайтиОтмеченноеЗначениеВДеревеЗначений(ДеревоПрав.Строки, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
				Если нсВидЗаправки <> Неопределено И (нсВидЗаправки.Значение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик ИЛИ нсВидЗаправки.Значение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
					ИЛИ нсВидЗаправки.Значение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные) Тогда
					Сообщить("Должна быть выбрана основная АЗС - контрагент!");
					Возврат Ложь;
				КонецЕсли;						
			КонецЕсли;
		КонецЕсли; 
		
		// каждую ветку будем обходить в попытке, по причине возможного отказа записи
		Попытка
			Для каждого Строка Из ВеткаДерева.Строки Цикл
				Если Строка.Группа Тогда
					Если НЕ ЗаписатьПраваИНастройки(Строка) Тогда
						Возврат Ложь;
					КонецЕсли;
				ИначеЕсли Строка.Изменено Тогда
					Рег=РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
					Если ТипЗнч (ОбъектНастройкиПрав) = Тип("СправочникСсылка.Пользователи") Тогда
						Рег.Объект = ОбъектНастройкиПрав;
					Иначе
						Рег.Объект = ОбъектНастройкиПрав;
					КонецЕсли;
					Рег.ПравоНастройка = Строка.ПравоНастройка;
					Рег.Значение = Строка.Значение;
					Рег.Записать();
					Строка.Изменено = Ложь;
				КонецЕсли; 
			КонецЦикла; 
			
			// В случае исключения вернем Ложь - запись не удалась
		Исключение Возврат Ложь;
		КонецПопытки;
		
		Если ВеткаДерева = ДеревоПрав Тогда  // необходимо ввиду рекурсивности вызова
			//Сохранение настройки доступности документов и справочников в регистр сведений.
			Попытка
				Отбор=Новый Структура;
				Отбор.Вставить("Пользователь", ОбъектНастройкиПрав);
				
				ТекСтроки = ТабДоступностиСправочников.НайтиСтроки(Отбор);
				Для Каждого ТекСтрока из ТекСтроки Цикл    
					Если ТекСтрока.Изменено Тогда
						Рег = РегистрыСведений.уатДоступКСправочникам.СоздатьМенеджерЗаписи();
						Рег.Пользователь = ОбъектНастройкиПрав;
						Рег.Право = ТекСтрока.Право;
						Рег.Объект = ТекСтрока.Объект;
						Рег.ДоступЕсть = ТекСтрока.Доступность;
						Рег.Записать();
						ТекСтрока.Изменено = Ложь;	
					КонецЕсли;
				КонецЦикла;
				
				ТекСтроки = ТабДоступностиДокументов.НайтиСтроки(Отбор);
				Для Каждого ТекСтрока из ТекСтроки Цикл
					Если ТекСтрока.Изменено Тогда
						Рег = РегистрыСведений.уатДоступКДокументам.СоздатьМенеджерЗаписи();
						Рег.Пользователь = ОбъектНастройкиПрав;
						Рег.Право = ТекСтрока.Право;
						Рег.Объект = ТекСтрока.Объект;
						Рег.ДоступЕсть = ТекСтрока.Доступность;
						Рег.Записать();
						ТекСтрока.Изменено = Ложь;	
					КонецЕсли;
				КонецЦикла;
			Исключение Возврат Ложь;
			КонецПопытки;
			
			// Если все корректно записалось, то для корневого вызова проверим
			// необходимость обновления собственных прав (только на клиенте)
			#Если Клиент Тогда
				Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяОрганизация");
				Если ОбъектНастройкиПрав = ПараметрыСеанса.ТекущийПользователь ИЛИ ОбъектНастройкиПрав = Организация Тогда
					// Обновим текущий набор прав
					Состояние ("Обновляю права текущего пользователя");
					глПраваУАТ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.ТекущийПользователь);
					Сообщить("Права текущего пользователя обновлены.", СтатусСообщения.Информация);
					// Поскольку на экране могут быть открыты формы объектов, скажем им, что надо бы обновить кэш прав..
					Оповестить("ОбновитьПрава", ПараметрыСеанса.ТекущийПользователь);
				КонецЕсли; 
			#КонецЕсли
		КонецЕсли;
		Возврат Истина;
	КонецФункции // ЗаписатьПраваИНастройки
	
	//Получение иерархической структуры ПВХ Права и настройки в результат запроса
	Процедура ПолучениеИерархииПрав() Экспорт
		Состояние("Получение дерева прав и настроек...");
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПланВидовХарактеристикПраваИНастройки.Ссылка,
		|	ПланВидовХарактеристикПраваИНастройки.Код КАК Код,
		|	ПланВидовХарактеристикПраваИНастройки.Наименование,
		|	ПланВидовХарактеристикПраваИНастройки.ЭтоГруппа,
		|	ПланВидовХарактеристикПраваИНастройки.ТипЗначения,
		|	ПланВидовХарактеристикПраваИНастройки.Назначение,
		|	ПланВидовХарактеристикПраваИНастройки.ЭтоНастройка,
		|	ПланВидовХарактеристикПраваИНастройки.Родитель,
		|	ПланВидовХарактеристикПраваИНастройки.ЗначениеПоУмолчанию,
		|	ПланВидовХарактеристикПраваИНастройки.НастройкаОрганизации,
		|	ПланВидовХарактеристикПраваИНастройки.НастройкаКомпании,
		|	ПланВидовХарактеристикПраваИНастройки.НастройкаПодразделения,
		|	ПланВидовХарактеристикПраваИНастройки.НастройкаПользователя
		|ИЗ
		|	ПланВидовХарактеристик.уатПраваИНастройки КАК ПланВидовХарактеристикПраваИНастройки
		|ГДЕ
		|	(НЕ ПланВидовХарактеристикПраваИНастройки.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код ИЕРАРХИЯ";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		ЗапросПравИНастроек = Запрос.Выполнить();
	КонецПроцедуры
	
	
	//Получение настройки доступности справочников из результат запроса
	Процедура ПолучениеДоступностиСправочников() Экспорт
		Текст = "ВЫБРАТЬ
		|	ДоступКСправочникам.Пользователь,
		|	ДоступКСправочникам.Объект,
		|	ДоступКСправочникам.Право,
		|	ДоступКСправочникам.ДоступЕсть КАК Доступность,
		|	ЛОЖЬ КАК Изменено
		|ИЗ
		|	РегистрСведений.уатДоступКСправочникам КАК ДоступКСправочникам";
		Запрос = Новый Запрос;
		Запрос.Текст = Текст;
		ТабДоступностиСправочников = Запрос.Выполнить().Выгрузить();
	КонецПроцедуры
	
	//Получение настройки доступности документов из результат запроса
	Процедура ПолучениеДоступностиДокументов() Экспорт
		Текст = "ВЫБРАТЬ
		|	ДоступКДокументам.Пользователь,
		|	ДоступКДокументам.Объект,
		|	ДоступКДокументам.Право,
		|	ДоступКДокументам.ДоступЕсть КАК Доступность,
		|	ВЫБОР
		|		КОГДА ДоступКДокументам.Объект ССЫЛКА Справочник.Пользователи
		|			ТОГДА ""Пользователи""
		|	КОНЕЦ КАК ВидОбъекта,
		|	ЛОЖЬ КАК Изменено
		|ИЗ
		|	РегистрСведений.уатДоступКДокументам КАК ДоступКДокументам";
		Запрос = Новый Запрос;
		Запрос.Текст = Текст;
		ТабДоступностиДокументов = Запрос.Выполнить().Выгрузить();
	КонецПроцедуры
	
	//Формирование иерархии
	Процедура ПостроениеВеткиДереваПрав(ВыборкаРодитель, СтрокиРодитель, Уровень = 0) Экспорт
		Состояние("Формирование дерева прав и настроек...");
		Выборка = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			// Проверим, надо ли выводить эту строчку выборки
			Если Выборка.Уровень() <> Уровень 
			 ИЛИ НЕ Выборка.ЭтоГруппа И ((Выборка.ЭтоНастройка И НЕ ОтображатьНастройки)
			   ИЛИ (НЕ Выборка.ЭтоНастройка И НЕ ОтображатьПрава)
			   ИЛИ (НЕ ЭтоОбъединеннаяКонфигурация И Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.ДокументыТК)
			   ИЛИ (НЕ ЭтоОбъединеннаяКонфигурация И Выборка.Родитель = ПланыВидовХарактеристик.уатПраваИНастройки.ДокументыТК)
			   ИЛИ (НЕ ЭтоОбъединеннаяКонфигурация И НЕ ЭтоОбъединениеСТЛЭ И Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРаботуСУАТ)
			   ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Компания      И НЕ Выборка.НастройкаКомпании)
			   ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Организация   И НЕ Выборка.НастройкаОрганизации)
			   ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Подразделение И НЕ Выборка.НастройкаПодразделения)
			   ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь  И НЕ Выборка.НастройкаПользователя)) тогда
				Продолжить;
			КонецЕсли;
			
			// Проверим настройки из ТЛЭ
			Если НЕ ЭтоОбъединениеСТЛЭ Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.УправлениеЭкспедированием 
				 ИЛИ Выборка.Родитель = ПланыВидовХарактеристик.уатПраваИНастройки.УправлениеЭкспедированием 
				 ИЛИ Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРаботуСУЭ 
				 ИЛИ Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.ТекущаяСтраницаПанелиФункцийУЭ
				 ИЛИ Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.ОткрыватьПриЗапускеПанельФункцийУЭ Тогда
				 	Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Добавим строку и заполним её параметры
			Строка = СтрокиРодитель.Добавить();
			Строка.ПравоНастройка = Выборка.Ссылка;
			Строка.Код = Выборка.Код;
			Строка.Назначение = Выборка.Назначение;
			Строка.ЭтоНастройка = Выборка.ЭтоНастройка;
			Строка.Группа = Выборка.ЭтоГруппа;
			Строка.Изменено = Ложь;
			Строка.ПоУмолчанию = Выборка.ЗначениеПоУмолчанию;
			Строка.НастройкаКомпании = Выборка.НастройкаКомпании;
			Строка.НастройкаОрганизации = Выборка.НастройкаОрганизации;
			Строка.НастройкаПодразделения = Выборка.НастройкаПодразделения;
			Строка.НастройкаПользователя = Выборка.НастройкаПользователя;
			
			// Проверим, если это группа, пойдем на следующий уровень рекурсией
			Если Строка.Группа Тогда
				Строка.КартинкаЭлемента = 6;	// Картинка открытой папки из ккМаркеры
				ПостроениеВеткиДереваПрав(Выборка, Строка.Строки, 1 + Выборка.Уровень());
				// Для группы ни значения ни типа не бывает
			Иначе
				// Сначала проверим число типов, так как поддерживается строго только один
				МассивТипов = Выборка.ТипЗначения.Типы();
				Если МассивТипов.Количество() = 1 Тогда
					// Определимся с типом значения
					Строка.Тип = МассивТипов[0]; // Тут только один, составные не поддерживаем
					Если Строка.Тип = Тип("Булево") Тогда
						Строка.ЗначениеБулево = уатПраваИНастройки.уатПраво(Строка.ПравоНастройка, СтруктураТекущихПрав);
						Строка.Значение = Строка.ЗначениеБулево;
					Иначе
						Строка.ЗначениеБулево = 2;
						Строка.Значение = уатПраваИНастройки.уатПраво(Строка.ПравоНастройка, СтруктураТекущихПрав);
					КонецЕсли; 
				Иначе // Умудрились создать элемент с несколькими типами или вовсе без них
					Строка.ЗначениеБулево = 2;
					Строка.Значение = "Ошибка в заданных типах - должен быть один тип!";
				КонецЕсли;
				// Теперь определим доступность и картинку
				Если (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Компания И  НЕ Строка.НастройкаКомпании) 
				 ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Организация И  НЕ Строка.НастройкаОрганизации) 
				 ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Подразделение И  НЕ Строка.НастройкаПодразделения) 
				 ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь  И  НЕ Строка.НастройкаПользователя) Тогда
					
					Строка.КартинкаЭлемента = 21;	// Картинка серого маркера из ккМаркеры
				ИначеЕсли Строка.ЭтоНастройка Тогда
					Строка.КартинкаЭлемента = 20;	// Картинка зеленого маркера из ккМаркеры
				Иначе
					Строка.КартинкаЭлемента = 18;	// Картинка красного маркера из ккМаркеры
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецПроцедуры
	
	// Процедура формирует структуру прав объекта в виде дерева
	//
	Процедура ФормированиеДереваПравОбъекта() Экспорт
		// Получим соответствие прав и настроек выбранного объекта в реквизит СтруктураТекущихПрав
		СтруктураТекущихПрав = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектНастройкиПрав);
		// Все запросы к БД сделаны, далее просто отобразим данные в соответствии с фильтрами
		ДеревоПрав.Строки.Очистить();
		Если НЕ (ОтображатьПрава ИЛИ ОтображатьНастройки) Тогда
			// Хотя бы один флаг должен быть включен.
			ОтображатьНастройки = Истина;
		КонецЕсли;
		ПостроениеВеткиДереваПрав(ЗапросПравИНастроек, ДеревоПрав.Строки);
	КонецПроцедуры
	
	// Определяет, пустая ли группа в дереве
	Функция ГруппаПустая(Строка, Пустая = Истина)
		Для Каждого Стр Из Строка.Строки Цикл
			Пустая = Пустая И ГруппаПустая(Стр, Пустая);
			Пустая = Пустая И Стр.Группа;
		КонецЦикла;
		Возврат Пустая;
	КонецФункции
	
	// Настройка вида дерева настроек (пустые группы отображаются свернутыми)
	Процедура НастроитьВидДерева(ЭтаФорма, Дерево) Экспорт
		Для Каждого Стр Из Дерево.Строки Цикл
			Если Стр.Группа Тогда
				НастроитьВидДерева(ЭтаФорма, Стр);
				Если ГруппаПустая(Стр) Тогда
					ЭтаФорма.ЭлементыФормы.ДеревоПрав.Свернуть(Стр);
				Иначе
					Если Стр.Уровень()=0 Тогда
						ЭтаФорма.ЭлементыФормы.ДеревоПрав.Развернуть(Стр, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		УдалитьПустыеГруппы(ЭтаФорма, Дерево);
	КонецПроцедуры
	
	//Определяет, использует ли текущий пользователь шаблон прав Объект
	Функция ТекущийПользовательИспользуетШаблон(Объект) Экспорт
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Ссылка
			|ИЗ
			|	Справочник.Пользователи
			|ГДЕ
			|	Ссылка = &ПараметрСсылка		|");
			Запрос.УстановитьПараметр("ПараметрСсылка", ПараметрыСеанса.ТекущийПользователь);
			Если Запрос.Выполнить().Выбрать().Количество() > 0 Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецФункции
	
	////Определяет, использует ли пользователь (объект) шаблон прав
	//Функция ОбъектИспользуетШаблонПрав(Объект) Экспорт
	//	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
	//		Если Не ЗначениеНеЗаполнено(Объект) Тогда
	//			Если НЕ ЗначениеНеЗаполнено(Объект.ШаблонПрав) Тогда
	//				Возврат Истина;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Возврат Ложь;
	//КонецФункции
	
	// удаляет пустые группы из дерева
	Процедура УдалитьПустыеГруппы(ЭтаФорма, Дерево)
		Пока Истина Цикл
			Все = Истина;
			Для Каждого Стр Из Дерево.Строки Цикл
				УдалитьПустыеГруппы(ЭтаФорма, Стр);
				Если Стр.Группа Тогда
					Если ГруппаПустая(Стр) Тогда
						Дерево.Строки.Удалить(Стр);
						Все = Ложь;
						Прервать;
					Иначе
						Если Стр.Уровень() = 0 Тогда
							ЭтаФорма.ЭлементыФормы.ДеревоПрав.Развернуть(Стр);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Все Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ
	
	// Заполним виды типов значений
	//ТипыОбъектов = Новый Массив(4);
	//ТипыОбъектов[0] = Тип ("Строка");
	//ТипыОбъектов[1] = Тип ("СправочникСсылка.Организации");
	//ТипыОбъектов[2] = Тип ("СправочникСсылка.ПодразделенияКомпании");
	//ТипыОбъектов[3] = Тип ("СправочникСсылка.Пользователи");
	//ТипОбъектаНастройки = Новый ОписаниеТипов(ТипыОбъектов,,,);
	
	// Создадим колонки дерева
	ДеревоПрав.Колонки.Очистить();
	ДеревоПрав.Колонки.Добавить("ПравоНастройка");	// Элемент ПВХ
	ДеревоПрав.Колонки.Добавить("Код");				// Код элемента
	ДеревоПрав.Колонки.Добавить("Значение");		// Значение права / настройки
	ДеревоПрав.Колонки.Добавить("ЗначениеБулево");	// Значение права / настройки для булевого типа
	ДеревоПрав.Колонки.Добавить("ПоУмолчанию");		// Значение права / настройки из ПВХ по умолчанию
	ДеревоПрав.Колонки.Добавить("Изменено");		// Флаг изменения
	ДеревоПрав.Колонки.Добавить("Назначение");		// Уровень назначения права / настройки
	ДеревоПрав.Колонки.Добавить("ЭтоНастройка");	// Флаг настройки
	ДеревоПрав.Колонки.Добавить("Группа");			// Флаг элемента группы
	ДеревоПрав.Колонки.Добавить("КартинкаЭлемента");// Идентификатор картинки элемента для визуализации
	ДеревоПрав.Колонки.Добавить("Тип");				// Тип значения характеристики
	ДеревоПрав.Колонки.Добавить("НастройкаКомпании");  					// Флаг настройка компании
	ДеревоПрав.Колонки.Добавить("НастройкаОрганизации");				// Флаг настройка организации
	ДеревоПрав.Колонки.Добавить("НастройкаПодразделения");				// Флаг настройка подразделения
	ДеревоПрав.Колонки.Добавить("НастройкаПользователя");				// Флаг настройка пользователя
	
	// Создадим структуру описаний (такого типа реквизитов нет, используем произвольный)
	СтруктураОписаний = Новый Структура();
	
	// проверка на объединение с типовой
	ЭтоОбъединеннаяКонфигурация = уатОбщегоНазначения.ЭтоОбъединеннаяКонфигурация();
	
	// Проверим на объединение с ТЛЭ
	ЭтоОбъединениеСТЛЭ = уатОбщегоНазначения.ЭтоОбъединениеСТЛЭ();
#КонецЕсли