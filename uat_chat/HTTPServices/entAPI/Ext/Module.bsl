
				
Функция ЗаписатьХранилищеВСтроку(Тбл,ТекДт=Неопределено)
	
	Если ТекДт = Неопределено Тогда
		ТекДТ = ТекущаяДата();
	КонецЕСЛИ;
	
	Стк = Новый структура();
	Для а=1 по ТБл.Колонки.Количество() Цикл
		Кол = ТБл.Колонки[а-1];
		
		Если Найти(Кол.Имя,"GUID") <> 0 Тогда
			п = Кол.Имя;
			Кол.Имя = п+"1";
			ТБл.Колонки.Добавить(п,Новый ОписаниеТипов("Строка"));
			Стк.Вставить(п+"1",п);
		КонецЕСЛИ;
		
	КонеццИклА;
	
	Если Стк.Количество()<>0 Тогда
		Для каждого Стр из ТБл Цикл
			Для каждого эл из Стк Цикл
				Стр[эл.Значение] = СокрЛП(Стр[эл.Ключ].УникальныйИдентификатор());
			Конеццикла;
		КонецЦикла;
	КонецЕсли;
	
	//Удалим лишние колонки
	Для каждого Эл из Стк Цикл
		Тбл.Колонки.Удалить(Эл.Ключ);
	КонецЦикла;
	
	Мас = Новый МАссив;
	Мас.Добавить(ТекДТ);
	МАс.ДОбавить(ТБл);
	
	хр = Новый ХранилищеЗначения(Мас,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
	
КонецФункции
			

Процедура ТБлСтрвJSON(ЗапДЖ,Тбл)
	
	Для каждого Стр из Тбл Цикл
		ЗапДж.ЗаписатьНачалоОбъекта();
		
		Для каждого Кол из Тбл.Колонки Цикл
			
			ЗапДЖ.ЗаписатьИмяСвойства(Кол.имя);
			Если  Стр[Кол.Имя] = NULL или Стр[Кол.Имя] = Неопределено Тогда
				ЗапДЖ.ЗаписатьЗначение(СокрлП(Стр[Кол.Имя]));
			ИНачеЕсли Найти(Кол.Имя,"GUID") <> 0 Тогда
				ЗапДЖ.ЗаписатьЗначение(СокрлП(Стр[Кол.Имя].УникальныйИдентификатор()));
			ИНачеЕсли Найти(Кол.Имя,"DT") <> 0 Тогда
				ЗапДЖ.ЗаписатьЗначение(XMLстрока(Стр[Кол.Имя]));
			ИНаче
				ЗапДЖ.ЗаписатьЗначение(СокрлП(Стр[Кол.Имя]));
			КонецЕСЛИ;
			
		КонеццИклА;
		
		ЗапДЖ.ЗаписатьКонецОбъекта();
	КонеццИклА;
	
	
КонецПроцедуры

Функция ДанныеЛЗК(Стк)
	
	 ТекНом = СокрлП(Стк.num);
	 НадоПоАвто = Число(Стк.NdTS);
	 ДатаДОк = Дата(Стк.TekDt);
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонДт",КонецДня(ДатаДОк)+1);
	Запрос.УстановитьПараметр("НачДтРем",ДобавитьМЕсяц(ДатаДОк,-1));
	Запрос.УстановитьПараметр("НачДтПл",ДатаДОк - 3600*24);
	Запрос.УстановитьПараметр("ОтборПоАвто",?(НадоПоАвто=1,Истина,Ложь));
	Запрос.УстановитьПараметр("пНом","%"+СокрЛП(ТекНом));
	Запрос.УстановитьПараметр("ТекНом",СокрЛП(ТекНом));
	
	
	
	ЗАпрос.Текст = "
	| SELECT  DISTINCT
	|   ДокРем.ссылка докGUID,                                     
	|   ДокРем.Номер Ном,
	|   ДокРем.СтрОсновнаяРабота ОснРаб,
	|	ДокРем.Дата ДтDT,
	|	ДокРем.ДатаОкончания Дт1DT,
	|   СпрТС.ГаражныйНомер код,
	|   СпрСотр.ФизЛицо ВодGUID,
	|   ДокМат.Агрегат идАгрGUID,
	|   CASE WHEN ДокМат.Замена THEN 1  ELSE 0 END  Замена,
	|   ДокМат.Количество Кол,
	|   1 ВидДок,
	|   спрВид.Наименование ВидРемонта,
	|   ДокРем.ДатаНачала ДтНачDT,
	|   ДокРем.ДатаОкончания ДтКонDT
	|
	| FROM Документ.уатРемонтныйЛист ДокРем 
	| INNER JOIN Справочник.уатВидыОбслуживанияТС спрВид  ON спрВид.Ссылка = ДокРем.ВидОбслуживания
	| INNER JOIN Справочник.уатТС спрТС  ON спрТС.ссылка = ДокРем.ТС
	| LEFT OUTER JOIN Документ.уатРемонтныйЛист.Материалы ДокМат ON ДокМат.Ссылка = ДокРем.Ссылка                                        
	| LEFT OUTER JOIN Справочник.уатСотрудники СпрСотр ON СпрСотр.Ссылка = ДокРем.Водитель                                       
	|                                         
	| WHERE ДокРем.ДатаНачала < &КонДт
	|     and (ДокРем.ДатаОкончания >= &НачДтРем OR ДокРем.ДатаОкончания = ДатаВремя(1,1,1,0,0,0))
	|     AND ( ДокРем.номер Like (&пНом) OR  ДокРем.номер = &ТекНом
	|           OR  (СпрТС.ГаражныйНомер = &ТекНом AND  &ОтборПоАвто = TRUE)   )
	|     AND Докрем.Дата > ДатаВремя(2010,1,1)
	|
	|UNION ALL
	|
	|SELECT
	|	 ДокПЛ.Ссылка ид,
	|	 Номер Ном,
	|	   NULL ОснРаб,
	|	 Дата Дт,
	|	 ДатаВыезда Дт1,
	|	 СпрТС.ГаражныйНомер Код,
	|	   СпрСотр.ФизЛицо  Вод,
	|	   NULL  идАгр,
	|	   NULL  Замена,
	|	   0 Кол,
	|	   2 ВидДок,
	|	   NULL,
	|	   NULL,
	|	   NULL
	|	
	|	FROM Документ.уатПутевойЛист ДокПЛ 
	|	INNER JOIN Справочник.уатТС СпрТС  ON СпрТС.Ссылка = ДокПЛ.ТранспортноеСредство
	|   LEFT OUTER JOIN Справочник.уатСотрудники СпрСотр ON СпрСотр.Ссылка = ДокПЛ.Водитель1                                       
	|	WHERE ДокПЛ.Номер = &ТекНом
	|           OR  (СпрТС.ГаражныйНомер = &ТекНом AND  &ОтборПоАвто = TRUE)  
	|        AND  ДатаВыезда < &КонДт 
	|        AND  ДатаВозвращения >= &НачДтПл
	|
	//|UNION ALL
	//|
	//|SELECT DISTINCT
	//|	 Регистратор ид,
	//|	 Рег.Номер Ном,
	//|	   NULL ОснРаб,
	//|	 Период Дт,
	//|	 Период Дт1,
	//|	 СпрТС.ГаражныйНомер Код,
	//|	   СпрСотр.ФизЛицо  Вод,
	//|	   Агрегат  идАгр,
	//|	   Замена  Замена,
	//|	   Количество Кол,
	//|	   3 ВидДок,
	//|	   NULL,
	//|	   NULL,
	//|	   NULL
	//|	
	//|	FROM РегистрСведений.РазрешениеНаЗаменуМасла Рег
	//|	INNER JOIN Справочник.уатТС СпрТС  ON СпрТС.Ссылка = Рег.ТС
	//|   LEFT OUTER JOIN Справочник.уатСотрудники СпрСотр ON СпрСотр.Ссылка = Рег.Сотрудник                                       
	//|	WHERE (СпрТС.ГаражныйНомер = &ТекНом AND  &ОтборПоАвто = TRUE)   
	//|        AND  Период < &КонДт 
	//|        AND  Период >= &НачДтРем
	|
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЛЗК(СткПар)
	
	 ЗапДж = НОвый ЗаписьJSON;
	 ЗапДЖ.УстановитьСтроку();
	 ЗапДж.ЗаписатьНачалоОбъекта();
	 
	 ЗапДЖ.ЗаписатьИмяСвойства("ТекДата");
	 ЗапДж.ЗаписатьЗначение(Формат(ТекущаяДата(),"ДФ=yyyyMMddhhmmss"));
	 
	 ЗапДЖ.ЗаписатьИмяСвойства("БлокДанные");
	 ЗапДж.ЗаписатьНачалоМассива();
	 
	 ТблСтрвJSON(ЗапДЖ,ДанныеЛЗК(СткПар));
	 
	 ЗапДЖ.ЗаписатьКонецМассива();
	 ЗапДЖ.ЗаписатьКонецОбъекта();
	 
	 Возврат ЗапДЖ.Закрыть();
	
КонецФункции

Функция ДанныеГсмЗаМесяц(Стк)
	
	 ДатаДОк = Дата(Стк.TekDt);
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПер",НачалоМЕсяца(ДатаДОк));
	Запрос.УстановитьПараметр("КонПер",КонецМЕсяца(ДатаДОк)+1);
	
	Запрос.Текст  = "ВЫБРАТЬ
	                 |	РасходГСМзаМесяцРасходГСМ.ТС.ГаражныйНомер КАК ГарНом,
	                 |	РасходГСМзаМесяцРасходГСМ.ТС.Наименование КАК имяТС,
	                 |	РасходГСМзаМесяцРасходГСМ.ТС.ГосударственныйНомер КАК ГосНом,
	                 |	РасходГСМзаМесяцРасходГСМ.ТС.ГаражныйНомер КАК КодОС,
	                 |	РасходГСМзаМесяцРасходГСМ.ГСМ.Артикул КАК КодНом,
	                 |	РасходГСМзаМесяцРасходГСМ.Контрагент КАК КАGUID,
	                 |	РасходГСМзаМесяцРасходГСМ.Организация.кодСчетаЗатрат  КАК кодСчетаЗатрат,
	                 |	РасходГСМзаМесяцРасходГСМ.Организация.кодСтатьиЗатрат КАК кодСтатьиЗатрат,
	                 |	РасходГСМзаМесяцРасходГСМ.Организация.КонтрагентОрганизации КАК ОргКАGUID,
					 
	                 |	CASE WHEN Цех ссылка Справочник.уатОбъектыСтроительства THEN Цех.Код ELSE NULL END КАК КодОбъект,
					 
	                 |	CASE WHEN Контрагент ссылка Справочник.ПодразделенияОрганизаций THEN Контрагент ELSE NULL END КАК ЗаказчикПодрGUID,
	                 |	CASE WHEN Контрагент ссылка Справочник.Контрагенты 				THEN Контрагент ELSE NULL END КАК ЗаказчикКАGUID,
					 
	                 |	CASE WHEN Партия.Контрагент_Склад ссылка Справочник.Склады         THEN Партия.Контрагент_Склад.Код ELSE NULL END КАК КодПостСкл,
	                 |	CASE WHEN Партия.Контрагент_Склад ссылка Справочник.Контрагенты    THEN Партия.Контрагент_Склад     ELSE NULL END КАК ПостКАGUID,
	                 |	CASE WHEN Партия.Контрагент_Склад ссылка Справочник.ФизическиеЛица THEN Партия.Контрагент_Склад     ELSE NULL END КАК ПостФЛGUID,
					 
	                 |	СУММА(РасходГСМзаМесяцРасходГСМ.Количество) КАК Количество,
	                 |	уатМестонахождениеТССрезПоследних.Подразделение как ПодрGUID
	                 |ИЗ
	                 |	Документ.РасходГСМзаМесяц.РасходГСМ КАК РасходГСМзаМесяцРасходГСМ
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&КонПер, ) КАК уатМестонахождениеТССрезПоследних
	                 |		ПО РасходГСМзаМесяцРасходГСМ.ТС = уатМестонахождениеТССрезПоследних.ТС
	                 |ГДЕ
	                 |	РасходГСМзаМесяцРасходГСМ.Ссылка.Проведен = ИСТИНА
	                 |	И РасходГСМзаМесяцРасходГСМ.Ссылка.Дата >= &НачПер
	                 |	И РасходГСМзаМесяцРасходГСМ.Ссылка.Дата < &КонПер
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	РасходГСМзаМесяцРасходГСМ.ТС,
					 |	РасходГСМзаМесяцРасходГСМ.ГСМ.Артикул,
					 |	РасходГСМзаМесяцРасходГСМ.Контрагент,
					 |	уатМестонахождениеТССрезПоследних.Подразделение,
					 |	РасходГСМзаМесяцРасходГСМ.Организация,
	                 |	CASE WHEN Цех ссылка Справочник.уатОбъектыСтроительства THEN Цех.Код ELSE NULL END,
	                 |	CASE WHEN Контрагент ссылка Справочник.ПодразделенияОрганизаций THEN Контрагент ELSE Значение(Справочник.ПодразделенияОрганизаций.пустаяссылка) END  ,
	                 |	CASE WHEN Контрагент ссылка Справочник.Контрагенты 				THEN Контрагент ELSE Значение(Справочник.Контрагенты.пустаяссылка) END  ,
	                 |	CASE WHEN Партия.Контрагент_Склад ссылка Справочник.Склады THEN Партия.Контрагент_Склад.Код ELSE NULL END,
	                 |	CASE WHEN Партия.Контрагент_Склад ссылка Справочник.Контрагенты THEN Партия.Контрагент_Склад ELSE NULL END,
	                 |	CASE WHEN Партия.Контрагент_Склад ссылка Справочник.ФизическиеЛица THEN Партия.Контрагент_Склад ELSE NULL END";
					 
		Возврат Запрос.Выполнить().Выгрузить();
	
	
	
	
КонецФункции

Функция ГСМЗаМесяц(СткПар)
	
	 ЗапДж = НОвый ЗаписьJSON;
	 ЗапДЖ.УстановитьСтроку();
	 ЗапДж.ЗаписатьНачалоОбъекта();
	 
	 ЗапДЖ.ЗаписатьИмяСвойства("ТекДата");
	 ЗапДж.ЗаписатьЗначение(Формат(ТекущаяДата(),"ДФ=yyyyMMddhhmmss"));
	 
	 ЗапДЖ.ЗаписатьИмяСвойства("БлокДанные");
	 ЗапДж.ЗаписатьНачалоМассива();
	 
	 ТблСтрвJSON(ЗапДЖ,ДанныеГсмЗаМесяц(СткПар));
	 
	 ЗапДЖ.ЗаписатьКонецМассива();
	 ЗапДЖ.ЗаписатьКонецОбъекта();
	 
	 Возврат ЗапДЖ.Закрыть();
	
КонецФункции

Функция ДанныеДСР(Стк)
	
	ТекОрг = Неопределено;
	Выб = Справочники.Организации.Выбрать();
	мРеквизитОсновнаяОрганизация = Метаданные.Справочники.Организации.Реквизиты.Найти("ОсновнаяОрганизация");
	
	Пока Выб.Следующий() Цикл
		Если мРеквизитОсновнаяОрганизация <> Неопределено И Выб["ОсновнаяОрганизация"] = Ложь Тогда
			ТекОРг = Выб.Ссылка;
			Прервать;
		ИначеЕсли мРеквизитОсновнаяОрганизация = Неопределено Тогда
			ТекОРг = Выб.Ссылка;
			Прервать;
		КонецеслИ;
	КонецЦикла;
	
	 ДатаДОк = Дата(Стк.TekDt);
	 НадоПоДням = Стк.Свойство("perDn")<>Неопределено;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПер",НачалоМЕсяца(ДатаДОк));
	Запрос.УстановитьПараметр("КонПер",КонецМЕсяца(ДатаДОк)+1);
	Запрос.УстановитьПараметр("Орг",ТекОРг);
	Запрос.УстановитьПараметр("НадоПоДням",НадоПоДням);
	
	МАс = новый Массив;
	Мас.Добавить(ПланыВидовРасчета.уатОсновныеНачисления.ОплатаПоЧасовомуТарифу);
	Мас.Добавить(ПланыВидовРасчета.уатОсновныеНачисления.СдельнаяОплата);
	Запрос.УстановитьПараметр("МасРаб",Мас);
	
	МАс = новый Массив;
	Мас.Добавить(ПланыВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт);
	Запрос.УстановитьПараметр("МасРем",Мас);
	
	Запрос.Текст = "
|ВЫБРАТЬ
|	CASE WHEN ДокПЛ.ссылка IS NOT NULL THEN ""Пут.лист""
|	     WHEN ДокРем.ссылка IS NOT NULL THEN ""Рем.лист""
|	     ELSE """" END ВидДок,
|	CASE WHEN ДокПЛ.ссылка IS NOT NULL THEN ДокПЛ.Номер
|	     WHEN ДокРем.ссылка IS NOT NULL THEN ДокРем.Номер
|	     ELSE """" END номДок,
|	CASE WHEN ДокПЛ.ссылка IS NOT NULL THEN ДокПЛ.Дата
|	     WHEN ДокРем.ссылка IS NOT NULL THEN ДокРем.Дата
|	     ELSE """" END дтДокDT,
|	
|	CASE WHEN ДокРем.ссылка IS NOT NULL THEN ДокРем.СтрОсновнаяРабота
|	     ELSE ""Общие ремонтные работы"" END ВидРабот,
|	
//|	СпрМод.ЦенаРем,
|	300 ЦенаРем,
|	СпрМод.ЦенаАренда,
|	РаботаВодителей.ТС.ГаражныйНомер ГарНомер,
|	РаботаВодителей.ТС.ГосударственныйНомер ГосНомер,
|	РаботаВодителей.ЦехКонтрагента.Код кодОбк,
|	НачалоПериода(Период,День) ДнDT,
|	SUM(CASE WHEN ВидРасчета в (&МасРаб) THEN РаботаВодителей.Количество ELSE 0 END) чсРаб,
|	SUM(CASE WHEN ВидРасчета в (&МасРем) THEN РаботаВодителей.Количество ELSE 0 END) чсРем
|	
|ИЗ
|	РегистрНакопления.РаботаВодителей КАК РаботаВодителей
|LEFT OUTER JOIN Справочник.уатТС СпрТС ON СпрТС.ссылка = РаботаВодителей.ТС	
|LEFT OUTER JOIN Справочник.уатМоделиТС СпрМод ON СпрМод.ссылка = СпрТС.Модель	
|LEFT OUTER JOIN Документ.уатПутевойЛист   ДокПЛ  ON ДокПЛ.Ссылка  = РаботаВодителей.Регистратор 	
|LEFT OUTER JOIN Документ.уатРемонтныйЛист ДокРем ON ДокРем.Ссылка = РаботаВодителей.Регистратор 	
|	
|ГДЕ
|	РаботаВодителей.Период >= &НачПер
|	И РаботаВодителей.Период < &КонПер
|	и РаботаВодителей.Водитель.организация = &Орг 
|	и (ВидРасчета в (&МасРем) или ВидРасчета в (&МасРаб) )
|	
|GROUP BY 	
|	СпрМод.ЦенаАренда,
|	НачалоПериода(Период,День) ,
|   РаботаВодителей.ЦехКонтрагента.Код,
|   РаботаВодителей.ТС.ГосударственныйНомер,
|   РаботаВодителей.ТС.ГаражныйНомер,
|	CASE WHEN ДокПЛ.ссылка IS NOT NULL THEN ""Пут.лист""
|	     WHEN ДокРем.ссылка IS NOT NULL THEN ""Рем.лист""
|	     ELSE """" END ,
|	CASE WHEN ДокПЛ.ссылка IS NOT NULL THEN ДокПЛ.Номер
|	     WHEN ДокРем.ссылка IS NOT NULL THEN ДокРем.Номер
|	     ELSE """" END ,
|	CASE WHEN ДокПЛ.ссылка IS NOT NULL THEN ДокПЛ.Дата
|	     WHEN ДокРем.ссылка IS NOT NULL THEN ДокРем.Дата
|	     ELSE """" END ,
|	
|	CASE WHEN ДокРем.ссылка IS NOT NULL THEN ДокРем.СтрОсновнаяРабота
|	     ELSE ""Общие ремонтные работы"" END 
|	";
	
		Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция РаботаДСР(СткПар)
	
	 ЗапДж = НОвый ЗаписьJSON;
	 ЗапДЖ.УстановитьСтроку();
	 ЗапДж.ЗаписатьНачалоОбъекта();
	 
	 ЗапДЖ.ЗаписатьИмяСвойства("ТекДата");
	 ЗапДж.ЗаписатьЗначение(Формат(ТекущаяДата(),"ДФ=yyyyMMddhhmmss"));
	 
	 ЗапДЖ.ЗаписатьИмяСвойства("БлокДанные");
	 ЗапДж.ЗаписатьНачалоМассива();
	 
	 ТблСтрвJSON(ЗапДЖ,ДанныеДСР(СткПар));
	 
	 ЗапДЖ.ЗаписатьКонецМассива();
	 ЗапДЖ.ЗаписатьКонецОбъекта();
	 
	 Возврат ЗапДЖ.Закрыть();
	
КонецФункции

Функция ПодрТС(Запрос)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Запрос.ПолучитьТелоКакСтроку()).Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМестонахождениеТССрезПоследних.ТС.ГаражныйНомер,
	               |	уатМестонахождениеТССрезПоследних.Подразделение
	               |ИЗ
	               |	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&дт, ТС.ГаражныйНомер В (&МАсТС)) КАК уатМестонахождениеТССрезПоследних";
	Запрос.УстановитьПараметр("Дт",Стк.Дт);
	Запрос.УстановитьПараметр("МасТС",Стк.Мас);
	
	ТБл = ЗАпрос.Выполнить().Выгрузить();
	ТБл.Колонки.Добавить("ГУИД");
	ДЛя каждого Стр из Тбл Цикл
		Стр.ГУИД = Стр.Подразделение.УникальныйИдентификатор();
	КонецЦикла;
	
	хр = Новый ХранилищеЗначения(ТБл,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
	
КонецФункции

Функция ДанныеПоТСиПодр()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
|SELECT
|	""Пут.лист"" Вид,
|	Док.ТранспортноеСредство ТС,
|	Док.Номер,
|	Док.ДатаВыезда ДтНач,
|	Док.ДатаВозвращения ДтКон,
|	Док.Водитель1.Наименование Сотр
|
|INTO врТбл
|FROM  Документ.уатПутевойЛист Док
|WHERE Док.ПометкаУдаления = ложь
|    и Док.ДатаВыезда <= &Дт2
|	и Док.ДатаВозвращения >= &Дт1
|	
|UNION ALL
|
|SELECT
|	""Рем.лист"" Вид,
|	Док.ТС,
|	Док.Номер,
|	Док.ДатаНачала,
|	Док.ДатаОкончания,
|	Док.Водитель.Наименование
|
|FROM  Документ.уатРемонтныйЛист Док
|WHERE Док.ПометкаУдаления = ложь
|    и Док.ДатаНачала <= &Дт2
|	и Док.ДатаОкончания >= &Дт1
|	
|;
|ВЫБРАТЬ
|					    СпрПодр.Наименование Подр,
|		               	уатТС.ГаражныйНомер ГарНомер,
|		               	уатТС.ГосударственныйНомер ГосНомер,
|		               	уатТС.Наименование  ТС,
|		               	Док.Вид Вид,
|		               	ДОк.Номер,
|		               	ДОк.дтНач,
|		               	Док.дтКон,
|		               	Док.Сотр
|					   					   				   
|					   
|		               ИЗ
|		               		Справочник.уатТС КАК уатТС
|		               		INNER JOIN РегистрСведений.уатМестонахождениеТС.СрезПоследних КАК уатМестонахождениеТССрезПоследних
|					            по  уатТС.ссылка = уатМестонахождениеТССрезПоследних.ТС 
|					             и  уатМестонахождениеТССрезПоследних.Состояние <> Значение(Справочник.уатСостояниеТС.Привлеченный)
|					         
|					        LEFT OUTER JOIN врТбл Док ON ДОк.ТС = уатТС.ссылка 
|					        INNER JOIN Справочник.ПОдразделенияОрганизаций СпрПодр ON СпрПодр.ссылка =  уатМестонахождениеТССрезПоследних.Подразделение
|					             
|					    ГДЕ   (уатТС.ДатаВыбытия = ДатаВремя(1,1,1) или уатТС.ДатаВыбытия > &Дт1) 
|					     и уатТС.ВидМоделиТС = Значение(Перечисление.уатВидыМоделейТС.Автотранспорт)
|					     
|";
	
	Запрос.УстановитьПараметр("Дт1",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дт2", КонецДня(ТекущаяДата()));
	
	ТБл = Запрос.Выполнить().Выгрузить();
	хр = Новый ХранилищеЗначения(ТБл,Новый СжатиеДанных(5));
	Возврат XMLстрока(хр);
	
	
КонецФункции

Функция ДанныеРее(Тело)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();

	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дт",Стк.дт);
	Запрос.УстановитьПараметр("Дт1",Стк.дт1);
	Запрос.УстановитьПараметр("ВсеДоки",Стк.ВсеДоки);
	Запрос.УстановитьПараметр("НомДок",Стк.НомДок);
	Запрос.УстановитьПараметр("НомДок000","%"+Прав("0000000"+Стк.НомДок,6));
	
	
	Запрос.Текст = "
|ВЫБРАТЬ
|	уатМестонахождениеТССрезПоследних.ТС,
|	уатМестонахождениеТССрезПоследних.Подразделение,
|	уатМестонахождениеТССрезПоследних.Период
|ПОМЕСТИТЬ ВРТбл
|ИЗ
|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт, ) КАК уатМестонахождениеТССрезПоследних

|ОБЪЕДИНИТЬ ВСЕ

|ВЫБРАТЬ
|	уатМестонахождениеТС.ТС,
|	уатМестонахождениеТС.Подразделение,
|	уатМестонахождениеТС.Период
|ИЗ
|	РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
|ГДЕ
|	уатМестонахождениеТС.Период > &Дт
|	И уатМестонахождениеТС.Период < &Дт1
|;

|//////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	Тбл.ТС,
|	Тбл.Подразделение,
|	Тбл.Период,
|	МИНИМУМ(ЕСТЬNULL(Т.Период, &Дт1)) КАК ПериодКон,
|	Тбл.Период КАК изначДт
|ПОМЕСТИТЬ ВРТбл1
|ИЗ
|	ВРТбл КАК Тбл
|		ЛЕВОЕ СОЕДИНЕНИЕ ВРТбл КАК Т
|		ПО (Т.ТС = Тбл.ТС)
|			И (Т.Период > Тбл.Период)

|СГРУППИРОВАТЬ ПО
|	Тбл.ТС,
|	Тбл.Подразделение,
|	Тбл.Период,
|	Тбл.Период
|;

|//////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	Тбл.ТС,
|	Тбл.Подразделение,
|	Тбл.Период,
|	Тбл.ПериодКон
|ПОМЕСТИТЬ ВРПодр
|ИЗ
|	ВРТбл1 КАК Тбл
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|			Т1.ТС КАК ТС,
|			Т1.Период КАК Период,
|			МАКСИМУМ(Т1.изначДт) КАК изНачДт
|		ИЗ
|			ВРТбл1 КАК Т1
|		
|		СГРУППИРОВАТЬ ПО
|			Т1.ТС,
|			Т1.Период) КАК Т
|		ПО (Т.ТС = Тбл.ТС)
|			И (Т.Период = Тбл.Период)
|			И (Т.изНачДт = Тбл.изначДт)
|;

|//////////////////////////////////////////////////////////////////////////////////
|	 
|	 SELECT
|	   Док.ссылка ДокGUID,
|	   Док.Контрагент КонтрагентGUID,
|	   Док.Номер НомерРеестра,
|	   Док.Дата ДатаРеестра,
|	  	СпрТС.ГосударственныйНомер госТС,
|	  	СпрТС.ГаражныйНомер кодТС,
|	  	СпрТС.Наименование ИмяТС,
|	   ISNULL(СпрПодр.Подразделение,Значение(Справочник.ПодразделенияОрганизаций.пустаяссылка))      ПодрGUID,
|	   ISNULL(СпрМст.ссылка,Значение(Справочник.Месторождения.пустаяссылка))        МстGUID,
|	   СпрМст.Наименование   имяМст,
|	   СпрМст.Код   кодМст,
|	   ISNULL(СпрЦО.ссылка,Значение(Справочник.ЦехаКонтрагента.пустаяссылка))        ЦОGUID,
|	   ISNULL(СпрЦО.Владелец,Значение(Справочник.Контрагенты.пустаяссылка))        ЦоКАGUID,
|	   СпрЦО.Наименование   имяЦО,
|	   СпрЦО.Код          кодЦО,
|	   SUM(ДокТЧ.Пробег)   КМ,
|	   SUM(ДокТЧ.количество)  Часы,
|	   SUM(ДокТЧ.количествоКм)КолКм,
|	   SUM(ДокТЧ.Количество1) Час1,
|	   SUM(ДокТЧ.Количество2) Час2,
|	   SUM(ДокТЧ.Количество3) Час3,
|	   SUM(ДокТЧ.Количество4) Час4,
|	   SUM(ДокТЧ.Количество5) Час5,
|	   SUM(ДокТЧ.Количество6) Час6,
|	   SUM(ДокТЧ.Сумма+СуммаКм+Сумма1+Сумма2+Сумма3+Сумма4+Сумма5+Сумма6)  СуммаВсего,
|	   SUM(ДокТЧ.Сумма)  Сум,
|	   SUM(ДокТЧ.СуммаКм) СумКм,
|	   SUM(ДокТЧ.Сумма1) Сум1,
|	   SUM(ДокТЧ.Сумма2) Сум2,
|	   SUM(ДокТЧ.Сумма3) Сум3,
|	   SUM(ДокТЧ.Сумма4) Сум4,
|	   SUM(ДокТЧ.Сумма5) Сум5,
|	   SUM(ДокТЧ.Сумма6) Сум6
|	
|	 FROM Документ.РеестрУслуг Док
|	 INNER JOIN Документ.РеестрУслуг.Услуги ДокТЧ ON ДокТЧ.ссылка = Док.ссылка
|	 INNER JOIN  Справочник.уатТС СпрТС ON СпрТС.Ссылка = ДокТЧ.ТС
|	 LEFT OUTER JOIN Документ.уатПутевойЛист ДокПЛ ON ДокПЛ.ссылка =  ДокТЧ.ПутевойЛист
|	 LEFT OUTER JOIN ВРПодр СпрПодр ON СпрПодр.Период <= ДокПЛ.Дата и  СпрПодр.ПериодКон > ДокПЛ.Дата  и СпрПодр.ТС = ДокТЧ.ТС
|	 LEFT OUTER JOIN   Справочник.ЦехаКонтрагента  СпрЦО  ON СпрЦО.Ссылка  =  ДокТЧ.ЦехКонтрагента
|	 LEFT OUTER JOIN   Справочник.Месторождения СпрМст ON СпрМст.Ссылка = СпрЦО.Месторождение
|	 LEFT OUTER JOIN Константа.ксНашаОрганизация конст ON Конст.Значение =  Док.Контрагент
|	
|	 WHERE (Док.Номер = &НомДок OR Док.Номер LIKE &НомДок000 OR &ВсеДоки=Истина )
|	   AND Док.Дата >= &Дт
|	   AND Док.Дата < &Дт1
|	   AND Конст.Значение IS NULL
|	
|	 GROUP BY  
|	   Док.ссылка ,
|	   Док.Контрагент ,
|	   Док.Номер ,
|	   Док.Дата ,
|	  	СпрТС.ГосударственныйНомер ,
|	  	СпрТС.ГаражныйНомер ,
|	  	СпрТС.Наименование ,
|	   СпрПодр.Подразделение      ,
|	   СпрМст.ссылка        ,
|	   СпрМст.Наименование   ,
|	   СпрМст.Код   ,
|	   СпрЦО.ссылка        ,
|	   СпрЦО.Владелец        ,
|	   СпрЦО.Наименование   ,
|	   СпрЦО.Код   
|
|";
	
	Возврат ЗаписатьХранилищеВСтроку(Запрос.Выполнить().Выгрузить());

	
КонецФункции

Функция РеестрНаСобственныеНужды(Тело)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дт",НачалоМЕсяца(Стк.Дата));
	Запрос.УстановитьПараметр("Дт1",КонецМЕсяца(Стк.Дата)+1);
	
	
	Запрос.Текст = " 
|	
|ВЫБРАТЬ
|		уатМестонахождениеТССрезПоследних.ТС,
|		уатМестонахождениеТССрезПоследних.Подразделение,
|		ДобавитьКДате(уатМестонахождениеТССрезПоследних.Период,Месяц,-3) период
|		INTO ВРТбл
|	ИЗ
|		РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт) КАК уатМестонахождениеТССрезПоследних
|		
|	UNION ALL
|		
|	ВЫБРАТЬ
|		уатМестонахождениеТС.ТС,
|		уатМестонахождениеТС.Подразделение,
|		уатМестонахождениеТС.Период
|	ИЗ
|		РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
|		WHERE Период > &Дт и Период < &Дт1
|	;
|		
|	SELECT  DISTINCT
|		Тбл.ТС,
|		Тбл.Подразделение,
|		Тбл.Период,
|		MIN(ISNULL(Т.Период,&Дт1)) ПериодКон,
|		Тбл.Период изначДт
|	INTO ВРТбл1	
|	FROM ВРТбл Тбл 
|	LEFT OUTER JOIN ВРТбл Т ON Т.ТС = Тбл.ТС и Т.Период > Тбл.Период
|	GROUP BY		
|		Тбл.ТС,
|		Тбл.Подразделение,
|		Тбл.Период
|	;	
|	SELECT DISTINCT
|		Тбл.ТС,
|		Тбл.Подразделение,
|		Тбл.Период,
|		Тбл.ПериодКон
|	INTo ВРПодр
|	FROM ВРТбл1 Тбл
|	INNER JOIN (SELECT ТС,Период,MAX(изначДт) изНачДт FROM ВРТбл1 Т1 GROUP BY ТС,Период) Т ON Т.ТС = Тбл.ТС и Т.Период = ТБл.Период и Т.ИзначДт = Тбл.ИзначДт
|	
|	;
|	////////////////////////////////////////////////////
|
|
|	
|	
|ВЫБРАТЬ
|	ISNULL(РеестрыУслуг.ЦехКонтрагента,Значение(Справочник.ЦехаКонтрагента.пустаяссылка)) ЦОGUID,
|	РеестрыУслуг.ЦехКонтрагента.Наименование имяЦО,
|	РеестрыУслуг.ЦехКонтрагента.Код кодЦО,
|	ISNULL(РеестрыУслуг.ЦехКонтрагента.Месторождение,Значение(Справочник.Месторождения.пустаяссылка)) МстGUID,
|	РеестрыУслуг.ЦехКонтрагента.Месторождение.Наименование имяМСТ,
|	РеестрыУслуг.ЦехКонтрагента.Месторождение.Код кодМСТ,
|	ISNULL(тбПОдр.Подразделение,Значение(Справочник.ПодразделенияОрганизаций.пустаяссылка)) ПодрGUID,
|	РеестрыУслуг.ТС.Наименование ИмяТС,
|	РеестрыУслуг.ТС.ГаражныйНомер КодТС,
|	РеестрыУслуг.ТС.ГосударственныйНомер госТС,
|	СУММА(РеестрыУслуг.Количество) КАК Количество,
|	СУММА(РеестрыУслуг.Пробег)  КАК Пробег,
|	СУММА(РеестрыУслуг.Сумма)   КАК Сумма,
|	СУММА(РеестрыУслуг.СуммаКм) КАК СуммаКм,
|	СУММА(РеестрыУслуг.Сумма1)  КАК Сумма1,
|	СУММА(РеестрыУслуг.Сумма2)  КАК Сумма2,
|	СУММА(РеестрыУслуг.Сумма3)  КАК Сумма3,
|	СУММА(РеестрыУслуг.Сумма4)  КАК Сумма4,
|	СУММА(РеестрыУслуг.Сумма5)  КАК Сумма5,
|	СУММА(РеестрыУслуг.Сумма6)  КАК Сумма6,
|	СУММА(РеестрыУслуг.Сумма + РеестрыУслуг.СуммаКм + РеестрыУслуг.Сумма1 + РеестрыУслуг.Сумма2 + РеестрыУслуг.Сумма3 + РеестрыУслуг.Сумма4 + РеестрыУслуг.Сумма5 + РеестрыУслуг.Сумма6) КАК СуммаВсего,
|	РеестрыУслуг.Контрагент каGUID
|ИЗ
|	Константа.ксНашаОрганизация КАК ксНашаОрганизация
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РеестрыУслуг КАК РеестрыУслуг
|		ПО ксНашаОрганизация.Значение = РеестрыУслуг.Контрагент
|   LEFT OUTER JOIN врПодр тбПодр ON тбПодр.ТС = РеестрыУслуг.ТС 
|                                  и РеестрыУслуг.ПутевойЛист.ДатаВыезда >= тбПодр.Период 
|                                  и РеестрыУслуг.ПутевойЛист.ДатаВыезда < тбПодр.ПериодКон
|
|ГДЕ
|	РеестрыУслуг.Период >= &Дт
|	И РеестрыУслуг.Период < &Дт1
|
|СГРУППИРОВАТЬ ПО
|	ксНашаОрганизация.Значение,
|	тбПОдр.Подразделение,
|	РеестрыУслуг.ЦехКонтрагента,
|	РеестрыУслуг.ЦехКонтрагента.Месторождение,
|	РеестрыУслуг.ТС,
|	РеестрыУслуг.Контрагент
|";

	Возврат ЗаписатьХранилищеВСтроку(Запрос.Выполнить().Выгрузить());



	
	
КонецФункции

Функция ТаблицаПрицепы(Тело)
	
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дт",НачалоМЕсяца(Стк.Дата));
	Запрос.УстановитьПараметр("Дт1",КонецМЕсяца(Стк.Дата)+1);
	
	
	Запрос.Текст = " 
|	
|ВЫБРАТЬ
|	уатВыработкаТС.ТС.ГосударственныйНомер КАК ГосПрицеп,
|	уатВыработкаТС.ТС.ГаражныйНомер КАК ГарПрицеп,
|	уатВыработкаТС.ТС.Наименование КАК ИмяПрицеп,
|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосТС,
|	уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КАК ГарТС,
|	уатПутевойЛист.ТранспортноеСредство.Наименование КАК ИмяТС,
|	СУММА(уатПутевойЛист.ВсегоЧасов) КАК ВсегоЧасов
|ИЗ
|	РегистрНакопления.уатВыработкаТС КАК уатВыработкаТС
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
|		ПО уатВыработкаТС.Регистратор = уатПутевойЛист.Ссылка
|ГДЕ
|	уатВыработкаТС.ТС <> уатПутевойЛист.ТранспортноеСредство
| и Период >= &Дт
| и Период <  &Дт1
|
|СГРУППИРОВАТЬ ПО
|	уатВыработкаТС.ТС,
|	уатПутевойЛист.ТранспортноеСредство
|";

	Возврат ЗаписатьХранилищеВСтроку(Запрос.Выполнить().Выгрузить());

	
КонецФункции

Функция ТабельТС(Тело)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	оОБр =Обработки.ТабельТС.Создать();
	оОБр.Дт = Стк.Дата;
	оОбр.ВывПодр = Истина;
	оОбр.ВывВсеТипы = Истина;
	оТбл = оОБр.Данные();
	
	оТбл.Свернуть("ГаражныйНомер,ТСимя,госНомер,Подразделение,ТипТС,упрМодельGUID","днХоз,днЛин,днРем,днОЖ,днХозКИПкон,срЧсл,рееЧасы,рееСум,РабЧасы,КонЧсл,Пробег,мтЧасы");
	оТбл.Колонки["Подразделение"].Имя = "ПодразделениеGUID";
	оТбл.Колонки["ТипТС"].Имя = "ТипТСGUID";
	
	Возврат ЗаписатьХранилищеВСтроку(оТбл);

	
КонецФункции

Функция ДанныеСубподряд(Тело)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "
	|ВЫБРАТЬ
	|	СУММА(РеестрУслугСубподрядУслуги.Сумма+СуммаКм+Сумма1+Сумма2+Сумма3) КАК Сумма,
	|	СУММА(РеестрУслугСубподрядУслуги.Количество) КАК Количество,     
	|   РеестрУслугСубподрядУслуги.ТС.ГаражныйНомер Код,
	|   РеестрУслугСубподрядУслуги.ТС.ГосударственныйНомер ГосНомер,
	|   РеестрУслугСубподрядУслуги.ТС.Наименование Наименование,
	|   РеестрУслугСубподрядУслуги.Реестр.Номер Номер,
	|   РеестрУслугСубподрядУслуги.ЗАказчик КонтрагентGUID,
	|   РеестрУслугСубподрядУслуги.ЦехКонтрагента ЦехКонтрагентаGUID,
	|	РеестрУслугСубподрядУслуги.Реестр.Номер НомерРеестра,
	|	РеестрУслугСубподрядУслуги.ССылка.Номер НомерСуб,
	|	РеестрУслугСубподрядУслуги.ССылка.Дата  датаСуб,
	|	РеестрУслугСубподрядУслуги.Ссылка.Контрагент КАGUID,
	|	РеестрУслугСубподрядУслуги.Ссылка.Договор ДоговорGUID
	|ИЗ
	|	Документ.РеестрУслугСубподряд.Услуги КАК РеестрУслугСубподрядУслуги
	|ГДЕ
	|	РеестрУслугСубподрядУслуги.Ссылка.Дата >= &Дт
	|	И РеестрУслугСубподрядУслуги.Ссылка.Дата < &Дт1
	|	И РеестрУслугСубподрядУслуги.Ссылка.ПометкаУдаления = Ложь
	|   и (&оКА=РеестрУслугСубподрядУслуги.Ссылка.Контрагент или &оКА=Неопределено)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрУслугСубподрядУслуги.Реестр.Номер ,
	|   РеестрУслугСубподрядУслуги.ТС.ГаражныйНомер ,
	|   РеестрУслугСубподрядУслуги.ТС.ГосударственныйНомер ,
	|   РеестрУслугСубподрядУслуги.ТС.Наименование ,
	|   РеестрУслугСубподрядУслуги.ЦехКонтрагента,
	|   РеестрУслугСубподрядУслуги.ЗАказчик ,
	|	РеестрУслугСубподрядУслуги.ССылка.Номер,
	|	РеестрУслугСубподрядУслуги.ССылка.Дата ,
	|	РеестрУслугСубподрядУслуги.Ссылка.Договор, 
	|	РеестрУслугСубподрядУслуги.Ссылка.Контрагент, 
	|	РеестрУслугСубподрядУслуги.Ссылка.Контрагент.Код 
	|";
	
	Запрос.УстановитьПараметр("Дт",НачалоМесяца(Стк.Дата));
	Запрос.УстановитьПараметр("Дт1",КонецМесяца(Стк.Дата)+1);
	Если Стк.Свойство("ГУИД")=Истина Тогда
		Запрос.УстановитьПараметр("оКА",Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(Стк.ГУИД)));
	ИНаче
		Запрос.УстановитьПараметр("оКА",Неопределено);
	КонецЕСЛИ;
	
	Тбл = Запрос.Выполнить().Выгрузить();
	
	Если Стк.Свойство("ПоРестрам")=Истина Тогда
		Тбл.Свернуть("НомерРеестра,КАGUID,ДоговорGUID","Сумма");
	КонецеСЛИ;
	
	Возврат ЗаписатьХранилищеВСтроку(Тбл);
	
КонецФункции


Функция ДанныеСубподрядсДоходом(Тело)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	Запрос = Новый Запрос;
Запрос.Текст = "
|ВЫБРАТЬ
|	уатМестонахождениеТССрезПоследних.ТС,
|	уатМестонахождениеТССрезПоследних.Подразделение пПодразделение,
|	уатМестонахождениеТССрезПоследних.Владелец КаВладелец,
|	уатМестонахождениеТССрезПоследних.Состояние пСос,
|	НачалоПериода(уатМестонахождениеТССрезПоследних.Период,День) Период
|	INTO ВРТбл
|ИЗ
|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДтДляПодр) КАК уатМестонахождениеТССрезПоследних
|	
|	
|UNION ALL
|	
|
|ВЫБРАТЬ
|	уатМестонахождениеТС.ТС,
|	уатМестонахождениеТС.Подразделение,
|	уатМестонахождениеТС.Владелец,
|	уатМестонахождениеТС.Состояние,
|	НачалоПериода(уатМестонахождениеТС.Период,День)
|ИЗ
|	РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
|	WHERE Период > &ДтДляПодр и Период < &Дт1
|;
|	
|SELECT  DISTINCT
|	Тбл.ТС,
|	Тбл.пПодразделение,
|	Тбл.КаВладелец,
|	Тбл.пСос,
|	Тбл.Период,
|	MIN(ISNULL(Т.Период,&Дт1)) ПериодКон,
|	Тбл.Период изначДт
|INTO ВРТбл1	
|FROM ВРТбл Тбл 
|LEFT OUTER JOIN ВРТбл Т ON Т.ТС = Тбл.ТС и Т.Период > Тбл.Период
|GROUP BY		
|	Тбл.ТС,
|	Тбл.пПодразделение,
|	Тбл.КаВладелец,
|	Тбл.пСос,
|	Тбл.Период
|;	
|SELECT DISTINCT
|	Тбл.ТС,
|	Тбл.пПодразделение,
|	Тбл.КаВладелец,
|	Тбл.пСос пСостояние,
|	Тбл.Период,
|	Тбл.ПериодКон
|INTo ВРПодр
|FROM ВРТбл1 Тбл
|INNER JOIN (SELECT ТС,Период,MAX(изначДт) изНачДт FROM ВРТбл1 Т1 GROUP BY ТС,Период) Т ON Т.ТС = Тбл.ТС и Т.Период = ТБл.Период и Т.ИзначДт = Тбл.ИзначДт
|
|;
|////////////////////////////////////////////////////

////Соберем владельца
|SELECT  Distinct
|   Рег.регистратор МоментВремени,
|Рег.ПутевойЛист,
|Рег.ТС,
|Рег.Владелец КаВладелец 
|INTO врВлад0
|FROM РегистрНакопления.РеестрыУслуг КАК Рег 
|ГДЕ
|Рег.период  >= &Дт
|И Рег.период <  &Дт1
|   и Рег.Владелец <> Значение(Справочник.Контрагенты.ПустаяССылка)
|   
|;
|
|SELECT
|	Рег.ПутевойЛист,
|Рег.ТС,
|	Рег.КаВладелец
|
|INTO врВлад
|FROM врВлад0 Рег
|INNER JOIN (SELECT ПутевойЛист,ТС,  MIN(МоментВремени) МоментВремени FROM врВлад0 Т GROUP BY ПутевойЛИст,ТС) N ON N.ПутевойЛИст = Рег.ПутевойЛист 
|                                                                                                           и N.ТС               = Рег.ТС
|                                                                                                           и N.МоментВремени    = Рег.МоментВремени
|;   
///////////////////////////////////////////////////////////////
|SELECT ссылка Зн INTO врНашКА FROM Справочник.Организации Спр UNION ALL SELECT Значение FROM  Константа.ксНашаОрганизация ксНашаОрганизация
|;   
///////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|CASE WHEN РеестрыУслуг.Владелец = Значение(Справочник.Контрагенты.ПустаяССылка) 
|     THEN ISNULL(ТблВлад.КаВладелец,ТблПодр.КаВладелец)
|     ELSE РеестрыУслуг.Владелец END ВладелецGUID,
|СпрКА.ИНН влИНН,
|SUM(РеестрыУслуг.Количество) Количество,
|SUM(РеестрыУслуг.Сумма) Сумма,
|SUM(РеестрыУслуг.КоличествоКм) КоличествоКм,
|SUM(РеестрыУслуг.СуммаКм) СуммаКм,
|SUM(РеестрыУслуг.Количество1) Количество1,
|SUM(РеестрыУслуг.Сумма1) Сумма1,
|SUM(РеестрыУслуг.СуммаСуб) СуммаСуб,
|SUM(РеестрыУслуг.Сумма + РеестрыУслуг.СуммаКм + РеестрыУслуг.Сумма1 + РеестрыУслуг.Сумма2 + РеестрыУслуг.Сумма3 + РеестрыУслуг.Сумма4 + РеестрыУслуг.Сумма5 + РеестрыУслуг.Сумма6) итСумма,
|SUM(РеестрыУслуг.Количество) КАК итЧасы,
|SUM(Пробег) Пробег
|	
|ИЗ
|РегистрНакопления.РеестрыУслуг КАК РеестрыУслуг
|                                
|LEFT OUTER JOIN ВРВлад ТблВлад ON ТблВлад.ПутевойЛист = РеестрыУслуг.ПутевойЛист
|                                и ТблВлад.ТС = РеестрыУслуг.ТС
|INNER JOIN Константа.ксНашаОрганизация ксНашаОрганизация ON Истина
|
| LEFT OUTER JOIN ВРПодр ТблПодр ON ТблПодр.ТС = РеестрыУслуг.ТС 
|	                                и ISNULL(РеестрыУслуг.ПутевойЛист.ДатаВыезда,РеестрыУслуг.Период) >= ТблПодр.Период 
|	                                и ISNULL(РеестрыУслуг.ПутевойЛист.ДатаВыезда,РеестрыУслуг.Период) <  ТблПодр.ПериодКон
|
|LEFT OUTER JOIN Справочник.Контрагенты СпрКА ON СпрКА.ссылка = ISNULL(ТблВлад.КаВладелец,ТблПодр.КаВладелец)
|
|WHERE РеестрыУслуг.период  >= &Дт
|И РеестрыУслуг.период      <  &Дт1
|
|и ISNULL(ТблВлад.КаВладелец,ТблПодр.КаВладелец) NOT IN (SELECT зн FROM врНашКА С)
|и РеестрыУслуг.Контрагент NOT IN (SELECT зн FROM врНашКА С)
|
|GROUP BY
|CASE WHEN РеестрыУслуг.Владелец = Значение(Справочник.Контрагенты.ПустаяССылка) 
|     THEN ISNULL(ТблВлад.КаВладелец,ТблПодр.КаВладелец)
|     ELSE РеестрыУслуг.Владелец END ,
|СпрКА.ИНН 
| ";

	
	Запрос.УстановитьПараметр("Дт1",Стк.ДТ1);
	Запрос.УстановитьПараметр("Дт",Стк.Дт);
	Запрос.УстановитьПараметр("ДтДляПодр",Стк.Дт- 3600*24*60);
	
	Тбл = Запрос.Выполнить().Выгрузить();
	
	              
	Возврат ЗаписатьХранилищеВСтроку(Тбл);
	
КонецФункции


#Область ФормированиеQRКода
Функция КомпонентаФормированияQRКода(Отказ)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода'");
	
	Попытка
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", "QR") Тогда
			QRCodeGenerator = Новый("AddIn.QR.QRCodeExtension");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЕсли
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат QRCodeGenerator;
	
КонецФункции
//=======================================================
// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
//  ТекстОшибки      - Строка - в этот параметр помещается описание возникшей ошибки (если возникла).
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Отказ = Ложь;
	
	ГенераторQRКода = КомпонентаФормированияQRКода(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации("Формирование QR-кода",
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции
#КонецОбласти

#Область ЗагрузкаДокументов
Процедура ЗагрузитьТаблицу(ОбкТаб,Тбл)
	
	масКолGUID = Новый Массив;
	Для каждого Кол из Тбл.Колонки Цикл
		Если Найти(Кол.Имя,"GUID")=0 Тогда Продолжить; КонецЕсли;
		масКолGUID.Добавить(Кол.Имя);
	Конеццикла;
	
	ОбкТаб.Очистить();
	Для каждого Стр из Тбл Цикл
		НовСтр = ОбкТаб.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		Для каждого КлЗн из масКолGUID Цикл
			Рек = СокрЛП(СтрЗаменить(клЗн,"GUID",""));
			Если Рек = "" Тогда Продолжить; КонецЕСЛИ;
			
			п = XMLТипЗнч(НовСтр[Рек]).TypeName; 
			пТипСпр = Сред(п,Найти(п,".") + 1);
			//ЗаписьЖурналаРегистрации("Обработка ТЧ: " + пТипСпр + ";" + Стр[клЗн]);
			НовСтр[Рек] = Справочники[пТипСпр].ПолучитьСсылку(Стр[клЗн]);
		Конеццикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиДоговорПоНомеру(КА,Номер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.Номер = &Номер";
	Запрос.УстановитьПараметр("Владелец",КА);
	Запрос.УстановитьПараметр("Номер",Номер);
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() ТОгда
		Возврат Выб.ссылка;
	ИНАче
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиЗапросомСправочникПоРеквизиту(пИмяСправочника, пИмяРеквизита, пЗначениеРеквизита, пЗаменитьУсловиеСтрокойИзПараметра = Ложь, пСтруктураПараметров = Неопределено) Экспорт
	тЗапрос = Новый Запрос("ВЫБРАТЬ
	|	тСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.#пИмяСправочника# КАК тСправочник
	|ГДЕ
	|	тСправочник.#пИмяРеквизита# = &ЗначениеРеквизита");
	тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст, "#пИмяСправочника#", пИмяСправочника); 
	тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст, "#пИмяРеквизита#", пИмяРеквизита); 
	Если пЗаменитьУсловиеСтрокойИзПараметра Тогда
		тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст, "тСправочник." + пИмяРеквизита + " = &ЗначениеРеквизита", пЗначениеРеквизита);
		Попытка
			Для Каждого тПараметр Из пСтруктураПараметров Цикл
				тЗапрос.УстановитьПараметр(тПараметр.Ключ, тПараметр.Значение);
			КонецЦикла;
		Исключение
		КонецПопытки;
	Иначе
		тЗапрос.УстановитьПараметр("ЗначениеРеквизита", пЗначениеРеквизита);
	КонецЕсли;
	
	вЗначение = Справочники[пИмяСправочника].ПустаяСсылка();
	Попытка
		тРезультат = тЗапрос.Выполнить().Выбрать();
		Если тРезультат.Следующий() Тогда
			вЗначение = тРезультат.Ссылка;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат вЗначение;
КонецФункции

Функция ПолучитьДанныеБСМТС(пДанные, КодСостояния)
	мСтруктура = XMLЗначение(Тип("ХранилищеЗначения"), пДанные).Получить();
	Если ТипЗнч(мСтруктура) <> Тип("Структура") Тогда
		КодСостояния = 308;
		Возврат "Неправильный тип данных при передаче";
	КонецЕсли;
	
	мТранспортноеСредство = НайтиЗапросомСправочникПоРеквизиту("уатТС", "ГаражныйНомер", мСтруктура.ГарНомер);
	Если Не ЗначениеЗаполнено(мТранспортноеСредство) Тогда
		КодСостояния = 505;
		Возврат "ТС отсутствуент в БД";
	КонецЕсли;
	ТекстОшибки = "";
	мДанныеИзСистемыМониторинга = глСистемыМониторингаСервер.ПолучитьДанныеПоТС(мТранспортноеСредство, мСтруктура.ДатаНачала, мСтруктура.ДатаОкончания, , ,ТекстОшибки);
	мОбъемОсновногоБака = 0;
	мОстатокТопливаВБаке = 0;
	мДатаАктуальности = Дата("00010101");
	Если мДанныеИзСистемыМониторинга <> Неопределено И мДанныеИзСистемыМониторинга <> 1 Тогда
		мОстатокТопливаВБаке = мДанныеИзСистемыМониторинга.Бак1Кон;
		мОбъемОсновногоБака = мТранспортноеСредство.ОбъемБака;	//ЕмкостьБакаТС
	КонецЕсли;
	мДатаАктуальности = глСистемыМониторингаСервер.ПолучитьДатуАктуальностиПоТС(мТранспортноеСредство, ТекстОшибки);
	мСтруктураВозврата = Новый Структура("ИдентификаторБСМТСЗаполнен, ОстатокТопливаВБаке, ДатаАктуальности, ЕмкостьБакаТС", ЗначениеЗаполнено(мТранспортноеСредство.СистемаМониторинга), мОстатокТопливаВБаке, мДатаАктуальности, мОбъемОсновногоБака);
	мХранилище = Новый ХранилищеЗначения(мСтруктураВозврата, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция ПолучитьКомментарии(СтрДД, КодСостояния)
	мСтруктура = XMLЗначение(Тип("ХранилищеЗначения"), СтрДД).Получить();
	Если ТипЗнч(мСтруктура) <> Тип("Структура") Тогда
		КодСостояния = 308;
		Возврат "Неправильный тип данных при передаче";
	КонецЕсли;

	мЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1		// 0
	|	ОсмотрТС.Ссылка КАК Ссылка,
	|	ОсмотрТС.Дата КАК Дата,
	|	ОсмотрТС.Возврат КАК Возврат
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОсмотрТС КАК ОсмотрТС
	|ГДЕ
	|	ОсмотрТС.ТС.ГаражныйНомер = &ГарНомер И ОсмотрТС.НомерПЛ = &НомерПЛ И НЕ ОсмотрТС.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО ОсмотрТС.Дата УБЫВ
	|;
	|ВЫБРАТЬ		// 1
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Возврат КАК Возврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|ВЫБРАТЬ		// 2
	|	ОсмотрТСРезультаты.Комментарий,
	|	ОсмотрТСРезультаты.ДатаВвода,
	|	ОсмотрТСРезультаты.Критерий
	|ИЗ
	|	Документ.ОсмотрТС.Результаты КАК ОсмотрТСРезультаты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|	ПО ОсмотрТСРезультаты.Ссылка = Реквизиты.Ссылка И ОсмотрТСРезультаты.Комментарий <> """"
	|;
	|ВЫБРАТЬ МАКСИМУМ(ОсмотрТС.Пробег) КАК Пробег	//3
	|ИЗ
	|	Документ.ОсмотрТС КАК ОсмотрТС
	|ГДЕ
	|	ОсмотрТС.ТС.ГаражныйНомер = &ГарНомер И НЕ ОсмотрТС.ПометкаУдаления");
	мЗапрос.УстановитьПараметр("ГарНомер", мСтруктура.пГарНомер);
	мЗапрос.УстановитьПараметр("НомерПЛ", мСтруктура.пНомерПЛ);
	
	мРезультатПакет = мЗапрос.ВыполнитьПакет();
	мРезультатДанныеКрайнегоОсмотра = мРезультатПакет[1].Выбрать();
	мРезультатКомментарии = мРезультатПакет[2].Выбрать();
	мРезультатПробег = мРезультатПакет[3].Выбрать();
	
	мСтруктураВозврата = Новый Структура("Дата, Возврат, Пробег", Дата("00010101"), Ложь, 0);
	мСоответствиеКомментариевКритериям = Новый Соответствие();
	мСоответствиеДатВводаКритериям = Новый Соответствие();
	
	Если мРезультатДанныеКрайнегоОсмотра.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мСтруктураВозврата, мРезультатДанныеКрайнегоОсмотра);
	КонецЕсли;
	Если мРезультатПробег.Следующий() Тогда
		мСтруктураВозврата.Вставить("Пробег", мРезультатПробег.Пробег);
	КонецЕсли;
	
	Пока мРезультатКомментарии.Следующий() Цикл
		мСоответствиеКомментариевКритериям.Вставить(мРезультатКомментарии.Критерий.УникальныйИдентификатор(), мРезультатКомментарии.Комментарий);
		мСоответствиеДатВводаКритериям.Вставить(мРезультатКомментарии.Критерий.УникальныйИдентификатор(), мРезультатКомментарии.ДатаВвода);
	КонецЦикла;
	
	мФиксированноеСоответствиеКомментариевКритериям = Новый ФиксированноеСоответствие(мСоответствиеКомментариевКритериям);
	мФиксированноеСоответствиеДатВводаКритериям = Новый ФиксированноеСоответствие(мСоответствиеДатВводаКритериям);
	мСтруктураВозврата.Вставить("СоответствиеКомментариевКритериям", мФиксированноеСоответствиеКомментариевКритериям);
	мСтруктураВозврата.Вставить("СоответствиеДатВводаКритериям", мФиксированноеСоответствиеДатВводаКритериям);
	мХранилище = Новый ХранилищеЗначения(мСтруктураВозврата, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция ЗагрузитьДОкумент(СтрДД,КодСостояния)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),СтрДД).Получить();
	Если ТипЗнч(Стк)<>Тип("Структура") Тогда
		КодСостояния = 308;
		Возврат "Неправильный тип данных при передаче";
	КонецЕсли;
	
	
	сс = Документы[Стк.ВидДок].ПолучитьСсылку(Стк.GUID);
	Если НАйти(СокрЛ(сс),"Объект не найден")<>0 Тогда
		ОБк = Документы[Стк.ВидДок].СоздатьДокумент();
		Обк.УстановитьСсылкуНового(сс);
	Иначе	
		Обк = сс.ПолучитьОбъект();
	КонецеслИ;
	
	
	ЗаполнитьЗначенияСвойств(Обк,Стк);
	
	Для каждого клЗн из Стк Цикл
		Если Найти(клЗн.ключ,"GUID") = 0 Тогда
			Если Найти(клЗн.ключ, "_REFERENCE") <> 0 Тогда
				
				// разбор полей вида "Водитель_REFERENCEуатСотрудникиVКод", "Организация_REFERENCEОрганизацииVИНН" - поле Организация содержит значение
				//	справочника Организации, которое следует найти через ИНН (клЗн.Значение = ИНН)
				
				ИмяСправочникаВладельца = Прав(клЗн.ключ, СтрДлина(клЗн.ключ) - СтрНайти(клЗн.ключ, "_REFERENCE") - СтрДлина("_REFERENCE") + 1);
				мИмяПоля = Лев(клЗн.ключ, СтрНайти(клЗн.ключ, "_REFERENCE") - 1);
				мИмяСправочникаДляПоиска = Лев(ИмяСправочникаВладельца, СтрНайти(ИмяСправочникаВладельца, "V") - 1);
				мРеквизитПоиска = Сред(клЗн.ключ, СтрНайти(клЗн.ключ, "V") + 1);
				мЗначениеРеквизитаПоиска = клЗн.Значение;
				//Обк[мИмяПоля] = Справочники[мИмяСправочникаДляПоиска].НайтиПоРеквизиту(мРеквизитПоиска, мЗначениеРеквизитаПоиска);
				Обк[мИмяПоля] = НайтиЗапросомСправочникПоРеквизиту(мИмяСправочникаДляПоиска, мРеквизитПоиска, мЗначениеРеквизитаПоиска);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Рек = СокрЛП(СтрЗаменить(клЗн.ключ, "GUID", ""));
		Если Рек = "" Тогда
			Продолжить;
		КонецЕсли;
		
		п = XMLТипЗнч(Обк[Рек]).TypeName;
		пТипСпр = Сред(п, Найти(п, ".") + 1);
		Обк[Рек] = Справочники[пТипСпр].ПолучитьСсылку(клЗн.Значение);
	КонецЦикла;
	
	Для каждого клЗн из Стк Цикл
		Если Лев(клЗн.Ключ, 8) = "Таблица_" Тогда
			ЗагрузитьТаблицу(Обк[Сред(клЗН.Ключ, 9)], клЗн.Значение);
		КонецЕсли;
	Конеццикла;
	
	Документы[Стк.ВидДок].ЗаполнитьРеквизитыПоУмолчанию(Обк);
	
	//Если Стк.ВидДок = "ПоступлениеТоваровУслуг" Тогда
	//	Обк.ВидОперации 		 = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	//	Для каждого Стр из Обк.ТОвары Цикл
	//		Стр.ЕдиницаИзмерения = Стр.Номенклатура.БазоваяЕдиницаИзмерения;
	//		Стр.Коэффициент = 1;
	//		Стр.СчетУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Обк.Организация, Стр.Номенклатура).СчетУчета;
	//		Если ЗначениеЗаполнено(Стр.счетУчета)=ЛОжь Тогда
	//			Стр.счетУчета = ПланыСчетов.Хозрасчетный.ЗапасныеЧасти;
	//		КонецеслИ;
	//		Стр.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	//	Конеццикла;
	//	Обк.СпособЗачетаАвансов	 = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	//	Обк.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	//ИНачеЕсли Стк.ВидДок = "РеализацияТоваровУслуг" Тогда
	//	Обк.ВидОперации 		 = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	//	Обк.СуммаВключаетНДС 	 = Ложь;
	//	Обк.УчитыватьНДС	 	 = Истина;
	//	Обк.СпособЗачетаАвансов	 = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	//	
	//	Обк.СчетУчетаРасчетовПоАвансам 		= ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	//	Обк.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	//ИНачеЕсли Стк.ВидДок = "ПеремещениеТоваров" Тогда
	//    Обк.ВидОперации 	 = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	//	Обк.СкладОтправитель = Справочники.Склады.ПолучитьСсылку(Стк.СкладОтправительГУИД);
	//КонецЕсли;
	
	Если Стк.свойство("ИННКонтрагентаДляПоиска") Тогда
		Обк.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Стк.ИННКонтрагентаДляПоиска);
		Если Стк.свойство("НомерДоговораДляПоиска") и ЗначениеЗаполнено(Обк.Контрагент) Тогда
			Обк.ДоговорКонтрагента = НайтиДоговорПоНомеру(Обк.Контрагент,Стк.НомерДоговораДляПоиска);
		ИНачеЕсли ЗначениеЗаполнено(Обк.ДоговорКонтрагента) = Ложь Тогда
			Обк.ДоговорКонтрагента = Обк.Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обк.ДоговорКонтрагента) Тогда
			Обк.ВалютаДокумента = Обк.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецеСЛИ;
	КонецЕсли;
	
	//Если Стк.ВидДок = "РеализацияТоваровУслуг" Тогда
	//	ДозаполнитьТабЧастьСписание(Обк.Склад,Обк.Товары,Обк.Дата,Стк.ВидДок);
	//ИначеЕсли Стк.ВидДок = "ПеремещениеТоваров" Тогда
	//	ДозаполнитьТабЧастьСписание(Обк.СкладОтправитель,Обк.Товары,Обк.Дата,Стк.ВидДок);
	//ИначеЕсли Стк.ВидДок = "ПоступлениеТоваровУслуг" Тогда
	//	ДозаполнитьТабЧастьПоступление(Обк);
	//КонецЕСЛИ;
	
	//Обк.ПолучитьФорму("ФормаДокумента").Открыть();
	
	Попытка
		Обк.Записать();
	исключение
		КодСостояния = 318;
		Возврат ОписаниеОшибки();
	КонецПОпытки;
	Попытка
		Обк.Записать(РежимЗаписиДокумента.Проведение);
	исключение
	КонецПОпытки;
	
	Если Стк.ВидДок = "РеализацияТоваровУслуг" Тогда
		масФон = Новый Массив;
		масФон.Добавить(Обк.ссылка);
		Если Стк.свойство("СкладПриемникГУИД") Тогда
			масФон.Добавить(Стк.СкладПриемникГУИД);
		КонецЕсли;
		ФоновыеЗадания.Выполнить("глСервер.ВыгрузитьДокументРеализацияПокупателю", масФон);
	КонецЕсли;
	
	Возврат "Документ загружен!";
	
КонецФункции

//Процедура ДозаполнитьТабЧастьПоступление(Обк)
//	Для каждого Стр из Обк.Товары Цикл
//		Стр.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
//		Стр.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
//		Стр.СчетУчета = ПланыСчетов.Хозрасчетный.ЗапасныеЧасти;
//	КонецЦикла;
//	
//КонецПроцедуры
	
//Процедура ДозаполнитьТабЧастьСписание(Склад,Товары,Дт,ВидДок)
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК Количество,
//	               |	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма,
//	               |	ХозрасчетныйОстатки.Субконто1 Номенклатура, счет
//	               |ИЗ
//	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
//	               |			&Дт,
//	               |			 Счет.родитель  в (Значение(ПланСчетов.Хозрасчетный.Материалы),Значение(ПланСчетов.Хозрасчетный.Товары)),
//	               |			,
//	               |			Субконто1 В (&МасНом)
//	               |				И Субконто3 = &скл) КАК ХозрасчетныйОстатки
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	ХозрасчетныйОстатки.Субконто1, счет
//				   |
//				   |HAVING СУММА(ХозрасчетныйОстатки.КоличествоОстаток) <> 0
//				   |";
//	Запрос.УстановитьПараметр("Дт",КонецДня(дт));
//	Запрос.УстановитьПараметр("скл",Склад);
//	Запрос.УстановитьПараметр("МасНом",Товары.ВыгрузитьКолонку("Номенклатура"));
//	
//	ТБл =Запрос.Выполнить().Выгрузить();
//	
//	
//	наценка = глОбщий.НаценкаРеализацииГК();
//	Субконто = глОбщий.Статья91реализацияТМЦ();
//	
//	Для каждого Стр из Товары Цикл
//		
//		нс = ТБл.Найти(Стр.Номенклатура,"Номенклатура");
//		Если нс<>Неопределено Тогда
//			Стр.Цена  = ОКР(нс.Сумма * наценка / нс.Количество,2,1);
//			Стр.СчетУчета = нс.счет;
//		КонецеСлИ;
//		
//		Если ЗначениеЗаполнено(Стр.СчетУчета)=Ложь ТОгда
//			Стр.СчетУчета = ПланыСчетов.Хозрасчетный.ЗапасныеЧасти;
//		КонецЕСЛИ;
//		
//		Если ВидДок = "РеализацияТоваровУслуг" Тогда
//			Стр.Сумма = Стр.Цена * Стр.Количество;
//			Стр.ЕдиницаИзмерения = Стр.Номенклатура.БазоваяЕдиницаИзмерения;
//			Стр.Коэффициент = 1;
//			Стр.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
//			Стр.СуммаНДС = ОКР(Стр.Сумма * 0.2,2,1);
//			Стр.СчетДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
//			Стр.СчетРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
//			Стр.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
//			Стр.Субконто = Субконто;
//		ИначеЕсли ВидДок = "ПеремещениеТоваров" Тогда
//			Стр.НовыйСчетУчета = Стр.СчетУчета;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

#КонецОбласти

#Область ЗУП


Функция ВыполнитьЗапрос(оЗапрос,Ответ)
	Попытка
		ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),оЗапрос.ПолучитьТелоКакСтроку());
		СтруктураЗапроса = ХЗ.Получить();
		// -------------------------------------------------------------------------------------------------------------------------------------
		ТекстЗапроса = СтруктураЗапроса.ТекстЗапроса; // Строка
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса; // Структура
		ОбработчикиЗапроса = СтруктураЗапроса.ОбработчикиЗапроса; // Структура
		// -------------------------------------------------------------------------------------------------------------------------------------
		// ТекстЗапроса = "
		// |ВЫБРАТЬ
		// |	Ссылка
		// |ПОМЕСТИТЬ ТЗ
		// |ИЗ &ТЗ КАК ТЗ
		// |;
		// |ВЫБРАТЬ
		// |	ФизическиеЛица.Ссылка,
		// |	ФизическиеЛица.Родитель,
		// |	ФизическиеЛица.Код,
		// |	ФизическиеЛица.Наименование,
		// |	ФизическиеЛица.ДатаРождения
		// |ИЗ Справочник.ФизическиеЛица КАК ФизическиеЛица
		// |ЛЕВОЕ СОЕДИНЕНИЕ ТЗ КАК ДополнительныйОтбор
		// |	ПО ДополнительныйОтбор.Ссылка = ФизическиеЛица.Родитель
		// |ГДЕ ФизическиеЛица.Родитель = &Родитель
		// |ИЛИ НЕ ДополнительныйОтбор.Ссылка ЕСТЬ NULL
		// |ИЛИ ФизическиеЛица.Ссылка В (&МассивСсылок)
		// |ИЛИ ГОД(ФизическиеЛица.ДатаРождения) = &Год
		// |УПОРЯДОЧИТЬ ПО
		// |	ФизическиеЛица.Наименование
		// |";
		// ПараметрыЗапроса = Новый Структура;
		// ПараметрыЗапроса.Вставить("Год", 1980);
		// ПараметрыЗапроса.Вставить("Родитель", Новый УникальныйИдентификатор("2f3206aa-6007-11e3-926c-d8d385ffe2b6"));
		// ПараметрыЗапроса.Вставить("МассивСсылок", Новый Массив);
		// ПараметрыЗапроса.МассивСсылок.Добавить(Новый УникальныйИдентификатор("e26bbb08-6005-11e3-926c-d8d385ffe2b6"));
		// ПараметрыЗапроса.Вставить("ТЗ", Новый ТаблицаЗначений);
		// ПараметрыЗапроса.ТЗ.Колонки.Добавить("УИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
		// ПараметрыЗапроса.ТЗ.Добавить().УИД = Новый УникальныйИдентификатор("2f3206ab-6007-11e3-926c-d8d385ffe2b6");
		// ...
		// ОбработчикиЗапроса = Новый Структура;
		// ОбработчикиЗапроса.Вставить("ПараметрыЗапросаВычислить",Новый Соответствие);
		// ОбработчикиЗапроса.ПараметрыЗапросаВычислить.Вставить("Родитель","Справочники.ФизическиеЛица.ПолучитьСсылку(ЗначениеПараметра)");
		// ОбработчикиЗапроса.ПараметрыЗапросаВычислить.Вставить("МассивСсылок","Справочники.ФизическиеЛица.ПолучитьСсылку(ЗначениеПараметра)");
		// Колонки = Новый Массив;
		// Колонки.Добавить(Новый Структура("Имя,ТипЗначения,ТекстВыражения,Удалить", "Ссылка", "СправочникСсылка.ФизическиеЛица", "Справочники.ФизическиеЛица.ПолучитьСсылку(СтрокаТаблицы.УИД)", Ложь));
		// Колонки.Добавить(Новый Структура("Имя,ТипЗначения,ТекстВыражения,Удалить", "УИД", , , Истина));
		// ОбработчикиЗапроса.ПараметрыЗапросаВычислить.Вставить("ТЗ", Колонки);
		// ...
		// ОбработчикиЗапроса.Вставить("КолонкиРезультатаДобавить",Новый Массив);
		// ОбработчикиЗапроса.КолонкиРезультатаДобавить.Добавить("УИДСсылка");
		// ОбработчикиЗапроса.КолонкиРезультатаДобавить.Добавить("УИДРодитель");
		// ...
		// ОбработчикиЗапроса.Вставить("КолонкиРезультатаВычислить",Новый Соответствие);
		// ОбработчикиЗапроса.КолонкиРезультатаВычислить.Вставить("УИДСсылка","СтрокаДанных.Ссылка.УникальныйИдентификатор()");
		// ОбработчикиЗапроса.КолонкиРезультатаВычислить.Вставить("УИДРодитель","СтрокаДанных.Родитель.УникальныйИдентификатор()");
		// ...
		// ОбработчикиЗапроса.Вставить("КолонкиРезультатаУдалить",Новый Массив);
		// ОбработчикиЗапроса.КолонкиРезультатаУдалить.Добавить("Ссылка");
		// ОбработчикиЗапроса.КолонкиРезультатаУдалить.Добавить("Родитель");
		// -------------------------------------------------------------------------------------------------------------------------------------
		Запрос = Новый Запрос(ТекстЗапроса);
		Для каждого ПараметрЗапроса из ПараметрыЗапроса Цикл
			ОбработчикЗначения = ?(ОбработчикиЗапроса.Свойство("ПараметрыЗапросаВычислить"), ОбработчикиЗапроса.ПараметрыЗапросаВычислить.Получить(ПараметрЗапроса.Ключ), Неопределено);
			Если ОбработчикЗначения <> Неопределено Тогда
				Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
					Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, Новый Массив);
					Для каждого ЗначениеПараметра из ПараметрЗапроса.Значение Цикл
						Запрос.Параметры[ПараметрЗапроса.Ключ].Добавить(Вычислить(ОбработчикЗначения));
					КонецЦикла;
				ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("ТаблицаЗначений") Тогда
					// "ОбработчикЗначения" описывает изменяемые колонки с помощью Массива,
					// элементами которой является Структура, описывающая колонку таблицы значения для добавления или удаления:
					// Структура("Имя,ТипЗначения,ТекстВыражения,Удалить"), где
					//	- "Имя" - имя колонки;
					//	- "ТипЗначения" - любые допустимые типы в текущей конфигурации (Строка);
					//	- "ТекстВыражения" - обработчик вычисления значения колонки
					//	- "Удалить" - флажок для инициации удаления, перед установкой параметра в Запрос
					ОбработчикиКолонок = Новый Соответствие;
					Для каждого Колонка из ОбработчикЗначения Цикл
						Если ПараметрЗапроса.Значение.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
							ПараметрЗапроса.Значение.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения));
						КонецЕсли;
						Если Колонка.Свойство("ТекстВыражения") и ЗначениеЗаполнено(Колонка.ТекстВыражения) Тогда
							ОбработчикиКолонок.Вставить(Колонка.Имя, Колонка.ТекстВыражения);
						КонецЕсли;
					КонецЦикла;
					Если ОбработчикиКолонок.Количество() > 0 Тогда
						Для каждого СтрокаТаблицы из ПараметрЗапроса.Значение Цикл
							Для каждого ОбработчикКолонки из ОбработчикиКолонок Цикл
								СтрокаТаблицы[ОбработчикКолонки.Ключ] = Вычислить(ОбработчикКолонки.Значение);
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					Для каждого Колонка из ОбработчикЗначения Цикл
						Если Колонка.Свойство("Удалить") и Колонка.Удалить Тогда
							Если ПараметрЗапроса.Значение.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
								ПараметрЗапроса.Значение.Колонки.Удалить(Колонка.Имя);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
				Иначе
					ЗначениеПараметра = ПараметрЗапроса.Значение;
					Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, Вычислить(ОбработчикЗначения));
				КонецЕсли;
			Иначе
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЕсли;
		КонецЦикла;
		Данные = Запрос.Выполнить().Выгрузить();
		Если ОбработчикиЗапроса.Свойство("КолонкиРезультатаДобавить") Тогда
			Для каждого Колонка из ОбработчикиЗапроса.КолонкиРезультатаДобавить Цикл
				Если ТипЗнч(Колонка) = Тип("Структура") Тогда
					Данные.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения)); // Такие типы как "УникальныйИдентификатор", "ВидДвиженияНакопления" и т.п. --> общие для любых конфигураций
				Иначе // Строка
					Данные.Колонки.Добавить(Колонка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ОбработчикиЗапроса.Свойство("КолонкиРезультатаВычислить") Тогда
			Если ОбработчикиЗапроса.КолонкиРезультатаВычислить.Количество() > 0 Тогда
				Для каждого СтрокаДанных из Данные Цикл
					Для каждого ОбработчикЗначения из ОбработчикиЗапроса.КолонкиРезультатаВычислить Цикл
						СтрокаДанных[ОбработчикЗначения.Ключ] = Вычислить(ОбработчикЗначения.Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если ОбработчикиЗапроса.Свойство("КолонкиРезультатаУдалить") Тогда
			Для каждого Колонка из ОбработчикиЗапроса.КолонкиРезультатаУдалить Цикл
				Данные.Колонки.Удалить(Колонка);
			КонецЦикла;
		КонецЕсли;
		ХЗ = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(-1));
		Результат = XMLСтрока(ХЗ);
	Исключение
		Результат = "Ошибка выполнения GETSEL: " + ОписаниеОшибки();
		Ответ.КодСостояния = 400; // Bad Request
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция РезультатВычисления(оЗапрос,Ответ)
	Попытка
		ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),оЗапрос.ПолучитьТелоКакСтроку());
		СтруктураЗапроса = ХЗ.Получить();
		// ------------------------------------------------------------------------------------------------------------------------------------------------
		ПараметрыВыражения = СтруктураЗапроса.ПараметрыВыражения; // Структура
		ТекстВыражения = СтруктураЗапроса.ТекстВыражения; // Строка
		// ------------------------------------------------------------------------------------------------------------------------------------------------
		// Например, проверим существование Ссылки:
		// ПараметрыВыражения = Новый Структура("УИД", Новый УникальныйИдентификатор("2f3206ab-6007-11e3-926c-d8d385ffe2b6"));
		// ТекстВыражения = "?(Найти(Строка(Справочники.ФизическиеЛица.ПолучитьСсылку(ПараметрыВыражения.УИД)),""<Объект не найден>"") > 0, Ложь, Истина)";
		// ... или существования Расширения:
		// ПараметрыВыражения = Новый Структура("Имя", "РасширениеКС");
		// ТекстВыражения = "?(РасширенияКонфигурации.Получить(ПараметрыВыражения).Количество() > 0, Истина, Ложь)";
		// ------------------------------------------------------------------------------------------------------------------------------------------------
		Результат = Вычислить(ТекстВыражения);
		ХЗ = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(-1));
		Результат = XMLСтрока(ХЗ);
	Исключение
		Результат = "Ошибка выполнения GETEVAL: " + ОписаниеОшибки();
		Ответ.КодСостояния = 400; // Bad Request
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ВыбратьМетаданные(оЗапрос,Ответ)
	Попытка
		ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),оЗапрос.ПолучитьТелоКакСтроку());
		СтруктураЗапроса = ХЗ.Получить();
		// ---------------------------------------------------------------------------------------------------------------------------------
		//ТекстЗапроса = "Метаданные.Справочники, Метаданные.Документы.ЗарплатаКВыплатеОрганизаций, Метаданные.Перечисления.Важность";
		//...
		//ТекстЗапроса = "Метаданные,Метаданные.Константы,Метаданные.ПланыОбмена,Метаданные.ПараметрыСеанса
		//				|Метаданные.Справочники,Метаданные.Документы,Метаданные.НумераторыДокументов,Метаданные.Последовательности
		//				|Метаданные.Перечисления,Метаданные.ПланыВидовХарактеристик,Метаданные.ПланыСчетов,Метаданные.ПланыВидовРасчета
		//				|Метаданные.РегистрыСведений,Метаданные.РегистрыНакопления,Метаданные.РегистрыБухгалтерии,Метаданные.РегистрыРасчета
		//				|Метаданные.БизнесПроцессы,Метаданные.Задачи";
		// ---------------------------------------------------------------------------------------------------------------------------------
		ТекстЗапроса = СтруктураЗапроса.ТекстЗапроса; // Строка
		ПолучитьРеквизиты = СтруктураЗапроса.ПолучитьРеквизиты; // Булево
		ПолучитьТипыРеквизитов = СтруктураЗапроса.ПолучитьТипыРеквизитов; // Булево
		// ---------------------------------------------------------------------------------------------------------------------------------
		Данные = Новый Структура;
		ТекстЗапроса = СтрЗаменить(""+ТекстЗапроса,",",Символы.ПС);
		Для Счетчик = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
			СтрокаМета = СокрЛП(СтрПолучитьСтроку(ТекстЗапроса,Счетчик));
			Если ВРег(Лев(СтрокаМета,10)) = "МЕТАДАННЫЕ" и СтрЧислоВхождений(СтрокаМета,".") <= 2 Тогда
				ОбъектМета = Вычислить(СтрокаМета);
				Если ТипЗнч(ОбъектМета) = Тип("ОбъектМетаданных") Тогда
					КоллекцияМета = Новый Массив;
					КоллекцияМета.Добавить(ОбъектМета);
				ИначеЕсли ТипЗнч(ОбъектМета) = Тип("КоллекцияОбъектовМетаданных") Тогда
					КоллекцияМета = ОбъектМета;
				ИначеЕсли ТипЗнч(ОбъектМета) = Тип("ОбъектМетаданныхКонфигурация") Тогда
					Данные.Вставить("Имя",ОбъектМета.Имя);
					Данные.Вставить("Синоним",ОбъектМета.Синоним);
					Данные.Вставить("Комментарий",ОбъектМета.Комментарий);
					Данные.Вставить("Версия",ОбъектМета.Версия);
					Продолжить;
				Иначе Продолжить;
				КонецЕсли;
				СтрокаМета = СтрЗаменить(СтрокаМета,".",Символы.ПС);
				Вид = СтрПолучитьСтроку(СтрокаМета,2);
				ДанныеВид = Неопределено;
				Если НЕ Данные.Свойство(Вид, ДанныеВид) Тогда
					ДанныеВид = Новый Структура;
				КонецЕсли;
				Для каждого ОбъектМета из КоллекцияМета Цикл
					Имя = ОбъектМета.Имя;
					ПолноеИмя = ОбъектМета.ПолноеИмя();
						КоллекцияСвойств = "";
						КоллекцияТаблиц = "";
						КоллекцияПолей = "";
						Если Вид = "Константы" Тогда
							КоллекцияСвойств = "Тип";
						ИначеЕсли Вид = "ПараметрыСеанса" Тогда
							КоллекцияСвойств = "Тип";
						ИначеЕсли Вид = "ПланыОбмена" Тогда
							КоллекцияСвойств = "ДлинаКода,ДлинаНаименования,ОсновноеПредставление";
							КоллекцияТаблиц = "ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты";
						ИначеЕсли Вид = "Справочники" Тогда
							КоллекцияСвойств = "ДлинаКода,ДлинаНаименования,КонтрольУникальности,СерииКодов,ОсновноеПредставление,Иерархический,ВидИерархии,Владельцы";
							КоллекцияТаблиц = "ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты";
						ИначеЕсли Вид = "Документы" Тогда
							КоллекцияСвойств = "ДлинаНомера,КонтрольУникальности";
							КоллекцияТаблиц = "ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты";
						ИначеЕсли Вид = "НумераторыДокументов" Тогда
							КоллекцияСвойств = "ТипНомера,ДлинаНомера,КонтрольУникальности";
						ИначеЕсли Вид = "Последовательности" Тогда
							КоллекцияПолей = "Измерения";
						ИначеЕсли Вид = "Перечисления" Тогда
							КоллекцияПолей = "СтандартныеРеквизиты";
						ИначеЕсли Вид = "ПланыВидовХарактеристик" Тогда
							КоллекцияСвойств = "Тип,ДлинаКода,ДлинаНаименования,КонтрольУникальности,СерииКодов,ОсновноеПредставление,Иерархический";
							КоллекцияТаблиц = "ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты";
						ИначеЕсли Вид = "ПланыСчетов" Тогда
							КоллекцияСвойств = "ДлинаКода,ДлинаНаименования,КонтрольУникальности,СерииКодов,ОсновноеПредставление";
							КоллекцияТаблиц = "СтандартныеТабличныеЧасти,ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты,ПризнакиУчета,ПризнакиУчетаСубконто";
						ИначеЕсли Вид = "ПланыВидовРасчета" Тогда
							КоллекцияСвойств = "ДлинаКода,ДлинаНаименования,ОсновноеПредставление";
							КоллекцияТаблиц = "СтандартныеТабличныеЧасти,ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты";
						ИначеЕсли Вид = "РегистрыСведений" Тогда
							КоллекцияПолей = "СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты";
						ИначеЕсли Вид = "РегистрыНакопления" Тогда
							КоллекцияПолей = "СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты";
						ИначеЕсли Вид = "РегистрыБухгалтерии" Тогда
							КоллекцияПолей = "СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты";
						ИначеЕсли Вид = "РегистрыРасчета" Тогда
							КоллекцияПолей = "СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты";
						ИначеЕсли Вид = "БизнесПроцессы" Тогда
							КоллекцияСвойств = "ДлинаНомера,КонтрольУникальности";
							КоллекцияТаблиц = "ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты";
						ИначеЕсли Вид = "Задачи" Тогда
							КоллекцияСвойств = "ДлинаНомера,ДлинаНаименования,КонтрольУникальности,ОсновноеПредставление";
							КоллекцияТаблиц = "ТабличныеЧасти";
							КоллекцияПолей = "СтандартныеРеквизиты,Реквизиты,РеквизитыАдресации";
						КонецЕсли;
						КоллекцияСвойств = СтрЗаменить("Синоним,Комментарий"+?(НЕ ПустаяСтрока(КоллекцияСвойств),",","")+КоллекцияСвойств, ",", Символы.ПС);
						КоллекцияТаблиц = СтрЗаменить(КоллекцияТаблиц,",",Символы.ПС);
						КоллекцияПолей = СтрЗаменить(КоллекцияПолей,",",Символы.ПС);
						// Объект метаданных
						ДанныеОбъект = Новый Структура;
						Если НЕ ПустаяСтрока(КоллекцияСвойств) Тогда
							Для СчетчикСвойств = 1 По СтрЧислоСтрок(КоллекцияСвойств) Цикл
								Свойство = СтрПолучитьСтроку(КоллекцияСвойств,СчетчикСвойств);
								Если Свойство = "Тип" Тогда
									Если ПолучитьТипыРеквизитов Тогда
										ДанныеОбъект.Вставить("Тип", ПолучитьТипыРеквизита(ОбъектМета));
									КонецЕсли;
								ИначеЕсли Свойство = "Владельцы" Тогда
									ДанныеОбъект.Вставить("Владельцы",Новый Массив);
									Для каждого Владелец из ОбъектМета.Владельцы Цикл
										ДанныеОбъект.Владельцы.Добавить(Владелец.ПолноеИмя());
									КонецЦикла;
								Иначе
									ДанныеОбъект.Вставить(Свойство,ОбъектМета[Свойство]);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						// Поля
						Если ПолучитьРеквизиты Тогда
							Если НЕ ПустаяСтрока(КоллекцияПолей) Тогда
								Для СчетчикПолей = 1 По СтрЧислоСтрок(КоллекцияПолей) Цикл
									КоллекцияПоля = СтрПолучитьСтроку(КоллекцияПолей,СчетчикПолей);
									ДанныеПолей = Новый Структура;
									Для каждого Реквизит из ОбъектМета[КоллекцияПоля] Цикл
										ДанныеПоля = Новый Структура("Синоним,Комментарий",Реквизит.Синоним,Реквизит.Комментарий);
										Если ПолучитьТипыРеквизитов Тогда
											ДанныеПоля.Вставить("Тип", ПолучитьТипыРеквизита(Реквизит));
										КонецЕсли;
										ДанныеПолей.Вставить(Реквизит.Имя,ДанныеПоля);
									КонецЦикла;
									ДанныеОбъект.Вставить(КоллекцияПоля,ДанныеПолей);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						// Табличные части
						Если НЕ ПустаяСтрока(КоллекцияТаблиц) Тогда
							Для СчетчикТаблиц = 1 По СтрЧислоСтрок(КоллекцияТаблиц) Цикл
								КоллекцияТаблица = СтрПолучитьСтроку(КоллекцияТаблиц,СчетчикТаблиц);
								ДанныеТаблиц = Новый Структура;
								Для каждого ТабличнаяЧасть из ОбъектМета[КоллекцияТаблица] Цикл
									ДанныеТаблиц.Вставить(ТабличнаяЧасть.Имя, ?(ПолучитьРеквизиты, Новый Структура, Неопределено));
									Если ПолучитьРеквизиты Тогда
										КоллекцияПолей = "СтандартныеРеквизиты" + ?(КоллекцияТаблица <> "СтандартныеТабличныеЧасти", Символы.ПС + "Реквизиты", "");
										Для СчетчикПолей = 1 По СтрЧислоСтрок(КоллекцияПолей) Цикл
											КоллекцияПоля = СтрПолучитьСтроку(КоллекцияПолей,СчетчикПолей);
											ДанныеПолей = Новый Структура;
											//Сообщить(""+ПолноеИмя+"."+КоллекцияТаблица+"."+ТабличнаяЧасть.Имя+"."+КоллекцияПоля);
											Для каждого Реквизит из ОбъектМета[КоллекцияТаблица][ТабличнаяЧасть.Имя][КоллекцияПоля] Цикл
												ДанныеПоля = Новый Структура("Синоним,Комментарий",Реквизит.Синоним,Реквизит.Комментарий);
												Если ПолучитьТипыРеквизитов Тогда
													ДанныеПоля.Вставить("Тип", ПолучитьТипыРеквизита(Реквизит));
												КонецЕсли;
												ДанныеПолей.Вставить(Реквизит.Имя, ДанныеПоля);
											КонецЦикла;
											ДанныеТаблиц[ТабличнаяЧасть.Имя].Вставить(КоллекцияПоля,ДанныеПолей);
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
								ДанныеОбъект.Вставить(КоллекцияТаблица,ДанныеТаблиц);
							КонецЦикла;
						КонецЕсли;
						// ...
					ДанныеВид.Вставить(Имя,ДанныеОбъект);
				КонецЦикла;
				Данные.Вставить(Вид,ДанныеВид);
			КонецЕсли;
		КонецЦикла;
		ХЗ = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(-1));
		Результат = XMLСтрока(ХЗ);
	Исключение
		Результат = "Ошибка выполнения GETMETA: " + ОписаниеОшибки();
		Ответ.КодСостояния = 400; // Bad Request
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ПолучитьТипыРеквизита(Реквизит)
	МассивТипов = Новый Массив;
	Для каждого Тип из Реквизит.Тип.Типы() Цикл
		Если Тип = Тип("Булево") Тогда
			ТипСтрокой = "Булево";
		ИначеЕсли Тип = Тип("Число") Тогда
			ТипСтрокой = "Число";
		ИначеЕсли Тип = Тип("Дата") Тогда
			ТипСтрокой = "Дата";
		ИначеЕсли Тип = Тип("Строка") Тогда
			ТипСтрокой = "Строка";
		ИначеЕсли Тип = Тип("Null") Тогда
			ТипСтрокой = "Null";
		ИначеЕсли Тип = Тип("Тип") Тогда
			ТипСтрокой = "Тип"
		ИначеЕсли Тип = Тип("ОписаниеТипов") Тогда
			ТипСтрокой = "ОписаниеТипов"
		ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			ТипСтрокой = "ХранилищеЗначения";
		ИначеЕсли Тип = Тип("ВидСчета") Тогда
			ТипСтрокой = "ВидСчета";
		ИначеЕсли Тип = Тип("ВидДвиженияНакопления") Тогда
			ТипСтрокой = "ВидДвиженияНакопления";
		ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
			ТипСтрокой = "УникальныйИдентификатор";
		Иначе
			ОбъектМета = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМета <> Неопределено Тогда
				ТипСтрокой = ОбъектМета.ПолноеИмя();
			Иначе
				ТипСтрокой = ""+Тип;
			КонецЕсли;
		Конецесли;
		МассивТипов.Добавить(ТипСтрокой);
	КонецЦикла;
	Возврат МассивТипов;
КонецФункции

Функция ЕстьСтандартныйРеквизит(ИмяСпр,ИмяРек)
	Для каждого Эл из  Метаданные.Справочники[ИмяСпр].СтандартныеРеквизиты Цикл
		Если Эл.Имя = ИмяРек ТОгда
			Возврат Истина;
		КонецеслИ;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции

Функция ДанныеСпр(Тело)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	                   
	Запрос = Новый Запрос;
	
	РекВладелец = "";
	Если ЕстьСтандартныйРеквизит(Стк.ВидСпр,"Владелец") Тогда
		РекВладелец = ",Владелец ВладелецGUID ";
	КонецЕсли;
	
	ДопРек = "";
	Для каждого Эл из Стк Цикл
		ЕСли Лев(Эл.Ключ,6)="допрек" Тогда
			ДопРек = ","+Эл.Значение;
		КонецЕсли;
	КонецЦикла;
		
	
	
	Запрос.Текст = "SELECT
	               |	"""+Стк.ВидСпрВернуть+""" ВидСпр,               
				   |	Спр.Ссылка GUID,
				   |	Спр.ЭтоГруппа,
				   |	Спр.Родитель РодительGUID,
				   |	Спр.ПометкаУдаления,
				   |	Спр.Наименование,
				   |	Спр.Код
				   |    "+РекВладелец+ДопРек+"
				   |ИЗ
				   |	Справочник."+Стк.ВидСпр+" КАК Спр
				   |ГДЕ Спр.ссылка в (&сс) или &БезФильтра = Неопределено  				   
				   |
				   |";
	Если Стк.Свойство("ФильтрСС") Тогда
		Если ТипЗнч(Стк.ФильтрСС)=Тип("Массив") Тогда
			Мас = Новый Массив;
			Для каждого Эл из Стк.ФильтрСС Цикл
				Мас.Добавить(Справочники[Стк.ВидСпр].ПолучитьСсылку(Новый УникальныйИдентификатор(Эл)));	
			Конеццикла;
			Запрос.УстановитьПараметр("сс",Мас);
		ИНАче
			Запрос.УстановитьПараметр("сс",Справочники[Стк.ВидСпр].ПолучитьСсылку(Новый УникальныйИдентификатор(Стк.ФильтрСС)));
		КонецЕСЛИ;
		Запрос.УстановитьПараметр("БезФильтра",ЛОжь);
	ИНАче
		Запрос.УстановитьПараметр("сс",Неопределено);
		Запрос.УстановитьПараметр("БезФильтра",Истина);
	КонецеСЛИ;
	
					Тбл = Запрос.Выполнить().Выгрузить();
					Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекущаяДата());
				   
КонецФункции


#КонецОбласти

Функция ПОлучитьQR(Запрос,КодСостояния)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Запрос.ПолучитьТелоКакСтроку()).Получить();
	Если ТипЗнч(Стк)<>Тип("Структура") ТОгда
		КодСостояния = 402;
		Возврат "Неправильный формат данных";
	КонецеСЛИ;
	
	строкаQRКода = ДанныеQR(Стк);
	Возврат ДанныеQRКода(строкаQRКода,0,190);
	
КонецФункции

Функция ДанныеQR(Стк)
	
	ТабНомер = "";
	
	
	QRСтрока =  
	"требование механика|"+																	//2 Наименование нашей организации
	"|"+ 														//4 Номер ремонтного листа
	Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"|"+  										//5 Дата выписки ремонтного листа
	СтрЗаменить(Стк.ГосНомер," ","")+"|"+ 			//6 Гос. номер ТС
	СокрЛП(Стк.ГарНомер)+"|"+ 											//9 Гаражный номер ТС
	Лев(СокрЛП(Стк.ТС),25)+"|"+															//8 Марка ТС (первые 16 символов)
	СокрЛП(Стк.Сотр)+"|"+ 													//7 Полное ФИО водителей
	ТабНомер+"|"+ 																	//7 Полное ФИО водителей
	Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+""; 	
	
	//10 Количество ГСМ к выдаче по путевому листу, реквизит "уатПутевойЛист.ВыдатьКоличествоГорючего"
	
	 бин = ПолучитьДвоичныеДанныеИзСтроки(QRСтрока);
	 пСтр = ПолучитьBase64СтрокуИзДвоичныхДанных(бин);
	 пСтр = СтрЗаменить(пстр,Символы.ПС,"%%!!%%");
	// Сообщить(пСтр);
	 Возврат "_!!_"+пСтр;
	
КонецФункции

Функция ДанныеПЛдляТТН(Тело)
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
|ВЫБРАТЬ
|	уатПутевойЛист.Номер КАК НомерПЛ,
|	уатПутевойЛист.Дата КАК ДатаПЛ,
|	уатПутевойЛист.Водитель1.Наименование КАК ВодительФИО,
|	уатПутевойЛист.ТранспортноеСредство.Наименование КАК ТС,
|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосНомер,
|	уатПутевойЛист.Организация.Наименование КАК Перевозчик,
|	уатПутевойЛист.Организация КАК Организация
|ИЗ
|	Документ.уатПутевойЛист КАК уатПутевойЛист
|ГДЕ
|	уатПутевойЛист.Дата >= &Дата1
|	И уатПутевойЛист.Дата < &Дата2
|	И уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер ПОДОБНО &ГосударственныйНомер

|УПОРЯДОЧИТЬ ПО
|	ГосНомер,
|	Дата
|";
	
	Запрос.УстановитьПараметр("Дата1",НачалоДня(ТекущаяДата()-3600*24));
	Запрос.УстановитьПараметр("Дата2",КонецДня(ТекущаяДата()+3600*24));
	Запрос.УстановитьПараметр("ГосударственныйНомер","%"+Стк.ГосНом+"%");
	
	
	
	
	Тбл = Запрос.Выполнить().Выгрузить();
	ТБл.Колонки.Добавить("АдресПеревозчика");
	ТБл.Колонки.Добавить("ТелефоныПеревозчика");
	
	соо = новый Соответствие;
		
	Для каждого Стр из Тбл Цикл
		
		Стк = соо.Получить(Стр.Организация);
		Если Стк=Неопределено Тогда
			Стк = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Стр.Организация, Стр.ДатаПЛ);
			соо.вставить(стр.Организация,стк);
		КонецЕсли;
		Стр.АдресПеревозчика = Стк.ЮридическийАдрес;
		Стр.ТелефоныПеревозчика = Стк.Телефоны;
		
	КонецЦикла;
	
	Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекущаяДата());
				   
КонецФункции

#Область ОбластьПроектОКО

Функция МассивПодразделенийПроектОКО()
	
	ТБл = ОБработки.РабочийСтолПроектОКО.ЗаполнитьПереченьПодразделений();
	Мас = ТБл.ВыгрузитьКолонку("Подразделение");
	ТБл.Колонки.Добавить("ГУИД");
	Для каждого Стр из ТБл Цикл
		Стр.ГУИД = Стр.Подразделение.уникальныйИдентификатор();
	КонецЦиклА;
	
	хр = Новый ХранилищеЗначения(ТБл,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
	
КонецФункции

Функция УстановитьКонстантуПроектОКО(Тело,КодСостояния)
	
	Зн = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	Если ТипЗнч(зн)<>Тип("УникальныйИдентификатор") ТОгда
		КодСостояния = 409;
		Возврат "Неверный тип значения";
	КонецеСЛИ;
	
	сс = Справочники.ПодразделенияОрганизаций.ПолучитьСсылку(зн);
	
	Константы.окоЗначениеДляФормыЭкрана.Установить(сс);
	Возврат "Ok. "+сс;
	
КонецФункции

#КонецОбласти

Функция GETGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Метод = ВРЕГ(Запрос.ПараметрыURL["ИмяМетода"]);
	
	СткПар = Новый Структура;
	Для каждого Эл из Запрос.ПараметрыЗапроса Цикл
		СткПар.Вставить(Эл.Ключ,Эл.Значение);	
	КонецЦикла;
	
	Если Метод = "LZK" Тогда
		Результат = ЛЗК(СткПар);	
	ИНачеЕсли Метод = "GSMFORMONTH" Тогда
		Результат = ГСМЗаМесяц(СткПар);	
	ИНачеЕсли Метод = "WORKDSR" Тогда
		Результат = РаботаДСР(СткПар);	
	ИНачеЕсли Метод = "PODRTS" Тогда
		Результат = ПодрТС(Запрос);	
	ИНачеЕсли Метод = "DATATSPODR" Тогда
		Результат = ДанныеПоТСиПодр();	
	ИНачеЕсли Метод = "REE" Тогда
		Результат = ДанныеРее(Запрос.ПолучитьТелоКакСтроку());	
	ИНачеЕсли Метод = "REESOB" Тогда
		Результат = РеестрНаСобственныеНужды(Запрос.ПолучитьТелоКакСтроку());	
	ИНачеЕсли Метод = "TBPRICEP" Тогда
		Результат = ТаблицаПрицепы(Запрос.ПолучитьТелоКакСтроку());	
	ИНачеЕсли Метод = "TABELTS" Тогда
		Результат =  ТабельТС(Запрос.ПолучитьТелоКакСтроку());	
	ИНачеЕсли Метод = "GETQR" Тогда
		Результат = ПолучитьQR(Запрос,Ответ.КодСостояния);	
		Ответ.УстановитьТелоИзДвоичныхДанных(Результат);
		Возврат Ответ;
	ИНачеЕсли Метод = "DATASUB" Тогда
		Результат = ДанныеСубподряд(Запрос.ПолучитьТелоКакСтроку());	
	ИНачеЕсли Метод = "DATASUBDOH" Тогда
		Результат = ДанныеСубподрядсДоходом(Запрос.ПолучитьТелоКакСтроку());	
	ИНачеЕсли Метод = "SYNCMA" Тогда
		Результат = ДанныеДляМобильногоПриложенияКТС();		
	ИНачеЕсли Метод = "GETBSMTSDATA" Тогда
		Результат = ПолучитьДанныеБСМТС(Запрос.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
	ИНачеЕсли Метод = "GETCOMMENTSMA" Тогда
		Результат = ПолучитьКомментарии(Запрос.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
	ИНачеЕсли Метод = "LOADDOC" Тогда
		Результат = ЗагрузитьДокумент(Запрос.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
	ИНачеЕсли Метод = "OKOPODR" Тогда
		Результат = МассивПодразделенийПроектОКО();
	ИНачеЕсли Метод = "OKOCONSTPODR" Тогда
		Результат = УстановитьКонстантуПроектОКО(Запрос.ПолучитьТелоКакСтроку(), Ответ.КодСостояния);
	ИНачеЕсли Метод = "DATAOKO" Тогда
	    Результат = РегистрыСведений.юкИсключаемыеОбъектыИзПроектов.ЗаполнитьОсновныеТаблицы();
	ИНачеЕсли Метод = "GETSEL" Тогда
		Результат = ВыполнитьЗапрос(Запрос,Ответ);
	ИНачеЕсли Метод = "GETEVAL" Тогда
		Результат = РезультатВычисления(Запрос,Ответ);
	ИНачеЕсли Метод = "GETMETA" Тогда
		Результат = ВыбратьМетаданные(Запрос,Ответ);
	ИНачеЕсли Метод = "TTNPL" Тогда
		Результат = ДанныеПЛдляТТН(Запрос.ПолучитьТелоКакСтроку());
	ИНачеЕсли Метод = "TEST" Тогда
		Результат = СтрокаСоединенияИнформационнойБазы();
	ИНаче
		Запрос.КодСостояния = 304;
		Результат = "Метод "+Метод+" не обнаружен";
	КонецеСли;
	
	Ответ.УстановитьТелоИзСтроки(Результат);
	
	Возврат Ответ;
КонецФункции

Функция ДанныеДляМобильногоПриложенияКТС()
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	""Пользователи"" ВидСпр,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ЗНАЧЕНИЕ(Справочник.ВопросыДляОсмотров.ПустаяСсылка) GUID,
	|	CправочникПользователи.Наименование КАК Наименование,
	|	Организации.ИНН КАК ОрганизацияИНН,
	|	CправочникПользователи.АдминистративныйДоступ КАК АдминистративныйДоступ,
	|	CправочникПользователи.Пинкод КАК Пинкод,
	|	ЛОЖЬ КАК ПометкаУдаления,
	|	"""" КАК ПолноеНаименование,
	|	0 КАК ПорядокСортировки
	|ИЗ
	|	Справочник.ПользователиМобильногоПриложения КАК CправочникПользователи
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Не Организации.ПометкаУдаления
	|WHERE НЕ CправочникПользователи.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КритерииОсмотра"" ВидСпр,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ВопросыДляОсмотров.Ссылка КАК GUID,
	|	ВопросыДляОсмотров.Наименование КАК Наименование,
	|	Организации.ИНН КАК ОрганизацияИНН,
	|	ЛОЖЬ КАК АдминистративныйДоступ,
	|	"""" КАК Пинкод,
	|	ВопросыДляОсмотров.ПометкаУдаления,
	|	ВопросыДляОсмотров.ПолноеНаименование,
	|	ВопросыДляОсмотров.ПорядокСортировки
	|ИЗ
	|	Справочник.ВопросыДляОсмотров КАК ВопросыДляОсмотров
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Не Организации.ПометкаУдаления");
	мТаблицаРезультата = мЗапрос.Выполнить().Выгрузить();
	
	Возврат	ЗаписатьХранилищеВСтроку(мТаблицаРезультата);
КонецФункции

Функция GETМетод1(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции
