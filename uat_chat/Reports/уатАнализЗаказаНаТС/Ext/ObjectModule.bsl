#Если Клиент Тогда
	
Перем НП Экспорт; // Настройка периода отчета
Перем мСтруктураПоказателей;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Получает текст запроса отчета.
//
//Возвращаемое значение:
//	Строка - Текст основного запроса отчета
//
Функция СформироватьТекстЗапроса() Экспорт
	Текст =
	"ВЫБРАТЬ
	|	уатЗаказыНаТСОстаткиИОбороты.Заказчик КАК Заказчик,
	|	уатЗаказыНаТСОстаткиИОбороты.ЗаказНаТС КАК ЗаказНаТС,
	|	уатЗаказыНаТСОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	уатЗаказыНаТСОстаткиИОбороты.ДатаВыполнения,
	|	СУММА(уатЗаказыНаТСОстаткиИОбороты.КоличествоПриход) КАК Заказано,
	|	ВЫБОР
	|		КОГДА уатПричиныОтклоненияЗаказов.ПричинаЗакрытияЗаказа ЕСТЬ NULL 
	|			ТОГДА СУММА(уатЗаказыНаТСОстаткиИОбороты.КоличествоРасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выполнено,
	|	ВЫБОР
	|		КОГДА уатПричиныОтклоненияЗаказов.ПричинаЗакрытияЗаказа ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(уатЗаказыНаТСОстаткиИОбороты.КоличествоРасход)
	|	КОНЕЦ КАК Отменено,
	|	уатПричиныОтклоненияЗаказов.ПричинаЗакрытияЗаказа,
	|	уатЗаказыНаТСОстаткиИОбороты.Заказчик.Представление,
	|	уатЗаказыНаТСОстаткиИОбороты.Номенклатура.Представление КАК НоменклатураПредставление
	|ИЗ
	|	РегистрНакопления.уатЗаказыНаТС.ОстаткиИОбороты(, , , , ЗаказНаТС = &ЗаказНаТС) КАК уатЗаказыНаТСОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПричиныОтклоненияЗаказов КАК уатПричиныОтклоненияЗаказов
	|		ПО уатЗаказыНаТСОстаткиИОбороты.ЗаказНаТС = уатПричиныОтклоненияЗаказов.Заказ
	|			И уатЗаказыНаТСОстаткиИОбороты.Номенклатура = уатПричиныОтклоненияЗаказов.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказыНаТСОстаткиИОбороты.Заказчик,
	|	уатЗаказыНаТСОстаткиИОбороты.ЗаказНаТС,
	|	уатЗаказыНаТСОстаткиИОбороты.Номенклатура,
	|	уатЗаказыНаТСОстаткиИОбороты.ДатаВыполнения,
	|	уатПричиныОтклоненияЗаказов.ПричинаЗакрытияЗаказа,
	|	уатЗаказыНаТСОстаткиИОбороты.Заказчик.Представление,
	|	уатЗаказыНаТСОстаткиИОбороты.Номенклатура.Представление
	|
	|ИТОГИ
	|	СУММА(Заказано),
	|	СУММА(Выполнено),
	|	СУММА(Отменено)
	|ПО
	|	ЗаказНаТС";
			
	Возврат Текст;
КонецФункции

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	ПостроительОтчета.Текст = СформироватьТекстЗапроса();  		
	ПостроительОтчета.ЗаполнитьНастройки(); 
	//ПостроительОтчета.Отбор.Добавить("Груз").Использование = Ложь;
	//ПостроительОтчета.Отбор.Добавить("СпецификацияПеревозки").Использование = Ложь;
		
	Отбор = ПостроительОтчета.Отбор.Найти("ЗаказНаТС");
	Если  Отбор = Неопределено Тогда
		ПостроительОтчета.Отбор.Добавить("ЗаказНаТС").Использование = Ложь;
	КонецЕсли;
	Отбор = ПостроительОтчета.Отбор.Найти("ЗаказНаТС");
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Заказ) Тогда
		
		Если НЕ Отбор = Неопределено Тогда
			Отбор.Использование = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если НЕ Отбор = Неопределено Тогда
		Отбор.Использование = Истина;
		Отбор.ВидСравнения = ВидСравнения.Равно;
		Отбор.Значение = Заказ;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт
	
	ДокументРезультат.Очистить();    		
	Макет = ПолучитьМакет("Макет");  		
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок"); 		
	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы; 		
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);  		
	МассивГруппировок = Новый Массив;    		
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
	КонецЦикла; 
	
	МассивПоказателей = Новый Массив;
	ФорматПоказателей = Новый Структура;
	Для Каждого ЭлементСтруктурыПоказателей Из мСтруктураПоказателей Цикл
		МассивПоказателей.Добавить(ЭлементСтруктурыПоказателей.Ключ);
		ФорматПоказателей.Вставить(ЭлементСтруктурыПоказателей.Ключ, ЭлементСтруктурыПоказателей.Значение);	
	КонецЦикла;
	
	ПостроительОтчета.Параметры.Вставить("ЗаказНаТс", Заказ);
	СписокСтатусов = Новый СписокЗначений();
	ПостроительОтчета.Выполнить();    		
	РезультатЗапроса = ПостроительОтчета.Результат;  		
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);		
	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;   		
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");  		
	ОбластьИтогиГруппировки = Макет.ПолучитьОбласть("ИтогиГруппировки");
	ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");   		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрока",ОбластьСтрока);  		
	СтруктураПараметров.Вставить("ОбластьИтогиГруппировки",ОбластьИтогиГруппировки);
	СтруктураПараметров.Вставить("ОбластьИтоги",ОбластьИтоги);
	СтруктураПараметров.Вставить("ИтогиПодвал",ИтогиПодвал);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ФорматПоказателей", ФорматПоказателей);
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);   		
	ДокументРезультат.НачатьАвтогруппировкуСтрок(); 		
	Если МассивГруппировок.Количество() > 0 Тогда  			
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
		0, МассивГруппировок, 
		СдвигУровня, СброситьСдвигУровня, 
		СтруктураПараметров);
	Иначе						
		ВывестиСтроки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров);
	КонецЕсли;    		
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;  		
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = ЭтотОбъект.Метаданные().Имя; 
	ДокументРезультат.ТолькоПросмотр = Истина;
	ДокументРезультат.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
КонецПроцедуры // СформироватьОтчет()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт
	
	Макет = ПолучитьМакет("Макет"); 		
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок"); 		
	//ТекстПроИтоги = "";      		
	//ТекстПроИтоги = ТекстПроИтоги + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки); 		
	//Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
	//	ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Группировки по " + ТекстПроИтоги;
	//КонецЕсли;   		
	ЗаголовокОтчета.Параметры.ТекстЗаголовок = ЗаголовокОтчета(); 		
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);		
	//Если Не ПустаяСтрока(СтрОтбор) Тогда
	//	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
	//	ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
	//	ЗаголовокОтчета.Вывести(ОбластьОтбор);  
	//КонецЕсли;      		
	Возврат(ЗаголовокОтчета); 		
КонецФункции // СформироватьЗаголовок()

// Выводит показатели группировки
//
// Параметры:
//	Выборка - выборка
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)
	
ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	
	Если Выборка.Группировка() = "ЗаказНаТС" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.ЗаказНаТС ;
		
	ИначеЕсли Выборка.Группировка() = "ОБЩИЕ" Тогда
		Область = СтруктураПараметров.ОбластьИтоги;

	Иначе	
	Область = СтруктураПараметров.ОбластьСтрока;
	Область.Параметры.Номенклатура = Выборка.НоменклатураПредставление;
	Область.Параметры.Заказано = Выборка.Заказано;	
	Область.Параметры.Выполнено= Выборка.Выполнено;	
	Область.Параметры.Отменено = Выборка.Отменено;	
	Область.Параметры.ОсталосьВыполнить = Выборка.Заказано - Выборка.Выполнено - Выборка.Отменено;
	КонецЕсли;
			
	Область.Область("R1C2").Отступ = Макс(Выборка.Уровень() - 1, 0);
	
	Если Выборка.Группировка() = "ОБЩИЕ" Тогда
		ДокументРезультат.Вывести(СтруктураПараметров.ИтогиПодвал, Выборка.Уровень());
	КонецЕсли;	
	
	ДокументРезультат.Вывести(Область, Выборка.Уровень());
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит строки
//
// Параметры:
//	Выборка - выборка
//
Процедура ВывестиСтроки(Выборка, СтруктураПараметров)   		
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	Область = СтруктураПараметров.ОбластьСтрока;
	Пока Выборка.Следующий() Цикл 			
		ВывестиПоказатели(Выборка,СтруктураПараметров); 			
	КонецЦикла; 
	ДокументРезультат.Вывести(СтруктураПараметров.ИтогиПодвал, Выборка.Уровень());
КонецПроцедуры // ВывестиПоказатели()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	ПоВалютам       - признак вывода валют и валютных сумм,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, СдвигУровня, 
	СброситьСдвигУровня, СтруктураПараметров)
	
	Пока Выборка.Следующий() Цикл
		ВывестиПоказатели(Выборка, СтруктураПараметров);
		
		// Если есть следующая группировка, то выбираем ее
		~М1:	Если ИндексТекущейГруппировки + 1 < МассивГруппировок.Количество() Тогда
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
			ИндексТекущейГруппировки + 1, МассивГруппировок, СдвигУровня, 
			СброситьСдвигУровня, СтруктураПараметров);
		Иначе	//Для последней группировки выводим строку
			ВывестиСтроки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт		
	Параметры = Новый Соответствие;      		
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;  		
	Организация = Параметры["Организация"];	
	ДатаКон = Параметры["ДатаКон"];	
	Груз = Параметры["Груз"];	
	ЗаполнитьНачальныеНастройки();   		
	СтрокиОтбора = Параметры["Отбор"];  		
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда 			
		Для каждого Строка Из СтрокиОтбора Цикл    				
			ЭлементОтбора = Неопределено;       				
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл 					
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;  					
			КонецЦикла; 				
			Если ЭлементОтбора = Неопределено Тогда					
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ); 					
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение); 				
		КонецЦикла;
	КонецЕсли; 		
КонецПроцедуры

// Получает заголовок отчета в виде строки
//
//Возвращаемое значение:
//	Строка заголовка
//
Функция ЗаголовокОтчета() Экспорт 		
	Возврат ЭтотОбъект.Метаданные().Синоним;			
КонецФункции // ЗаголовокОтчета()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

мСтруктураПоказателей = Новый Структура();	
//мСтруктураПоказателей.Вставить("КоличествоМест" ,"ЧЦ = 3 ; ЧДЦ = 0");

НП = Новый НастройкаПериода;
Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
#КонецЕсли