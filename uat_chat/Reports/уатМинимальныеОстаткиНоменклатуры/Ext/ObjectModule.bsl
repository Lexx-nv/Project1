#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатМинимальныеОстаткиНоменклатуры.Номенклатура КАК Номенклатура,
	|	уатМинимальныеОстаткиНоменклатуры.Номенклатура.Код КАК Код,
	|	уатПартииТоваровНаСкладахОстатки.Склад КАК Склад,
	|	уатМинимальныеОстаткиНоменклатуры.МинимальныйОстаток КАК МинимальныйОстаток,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	уатПартииТоваровНаСкладахОстатки.СтоимостьОстаток КАК СтоимостьОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < уатМинимальныеОстаткиНоменклатуры.МинимальныйОстаток
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МеньшеМинОстатка,
	|	уатПартииТоваровНаСкладахОстатки.СтоимостьУпрОстаток КАК СтоимостьУпрОстаток,
	|	уатПартииТоваровНаСкладахОстатки.Партия
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Код,
	|	Склад.*,
	|	МинимальныйОстаток,
	|	КоличествоОстаток,
	|	СтоимостьОстаток,
	|	МеньшеМинОстатка,
	|	СтоимостьУпрОстаток,
	|	Партия.*}
	|ИЗ
	|	РегистрСведений.уатМинимальныеОстаткиНоменклатуры КАК уатМинимальныеОстаткиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&ДатаКонца, ) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО уатМинимальныеОстаткиНоменклатуры.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	уатМинимальныеОстаткиНоменклатуры.МинимальныйОстаток > 0
	|{ГДЕ
	|	уатПартииТоваровНаСкладахОстатки.Партия.Организация.* КАК Организация,
	|	уатМинимальныеОстаткиНоменклатуры.Номенклатура.Код КАК Код,
	|	уатПартииТоваровНаСкладахОстатки.Склад.*,
	|	уатМинимальныеОстаткиНоменклатуры.Номенклатура.*,
	|	уатМинимальныеОстаткиНоменклатуры.МинимальныйОстаток,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток,
	|	уатПартииТоваровНаСкладахОстатки.СтоимостьОстаток,
	|	(ВЫБОР
	|			КОГДА ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < уатМинимальныеОстаткиНоменклатуры.МинимальныйОстаток
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК МеньшеМинОстатка,
	|	уатПартииТоваровНаСкладахОстатки.Партия.*}
	|{УПОРЯДОЧИТЬ ПО
	|	Номенклатура.*,
	|	Код,
	|	Склад.*,
	|	МинимальныйОстаток,
	|	КоличествоОстаток,
	|	СтоимостьОстаток}
	|ИТОГИ
	|	МАКСИМУМ(МинимальныйОстаток),
	|	СУММА(КоличествоОстаток),
	|	СУММА(СтоимостьОстаток),
	|	СУММА(СтоимостьУпрОстаток)
	|ПО
	|	Номенклатура,
	|	Код,
	|	Склад
	|{ИТОГИ ПО
	|	Номенклатура.*,
	|	Код,
	|	Склад.*,
	|	МеньшеМинОстатка,
	|	Партия.*}";

	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МинимальныйОстаток", "Мин. остаток");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоОстаток" , "Остаток на складах");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтоимостьОстаток"  , "Стоимость остатка на складах");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МеньшеМинОстатка"  , "Остаток на складах меньше мин. значения");
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	УниверсальныйОтчет.ДобавитьПоказатель("МинимальныйОстаток", "Мин. остаток"                       , Истина,"ЧДЦ=3", , );
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоОстаток" , "Остаток на складах"                 , Истина,"ЧДЦ=3", , );
	УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьОстаток"  , "Стоимость остатка на складах (регл)", Истина,"ЧДЦ=2", , );
	Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") тогда
		УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьУпрОстаток", "Стоимость остатка на складах (упр)", Истина,"ЧДЦ=2", , );
	КонецЕсли;

	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("Склад");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	УниверсальныйОтчет.ДобавитьОтбор("МеньшеМинОстатка",Истина,ВидСравнения.Равно, Истина);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	//УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Код"      , ТипРазмещенияРеквизитовИзмерений.Отдельно);
	
	//ПутьКДанным, Размещение = Неопределено, Положение = 3
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
