#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатДТП.Ссылка КАК Регистратор,
	|	уатДТП.Организация КАК Организация,
	|	уатДТП.ТС КАК ТС,
	|	уатДТП.ТС.ГаражныйНомер КАК ТСГарНомер,
	|	уатДТП.ТС.ГосударственныйНомер КАК ТСГосНомер,
	|	уатДТП.Водитель КАК Водитель,
	|	уатДТП.Колонна КАК Колонна,
	|	уатДТП.МестоДТП КАК МестоДТП,
	|	уатДТП.Виновность КАК Виновность,
	|	уатДТП.ПричинаДТП КАК ПричинаДТП,
	|	уатДТП.НомерСправкиГИБДД КАК НомерСправкиГИБДД,
	|	уатДТП.ДатаСправкиГИБДД КАК ДатаСправкиГИБДД,
	|	уатДТП.СтраховаяКомпания КАК СтраховаяКомпания,
	|	уатДТП.СуммаРемонта КАК СуммаРемонта,
	|	1 КАК КоличествоДТП
	|{ВЫБРАТЬ
	|	Регистратор.*,
	|	Организация.*,
	|	ТС.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Водитель.*,
	|	Колонна.*,
	|	МестоДТП,
	|	Виновность,
	|	ПричинаДТП.*,
	|	НомерСправкиГИБДД,
	|	ДатаСправкиГИБДД,
	|	СтраховаяКомпания.*,
	|	СуммаРемонта,
	|	КоличествоДТП}
	|ИЗ
	|	Документ.уатДТП КАК уатДТП
	|ГДЕ
	|	уатДТП.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И уатДТП.ПометкаУдаления = ЛОЖЬ
	|{ГДЕ
	|	уатДТП.Ссылка.*,
	|	уатДТП.Организация.*,
	|	уатДТП.ТС.*,
	|	уатДТП.ТС.ГаражныйНомер,
	|	уатДТП.ТС.ГосударственныйНомер,
	|	уатДТП.Водитель.*,
	|	уатДТП.Колонна.*,
	|	уатДТП.МестоДТП,
	|	уатДТП.Виновность,
	|	уатДТП.ПричинаДТП.*,
	|	уатДТП.НомерСправкиГИБДД,
	|	уатДТП.ДатаСправкиГИБДД,
	|	уатДТП.СтраховаяКомпания.*,
	|	уатДТП.СуммаРемонта,
	|	(ВЫБОР
	|			КОГДА уатДТП.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатДТП.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|{УПОРЯДОЧИТЬ ПО
	|	Регистратор.*,
	|	Организация.*,
	|	ТС.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Водитель.*,
	|	Колонна.*,
	|	МестоДТП,
	|	Виновность,
	|	ПричинаДТП.*,
	|	НомерСправкиГИБДД,
	|	ДатаСправкиГИБДД,
	|	СтраховаяКомпания.*,
	|	СуммаРемонта}
	|ИТОГИ
	|	СУММА(СуммаРемонта),
	|	СУММА(КоличествоДТП)
	|ПО
	|	Регистратор,
	|	ТС,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Водитель,
	|	Колонна,
	|	МестоДТП,
	|	Виновность,
	|	ПричинаДТП,
	|	НомерСправкиГИБДД,
	|	ДатаСправкиГИБДД,
	|	СтраховаяКомпания,
	|	Организация
	|{ИТОГИ ПО
	|	Регистратор.*,
	|	Организация.*,
	|	ТС.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Водитель.*,
	|	Колонна.*,
	|	МестоДТП,
	|	Виновность,
	|	ПричинаДТП.*,
	|	НомерСправкиГИБДД,
	|	ДатаСправкиГИБДД,
	|	СтраховаяКомпания.*}";	
	
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТС"               , "ТС (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГарНомер"       , "ТС (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГосНомер"       , "ТС (гос. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Регистратор"      , "Документ регистратор");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Организация"      , "Организация");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Водитель"         , "Водитель");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Колонна"          , "Колонна");
 	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МестоДТП"         , "Место ДТП");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Виновность"       , "Признак виновности водителя организации");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПричинаДТП"       , "Причина ДТП");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НомерСправкиГИБДД", "Номер справки ГИБДД");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаСправкиГИБДД" , "Дата справки ГИБДД");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтраховаяКомпания", "Страховая компания");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"			, "ТС выбыло");
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПричинаДТП");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");

	УниверсальныйОтчет.ДобавитьПоказатель("СуммаРемонта"  , "Сумма ремонта"  , Истина,"ЧДЦ=2", , );
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоДТП" , "Количество ДТП" , Истина,, , );

	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("ПричинаДТП");
	УниверсальныйОтчет.ДобавитьОтбор("ТС");
	УниверсальныйОтчет.ДобавитьОтбор("ТСГосНомер",Ложь,ВидСравнения.Содержит);
	УниверсальныйОтчет.ДобавитьОтбор("Водитель");
	УниверсальныйОтчет.ДобавитьОтбор("Виновность");
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло", Истина, ВидСравнения.Равно , Ложь);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТСГосНомер");
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
