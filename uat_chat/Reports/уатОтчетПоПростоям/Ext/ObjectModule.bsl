#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатПростоиОбороты.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ГОД) КАК ПериодГод,
	|	уатПростоиОбороты.ТС КАК ТС,
	|	уатПростоиОбороты.ТС.ГаражныйНомер КАК ТСГаражныйНомер,
	|	уатПростоиОбороты.ТС.ГосударственныйНомер КАК ТСГосударственныйНомер,
	|	уатПростоиОбороты.Водитель КАК Водитель,
	|	уатПростоиОбороты.ВидПростоя КАК ВидПростоя,
	|	ВЫБОР
	|		КОГДА &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - уатПростоиОбороты.ВремяОборот / 3600 > 0
	|						ТОГДА (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - 1
	|					ИНАЧЕ ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))
	|				КОНЕЦ + (ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - уатПростоиОбороты.ВремяОборот / 3600 > 0
	|							ТОГДА уатПростоиОбороты.ВремяОборот / 3600 - ((ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - 1)
	|						ИНАЧЕ уатПростоиОбороты.ВремяОборот / 3600 - (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0)))
	|					КОНЕЦ * 60 / 100 КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК Время,
	|	уатПростоиОбороты.ТС.Организация КАК Организация,
	|	уатПростоиОбороты.ТС.Колонна КАК Колонна,
	|	ВЫБОР
	|		КОГДА &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - уатПростоиОбороты.ВремяОборот / 3600 > 0
	|						ТОГДА (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - 1
	|					ИНАЧЕ ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))
	|				КОНЕЦ * 60 + ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - уатПростоиОбороты.ВремяОборот / 3600 > 0
	|						ТОГДА уатПростоиОбороты.ВремяОборот / 3600 - ((ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0))) - 1)
	|					ИНАЧЕ уатПростоиОбороты.ВремяОборот / 3600 - (ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 0)))
	|				КОНЕЦ * 60
	|		ИНАЧЕ ВЫРАЗИТЬ(уатПростоиОбороты.ВремяОборот / 3600 КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ВремяИтоги
	|{ВЫБРАТЬ
	|	ТС.*,
	|	ТСГаражныйНомер,
	|	ТСГосударственныйНомер,
	|	Водитель.*,
	|	ВидПростоя.*,
	|	Время,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	Организация.*,
	|	Колонна.*}
	|ИЗ
	|	РегистрНакопления.уатПростои.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК уатПростоиОбороты
	|{ГДЕ
	|	уатПростоиОбороты.ТС.*,
	|	уатПростоиОбороты.ТС.ГаражныйНомер,
	|	уатПростоиОбороты.ТС.ГосударственныйНомер,
	|	уатПростоиОбороты.Водитель.*,
	|	уатПростоиОбороты.ВидПростоя.*,
	|	(НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ДЕНЬ)) КАК ПериодДень,
	|	(НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	|	(НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ДЕКАДА)) КАК ПериодДекада,
	|	(НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, МЕСЯЦ)) КАК ПериодМесяц,
	|	(НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, КВАРТАЛ)) КАК ПериодКвартал,
	|	(НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|	(НАЧАЛОПЕРИОДА(уатПростоиОбороты.Период, ГОД)) КАК ПериодГод,
	|	уатПростоиОбороты.ТС.Организация.* КАК Организация,
	|	уатПростоиОбороты.ТС.Колонна.* КАК Колонна,
	|		(ВЫБОР
	|				КОГДА уатПростоиОбороты.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				КОГДА уатПростоиОбороты.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЛОЖЬ
	|			КОНЕЦ) КАК ТСВыбыло}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ТС,
	|	ТСГаражныйНомер,
	|	ТСГосударственныйНомер,
	|	Водитель,
	|	ВидПростоя,
	|	Время,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада
	|{УПОРЯДОЧИТЬ ПО
	|	ТС.*,
	|	ТСГаражныйНомер,
	|	ТСГосударственныйНомер,
	|	Водитель.*,
	|	ВидПростоя.*,
	|	Время,
	|	Организация.*,
	|	Колонна.*,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод}
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(СУММА(ВремяИтоги) / 60 КАК ЧИСЛО(15, 0))) - СУММА(ВремяИтоги) / 60 > 0
	|							ТОГДА (ВЫРАЗИТЬ(СУММА(ВремяИтоги) / 60 КАК ЧИСЛО(15, 0))) - 1
	|						ИНАЧЕ ВЫРАЗИТЬ(СУММА(ВремяИтоги) / 60 КАК ЧИСЛО(15, 0))
	|					КОНЕЦ + ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(СУММА(ВремяИтоги) / 60 КАК ЧИСЛО(15, 0))) - СУММА(ВремяИтоги) / 60 > 0
	|							ТОГДА СУММА(ВремяИтоги) / 60 - ((ВЫРАЗИТЬ(СУММА(ВремяИтоги) / 60 КАК ЧИСЛО(15, 0))) - 1)
	|						ИНАЧЕ СУММА(ВремяИтоги) / 60 - (ВЫРАЗИТЬ(СУММА(ВремяИтоги) / 60 КАК ЧИСЛО(15, 0)))
	|					КОНЕЦ * 60 / 100 КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ СУММА(ВремяИтоги)
	|	КОНЕЦ КАК Время
	|ПО
	|	Период,
	|	ТС,
	|	ТСГаражныйНомер,
	|	ТСГосударственныйНомер,
	|	Водитель,
	|	ВидПростоя,
	|	ПериодДень
	|{ИТОГИ ПО
	|	ТС.*,
	|	ТСГаражныйНомер,
	|	ТСГосударственныйНомер,
	|	Водитель.*,
	|	ВидПростоя.*,
	|	Время,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	Колонна.*,
	|	Организация.*}";
	
	ВыводитьВремяВФорматеЧЧММ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(глЗначениеПеременной("глТекущийПользователь"), ПланыВидовХарактеристик.уатПраваИНастройки.ФорматироватьВремяВОтчетах);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВыводитьВремяВФорматеЧЧММ", ?(ВыводитьВремяВФорматеЧЧММ, ИСТИНА, ЛОЖЬ));	
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТС"        			 , "ТС (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГаражныйНомер"		 , "ТС (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГосударственныйНомер", "ТС (гос. номер)"); 
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидПростоя"			 , "Вид простоя");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"				 , "ТС выбыло");

	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ВидПростоя");
	
	УниверсальныйОтчет.ДобавитьПоказатель("Время", "Время" , Истина,, , );

	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Колонна");
	УниверсальныйОтчет.ДобавитьОтбор("ТС");
	УниверсальныйОтчет.ДобавитьОтбор("ВидПростоя");
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло", Истина, ВидСравнения.Равно, Ложь);

	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТСГосНомер");
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТС.Модель");
	
	ЭлементУслОформления = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить(""); 
	ЭлементУслОформления.Использование = Истина; 
	ЭлементОбласть = ЭлементУслОформления.Область.Добавить("Время", "Время", ТипОбластиОформления.Поле); 
	
	ЭлементОформления = ЭлементУслОформления.Оформление.Формат; 
	ЭлементОформления.Использование = Истина; 
	Если ВыводитьВремяВФорматеЧЧММ Тогда
		ЭлементОформления.Значение = "ЧДЦ=2; ЧРД=:";
	Иначе
		ЭлементОформления.Значение = "ЧДЦ=3; ЧРД=,";
	КонецЕсли;
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
