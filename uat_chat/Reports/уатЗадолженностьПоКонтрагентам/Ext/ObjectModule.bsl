#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	

	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	// Описание исходного текста запроса.
	// При написании текста запроса рекомендуется следовать правилам, описанным в следующем шаблоне текста запроса:
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПРЕДСТАВЛЕНИЕ(уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента),
	|	ПРЕДСТАВЛЕНИЕ(уатВзаиморасчетыСКонтрагентамиОстатки.Контрагент),
	|	ПРЕДСТАВЛЕНИЕ(уатВзаиморасчетыСКонтрагентамиОстатки.Организация),
	|	ПРЕДСТАВЛЕНИЕ(уатВзаиморасчетыСКонтрагентамиОстатки.Сделка),
	|	ПРЕДСТАВЛЕНИЕ(уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетовПредставление,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр
	|{ВЫБРАТЬ
	|	Контрагент.*,
	|	Организация.*,
	|	ДоговорКонтрагента.*,
	|	ВалютаВзаиморасчетов,
	|	Сделка.*,
	|	СуммаВзаиморасчетов,
	|	СуммаУпр}
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, {(Контрагент).* КАК Контрагент, (Сделка).* КАК Сделка, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Организация).* КАК Организация}) КАК уатВзаиморасчетыСКонтрагентамиОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, {(Контрагент).* КАК Контрагент, (Сделка).* КАК Сделка, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (Организация).* КАК Организация}) КАК уатВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
	|		ПО уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = уатВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
	|			И уатВзаиморасчетыСКонтрагентамиОстатки.Сделка = уатВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.Сделка
	|			И (ВЫБОР
	|				КОГДА &ПереключательЗадолженность = 1
	|					ТОГДА уатВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаВзаиморасчетовОстаток > 0
	|				КОГДА &ПереключательЗадолженность = 2
	|					ТОГДА уатВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаВзаиморасчетовОстаток < 0
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|{ГДЕ
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Контрагент.* КАК Контрагент,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Организация.* КАК Организация,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.Сделка.* КАК Сделка,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпр}
	|{УПОРЯДОЧИТЬ ПО
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	ВалютаВзаиморасчетов,
	|	Сделка,
	|	СуммаВзаиморасчетов,
	|	СуммаУпр}
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаУпр)
	|ПО
	|	ОБЩИЕ
	|{ИТОГИ ПО
	|	Организация.*,
	|	Контрагент.*,
	|	ДоговорКонтрагента.*,
	|	Сделка.*,
	|	ВалютаВзаиморасчетов}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		
		// Добавление свойств и категорий поля запроса в таблицу полей.
		// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
		
		// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>, <Представление>, <Назначение>);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыСКонтрагентамиОстатки.Контрагент", "Контрагент",         "Контрагент",          ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыСКонтрагентамиОстатки.Организация", "Организация",         "Организация",          ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыСКонтрагентамиОстатки.Сделка",                      "Сделка",             "Сделка",              ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыСКонтрагентамиОстатки.Сделка",                      "Сделка",             "Сделка",              ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
		УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента",          "ДоговорКонтрагента", "Договор контрагента", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов);
		
		// Добавление свойств и категорий в исходный текст запроса.
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
		
	КонецЕсли;
		
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента",   "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если НЕ ЭтоОбъединениеСБП Тогда
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетов",   "Сумма в " + глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование);
	КонецЕсли;
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаУпр", "Сумма в валюте взаиморасчетов");

	// Добавление показателей
	// Необходимо вызывать для каждого добавляемого показателя.
	// УниверсальныйОтчет.ДобавитьПоказатель(<ИмяПоказателя>, <ПредставлениеПоказателя>, <ВключенПоУмолчанию>, <Формат>, <ИмяГруппы>, <ПредставлениеГруппы>);
	Если НЕ ЭтоОбъединениеСБП Тогда
		УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпр", "Сумма в " + глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование, Истина, "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетов", "Сумма в валюте взаиморасчетов", ?(ЭтоОбъединениеСБП, Истина, Ложь), "ЧЦ=15; ЧДЦ=2");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СуммаУпр",             "ДоговорКонтрагента");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СуммаВзаиморасчетов",  "ДоговорКонтрагента");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВалютаВзаиморасчетов", "ДоговорКонтрагента");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СуммаУпр",             "ВалютаВзаиморасчетов");
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("СуммаВзаиморасчетов",  "ВалютаВзаиморасчетов");
	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	// Установка типов значений свойств в отборах отчета
	УниверсальныйОтчет.УстановитьТипыЗначенийСвойствДляОтбора();
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить( "ПереключательЗадолженность", ПереключательЗадолженность);
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = УправлениеОтчетами.СохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;
УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
