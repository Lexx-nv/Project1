#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПЛ КАК ПЛ,
	|	ВложенныйЗапрос.ПЛ.ТранспортноеСредство КАК ТС,
	|	ВложенныйЗапрос.РасходПЛНорма КАК РасходПЛНорма,
	|	ВложенныйЗапрос.РасходПЛФакт КАК РасходПЛФакт,
	|	ВложенныйЗапрос.РасходРС КАК РасходРС,
	|	ВложенныйЗапрос.ПробегПЛ КАК ПробегПЛ,
	|	ВложенныйЗапрос.ПробегРС КАК ПробегРС,
	|	ВложенныйЗапрос.РасходПЛФакт - ВложенныйЗапрос.РасходРС КАК РазницаРасходаФакт,
	|	ВложенныйЗапрос.РасходПЛНорма - ВложенныйЗапрос.РасходРС КАК РазницаРасходаНорма,
	|	ВложенныйЗапрос.ПробегПЛ - ВложенныйЗапрос.ПробегРС КАК РазницаПробег,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасходПЛНорма <> 0
	|				И ВложенныйЗапрос.РасходПЛНорма > ВложенныйЗапрос.РасходПЛФакт
	|			ТОГДА ВЫРАЗИТЬ((ВложенныйЗапрос.РасходПЛНорма - ВложенныйЗапрос.РасходПЛФакт) / ВложенныйЗапрос.РасходПЛНорма * 100 КАК ЧИСЛО(8, 1))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЭкономияПроцент,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасходПЛНорма <> 0
	|				И ВложенныйЗапрос.РасходПЛНорма < ВложенныйЗапрос.РасходПЛФакт
	|			ТОГДА ВЫРАЗИТЬ((ВложенныйЗапрос.РасходПЛФакт - ВложенныйЗапрос.РасходПЛНорма) / ВложенныйЗапрос.РасходПЛНорма * 100 КАК ЧИСЛО(8, 1))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПережогПроцент
	|{ВЫБРАТЬ
	|	ПЛ.*,
	|	РасходПЛНорма,
	|	РасходПЛФакт,
	|	РасходРС,
	|	ПробегПЛ,
	|	ПробегРС,
	|	ТС.*,
	|	РазницаРасходаФакт,
	|	РазницаРасходаНорма,
	|	РазницаПробег,
	|	ЭкономияПроцент,
	|	ПережогПроцент}
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатПутевойЛистРасходГСМ.Ссылка КАК ПЛ,
	|		МАКСИМУМ(уатПутевойЛистРасходГСМ.РасходПоНорме) КАК РасходПЛНорма,
	|		МАКСИМУМ(уатПутевойЛистРасходГСМ.РасходПоФакту) КАК РасходПЛФакт,
	|		СУММА(уатМестоположениеGPS.ЗначениеДатчика3) КАК РасходРС,
	|		МАКСИМУМ(уатПутевойЛистРасходГСМ.Ссылка.СпидометрВозвращения - уатПутевойЛистРасходГСМ.Ссылка.СпидометрВыезда) КАК ПробегПЛ,
	|		СУММА(уатМестоположениеGPS.ЗначениеДатчика1) КАК ПробегРС
	|	ИЗ
	|		Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестоположениеGPS КАК уатМестоположениеGPS
	|			ПО (уатМестоположениеGPS.Период МЕЖДУ уатПутевойЛистРасходГСМ.Ссылка.ДатаВыезда И уатПутевойЛистРасходГСМ.Ссылка.ДатаВозвращения)
	|				И уатПутевойЛистРасходГСМ.ТС = уатМестоположениеGPS.ТС
	|	ГДЕ
	|		уатПутевойЛистРасходГСМ.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	
	|	СГРУППИРОВАТЬ ПО
	|		уатПутевойЛистРасходГСМ.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ПЛ.ТранспортноеСредство.ИДвСистемеНавигации <> """"
	|	И ВложенныйЗапрос.ПЛ.Рассчитан = ИСТИНА
	|	И ВложенныйЗапрос.ПЛ.Проведен = ИСТИНА
	|{ГДЕ
	|	ВложенныйЗапрос.ПЛ.*,
	|	ВложенныйЗапрос.ПЛ.ТранспортноеСредство.* КАК ТС,
	|		(ВЫБОР
	|				КОГДА ВложенныйЗапрос.ПЛ.ТранспортноеСредство.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				КОГДА ВложенныйЗапрос.ПЛ.ТранспортноеСредство.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЛОЖЬ
	|			КОНЕЦ) КАК ТСВыбыло}	
	|{УПОРЯДОЧИТЬ ПО
	|	ПЛ.*,
	|	РасходПЛНорма,
	|	РасходПЛФакт,
	|	РасходРС,
	|	ПробегПЛ,
	|	ПробегРС,
	|	ТС.*,
	|	РазницаРасходаФакт,
	|	РазницаРасходаНорма,
	|	РазницаПробег,
	|	ЭкономияПроцент,
	|	ПережогПроцент}
	|ИТОГИ
	|	СУММА(РасходПЛНорма),
	|	СУММА(РасходПЛФакт),
	|	СУММА(РасходРС),
	|	СУММА(ПробегПЛ),
	|	СУММА(ПробегРС),
	|	СУММА(РазницаРасходаФакт),
	|	СУММА(РазницаРасходаНорма),
	|	СУММА(РазницаПробег),
	|	ВЫБОР
	|		КОГДА СУММА(РасходПЛНорма) <> 0
	|				И СУММА(РасходПЛНорма) > СУММА(РасходПЛФакт)
	|			ТОГДА ВЫРАЗИТЬ((СУММА(РасходПЛНорма) - СУММА(РасходПЛФакт)) / СУММА(РасходПЛНорма) * 100 КАК ЧИСЛО(8, 1))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЭкономияПроцент,
	|	ВЫБОР
	|		КОГДА СУММА(РасходПЛНорма) <> 0
	|				И СУММА(РасходПЛНорма) < СУММА(РасходПЛФакт)
	|			ТОГДА ВЫРАЗИТЬ((СУММА(РасходПЛФакт) - СУММА(РасходПЛНорма)) / СУММА(РасходПЛНорма) * 100 КАК ЧИСЛО(8, 1))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПережогПроцент
	|ПО
	|	ПЛ,
	|	ТС
	|{ИТОГИ ПО
	|	ПЛ.*,
	|	ТС.*}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПЛ"	   , "Путевой лист");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло", "ТС выбыло");
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПЛ");
	
	УниверсальныйОтчет.ДобавитьПоказатель("РасходПЛФакт"	   , "Расход (ПЛ факт)"		, Истина, "ЧДЦ=3","ГСМ", "ГСМ" );
	УниверсальныйОтчет.ДобавитьПоказатель("РасходПЛНорма"	   , "Расход (ПЛ норма)"	, Истина, "ЧДЦ=3","ГСМ", "ГСМ" );
	УниверсальныйОтчет.ДобавитьПоказатель("РасходРС" 		   , "Расход (GPS)"			, Истина, "ЧДЦ=3","ГСМ", "ГСМ" );
	УниверсальныйОтчет.ДобавитьПоказатель("РазницаРасходаФакт" , "Разница факт. расхода", Ложь	, "ЧДЦ=3","ГСМ", "ГСМ" );
	УниверсальныйОтчет.ДобавитьПоказатель("РазницаРасходаНорма", "Разница норм. расхода", Ложь	, "ЧДЦ=3","ГСМ", "ГСМ" );
    УниверсальныйОтчет.ДобавитьПоказатель("ЭкономияПроцент"    , "Экономия, %"          , Ложь	, "ЧДЦ=2", "ГСМ", "ГСМ" );
	УниверсальныйОтчет.ДобавитьПоказатель("ПережогПроцент"     , "Пережог, %"           , Ложь	, "ЧДЦ=2", "ГСМ", "ГСМ" );

	УниверсальныйОтчет.ДобавитьПоказатель("ПробегПЛ"	 , "Пробег (ПЛ)"	, Истина, "ЧДЦ=3","Пробег", "Пробег" );
	УниверсальныйОтчет.ДобавитьПоказатель("ПробегРС"	 , "Пробег (GPS)"	, Истина, "ЧДЦ=3","Пробег", "Пробег" );
	УниверсальныйОтчет.ДобавитьПоказатель("РазницаПробег", "Разница пробега", Ложь	, "ЧДЦ=3","Пробег", "Пробег" );
	
	//УниверсальныйОтчет.ДобавитьПоказатель("Количество" , "Количество" , Истина,, , );

	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("ТС"	   , Ложь  , ВидСравнения.Равно);
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло", Истина, ВидСравнения.Равно, Ложь);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	
	//ПутьКДанным, Размещение = Неопределено, Положение = 3
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНачала", ?(УниверсальныйОтчет.ДатаНач = Дата('00010101000000'), УниверсальныйОтчет.ДатаНач, НачалоДня(УниверсальныйОтчет.ДатаНач)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКонца", ?(УниверсальныйОтчет.ДатаКон = Дата('00010101000000'), Дата("39991231"), КонецДня(УниверсальныйОтчет.ДатаКон)));
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
