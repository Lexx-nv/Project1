
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура формирует отчет.
//
&НаСервере
Процедура СформироватьОтчет()
    	
  	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");	
	
	Если ОтчетОбъект.ПроверитьЗаполнение() Тогда
		Результат.Очистить();
		ОтчетОбъект.СкомпоноватьРезультат(Результат);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОтчетОбъект, "Отчет");

КонецПроцедуры // СформироватьОтчет()

// Процедура устанавливает отбор по владельцу в форме выбора датчика.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораДатчика()

	МодельТерминала = ПолучитьМодельТерминала(Отчет.Объект);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", МодельТерминала);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	Элементы.Датчик.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);	

КонецПроцедуры

// Функция возвращает модель терминала, в соответствии с переданным объектом 
//
&НаСервереБезКонтекста
Функция ПолучитьМодельТерминала(ТекущийОбъект)

	Возврат ItobОперативныйМониторинг.ПолучитьМодельТерминалаПоОбъекту(ТекущийОбъект, ТекущаяДата());	

КонецФункции // ПолучитьМодельТерминала()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "При создании на сервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Константы.уатИспользуемаяСистемаGPS.Получить() <> Перечисления.уатСистемаGPS._1СЦСМ тогда
		#Если Клиент тогда
			ТекстСообщения = "Открытие возможно только тогда, когда используемая система GPS - 1C:Центр спутникового мониторинга.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	СписокПараметров = Неопределено;
	
	Если Параметры.Свойство("СписокПараметров", СписокПараметров) Тогда
				
		ОтчетПоАналоговымДатчикам = РеквизитФормыВЗначение("Отчет");	
		Для каждого ЭлСписка Из СписокПараметров Цикл
			
			ОтчетПоАналоговымДатчикам[ЭлСписка.Представление] = ЭлСписка.Значение; 
		
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ОтчетПоАналоговымДатчикам, "Отчет");
		
		СформироватьОтчет();
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Отчет.НачПериода) И НЕ ЗначениеЗаполнено(Отчет.КонПериода) Тогда
		
		Отчет.НачПериода = НачалоДня(ТекущаяДата());
		Отчет.КонПериода = ТекущаяДата();
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораДатчика();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик команды "УстановитьИнтервал".
//
&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала = Отчет.НачПериода;
	Диалог.Период.ДатаОкончания = Отчет.КонПериода;
	
	Если Диалог.Редактировать() Тогда
		
		Отчет.НачПериода = Диалог.Период.ДатаНачала;
		Отчет.КонПериода = Диалог.Период.ДатаОкончания;
	
	КонецЕсли;
	
КонецПроцедуры
 
// Процедура - обработчик события СформироватьОтчет
//
&НаКлиенте
Процедура Сформировать(Команда)
			
	СформироватьОтчет();
		
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля "НачПериода" таблицы.
//
&НаКлиенте
Процедура НачПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отчет.НачПериода = НачалоДня(Отчет.НачПериода + Направление*24*3600);	
	
КонецПроцедуры // НачПериодаРегулирование()

// Процедура - обработчик события "Регулирование" поля "КонПериода" таблицы.
//
&НаКлиенте
Процедура КонПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Отчет.КонПериода = КонецДня(Отчет.КонПериода + Направление*24*3600);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонПериодаРегулирование()

// Процедура - обработчик события "ОбработкаВыбора" поля "КонПериода" таблицы.
//
&НаКлиенте
Процедура КонПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
	Отчет.КонПериода = ВыбранноеЗначение;
	
	Элемент.УстановитьГраницыВыделения(1,СтрДлина(Элемент.ТекстРедактирования));
	Элемент.ВыделенныйТекст = Строка(ВыбранноеЗначение);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонПериодаОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля "Объект".
//
&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораДатчика();	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Датчик".
//
&НаКлиенте
Процедура ДатчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Отчет.Объект) Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Не указан объект!");
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ДОКУМЕНТА

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокумента.
//
&НаКлиенте
Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
			
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Действие = Неопределено;
		Если Расшифровка.Свойство("Действие", Действие) Тогда
			Если Действие = "ОткрытьМастерНастройкиCsmSvc" Тогда
				ПолучитьФорму("Обработка.ItobМастерНастройкиСервисаCsmSvc.Форма").Открыть();
				Возврат;
			
			КонецЕсли;			
		
		КонецЕсли;		
	
		Оповестить("РежимМаршрута", Расшифровка);
	    				
	КонецЕсли;
	
КонецПроцедуры // ПолеТабличногоДокументаОбработкаРасшифровки()


