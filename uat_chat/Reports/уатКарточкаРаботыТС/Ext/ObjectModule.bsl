#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Функция получает текст построителя по основному запросу
//
Функция ПолучитьТекстОсновногоЗапроса()
	ТекстЗапроса = "ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка КАК ПутевойЛист,
	|	уатПутевойЛист.Номер КАК Номер,
	|	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ГОД) КАК ПериодГод,
	|	уатПутевойЛист.ДатаВыписки КАК ДатаВыписки,
	|	уатПутевойЛист.Водитель1 КАК Водитель1,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосНомер,
	|	уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КАК ГарНомер,
	|	уатПутевойЛист.СпидометрВыезда КАК СпидометрВыезда,
	|	уатПутевойЛист.СпидометрВозвращения КАК СпидометрВозвращения,
	|	уатПутевойЛистРасходГСМ.ГСМ КАК ГСМ,
	|	уатПутевойЛистРасходГСМ.РасходПоНорме КАК РасходПоНорме,
	|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК РасходПоФакту,
	|	уатПутевойЛистРасходГСМ.ОстатокПриВыезде КАК ОстатокПриВыезде,
	|	уатПутевойЛистРасходГСМ.Выдано КАК Выдано,
	|	уатПутевойЛистРасходГСМ.ОстатокПриВозвращении КАК ОстатокПриВозвращении,
	|	ВЫБОР
	|		КОГДА уатПутевойЛист.РаботаНаДвухВидахТоплива
	|			ТОГДА уатПутевойЛистРасходГСМ.Пробег
	|		ИНАЧЕ уатПутевойЛистВыработкаТС.Количество
	|	КОНЕЦ КАК Пробег,
	|	ВЫБОР
	|		КОГДА уатПутевойЛистРасходГСМ.РасходПоНорме > уатПутевойЛистРасходГСМ.РасходПоФакту
	|			ТОГДА уатПутевойЛистРасходГСМ.РасходПоНорме - уатПутевойЛистРасходГСМ.РасходПоФакту
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Экономия,
	|	ВЫБОР
	|		КОГДА уатПутевойЛистРасходГСМ.РасходПоНорме < уатПутевойЛистРасходГСМ.РасходПоФакту
	|			ТОГДА уатПутевойЛистРасходГСМ.РасходПоФакту - уатПутевойЛистРасходГСМ.РасходПоНорме
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Пережог,
	|	"""" КАК Прицепы
	|{ВЫБРАТЬ
	|	ПутевойЛист.*,
	|	Номер,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ДатаВыписки,
	|	Водитель1.*,
	|	ТС.*,
	|	ГосНомер КАК ТСГосНомер,
	|	ГарНомер КАК ТСГарНомер,
	|	СпидометрВыезда,
	|	СпидометрВозвращения,
	|	ГСМ.*,
	|	РасходПоНорме,
	|	РасходПоФакту,
	|	ОстатокПриВыезде,
	|	Выдано,
	|	ОстатокПриВозвращении,
	|	Пробег,
	|	Экономия,
	|	Пережог,
	|	Прицепы,
	|	уатПутевойЛист.ТранспортноеСредство.Колонна.* КАК Колонна,
	|	уатПутевойЛист.ТранспортноеСредство.Организация.* КАК Организация}
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|		ПО (уатПутевойЛистРасходГСМ.Ссылка = уатПутевойЛист.Ссылка)
	|			И (уатПутевойЛистРасходГСМ.ТС = уатПутевойЛист.ТранспортноеСредство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ПО (уатПутевойЛистВыработкаТС.Ссылка = уатПутевойЛист.Ссылка)
	|			И (уатПутевойЛистВыработкаТС.ТС = уатПутевойЛист.ТранспортноеСредство)
	|//СОЕДИНЕНИЕ С ТАБЛИЦЕЙ ПРИЦЕПОВ
	|ГДЕ
	|	уатПутевойЛист.ДатаВыписки МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И уатПутевойЛист.Рассчитан
	|	И уатПутевойЛист.Проведен
	|	И уатПутевойЛистВыработкаТС.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|	И уатПутевойЛистРасходГСМ.Активен = ИСТИНА
	|{ГДЕ
	|	уатПутевойЛист.Ссылка.*,
	|	уатПутевойЛист.Номер,
	|	(НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ДЕНЬ)) КАК ПериодДень,
	|	(НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, НЕДЕЛЯ)) КАК ПериодНеделя,
	|	(НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ДЕКАДА)) КАК ПериодДекада,
	|	(НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, МЕСЯЦ)) КАК ПериодМесяц,
	|	(НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, КВАРТАЛ)) КАК ПериодКвартал,
	|	(НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|	(НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыписки, ГОД)) КАК ПериодГод,
	|	уатПутевойЛист.ДатаВыписки,
	|	уатПутевойЛист.Водитель1.*,
	|	уатПутевойЛист.ТранспортноеСредство.* КАК ТС,
	|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ТСГосНомер,
	|	уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КАК ТСГарНомер,
	|	уатПутевойЛист.СпидометрВыезда,
	|	уатПутевойЛист.СпидометрВозвращения,
	|	уатПутевойЛистРасходГСМ.ГСМ.*,
	|	уатПутевойЛистРасходГСМ.РасходПоНорме,
	|	уатПутевойЛистРасходГСМ.РасходПоФакту,
	|	уатПутевойЛистРасходГСМ.ОстатокПриВыезде,
	|	уатПутевойЛистРасходГСМ.Выдано,
	|	уатПутевойЛистРасходГСМ.ОстатокПриВозвращении,
	|	(ВЫБОР
	|			КОГДА уатПутевойЛист.РаботаНаДвухВидахТоплива
	|				ТОГДА уатПутевойЛистРасходГСМ.Пробег
	|			ИНАЧЕ уатПутевойЛистВыработкаТС.Количество
	|		КОНЕЦ) КАК Пробег,
	|	(ВЫБОР
	|			КОГДА уатПутевойЛистРасходГСМ.РасходПоНорме > уатПутевойЛистРасходГСМ.РасходПоФакту
	|				ТОГДА уатПутевойЛистРасходГСМ.РасходПоНорме - уатПутевойЛистРасходГСМ.РасходПоФакту
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Экономия,
	|	(ВЫБОР
	|			КОГДА уатПутевойЛистРасходГСМ.РасходПоНорме < уатПутевойЛистРасходГСМ.РасходПоФакту
	|				ТОГДА уатПутевойЛистРасходГСМ.РасходПоФакту - уатПутевойЛистРасходГСМ.РасходПоНорме
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Пережог,
	|	уатПутевойЛист.ТранспортноеСредство.Колонна.* КАК Колонна,
	|	уатПутевойЛист.ТранспортноеСредство.Организация.* КАК Организация,
	|		(ВЫБОР
	|				КОГДА уатПутевойЛист.ТранспортноеСредство.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				КОГДА уатПутевойЛист.ТранспортноеСредство.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЛОЖЬ
	|			КОНЕЦ) КАК ТСВыбыло}	
	|{УПОРЯДОЧИТЬ ПО
	|	ПутевойЛист.*,
	|	Номер,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ДатаВыписки,
	|	Водитель1.*,
	|	ТС.*,
	|	ГосНомер КАК ТСГосНомер,
	|	ГарНомер КАК ТСГарНомер,
	|	СпидометрВыезда,
	|	СпидометрВозвращения,
	|	ГСМ.*,
	|	РасходПоНорме,
	|	РасходПоФакту,
	|	ОстатокПриВыезде,
	|	Выдано,
	|	ОстатокПриВозвращении,
	|	Пробег,
	|	Экономия,
	|	Пережог}
	|ИТОГИ
	|	МИНИМУМ(СпидометрВыезда),
	|	МАКСИМУМ(СпидометрВозвращения),
	|	СУММА(РасходПоНорме),
	|	СУММА(РасходПоФакту),
	|	СУММА(ОстатокПриВыезде),
	|	СУММА(Выдано),
	|	СУММА(ОстатокПриВозвращении),
	|	СУММА(Пробег),
	|	СУММА(Экономия),
	|	СУММА(Пережог),
	|	МАКСИМУМ(Прицепы) КАК Прицепы
	|ПО
	|	ГСМ,
	|	ПутевойЛист,
	|	Номер,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ДатаВыписки,
	|	Водитель1,
	|	ТС,
	|	ГосНомер,
	|	ГарНомер
	|{ИТОГИ ПО
	|	ПутевойЛист.*,
	|	Номер,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ДатаВыписки,
	|	Водитель1.*,
	|	ТС.*,
	|	ГосНомер КАК ТСГосНомер,
	|	ГарНомер КАК ТСГарНомер,
	|	ГСМ.*,
	|	уатПутевойЛист.ТранспортноеСредство.Колонна.* КАК Колонна,
	|	уатПутевойЛист.ТранспортноеСредство.Организация.* КАК Организация}";
	
	Возврат ТекстЗапроса;
КонецФункции

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ПолучитьТекстОсновногоЗапроса();
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТС"              , "ТС (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГарНомер"      , "ТС (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГосНомер"      , "ТС (гос. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаВыписки"     , "Дата выписки путевого листа");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПутевойЛист"     , "Путевой лист");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Прицепы"     	   , "Прицепы");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"		   , "ТС выбыло");
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПутевойЛист");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ГСМ");
	
	УниверсальныйОтчет.ДобавитьПоказатель("Пробег"               , "Пробег"                 , Истина);
	УниверсальныйОтчет.ДобавитьПоказатель("СпидометрВыезда"      , "Выезд"                  , Истина,, "Спидометр"     , "Спидометр");
	УниверсальныйОтчет.ДобавитьПоказатель("СпидометрВозвращения" , "Возврат"                , Истина,, "Спидометр"     , "Спидометр");
	УниверсальныйОтчет.ДобавитьПоказатель("ОстатокПриВыезде", "Остаток при выезде", Истина,"ЧДЦ=3", "РасходГорючего", "Расход горючего");
	УниверсальныйОтчет.ДобавитьПоказатель("Выдано"               , "Выдано"                 , Истина,"ЧДЦ=3", "РасходГорючего", "Расход горючего");
	УниверсальныйОтчет.ДобавитьПоказатель("РасходПоНорме"        , "Расход по норме"        , Истина,"ЧДЦ=3", "РасходГорючего", "Расход горючего");
	УниверсальныйОтчет.ДобавитьПоказатель("РасходПоФакту"        , "Расход по факту"        , Истина,"ЧДЦ=3", "РасходГорючего", "Расход горючего");
	УниверсальныйОтчет.ДобавитьПоказатель("ОстатокПриВозвращении", "Остаток при возвращении", Истина,"ЧДЦ=3", "РасходГорючего", "Расход горючего");
	УниверсальныйОтчет.ДобавитьПоказатель("Экономия"             , "Экономия"               , Истина,"ЧДЦ=3", "РасходГорючего", "Расход горючего");
	УниверсальныйОтчет.ДобавитьПоказатель("Пережог"              , "Пережог"                , Истина,"ЧДЦ=3", "РасходГорючего", "Расход горючего");

	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("ТСГосНомер", Ложь  , ВидСравнения.Содержит);
	УниверсальныйОтчет.ДобавитьОтбор("Водитель1");
	УниверсальныйОтчет.ДобавитьОтбор("ГСМ");
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло"  , Истина, ВидСравнения.Равно, Ложь);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("Прицепы", "ПутевойЛист");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	//УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТСГосНомер"      , ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДатаВыписки"     , ТипРазмещенияРеквизитовИзмерений.Вместе);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Водитель1"       , ТипРазмещенияРеквизитовИзмерений.Вместе);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Прицепы"       , ТипРазмещенияРеквизитовИзмерений.Вместе);
		
	//ПутьКДанным, Размещение = Неопределено, Положение = 3
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	//Здесь используем нестандартный подход, поскольку надо выводить в отчет "сложное" доп. поле
	// "Прицепы", состоящее из всех прицепов по ПЛ, перечисленных через запятую
	
	//Получаем все путевые листы с учетом отборов основного запроса
	мНовыйЗапрос = Новый ПостроительЗапроса;
	мНовыйЗапрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистПрицепы.ТС КАК Прицеп,
	|	уатПутевойЛистПрицепы.Ссылка КАК ПЛ,
	|	уатПутевойЛистПрицепы.Ссылка.ТранспортноеСредство КАК ТС
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И уатПутевойЛистПрицепы.Ссылка.Проведен
	|	И (уатПутевойЛистПрицепы.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт) ИЛИ уатПутевойЛистПрицепы.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп))
	|{ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка.* КАК ПЛ,
	|	уатПутевойЛистПрицепы.Ссылка.ТранспортноеСредство.* КАК ТС}
	|ИТОГИ ПО
	|	ПЛ";
	
	мНовыйЗапрос.Параметры.Вставить("ДатаНач", ?(УниверсальныйОтчет.ДатаНач = '00010101', УниверсальныйОтчет.ДатаНач, НачалоДня(УниверсальныйОтчет.ДатаНач)));
	мНовыйЗапрос.Параметры.Вставить("ДатаКон", ?(УниверсальныйОтчет.ДатаКон = '00010101', '39991231', КонецДня(УниверсальныйОтчет.ДатаКон)));
	мНовыйЗапрос.Выполнить();
	ДеревоПрицепы = мНовыйЗапрос.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТекстЗапросаПрицепы = "";
	
	//теперь дописываем к основному запросу эту ТЗ и соединяем с основной таблицей отчета
	Если ДеревоПрицепы.Строки.Количество() > 0 тогда
		Сч = 0;
		Для Каждого ТекСтрокаДерева Из ДеревоПрицепы.Строки Цикл
			ПрицепыПредставление = "";
			Для Каждого ТекСтрокаПрицеп Из ТекСтрокаДерева.Строки Цикл
				ПрицепыПредставление = ПрицепыПредставление + "; " + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаПрицеп.Прицеп, ТекСтрокаДерева.ПЛ.Организация);
			КонецЦикла;
			Если ПрицепыПредставление = "" Тогда
				Продолжить;
			Иначе
				ПрицепыПредставление = Сред(ПрицепыПредставление, 3);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстЗапросаПрицепы) Тогда
				ТекстЗапросаПрицепы = ТекстЗапросаПрицепы +
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|" ;
			КонецЕсли;
			
			ТекстЗапросаПрицепы_ =
			"ВЫБРАТЬ
			|	Ссылка КАК ПЛ,
			|	&ПЛПРИЦЕПЫ" + Сч + " КАК Прицепы";
			Если НЕ ЗначениеЗаполнено(ТекстЗапросаПрицепы) Тогда 
				ТекстЗапросаПрицепы_ = ТекстЗапросаПрицепы_ + "
				|ПОМЕСТИТЬ ТАБПРИЦЕПЫ";
			КонецЕсли;		
			ТекстЗапросаПрицепы_ = ТекстЗапросаПрицепы_ +	"
			|ИЗ
			|	Документ.уатПутевойЛист КАК ПутевойЛист
			|ГДЕ
			|	ПутевойЛист.Ссылка = &ПЛ" + Сч;
			
			//параметры
			УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПЛ" + Сч, ТекСтрокаДерева.ПЛ);
			УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ПЛПРИЦЕПЫ" + Сч, ПрицепыПредставление);
			
			ТекстЗапросаПрицепы = ТекстЗапросаПрицепы + ТекстЗапросаПрицепы_;
			
			Сч = Сч + 1;
		КонецЦикла;
	Иначе
		ТекстЗапросаПрицепы = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	NULL КАК ПЛ,
		|	"""" КАК Прицепы
		|ПОМЕСТИТЬ ТАБПРИЦЕПЫ
		|ИЗ 
		|	Документ.уатПутевойЛист";
	КонецЕсли;
	
	мТекстЗапросаПостроителя = УниверсальныйОтчет.ПостроительОтчета.Текст;
	
	мТекстЗапросаПостроителя = СтрЗаменить(мТекстЗапросаПостроителя, """"" КАК Прицепы", "ТАБПРИЦЕПЫ.Прицепы КАК Прицепы");
	мТекстЗапросаПостроителя = СтрЗаменить(мТекстЗапросаПостроителя, "//СОЕДИНЕНИЕ С ТАБЛИЦЕЙ ПРИЦЕПОВ", "ЛЕВОЕ СОЕДИНЕНИЕ
		|ТАБПРИЦЕПЫ КАК ТАБПРИЦЕПЫ
		|ПО уатПутевойЛист.Ссылка = ТАБПРИЦЕПЫ.ПЛ");
	
	НастройкиПостроителя = УниверсальныйОтчет.ПостроительОтчета.ПолучитьНастройки();
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапросаПрицепы + "
	| ;
	|///////////////////////////////////////// 
	|" + мТекстЗапросаПостроителя;
	
	УниверсальныйОтчет.ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);

	УниверсальныйОтчет.ПостроительОтчета.Текст = ПолучитьТекстОсновногоЗапроса();
	УниверсальныйОтчет.ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
