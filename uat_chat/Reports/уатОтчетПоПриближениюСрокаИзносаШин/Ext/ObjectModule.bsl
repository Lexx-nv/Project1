#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбщийПробег.СерияНоменклатуры КАК Шина,
	|	ОбщийПробег.СерияНоменклатуры.Модель КАК МодельШины,
	|	ШиныТС.СерияНоменклатуры.Модель.НормаПробега КАК НормаПробега,
	|	ШиныТС.МестоУстановки КАК ТекущееМестоУстановки,
	|	ВЫБОР
	|		КОГДА ОбщийПробег.ТС ЕСТЬ NULL 
	|			ТОГДА ""Начальный пробег""
	|		ИНАЧЕ ОбщийПробег.ТС
	|	КОНЕЦ КАК ТСПробега,
	|	ОбщийПробег.ПробегОборот КАК Пробег,
	|	ШиныТС.ТС КАК ТСТекущее,
	|	ОбщийПробег.СерияНоменклатуры.Модель.НормаПробега - ОбщийПробег.ПробегОборот КАК ПробегОсталось,
	|	ШиныТС.ТС.ГаражныйНомер КАК ТСТекущееГарНомер,
	|	ШиныТС.ТС.ГосударственныйНомер КАК ТСТекущееГосНомер,
	|	ОбщийПробег.ТС.ГосударственныйНомер КАК ТСПробегаГосНомер,
	|	ОбщийПробег.ТС.ГаражныйНомер КАК ТСПробегаГарНомер,
	|	1 КАК Количество
	|{ВЫБРАТЬ
	|	Шина.*,
	|	МодельШины.*,
	|	НормаПробега,
	|	ТекущееМестоУстановки.*,
	|	ТСПробега.*,
	|	Пробег,
	|	ТСТекущее.*,
	|	ПробегОсталось,
	|	ТСТекущееГарНомер,
	|	ТСТекущееГосНомер,
	|	ТСПробегаГосНомер,
	|	ТСПробегаГарНомер,
	|	Количество}
	|ИЗ
	|	РегистрНакопления.уатИзносПробегШин.Обороты(, &ДатаКон, , ) КАК ОбщийПробег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаКонца, СерияНоменклатуры.ТипАгрегата = ЗНАЧЕНИЕ(Справочник.уатТипыАгрегатов.Шина)) КАК ШиныТС
	|		ПО ОбщийПробег.СерияНоменклатуры = ШиныТС.СерияНоменклатуры
	|{ГДЕ
	|	ОбщийПробег.СерияНоменклатуры.*,
	|	ОбщийПробег.СерияНоменклатуры.Модель.*,
	|	ШиныТС.СерияНоменклатуры.Модель.НормаПробега,
	|	ШиныТС.МестоУстановки.*,
	|	(ВЫБОР
	|			КОГДА ОбщийПробег.ТС ЕСТЬ NULL 
	|				ТОГДА ""Начальный пробег""
	|			ИНАЧЕ ОбщийПробег.ТС
	|		КОНЕЦ).* КАК ТСПробега,
	|	ОбщийПробег.ПробегОборот,
	|	ШиныТС.ТС.* КАК ТСТекущее,
	|	(ОбщийПробег.СерияНоменклатуры.Модель.НормаПробега - ОбщийПробег.ПробегОборот) КАК ПробегОсталось,
	|	ШиныТС.ТС.ГаражныйНомер КАК ТСТекущееГарНомер,
	|	ШиныТС.ТС.ГосударственныйНомер КАК ТСТекущееГосНомер,
	|	ОбщийПробег.ТС.ГосударственныйНомер КАК ТСПробегаГосНомер,
	|	ОбщийПробег.ТС.ГаражныйНомер КАК ТСПробегаГарНомер,
	|	(ВЫБОР
	|			КОГДА ОбщийПробег.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА ОбщийПробег.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|{УПОРЯДОЧИТЬ ПО
	|	Шина.*,
	|	МодельШины.*,
	|	НормаПробега,
	|	ТекущееМестоУстановки.*,
	|	ТСПробега.*,
	|	Пробег,
	|	ТСТекущее.*,
	|	ПробегОсталось,
	|	ТСТекущееГарНомер,
	|	ТСТекущееГосНомер,
	|	ТСПробегаГосНомер,
	|	ТСПробегаГарНомер,
	|	Количество}
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА Шина ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(НормаПробега)
	|	КОНЕЦ КАК НормаПробега,
	|	ВЫБОР
	|		КОГДА Шина ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(Пробег)
	|	КОНЕЦ КАК Пробег,
	|	ВЫБОР
	|		КОГДА Шина ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ПробегОсталось)
	|	КОНЕЦ КАК ПробегОсталось,
	|	СУММА(Количество)
	|ПО
	|	Шина,
	|	МодельШины,
	|	ТекущееМестоУстановки,
	|	ТСПробега,
	|	ТСТекущее
	|{ИТОГИ ПО
	|	Шина.*,
	|	МодельШины.*,
	|	ТекущееМестоУстановки.*,
	|	ТСПробега.*,
	|	ТСТекущее.*,
	|	ТСТекущееГарНомер,
	|	ТСТекущееГосНомер,
	|	ТСПробегаГосНомер,
	|	ТСПробегаГарНомер}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСТекущее"            , "Текущее ТС (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСТекущееГарНомер"    , "Текущее ТС (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСТекущееГосНомер"    , "Текущее ТС (гос. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСПробега"            , "ТС пробега (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСПробегаГарНомер"    , "ТС пробега (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСПробегаГосНомер"    , "ТС пробега (гос. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МодельШины"           , "Модель шины");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НормаПробега"         , "Норма пробега, км");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТекущееМестоУстановки", "Текущее место установки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПробегОсталось"       , "Пробег осталось");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"				, "ТС выбыло");	
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТСТекущееГосНомер");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Шина");
	
	УниверсальныйОтчет.ДобавитьПоказатель("Количество"    , "Количество, шт"      , Истина,"ЧДЦ=3", );
	УниверсальныйОтчет.ДобавитьПоказатель("НормаПробега"  , "Норма пробега, км"   , Истина,"ЧДЦ=3", );
	УниверсальныйОтчет.ДобавитьПоказатель("Пробег"        , "Пробег, км"          , Истина,"ЧДЦ=3", );
	УниверсальныйОтчет.ДобавитьПоказатель("ПробегОсталось", "Осталось пробега, км", Истина,"ЧДЦ=3", );
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("ПробегОсталось", Истина, ВидСравнения.Меньше, 1000);
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло"		 , Истина, ВидСравнения.Равно , Ложь);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	//УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	//ПутьКДанным, Размещение = Неопределено, Положение = 3
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 1;
	
#КонецЕсли
