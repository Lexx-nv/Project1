#Если Клиент Тогда

Перем НП Экспорт; // Настройка периода отчета
Перем ВсегоАвтоднейВРаботе;
Перем ВсегоАвтоднейВХозяйстве;
Перем мсвТС;
// Параметры для выбора организации
//Перем ОсновнаяОрганизация Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	Текст =
	"ВЫБРАТЬ
	|	уатТС.Ссылка КАК ТС,
	|	уатТС.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатТС.Модель КАК Модель,
	|	уатТС.ТипТС КАК ТипТС,
	|	СУММА(ВремяВНарядеСекунды.КоличествоОборот)/3600 КАК ВремяВНаряде,
	|	СУММА(ВремяВРаботеСекунды.КоличествоОборот)/3600 КАК ВремяВРаботе,
	|	СУММА(ВложенныйЗапрос9.КоличествоОборот)/3600 КАК ВремяВРемонте,
	|	СУММА(ВложенныйЗапрос3.КоличествоОборот) КАК ПробегОбщий,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапрос4.КоличествоОборот ЕСТЬ NULL 
	|				ТОГДА ВложенныйЗапрос3.КоличествоОборот
	|			ИНАЧЕ ВложенныйЗапрос3.КоличествоОборот - ВложенныйЗапрос4.КоличествоОборот
	|		КОНЕЦ) КАК ПробегПорожний,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапрос3.КоличествоОборот = 0
	|					ИЛИ ВложенныйЗапрос3.КоличествоОборот = NULL
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВложенныйЗапрос4.КоличествоОборот ЕСТЬ NULL 
	|						ТОГДА ВложенныйЗапрос3.КоличествоОборот
	|					ИНАЧЕ ВложенныйЗапрос3.КоличествоОборот - ВложенныйЗапрос4.КоличествоОборот
	|				КОНЕЦ / ВложенныйЗапрос3.КоличествоОборот
	|		КОНЕЦ) КАК КПП,
	|	СУММА(ВложенныйЗапрос4.КоличествоОборот) КАК ПробегГруз,
	|	СУММА(ВложенныйЗапрос5.КоличествоОборот) КАК ВесГруза,
	|	СУММА(ВложенныйЗапрос6.КоличествоОборот) КАК ТнКм,
	|	СУММА(ВложенныйЗапрос7.КоличествоОборот) КАК КоличествоЕздок,
	|	СУММА(ВложенныйЗапрос8.РасходПоНормеОборот) КАК РасходПоНорме,
	|	СУММА(ВложенныйЗапрос8.РасходПоФактуОборот) КАК РасходПоФакту,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапрос8.РасходПоНормеОборот - ВложенныйЗапрос8.РасходПоФактуОборот > 0
	|				ТОГДА ВложенныйЗапрос8.РасходПоНормеОборот - ВложенныйЗапрос8.РасходПоФактуОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Экономия,
	|	СУММА(ВЫБОР
	|			КОГДА ВложенныйЗапрос8.РасходПоНормеОборот - ВложенныйЗапрос8.РасходПоФактуОборот > 0
	|				ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос8.РасходПоФактуОборот - ВложенныйЗапрос8.РасходПоНормеОборот
	|		КОНЕЦ) КАК Пережог,
	|	ВремяВНарядеСекунды.КоличествоОборот КАК ВремяВНарядеСек,
	|	ВремяВРаботеСекунды.КоличествоОборот КАК ВремяВРаботеСек,
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатТС.Ссылка = уатМестонахождениеТССрезПоследних.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.ТС КАК ТС,
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_ВремяВНаряде) КАК уатВыработкаТСОбороты) КАК ВремяВНарядеСекунды
	|		ПО уатТС.Ссылка = ВремяВНарядеСекунды.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.ТС КАК ТС,
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_ВремяВРаботе) КАК уатВыработкаТСОбороты) КАК ВремяВРаботеСекунды
	|		ПО уатТС.Ссылка = ВремяВРаботеСекунды.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.ТС КАК ТС,
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_ПробегОбщий) КАК уатВыработкаТСОбороты) КАК ВложенныйЗапрос3
	|		ПО уатТС.Ссылка = ВложенныйЗапрос3.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот,
	|			уатВыработкаТСОбороты.ТС КАК ТС
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_ПробегСГрузом) КАК уатВыработкаТСОбороты) КАК ВложенныйЗапрос4
	|		ПО уатТС.Ссылка = ВложенныйЗапрос4.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот,
	|			уатВыработкаТСОбороты.ТС КАК ТС
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_ВесГруза) КАК уатВыработкаТСОбороты) КАК ВложенныйЗапрос5
	|		ПО уатТС.Ссылка = ВложенныйЗапрос5.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот,
	|			уатВыработкаТСОбороты.ТС КАК ТС
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_ТнКм) КАК уатВыработкаТСОбороты) КАК ВложенныйЗапрос6
	|		ПО уатТС.Ссылка = ВложенныйЗапрос6.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот,
	|			уатВыработкаТСОбороты.ТС КАК ТС
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_КоличествоЕздок) КАК уатВыработкаТСОбороты) КАК ВложенныйЗапрос7
	|		ПО уатТС.Ссылка = ВложенныйЗапрос7.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатРасходГСМнаТСОбороты.ТС КАК ТС,
	|			уатРасходГСМнаТСОбороты.РасходПоНормеОборот КАК РасходПоНормеОборот,
	|			уатРасходГСМнаТСОбороты.РасходПоФактуОборот КАК РасходПоФактуОборот
	|		ИЗ
	|			РегистрНакопления.уатРасходГСМнаТС.Обороты(&ДатаНач, &ДатаКон, , ) КАК уатРасходГСМнаТСОбороты) КАК ВложенныйЗапрос8
	|		ПО уатТС.Ссылка = ВложенныйЗапрос8.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатВыработкаТСОбороты.КоличествоОборот КАК КоличествоОборот,
	|			уатВыработкаТСОбороты.ТС КАК ТС
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, , ПараметрВыработки = &ПараметрВыработки_ВремяВРемонте) КАК уатВыработкаТСОбороты) КАК ВложенныйЗапрос9
	|		ПО уатТС.Ссылка = ВложенныйЗапрос9.ТС
	|
	|{ГДЕ
	|	(ВЫБОР
	|			КОГДА уатТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|СГРУППИРОВАТЬ ПО
	|	уатТС.Модель,
	|	уатТС.Ссылка,
	|	уатТС.ГосударственныйНомер,
	|	ВремяВНарядеСекунды.КоличествоОборот,
	|	ВремяВРаботеСекунды.КоличествоОборот,
	|	уатМестонахождениеТССрезПоследних.Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна
	|ИТОГИ
	|	СУММА(ВремяВНаряде),
	|	СУММА(ВремяВРаботе),
	|	СУММА(ВремяВРемонте),
	|	СУММА(ПробегОбщий),
	|	ВЫБОР
	|		КОГДА СУММА(ПробегГруз) ЕСТЬ NULL 
	|				ИЛИ СУММА(ПробегГруз) = 0
	|			ТОГДА СУММА(ПробегОбщий)
	|		ИНАЧЕ СУММА(ПробегОбщий) - СУММА(ПробегГруз)
	|	КОНЕЦ КАК ПробегПорожний,
	|	ВЫБОР
	|		КОГДА СУММА(ПробегОбщий) = 0
	|				ИЛИ СУММА(ПробегОбщий) ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(ПробегГруз) ЕСТЬ NULL 
	|						ИЛИ СУММА(ПробегГруз) = 0
	|					ТОГДА СУММА(ПробегОбщий)
	|				ИНАЧЕ СУММА(ПробегОбщий) - СУММА(ПробегГруз)
	|			КОНЕЦ / СУММА(ПробегОбщий)
	|	КОНЕЦ КАК КПП,
	|	СУММА(ПробегГруз),
	|	СУММА(ВесГруза),
	|	СУММА(ТнКм),
	|	СУММА(КоличествоЕздок),
	|	СУММА(РасходПоНорме),
	|	СУММА(РасходПоФакту),
	|	СУММА(Экономия),
	|	СУММА(Пережог)
	|ПО
	|	ОБЩИЕ,
	|	Модель,
	|	ТипТС,
	|	Организация,
	|	Колонна";
	
	ПостроительОтчета.Текст = Текст;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	//заполняем поля отбора
	ПостроительОтчета.Отбор.Добавить("ТС").Использование = Ложь;
	
	ПостроительОтчета.Отбор.Добавить("Модель").Использование = Ложь;
	
	ПостроительОтчета.Отбор.Добавить("Колонна").Использование = Ложь;
	
	ПостроительОтчета.Отбор.Добавить("ТипТС").Использование = Ложь;
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	
	мОтборОрганизация 				= ПостроительОтчета.Отбор.Добавить("Организация");
	мОтборОрганизация.Значение 		= Организация;
	мОтборОрганизация.Использование = Истина;
	
	мОтборТСВыбыло	 				= ПостроительОтчета.Отбор.Добавить("ТСВыбыло");
	мОтборТСВыбыло.Представление    = "ТС выбыло";
	мОтборТСВыбыло.Использование	= Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)
	
	// Если итоги по счету не анализируются, берем общий
	//Если Выборка.Счет = NULL Тогда 
	//	РасшифровываемыйСчет = Счет;
	//	РасшифровываемыйСчетПредставление = Строка(Счет);
	//Иначе
	//	РасшифровываемыйСчет = Выборка.Счет;
	//	РасшифровываемыйСчетПредставление = Выборка.СчетПредставление;
	//КонецЕсли;
	
	//ПараметрыКарточкиСчета = Новый Соответствие;
	//
	//ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета"+ИмяРегистраБухгалтерии);
	
	//ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);
	
	//ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);
	
	//Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда
	
	//	Если ОтборСубконто <> Неопределено Тогда
	//		
	//		ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
	//		
	//		// Область должна содержать свою копию отбора по субконто
	//		ОтборРасшифровка = Новый Соответствие;
	//		
	//		Для каждого ЭлементОтбора Из ОтборСубконто Цикл
	//		
	//			ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	//		
	//		КонецЦикла; 
	//		
	//		ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
	//		
	//	КонецЕсли;
	
	//	СписокРасшифровки = Новый СписокЗначений;
	
	//	СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
	//	
	//ИначеЕсли Выборка.Группировка() = "Счет" Тогда
	
	//	СписокРасшифровки = Новый СписокЗначений;
	
	//	СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
	//Иначе
	//	СписокРасшифровки = Неопределено;
	//КонецЕсли;
	
	//Область.Параметры.Расшифровка = СписокРасшифровки;
	
КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
		
		ОписаниеПериода     = "Период: без ограничения.";
		
	Иначе
		
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
			+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;
	
	ТекстПроИтоги = "";
	
	ТекстПроИтоги = ТекстПроИтоги + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Группировки по " + ТекстПроИтоги;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	
	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;
	
	Возврат(ЗаголовокОтчета);
	
КонецФункции // СформироватьЗаголовок()

// Выводит показатели группировки
//
// Параметры:
//	Выборка - выборка
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	
	Если Выборка.Группировка() = "ГСМ" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.ГСМ ;
		Область.Параметры.РасшифровкаГруппировка =Выборка.ГСМ;	
	ИначеЕсли Выборка.Группировка() = "Модель" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Модель ;
		Область.Параметры.РасшифровкаГруппировка =Выборка.Модель;
	ИначеЕсли Выборка.Группировка() = "Колонна" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Колонна ;	
		Область.Параметры.РасшифровкаГруппировка =Выборка.Колонна
	ИначеЕсли Выборка.Группировка() = "Организация" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Организация ;	
		Область.Параметры.РасшифровкаГруппировка =Выборка.Организация
	ИначеЕсли Выборка.Группировка() = "ТипТС" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.ТипТС ;	
		Область.Параметры.РасшифровкаГруппировка =Выборка.ТипТС;
	ИначеЕсли Выборка.Группировка() = "ОБЩИЕ" Тогда
		Область = СтруктураПараметров.ОбластьИтоги;
		Область.Параметры.АвтоДниВРаботе = ВсегоАвтоднейВРаботе;
	Иначе	
		Область = СтруктураПараметров.ОбластьСтрока;
		Область.Параметры.ПредставлениеТС = уатОбщегоНазначения.уатПредставлениеТС(Выборка.ТС, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"));	
		Область.Параметры.Модель = Выборка.Модель ;
		Область.Параметры.РасшифровкаТС =Выборка.ТС;	
		Область.Параметры.РасшифровкаМодель = Выборка.Модель ;	
		СтруктураРасшифровки =  Новый Структура("ИмяОбъекта, ДатаНач, ДатаКон, Организация");
		СтруктураРасшифровки.Вставить("ИмяОбъекта", "уатРасшифровкаПоДокументам");
		СтруктураРасшифровки.Вставить("ДатаНач", ДатаНач);
		СтруктураРасшифровки.Вставить("ДатаКон", ДатаКон);
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ
		|ИЗ
		|(ВЫБРАТЬ
		|	уатВыработкаТСОбороты.Регистратор КАК Документ
		|ИЗ
		|	РегистрНакопления.уатВыработкаТС.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК уатВыработкаТСОбороты
		|ГДЕ
		|	уатВыработкаТСОбороты.ТС = &ТС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатРемонтныйЛист.Ссылка
		|ИЗ
		|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
		|ГДЕ
		|	уатРемонтныйЛист.Проведен
		|	И уатРемонтныйЛист.Дата МЕЖДУ &ДатаНач И &ДатаКонРЛ
		|	И уатРемонтныйЛист.ТС = &ТС) КАК ОснТабл";
		СтруктураРасшифровки.Вставить("ТекстЗапроса", ТекстЗапроса);
		СтруктураПараметровЗапроса = Новый Структура("ТС, ДатаНач, ДатаКон" );
		СтруктураПараметровЗапроса.Вставить("ДатаНач", ДатаНач);
		СтруктураПараметровЗапроса.Вставить("ДатаКон", ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон)));
		СтруктураПараметровЗапроса.Вставить("ДатаКонРЛ", ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон)));
		СтруктураПараметровЗапроса.Вставить("ТС", Выборка.ТС);
		СтруктураРасшифровки.Вставить("СтруктураПараметровЗапроса", СтруктураПараметровЗапроса);
		Область.Параметры.РасшифровкаПараметров = СтруктураРасшифровки;
		
		СтруктураРасшифровки =  Новый Структура("ИмяОбъекта, ДатаНач, ДатаКон, Организация");
		СтруктураРасшифровки.Вставить("ИмяОбъекта", "уатРасшифровкаПоДокументам");
		СтруктураРасшифровки.Вставить("ДатаНач", ДатаНач);
		СтруктураРасшифровки.Вставить("ДатаКон", ДатаКон);
		ТекстЗапроса =	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		              	|	уатРасходГСМнаТСОбороты.Регистратор КАК Документ
		              	|ИЗ
		              	|	РегистрНакопления.уатРасходГСМнаТС.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК уатРасходГСМнаТСОбороты
		              	|ГДЕ
		              	|	уатРасходГСМнаТСОбороты.ТС = &ТС";
		СтруктураРасшифровки.Вставить("ТекстЗапроса", ТекстЗапроса);
		СтруктураПараметровЗапроса = Новый Структура("ТС, ДатаНач, ДатаКон" );
		СтруктураПараметровЗапроса.Вставить("ДатаНач",ДатаНач);
		СтруктураПараметровЗапроса.Вставить("ДатаКон", ?(ДатаКон = '00010101', '39991231', КонецДня(ДатаКон)));
		СтруктураПараметровЗапроса.Вставить("ТС",Выборка.ТС);
		СтруктураРасшифровки.Вставить("СтруктураПараметровЗапроса", СтруктураПараметровЗапроса);
		Область.Параметры.РасшифровкаПараметровГСМ = СтруктураРасшифровки;
		
		//выведем дни в работе 
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	уатПутевойЛист.Ссылка,
		|	уатПутевойЛист.ДатаВыезда,
		|	уатПутевойЛист.ДатаВозвращения
		|ИЗ
		|	Документ.уатПутевойЛист КАК уатПутевойЛист
		|ГДЕ
		|	уатПутевойЛист.Проведен
		|	//УСЛОВИЕ_МЕНЬШЕ_КОНЦА
		|	И уатПутевойЛист.ДатаВозвращения >= &ДатаНач
		|	И уатПутевойЛист.ТранспортноеСредство = &ТС");
		Запрос.УстановитьПараметр("ТС", Выборка.ТС);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
		Если ДатаКон <> '00010101' Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УСЛОВИЕ_МЕНЬШЕ_КОНЦА", "И уатПутевойЛист.ДатаВыезда <= &ДатаКон");
		КонецЕсли;
		ВыборкаПЛ = Запрос.Выполнить().Выбрать(); Область.Параметры.АвтодниВРаботе = 0;
		
		мсвДат = Новый Массив();
		Пока ВыборкаПЛ.Следующий() Цикл
			ДатаНач_ = Макс(ДатаНач, ВыборкаПЛ.ДатаВыезда);
			ДатаКон_ = ?(ДатаКон = '00010101', ВыборкаПЛ.ДатаВозвращения, Мин(КонецДня(ДатаКон), ВыборкаПЛ.ДатаВозвращения));
			
			ТекДата_ = НачалоДня(ДатаНач_);
			Пока ТекДата_ <= НачалоДня(ДатаКон_) Цикл
				Если мсвДат.Найти(ТекДата_) = Неопределено Тогда
					мсвДат.Добавить(ТекДата_);
				КонецЕсли;
				
				ТекДата_ = ТекДата_ + 3600*24;
			КонецЦикла;
		КонецЦикла;
		АвтоДни_ = мсвДат.Количество();
		Область.Параметры.АвтодниВРаботе = АвтоДни_;
		ВсегоАвтоднейВРаботе = ВсегоАвтоднейВРаботе + АвтоДни_;
		
		Если мсвТС.Найти(Выборка.ТС) = Неопределено Тогда
			мсвТС.Добавить(Выборка.ТС);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл
		
		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
		
		Если ИмяПоказателя = "ВремяВНаряде" ИЛИ ИмяПоказателя = "ВремяВРаботе" ИЛИ ИмяПоказателя = "ВремяВРемонте" Тогда
			Область.Параметры[ИмяПоказателя] = уатОбщегоНазначения.уатФорматироватьВремяВОтчетах(Выборка[ИмяПоказателя], ФорматПоказателя);
		Иначе
			Область.Параметры[ИмяПоказателя] = Формат(Выборка[ИмяПоказателя], ФорматПоказателя);
		КонецЕсли;
		
	КонецЦикла;
	
	Область.Область("R1C2").Отступ = Макс(Выборка.Уровень() - 1, 0);
	
	Если Выборка.Группировка() = "ОБЩИЕ" Тогда
		ДокументРезультат.Вывести(СтруктураПараметров.ИтогиПодвал, Выборка.Уровень());
	КонецЕсли;	
	
	ДокументРезультат.Вывести(Область, Выборка.Уровень());
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит строки
//
// Параметры:
//	Выборка - выборка
//
Процедура ВывестиСтроки(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	Область = СтруктураПараметров.ОбластьСтрока;
	Пока Выборка.Следующий() Цикл
		
		ВывестиПоказатели(Выборка,СтруктураПараметров); 
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	ПоВалютам       - признак вывода валют и валютных сумм,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, СдвигУровня, 
	СброситьСдвигУровня, СтруктураПараметров)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "ГСМ" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено);
			
		ИначеЕсли Выборка.Группировка() = "Модель" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено)
			
		ИначеЕсли Выборка.Группировка() = "Колонна" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено)
			
		КонецЕсли;
		
		ВывестиПоказатели(Выборка, СтруктураПараметров);
		
		// Если есть следующая группировка, то выбираем ее
		~М1:	Если ИндексТекущейГруппировки + 1 < МассивГруппировок.Количество() Тогда
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
			ИндексТекущейГруппировки + 1, МассивГруппировок, СдвигУровня, 
			СброситьСдвигУровня, СтруктураПараметров);
		Иначе	//Для последней группировки выводим строку
			ВывестиСтроки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт
	
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		Возврат;
	КонецЕсли;
	
	Если ДатаНач = '00010101' Тогда
		ДатаНач = НачалоГода(ТекущаяДата());
	КонецЕсли;
	Если ДатаКон = '00010101' Тогда
		ДатаКон = КонецГода(ТекущаяДата());
	КонецЕсли;
	
	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));
	
	ВсегоАвтоднейВРаботе = 0;
	ВсегоАвтоднейВХозяйстве = 0;
	мсвТС = Новый Массив;
	
	ДокументРезультат.Очистить();
	
	Макет       = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	МассивГруппировок = Новый Массив;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
	КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	ФорматПоказателей = Новый Структура;
	
	МассивПоказателей.Добавить( "ВремяВНаряде");
	ФорматПоказателей.Вставить("ВремяВНаряде" ,"ЧЦ = 10 ; ЧДЦ = 2");
	
	МассивПоказателей.Добавить( "ВремяВРаботе");
	ФорматПоказателей.Вставить("ВремяВРаботе" ,"ЧЦ = 10 ; ЧДЦ = 2");
	
	МассивПоказателей.Добавить( "ВремяВРемонте");
	ФорматПоказателей.Вставить("ВремяВРемонте" ,"ЧЦ = 10 ; ЧДЦ = 2");
	
	МассивПоказателей.Добавить( "ПробегОбщий");
	ФорматПоказателей.Вставить("ПробегОбщий" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "ПробегПорожний");
	ФорматПоказателей.Вставить("ПробегПорожний" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "ПробегГруз");
	ФорматПоказателей.Вставить("ПробегГруз" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "КПП");
	ФорматПоказателей.Вставить("КПП" ,"ЧЦ = 5 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "ВесГруза");
	ФорматПоказателей.Вставить("ВесГруза" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "ТнКм");
	ФорматПоказателей.Вставить("ТнКм" ,"ЧЦ = 12 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "КоличествоЕздок");
	ФорматПоказателей.Вставить("КоличествоЕздок" ,"ЧЦ = 10 ; ЧДЦ = 0");
	
	МассивПоказателей.Добавить( "РасходПоНорме");
	ФорматПоказателей.Вставить("РасходПоНорме" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "РасходПоФакту");
	ФорматПоказателей.Вставить("РасходПоФакту" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "Экономия");
	ФорматПоказателей.Вставить("Экономия" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	МассивПоказателей.Добавить( "Пережог");
	ФорматПоказателей.Вставить("Пережог" ,"ЧЦ = 10 ; ЧДЦ = 3");
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
		
	ПостроительОтчета.Параметры.Вставить("_3600", 3600);
	ПостроительОтчета.Параметры.Вставить("_6000", 6000);
	
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_ВремяВНаряде", Справочники.уатПараметрыВыработки.ВремяВНаряде);
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_ВремяВРаботе", Справочники.уатПараметрыВыработки.ВремяВРаботе);
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_ВремяВРемонте", Справочники.уатПараметрыВыработки.ВремяВРемонте);
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_ПробегОбщий", Справочники.уатПараметрыВыработки.ПробегОбщий);
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_ПробегСГрузом", Справочники.уатПараметрыВыработки.ПробегСГрузом);
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_ВесГруза", Справочники.уатПараметрыВыработки.ВесГруза);
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_ТнКм", Справочники.уатПараметрыВыработки.ТнКм);
	ПостроительОтчета.Параметры.Вставить( "ПараметрВыработки_КоличествоЕздок", Справочники.уатПараметрыВыработки.КоличествоЕздок);
	
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
	
	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");;
	ОбластьИтогиГруппировки = Макет.ПолучитьОбласть("ИтогиГруппировки");;
	ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");;
	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрока",ОбластьСтрока);
	СтруктураПараметров.Вставить("ОбластьИтогиГруппировки",ОбластьИтогиГруппировки);
	СтруктураПараметров.Вставить("ОбластьИтоги",ОбластьИтоги);
	СтруктураПараметров.Вставить("ИтогиПодвал",ИтогиПодвал);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ФорматПоказателей", ФорматПоказателей);
	//СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
		0, МассивГруппировок, 
		СдвигУровня, СброситьСдвигУровня, 
		СтруктураПараметров);
	Иначе						
		ВывестиСтроки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров);
	КонецЕсли;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Выведем общие итоги
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если Выборка.Следующий() Тогда
		ВывестиПоказатели(Выборка, СтруктураПараметров);
	КонецЕсли;
	
	// Подвал
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ВсегоАвтоднейВХозяйстве = мсвТС.Количество()*(Цел((ДатаКон-ДатаНач)/24/3600) + 1);
	ОбластьПодвал.Параметры.ВсегоАвтодниВРаботе = ВсегоАвтоднейВРаботе;
	ОбластьПодвал.Параметры.ВсегоАвтодниВХозяйстве = ВсегоАвтоднейВХозяйстве;
	ОбластьПодвал.Параметры.КоэффициентИспользования = Формат(?(ВсегоАвтоднейВХозяйстве = 0, 0, ВсегоАвтоднейВРаботе/ВсегоАвтоднейВХозяйстве), "ЧЦ=5; ЧДЦ=3; ЧН=0");
	ДокументРезультат.Вывести(ОбластьПодвал);
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ВедомостьТЭП";
	ДокументРезультат.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);

КонецПроцедуры // СформироватьОтчет()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	ЗаполнитьНачальныеНастройки();
	
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает заголовок отчета в виде строки
//
//Возвращаемое значение:
//	Строка заголовка
//
Функция ЗаголовокОтчета() Экспорт
	Возврат "Ведомость ТЭП";	
КонецФункции // ЗаголовокОтчета()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

НП = Новый НастройкаПериода;
Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

#КонецЕсли

