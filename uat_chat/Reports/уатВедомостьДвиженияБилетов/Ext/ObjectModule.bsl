#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
    "ВЫБРАТЬ
    |	уатБилетыНаСкладахОстаткиИОбороты.Период КАК Период,
    |	НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ДЕНЬ) КАК ПериодДень,
    |	НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, НЕДЕЛЯ) КАК ПериодНеделя,
    |	НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ДЕКАДА) КАК ПериодДекада,
    |	НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, МЕСЯЦ) КАК ПериодМесяц,
    |	НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, КВАРТАЛ) КАК ПериодКвартал,
    |	НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
    |	НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ГОД) КАК ПериодГод,
    |	уатБилетыНаСкладахОстаткиИОбороты.Регистратор КАК Регистратор,
    |	уатБилетыНаСкладахОстаткиИОбороты.Билет КАК Билет,
    |	уатБилетыНаСкладахОстаткиИОбороты.Склад КАК Склад,
    |	уатБилетыНаСкладахОстаткиИОбороты.Партия КАК Партия,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
    |{ВЫБРАТЬ
    |	Период,
    |	ПериодДень,
    |	ПериодНеделя,
    |	ПериодДекада,
    |	ПериодМесяц,
    |	ПериодКвартал,
    |	ПериодПолугодие,
    |	ПериодГод,
    |	Регистратор.*,
    |	Билет.*,
    |	Склад.*,
    |	Партия.*,
    |	КоличествоНачальныйОстаток,
    |	КоличествоПриход,
    |	КоличествоРасход,
    |	КоличествоКонечныйОстаток}
    |ИЗ
    |	РегистрНакопления.уатБилетыНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, Регистратор, , ) КАК уатБилетыНаСкладахОстаткиИОбороты
    |{ГДЕ
    |	уатБилетыНаСкладахОстаткиИОбороты.Период,
    |	(НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ДЕНЬ)) КАК ПериодДень,
    |	(НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
    |	(НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ДЕКАДА)) КАК ПериодДекада,
    |	(НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, МЕСЯЦ)) КАК ПериодМесяц,
    |	(НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, КВАРТАЛ)) КАК ПериодКвартал,
    |	(НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
    |	(НАЧАЛОПЕРИОДА(уатБилетыНаСкладахОстаткиИОбороты.Период, ГОД)) КАК ПериодГод,
    |	уатБилетыНаСкладахОстаткиИОбороты.Регистратор.*,
    |	уатБилетыНаСкладахОстаткиИОбороты.Билет.*,
    |	уатБилетыНаСкладахОстаткиИОбороты.Склад.*,
    |	уатБилетыНаСкладахОстаткиИОбороты.Партия.*,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоПриход,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоРасход,
    |	уатБилетыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток}
    |{УПОРЯДОЧИТЬ ПО
    |	Период,
    |	ПериодДень,
    |	ПериодНеделя,
    |	ПериодДекада,
    |	ПериодМесяц,
    |	ПериодКвартал,
    |	ПериодПолугодие,
    |	ПериодГод,
    |	Регистратор.*,
    |	Билет.*,
    |	Склад.*,
    |	Партия.*,
    |	КоличествоНачальныйОстаток,
    |	КоличествоПриход,
    |	КоличествоРасход,
    |	КоличествоКонечныйОстаток}
    |ИТОГИ
    |	СУММА(КоличествоНачальныйОстаток),
    |	СУММА(КоличествоПриход),
    |	СУММА(КоличествоРасход),
    |	СУММА(КоличествоКонечныйОстаток)
    |ПО
	|	Склад,
	|	Билет
    |{ИТОГИ ПО
    |	Период,
    |	ПериодДень,
    |	ПериодНеделя,
    |	ПериодДекада,
    |	ПериодМесяц,
    |	ПериодКвартал,
    |	ПериодПолугодие,
    |	ПериодГод,
    |	Регистратор.*,
    |	Билет.*,
    |	Склад.*,
    |	Партия.*}";
	
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Склад");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Билет");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Партия");
	
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоНачальныйОстаток", "Количество", Истина, , "НачальныйОстаток", "Начальный остаток");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоПриход"          , "Количество", Истина, , "Приход", "Приход");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоРасход"          , "Количество", Истина, , "Расход", "Расход");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоКонечныйОстаток" , "Количество", Истина, , "КонечныйОстаток", "Конечный остаток");
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
		
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("Склад");
	УниверсальныйОтчет.ДобавитьОтбор("Билет");
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Билет.ВидБилета", ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Билет.Серия", ТипРазмещенияРеквизитовИзмерений.Отдельно);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Билет.Цена", ТипРазмещенияРеквизитовИзмерений.Отдельно);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
