#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Истина;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	УниверсальныйОтчет.ПостроительОтчета.Текст = 
	"ВЫБРАТЬ
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.Период КАК Дата,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ТС КАК ТС,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ТипСобытия КАК ТипСобытия,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ДлительностьСобытия КАК ДлительностьСобытия,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.Значение КАК Значение,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ПредельноеЗначение КАК ПредельноеЗначение
	|{ВЫБРАТЬ
	|	Дата,
	|	ТС.*,
	|	ТипСобытия.*,
	|	ДлительностьСобытия,
	|	Значение,
	|	ПредельноеЗначение}
	|ИЗ
	|	РегистрСведений.уатДополнительныеСведенияПоOmnicomm.СрезПоследних(&ДатаКонца, ) КАК уатДополнительныеСведенияПоOmnicommСрезПоследних
	|{ГДЕ
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.Период,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ТС.*,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ТипСобытия.*,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ДлительностьСобытия,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.Значение,
	|	уатДополнительныеСведенияПоOmnicommСрезПоследних.ПредельноеЗначение,
	|	(ВЫБОР
	|			КОГДА уатДополнительныеСведенияПоOmnicommСрезПоследних.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатДополнительныеСведенияПоOmnicommСрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|{УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ТС.*,
	|	ТипСобытия.*,
	|	ДлительностьСобытия,
	|	Значение,
	|	ПредельноеЗначение}
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА ТипСобытия ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ МАКСИМУМ(Дата)
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА ТипСобытия ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ МАКСИМУМ(ДлительностьСобытия)
	|	КОНЕЦ КАК ДлительностьСобытия,
	|	ВЫБОР
	|		КОГДА ТипСобытия ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ МАКСИМУМ(Значение)
	|	КОНЕЦ КАК Значение,
	|	ВЫБОР
	|		КОГДА ТипСобытия ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ МАКСИМУМ(ПредельноеЗначение)
	|	КОНЕЦ КАК ПредельноеЗначение
	|ПО
	|	ТС,
	|	ТипСобытия
	|{ИТОГИ ПО
	|	Дата,
	|	ТС.*,
	|	ТипСобытия.*}";
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипСобытия" 			, "Тип cобытия");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДлительностьСобытия" 	, "Длительность cобытия");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПредельноеЗначение"	, "Предельное значение");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"				, "ТС выбыло");	
	
	УниверсальныйОтчет.ДобавитьПоказатель("Дата"			   , "Дата"				   , Истина,,);
	УниверсальныйОтчет.ДобавитьПоказатель("ДлительностьСобытия", "Длительность события", Истина,, );
	УниверсальныйОтчет.ДобавитьПоказатель("Значение"		   , "Значение"			   , Истина,"ЧДЦ=3",);
	УниверсальныйОтчет.ДобавитьПоказатель("ПредельноеЗначение" , "Предельное значение" , Истина,"ЧДЦ=3",);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТипСобытия");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("ТС");
	УниверсальныйОтчет.ДобавитьОтбор("ТипСобытия");
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло", Истина, ВидСравнения.Равно, Ложь);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);

КонецПроцедуры // СформироватьОтчет()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал,
//	6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
 УниверсальныйОтчет.мРежимВводаПериода = 1;


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ
	
#КонецЕсли
