#Если Клиент Тогда

Перем НП Экспорт; // Настройка периода
// Параметры для выбора организации
//Перем ОсновнаяОрганизация Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоТО.ТС,
	|	ДанныеПоТО.ПараметрВыработки,
	|	ДанныеПоТО.Допуск,
	|	ДанныеПоТО.ТС.Модель КАК Модель,
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	ДанныеПоТО.ВидТО,
	|	ДанныеПоТО.Норма,
	|	ДанныеПоТО.ПериодичностьОбслуживания,
	|	ДанныеПоТО.КоличествоПериодов,
	|	ДанныеПоТО.ВыработкаПослеТО,
	|	ДанныеПоТО.Осталось,
	|	ДанныеПоТО.Выработка + ВЫБОР
	|		КОГДА ДанныеПоТО.ТС.Модель.НаличиеСпидометра И ДанныеПоТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) ИЛИ (НЕ ДанныеПоТО.ТС.Модель.НаличиеСпидометра) И ДанныеПоТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА ДанныеПоТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выработка,
	|	ДанныеПоТО.ВыработкаПоследнегоТО,
	|	ЕСТЬNULL(ДанныеПоТО.ДатаПоследнегоТО, ДанныеПоТО.ТС.ДатаВводаВЭксплуатацию) КАК ДатаТО,
	|	ЕСТЬNULL(уатВыработкаОборотыПериод.Период, ДанныеПоТО.ТС.ДатаВводаВЭксплуатацию) КАК ДатаРаботы
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НормыТО.ТС КАК ТС,
	|		ВЫБОР
	|			КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|						ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|					ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|				КОНЕЦ
	|		КОНЕЦ КАК Выработка,
	|		ВЫБОР
	|			КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|						ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|					ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|				КОНЕЦ
	|		КОНЕЦ КАК ВыработкаПоследнегоТО,
	|		ВЫБОР
	|			КОГДА НормыТО.ТС.Модель.НаличиеСпидометра И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) ИЛИ (НЕ НормыТО.ТС.Модель.НаличиеСпидометра) И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|				ТОГДА НормыТО.НачальныйПробег
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НачальныйПробег,
	|		НормыТО.ПараметрВыработки КАК ПараметрВыработки,
	|		НормыТО.ЗначениеПараметраВыработки КАК Норма,
	|		НормыТО.Допуск КАК Допуск,
	|		НормыТО.ВидОбслуживания КАК ВидТО,
	|		уатПрохождениеТОСрезПоследних.Период КАК ДатаПоследнегоТО,
	|		НормыТО.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|		НормыТО.КоличествоПериодов КАК КоличествоПериодов,
	|		ВЫБОР
	|			КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|						ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|					ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|				КОНЕЦ
	|		КОНЕЦ + ВЫБОР
	|			КОГДА НормыТО.ТС.Модель.НаличиеСпидометра И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) ИЛИ (НЕ НормыТО.ТС.Модель.НаличиеСпидометра) И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|				ТОГДА НормыТО.НачальныйПробег
	|			ИНАЧЕ 0
	|		КОНЕЦ - ВЫБОР
	|			КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|						ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|					ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|				КОНЕЦ
	|		КОНЕЦ КАК ВыработкаПослеТО,
	|		НормыТО.ЗначениеПараметраВыработки - (ВЫБОР
	|			КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|						ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|					ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|				КОНЕЦ
	|		КОНЕЦ + ВЫБОР
	|			КОГДА НормыТО.ТС.Модель.НаличиеСпидометра И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) ИЛИ (НЕ НормыТО.ТС.Модель.НаличиеСпидометра) И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|				ТОГДА НормыТО.НачальныйПробег
	|			ИНАЧЕ 0
	|		КОНЕЦ - ВЫБОР
	|			КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатВыработкаОбороты.ПараметрВыработки.Временный
	|						ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|					ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|				КОНЕЦ
	|		КОНЕЦ) КАК Осталось
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания,
	|			уатМоделиТСНормативыОбслуживания.ПараметрВыработки КАК ПараметрВыработки,
	|			ВЫБОР
	|				КОГДА уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки
	|			КОНЕЦ КАК ЗначениеПараметраВыработки,
	|			уатМоделиТСНормативыОбслуживания.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|			ВЫБОР
	|				КОГДА уатМоделиТСНормативыОбслуживания.КоличествоПериодов ЕСТЬ NULL 
	|						ИЛИ уатМоделиТСНормативыОбслуживания.КоличествоПериодов = 0
	|					ТОГДА 1
	|				ИНАЧЕ 1 / уатМоделиТСНормативыОбслуживания.КоличествоПериодов
	|			КОНЕЦ КАК ПродолжительностьПериода,
	|			ВЫБОР
	|				КОГДА уатМоделиТСНормативыОбслуживания.КоличествоПериодов ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ уатМоделиТСНормативыОбслуживания.КоличествоПериодов
	|			КОНЕЦ КАК КоличествоПериодов,
	|			ВЫБОР
	|				КОГДА уатМоделиТСНормативыОбслуживания.Допуск ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ уатМоделиТСНормативыОбслуживания.Допуск
	|			КОНЕЦ КАК Допуск,
	|			уатТС.Ссылка КАК ТС,
	|			уатТС.НачальныйПробег КАК НачальныйПробег,
	|			уатТС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию
	|		ИЗ
	|			Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|				ПО (уатТС.Модель = уатМоделиТСНормативыОбслуживания.Ссылка)) КАК НормыТО
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(&ДатаКон, ) КАК уатПрохождениеТОСрезПоследних
	|			ПО НормыТО.ВидОбслуживания = уатПрохождениеТОСрезПоследних.ВидТО
	|				И НормыТО.ТС = уатПрохождениеТОСрезПоследних.ТС
	|				И НормыТО.ПараметрВыработки = уатПрохождениеТОСрезПоследних.ПараметрВыработки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(, &ДатаКон, , ) КАК уатВыработкаОбороты
	|			ПО НормыТО.ПараметрВыработки = уатВыработкаОбороты.ПараметрВыработки
	|				И НормыТО.ТС = уатВыработкаОбороты.ТС
	|	ГДЕ
	|		(НормыТО.ЗначениеПараметраВыработки <> 0
	|					И ВЫБОР
	|						КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL 
	|								И уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL 
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL 
	|									ТОГДА -уатПрохождениеТОСрезПоследних.Выработка
	|								ИНАЧЕ ВЫБОР
	|										КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL 
	|											ТОГДА ВЫБОР
	|													КОГДА НормыТО.ПараметрВыработки.Временный
	|														ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|													ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|												КОНЕЦ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА НормыТО.ПараметрВыработки.Временный
	|													ТОГДА уатВыработкаОбороты.КоличествоОборот / 3600
	|												ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|											КОНЕЦ - ВЫБОР
	|												КОГДА уатПрохождениеТОСрезПоследних.ПараметрВыработки.Временный
	|													ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|												ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ >= НормыТО.ЗначениеПараметраВыработки - НормыТО.Допуск - ВЫБОР
	|						КОГДА НормыТО.ТС.Модель.НаличиеСпидометра И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) ИЛИ (НЕ НормыТО.ТС.Модель.НаличиеСпидометра) И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|							ТОГДА НормыТО.НачальныйПробег
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|				ИЛИ НормыТО.ЗначениеПараметраВыработки = 0
	|					И ВЫБОР
	|						КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьГод
	|							ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ГОД, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|						ИНАЧЕ ВЫБОР
	|								КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьКвартал
	|									ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), КВАРТАЛ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|								ИНАЧЕ ВЫБОР
	|										КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьМесяц
	|											ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), МЕСЯЦ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|										ИНАЧЕ ВЫБОР
	|												КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьНеделя
	|													ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), НЕДЕЛЯ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|												ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ДЕНЬ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ < &ДатаКон)) КАК ДанныеПоТО
	
	
	
	
	
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаКон, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО ДанныеПоТО.ТС = уатМестонахождениеТССрезПоследних.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВыработкаОборотыПериод.ТС КАК ТС,
	|			МАКСИМУМ(ВыработкаОборотыПериод.Период) КАК Период
	|		ИЗ
	|			РегистрНакопления.уатВыработкаТС.Обороты(, &ДатаКон, Регистратор, ) КАК ВыработкаОборотыПериод
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВыработкаОборотыПериод.ТС) КАК уатВыработкаОборотыПериод
	|		ПО ДанныеПоТО.ТС = уатВыработкаОборотыПериод.ТС
	|{ГДЕ
	|	(ВЫБОР
	|			КОГДА ДанныеПоТО.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА ДанныеПоТО.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|ИТОГИ ПО
	|	Модель,
	|	Колонна,
	|	ВидТО
	|{ИТОГИ ПО
	|	Модель,
	|	Колонна,
	|	ВидТО}";
	
	ПостроительОтчета.Текст = Текст;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	//заполняем поля отбора
	ПостроительОтчета.Отбор.Добавить("ТС").Использование = Ложь;
	ПостроительОтчета.Отбор.Добавить("ВидТО").Использование = Ложь;
	ПостроительОтчета.Отбор.Добавить("Модель").Использование = Ложь;
	ПостроительОтчета.Отбор.Добавить("Колонна").Использование = Ложь;
	//	ПостроительОтчета.Отбор.Добавить("ТипТС").Использование = Ложь;
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт
	
	Если ДатаКон = '00010101' Тогда
		Предупреждение("Не указана дата отчета!", 5);
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	Макет       = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	МассивГруппировок = Новый Массив;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
	КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	ФорматПоказателей = Новый Структура;
	
	МассивПоказателей.Добавить( "Выработка");
	ФорматПоказателей.Вставить("Выработка" , "ЧЦ = 10 ; ЧДЦ = 1");
	
	МассивПоказателей.Добавить( "ВыработкаПослеТО");
	ФорматПоказателей.Вставить("ВыработкаПослеТО" ,"ЧЦ = 10 ; ЧДЦ = 1");
	
	МассивПоказателей.Добавить( "Норма");
	ФорматПоказателей.Вставить("Норма" ,"ЧЦ = 10 ; ЧДЦ = 1");
	
	МассивПоказателей.Добавить( "Допуск");
	ФорматПоказателей.Вставить("Допуск" ,"ЧЦ = 10 ; ЧДЦ = 1");
	
	МассивПоказателей.Добавить( "Осталось");
	ФорматПоказателей.Вставить("Осталось", "ЧЦ = 10 ; ЧДЦ = 1");
	
	МассивПоказателей.Добавить( "ДатаТО");
	ФорматПоказателей.Вставить("ДатаТО" ,"ДЛФ=Д");
	
	
	СписокТО = Новый СписокЗначений();
	Для каждого стр из СписокВидовТО Цикл
		Если Стр.Пометка Тогда
			СписокТО.Добавить(Стр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокТО.Количество() = 0 Тогда
		Сообщить("Ни один вид ТО не выбран.");
		Возврат;
	КонецЕСли;
	
	мОтбор = ПостроительОтчета.Отбор.Найти("ВидТО");
	Если мОтбор = Неопределено Тогда
		мОтбор = ПостроительОтчета.Отбор.Добавить("ВидТО");
	КонецЕсли;
	мОтбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
	мОтбор.Значение = СписокТО;
	мОтбор.Использование = Истина;
	
	мОтбор = ПостроительОтчета.Отбор.Найти("ТС");
	Если мОтбор = Неопределено Тогда
		мОтбор 			= ПостроительОтчета.Отбор.Добавить("ТС");
	КонецЕсли;	
	мОтбор.Значение 		= ТС;
	мОтбор.Использование = Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТС);
 
	ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	ПостроительОтчета.Параметры.Вставить("ПериодичностьГод", Перечисления.Периодичность.Год);
	ПостроительОтчета.Параметры.Вставить("ПериодичностьКвартал", Перечисления.Периодичность.Квартал);
	ПостроительОтчета.Параметры.Вставить("ПериодичностьМесяц", Перечисления.Периодичность.Месяц);
	ПостроительОтчета.Параметры.Вставить("ПериодичностьНеделя", Перечисления.Периодичность.Неделя);
	ПостроительОтчета.Параметры.Вставить("ПериодичностьДень", Перечисления.Периодичность.День);
		
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
	
	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьИтогиГруппировки = Макет.ПолучитьОбласть("ИтогиГруппировки");;
	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрока",ОбластьСтрока);
	СтруктураПараметров.Вставить("ОбластьИтогиГруппировки",ОбластьИтогиГруппировки);
	СтруктураПараметров.Вставить("ИтогиПодвал",ИтогиПодвал);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ФорматПоказателей", ФорматПоказателей);
	//СтруктураПараметров.Вставить("НетЛинии", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
		0, МассивГруппировок, 
		СдвигУровня, СброситьСдвигУровня, 
		СтруктураПараметров);
	Иначе						
		ВывестиСтроки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров);
	КонецЕсли;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	//// Выведем общие итоги
	//Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Выборка.Следующий();
	//ВывестиПоказатели(Выборка,СтруктураПараметров);
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ОтчетПриближениеСроковТО";
	ДокументРезультат.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);

КонецПроцедуры // СформироватьОтчет()

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)
	
	// Если итоги по счету не анализируются, берем общий
	//Если Выборка.Счет = NULL Тогда 
	//	РасшифровываемыйСчет = Счет;
	//	РасшифровываемыйСчетПредставление = Строка(Счет);
	//Иначе
	//	РасшифровываемыйСчет = Выборка.Счет;
	//	РасшифровываемыйСчетПредставление = Выборка.СчетПредставление;
	//КонецЕсли;
	
	//ПараметрыКарточкиСчета = Новый Соответствие;
	//
	//ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", "КарточкаСчета"+ИмяРегистраБухгалтерии);
	
	//ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);
	
	//ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);
	
	//Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда
	
	//	Если ОтборСубконто <> Неопределено Тогда
	//		
	//		ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
	//		
	//		// Область должна содержать свою копию отбора по субконто
	//		ОтборРасшифровка = Новый Соответствие;
	//		
	//		Для каждого ЭлементОтбора Из ОтборСубконто Цикл
	//		
	//			ОтборРасшифровка.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	//		
	//		КонецЦикла; 
	//		
	//		ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
	//		
	//	КонецЕсли;
	
	//	СписокРасшифровки = Новый СписокЗначений;
	
	//	СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
	//	
	//ИначеЕсли Выборка.Группировка() = "Счет" Тогда
	
	//	СписокРасшифровки = Новый СписокЗначений;
	
	//	СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, "Карточка счета " + РасшифровываемыйСчетПредставление);
	//Иначе
	//	СписокРасшифровки = Неопределено;
	//КонецЕсли;
	
	//Область.Параметры.Расшифровка = СписокРасшифровки;
	
КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт
	
	ОписаниеПериода = Формат(ДатаКон, "ДФ = дд.ММ.гггг");
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;
	
	ТекстПроИтоги = "";
	
	ТекстПроИтоги = ТекстПроИтоги + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Группировки по " + ТекстПроИтоги;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	
	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;
	
	Возврат(ЗаголовокОтчета);
	
КонецФункции // СформироватьЗаголовок()

// Выводит показатели группировки
//
// Параметры:
//	Выборка - выборка
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	
	Если Выборка.Группировка() = "Модель" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Модель;
		Область.Параметры.РасшифровкаГруппировка = Выборка.Модель;
	ИначеЕсли Выборка.Группировка() = "ВидТО" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.ВидТО;
		Область.Параметры.РасшифровкаГруппировка = Выборка.ВидТО;
	ИначеЕсли Выборка.Группировка() = "Колонна" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Колонна;
		Область.Параметры.РасшифровкаГруппировка = Выборка.Колонна;
	Иначе
		Область = СтруктураПараметров.ОбластьСтрока;
		Область.Параметры.ПредставлениеТС = уатОбщегоНазначения.уатПредставлениеТС(Выборка.ТС, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"));	
		Область.Параметры.ТС = Выборка.ТС;
		Область.Параметры.Модель = Выборка.Модель;
		Область.Параметры.ВидТО = Выборка.ВидТО;
		Область.Параметры.ПараметрВыработки = Выборка.ПараметрВыработки;
		Область.Параметры.Выработка = Выборка.Выработка;
		Область.Параметры.ДатаТО = Выборка.ДатаТО;
		Область.Параметры.ВыработкаПослеТО = Выборка.ВыработкаПослеТО;
		Область.Параметры.Норма = Выборка.Норма;
		Область.Параметры.Допуск = Выборка.Допуск;
		Область.Параметры.Осталось = Выборка.Осталось;
		Если Выборка.ДатаТО = '00010101' Тогда
			Область.Параметры.ПлановаяДатаТО = "-------";
			Область.Параметры.ОсталосьДней = "-------";
		Иначе	
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.ПараметрВыработки) Тогда
				Если Выборка.ПериодичностьОбслуживания = Перечисления.Периодичность.Неделя Тогда
					тПлановаяДатаТО = Выборка.ДатаТО + 86400 * 7 * Выборка.КоличествоПериодов;
				ИначеЕсли Выборка.ПериодичностьОбслуживания = Перечисления.Периодичность.Месяц Тогда
					тПлановаяДатаТО = ДобавитьМесяц(Выборка.ДатаТО, Выборка.КоличествоПериодов);
				ИначеЕсли Выборка.ПериодичностьОбслуживания = Перечисления.Периодичность.Квартал Тогда
					тПлановаяДатаТО = ДобавитьМесяц(Выборка.ДатаТО, 3 * Выборка.КоличествоПериодов);
				ИначеЕсли Выборка.ПериодичностьОбслуживания = Перечисления.Периодичность.Год Тогда
					тПлановаяДатаТО = ДобавитьМесяц(Выборка.ДатаТО, 12 * Выборка.КоличествоПериодов);
				Иначе
					тПлановаяДатаТО = Выборка.ДатаТО + 86400 * Выборка.КоличествоПериодов;
				КонецЕсли;
				Область.Параметры.Осталось = "-------";
				Область.Параметры.ПлановаяДатаТО = тПлановаяДатаТО;
				Область.Параметры.ОсталосьДней = (НачалоДня(тПлановаяДатаТО) - НачалоДня(ДатаКон))/86400;
			Иначе
				тКолвоДней = (НачалоДня(Выборка.ДатаРаботы) - НачалоДня(Выборка.ДатаТО))/86400;
				тСрПробег = ?(тКолвоДней = 0, 0, Выборка.ВыработкаПослеТО/тКолвоДней);
				тПланДата = НачалоДня(Выборка.ДатаТО) + ?(тСрПробег = 0, 0, Выборка.Норма / тСрПробег * 86400);
				Область.Параметры.ПлановаяДатаТО = тПланДата;
				Область.Параметры.ОсталосьДней = (НачалоДня(тПланДата) - НачалоДня(ДатаКон))/86400;
			КонецЕсли;
			
			//Если тКолвоДней > 0 и Выборка.ВыработкаПослеТО > 0 и Выборка.Осталось > 0 Тогда
			//	тСрПробег = Выборка.ВыработкаПослеТО / тКолвоДней;
			//	тПланДата = НачалоДня(ДатаКон) + Выборка.Осталось/тСрПробег*86400;
			//Иначе
			//	тПланДата = '00010101';
			//КонецЕсли;	
			//Если тПланДата = '00010101' и тДатаТОПериод = '00010101' Тогда
			//	Область.Параметры.ПлановаяДатаТО = "-------";
			//	ОсталосьДней_ = 
			//ИначеЕсли тПланДата = '00010101' Тогда
			//	Область.Параметры.ПлановаяДатаТО = Формат(тДатаТОПериод, "ДЛФ=Д");
			//	ОсталосьДней_ = тДатаТОПериод;
			//ИначеЕсли тДатаТОПериод = '00010101' Тогда
			//	Область.Параметры.ПлановаяДатаТО = Формат(тПланДата, "ДЛФ=Д");
			//	ОсталосьДней_ = тПланДата;
			//Иначе	
			//	Область.Параметры.ПлановаяДатаТО = Формат(?(тПланДата < тДатаТОПериод,тПланДата,тДатаТОПериод), "ДЛФ=Д");
			//	ОсталосьДней_ = (?(тПланДата < тДатаТОПериод, тПланДата, тДатаТОПериод) - НачалоДня(ДатаКон))/86400;
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл
		
		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
		Область.Параметры[ИмяПоказателя]  = Формат(Выборка[ИмяПоказателя], ФорматПоказателя);
		
	КонецЦикла;
	
	Область.Область("R1C2").Отступ = Макс(Выборка.Уровень() - 1, 0);
	
	ДокументРезультат.Вывести(Область, Выборка.Уровень());
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит строки
//
// Параметры:
//	Выборка - выборка
//
Процедура ВывестиСтроки(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	Область = СтруктураПараметров.ОбластьСтрока;
	Пока Выборка.Следующий() Цикл
		
		ВывестиПоказатели(Выборка,СтруктураПараметров); 
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	ПоВалютам       - признак вывода валют и валютных сумм,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, СдвигУровня, 
	СброситьСдвигУровня, СтруктураПараметров)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "ГСМ" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено);
			
		ИначеЕсли Выборка.Группировка() = "Модель" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено)
			
		ИначеЕсли Выборка.Группировка() = "Колонна" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено)
			
		КонецЕсли;
		
		ВывестиПоказатели(Выборка, СтруктураПараметров);
		
		// Если есть следующая группировка, то выбираем ее
		~М1:	Если ИндексТекущейГруппировки + 1 < МассивГруппировок.Количество() Тогда
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
			ИндексТекущейГруппировки + 1, МассивГруппировок, СдвигУровня, 
			СброситьСдвигУровня, СтруктураПараметров);
		Иначе	//Для последней группировки выводим строку
			ВывестиСтроки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	Организация = Параметры["Организация"];
	ДатаКон = Параметры["ДатаКон"];
	
	ЗаполнитьНачальныеНастройки();
	
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает заголовок отчета в виде строки
//
//Возвращаемое значение:
//	Строка заголовка
//
Функция ЗаголовокОтчета() Экспорт
	Возврат "Приближение срока ТО";	
КонецФункции // ЗаголовокОтчета()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

НП = Новый НастройкаПериода;
Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

#КонецЕсли