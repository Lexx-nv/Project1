#Если Клиент Тогда
	
Перем НП Экспорт; // Настройка периода отчета

	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
		
	Текст = 
	"ВЫБРАТЬ
	|	уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор.ДатаВыезда КАК ДатаВыезда,
	|	уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор),
	|	уатОстаткиГСМнаТСОстаткиИОбороты.ТС КАК ТС,
	|	ПРЕДСТАВЛЕНИЕ(уатОстаткиГСМнаТСОстаткиИОбороты.ТС),
	|	уатОстаткиГСМнаТСОстаткиИОбороты.ГСМ КАК ГСМ,
	|	ПРЕДСТАВЛЕНИЕ(уатОстаткиГСМнаТСОстаткиИОбороты.ГСМ),
	|	ЕСТЬNULL(уатОстаткиГСМнаТСОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК КоличествоНачальныйОстаток,
	|	ЕСТЬNULL(уатОстаткиГСМнаТСОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК КоличествоКонечныйОстаток,
	|	ЕСТЬNULL(уатОстаткиГСМнаТСОстаткиИОбороты.КоличествоНачальныйОстаток, 0) - ЕСТЬNULL(уатПутевойЛистРасходГСМ.ОстатокПриВыезде, 0) - ЕСТЬNULL(уатПутевойЛистРасходГСМ.Выдано, 0) КАК Поле1,
	|	ЕСТЬNULL(уатПутевойЛистРасходГСМ.ОстатокПриВыезде, 0) КАК ОстатокПриВыезде,
	|	ЕСТЬNULL(уатПутевойЛистРасходГСМ.ОстатокПриВозвращении, 0) КАК ОстатокПриВозвращении,
	|	уатПутевойЛистРасходГСМ.Ссылка.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.ОстаткиИОбороты(, , Регистратор, , ) КАК уатОстаткиГСМнаТСОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|		ПО уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор = уатПутевойЛистРасходГСМ.Ссылка
	|			И уатОстаткиГСМнаТСОстаткиИОбороты.ТС = уатПутевойЛистРасходГСМ.ТС
	|			И уатОстаткиГСМнаТСОстаткиИОбороты.ГСМ = уатПутевойЛистРасходГСМ.ГСМ
	|ГДЕ
	|	уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор ССЫЛКА Документ.уатПутевойЛист
	|	И уатОстаткиГСМнаТСОстаткиИОбороты.ТС = уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор.ТранспортноеСредство
	|	И уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор.ДатаВыезда МЕЖДУ &ДатаНач И &ДатаКон
	|{ГДЕ
	|	(ВЫБОР
	|			КОГДА уатОстаткиГСМнаТСОстаткиИОбороты.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатОстаткиГСМнаТСОстаткиИОбороты.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор.ДатаВыезда,
	|	уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор),
	|	уатОстаткиГСМнаТСОстаткиИОбороты.ТС,
	|	ПРЕДСТАВЛЕНИЕ(уатОстаткиГСМнаТСОстаткиИОбороты.ТС),
	|	уатОстаткиГСМнаТСОстаткиИОбороты.ГСМ,
	|	ПРЕДСТАВЛЕНИЕ(уатОстаткиГСМнаТСОстаткиИОбороты.ГСМ),
	|	ЕСТЬNULL(уатОстаткиГСМнаТСОстаткиИОбороты.КоличествоНачальныйОстаток, 0),
	|	ЕСТЬNULL(уатОстаткиГСМнаТСОстаткиИОбороты.КоличествоКонечныйОстаток, 0),
	|	ЕСТЬNULL(уатОстаткиГСМнаТСОстаткиИОбороты.КоличествоНачальныйОстаток, 0) - ЕСТЬNULL(уатПутевойЛистРасходГСМ.ОстатокПриВыезде, 0) - ЕСТЬNULL(уатПутевойЛистРасходГСМ.Выдано, 0),
	|	ЕСТЬNULL(уатПутевойЛистРасходГСМ.ОстатокПриВыезде, 0),
	|	ЕСТЬNULL(уатПутевойЛистРасходГСМ.ОстатокПриВозвращении, 0),
	|	уатПутевойЛистРасходГСМ.Ссылка.Организация
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.ОстаткиИОбороты(, , Регистратор, , ) КАК уатОстаткиГСМнаТСОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|		ПО уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор = уатПутевойЛистРасходГСМ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|		ПО уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор = уатПутевойЛистПрицепы.Ссылка
	|ГДЕ
	|	уатОстаткиГСМнаТСОстаткиИОбороты.Регистратор ССЫЛКА Документ.уатПутевойЛист
	|	И уатПутевойЛистПрицепы.ТС = уатОстаткиГСМнаТСОстаткиИОбороты.ТС
	|	И уатПутевойЛистРасходГСМ.ТС = уатОстаткиГСМнаТСОстаткиИОбороты.ТС
	|	И уатПутевойЛистПрицепы.Ссылка.ДатаВыезда МЕЖДУ &ДатаНач И &ДатаКон
	|{ГДЕ
	|	(ВЫБОР
	|			КОГДА уатОстаткиГСМнаТСОстаткиИОбороты.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатОстаткиГСМнаТСОстаткиИОбороты.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыезда
	|ИТОГИ ПО
	|	ТС,
	|	ГСМ,
	|	Организация";
	
	ПостроительОтчета.Текст = Текст;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	//заполняем поля отбора
	ПостроительОтчета.Отбор.Добавить("ТС").Использование = Ложь;
	ПостроительОтчета.Отбор.Добавить("ГСМ").Использование = Ложь;
	
	мОтборТСВыбыло	 				= ПостроительОтчета.Отбор.Добавить("ТСВыбыло");
	мОтборТСВыбыло.Представление    = "ТС выбыло";
	мОтборТСВыбыло.Использование	= Истина;
	
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
		
КонецПроцедуры
	
// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)
КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
		
		ОписаниеПериода     = "Период: без ограничения.";
		
	Иначе
		
		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
			+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");
		Иначе
			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Макет = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;
	
	ТекстПроИтоги = "";
	
	ТекстПроИтоги = ТекстПроИтоги + УправлениеОтчетами.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = "Группировки по " + ТекстПроИтоги;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	
	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;
	
	Возврат(ЗаголовокОтчета);
	
КонецФункции // СформироватьЗаголовок()

// Выводит показатели группировки
//
// Параметры:
//	Выборка - выборка
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	
	Если Выборка.Группировка() = "ТС" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(Выборка.ТС);
		Область.Параметры.Группировка = "Автомобиль " + СокрЛП(уатОбщегоНазначения.уатПредставлениеТС(Выборка.ТС, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"))) +
		", " + СокрЛП(уатОбщегоНазначения.уатПредставлениеМоделиТС(рсТранспортноеСредство.Модель));	
		Область.Параметры.РасшифровкаГруппировка = Выборка.ТС;	
	ИначеЕсли Выборка.Группировка() = "ГСМ" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.ГСМ ;	
		Область.Параметры.РасшифровкаГруппировка = Выборка.ГСМ ;	
	ИначеЕсли Выборка.Группировка() = "Колонна" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Колонна ;
		Область.Параметры.РасшифровкаГруппировка = Выборка.Колонна ;
	ИначеЕсли Выборка.Группировка() = "Организация" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Организация ;
		Область.Параметры.РасшифровкаГруппировка = Выборка.Организация ;
	Иначе	
		Область = СтруктураПараметров.ОбластьСтрока;
		Область.Параметры.Заполнить(Выборка);
		
		// Учесть заправки на момент выезда	
		Запрос1 = Новый Запрос;
		
		Запрос1.Текст = "ВЫБРАТЬ
		|	уатОстаткиГСМнаТСОбороты.КоличествоПриход КАК КоличествоПриход
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС.Обороты(, , Регистратор, ) КАК уатОстаткиГСМнаТСОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		|		ПО уатОстаткиГСМнаТСОбороты.Регистратор = уатЗаправкаГСМЗаправки.Ссылка
		|			И уатОстаткиГСМнаТСОбороты.ТС = уатЗаправкаГСМЗаправки.ТС
		|ГДЕ
		|	уатОстаткиГСМнаТСОбороты.Период = &ДатаНачалоДНЯ
		|			И уатОстаткиГСМнаТСОбороты.Период <> &Дата
		|	И уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
		|	И уатОстаткиГСМнаТСОбороты.ТС = &ТС
		|	И уатОстаткиГСМнаТСОбороты.ГСМ = &ГСМ
		|	И уатЗаправкаГСМЗаправки.ГСМ = &ГСМ
		|	И уатЗаправкаГСМЗаправки.ТС = &ТС
		|ИТОГИ
		|	СУММА(КоличествоПриход)
		|ПО
		|	уатЗаправкаГСМЗаправки.ПутевойЛист";
		
		Запрос2 = Новый Запрос;
		Запрос2.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(уатОстаткиГСМнаТСОстатки.КоличествоОстаток, 0) КАК ОстатокВыездаРегистр
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(
		|			&Дата,
		|			ТС = &ТС
		|				И ГСМ = &ГСМ) КАК уатОстаткиГСМнаТСОстатки";
		
		Запрос1.УстановитьПараметр("Дата", Выборка.ДатаВыезда);
		Запрос1.УстановитьПараметр("ДатаНачалоДня", НачалоДня(Выборка.ДатаВыезда));
		Запрос1.УстановитьПараметр("ПутевойЛист", Выборка.Регистратор);
		Запрос1.УстановитьПараметр("ТС", Выборка.ТС);
		Запрос1.УстановитьПараметр("ГСМ", Выборка.ГСМ);
		
		Запрос2.УстановитьПараметр("Дата", Выборка.ДатаВыезда);
		Запрос2.УстановитьПараметр("ТС", Выборка.ТС);
		Запрос2.УстановитьПараметр("ГСМ", Выборка.ГСМ);
		
		Результат1 = Запрос1.Выполнить();
		Выборка1 = Результат1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Результат2 = Запрос2.Выполнить();
		Выборка2 = Результат2.Выбрать();
		Если Выборка2.Следующий() Тогда
			ОстатокВыездаРегистр = Выборка2.ОстатокВыездаРегистр;
		Иначе
			ОстатокВыездаРегистр = 0;
		КонецЕсли;
		
		Если Выборка1.Количество()= 0 Тогда   // не было заправок
			НачОстатокБезЗаправок = ОстатокВыездаРегистр;
		КонецЕсли; 
		Пока Выборка1.Следующий() Цикл
			НачОстатокБезЗаправок = ОстатокВыездаРегистр - Выборка1.КоличествоПриход;
		КонецЦикла;
		
		Область.Параметры.НачОстатокБезЗаправок = НачОстатокБезЗаправок;
		Область.Параметры.Время = Формат(Выборка.ДатаВыезда, "ДФ=HH:mm");
		Область.Параметры.ДатаВыезда = Формат(Выборка.ДатаВыезда, "ДФ=dd.MM.yyyy");
		Область.Параметры.НомерПЛ = Выборка.Регистратор.Номер;
		Область.Параметры.ТСПредставление = уатОбщегоНазначения.уатПредставлениеТС(Выборка.ТС, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"));
		
		// Оформление
		Если НачОстатокБезЗаправок <> Выборка.ОстатокПриВыезде Тогда
			Область.Области.Начальный.Шрифт = Новый Шрифт(Область.Области.Начальный.Шрифт,,, Истина);
		Иначе
			Область.Области.Начальный.Шрифт = Новый Шрифт(Область.Области.Начальный.Шрифт,,, Ложь);
		КонецЕсли; 
		
		Если Выборка.КоличествоКонечныйОстаток <> Выборка.ОстатокПриВозвращении Тогда
			Область.Области.Конечный.Шрифт = Новый Шрифт(Область.Области.Конечный.Шрифт,,, Истина);
		Иначе
			Область.Области.Конечный.Шрифт = Новый Шрифт(Область.Области.Конечный.Шрифт,,, Ложь);
		КонецЕсли;
		//
		
	КонецЕсли;
	
	Область.Область("R1C2").Отступ = Макс(Выборка.Уровень() - 1, 0);
	
	Если НЕ ТолькоОтличия ИЛИ НачОстатокБезЗаправок <> Выборка.ОстатокПриВыезде 
		ИЛИ Выборка.КоличествоКонечныйОстаток <> Выборка.ОстатокПриВозвращении Тогда
		ДокументРезультат.Вывести(Область, Выборка.Уровень());
	КонецЕсли; 
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит строки
//
// Параметры:
//	Выборка - выборка
//
Процедура ВывестиСтроки(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	Область = СтруктураПараметров.ОбластьСтрока;
	Пока Выборка.Следующий() Цикл
		
		ВывестиПоказатели(Выборка,СтруктураПараметров); 
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	ПоВалютам       - признак вывода валют и валютных сумм,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, СдвигУровня, 
	СброситьСдвигУровня, СтруктураПараметров)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "ГСМ" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено);
			
		ИначеЕсли Выборка.Группировка() = "ТС" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено)
			
			
		ИначеЕсли Выборка.Группировка() = "Колонна" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено)
			
		КонецЕсли;
		
		ВывестиПоказатели(Выборка, СтруктураПараметров);
		
		// Если есть следующая группировка, то выбираем ее
		~М1:	Если ИндексТекущейГруппировки + 1 < МассивГруппировок.Количество() Тогда
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
			ИндексТекущейГруппировки + 1, МассивГруппировок, СдвигУровня, 
			СброситьСдвигУровня, СтруктураПараметров);
		Иначе	//Для последней группировки выводим строку
			ВывестиСтроки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт
	
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		Предупреждение("Дата начала периода не может быть больше даты конца периода");
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	Макет       = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	МассивГруппировок = Новый Массив;
	//
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
	КонецЦикла;
	
	МассивПоказателей = Новый Массив;
	
	МассивПоказателей.Добавить( "ДатаВыезда");
	МассивПоказателей.Добавить( "Время");
	МассивПоказателей.Добавить( "НомерПЛ");
	МассивПоказателей.Добавить( "ТСПредставление");
	МассивПоказателей.Добавить( "ГСМПредставление");
	МассивПоказателей.Добавить( "НачОстатокБезЗаправок");
	МассивПоказателей.Добавить( "КоличествоКонечныйОстаток");
	
	// Формат показателей
	ФорматПоказателей = Новый Структура;
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", ДатаНач);
	
	Если ДатаКон <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", '30010101000000');
	КонецЕсли;
	
	
	
	мСписокОрганизаций = Новый СписокЗначений;
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Организация) Тогда
		
		спрОрганизации = Справочники.Организации.Выбрать();
		Пока спрОрганизации.Следующий() Цикл
			
			мСписокОрганизаций.Добавить(спрОрганизации.Ссылка);
			
		КонецЦикла;	
		
	Иначе
		
		мСписокОрганизаций.Добавить(Организация);
		
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Организация", мСписокОрганизаций);
	
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
	
	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Детали");;
	ОбластьИтогиГруппировки = Макет.ПолучитьОбласть("ИтогиГруппировки");;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрока",ОбластьСтрока);
	СтруктураПараметров.Вставить("ОбластьИтогиГруппировки",ОбластьИтогиГруппировки);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	СтруктураПараметров.Вставить("ФорматПоказателей", ФорматПоказателей);
	СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	Если МассивГруппировок.Количество() > 0 Тогда
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
		0, МассивГруппировок, СдвигУровня, СброситьСдвигУровня, СтруктураПараметров);
	Иначе						
		ВывестиСтроки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров);
	КонецЕсли;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 1;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 10;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "КонтрольСоответствияПЛРегистрамУчета";
	ДокументРезультат.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
	
КонецПроцедуры // СформироватьОтчет()

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	ЗаполнитьНачальныеНастройки();
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает заголовок отчета в виде строки
//
//Возвращаемое значение:
//	Строка заголовка
//
Функция ЗаголовокОтчета() Экспорт
	Возврат "Контроль путевых листов по ГСМ";	
КонецФункции // ЗаголовокОтчета()


НП = Новый НастройкаПериода;
	
// Параметры для выбора организации
Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
#КонецЕсли