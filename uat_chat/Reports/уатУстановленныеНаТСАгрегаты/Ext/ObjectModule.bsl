#Если Клиент Тогда
	
///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК Агрегат,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата,
	|	уатАгрегатыТССрезПоследних.МестоУстановки КАК МестоУстановки,
	|	уатАгрегатыТССрезПоследних.Период КАК ДатаУстановки,
	|	уатАгрегатыТССрезПоследних.Регистратор КАК ДокументУстановки,
	|	уатАгрегатыТССрезПоследних.ТС.ГаражныйНомер КАК ТСГарНомер,
	|	уатАгрегатыТССрезПоследних.ТС.ГосударственныйНомер КАК ТСГосНомер,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.СерийныйНомер КАК АгрегатПредставление,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата КАК ТипАгрегата
	|{ВЫБРАТЬ
	|	ТС.*,
	|	Агрегат.*,
	|	СостояниеАгрегата.*,
	|	МестоУстановки.*,
	|	ДатаУстановки,
	|	ДокументУстановки.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	ТипАгрегата.*}
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаКон, ) КАК уатАгрегатыТССрезПоследних
	|ГДЕ
	|	(уатАгрегатыТССрезПоследних.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|			ИЛИ уатАгрегатыТССрезПоследних.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас))
	|{ГДЕ
	|	уатАгрегатыТССрезПоследних.ТС.*,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.* КАК Агрегат,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата.*,
	|	уатАгрегатыТССрезПоследних.МестоУстановки.*,
	|	уатАгрегатыТССрезПоследних.Период,
	|	уатАгрегатыТССрезПоследних.Регистратор.*,
	|	уатАгрегатыТССрезПоследних.ТС.ГаражныйНомер КАК ТСГарНомер,
	|	уатАгрегатыТССрезПоследних.ТС.ГосударственныйНомер,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата.* КАК ТипАгрегата,
	|	(ВЫБОР
	|			КОГДА уатАгрегатыТССрезПоследних.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатАгрегатыТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|{УПОРЯДОЧИТЬ ПО
	|	ТС.*,
	|	Агрегат.*,
	|	СостояниеАгрегата.*,
	|	МестоУстановки.*,
	|	ДатаУстановки,
	|	ДокументУстановки.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	ТипАгрегата.*}
	|ИТОГИ ПО
	|	ТС,
	|	Агрегат,
	|	СостояниеАгрегата,
	|	МестоУстановки,
	|	ДатаУстановки,
	|	ДокументУстановки
	|{ИТОГИ ПО
	|	ТС.*,
	|	Агрегат.*,
	|	СостояниеАгрегата.*,
	|	МестоУстановки.*,
	|	ДатаУстановки,
	|	ДокументУстановки.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	ТипАгрегата.*}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
		
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипАгрегата"      , "Тип агрегата");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СостояниеАгрегата", "Состояние агрегата");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МестоУстановки"   , "Место установки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаУстановки"    , "Дата установки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГарНомер"       , "ТС (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГосНомер"       , "ТС (гос. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТС"               , "ТС (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"			, "ТС выбыло");	
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТипАгрегата");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Агрегат");
	

	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("ТСГосНомер" , Ложь, ВидСравнения.Содержит);
	УниверсальныйОтчет.ДобавитьОтбор("ТипАгрегата", Ложь);
	УниверсальныйОтчет.ДобавитьОтбор("Агрегат"    , Ложь);
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло"   , Истина, ВидСравнения.Равно , Ложь);	
	
	//добавим отбор по умолчанию - только установленные
	списокУстановленные = Новый СписокЗначений;
	списокУстановленные.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	списокУстановленные.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	УниверсальныйОтчет.ДобавитьОтбор("СостояниеАгрегата", Истина, ВидСравнения.ВСписке, списокУстановленные);

	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТСГосНомер");

	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	
КонецПроцедуры // УстановитьНачальныеНастройки()

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 1;
	
#КонецЕсли
