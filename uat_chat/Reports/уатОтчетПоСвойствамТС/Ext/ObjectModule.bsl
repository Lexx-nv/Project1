#Если Клиент Тогда

Перем НП Экспорт; // Настройка периода

// Параметры для выбора организации
//Перем ОсновнаяОрганизация Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗначенияСвойствОбъектов.Объект КАК ТС,
	|	уатЗначенияСвойствОбъектов.Свойство КАК Свойство,
	|	уатЗначенияСвойствОбъектов.Значение КАК Значение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ уатЗначенияСвойствОбъектов.Значение) КАК ЗначениеКол,
	|	уатЗначенияСвойствОбъектов.Объект.Модель КАК Модель,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.уатЗначенияСвойствОбъектов КАК уатЗначенияСвойствОбъектов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатЗначенияСвойствОбъектов.Объект = уатМестонахождениеТССрезПоследних.ТС
	|{ГДЕ
	|	(ВЫБОР
	|			КОГДА уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатМестонахождениеТССрезПоследних.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|СГРУППИРОВАТЬ ПО
	|	уатМестонахождениеТССрезПоследних.Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна,
	|	уатЗначенияСвойствОбъектов.Объект,
	|	Свойство,
	|	Значение
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Значение)
	|ПО
	|	Организация,
	|	Колонна,
	|	Модель,
	|	ТС";
	ПостроительОтчета.Текст = Текст;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	//заполняем поля отбора
	ПостроительОтчета.Отбор.Добавить("ТС").Использование = Ложь;
	ПостроительОтчета.Отбор.Добавить("Свойство").Использование = Ложь;
	ПостроительОтчета.Отбор.Добавить("Значение").Использование = Ложь;
	
	мОтборТСВыбыло	 				= ПостроительОтчета.Отбор.Добавить("ТСВыбыло");
	мОтборТСВыбыло.Представление    = "ТС выбыло";
	мОтборТСВыбыло.Использование	= Истина;
	
	//удаляем по умолчанию
	ИзмерениеДляУдаления = ПостроительОтчета.ИзмеренияСтроки.Найти("Организация");
	ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеДляУдаления);
	ИзмерениеДляУдаления = ПостроительОтчета.ИзмеренияСтроки.Найти("Модель");
	ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеДляУдаления);
	ИзмерениеДляУдаления = ПостроительОтчета.ИзмеренияСтроки.Найти("Колонна");
	ПостроительОтчета.ИзмеренияСтроки.Удалить(ИзмерениеДляУдаления);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт
	
	Если Организация.Пустая() Тогда
		Предупреждение("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	Макет       = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	// Вывод заголовка отчета
	ОбластьЗаголовка = СформироватьЗаголовок();
	ВысотаЗаголовка  = ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	МассивГруппировок = Новый Массив;
	
	Для Сч=0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1  Цикл
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
	КонецЦикла;
	ПостроительОтчета.Параметры.Вставить("Дата", КонецДня(ТекущаяДата()));
	
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
	
	// Сдвиг уровня выводимой группировки отчета относительно группировки запроса
	СдвигУровня = 0;
	
	// Флаг сброса сдвига уровня при выводе группировки по счету
	СброситьСдвигУровня = Истина;
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");;
	ОбластьИтогиГруппировки = Макет.ПолучитьОбласть("ИтогиГруппировки");
	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбластьСтрока",ОбластьСтрока);
	СтруктураПараметров.Вставить("ОбластьИтогиГруппировки",ОбластьИтогиГруппировки);
	СтруктураПараметров.Вставить("ИтогиПодвал",ИтогиПодвал);
	СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	Если МассивГруппировок.Количество() > 0 Тогда
		
		ВывестиГруппировку(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[0]), 
		0, МассивГруппировок, 
		СдвигУровня, СброситьСдвигУровня, 
		СтруктураПараметров);
	Иначе						
		ВывестиСтроки(РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров);
	КонецЕсли;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1,2,ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСлева = 10;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "ВедомостьТранспортныхУслуг";
	ДокументРезультат.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);

КонецПроцедуры // СформироватьОтчет()

// Заполняет параметры расшифровки
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)
	
КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Выводит заголовок отчета
//
// Параметры:
//	Нет.
//
Функция СформироватьЗаголовок() Экспорт
	
    Макет = ПолучитьМакет("Макет");
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	
	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = УправлениеОтчетами.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	
	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = "Отбор: " + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;
	
	Возврат(ЗаголовокОтчета);
	
КонецФункции // СформироватьЗаголовок()

// Выводит показатели группировки
//
// Параметры:
//	Выборка - выборка
//	ЭтоПерваяСтрока - признак вывода отступов перед субконто
//
Процедура ВывестиПоказатели(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	
	Если Выборка.Группировка() = "ТС" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.ТС;	
		Область.Параметры.РасшифровкаГруппировка = Выборка.ТС;	
	ИначеЕсли Выборка.Группировка() = "Организация" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Организация;
		Область.Параметры.РасшифровкаГруппировка = Выборка.Организация;
	ИначеЕсли Выборка.Группировка() = "Колонна" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Колонна;
		Область.Параметры.РасшифровкаГруппировка = Выборка.Колонна;
	ИначеЕсли Выборка.Группировка() = "Свойство" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Свойство ;
		Область.Параметры.РасшифровкаГруппировка = Выборка.Свойство;
	ИначеЕсли Выборка.Группировка() = "Значение" Тогда
		Область = СтруктураПараметров.ОбластьИтогиГруппировки;
		Область.Параметры.Группировка = Выборка.Значение ;	
	Иначе	
		Область = СтруктураПараметров.ОбластьСтрока;
		Область.Параметры.ПредставлениеТС = уатОбщегоНазначения.уатПредставлениеТС(Выборка.ТС, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"));
		Область.Параметры.Модель = Выборка.Модель ;
		Область.Параметры.Свойство = Выборка.Свойство ;
		Область.Параметры.Значение = Выборка.Значение;
		Область.Параметры.РасшифровкаТС = Выборка.ТС;	
		Область.Параметры.РасшифровкаМодель = Выборка.Модель ;
		Область.Параметры.РасшифровкаСвойство = Выборка.Свойство ;
		Область.Параметры.РасшифровкаЗначение = Выборка.Значение;
	КонецЕсли; 	
	Область.Область("R1C2").Отступ = Макс(Выборка.Уровень() - 1, 0); 	
	Если Выборка.Группировка() = "ОБЩИЕ" Тогда
		ДокументРезультат.Вывести(СтруктураПараметров.ИтогиПодвал, Выборка.Уровень());
	КонецЕсли;	
	ДокументРезультат.Вывести(Область, Выборка.Уровень());
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит строки
//
// Параметры:
//	Выборка - выборка
//
Процедура ВывестиСтроки(Выборка, СтруктураПараметров)
	
	ДокументРезультат = СтруктураПараметров.ДокументРезультат;
	Область = СтруктураПараметров.ОбластьСтрока;
	Пока Выборка.Следующий() Цикл
		
		ВывестиПоказатели(Выборка,СтруктураПараметров); 
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиПоказатели()

// Выводит группировку при развороте счета по субсчетам и/или субконто
//
// Параметры:
//	Выборка         - выборка из результата запроса по выводимой группировке,
//	ИндексТекущейГруппировки - индекс выводимой группировки в массиве группировок,
//	МассивГруппировок - массив, содержащий имена группировок, по которым строится разворот счета,
//	Уровень 		- уровень  группировки верхнего уровня
//	СдвигУровня     - сдвиг уровня группировки отчета относительно уровня группировки запроса,
//	СброситьСдвигУровня - признак сброса сдвига уровня,
//	ПоВалютам       - признак вывода валют и валютных сумм,
//	СтрокаРазвернутогоСальдо - строка таблицы значений с развернутым сальдо по текущему счету.
//	СтруктураОбщийИтог - структура, в которой накапливаются общие итоги
//	СтруктураПараметров - структура, содержащая неизменные для разворота счета параметры:
//	                      Области макета табличного документа, линии, уровень группировки, 
//	                      с которой начался вывод отчета.
//
Процедура ВывестиГруппировку(Выборка, Знач ИндексТекущейГруппировки, МассивГруппировок, СдвигУровня, 
	СброситьСдвигУровня, СтруктураПараметров)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "ТС" Или
			Выборка.Группировка() = "Свойство" Или
			Выборка.Группировка() = "Значение" Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогиГруппировки;
			
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, Неопределено);
			
		КонецЕсли;
		
		ВывестиПоказатели(Выборка, СтруктураПараметров);
		
		// Если есть следующая группировка, то выбираем ее
		~М1:	Если ИндексТекущейГруппировки + 1 < МассивГруппировок.Количество() Тогда
			
			ВывестиГруппировку(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[ИндексТекущейГруппировки + 1]), 
			ИндексТекущейГруппировки + 1, МассивГруппировок, СдвигУровня, 
			СброситьСдвигУровня, СтруктураПараметров);
		Иначе	//Для последней группировки выводим строку
			ВывестиСтроки(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""),СтруктураПараметров); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	Организация = Параметры["Организация"];
	
	ЗаполнитьНачальныеНастройки();
	
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает заголовок отчета в виде строки
//
//Возвращаемое значение:
//	Строка заголовка
//
Функция ЗаголовокОтчета() Экспорт
	Возврат "Отчет по свойствам ТС";	
КонецФункции // ЗаголовокОтчета()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ


#КонецЕсли