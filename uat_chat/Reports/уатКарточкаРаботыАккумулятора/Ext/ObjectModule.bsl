#Если Клиент Тогда

Перем НП Экспорт; // Настройка периода


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Текст =	
	"ВЫБРАТЬ
	|	МИНИМУМ(УстановленоНаТС.Период) КАК ДатаУстановкиАКБНаТС,
	|	УстановленоНаТС.СерияНоменклатуры КАК АКБ,
	|	МИНИМУМ(СнятоСТС.Период) КАК ДатаСнятияАКБСТС,
	|	УстановленоНаТС.ТС.Модель КАК МодельТС,
	|	УстановленоНаТС.ТС.ГаражныйНомер КАК ИнвНомерТС,
	|	УстановленоНаТС.ТС.ГосударственныйНомер КАК ГосНомерТС,
	|	УстановленоНаТС.ТС.Ссылка КАК ТС,
	|	РАЗНОСТЬДАТ(УстановленоНаТС.Период, ЕСТЬNULL(СнятоСТС.Период, &ДатаКон), МЕСЯЦ) КАК КоличествоМесяцев
	|ПОМЕСТИТЬ АКБДвижения
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС КАК УстановленоНаТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаКон, ТС = &ТС) КАК СнятоСТС
	|		ПО УстановленоНаТС.СерияНоменклатуры = СнятоСТС.СерияНоменклатуры
	|			И УстановленоНаТС.ТС = СнятоСТС.ТС
	|			И (СнятоСТС.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято))
	|ГДЕ
	|	УстановленоНаТС.СерияНоменклатуры = &АКБ
	|	И УстановленоНаТС.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|	И УстановленоНаТС.ТС = &ТС
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановленоНаТС.СерияНоменклатуры,
	|	УстановленоНаТС.ТС.Модель,
	|	УстановленоНаТС.ТС.ГаражныйНомер,
	|	УстановленоНаТС.ТС.ГосударственныйНомер,
	|	УстановленоНаТС.ТС.Ссылка,
	|	РАЗНОСТЬДАТ(УстановленоНаТС.Период, ЕСТЬNULL(СнятоСТС.Период, &ДатаКон), МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(уатВыработкаОбороты.КоличествоОборот) КАК Пробег,
	|	уатВыработкаОбороты.ТС КАК ТС
	|ПОМЕСТИТЬ ПробегТСОбщий
	|ИЗ
	|	РегистрНакопления.уатВыработкаТС.Обороты(
	|			,
	|			&ДатаКон,
	|			,
	|			ТС В
	|					(ВЫБРАТЬ
	|						АКБДвижения.ТС
	|					ИЗ
	|						АКБДвижения КАК АКБДвижения)
	|				И Организация = &Организация
	|				И ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)) КАК уатВыработкаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уатВыработкаОбороты.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АКБДвижения.ДатаСнятияАКБСТС,
	|	АКБДвижения.ДатаУстановкиАКБНаТС,
	|	АКБДвижения.ГосНомерТС,
	|	АКБДвижения.ИнвНомерТС,
	|	ПробегТСОбщий.Пробег КАК ПробегОбщий,
	|	АКБДвижения.МодельТС,
	|	АКБДвижения.КоличествоМесяцев
	|ИЗ
	|	АКБДвижения КАК АКБДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПробегТСОбщий КАК ПробегТСОбщий
	|		ПО АКБДвижения.ТС = ПробегТСОбщий.ТС";
	
	ПостроительОтчета.Текст = Текст;
	ПостроительОтчета.ЗаполнитьНастройки();
	
	//заполняем поля отбора
	//ПостроительОтчета.Отбор.Добавить("ТС").Использование = Ложь;
	
	ПостроительОтчета.Отбор.Добавить("МодельТС").Использование = Ложь;
	
	мОтборОрганизация 				= ПостроительОтчета.Отбор.Добавить("Организация");
	мОтборОрганизация.Значение 		= Организация;
	мОтборОрганизация.Использование = Истина;
	
	//ПостроительОтчета.ИзмеренияСтроки.Очистить();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьОтчет(ДокументРезультат) Экспорт
	
	ТекстСообщения = "";
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда
		ТекстСообщения = ТекстСообщения + " - Дата начала периода не может быть больше даты конца периода" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТС) тогда
		ТекстСообщения = ТекстСообщения + " - Не указано ТС" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Аккумулятор) тогда
		ТекстСообщения = ТекстСообщения + " - Не указан аккумулятор" + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстСообщения) тогда
		Предупреждение("Невозможно сформировать отчет: " + Символы.ПС + ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	Макет = ПолучитьМакет("Макет");
	Шапка = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация;
	КонецЕсли;
	
	Шапка.Параметры.НазваниеОрганизации	= НазваниеОрганизации;
    Шапка.Параметры.ГаражНомер			= уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТС).ГаражныйНомер;
	Шапка.Параметры.НомерКолонны		= уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТС).Колонна;
	Шапка.Параметры.МаркаАКБ			= Аккумулятор.Модель;
	Шапка.Параметры.прГаражНомер		= ТС;	

	ДокументРезультат.Вывести(Шапка);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", НачалоДня(ДатаНач));
	
	Если ДатаКон <> '00010101000000' Тогда
		ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	Иначе
		ПостроительОтчета.Параметры.Вставить("ДатаКон", ДатаКон);
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("АКБ"         , Аккумулятор);
	ПостроительОтчета.Параметры.Вставить("Организация", Организация);
	ПостроительОтчета.Параметры.Вставить("ТС"         , ТС);
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета);
    Выборка = РезультатЗапроса.Выбрать();
	
	Строка = Макет.ПолучитьОбласть("Строка");
	
	Пока Выборка.Следующий() Цикл
		Строка.Параметры.Заполнить(Выборка);
		Строка.Параметры.прГосНомерТС = ТС;		
		ДокументРезультат.Вывести(Строка);
	КонецЦикла;	
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
	ДокументРезультат.Вывести(Подвал);

	
	// Ориентация страницы
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "Карточка работы аккумулятора";
	ДокументРезультат.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Настраивает отчет по заданным параметрам (например, для расшифровки)
Процедура Настроить(СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	
	//Организация = Параметры["Организация"];
	ДатаНач = Параметры["ДатаНач"];
	ДатаКон = Параметры["ДатаКон"];
	
	ЗаполнитьНачальныеНастройки();
	
	СтрокиОтбора = Параметры["Отбор"];
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЭлементОтбора = Неопределено Тогда
				
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				
			КонецЕсли; 
			ЭлементОтбора.Установить(Строка.Значение);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает заголовок отчета в виде строки
//
//Возвращаемое значение:
//	Строка заголовка
//
Функция ЗаголовокОтчета() Экспорт
	Возврат "Карточка учета работы аккумулятора";
КонецФункции // ЗаголовокОтчета()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

НП = Новый НастройкаПериода;

// Параметры для выбора организации
Организация  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

#КонецЕсли
