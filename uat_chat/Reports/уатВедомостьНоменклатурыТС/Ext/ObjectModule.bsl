#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатНоменклатураТСОбороты.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ГОД) КАК ПериодГод,
	|	уатНоменклатураТСОбороты.Регистратор КАК Регистратор,
	|	уатНоменклатураТСОбороты.ТС.ГаражныйНомер КАК ТСГарНомер,
	|	уатНоменклатураТСОбороты.ТС.ГосударственныйНомер КАК ТСГосНомер,
	|	уатНоменклатураТСОбороты.ТС.Колонна КАК Колонна,
	|	уатНоменклатураТСОбороты.ТС.Организация КАК Организация,
	|	уатНоменклатураТСОбороты.Номенклатура КАК Номенклатура,
	|	уатНоменклатураТСОбороты.КоличествоОборот КАК Количество,
	|	уатНоменклатураТСОбороты.СтоимостьОборот КАК Стоимость,
	|	уатНоменклатураТСОбороты.СтоимостьУпрОборот КАК СтоимостьУпр,
	|	ВЫБОР
	|		КОГДА уатНоменклатураТСОбороты.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаВидНоменклатуры.ЗапасныеЧасти)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаВидНоменклатуры.РаботыПоРемонту)
	|	КОНЕЦ КАК ВидНоменклатурыТС,
	|	ВЫБОР
	|		КОГДА уатНоменклатураТСОбороты.Регистратор ССЫЛКА Документ.уатРемонтныйЛист
	|				И уатНоменклатураТСОбороты.Регистратор.СпособРемонта = ЗНАЧЕНИЕ(Перечисление.уатСпособыРемонта.Автосервис)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.АвтоСервис)
	|		КОГДА уатНоменклатураТСОбороты.Регистратор ССЫЛКА Документ.уатРемонтныйЛист
	|				И уатНоменклатураТСОбороты.Регистратор.СпособРемонта = ЗНАЧЕНИЕ(Перечисление.уатСпособыРемонта.РемЗона)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.РемЗона)
	|		КОГДА уатНоменклатураТСОбороты.Регистратор ССЫЛКА Документ.уатВыдачаРасходныхМатериалов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.ВыдачаРасходныхМатериалов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.Прочее)
	|	КОНЕЦ КАК СпособРемонта,
	|	уатНоменклатураТСОбороты.ТС
	|{ВЫБРАТЬ
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	Регистратор.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Колонна.*,
	|	Организация.*,
	|	Номенклатура.*,
	|	Количество,
	|	Стоимость,
	|	СтоимостьУпр,
	|	ВидНоменклатурыТС.*,
	|	СпособРемонта.*,
	|	ТС.*}
	|ИЗ
	|	РегистрНакопления.уатНоменклатураТС.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК уатНоменклатураТСОбороты
	|{ГДЕ
	|	уатНоменклатураТСОбороты.Период,
	|	(НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ДЕНЬ)) КАК ПериодДень,
	|	(НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	|	(НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ДЕКАДА)) КАК ПериодДекада,
	|	(НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, МЕСЯЦ)) КАК ПериодМесяц,
	|	(НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, КВАРТАЛ)) КАК ПериодКвартал,
	|	(НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|	(НАЧАЛОПЕРИОДА(уатНоменклатураТСОбороты.Период, ГОД)) КАК ПериодГод,
	|	уатНоменклатураТСОбороты.Регистратор.*,
	|	уатНоменклатураТСОбороты.ТС.ГаражныйНомер КАК ТСГарНомер,
	|	уатНоменклатураТСОбороты.ТС.ГосударственныйНомер КАК ТСГосНомер,
	|	уатНоменклатураТСОбороты.ТС.Колонна.* КАК Колонна,
	|	уатНоменклатураТСОбороты.ТС.Организация.* КАК Организация,
	|	уатНоменклатураТСОбороты.Номенклатура.*,
	|	уатНоменклатураТСОбороты.КоличествоОборот КАК Количество,
	|	уатНоменклатураТСОбороты.СтоимостьОборот КАК Стоимость,
	|	уатНоменклатураТСОбороты.СтоимостьУпрОборот КАК СтоимостьУпр,
	|	(ВЫБОР
	|			КОГДА уатНоменклатураТСОбороты.Номенклатура ССЫЛКА Справочник.Номенклатура
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаВидНоменклатуры.ЗапасныеЧасти)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаВидНоменклатуры.РаботыПоРемонту)
	|		КОНЕЦ).* КАК ВидНоменклатурыТС,
	|	(ВЫБОР
	|			КОГДА уатНоменклатураТСОбороты.Регистратор ССЫЛКА Документ.уатРемонтныйЛист
	|					И уатНоменклатураТСОбороты.Регистратор.СпособРемонта = ЗНАЧЕНИЕ(Перечисление.уатСпособыРемонта.Автосервис)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.АвтоСервис)
	|			КОГДА уатНоменклатураТСОбороты.Регистратор ССЫЛКА Документ.уатРемонтныйЛист
	|					И уатНоменклатураТСОбороты.Регистратор.СпособРемонта = ЗНАЧЕНИЕ(Перечисление.уатСпособыРемонта.РемЗона)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.РемЗона)
	|			КОГДА уатНоменклатураТСОбороты.Регистратор ССЫЛКА Документ.уатВыдачаРасходныхМатериалов
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.ВыдачаРасходныхМатериалов)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатПолеОтчетаСпособРемонта.Прочее)
	|		КОНЕЦ).* КАК СпособРемонта,
	|	уатНоменклатураТСОбороты.ТС.*,
	|	(ВЫБОР
	|			КОГДА уатНоменклатураТСОбороты.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			КОГДА уатНоменклатураТСОбороты.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЛОЖЬ
	|		КОНЕЦ) КАК ТСВыбыло}
	|{УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	Регистратор.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Колонна.*,
	|	Организация.*,
	|	Номенклатура.*,
	|	Количество,
	|	Стоимость,
	|	СтоимостьУпр,
	|	ВидНоменклатурыТС.*,
	|	СпособРемонта.*,
	|	ТС.*}
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Стоимость),
	|	СУММА(СтоимостьУпр)
	|ПО
	|	Период,
	|	Регистратор,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Номенклатура,
	|	ВидНоменклатурыТС,
	|	Колонна,
	|	СпособРемонта,
	|	Организация
	|{ИТОГИ ПО
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	Регистратор.*,
	|	ТСГарНомер,
	|	ТСГосНомер,
	|	Колонна.*,
	|	Организация.*,
	|	Номенклатура.*,
	|	ВидНоменклатурыТС.*,
	|	СпособРемонта.*,
	|	ТС.*}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТС"               , "ТС / оборудование (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГарНомер"       , "ТС (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГосНомер"       , "ТС (гос. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВидНоменклатурыТС", "Вид номенклатуры ТС");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СпособРемонта"    , "Способ ремонта");	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло" 		, "ТС выбыло");	
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СпособРемонта");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ВидНоменклатурыТС");
	
	УниверсальныйОтчет.ДобавитьПоказатель("Количество"  , "Количество"      , Истина,"ЧДЦ=3", , );
	УниверсальныйОтчет.ДобавитьПоказатель("Стоимость"   , "Стоимость (регл)", Истина,"ЧДЦ=2", , );
	Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") тогда
		УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьУпр", "Стоимость (упр)", Истина,"ЧДЦ=2", , );
	КонецЕсли;
	
 // Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("ТСГосНомер",Ложь,ВидСравнения.Содержит);
	УниверсальныйОтчет.ДобавитьОтбор("СпособРемонта");
	УниверсальныйОтчет.ДобавитьОтбор("ВидНоменклатурыТС");
	УниверсальныйОтчет.ДобавитьОтбор("Регистратор.Дата", Ложь  , ВидСравнения.ИнтервалВключаяГраницы,,,,Ложь);
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло"		   , Истина, ВидСравнения.Равно 				, Ложь);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТСГосНомер", ТипРазмещенияРеквизитовИзмерений.Отдельно);
	
	//ПутьКДанным, Размещение = Неопределено, Положение = 3
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
