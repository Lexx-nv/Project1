#Если Клиент Тогда
	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	уатОстаткиАгрегатовОстаткиИОбороты.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ГОД) КАК ПериодГод,
	|	уатОстаткиАгрегатовОстаткиИОбороты.Регистратор КАК Регистратор,
	|	уатОстаткиАгрегатовОстаткиИОбороты.Склад КАК Склад,
	|	уатОстаткиАгрегатовОстаткиИОбороты.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатОстаткиАгрегатовОстаткиИОбороты.СерияНоменклатуры.Модель КАК Модель,
	|	уатОстаткиАгрегатовОстаткиИОбороты.СерияНоменклатуры.ТипАгрегата КАК ТипАгрегата,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
	|	уатИзносПробегШинОбороты.ПробегОборот КАК ПробегОборот
	|{ВЫБРАТЬ
	|	Период,
	|	Регистратор.*,
	|	Склад.*,
	|	СерияНоменклатуры.*,
	|	Модель.*,
	|	ТипАгрегата.*,
	|	КоличествоНачальныйОстаток,
	|	КоличествоКонечныйОстаток,
	|	КоличествоПриход,
	|	КоличествоРасход,
	|	ПробегОборот,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод}
	|ИЗ
	|	РегистрНакопления.уатОстаткиАгрегатов.ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор, , ) КАК уатОстаткиАгрегатовОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатИзносПробегШин.Обороты КАК уатИзносПробегШинОбороты
	|		ПО уатОстаткиАгрегатовОстаткиИОбороты.СерияНоменклатуры = уатИзносПробегШинОбороты.СерияНоменклатуры
	|{ГДЕ
	|	уатОстаткиАгрегатовОстаткиИОбороты.Период,
	|	уатОстаткиАгрегатовОстаткиИОбороты.Регистратор.*,
	|	уатОстаткиАгрегатовОстаткиИОбороты.Склад.*,
	|	уатОстаткиАгрегатовОстаткиИОбороты.СерияНоменклатуры.*,
	|	уатОстаткиАгрегатовОстаткиИОбороты.СерияНоменклатуры.Модель.* КАК Модель,
	|	уатОстаткиАгрегатовОстаткиИОбороты.СерияНоменклатуры.ТипАгрегата.* КАК ТипАгрегата,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоНачальныйОстаток,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоКонечныйОстаток,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоПриход,
	|	уатОстаткиАгрегатовОстаткиИОбороты.КоличествоРасход,
	|	уатИзносПробегШинОбороты.ПробегОборот,
	|	(НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ДЕНЬ)) КАК Поле1,
	|	(НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, НЕДЕЛЯ)) КАК Поле2,
	|	(НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ДЕКАДА)) КАК Поле3,
	|	(НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, МЕСЯЦ)) КАК Поле4,
	|	(НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, КВАРТАЛ)) КАК Поле5,
	|	(НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ПОЛУГОДИЕ)) КАК Поле6,
	|	(НАЧАЛОПЕРИОДА(уатОстаткиАгрегатовОстаткиИОбороты.Период, ГОД)) КАК Поле7}
	|{УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор.*,
	|	Склад.*,
	|	СерияНоменклатуры.*,
	|	Модель.*,
	|	ТипАгрегата.*,
	|	КоличествоНачальныйОстаток,
	|	КоличествоКонечныйОстаток,
	|	КоличествоПриход,
	|	КоличествоРасход,
	|	ПробегОборот,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод}
	|ИТОГИ
	|	СУММА(КоличествоНачальныйОстаток),
	|	СУММА(КоличествоКонечныйОстаток),
	|	СУММА(КоличествоПриход),
	|	СУММА(КоличествоРасход),
	|	СУММА(ПробегОборот)
	|ПО
	|	Период,
	|	Регистратор,
	|	Склад,
	|	СерияНоменклатуры,
	|	Модель,
	|	ТипАгрегата,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод
	|{ИТОГИ ПО
	|	Период,
	|	Регистратор.*,
	|	Склад.*,
	|	СерияНоменклатуры.*,
	|	Модель.*,
	|	ТипАгрегата.*,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодПолугодие,
	|	ПериодКвартал,
	|	ПериодГод}";
	
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТипАгрегата"     , "Тип агрегата");
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Склад");	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТипАгрегата");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Агрегат");
	
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоНачальныйОстаток", "Кол. (нач. остаток)"    , Истина,"ЧДЦ=3", , );
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоПриход"          , "Кол. (приход)"          , Истина,"ЧДЦ=3", , );
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоРасход"          , "Кол. (расход)"          , Истина,"ЧДЦ=3", , );
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоКонечныйОстаток" , "Кол. (кон. остаток)"    , Истина,"ЧДЦ=3", , );
	УниверсальныйОтчет.ДобавитьПоказатель("ПробегОборот"              , "Пробег (только для шин)", Ложь  ,"ЧДЦ=3", , );

	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("Склад"      , Ложь);
	УниверсальныйОтчет.ДобавитьОтбор("ТипАгрегата", Ложь);
	УниверсальныйОтчет.ДобавитьОтбор("Модель"     , Ложь);

	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
#КонецЕсли
