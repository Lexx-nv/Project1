	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ
//


// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	 
	СтандартнаяОбработка = Ложь;
	
	СКД = ЭтотОбъект.СхемаКомпоновкиДанных;
	
	КоллекцияЭлементовОтбора = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[1].Элементы;
	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Для Каждого Элемент Из КоллекцияЭлементовОтбора Цикл 
		НовыйЭлемент =  КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(ТипЗнч(Элемент));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
	КонецЦикла;
	
	КоллекцияЭлементовВыбора = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы;
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	Для Каждого Элемент Из КоллекцияЭлементовВыбора Цикл 
		НовыйЭлемент =  КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(ТипЗнч(Элемент));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
	КонецЦикла;
	
	КоллекцияЭлементовПорядок = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Элементы;
	КомпоновщикНастроек.Настройки.Порядок.Элементы.Очистить();
	Для Каждого Элемент Из КоллекцияЭлементовПорядок Цикл 
		НовыйЭлемент =  КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(ТипЗнч(Элемент));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент,Элемент);
	КонецЦикла;
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПоляОтбора = Настройки.Отбор.Элементы;
	
	ОписаниеТиповОбъект = Метаданные.РегистрыСведений.ItobПривязкиТерминалов.Измерения.Объект.Тип;
	
	Для Каждого Элем Из ПоляОтбора Цикл
		Если ОписаниеТиповОбъект.СодержитТип(ТипЗнч(Элем.ПравоеЗначение)) Тогда 
			Продолжить;
		Иначе 
			Элем.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	Тз = Новый ТаблицаЗначений;
	Тз.Колонки.Добавить("Объект");
	Тз.Колонки.Добавить("ВремяКон");
	Тз.Колонки.Добавить("ВремяНач");
	Тз.Колонки.Добавить("Длительность");
	Тз.Колонки.Добавить("ДлительностьПредставление");
	Тз.Колонки.Добавить("МаксимальнаяСкорость");
	Тз.Колонки.Добавить("МестоСтоянки");
	Тз.Колонки.Добавить("Пробег");
	Тз.Колонки.Добавить("Состояние");
	Тз.Колонки.Добавить("СостояниеСтрока");
	Тз.Колонки.Добавить("СредняяСкорость");
	Тз.Колонки.Добавить("РасходТоплива");
			
	ВнешниеНаборыДанных = Новый Структура("ТаблицаИнтервалов",Тз);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТабОбъектов = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Если ТабОбъектов.Количество()>0 Тогда 
		МассивОбъектов = ТабОбъектов.ВыгрузитьКолонку("Объект");		
		
		Для Каждого ТекущийОбъект Из МассивОбъектов Цикл
			
			ТекПериодДень = НачалоДня(НачПериода);
			
			Пока ТекПериодДень <= КонПериода Цикл
				ТекНачалоПериода = МАКС(НачалоДня(ТекПериодДень), НачПериода);
				ТекКонецПериода = МИН(КонецДня(ТекПериодДень), КонПериода);
				
				ТаблицаИнтервалов = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(ТекущийОбъект, ТекНачалоПериода, ТекКонецПериода, Истина);
				ТаблицаИнтервалов.Колонки.Вставить(0,"Объект",,"Объект");
				
				Если Метаданные.НайтиПоПолномуИмени("РегистрСведений.ItobКоэффициентыРасходаТоплива") <> Неопределено Тогда
				 	ТекНормаРег = РегистрыСведений["ItobКоэффициентыРасходаТоплива"].ПолучитьПоследнее(ТекКонецПериода, Новый Структура("ТранспортноеСредство",ТекущийОбъект));
					ТекКоэффициентРасхода = ТекНормаРег.Коэффициент;
					
				Иначе
					ТекКоэффициентРасхода = 0;					
				
				КонецЕсли;
				
				
				
				Для Каждого Строка Из ТаблицаИнтервалов Цикл 
					
					Если Не Строка.Длительность > 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					Строка.Объект = ТекущийОбъект;
					Строка.Пробег = Окр(Строка.Пробег,2);					
					
					ДобСтрока = Тз.Добавить();
					ЗаполнитьЗначенияСвойств(ДобСтрока,Строка);
					ДобСтрока.Длительность = Строка.Длительность;
					
					ДобСтрока.РасходТоплива = Окр(ТекКоэффициентРасхода * Строка.Пробег/100,1);
					ДобСтрока.ДлительностьПредставление = ItobОперативныйМониторинг.ПредставлениеВремени(Строка.Длительность);
					
				КонецЦикла;
				
				ТекПериодДень = ТекПериодДень + 24*3600;
				
			КонецЦикла;				
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из ПоляОтбора Цикл
		Элем.Использование = Истина;
	КонецЦикла;
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы[1].Поле;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	НовыйЭлементОтбора.ПравоеЗначение = 0;
	
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаИнтервалов",Тз);
	
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Таб = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ТабДанных.Очистить();
	Для Каждого Стр Из Таб Цикл
		НовСтрока = ТабДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Стр);
	КонецЦикла;
	
	
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры // ПриКомпоновкеРезультата()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НачПериода > КонПериода Тогда
		ТекстОшибки = НСтр("ru='Начало периода не может быть больше даты конца периода'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Неопределено, // ОбъектИлиСсылка
			"ItobДвиженияИСтоянки",
			"Отчет", // ПутьКДанным
			Отказ
		);
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()


