
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ
//

// Функция выполняет формирование табличного документа отчета по простоям.
//
Функция СформироватьОтчетПоПростоямПриЗаведенномДвигателе(НачПериода, КонПериода, Объект)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	
	СрезНаНачало = РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(НачалоДня(НачПериода)-1, Новый Структура("Объект", Объект));
	Если НЕ ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
		Сообщить("Для объекта не привязан терминал!");
		Возврат ТабДокумент;
	
	КонецЕсли;
	
	Терминал = СрезНаНачало.Терминал;
	СтрокаДатчики = Терминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.Зажигание,"Назначение");
	Если СтрокаДатчики = Неопределено Тогда
		Сообщить("Для объекта не прописан датчик зажигания!");
		Возврат ТабДокумент;	
	
	КонецЕсли;
	
	Датчик = СтрокаДатчики.Датчик;	
   	
	Макет = ПолучитьМакет("Макет");
			
   	// Данные датчика
	ТабРезультат = ItobОперативныйМониторинг.ПолучитьДанныеДатчикаОбъекта(Объект, НачПериода, КонПериода, Датчик);	
	
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("НачДата");
	ТабДанных.Колонки.Добавить("КонДата");	
	ТабДанных.Колонки.Добавить("Значение");
	ТабДанных.Колонки.Добавить("Продолжительность");
	ТабДанных.Колонки.Добавить("Широта");
	ТабДанных.Колонки.Добавить("Долгота");
	
	Если ТабРезультат.Количество() > 0 Тогда
				
		СтрокаНачалаДиапазона = ТабРезультат[0];
		Для п = 1 По ТабРезультат.Количество()-1 Цикл
			
			Если ТабРезультат[п].Значение <> СтрокаНачалаДиапазона.Значение Тогда
				
				НовСтрокаДанных = ТабДанных.Добавить();
				НовСтрокаДанных.НачДата  = СтрокаНачалаДиапазона.Период;
				НовСтрокаДанных.КонДата  = ТабРезультат[п-1].Период;				
				НовСтрокаДанных.Значение = СтрокаНачалаДиапазона.Значение;
				НовСтрокаДанных.Широта   = СтрокаНачалаДиапазона.Широта;
				НовСтрокаДанных.Долгота  = СтрокаНачалаДиапазона.Долгота;
				
				СтрокаНачалаДиапазона = ТабРезультат[п];
				
			ИначеЕсли п = ТабРезультат.Количество()-1 Тогда
				// Необходимо закрыть диапазон
				НовСтрокаДанных = ТабДанных.Добавить();
				НовСтрокаДанных.НачДата  = СтрокаНачалаДиапазона.Период;
				НовСтрокаДанных.КонДата  = ТабРезультат[п].Период;				
				НовСтрокаДанных.Значение = СтрокаНачалаДиапазона.Значение;
				НовСтрокаДанных.Широта   = СтрокаНачалаДиапазона.Широта;
				НовСтрокаДанных.Долгота  = СтрокаНачалаДиапазона.Долгота;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Для п = 0 По ТабДанных.Количество()-1 Цикл
			
		Если п < ТабДанных.Количество()-1 Тогда
						
			ТабДанных[п+1].НачДата = ТабДанных[п].КонДата + Цел((ТабДанных[п+1].НачДата-ТабДанных[п].КонДата)/2)-1;
			ТабДанных[п].КонДата = ТабДанных[п+1].НачДата-1;
			
		КонецЕсли;		
		
		ТабДанных[п].Продолжительность = ТабДанных[п].КонДата - ТабДанных[п].НачДата + 1;
		
	КонецЦикла;
		
	// Вычислим маршрут
	Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(Объект, НачПериода, КонПериода);	
	
	// очистим движение из маршрута
	МассивУдаления = Новый Массив;
	Для Каждого СтрочкаМаршрута Из Маршрут Цикл
		Если НЕ СтрочкаМаршрута.Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка Тогда
			МассивУдаления.Добавить(СтрочкаМаршрута);				
		
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивУдаления Цикл
		Маршрут.Удалить(СтрокаУдаления);			
	
	КонецЦикла;
	
	Если ТабДанных.Количество() > 0 Тогда
		ТабДанных[0].НачДата = НачПериода;
		ТабДанных[ТабДанных.Количество()-1].КонДата = КонПериода;
	
	КонецЕсли;
			
	// Заполним массив по датчикам
	МассивСостоянийДатчика = Новый Массив;
	Для Каждого СтрокаТабДатчиков Из ТабДанных Цикл
		ЧислоСекунд = СтрокаТабДатчиков.КонДата - СтрокаТабДатчиков.НачДата + 1;
		Для п = 1 По ЧислоСекунд Цикл
			МассивСостоянийДатчика.Добавить(СтрокаТабДатчиков.Значение);
		КонецЦикла;	
	КонецЦикла;
	
	ОбластьШапка         = Макет.ПолучитьОбласть("Шапка");
	ОбластьДетали        = Макет.ПолучитьОбласть("Детали");
	ОбластьГруппировка   = Макет.ПолучитьОбласть("Группировка");
	
	ОбластьШапка.Параметры.ЗаголовокОтчета = "Отчет по простоям при включенном зажигании за "+ПредставлениеПериода(НачПериода, КонПериода);
	ОбластьШапка.Параметры.Объект = "Объект мониторинга: "+Объект;
	
	ТабДокумент.Вывести(ОбластьШапка);
		
	НомПП = 1;
	
	// Анализ
	
	ИтогоЗажиганиеВключено = 0;
	ИтогоЗажиганиеВыключено = 0;	
	
	Для Каждого СтрокаСтоянки Из Маршрут Цикл
						
		ОбластьГруппировка.Параметры.Место = ItobОперативныйМониторинг.НайтиБлижайшийАдрес(СтрокаСтоянки.Широта, СтрокаСтоянки.Долгота);
		
		ОбластьГруппировка.Параметры.НомПП = НомПП;
		ОбластьГруппировка.Параметры.Событие = "Стоянка";
		ОбластьГруппировка.Параметры.НачДата = СтрокаСтоянки.Период;
		ОбластьГруппировка.Параметры.КонДата = СтрокаСтоянки.ПериодКон;
		ОбластьГруппировка.Параметры.Продолжительность = ItobОперативныйМониторинг.ПредставлениеВремени(СтрокаСтоянки.ПериодКон-СтрокаСтоянки.Период+1);		
		
		ОбластьГруппировка.Параметры.Расшифровка = Новый Структура("НачПериода,КонПериода,Объект",СтрокаСтоянки.Период,СтрокаСтоянки.ПериодКон,Объект);
		
		ТабДокумент.Вывести(ОбластьГруппировка);
		
		НачалоСтоянки = СтрокаСтоянки.Период;
		КонецСтоянки = СтрокаСтоянки.ПериодКон;
				
		НачалоИнтервала = НачалоСтоянки - НачПериода;
		КонецИнтервала = КонецСтоянки - НачПериода;
						
		СостояниеЗажигания = МассивСостоянийДатчика[НачалоИнтервала];
		ДатаНачалаСостояния = НачалоСтоянки;
		НомСостояния = 1;
		
		Для п = НачалоИнтервала По КонецИнтервала Цикл
			
			к = МассивСостоянийДатчика[п];
			Если к <> СостояниеЗажигания ИЛИ п = КонецИнтервала Тогда				
				
				ОбластьДетали.Параметры.НомПП = ""+НомПП+"."+НомСостояния;
				ОбластьДетали.Параметры.Событие = ?(СостояниеЗажигания=0,"Зажигание выключено","Зажигание включено");
				ОбластьДетали.Параметры.НачДата = ДатаНачалаСостояния;
				ОбластьДетали.Параметры.КонДата  = ?(п = КонецИнтервала, НачПериода + п, НачПериода + п-1);
				ОбластьДетали.Параметры.Продолжительность = ItobОперативныйМониторинг.ПредставлениеВремени(?(п = КонецИнтервала, НачПериода + п, НачПериода + п-1)-ДатаНачалаСостояния+1);
				//Место
				
				ОбластьДетали.Параметры.Расшифровка = Новый Структура("НачПериода,КонПериода,Объект",ДатаНачалаСостояния,?(п = КонецИнтервала, НачПериода + п, НачПериода + п-1),Объект);
				
				ТабДокумент.Вывести(ОбластьДетали);					
				
				ДатаНачалаСостояния = НачПериода + п;
				СостояниеЗажигания = к;
				
				НомСостояния = НомСостояния + 1;
				
			КонецЕсли;
			
			Если к = 0 Тогда
				ИтогоЗажиганиеВыключено = ИтогоЗажиганиеВыключено + 1;				
			Иначе
				ИтогоЗажиганиеВключено = ИтогоЗажиганиеВключено + 1;				
			КонецЕсли;
		
		КонецЦикла;		
				
		НомПП = НомПП + 1;
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ИтогЗаголовок");
	ТабДокумент.Вывести(Область);
	
	Если Маршрут.Количество() > 0 Тогда
		
		ОбластьИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	
		ОбластьИтогСтрока.Параметры.Значение = "Стоянка при включенном зажигании";
		ОбластьИтогСтрока.Параметры.Продолжительность = ItobОперативныйМониторинг.ПредставлениеВремени(ИтогоЗажиганиеВключено)+" ("+Формат(ИтогоЗажиганиеВключено/(ИтогоЗажиганиеВключено+ИтогоЗажиганиеВыключено)*100,"ЧЦ=3; ЧДЦ=1; ЧН=0")+"%)";
		ТабДокумент.Вывести(ОбластьИтогСтрока);
		
		ОбластьИтогСтрока.Параметры.Значение = "Стоянка при выключенном зажигании";
		ОбластьИтогСтрока.Параметры.Продолжительность = ItobОперативныйМониторинг.ПредставлениеВремени(ИтогоЗажиганиеВыключено)+" ("+Формат(ИтогоЗажиганиеВыключено/(ИтогоЗажиганиеВключено+ИтогоЗажиганиеВыключено)*100,"ЧЦ=3; ЧДЦ=1; ЧН=0")+"%)";
		ТабДокумент.Вывести(ОбластьИтогСтрока);		
	
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьОтчетПоПростоямПриЗаведенномДвигателе()

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	ДокументРезультат.Вывести(СформироватьОтчетПоПростоямПриЗаведенномДвигателе(
		НачПериода,
		КонПериода,
		Объект));
				
КонецПроцедуры // ПриКомпоновкеРезультата()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НачПериода > КонПериода Тогда
		ТекстОшибки = НСтр("ru='Начало периода не может быть больше даты конца периода'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Неопределено, // ОбъектИлиСсылка
			"ItobОтчетПоПростоямПриЗаведенномДвигателе",
			"Отчет", // ПутьКДанным
			Отказ
		);
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()


