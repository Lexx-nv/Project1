#Если Клиент Тогда
	
Перем мУчетПоОбъектамСтроительства;

	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА


// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
		ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатВыработка.Контрагент КАК Контрагент,
	|	уатВыработка.ТС КАК ТС,
	|	уатВыработка.ТС.ГосударственныйНомер,
	|	уатВыработка.Маршрут КАК Маршрут,
	|	уатВыработка.ПараметрВыработки КАК ПараметрВыработки,
	|	ВЫБОР
	|		КОГДА уатВыработка.ПараметрВыработки.Временный
	|			ТОГДА уатВыработка.КоличествоПараметрВыработкиОборот / 3600
	|		ИНАЧЕ уатВыработка.КоличествоПараметрВыработкиОборот
	|	КОНЕЦ КАК Количество,
	|	уатВыработка.ПутЛист,
	|	уатВыработка.Организация КАК Организация,
	|	уатВыработка.ПутЛист.Номер КАК ПутЛистНомер,
	|	уатВыработка.Период,
	|	//ОБЪЕКТСТРОИТЕЛЬСТВА1
	|	НАЧАЛОПЕРИОДА(уатВыработка.Период, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(уатВыработка.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(уатВыработка.Период, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(уатВыработка.Период, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(уатВыработка.Период, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(уатВыработка.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(уатВыработка.Период, ГОД) КАК ПериодГод,
	|	уатВыработка.ТС.ГаражныйНомер,
	|	уатВыработка.СуммаВзаиморасчетовОборот КАК СуммаВзаиморасчетов,
	|	уатВыработка.СуммаУпрОборот КАК СуммаУпр,
	|	уатВыработка.СуммаОборот КАК Сумма,
	|	уатВыработка.ПараметрВыработки.Временный КАК ПараметрВыработкиВременный1,
	|	ВЫБОР
	|		КОГДА уатВыработка.ПараметрВыработки.Временный И &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - уатВыработка.КоличествоПараметрВыработкиОборот / 3600 > 0
	|						ТОГДА (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - 1
	|					ИНАЧЕ ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))
	|				КОНЕЦ * 60 + ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - уатВыработка.КоличествоПараметрВыработкиОборот / 3600 > 0
	|						ТОГДА уатВыработка.КоличествоПараметрВыработкиОборот / 3600 - ((ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - 1)
	|					ИНАЧЕ уатВыработка.КоличествоПараметрВыработкиОборот / 3600 - (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0)))
	|				КОНЕЦ * 60
	|		КОГДА уатВыработка.ПараметрВыработки.Временный И НЕ &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ уатВыработка.КоличествоПараметрВыработкиОборот
	|	КОНЕЦ КАК КоличествоОборот,
	|	ВЫБОР
	|		КОГДА уатВыработка.ПараметрВыработки.Временный И &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - уатВыработка.КоличествоПараметрВыработкиОборот / 3600 > 0
	|						ТОГДА (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - 1
	|					ИНАЧЕ ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))
	|				КОНЕЦ + (ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - уатВыработка.КоличествоПараметрВыработкиОборот / 3600 > 0
	|							ТОГДА уатВыработка.КоличествоПараметрВыработкиОборот / 3600 - ((ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0))) - 1)
	|						ИНАЧЕ уатВыработка.КоличествоПараметрВыработкиОборот / 3600 - (ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 0)))
	|					КОНЕЦ * 60 / 100 КАК ЧИСЛО(15, 2)))
	|		КОГДА уатВыработка.ПараметрВыработки.Временный И НЕ &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫРАЗИТЬ(уатВыработка.КоличествоПараметрВыработкиОборот / 3600 КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ уатВыработка.КоличествоПараметрВыработкиОборот
	|	КОНЕЦ КАК ИзРегистра
	|{ВЫБРАТЬ
	|	Контрагент.*,
	|	ТС.*,
	|	ТСГосударственныйНомер КАК ТСГосНомер,
	|	ТСГаражныйНомер КАК ТСГарНомер,
	|	Маршрут.*,
	|	ПараметрВыработки.*,
	|	Количество,
	|	ПутЛист.*,
	|	Организация.*,
	|	Период,
	|	//ОБЪЕКТСТРОИТЕЛЬСТВА2
	|	СуммаВзаиморасчетов,
	|	СуммаУпр,
	|	Сумма,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ПутЛистНомер,
	|	ИзРегистра}
	|ИЗ
	|	РегистрНакопления.уатВыработкаПоСтоимости.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК уатВыработка
	|{ГДЕ
	|	уатВыработка.Контрагент.*,
	|	уатВыработка.ТС.*,
	|	уатВыработка.ТС.ГосударственныйНомер КАК ТСГосНомер,
	|	уатВыработка.Маршрут.*,
	|	уатВыработка.ПараметрВыработки.*,
	|	уатВыработка.ПутЛист.*,
	|	уатВыработка.Организация.*,
	|	уатВыработка.ПутЛист.Номер,
	|	//ОБЪЕКТСТРОИТЕЛЬСТВА3
	|	уатВыработка.Период,
	|	(НАЧАЛОПЕРИОДА(уатВыработка.Период, ДЕНЬ)) КАК ПериодДень,
	|	(НАЧАЛОПЕРИОДА(уатВыработка.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	|	(НАЧАЛОПЕРИОДА(уатВыработка.Период, ДЕКАДА)) КАК ПериодДекада,
	|	(НАЧАЛОПЕРИОДА(уатВыработка.Период, МЕСЯЦ)) КАК ПериодМесяц,
	|	(НАЧАЛОПЕРИОДА(уатВыработка.Период, КВАРТАЛ)) КАК ПериодКвартал,
	|	(НАЧАЛОПЕРИОДА(уатВыработка.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|	(НАЧАЛОПЕРИОДА(уатВыработка.Период, ГОД)) КАК ПериодГод,
	|	уатВыработка.ТС.ГаражныйНомер КАК ТСГарНомер,
	|	уатВыработка.СуммаВзаиморасчетовОборот,
	|	уатВыработка.СуммаУпрОборот,
	|	уатВыработка.СуммаОборот,
	|	(ВЫБОР
	|			КОГДА уатВыработка.ПараметрВыработки.Временный
	|				ТОГДА уатВыработка.КоличествоПараметрВыработкиОборот / 3600
	|			ИНАЧЕ уатВыработка.КоличествоПараметрВыработкиОборот
	|		КОНЕЦ) КАК Количество,
	|		(ВЫБОР
	|				КОГДА уатВыработка.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				КОГДА уатВыработка.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЛОЖЬ
	|			КОНЕЦ) КАК ТСВыбыло}	
	|{УПОРЯДОЧИТЬ ПО
	|	Контрагент.*,
	|	ТС.*,
	|	ТСГосударственныйНомер,
	|	Маршрут.*,
	|	ПараметрВыработки.*,
	|	Количество,
	|	ПутЛист.*,
	|	Организация.*,
	|	//ОБЪЕКТСТРОИТЕЛЬСТВА4
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ТСГаражныйНомер,
	|	СуммаВзаиморасчетов,
	|	СуммаУпр,
	|	Сумма,
	|	ПутЛистНомер}
	|ИТОГИ
	|	СУММА(ИзРегистра) КАК КоличествоОборот,
	|	ВЫБОР
	|		КОГДА ПараметрВыработки ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА уатВыработка.ПараметрВыработки.Временный И &ВыводитьВремяВФорматеЧЧММ
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(СУММА(КоличествоОборот) / 60 КАК ЧИСЛО(15, 0))) - СУММА(КоличествоОборот) / 60 > 0
	|							ТОГДА (ВЫРАЗИТЬ(СУММА(КоличествоОборот) / 60 КАК ЧИСЛО(15, 0))) - 1
	|						ИНАЧЕ ВЫРАЗИТЬ(СУММА(КоличествоОборот) / 60 КАК ЧИСЛО(15, 0))
	|					КОНЕЦ + ВЫБОР
	|						КОГДА (ВЫРАЗИТЬ(СУММА(КоличествоОборот) / 60 КАК ЧИСЛО(15, 0))) - СУММА(КоличествоОборот) / 60 > 0
	|							ТОГДА СУММА(КоличествоОборот) / 60 - ((ВЫРАЗИТЬ(СУММА(КоличествоОборот) / 60 КАК ЧИСЛО(15, 0))) - 1)
	|						ИНАЧЕ СУММА(КоличествоОборот) / 60 - (ВЫРАЗИТЬ(СУММА(КоличествоОборот) / 60 КАК ЧИСЛО(15, 0)))
	|					КОНЕЦ * 60 / 100 КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ СУММА(КоличествоОборот)
	|	КОНЕЦ КАК ИзРегистра,
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаУпр),
	|	СУММА(Сумма)
	|ПО
	|	Контрагент,
	|	ПараметрВыработки//ОБЪЕКТСТРОИТЕЛЬСТВА5
	|{ИТОГИ ПО
	|	Контрагент.*,
	|	ТС.*,
	|	ТСГосударственныйНомер КАК ТСГосНомер,
	|	Маршрут.*,
	|	ПараметрВыработки.*,
	|	ПутЛист.*,
	|	Организация.*,
	|	//ОБЪЕКТСТРОИТЕЛЬСТВА6	
	|	Период,
	|	ПериодДень,
	|	ПериодНеделя,
	|	ПериодДекада,
	|	ПериодМесяц,
	|	ПериодКвартал,
	|	ПериодПолугодие,
	|	ПериодГод,
	|	ТСГаражныйНомер КАК ТСГарНомер}";
		
	ВыводитьВремяВФорматеЧЧММ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(глЗначениеПеременной("глТекущийПользователь"), ПланыВидовХарактеристик.уатПраваИНастройки.ФорматироватьВремяВОтчетах);
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ВыводитьВремяВФорматеЧЧММ", ?(ВыводитьВремяВФорматеЧЧММ, ИСТИНА, ЛОЖЬ));
	
	Если мУчетПоОбъектамСтроительства Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОБЪЕКТСТРОИТЕЛЬСТВА1", "уатВыработка.ОбъектСтроительства КАК ОбъектСтроительства,");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОБЪЕКТСТРОИТЕЛЬСТВА2", "ОбъектСтроительства.*,");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОБЪЕКТСТРОИТЕЛЬСТВА3", "уатВыработка.ОбъектСтроительства.*,");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОБЪЕКТСТРОИТЕЛЬСТВА4", "ОбъектСтроительства.*,");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОБЪЕКТСТРОИТЕЛЬСТВА5", ",ОбъектСтроительства");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОБЪЕКТСТРОИТЕЛЬСТВА6", "ОбъектСтроительства.*,");
	КонецЕсли;
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , 
	//                                                  <ПсевдонимПоля>, <Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик", 
	//                                ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТС"               		  , "ТС (все поля)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГарНомер"       		  , "ТС (гар. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСГосНомер"       		  , "ТС (гос. номер)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПараметрВыработки"		  , "Параметр выработки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПараметрВыработкиВременный1", "Параметр выработки (временной)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПутЛистНомер"			 	  , "Номер путевого листа");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПутЛист"					  , "Путевой лист");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВзаиморасчетовОборот"  , "Сумма регл. (оборот)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаУпрОборот"			  , "Сумма упр. (оборот)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаОборот"				  , "Сумма (оборот)");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"					  , "ТС выбыло");
	
	Если мУчетПоОбъектамСтроительства Тогда
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ОбъектСтроительства", "Объект строительства");
	КонецЕсли;
	
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПараметрВыработки");
	
	//УниверсальныйОтчет.ДобавитьПоказатель("Количество"         , "Количество параметра выработки" , Истина,, );
	УниверсальныйОтчет.ДобавитьПоказатель("ИзРегистра"		   , "Количество параметра выработки" , Истина,, );
	УниверсальныйОтчет.ДобавитьПоказатель("Сумма"              , "Сумма (регл)"  				  , Истина,"ЧДЦ=2", );
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпр"           , "Сумма (упр)"   				  , Истина,"ЧДЦ=2", );
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетов", "Сумма в валюте взаиморасчетов"  , Истина,"ЧДЦ=2", );
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	УниверсальныйОтчет.ДобавитьОтбор("ТСГосНомер", Ложь  , ВидСравнения.Содержит);
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло"  , Истина, ВидСравнения.Равно, Ложь);
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	//УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ТСГосНомер"      , ТипРазмещенияРеквизитовИзмерений.Отдельно);
	
	ЭлементУслОформления = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить(""); 
	ЭлементУслОформления.Использование = Истина; 
	ЭлементОбласть = ЭлементУслОформления.Область.Добавить("ИзРегистра", "ИзРегистра", ТипОбластиОформления.Поле); 
	ЭлементОтбор = ЭлементУслОформления.Отбор.Добавить("ПараметрВыработки.Временный","ПараметрВыработки_Временной","Параметр выработки.Временной"); 
	ЭлементОтбор.Значение = Истина;
	ЭлементОтбор.Использование = Истина; 
	ЭлементОтбор.ВидСравнения = ВидСравнения.Равно; 	
	
	ЭлементОформления = ЭлементУслОформления.Оформление.Формат; 
	ЭлементОформления.Использование = Истина; 
	Если ВыводитьВремяВФорматеЧЧММ Тогда
		ЭлементОформления.Значение = "ЧДЦ=2; ЧРД=:";
	Иначе
		ЭлементОформления.Значение = "ЧДЦ=3; ЧРД=,";
	КонецЕсли;
	
	//ПутьКДанным, Размещение = Неопределено, Положение = 3
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
КонецПроцедуры // СформироватьОтчет()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 
// 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
УниверсальныйОтчет.мРежимВводаПериода = 0;
	
мУчетПоОбъектамСтроительства = уатОбщегоНазначенияТиповые.уатЕстьИзмерениеРегистра("ОбъектСтроительства", РегистрыНакопления.уатЗатратыТС.СоздатьНаборЗаписей());

#КонецЕсли