#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета с использованием текста запроса
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		//уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Описание исходного текста запроса.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатДТП.Водитель КАК Водитель,
	|	уатДТП.ТС КАК ТС,
	|	уатДТП.ПричинаДТП КАК ПричинаДТП,
	|	уатДТП.Виновность КАК Виновность,
	|	уатДТП.Организация,
	|	СУММА(уатДТП.СуммаРемонта) КАК СуммаРемонта,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ уатДТП.Ссылка) КАК КоличествоДТП
	|{ВЫБРАТЬ
	|	уатДТП.Водитель КАК Водитель,
	|	уатДТП.ТС КАК ТС,
	|	уатДТП.ПричинаДТП КАК ПричинаДТП,
	|	уатДТП.Виновность КАК Виновность,
	|	уатДТП.Организация КАК Организация,
	|	СуммаРемонта,
	|	КоличествоДТП}
	|ИЗ
	|	Документ.уатДТП КАК уатДТП
	|ГДЕ
	|	(НЕ уатДТП.ПометкаУдаления)
	|	И уатДТП.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|{ГДЕ
	|	уатДТП.Виновность,
	|	уатДТП.Водитель,
	|	уатДТП.ТС,
	|	уатДТП.Организация,
	|		(ВЫБОР
	|				КОГДА уатДТП.ТС.ДатаВыбытия <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				КОГДА уатДТП.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЛОЖЬ
	|			КОНЕЦ) КАК ТСВыбыло}
	|
	|СГРУППИРОВАТЬ ПО
	|	уатДТП.Водитель,
	|	уатДТП.ТС,
	|	уатДТП.ПричинаДТП,
	|	уатДТП.Виновность,
	|	уатДТП.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаРемонта
	|{УПОРЯДОЧИТЬ ПО
	|	СуммаРемонта,
	|	КоличествоДТП}
	|ИТОГИ
	|	СУММА(СуммаРемонта),
	|	СУММА(КоличествоДТП)
	|ПО
	|	Водитель,
	|	ТС,
	|	ПричинаДТП,
	|	Виновность
	|{ИТОГИ ПО
	|	Водитель,
	|	Виновность,
	|	ТС,
	|	ПричинаДТП}";
	
	// В универсальном отчете включен флаг использования свойств и категорий.
	//Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
	//	
	//	// Добавление свойств и категорий поля запроса в таблицу полей.
	//	// Необходимо вызывать для каждого поля запроса, предоставляющего возможность использования свойств и категорий.
	//	
	//	// УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля(<ПсевдонимТаблицы>.<Поле> , <ПсевдонимПоля>,
	//		<Представление>, <Назначение>);
	//	УниверсальныйОтчет.ДобавитьСвойстваИКатегорииДляПоля("уатДТП.Заказчик", "Заказчик", "Заказчик",
	//		ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	//	
	//	// Добавление свойств и категорий в исходный текст запроса.
	//	УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса);
	//	
	//КонецЕсли;
	
	// Инициализация текста запроса построителя отчета
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	
	Пока УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
		
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
		
	КонецЦикла;
	
	// Представления полей отчета.
	// Необходимо вызывать для каждого поля запроса.
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Организация" , "Организация");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Водитель"    , "Водитель");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Виновность"  , "Виновность");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПричинаДТП"  , "Причина ДТП");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТС"          , "ТС");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТСВыбыло"    , "ТС выбыло");	
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаРемонта", "Сумма ремонта");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоДТП","Количество ДТП");
	
	//// Заполнение начальных настроек универсального отчета
	//УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаРемонта" , "Сумма ремонта" , Истина,"ЧДЦ=2", , );
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоДТП", "Количество ДТП", Истина,, , );
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Водитель");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Виновен");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ПричинаДТП");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ТС");
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("Виновность");
	УниверсальныйОтчет.ДобавитьОтбор("ПричинаДТП");
	УниверсальныйОтчет.ДобавитьОтбор("Водитель");
	УниверсальныйОтчет.ДобавитьОтбор("ТС");
	УниверсальныйОтчет.ДобавитьОтбор("ТСВыбыло", Истина, ВидСравнения.Равно , Ложь);	
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДанным>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	//УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения("ВыполнениеЗаказовНаТС", "ЗаказНаТС");	
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Ложь);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	
КонецПроцедуры // УстановитьНачальныеНастройки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	//ОтборВыполнениеЗаказовНаТС = Новый СписокЗначений;
	//Если Выполнено = Истина Тогда
	//	ОтборВыполнениеЗаказовНаТС.Добавить("Выполнено");
	//КонецЕсли;
	//Если ВыполненоЧастично = Истина Тогда
	//	ОтборВыполнениеЗаказовНаТС.Добавить("ВыполненоЧастично", "Выполнено частично");
	//КонецЕсли;
	//Если НеВыполнено = Истина Тогда
	//	ОтборВыполнениеЗаказовНаТС.Добавить("НеВыполнено", "Не выполнено");
	//КонецЕсли;
	//
	//УниверсальныйОтчет.ДобавитьОтбор("ВыполнениеЗаказовНаТС", СостояниеВыполненияЗаказов, ВидСравнения.ВСписке,
	//	ОтборВыполнениеЗаказовНаТС);
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);
	ТабличныйДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", глПраваУАТ);
	
	//УниверсальныйОтчет.ПостроительОтчета.Отбор.Удалить(УниверсальныйОтчет.ПостроительОтчета.Отбор.Индекс(
	//	УниверсальныйОтчет.ПостроительОтчета.Отбор["ВыполнениеЗаказовНаТС"]));
	//УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.ВыполнениеЗаказовНаТС.Отбор = Ложь;

КонецПроцедуры // СформироватьОтчет()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект);
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	уатОбщегоНазначения.уатСохранитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	уатОбщегоНазначения.уатВосстановитьРеквизитыОтчета(ЭтотОбъект, СтруктураСНастройками);
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал,
//	6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

#КонецЕсли
