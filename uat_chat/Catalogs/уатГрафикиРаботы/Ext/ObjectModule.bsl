////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения
Перем мДлинаСуток Экспорт; // Переменная хранит длину суток в секундах
Перем ТаблицаДляЗаписи Экспорт; // Таблица для записи в регистр сведений уатГрафикиРаботыПоВидамВремени
Перем СоответствиеИнтервалыРедактирования Экспорт; // Интервалы (месяцы) редактирования

Перем мСокращенноеРабочееВремя;
Перем мГрафикПолногоРабочегоВремени;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьДниВПроизводственномКалендаре(ДатаНачалаИнтервала, ДатаОкончанияИнтервала)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаИнтервала", ДатаНачалаИнтервала);
	Запрос.УстановитьПараметр("ДатаОкончанияИнтервала", ДатаОкончанияИнтервала);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачалаИнтервала И &ДатаОкончанияИнтервала";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеДней = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеДней.Вставить(Выборка.ДатаКалендаря,Выборка.ВидДня)
	КонецЦикла;
	
	Возврат СоответствиеДней;
	
КонецФункции

// Составляет описание рабочего времени каждой смены графика
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Соответствие: смена - структура ее рабочего времени (ЧасовВсего,ЧасовВечерних,ЧасовНочных)
//
Функция ПолучитьПродолжительностьРабочихСмен()
	
	Если ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Сменный Тогда 
		ПериодыРаботыТекст = "Справочник.уатГрафикиРаботы.Смены КАК ГрафикиРаботыСмены
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСмены.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
		|		ПО ГрафикиРаботыСмены.Смена = ГрафикиРаботыПериодыСмены.Ссылка
		|ГДЕ
		|	ГрафикиРаботыСмены.Ссылка = &Ссылка";
	Иначе
		
		ПериодыРаботыТекст = "Справочник.уатГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
		|	ГДЕ
		|		ГрафикиРаботыПериодыСмены.Ссылка = &Ссылка";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РАЗНОСТЬДАТ(ПериодыРабочихСмен.ВремяНачала, ПериодыРабочихСмен.ВремяОкончания, СЕКУНДА), 0)) КАК ЧасовВсего,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА РАЗНОСТЬДАТ(ПериодыРабочихСмен.НачалоВечерних, ПериодыРабочихСмен.ОкончаниеВечерних, СЕКУНДА) > 0
	|					ТОГДА РАЗНОСТЬДАТ(ПериодыРабочихСмен.НачалоВечерних, ПериодыРабочихСмен.ОкончаниеВечерних, СЕКУНДА)
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ЧасовВечерних,
	|	СУММА(ЕСТЬNULL(ВЫБОР
	|				КОГДА РАЗНОСТЬДАТ(ПериодыРабочихСмен.НачалоНочных1, ПериодыРабочихСмен.ОкончаниеНочных1, СЕКУНДА) > 0
	|					ТОГДА РАЗНОСТЬДАТ(ПериодыРабочихСмен.НачалоНочных1, ПериодыРабочихСмен.ОкончаниеНочных1, СЕКУНДА)
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА РАЗНОСТЬДАТ(ПериодыРабочихСмен.НачалоНочных2, ПериодыРабочихСмен.ОкончаниеНочных2, СЕКУНДА) > 0
	|					ТОГДА РАЗНОСТЬДАТ(ПериодыРабочихСмен.НачалоНочных2, ПериодыРабочихСмен.ОкончаниеНочных2, СЕКУНДА)
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК ЧасовНочных,
	|	ПериодыРабочихСмен.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ГрафикиРаботыПериодыСмены.ВремяНачала КАК ВремяНачала,
	|		ДОБАВИТЬКДАТЕ(ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА, ВЫБОР
	|				КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала <= ГрафикиРаботыПериодыСмены.ВремяОкончания
	|					ТОГДА 0
	|				ИНАЧЕ &ДлинаСуток
	|			КОНЕЦ) КАК ВремяОкончания,
	|		ВЫБОР
	|			КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала < &НачалоВечерних
	|				ТОГДА &НачалоВечерних
	|			ИНАЧЕ ГрафикиРаботыПериодыСмены.ВремяНачала
	|		КОНЕЦ КАК НачалоВечерних,
	|		ВЫБОР
	|			КОГДА ДОБАВИТЬКДАТЕ(ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА, ВЫБОР
	|						КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала <= ГрафикиРаботыПериодыСмены.ВремяОкончания
	|							ТОГДА 0
	|						ИНАЧЕ &ДлинаСуток
	|					КОНЕЦ) > &ОкончаниеВечерних
	|				ТОГДА &ОкончаниеВечерних
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА, ВЫБОР
	|						КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала <= ГрафикиРаботыПериодыСмены.ВремяОкончания
	|							ТОГДА 0
	|						ИНАЧЕ &ДлинаСуток
	|					КОНЕЦ)
	|		КОНЕЦ КАК ОкончаниеВечерних,
	|		ВЫБОР
	|			КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала < &НачалоНочных1
	|				ТОГДА &НачалоНочных1
	|			ИНАЧЕ ГрафикиРаботыПериодыСмены.ВремяНачала
	|		КОНЕЦ КАК НачалоНочных1,
	|		ВЫБОР
	|			КОГДА ДОБАВИТЬКДАТЕ(ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА, ВЫБОР
	|						КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала <= ГрафикиРаботыПериодыСмены.ВремяОкончания
	|							ТОГДА 0
	|						ИНАЧЕ &ДлинаСуток
	|					КОНЕЦ) > &ОкончаниеНочных1
	|				ТОГДА &ОкончаниеНочных1
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА, ВЫБОР
	|						КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала <= ГрафикиРаботыПериодыСмены.ВремяОкончания
	|							ТОГДА 0
	|						ИНАЧЕ &ДлинаСуток
	|					КОНЕЦ)
	|		КОНЕЦ КАК ОкончаниеНочных1,
	|		ВЫБОР
	|			КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала < &НачалоНочных2
	|				ТОГДА &НачалоНочных2
	|			ИНАЧЕ ГрафикиРаботыПериодыСмены.ВремяНачала
	|		КОНЕЦ КАК НачалоНочных2,
	|		ВЫБОР
	|			КОГДА ДОБАВИТЬКДАТЕ(ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА, ВЫБОР
	|						КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала <= ГрафикиРаботыПериодыСмены.ВремяОкончания
	|							ТОГДА 0
	|						ИНАЧЕ &ДлинаСуток
	|					КОНЕЦ) > &ОкончаниеНочных2
	|				ТОГДА &ОкончаниеНочных2
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ГрафикиРаботыПериодыСмены.ВремяОкончания, СЕКУНДА, ВЫБОР
	|						КОГДА ГрафикиРаботыПериодыСмены.ВремяНачала <= ГрафикиРаботыПериодыСмены.ВремяОкончания
	|							ТОГДА 0
	|						ИНАЧЕ &ДлинаСуток
	|					КОНЕЦ)
	|		КОНЕЦ КАК ОкончаниеНочных2,
	|		ГрафикиРаботыПериодыСмены.Ссылка КАК Ссылка
	|	ИЗ " + ПериодыРаботыТекст + ") КАК ПериодыРабочихСмен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыРабочихСмен.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ДлинаСуток", мДлинаСуток);
	ПустаяДата = '00010101';
	Запрос.УстановитьПараметр("НачалоВечерних",     ПустаяДата + 72000);  // 20:00:00
	Запрос.УстановитьПараметр("ОкончаниеВечерних",  ПустаяДата + 79199);  // 21:59:59
	Запрос.УстановитьПараметр("НачалоНочных1",      ПустаяДата);	      // 00:00:00
	Запрос.УстановитьПараметр("ОкончаниеНочных1",   ПустаяДата + 21600);  // 06:00:00
	Запрос.УстановитьПараметр("НачалоНочных2",      ПустаяДата + 79200);  // 22:00:00
	Запрос.УстановитьПараметр("ОкончаниеНочных2",   ПустаяДата + 108000); // 06:00:00 следующего дня
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПродолжительностьРабочихСменГрафика = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПродолжительностьРабочихСменГрафика.Вставить(Выборка.Ссылка,Новый Структура("ЧасовВсего,ЧасовВечерних,ЧасовНочных",Выборка.ЧасовВсего / 3600,Выборка.ЧасовВечерних / 3600,Выборка.ЧасовНочных / 3600));
	КонецЦикла;
	
	Возврат ПродолжительностьРабочихСменГрафика;
	
КонецФункции // ПолучитьПродолжительностьРабочихСмен()

Функция ВыходнойСУчетомПроизводственногоКалендаря(ВидДня, индДата, НомерПервогоВыходного, НомерВторогоВыходного)
	
	Если ВидДня = Неопределено Тогда // производственный календарь не заполнен
		НомерДня = ДеньНедели(индДата);
		Возврат НомерПервогоВыходного = НомерДня Или НомерВторогоВыходного = НомерДня;
	КонецЕсли;
	Если ВидДня = Перечисления.уатВидыДнейПроизводственногоКалендаря.Праздник Тогда
		Возврат Истина;
	ИначеЕсли ВидДня = Перечисления.уатВидыДнейПроизводственногоКалендаря.Рабочий Тогда
		НомерДня = ДеньНедели(индДата);
		Если НомерДня < 6 Тогда // обычный рабочий день
			Если НомерПервогоВыходного = НомерДня Или НомерВторогоВыходного = НомерДня Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе // перенесенный рабочий день	
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидДня = Перечисления.уатВидыДнейПроизводственногоКалендаря.Суббота Тогда
		Если НомерПервогоВыходного = 6 Или НомерВторогоВыходного = 6 Тогда 
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ВидДня = Перечисления.уатВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
		Если НомерПервогоВыходного = 7 Или НомерВторогоВыходного = 7 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции  //ВыходнойПоПроизводственномуКалендарю

Функция ОтмеченВРесурсеПроизводственногоКалендаря(ПроверяемаяДата, Ресурс, ТаблицаДанныхКалендаря)
	
	НайденнаяСтрока = ТаблицаДанныхКалендаря.Найти(ПроверяемаяДата, "ДатаКалендаря");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Возврат НайденнаяСтрока[Ресурс];
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет правильность заполнения периодов графика для шестидневной рабочей недели.
//
// Возвращаемое значение:
//	Булево. Истина если заполнено правильно.
//
Функция ПроверитьПравильностьЗаполненияПериодовДляПятиШестидневки() Экспорт
	
	СуммаВремени = 0; ЧасовВДне = 0;
	Для каждого ПериодДня из ПериодыСмены Цикл
		СуммаВремени = СуммаВремени + Час(ПериодДня.ВремяОкончания)*3600 + Минута(ПериодДня.ВремяОкончания)*60 + Секунда(ПериодДня.ВремяОкончания) - (Час(ПериодДня.ВремяНачала)*3600 + Минута(ПериодДня.ВремяНачала)*60 + Секунда(ПериодДня.ВремяНачала));
	КонецЦикла;
	
	Если ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Пятидневка Тогда
		ЧасовВДне = ДлительностьРабочейНедели / 5;
	ИначеЕсли ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Шестидневка Тогда
		ЧасовВДне = ДлительностьРабочейНедели / 6;
	ИначеЕсли ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Сменный Тогда
		Возврат Истина;
	КонецЕсли;
	
	РасхождениеВоВремени = ЧасовВДне * 3600 - СуммаВремени;
	
	Возврат РасхождениеВоВремени < 60 и РасхождениеВоВремени > - 60 // допускаем погрешность в минуту
	
КонецФункции

// Процедура заполняет календарь за определенный временной интервал
//
// Параметры:
//	ДатаНачалаИнтервала, ДатаОкончанияИнтервала - Интервал заполнения календаря
//
Процедура АвтозаполнениеКалендаря(ДатаНачалаИнтервала, ДатаОкончанияИнтервала) Экспорт
	
	Если ДатаОкончанияИнтервала < ДатаОтсчета Тогда
		Сообщить("Календарь не может быть заполнен на период, предшествующий указанной в нем дате отсчета!");
		Возврат;
	КонецЕсли;
	
	Календарь = ПолучитьДниВПроизводственномКалендаре(ДатаНачалаИнтервала, ДатаОкончанияИнтервала); // это соответствие: дата - вид дня
	ДнейВИнтервале = (КонецДня(ДатаОкончанияИнтервала) - НачалоДня(ДатаНачалаИнтервала) + 1) / мДлинаСуток;
	Если ДнейВИнтервале <> Календарь.Количество() Тогда
		Сообщить("Проверьте правильность заполнения регламентированного производственного календаря", СтатусСообщения.Важное);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	// сначала очистим записи за указанный период
	индДата = ДатаНачалаИнтервала;
	ПарамПоиска = Новый Структура("Дата");
	Пока индДата <= ДатаОкончанияИнтервала Цикл
		ПарамПоиска.Дата = индДата;
		СтрокиДляУдаления = ТаблицаДляЗаписи.НайтиСтроки(ПарамПоиска);
		Для каждого СтрокаУдаления из СтрокиДляУдаления Цикл
			ТаблицаДляЗаписи.Удалить(СтрокаУдаления);
		КонецЦикла;
		индДата = индДата + мДлинаСуток;
	КонецЦикла;
	
	ЭтоПятиШестидневка = ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Пятидневка Или ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Шестидневка;
	ЭтоПятидневкаНормальнойПродолжительности = ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Пятидневка И ДлительностьРабочейНедели = 40;
	ЭтоСменныйГрафик = ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Сменный;
	
	ПродолжительностьРабочихСменГрафика = ПолучитьПродолжительностьРабочихСмен(); // Соответствие: смена - структура ее рабочего времени 
	
	Если ЭтоСменныйГрафик Тогда
		
		ТаблицаСменПоДням   = Новый ТаблицаЗначений;
		ТаблицаСменПоДням.Колонки.Добавить("СписокСмен", Новый ОписаниеТипов("СписокЗначений"));
		
		КоличествоДнейВЦикле  = 0;
		Для каждого НомерДня из Смены Цикл
			КоличествоДнейВЦикле = Макс(КоличествоДнейВЦикле, НомерДня.НомерСтроки);
			Если ТаблицаСменПоДням.Количество() < НомерДня.НомерСтроки Тогда
				Пока Истина Цикл
					ТаблицаСменПоДням.Добавить();
					Если ТаблицаСменПоДням.Количество() = НомерДня.НомерСтроки Тогда
						Прервать;
					КонецЕсли
				КонецЦикла;
			КонецЕсли;
			ТаблицаСменПоДням[НомерДня.НомерСтроки-1].СписокСмен.Добавить(НомерДня.Смена);
		КонецЦикла;
		
		Если КоличествоДнейВЦикле = 0 Тогда
			Возврат
		КонецЕсли;
		
		НомерПервогоВыходного = 0;
		НомерВторогоВыходного = 0;
		Если КоличествоДнейВЦикле = 7 Тогда // вычислим выходные дни
			НомерДняДатыОтсчета = ДеньНедели(ДатаОтсчета);
			Для НомерДняДляСмены = 0 По 6 Цикл
				ЭтоРабочийДень = Ложь;
				Для каждого ЭлементСписка Из ТаблицаСменПоДням[НомерДняДляСмены].СписокСмен Цикл
					ЭтоРабочийДень = ЗначениеЗаполнено(ЭлементСписка.Значение);
					Если ЭтоРабочийДень Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ЭтоРабочийДень Тогда
					Если НомерПервогоВыходного = 0 Тогда
						НомерПервогоВыходного = ?(НомерДняДляСмены + НомерДняДатыОтсчета = 7, 7,(НомерДняДляСмены + НомерДняДатыОтсчета) % 7)
					ИначеЕсли НомерВторогоВыходного = 0 Тогда
						НомерВторогоВыходного = ?(НомерДняДляСмены + НомерДняДатыОтсчета = 7, 7,(НомерДняДляСмены + НомерДняДатыОтсчета) % 7)
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; 
		КонецЕсли;
		
	ИначеЕсли ЭтоПятиШестидневка Тогда
		
		НомерПервогоВыходного = ?(НЕ ЗначениеЗаполнено(ПервыйВыходной), 0, Перечисления.уатДниНедели.Индекс(ПервыйВыходной) + 1);
		НомерВторогоВыходного = ?(НЕ ЗначениеЗаполнено(ВторойВыходной), 0, Перечисления.уатДниНедели.Индекс(ВторойВыходной) + 1);
		
		// все дни графика имеют одинаковую структуру времени
		КоличествоЧасовВсего  = 0;
		КоличествоЧасовВечерних  = 0;
		КоличествоЧасовНочных  = 0;
		ИмеющиесяДанныеОСмене = ПродолжительностьРабочихСменГрафика[Ссылка];
		Если ИмеющиесяДанныеОСмене <> Неопределено Тогда
			КоличествоЧасовВсего    = ИмеющиесяДанныеОСмене.ЧасовВсего;
			КоличествоЧасовВечерних = ИмеющиесяДанныеОСмене.ЧасовВечерних;
			КоличествоЧасовНочных   = ИмеющиесяДанныеОСмене.ЧасовНочных;
		КонецЕсли;
		
	КонецЕсли; 
	
	индДата   = '00000000';
	ЧасовВДне = Окр(ДлительностьРабочейНедели/?(ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Шестидневка,6,5));
	
	ДатаНачалаЗаполнения = Макс(ДатаНачалаИнтервала,ДатаОтсчета);
	ДнейВИнтервале = (КонецДня(ДатаОкончанияИнтервала) - НачалоДня(ДатаНачалаЗаполнения) + 1) / мДлинаСуток;
	Для инд = 0 по ДнейВИнтервале-1 Цикл
		индДата = ДатаНачалаЗаполнения + инд * мДлинаСуток;
		ВидДня = Календарь[индДата];
		Если  ЭтоСменныйГрафик Тогда
			
			НомерДняДляСмены = ((индДата - ДатаОтсчета)/мДлинаСуток) % КоличествоДнейВЦикле;
			НомерДняДляСмены = ?(НомерДняДляСмены < 0, -НомерДняДляСмены, НомерДняДляСмены);
			СменыЗаДень   = ТаблицаСменПоДням[НомерДняДляСмены].СписокСмен;
			
			Для каждого ПериодДня из СменыЗаДень Цикл
				
				КоличествоЧасовВсего  = 0;
				КоличествоЧасовВечерних  = 0;
				КоличествоЧасовНочных  = 0;
				ИмеющиесяДанныеОСмене = ПродолжительностьРабочихСменГрафика[ПериодДня.Значение];
				Если ИмеющиесяДанныеОСмене <> Неопределено Тогда
					КоличествоЧасовВсего    = ИмеющиесяДанныеОСмене.ЧасовВсего;
					КоличествоЧасовВечерних = ИмеющиесяДанныеОСмене.ЧасовВечерних;
					КоличествоЧасовНочных   = ИмеющиесяДанныеОСмене.ЧасовНочных;
				КонецЕсли;
				
				ЗаписьПоСменам = ТаблицаДляЗаписи.Добавить();
				ЗаписьПоСменам.Дата     = индДата;
				ЗаписьПоСменам.Смена     = ПериодДня;
				ЗаписьПоСменам.Часы     = КоличествоЧасовВсего;
				ЗаписьПоСменам.ВечерниеЧасы = КоличествоЧасовВечерних;
				ЗаписьПоСменам.НочныеЧасы   = КоличествоЧасовНочных;
			КонецЦикла;
			
		ИначеЕсли ЭтоПятиШестидневка Тогда
			
			Если Не СуммированныйУчетРабочегоВремени И ВыходнойСУчетомПроизводственногоКалендаря(ВидДня, индДата, НомерПервогоВыходного, НомерВторогоВыходного) Тогда
				ЗаписьПоСменам  = ТаблицаДляЗаписи.Добавить();
				ЗаписьПоСменам.Дата			= индДата;
				ЗаписьПоСменам.Часы			= 0;
				ЗаписьПоСменам.ВечерниеЧасы	= 0;
				ЗаписьПоСменам.НочныеЧасы	= 0;
				Продолжить;	
			КонецЕсли;
		
			ЗаписьПоСменам  = ТаблицаДляЗаписи.Добавить();
			ЗаписьПоСменам.Дата			= индДата;
			
			// Для календаря-пятидневки нужно учесть предпраздничные дни
			Если ЭтоПятидневкаНормальнойПродолжительности И ВидДня = Перечисления.уатВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				ЗаписьПоСменам.Часы	= КоличествоЧасовВсего - 1;
			Иначе
				ЗаписьПоСменам.Часы	= КоличествоЧасовВсего;
			КонецЕсли;
			
			ЗаписьПоСменам.ВечерниеЧасы = КоличествоЧасовВечерних;
			ЗаписьПоСменам.НочныеЧасы   = КоличествоЧасовНочных;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура копирует входную таблицу в таблицу для записи в регистр.
//
// Параметры:
//	ТаблицаПоместить - входная таблица, по структуре полей должна соответствовать таблице записи,
//	ТаблицаДляЗаписи - результирующая таблица,
//	ДатаНачалаИнтервала, ДатаОкончанияИнтервала - период формирования.
//	
Процедура ПоместитьТаблицуВТаблицуДляЗаписи(ТаблицаПоместить, ТаблицаДляЗаписи, ДатаНачалаИнтервала, ДатаОкончанияИнтервала) Экспорт
	
	СтруктураПоиска = Новый Структура("Дата");
	СтруктураПоискаВТаблицеЗаписи = Новый Структура("Дата");
	
	//Для каждого СтрокаТаблицаПоместить из ТаблицаПоместить Цикл
	ДнейВТекущемМесяце = Окр((ДатаОкончанияИнтервала - ДатаНачалаИнтервала) / мДлинаСуток); //День(КонецМесяца(ДатаНачалаИнтервала));
	ДатаМесяца = ДатаНачалаИнтервала;
	Для индДата = 0 по ДнейВТекущемМесяце-1 Цикл
		ДатаМесяца = ДатаНачалаИнтервала + индДата * мДлинаСуток;
		// попробуем найти строку с соответствующей датой в таблице ИЗ которой помещаем
		СтруктураПоиска.Дата = ДатаМесяца;
		
		НайдСтрокиПоместить = ТаблицаПоместить.НайтиСтроки(СтруктураПоиска);
		//СтрокаТаблицаПоместить = 
		Если НайдСтрокиПоместить.Количество() > 0 Тогда
			
			// удалим имевшиеся ранее строки
			СтруктураПоискаВТаблицеЗаписи.Дата = ДатаМесяца;
			НайдСтроки = ТаблицаДляЗаписи.НайтиСтроки(СтруктураПоискаВТаблицеЗаписи);
			Если НайдСтроки.Количество()>0 Тогда
				Для каждого СтрокаТЗ Из НайдСтроки Цикл
					ТаблицаДляЗаписи.Удалить(СтрокаТЗ)
				КонецЦикла; 
			КонецЕсли;
			
			// нашли строки и теперь их поместим
			Для каждого СтрокаТЗ Из НайдСтрокиПоместить Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДляЗаписи.Добавить(),СтрокаТЗ);
			КонецЦикла;
		Иначе
			// если не нашли строку, Тогда удалим соответствующую строку из другой таблицы
			НайдСтроки = ТаблицаДляЗаписи.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТаблицыДляЗаписи Из НайдСтроки Цикл
				ТаблицаДляЗаписи.Удалить(СтрокаТаблицыДляЗаписи);
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отбирает данные за переданный интервал дат из регистра сведений
//
// Параметры: 
//  ДатаНачалаИнтервалаКалендаря - начало интервала дат
//  ДатаОкончанияИнтервалаКалендаря - окончание интервала дат
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьТаблицуЗаИнтервал(ДатаНачалаИнтервалаКалендаря, ДатаОкончанияИнтервалаКалендаря) Экспорт
	
	ЗапросПоСменам = Новый Запрос;
	ЗапросПоСменам.УстановитьПараметр("ДатаНачалаИнтервалаКалендаря",  НачалоДня(ДатаНачалаИнтервалаКалендаря));
	ЗапросПоСменам.УстановитьПараметр("ДатаОкончанияИнтервалаКалендаря", КонецДня(ДатаОкончанияИнтервалаКалендаря));
	ЗапросПоСменам.УстановитьПараметр("ГрафикРаботы", Ссылка);
	ЗапросПоСменам.УстановитьПараметр("ПоЧасам", 	Перечисления.уатВидыУчетаВремени.ПоЧасам);
	ЗапросПоСменам.УстановитьПараметр("Вечерние", 	Перечисления.уатВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросПоСменам.УстановитьПараметр("Ночные", 	Перечисления.уатВидыУчетаВремени.ПоНочнымЧасам);
	
	ЗапросПоСменам.Текст = "ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремениЧасы.Дата,
	|	ГрафикиРаботыПоВидамВремениЧасы.Месяц,						   
	|	ГрафикиРаботыПоВидамВремениЧасы.Время,						   
	|	ГрафикиРаботыПоВидамВремениЧасы.ОсновноеЗначение КАК Часы,
	|	ГрафикиРаботыПоВидамВремениЧасы.Смена,
	|	ГрафикиРаботыПоВидамВремениЧасы.ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремениНочные.ОсновноеЗначение КАК НочныеЧасы,
	|	ГрафикиРаботыПоВидамВремениВечерние.ОсновноеЗначение КАК ВечерниеЧасы
	|ИЗ
	|	РегистрСведений.уатГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениЧасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениВечерние
	|		ПО ГрафикиРаботыПоВидамВремениЧасы.ГрафикРаботы = ГрафикиРаботыПоВидамВремениВечерние.ГрафикРаботы И ГрафикиРаботыПоВидамВремениЧасы.Дата = ГрафикиРаботыПоВидамВремениВечерние.Дата И (ГрафикиРаботыПоВидамВремениВечерние.ВидУчетаВремени = &Вечерние)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремениНочные
	|		ПО ГрафикиРаботыПоВидамВремениЧасы.ГрафикРаботы = ГрафикиРаботыПоВидамВремениНочные.ГрафикРаботы И ГрафикиРаботыПоВидамВремениЧасы.Дата = ГрафикиРаботыПоВидамВремениНочные.Дата И (ГрафикиРаботыПоВидамВремениНочные.ВидУчетаВремени = &Ночные)
	|
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремениЧасы.ГрафикРаботы = &ГрафикРаботы И
	|	ГрафикиРаботыПоВидамВремениЧасы.Дата >= &ДатаНачалаИнтервалаКалендаря И
	|	ГрафикиРаботыПоВидамВремениЧасы.Дата <= &ДатаОкончанияИнтервалаКалендаря И
	|	(ГрафикиРаботыПоВидамВремениЧасы.Смена = ЗНАЧЕНИЕ(Справочник.уатСмены.ПустаяСсылка) И ГрафикиРаботыПоВидамВремениЧасы.ВидУчетаВремени = &ПоЧасам
	|		ИЛИ ГрафикиРаботыПоВидамВремениЧасы.Смена <> ЗНАЧЕНИЕ(Справочник.уатСмены.ПустаяСсылка))";
	
	ПоместитьТаблицуВТаблицуДляЗаписи(ЗапросПоСменам.Выполнить().Выгрузить(), ТаблицаДляЗаписи, ДатаНачалаИнтервалаКалендаря, ДатаОкончанияИнтервалаКалендаря);
	
КонецПроцедуры

Функция ВремяНачалаСмены(Смена)
	Если Смена.ПериодыСмены.Количество() = 0 Тогда
		//если в смене нет интервалов, будем считать что есть один нулевой интервал
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	|	МИНИМУМ(ВремяРаботы.ВремяНачала) КАК ВремяНачала,
	|	МАКСИМУМ(ВремяРаботы.ВремяОкончания) КАК ВремяОкончания
	|ИЗ
	|	(ВЫБРАТЬ
	|		СменыПериодыСмены.ВремяНачала КАК ВремяНачала,
	|		СменыПериодыСмены.ВремяОкончания КАК ВремяОкончания
	|	ИЗ
	|		Справочник.уатСмены.ПериодыСмены КАК СменыПериодыСмены
	|	ГДЕ
	|		СменыПериодыСмены.Ссылка = &Смена) КАК ВремяРаботы";
		
	Запрос.УстановитьПараметр("Смена", Смена);			   
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Время = Результат.ВремяНачала - НачалоДня(Результат.ВремяНачала);
		Возврат Время;
	КонецЕсли;	
	Возврат 0;
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СТАНДАРТНЫХ СОБЫТИЙ ОБЪЕКТА

Процедура ПередЗаписью(Отказ)
	
	ТБл = Месторождения.Выгрузить();
	Тбл.Колонки.Добавить("Инд",Новый ОписаниеТипов("Число"));
	Тбл.ЗаполнитьЗначения(1,"Инд");
	Тбл.Свернуть("Месторождение","Инд");
	Для каждого Стр из Тбл Цикл
		Если Стр.Инд>1 ТОгда
			Сообщить("Месторождение "+Стр.Месторождение+" указано : "+Стр.ИНд+" раза");
			Отказ=Истина;
		КонецЕСЛИ;
	КонецЦикла;
	
		Возврат;
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВСправочниках(ЭтотОбъект, Отказ, , Права);
	 
	// так было ранее
	мСокращенноеРабочееВремя      = Ссылка.СокращенноеРабочееВремя;
	мГрафикПолногоРабочегоВремени = Ссылка.ГрафикПолногоРабочегоВремени;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		Возврат;
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьПравильностьЗаполненияПериодовДляПятиШестидневки() Тогда
		Сообщить("Количество часов за неделю не совпадает с расчетным!");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрафикПолногоРабочегоВремени) Тогда
		Если ГрафикПолногоРабочегоВремени.СокращенноеРабочееВремя Тогда
			Сообщить("Нельзя в качестве графика полного рабочего времени указывать график сокращенного рабочего времени");
			Отказ = Истина;
		КонецЕсли;
		
		Если Не СокращенноеРабочееВремя Тогда
			Сообщить("График полного рабочего времени указывается только для сокращенного рабочего времени!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	МассивМесяцев = Новый Массив;
	Для каждого Элемент Из СоответствиеИнтервалыРедактирования Цикл
		МассивМесяцев.Добавить(Элемент.Ключ)
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивМесяцев"     , МассивМесяцев);
	Запрос.УстановитьПараметр("парамТекущийГрафик", Ссылка);
	
	// Получим таблицу сведений о производственном календаре за нужные месяцы
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|	РегламентированныйПроизводственныйКалендарь.Пятидневка,
	|	РегламентированныйПроизводственныйКалендарь.Шестидневка,
	|	РегламентированныйПроизводственныйКалендарь.КалендарныеДни,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) В (&МассивМесяцев)";
	
	ПроизводственныйКалендарь = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписейЗаДеньПоВремени = РегистрыСведений.уатГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Установить(Ссылка);
	
	// запишем отредактированные месяцы
	Ном = 1; Колич = СоответствиеИнтервалыРедактирования.Количество();
	Для каждого Элемент из СоответствиеИнтервалыРедактирования Цикл
		#Если Клиент Тогда
			Состояние("Подождите, выполняется запись календарного графика... " + Ном + "/" + Колич + "");
		#КонецЕсли
		Ном = Ном + 1;
		
		ДатаИзСписка = Элемент.Ключ;
		
		ДатаНачалаИнтервалаИзСписка = НачалоМесяца(ДатаИзСписка);
		ДатаОкончанияИнтервалаИзСписка = КонецМесяца(ДатаИзСписка);
		
		ДнейВИнтервале = Окр((ДатаОкончанияИнтервалаИзСписка - ДатаНачалаИнтервалаИзСписка) / мДлинаСуток);
		
		НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Установить(ДатаНачалаИнтервалаИзСписка);
		
		СтруктураПоиска = Новый Структура("Дата");
		
		Для инд = 0 по ДнейВИнтервале - 1 Цикл
			ИтогоЧасовВсего    = 0;
			ИтогоЧасовВечерних = 0;
			ИтогоЧасовНочных   = 0;
			
			индДата = ДатаНачалаИнтервалаИзСписка + инд * мДлинаСуток;
			
			СтруктураПоиска.Дата = индДата;
			НайденныеСтроки      = ТаблицаДляЗаписи.НайтиСтроки(СтруктураПоиска);
			ПризнакСмены = Ложь;
			// выбрали строки по дате, теперь будем их записывать
			Для каждого СтрокаТаблицаДляЗаписи   из НайденныеСтроки   Цикл
				флТекСменаЭлементСписка = (ТипЗнч(СтрокаТаблицаДляЗаписи.Смена) = Тип("ЭлементСпискаЗначений"));
				Если флТекСменаЭлементСписка И ЗначениеЗаполнено(СтрокаТаблицаДляЗаписи.Смена.Значение)
					ИЛИ (НЕ флТекСменаЭлементСписка) И ЗначениеЗаполнено(СтрокаТаблицаДляЗаписи.Смена) Тогда //это сменный график
					
					КоличествоЧасовВсего     = СтрокаТаблицаДляЗаписи.Часы;
					КоличествоЧасовВечерних  = СтрокаТаблицаДляЗаписи.ВечерниеЧасы;
					КоличествоЧасовНочных    = СтрокаТаблицаДляЗаписи.НочныеЧасы;
					
					ИтогоЧасовВсего     = КоличествоЧасовВсего;
					ИтогоЧасовВечерних  = КоличествоЧасовВечерних;
					ИтогоЧасовНочных    = КоличествоЧасовНочных;
					
					ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
					ЗаписьПоВУВ.ГрафикРаботы      = Ссылка;
					ЗаписьПоВУВ.ВидУчетаВремени   = Перечисления.уатВидыУчетаВремени.ПоДням;
					Если СтрокаТаблицаДляЗаписи.Смена <> Неопределено Тогда
						Если ТипЗнч(СтрокаТаблицаДляЗаписи.Смена) = Тип("ЭлементСпискаЗначений") Тогда
							ЗаписьПоВУВ.Смена = СтрокаТаблицаДляЗаписи.Смена.Значение;
						Иначе	
							ЗаписьПоВУВ.Смена = СтрокаТаблицаДляЗаписи.Смена;
						КонецЕсли;
					КонецЕсли;	
					
					ЗаписьПоВУВ.Дата     = индДата;
					
					Попытка
						ЗаписьПоВУВ.Время = индДата + ?(ПустаяСтрока(СтрокаТаблицаДляЗаписи.Смена.Значение),0,ВремяНачалаСмены(СтрокаТаблицаДляЗаписи.Смена.Значение));
					Исключение
						ЗаписьПоВУВ.Время = индДата + ?(ПустаяСтрока(СтрокаТаблицаДляЗаписи.Смена),0,ВремяНачалаСмены(СтрокаТаблицаДляЗаписи.Смена));
					КонецПопытки; 
					
					ЗаписьПоВУВ.ОсновноеЗначение  = ИтогоЧасовВсего;
					ЗаписьПоВУВ.ДополнительноеЗначение = ?(ИтогоЧасовВсего > 0, 1, 0);
					ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Пятидневка",   ПроизводственныйКалендарь);
					ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Шестидневка",  ПроизводственныйКалендарь);
					ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "КалендарныеДни", ПроизводственныйКалендарь);
					ПризнакСмены = Истина;
					
				Иначе //не сменный график
					КоличествоЧасовВсего    = СтрокаТаблицаДляЗаписи.Часы;
					КоличествоЧасовВечерних = СтрокаТаблицаДляЗаписи.ВечерниеЧасы;
					КоличествоЧасовНочных   = СтрокаТаблицаДляЗаписи.НочныеЧасы;
					
					ИтогоЧасовВсего    = ИтогоЧасовВсего    + КоличествоЧасовВсего;
					ИтогоЧасовВечерних = ИтогоЧасовВечерних + КоличествоЧасовВечерних;
					ИтогоЧасовНочных   = ИтогоЧасовНочных   + КоличествоЧасовНочных;
					
				КонецЕсли;
			КонецЦикла;
			
			Если ПризнакСмены Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
			ЗаписьПоВУВ.ГрафикРаботы    = Ссылка;
			ЗаписьПоВУВ.ВидУчетаВремени = Перечисления.уатВидыУчетаВремени.ПоДням;
			ЗаписьПоВУВ.Дата            = индДата;
			ЗаписьПоВУВ.Время           = индДата;
			
			ЗаписьПоВУВ.ОсновноеЗначение  = ?(ИтогоЧасовВсего > 0, 1, 0);
			ЗаписьПоВУВ.ДополнительноеЗначение = ИтогоЧасовВсего;
			ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Пятидневка",   ПроизводственныйКалендарь);
			ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Шестидневка",  ПроизводственныйКалендарь);
			ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "КалендарныеДни", ПроизводственныйКалендарь);
			
			ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
			ЗаписьПоВУВ.ГрафикРаботы                            = Ссылка;
			ЗаписьПоВУВ.ВидУчетаВремени                         = Перечисления.уатВидыУчетаВремени.ПоЧасам;
			ЗаписьПоВУВ.Дата                                    = индДата;
			ЗаписьПоВУВ.Время                                   = индДата;
			ЗаписьПоВУВ.ОсновноеЗначение                        = ИтогоЧасовВсего;
			ЗаписьПоВУВ.ДополнительноеЗначение                  = ?(ИтогоЧасовВсего > 0, 1, 0);
			ЗаписьПоВУВ.ПроизводственныйКалендарьПятидневка     = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Пятидневка",   ПроизводственныйКалендарь);
			ЗаписьПоВУВ.ПроизводственныйКалендарьШестиДневка    = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "Шестидневка",  ПроизводственныйКалендарь);
			ЗаписьПоВУВ.ПроизводственныйКалендарьКалендарныеДни = ОтмеченВРесурсеПроизводственногоКалендаря(индДата, "КалендарныеДни", ПроизводственныйКалендарь);
			
			ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
			ЗаписьПоВУВ.ГрафикРаботы    = Ссылка;
			ЗаписьПоВУВ.ВидУчетаВремени = Перечисления.уатВидыУчетаВремени.ПоВечернимЧасам;
			ЗаписьПоВУВ.Дата            = индДата;
			ЗаписьПоВУВ.Время           = индДата;
			ЗаписьПоВУВ.ОсновноеЗначение= ИтогоЧасовВечерних;
			// ПроизводственныйКалендарьПятидневка 
			// ПроизводственныйКалендарьШестиДневка
			// ПроизводственныйКалендарьКалендарныеДни
			// ДополнительноеЗначение
			// ОсновноеЗначениеНорма
			// ДополнительноеЗначениеНорма
			// не записываются для ПоВечернимЧасам
			
			ЗаписьПоВУВ = НаборЗаписейЗаДеньПоВремени.Добавить();
			ЗаписьПоВУВ.ГрафикРаботы    = Ссылка;
			ЗаписьПоВУВ.ВидУчетаВремени = Перечисления.уатВидыУчетаВремени.ПоНочнымЧасам;
			ЗаписьПоВУВ.Дата            = индДата;
			ЗаписьПоВУВ.Время           = индДата;
			ЗаписьПоВУВ.ОсновноеЗначение= ИтогоЧасовНочных;
			// ПроизводственныйКалендарьПятидневка 
			// ПроизводственныйКалендарьШестиДневка
			// ПроизводственныйКалендарьКалендарныеДни
			// ДополнительноеЗначение
			// ОсновноеЗначениеНорма
			// ДополнительноеЗначениеНорма
			// не записываются для ПоНочнымЧасам
			
		КонецЦикла;
		
		НаборЗаписейЗаДеньПоВремени.Записать(Истина);
		НаборЗаписейЗаДеньПоВремени.Очистить();
	КонецЦикла;
	
	// переписываем норму времени в остальных месяцах календаря для сокращенного рабочего времени (в УАТ не используется)
	Если (мСокращенноеРабочееВремя ИЛИ СокращенноеРабочееВремя) И (НЕ мГрафикПолногоРабочегоВремени.Пустая()) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикиРаботыПоВидамВремени.Месяц
		|ИЗ
		|	РегистрСведений.уатГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &парамТекущийГрафик
		|	И (НЕ ГрафикиРаботыПоВидамВремени.Месяц В (&МассивМесяцев))";
		
		Выборка = Запрос.Выполнить().Выбрать();
		НаборЗаписейЗаДеньПоВремени = РегистрыСведений.уатГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
		НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование  = Истина;
		НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение		  = Ссылка;
		НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Использование         = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Значение = Выборка.Месяц;
			НаборЗаписейЗаДеньПоВремени.Прочитать();
			НаборЗаписейЗаДеньПоВремени.Записать(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//// Заполнение нормы времени для графиков сокращенного рабочего времени,
	//// опирающихся на текущий график как график полного рабочего времени 
	//Если Не СокращенноеРабочееВремя Тогда
	//	
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ГрафикиРаботы.Ссылка КАК ГрафикРаботы
	//	|ИЗ
	//	|	Справочник.уатГрафикиРаботы КАК ГрафикиРаботы
	//	|ГДЕ
	//	|	ГрафикиРаботы.ГрафикПолногоРабочегоВремени = &парамТекущийГрафик
	//	|	И ГрафикиРаботы.СокращенноеРабочееВремя";
	//	
	//	ВыборкаГрафик = Запрос.Выполнить().Выбрать();
	//	
	//	НаборЗаписейЗаДеньПоВремени = РегистрыСведений.уатГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	//	НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Использование  = Истина;
	//	НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Использование         = Истина;
	//	
	//	// переписываем норму времени для всех графиков сокращенного рабочего времени
	//	Пока ВыборкаГрафик.Следующий() Цикл
	//		НаборЗаписейЗаДеньПоВремени.Отбор.ГрафикРаботы.Значение = ВыборкаГрафик.ГрафикРаботы;
	//		Для каждого Элемент из СоответствиеИнтервалыРедактирования Цикл
	//			НаборЗаписейЗаДеньПоВремени.Отбор.Месяц.Значение = НачалоМесяца(Элемент.Ключ);
	//			НаборЗаписейЗаДеньПоВремени.Прочитать();
	//			НаборЗаписейЗаДеньПоВремени.Записать(Истина);
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	
	ТаблицаДляЗаписи.Очистить();
	СоответствиеИнтервалыРедактирования.Очистить();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

мДлинаСуток = 86400; // в секундах

ТаблицаДляЗаписи = Новый ТаблицаЗначений; 
ТаблицаДляЗаписи.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
ТаблицаДляЗаписи.Колонки.Добавить("Часы", Новый ОписаниеТипов("Число"));
ТаблицаДляЗаписи.Колонки.Добавить("ВечерниеЧасы", Новый ОписаниеТипов("Число"));
ТаблицаДляЗаписи.Колонки.Добавить("НочныеЧасы",  Новый ОписаниеТипов("Число"));
ТаблицаДляЗаписи.Колонки.Добавить("Смена");
ТаблицаДляЗаписи.Колонки.Добавить("Время", Новый ОписаниеТипов("Дата"));

СоответствиеИнтервалыРедактирования = Новый Соответствие;

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли