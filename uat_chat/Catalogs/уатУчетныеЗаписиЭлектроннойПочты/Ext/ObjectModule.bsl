////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт;	// Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения
Перем мНовыеГруппы;

Процедура ПроверитьОтветственныхЗаТранспортЭлектронныхПисем(Отказ, СтрокаОшибки)
	
	Для каждого СтрокаТЧ Из ДоступКУчетнойЗаписи Цикл
		Если СтрокаТЧ.Транспорт И НЕ СтрокаТЧ.Отправка Тогда
			ОбщегоНазначения.СообщитьОбОшибке(("Пользователю " + СтрокаТЧ.Пользователь + " предоставлено право осуществлять транспорт писем, но нет права их редактировать. Данное сочетание недопустимо."),, СтрокаОшибки);
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет проверку реквизитов объекта, обязательных для заполнения.
//
// Возвращаемое значение:
//   Строка - описание не заполненных полей.
//
Функция ПроверитьЗаполнениеОбязательныхПолей() Экспорт
	
	ТекстОшибок = "";
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(АдресЭлектроннойПочты) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Не указан адрес (E-mail) учетной записи.";
	КонецЕсли; 
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(SMTPСервер) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Не указано имя SMTP сервера.";
	КонецЕсли; 
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПортSMTP) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Не указан порт SMTP сервера.";
	КонецЕсли; 
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(POP3Сервер) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Не указано имя POP3 сервера.";
	КонецЕсли; 
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПортPOP3) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Не указан порт POP3 сервера.";
	КонецЕсли; 
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Логин) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + "Не указано имя пользователя для доступа к почтовому серверу.";
	КонецЕсли;
	
	Возврат СокрЛП(ТекстОшибок);
	
КонецФункции

// Функция определяет, есть ли ссылки в документах уатЭлектронноеПисьмо
//  на группу записей электронных писем
//
// Параметры
//  ГруппаУчетнойЗаписи - СправочникСсылка.ГруппыПисемУчетнойЗаписи
//
// Возвращаемое значение:
//   Булево, если есть ссылки
//
Функция ЕстьСсылки(ГруппаУчетнойЗаписи)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатЭлектронноеПисьмо.Ссылка
	|ИЗ
	|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
	|ГДЕ
	|	уатЭлектронноеПисьмо.ГруппаУчетнойЗаписи = &ГруппаУчетнойЗаписи
	|";
	
	Запрос.УстановитьПараметр("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Процедура, обработчик события ПередЗаписью объекта
//
Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВСправочниках(ЭтотОбъект, Отказ, , Права);
	
	СтрокаОшибки = "Учетная запись """ + Наименование + "<" + АдресЭлектроннойПочты + ">" + " не записана.";
	
	мНовыеГруппы = Неопределено;
	
	Если НЕ Константы.уатИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В настройках учета не установлено использование встроенного почтового клиента.",, СтрокаОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указано представление учетной записи.",, СтрокаОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаУдаленные) И ЕстьСсылки(ГруппаУдаленные) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(("В группе """ + ГруппаУдаленные + """ есть электронные письма. Данную группу нельзя устанавливать в качестве группы удаленных писем."),, СтрокаОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ГруппаЧерновики) И ЕстьСсылки(ГруппаЧерновики) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(("В группе """ + ГруппаЧерновики + """ есть электронные письма. Данную группу нельзя устанавливать в качестве группы черновиков."),, СтрокаОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверитьОтветственныхЗаТранспортЭлектронныхПисем(Отказ, СтрокаОшибки);
	
	Если ЭтоНовый() Тогда
		
		УстановитьСсылкуНового(Справочники.уатУчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор));
		
		мНовыеГруппы = Истина;
		ЭтотОбъект.ГруппаВходящие  = Справочники.уатГруппыПисемЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ЭтотОбъект.ГруппаИсходящие = Справочники.уатГруппыПисемЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ЭтотОбъект.ГруппаУдаленные = Справочники.уатГруппыПисемЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ЭтотОбъект.ГруппаЧерновики = Справочники.уатГруппыПисемЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор);
		
	Иначе
		
		Если ИспользоватьКлассификациюПисемПоПредметам <> Ссылка.ИспользоватьКлассификациюПисемПоПредметам Тогда
			
			Выборка = Справочники.уатГруппыПисемЭлектроннойПочты.Выбрать(, Ссылка);
			
			Пока Выборка.Следующий() И НЕ Отказ Цикл
				
				Объект = Выборка.ПолучитьОбъект();
				Объект.ИспользоватьПредметыПисем = ЭтотОбъект.ИспользоватьКлассификациюПисемПоПредметам;
				Попытка
					Объект.Записать();
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, СтрокаОшибки);
					Отказ = Истина;
				КонецПопытки;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Проверим предопределенные группы, в них не должно быть одинаковых значений
	ТаблицаПроверкиГрупп = Новый ТаблицаЗначений;
	ТаблицаПроверкиГрупп.Колонки.Добавить("Группа");
	ТаблицаПроверкиГрупп.Колонки.Добавить("Количество");
	
	Если ЗначениеЗаполнено(ГруппаВходящие) Тогда
		НоваяСтрока = ТаблицаПроверкиГрупп.Добавить();
		НоваяСтрока.Группа     = ГруппаВходящие;
		НоваяСтрока.Количество = 1;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ГруппаИсходящие) Тогда
		НоваяСтрока = ТаблицаПроверкиГрупп.Добавить();
		НоваяСтрока.Группа     = ГруппаИсходящие;
		НоваяСтрока.Количество = 1;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ГруппаУдаленные) Тогда
		НоваяСтрока = ТаблицаПроверкиГрупп.Добавить();
		НоваяСтрока.Группа     = ГруппаУдаленные;
		НоваяСтрока.Количество = 1;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ГруппаЧерновики) Тогда
		НоваяСтрока = ТаблицаПроверкиГрупп.Добавить();
		НоваяСтрока.Группа     = ГруппаЧерновики;
		НоваяСтрока.Количество = 1;
	КонецЕсли;
	
	Если ТаблицаПроверкиГрупп.Количество() > 0 Тогда
		ТаблицаПроверкиГрупп.Свернуть("Группа", "Количество");
		Для каждого СтрокаТаблицы Из ТаблицаПроверкиГрупп Цикл
			Если СтрокаТаблицы.Количество > 1 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("У предопределенных групп Входящие, Исходящие, Удаленные и Черновики не должно быть повторяющихся значений.",, СтрокаОшибки);
				Отказ = Истина;
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если АвтоПолучениеОтправкаСообщений Тогда
		Если НЕ ЗначениеЗаполнено(ОтветственныйЗаАвтоПолучениеОтправкуСообщений) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан ответственный за автополучение/отправку писем.",, СтрокаОшибки);
			Отказ = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(ИнтервалАвтоПолученияОтправкиСообщений) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан интервал автополучения/отправки писем.",, СтрокаОшибки);
			Отказ = Истина;
		Иначе
			СтрокаТЧ = ДоступКУчетнойЗаписи.Найти(ОтветственныйЗаАвтоПолучениеОтправкуСообщений, "Пользователь");
			Если СтрокаТЧ = Неопределено Тогда
				Отказ = Истина;
			Иначе
				Если НЕ СтрокаТЧ.Транспорт Тогда
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли; 
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("У ответственного за автополучение/отправку нет прав на транспорт писем.",, СтрокаОшибки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ПометкаУдаления Тогда
		Проверка = СокрЛП(ПроверитьЗаполнениеОбязательныхПолей());
		Если ЗначениеЗаполнено(Проверка) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Проверка,, СтрокаОшибки);
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура, обработчик события ПриЗаписи объекта
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если мНовыеГруппы = Истина Тогда
		
		СтрокаОшибки = "Учетная запись """ + Наименование + "<" + АдресЭлектроннойПочты + ">" + " не записана.";
		
		// Входящие
		НовыйОбъект = Справочники.уатГруппыПисемЭлектроннойПочты.СоздатьЭлемент();
		НовыйОбъект.УстановитьСсылкуНового(ГруппаВходящие);
		НовыйОбъект.Владелец                  = Ссылка;
		НовыйОбъект.Наименование              = "Входящие";
		НовыйОбъект.ИспользоватьПредметыПисем = ИспользоватьКлассификациюПисемПоПредметам;
		Попытка
			НовыйОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, СтрокаОшибки);
			Отказ = Истина;
		КонецПопытки;
		
		// Исходящие
		НовыйОбъект = Справочники.уатГруппыПисемЭлектроннойПочты.СоздатьЭлемент();
		НовыйОбъект.УстановитьСсылкуНового(ГруппаИсходящие);
		НовыйОбъект.Владелец                  = Ссылка;
		НовыйОбъект.Наименование              = "Исходящие";
		НовыйОбъект.ИспользоватьПредметыПисем = ИспользоватьКлассификациюПисемПоПредметам;
		Попытка
			НовыйОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, СтрокаОшибки);
			Отказ = Истина;
		КонецПопытки;
		
		// Удаленные
		НовыйОбъект = Справочники.уатГруппыПисемЭлектроннойПочты.СоздатьЭлемент();
		НовыйОбъект.УстановитьСсылкуНового(ГруппаУдаленные);
		НовыйОбъект.Владелец                  = Ссылка;
		НовыйОбъект.Наименование              = "Удаленные";
		НовыйОбъект.ИспользоватьПредметыПисем = ИспользоватьКлассификациюПисемПоПредметам;
		Попытка
			НовыйОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, СтрокаОшибки);
			Отказ = Истина;
		КонецПопытки;
		
		// Черновики
		НовыйОбъект = Справочники.уатГруппыПисемЭлектроннойПочты.СоздатьЭлемент();
		НовыйОбъект.УстановитьСсылкуНового(ГруппаЧерновики);
		НовыйОбъект.Владелец                  = Ссылка;
		НовыйОбъект.Наименование              = "Черновики";
		НовыйОбъект.ИспользоватьПредметыПисем = ИспользоватьКлассификациюПисемПоПредметам;
		Попытка
			НовыйОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, СтрокаОшибки);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли