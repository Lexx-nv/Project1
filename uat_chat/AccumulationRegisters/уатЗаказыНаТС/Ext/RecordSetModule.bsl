Перем мПериод          Экспорт; // Период движений
Перем мТаблицаДвижений Экспорт; // Таблица движений

Перем МетаданныеДокумента, МетаданныеТабЧасти, ИмяДокумента, ИмяТабличнойЧасти, ИмяТаблицы, СтруктураШапкиДокумента, Отказ, Заголовок; 


// Выполняет приход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьПриход() Экспорт

	уатОбщегоНазначенияТиповые.уатВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Приход);

КонецПроцедуры // ВыполнитьПриход()

// Выполняет расход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьРасход() Экспорт

	уатОбщегоНазначенияТиповые.уатВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Расход);

КонецПроцедуры // ВыполнитьРасход()

// Выполняет движения по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьДвижения() Экспорт

	Загрузить(мТаблицаДвижений);

КонецПроцедуры // ВыполнитьДвижения()

// Процедура контролирует остаток по данному регистру по переданному документу
// и его табличной части. В случае недостатка товаров выставляется флаг отказа и 
// выдается сообщение.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа, 
//  Параметры      - структура, содержащая значения параметров необходимых для контроля остатков
//  Отказ          - флаг отказа в проведении,
//  Заголовок      - строка, заголовок сообщения об ошибке проведения.
//
Процедура КонтрольОстатков(ДокументОбъект, ИмяТабЧасти, СтруктураШапки, ОтказПроведения, ЗаголовокСообщения) Экспорт
	
	Если ИмяТабЧасти <> "" Тогда  
		Если ДокументОбъект[ИмяТабЧасти].Количество()=0 Тогда //если в таб.части ничего нет - не надо проверять
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ИмяТабличнойЧасти 		= ИмяТабЧасти;
	Отказ 					= ОтказПроведения;
   	СтруктураШапкиДокумента = СтруктураШапки;
	Заголовок 				= ЗаголовокСообщения;


	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;

	Если ИмяТабЧасти <>"" Тогда
		ИмяТаблицы = ИмяДокумента + "." + СокрЛП(ИмяТабличнойЧасти);
	Иначе
		ИмяТаблицы = ИмяДокумента;
	КонецЕсли;

	Если ИмяТабЧасти <>"" Тогда
		МетаданныеТабЧасти       = МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧасти];
	КонецЕсли;

	Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
		КонтрольОстатков_МаршрутныйЛист(ДокументОбъект);
	Иначе
		Сообщить("Для документа "+ДокументОбъект+" не предусмотрен вызов процедуры 'Контроль остатков' модуля регистра 'Заказы на ТС'");
	КонецЕсли;
	
	ОтказПроведения = Отказ;
    ЗаголовокСообщения = Заголовок;

КонецПроцедуры // КонтрольОстатков()

Процедура КонтрольОстатков_МаршрутныйЛист(ДокументОбъект)

	ЕстьСпрЕдИзм = (Метаданные.Справочники.Найти("ЕдиницыИзмерения") <> Неопределено);
	Если ЕстьСпрЕдИзм тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МаршрутныйЛист.ЗаказГрузоотправителя								КАК ЗаказНаТС,
		|	МаршрутныйЛист.Номенклатура 							КАК Номенклатура,
		|	МаршрутныйЛист.КоличествоВЕдиницеХраненияОстатков 		КАК КоличествоДокументЕдХрОстатков,   	//количество по документу в единице измерения остатков
		|	МаршрутныйЛист.Количество 								КАК КоличествоДокумент, 				//количество в единице измерения документа
		|	МаршрутныйЛист.ЕдиницаИзмерения							КАК ЕдиницаИзмеренияДокумент,
		|	ЕстьNULL(уатЗаказыНаТСОстатки.КоличествоОстаток, 0)		КАК КоличествоОстатокЗаказ,			// остаток по заказу в единице хранения остатков  
		|	ЕстьNULL(уатЗаказыНаТСОстатки.ЕдиницаИзмерения, МаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу) КАК ЕдиницаИзмеренияЗаказ
		|ИЗ
		|	(ВЫБРАТЬ
		|		уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя 				 КАК ЗаказГрузоотправителя,
		|		уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.КрайнийСрокОтработки КАК ДатаВыполнения,
		|		уатМаршрутныйЛистЗаказы.Номенклатура 		 КАК Номенклатура,
		|		СУММА(уатМаршрутныйЛистЗаказы.Количество) 	 КАК Количество,         
		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения 	 КАК ЕдиницаИзмерения,
		|		СУММА(ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Количество * уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения.Коэффициент / уатМаршрутныйЛистЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3))) КАК КоличествоВЕдиницеХраненияОстатков,
		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу
		|	ИЗ
		|		Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|	ГДЕ
		|		уатМаршрутныйЛистЗаказы.Ссылка = &СсылкаМаршрутныйЛист
		|		И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = &ТипТочкиМаршрутаРазгрузка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
		|		уатМаршрутныйЛистЗаказы.Номенклатура,
		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения,
		|		уатМаршрутныйЛистЗаказы.ДатаВыполнения,
		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу
		|   ) КАК МаршрутныйЛист
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыНаТС.Остатки(&Момент, ) КАК уатЗаказыНаТСОстатки
		|		ПО МаршрутныйЛист.ЗаказГрузоотправителя.Контрагент = уатЗаказыНаТСОстатки.Заказчик
		|			И МаршрутныйЛист.ЗаказГрузоотправителя = уатЗаказыНаТСОстатки.ЗаказНаТС
		|			И МаршрутныйЛист.Номенклатура = уатЗаказыНаТСОстатки.Номенклатура
		|			И МаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу = уатЗаказыНаТСОстатки.ЕдиницаИзмерения
		|			И МаршрутныйЛист.ЗаказГрузоотправителя.КрайнийСрокОтработки = уатЗаказыНаТСОстатки.ДатаВыполнения";
	Иначе  //для случая УАТ+БП
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МаршрутныйЛист.ЗаказНаТС								КАК ЗаказНаТС,
		|	МаршрутныйЛист.Номенклатура 							КАК Номенклатура,
		|	МаршрутныйЛист.КоличествоВЕдиницеХраненияОстатков 		КАК КоличествоДокументЕдХрОстатков,   	//количество по документу в единице измерения остатков
		|	МаршрутныйЛист.Количество 								КАК КоличествоДокумент, 				//количество в единице измерения документа
		|	МаршрутныйЛист.ЕдиницаИзмерения							КАК ЕдиницаИзмеренияДокумент,
		|	ЕстьNULL(уатЗаказыНаТСОстатки.КоличествоОстаток,0)		КАК КоличествоОстатокЗаказ,			// остаток по заказу в единице хранения остатков  
		|	ЕстьNULL(уатЗаказыНаТСОстатки.ЕдиницаИзмерения, МаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу) КАК ЕдиницаИзмеренияЗаказ
		|ИЗ
		|	(ВЫБРАТЬ
		|		уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя 				КАК ЗаказНаТС,
		|		уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.КрайнийСрокОтработки КАК ДатаВыполнения,
		|		уатМаршрутныйЛистЗаказы.Номенклатура 		КАК Номенклатура,
		|		СУММА(уатМаршрутныйЛистЗаказы.Количество) 	КАК Количество,         
		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
		|		СУММА(уатМаршрутныйЛистЗаказы.Количество)   КАК КоличествоВЕдиницеХраненияОстатков,

		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу
		|	ИЗ
		|		Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|	ГДЕ
		|		уатМаршрутныйЛистЗаказы.Ссылка = &СсылкаМаршрутныйЛист
		|		И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = &ТипТочкиМаршрутаРазгрузка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
		|		уатМаршрутныйЛистЗаказы.Номенклатура,
		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения,
		|		уатМаршрутныйЛистЗаказы.ДатаВыполнения,
		|		уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу
		|   ) КАК МаршрутныйЛист
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыНаТС.Остатки(&Момент, ) КАК уатЗаказыНаТСОстатки
		|		ПО МаршрутныйЛист.ЗаказНаТС.Контрагент = уатЗаказыНаТСОстатки.Заказчик
		|			И МаршрутныйЛист.ЗаказНаТС = уатЗаказыНаТСОстатки.ЗаказНаТС
		|			И МаршрутныйЛист.Номенклатура = уатЗаказыНаТСОстатки.Номенклатура
		|			И МаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу = уатЗаказыНаТСОстатки.ЕдиницаИзмерения
		|			И МаршрутныйЛист.ЗаказНаТС.КрайнийСрокОтработки = уатЗаказыНаТСОстатки.ДатаВыполнения";
	КонецЕсли;
				   
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ЗАпрос.УстановитьПараметр("Момент",						ДокументОбъект.МоментВремени());
	Запрос.УстановитьПараметр("СсылкаМаршрутныйЛист",		ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТипТочкиМаршрутаРазгрузка",  Перечисления.уатТипыТочекМаршрута.Разгрузка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаСообщения = "";
	мЕстьСпрЕдИзмерения = уатРаботаСМетаданными.естьСпрЕдиницыИзмерения();
	Пока Выборка.Следующий() цикл
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.КоличествоОстатокЗаказ < Выборка.КоличествоДокумент тогда
			КоличествоПревышение = Выборка.КоличествоДокумент - Выборка.КоличествоОстатокЗаказ;  //превышение в единице хранения остатков
			СтрокаСообщения = "" + Символы.Таб + "Превышение списываемого количества для: '" + Выборка.ЗаказНаТС + "' по номенклатуре: '" + Выборка.Номенклатура  + "'."; 
			СтрокаСообщения = СтрокаСообщения + Символы.ПС;
			Если мЕстьСпрЕдИзмерения Тогда
				СтрокаСообщения = СтрокаСообщения + "Превышение: " + КоличествоПревышение
					+ " " + ?(Выборка.ЕдиницаИзмеренияЗаказ = Неопределено, "", Выборка.ЕдиницаИзмеренияЗаказ.Наименование) + "; ";
				СтрокаСообщения = СтрокаСообщения + "Неразвезенный остаток: " + Выборка.КоличествоОстатокЗаказ
					+ " " + ?(Выборка.ЕдиницаИзмеренияЗаказ = Неопределено, "", Выборка.ЕдиницаИзмеренияЗаказ.Наименование) + "; ";
				СтрокаСообщения = СтрокаСообщения + "Количество по документу: " + Выборка.КоличествоДокумент + " " + Выборка.ЕдиницаИзмеренияДокумент
					+ " (" + Выборка.КоличествоДокумент
					+ " " + ?(Выборка.ЕдиницаИзмеренияЗаказ = Неопределено, "", Выборка.ЕдиницаИзмеренияЗаказ.Наименование) + ").";
			Иначе
				СтрокаСообщения = СтрокаСообщения + "Превышение: "+ Выборка.КоличествоДокумент + " " + Выборка.ЕдиницаИзмеренияДокумент + " ";
				СтрокаСообщения = СтрокаСообщения + "Неразвезенный остаток: " 	+ Выборка.КоличествоОстатокЗаказ+ " ";
				СтрокаСообщения = СтрокаСообщения + "Количество по документу: " + Выборка.КоличествоДокумент + " " + Выборка.ЕдиницаИзмеренияДокумент+ " ";
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
