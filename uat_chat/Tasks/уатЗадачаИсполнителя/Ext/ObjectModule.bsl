
// УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтения:                БизнесПроцесс_Чтение ИЛИ Автор ИЛИ Исполнитель ИЛИ <исполнитель по адресации>
	// Добавления:            ЛОЖЬ
	// Изменения:             БизнесПроцесс_Чтение ИЛИ Автор ИЛИ Исполнитель ИЛИ <исполнитель по адресации>
	

	// Подготовка наборов права чтения.

	//// Чтение: набор №1.
	//Строка = Таблица.Добавить();
	//Строка.НомерНабора     = 1;
	//Строка.Чтение          = Истина;
	//Строка.Изменение       = Истина;
	//Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	//Строка.ЗначениеДоступа = Автор;
	//
	//// Чтение: набор №2.
	//Строка = Таблица.Добавить();
	//Строка.НомерНабора     = 2;
	//Строка.Чтение          = Истина;
	//Строка.Изменение       = Истина;
	//Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	//Строка.ЗначениеДоступа = Исполнитель;
	//
	//// Чтение: набор №3.
	//Строка = Таблица.Добавить();
	//Строка.НомерНабора     = 3;
	//Строка.Чтение          = Истина;
	//Строка.Изменение       = Истина;
	//Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	//Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
	
	// Бизнес-процесс не установлен, значит доступ не ограничивается бизнес-процессом,
	// т.е. предполагается, что задача создана вручную.
	
	//Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
	//	
	//	НаборыБизнесПроцесса = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	//	УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(БизнесПроцесс, НаборыБизнесПроцесса, Ссылка);
	//	
	//	// Добавление к наборам прав зависимых наборов бизнес-процесса по правам.
	//	УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыБизнесПроцесса);
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Конец УправлениеДоступом

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ЗадачаБылаВыполнена = Ссылка.Выполнена;
	Если НЕ ЗадачаБылаВыполнена И Выполнена Тогда
		Если НЕ РеквизитыАдресацииЗаполнены() Тогда
			Сообщить("Необходимо указать исполнителя задачи.", СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЗадачаБылаВыполнена И Выполнена Тогда
		Сообщить("Эта задача уже была выполнена ранее.", СтатусСообщения.Внимание);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если СрокИсполнения <> '00010101' И ДатаНачала > СрокИсполнения Тогда
		Сообщить("Дата начала исполнения не должна превышать крайний срок.", СтатусСообщения.Внимание);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ДатаИсполнения < НачалоДня(Дата) Тогда 
		Сообщить("Дата исполнения меньше даты назначения задачи.", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСобытияЗадачи();
	
	ЗадачаБылаВыполнена = Ложь;
	Если НЕ Ссылка.Пустая() Тогда
		ЗадачаБылаВыполнена = Ссылка.Выполнена;
	КонецЕсли;
	Если НЕ ЗадачаБылаВыполнена И Выполнена Тогда
		// Если задача выполнена, то запишем в реквизит Исполнитель того
		// пользователя, который фактически выполнил задачу. Это нам потом
		// потребуется для отчетов. Такую запись делаем только в том
		// случае, если в базе было не выполнено, а в объекте стало выполнено
		Если Исполнитель.Пустая() Тогда
			Исполнитель = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		Если ДатаИсполнения = Дата(1,1,1) Тогда
			ДатаИсполнения = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	Если Важность.Пустая() Тогда
		Важность = Перечисления.уатВажность.Средняя;
	КонецЕсли;
	
	Если ПустаяСтрока(ПредметСтрокой) Тогда 
		ПредметСтрокой = Строка(Предмет);
	КонецЕсли;	
	
	//ПредыдущаяПометкаУдаления = Ложь;
	//Если НЕ Ссылка.Пустая() Тогда
	//	ПредыдущаяПометкаУдаления = Ссылка.ПометкаУдаления;
	//КонецЕсли;
	//Если ПредыдущаяПометкаУдаления <> ПометкаУдаления Тогда
	//	ВложенныеБизнесПроцессы = БизнесПроцессыИЗадачиСервер.БизнесПроцессыВедущейЗадачи(Ссылка);
	//	Для Каждого ВложенныйБизнесПроцесс Из ВложенныеБизнесПроцессы Цикл
	//		БизнесПроцессОбъект = ВложенныйБизнесПроцесс.ПолучитьОбъект();
	//		БизнесПроцессОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	//	КонецЦикла;	
	//КонецЕсли;
	
	// УправлениеДоступом
	//ГруппаИсполнителейЗадач = Справочники.ГруппыИсполнителейЗадач.ГруппаИсполнителейЗадач(РольИсполнителя,
	//	ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	// Конец УправлениеДоступом
	
КонецПроцедуры
	
Процедура ЗаписатьСобытияЗадачи()
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.Выполнена <> Выполнена И Выполнена = Истина Тогда
		Комментарий = "Исполнитель: " + Строка(Исполнитель);
	КонецЕсли;	
	
	Если Выполнена <> Истина Тогда
		Если Ссылка.Исполнитель <> Исполнитель Тогда
			БылИсполнитель = Ссылка.Исполнитель;
			СталИсполнитель = Исполнитель;
			
			Комментарий = "От исполнителя: " + БылИсполнитель + " к исполнителю: " + СталИсполнитель;
		КонецЕсли;
		
		Если Ссылка.СрокИсполнения <> СрокИсполнения Тогда
			Комментарий = "Был: " + Строка(Ссылка.СрокИсполнения) + ", стал: " + Строка(СрокИсполнения);
		КонецЕсли;
		
		Если Ссылка.Важность <> Важность Тогда
			Комментарий = "Была: " + Строка(Ссылка.Важность) + ", стала: " + Строка(Важность);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, 
			"БизнесПроцесс,ТочкаМаршрута,Наименование,Исполнитель,РольИсполнителя,ОсновнойОбъектАдресации," + 
			"ДополнительныйОбъектАдресации,Важность,ДатаИсполнения,Автор,Описание,СрокИсполнения," + 
			"ДатаНачала,РезультатВыполнения,Предмет");
		Дата = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет проверку заполнения реквизитов адресации задачи
//Возвращаемое значение:
//	Истина, если все реквизиты заполнены
//
Функция РеквизитыАдресацииЗаполнены() Экспорт
	Возврат ЗначениеЗаполнено(Исполнитель);
КонецФункции
