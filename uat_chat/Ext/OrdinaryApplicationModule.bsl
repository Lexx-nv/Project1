//Глобальные переменные модуля УАТ==============================================
// УАТ (Управление автотранспортом)
Перем глОбработкаАвтоПолученияОтправкиЭлектронныхПисемУАТ	Экспорт;  // Переменная для модуля CRM
Перем глСоответствиеТекстовЭлектронныхПисемУАТ				Экспорт;  // Переменная для модуля CRM
Перем глПраваУАТ											Экспорт;  // Соответствие со значениями прав текущего пользователя
Перем глКомпонентаЗащитыУАТ                                 Экспорт;  // Переменная для загрузки внешней компоненты защиты

// УАТ (Управление автотранспортом)
//==============================================================================

Перем глОбщиеЗначения Экспорт; // Переменная содержит список значений требующихся при работе конфигурации

Перем глЗапрашиватьПодтверждениеПриЗакрытии Экспорт; // Признак запроса подтверждения перед закрытием системы
Перем АдресРесурсовОбозревателя Экспорт; // В переменной содержится значение 
										 // адреса ресурса данной конфигурации																			 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ГЛОБАЛЬНОГО КОНТЕКСТА

// Процедура - обработчик события "Перед началом работы системы".
// Параметры:
//  Отказ - Булево - признак ошибки 
//
Процедура ПередНачаломРаботыСистемы(Отказ)	
	УправлениеПользователями.ПроверитьВозможностьРаботыПользователя(Отказ);	
КонецПроцедуры

// Процедура - обработчик события "При начале работы системы".
//
Процедура ПриНачалеРаботыСистемы()
	
	ЧтениеОбменаПослеОбновленияКонфигурации();
	
	ФормаОповещенияЗадачОткрыта = Ложь;
	
	//глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ПервыйЗапуск = Ложь;

	уатОбщегоНазначения.уатИнициализацияСеанса();
	
	//ПроверитьПодключениеОбработчикаОжидания();
	
	// Проверка заполнения констант валют учетов
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаРегламентированногоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты регламентированного учета!");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("ВалютаУправленческогоУчета")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена константа валюты управленческого учета!");
	КонецЕсли;
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
	Если ЭтоФайловаяИБ Тогда
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если глЗначениеПеременной("глТекущийПользователь") = ПользовательДляВыполненияРеглЗаданий Тогда
			ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
			
			// с интервалом несколько секунд вызываем процедуру работы с регламентными заданиями
			ИнтервалДляОпроса = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();
			Если ЗначениеЗаполнено(ИнтервалДляОпроса) Тогда
				ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	ПараметрыСеанса.уатПредставлениеТСКакГосНомер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер);
	
	Если ВРег(СокрЛП(глЗначениеПеременной("глТекущийПользователь").Код)) = "ВОДИТЕЛЬ"
		Или ВРег(СокрЛП(глЗначениеПеременной("глТекущийПользователь").Код)) = "ВОДИТЕЛИ" Тогда
	//Если СокрЛП(глЗначениеПеременной("глТекущийПользователь").Код) = "Пользователь" Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			Обработка = Справочники.ВнешниеОбработки.НайтиПоНаименованию("АвтографВодитель");
			ДвоичныеДанные = Обработка.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
		    Форма.РежимРабочегоСтола = Истина;
			Форма.Открыть();
	    Исключение
		КонецПопытки
	КонецЕсли;			
	
	//Попытка
	//	Обр = Обработки.СервисныеФункции.Создать();
	//	Обр.Поехали();
	//Исключение
	//КонецПопытки;	
	
КонецПроцедуры // ПриНачалеРаботыСистемы()

Процедура ЧтениеОбменаПослеОбновленияКонфигурации()
	
	Если ИмяПользователя() = "1с_Рег_Работы" Тогда
		Обр = Обработки.ксОбменМеждуБазами.Создать();
		Обр.ОБМЕН();
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕСЛИ;
	
КонецПроцедуры

 Процедура ОбновлениеКонфигурацииИБ() Экспорт
   СтрокаСоединения=СтрокаСоединенияИнформационнойБазы();
   ПутьКСкрипту=КаталогВременныхФайлов()+"exchange.vbs";
   Скрипт=Новый ЗаписьТекста(ПутьКСкрипту,КодировкаТекста.ANSI);
   Скрипт.ЗаписатьСтроку("WScript.Sleep 3000"); // на всякий случай
   Скрипт.ЗаписатьСтроку("Set WshShell=CreateObject(""WScript.Shell"")");
   Команда=""""""+КаталогПрограммы()+"1CV8.EXE"""" CONFIG"+?(НСтр(СтрокаСоединения,"File")<>""," /F "+НСтр(СтрокаСоединения,"File")," /S"+НСтр(СтрокаСоединения,"Srvr")+"\"+НСтр(СтрокаСоединения,"Ref"))+" /NExchange /PExchange /UpdateDBCfg";
   Скрипт.ЗаписатьСтроку("ReturnCode=WshShell.Run("""+Команда+""",1,1)");
   Скрипт.ЗаписатьСтроку("If ReturnCode=0 Then"); // если обновились удачно, то пытаемся дочитать сообщение
   Команда=""""""+КаталогПрограммы()+"1CV8.EXE"""" ENTERPRISE"+?(НСтр(СтрокаСоединения,"File")<>""," /F "+НСтр(СтрокаСоединения,"File")," /S"+НСтр(СтрокаСоединения,"Srvr")+"\"+НСтр(СтрокаСоединения,"Ref"))+" /NExchange /PExchange";
   //Запускаем программу для пользователя
   Команда=""""""+КаталогПрограммы()+"1CV8.EXE"""" ENTERPRISE"+?(НСтр(СтрокаСоединения,"File")<>""," /F "+НСтр(СтрокаСоединения,"File")," /S"+НСтр(СтрокаСоединения,"Srvr")+"\"+НСтр(СтрокаСоединения,"Ref"))+" /N"""""+ИмяПользователя()+""""" /P";
   Скрипт.ЗаписатьСтроку("WshShell.Run """+Команда+""",1,0");
   Скрипт.ЗаписатьСтроку("End If");
   Скрипт.ЗаписатьСтроку("Set FSO=CreateObject(""Scripting.FileSystemObject"")");
   Скрипт.ЗаписатьСтроку("Set File=FSO.GetFile(WScript.ScriptFullName)");
   Скрипт.ЗаписатьСтроку("File.Delete");
   Скрипт.Закрыть();
   ЗапуститьПриложение(ПутьКСкрипту);
   //ЗавершитьРаботуСистемы(Ложь) ;  
КонецПроцедуры

// Процедура - обработчик события "Перед завершением работы системы".
// Параметры:
//  Отказ - Булево - признак ошибки 
//
Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПодтверждение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	    													  "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПодтверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	Если КонфигурацияИзменена() Тогда
		Если ПолучитьСоединенияИнформационнойБазы().Количество() = 1 ТОгда
			Если ПланыОбмена.ГлавныйУзел() <> Неопределено ТОгда  
				ОбновлениеКонфигурацииИБ();	
			КонецесЛИ;
		КонецЕСЛИ;
	КонецЕСЛИ;

КонецПроцедуры

// Процедура - обработчик события "При завершением работы системы".
//
Процедура ПриЗавершенииРаботыСистемы()
	уатОбщегоНазначения.уатЗавершитьРаботуСистемы(глПраваУАТ);
КонецПроцедуры

// Процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

// Открывает форму текущего пользователя для изменения его настроек.
//
// Параметры:
//  Нет.
//
Процедура ОткрытьФормуТекущегоПользователя() Экспорт

	Если НЕ ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан текущий пользователь.");
	Иначе
		Форма = глЗначениеПеременной("глТекущийПользователь").ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуТекущегоПользователя()


глСоответствиеТекстовЭлектронныхПисем = Новый Соответствие;

ТекущаяСтадияЗавершенияРаботыСистемы = 0;
АдресРесурсовОбозревателя = "UAT";