////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; //Переменная хранит значение валюты регламентированного учёта,
                   //полученное из констант.


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой акта об
	// оказании услуг
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта
	//
Функция ПечатьАктаОбОказанииУслуг()
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.уатРеализацияУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Номенклатура КАК ПростоНоменклатура,
	|	//ЕДИНИЦАИЗМЕРЕНИЯ
	|	Содержание КАК Товар,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка
	|ИЗ
	|	Документ.уатРеализацияУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|";
	
	СтрЕдИзмерения = ?(Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено,"Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения, ",
																					   "ВЫБОР
																						|		КОГДА
																						|			Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
																						|		ТОГДА
																						|			Номенклатура.БазоваяЕдиницаИзмерения.Представление
																						|		ИНАЧЕ
																						|			Номенклатура.ЕдиницаХраненияОстатков.Представление
																						|	КОНЕЦ КАК ЕдиницаИзмерения, ");
	ЗапросУслуги.Текст = стрЗаменить(ЗапросУслуги.Текст,"//ЕДИНИЦАИЗМЕРЕНИЯ",СтрЕдИзмерения);
	
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уэРеализацияУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") <> 0;
	
	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		
		Если ЕстьСкидки Тогда
			
			Скидка = СтрокаТабличнойЧасти.Сумма / (100 - СтрокаТабличнойЧасти.Скидка) * СтрокаТабличнойЧасти.Скидка;
			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = уатОбщегоНазначенияТиповые.уатФорматСумм(СтрокаТабличнойЧасти.Сумма + Скидка);
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	Если ТаблицаУслуги <> Неопределено Тогда
		
		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		
	Иначе
		
		Сумма    = 0;
		СуммаНДС = 0;
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС <> 0 Тогда
			ОбластьМакета.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		КонецЕсли;
			
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьАктаОбОказанииУслуг()
	
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ Проведен И Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, 
														 уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), 
														 Права);
		
	Иначе
		Если ИмяМакета = "КС2" Тогда
			ИмяФункцииПечати = "уатЗащищенныеФункции.уатПечать_КС2(ЭтотОбъект)";
		Иначе	
			ИмяФункцииПечати = "ПечатьАктаОбОказанииУслуг()";
		КонецЕсли;	
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
	КонецЕсли;

	
	уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект), Права);
	
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
//Функция ПолучитьСписокПечатныхФорм() Экспорт
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Акт",             "Акт об оказании услуг");
	Попытка
		Макет = ПолучитьОбщийМакет("уатКС2_стм");
		СтруктураМакетов.Вставить("КС2","Форма КС-2");
	Исключение
	КонецПопытки;
	
	Возврат СтруктураМакетов ;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//используется в УЭ
Процедура ЗаполнитьУслугиПоТЧ(ТЧ, СтруктураПараметров) Экспорт
	Если НЕ Услуги.Количество() = 0  Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Таб. часть Услуги не пустая. Очистить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Услуги.Очистить();
		КонецЕсли;  
	КонецЕсли;
	флПоЗаказам = Ложь;
	СтруктураПараметров.Свойство("ПоЗаказам",флПоЗаказам);	
	курсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		НоваяСтрока = Услуги.Добавить();
		СтрокаСодержание = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТЧ.Услуга), "", Строка(СтрокаТЧ.Услуга))
		+ ?(СтруктураПараметров.ПоЗаказам, " Заказ :" + Строка(СтрокаТЧ.Заказ), "" ) 
		+ ?(СтруктураПараметров.ПоОперациям, " Операция :" + Строка(СтрокаТЧ. Операция), "" );
		НоваяСтрока.Номенклатура     = СтрокаТЧ.Услуга;
		НоваяСтрока.Содержание       = СтрокаСодержание;
		НоваяСтрока.Количество       = СтрокаТч.Количество;
		НоваяСтрока.СтавкаНДС        = СтрокаТЧ.СтавкаНДС;
		
		мСуммаРегл 					 = СтрокаТЧ.СуммаРегл - ?(СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСуммаРегл,
						                                                                     мВалютаРегламентированногоУчета,
			                                                                                 ВалютаДокумента,
																							 1,
																							 курсВалютыДокумента.Курс,
																							 1,
																							 курсВалютыДокумента.Кратность
																							 );
		
		НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаНДС,
						                                                                     мВалютаРегламентированногоУчета,
			                                                                                 ВалютаДокумента,
																							 1,
																							 курсВалютыДокумента.Курс,
																							 1,
																							 курсВалютыДокумента.Кратность
																							 );
		НоваяСтрока.Цена 			 = НоваяСтрока.Сумма/НоваяСтрока.Количество;
		
		Если флПоЗаказам тогда
			НоваяСтрока.Заказ		 = СтрокаТЧ.Заказ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


#КонецЕсли

//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатСчетНаОплатуПокупателю") Тогда
		// Заполнение шапки
		ВалютаДокумента 		  = ДанныеЗаполнения.ВалютаДокумента;
		ДоговорКонтрагента 		  = ДанныеЗаполнения.ДоговорКонтрагента;
		Комментарий 			  = ДанныеЗаполнения.Комментарий;
		Контрагент 				  = ДанныеЗаполнения.Контрагент;
		КратностьВзаиморасчетов   = ДанныеЗаполнения.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		  = ДанныеЗаполнения.КурсВзаиморасчетов;
		Организация 			  = ДанныеЗаполнения.Организация;
		Ответственный 			  = ДанныеЗаполнения.Ответственный;
		БанковскийСчетОрганизации = ДанныеЗаполнения.СтруктурнаяЕдиница;
		СуммаВключаетНДС 		  = ДанныеЗаполнения.СуммаВключаетНДС;
		СуммаДокумента 			  = ДанныеЗаполнения.СуммаДокумента;
		УчитыватьНДС 			  = ДанныеЗаполнения.УчитыватьНДС;
		ДокументОснование		  = ДанныеЗаполнения.Ссылка;
		Для Каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание 	 = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС 	 = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма 		 = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС 	 = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена 		 = ТекСтрокаУслуги.Цена;
		КонецЦикла;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	Документы.уатРеализацияУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьВыставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатРеализацияУслуг.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатРеализацияУслуг.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", , Отказ, Заголовок);
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если НЕ ЭтоОбъединениеСБП И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
	   И НЕ ЗначениеЗаполнено(Сделка) тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение ""Сделка""",Отказ,Заголовок);
   	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
