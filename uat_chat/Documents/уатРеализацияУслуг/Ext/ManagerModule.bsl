
// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
    "ВЫБРАТЬ
    |	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
    |	уатРеализацияУслугУслуги.Ссылка КАК Регистратор,
    |	уатРеализацияУслугУслуги.Ссылка.Дата КАК Период,
    |	уатРеализацияУслугУслуги.Ссылка.Организация КАК Организация,
    |	уатРеализацияУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
    |	уатРеализацияУслугУслуги.Ссылка.ОбъектСтроительства КАК ОбъектСтроительства,
    |	уатРеализацияУслугУслуги.Номенклатура,
    |	уатРеализацияУслугУслуги.СтавкаНДС,
    |	уатРеализацияУслугУслуги.Количество,
    |	уатРеализацияУслугУслуги.Сумма,
    |	уатРеализацияУслугУслуги.СуммаНДС,
    |	уатРеализацияУслугУслуги.Сумма КАК СуммаРегл
    |ИЗ
    |	Документ.уатРеализацияУслуг.Услуги КАК уатРеализацияУслугУслуги
    |ГДЕ
    |	уатРеализацияУслугУслуги.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	ТабДанных = мЗапрос.Выполнить().Выгрузить();
	
	СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ВалютаДокумента,ДокументСсылка.Дата);
	Для Каждого ТекСтрока ИЗ ТабДанных Цикл
		СуммаВсего = ТекСтрока.Сумма + ?(ДокументСсылка.СуммаВключаетНДС, 0, ТекСтрока.СуммаНДС);		
		ТекСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								СтруктураКурсаДокумента.Курс, 
								1,
								СтруктураКурсаДокумента.Кратность, 
								1);
								
		ТекСтрока.Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего, ДокументСсылка.ВалютаДокумента,
								ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
								СтруктураКурсаДокумента.Курс, 
								ДокументСсылка.КурсВзаиморасчетов,
								СтруктураКурсаДокумента.Кратность, 
								ДокументСсылка.КратностьВзаиморасчетов);
								
		ТекСтрока.СуммаРегл =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								ДокументСсылка.КурсВзаиморасчетов, 
								1,
								ДокументСсылка.КратностьВзаиморасчетов, 
								1); 

	КонецЦикла;
	
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("Регистратор");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Период");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Контрагент");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Организация");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр");

	НовСтрока = ТаблицаВзаиморасчетов.Добавить();
	НовСтрока.Регистратор        = ДокументСсылка;
	НовСтрока.Период             = ДокументСсылка.Дата;
	НовСтрока.ВидДвижения        = ВидДвиженияНакопления.Приход;
	НовСтрока.ДоговорКонтрагента = ДокументСсылка.ДоговорКонтрагента;
	НовСтрока.Контрагент         = ДокументСсылка.Контрагент;
	НовСтрока.Организация        = ДокументСсылка.Организация;
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если НЕ ЭтоОбъединениеСБП И ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда
		НовСтрока.Сделка         = ДокументСсылка.Сделка;
	КонецЕсли;
	
	НовСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
	                                                  ДокументСсылка.ВалютаДокумента, ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  ДокументСсылка.КурсВзаиморасчетов,
													  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  ДокументСсылка.КратностьВзаиморасчетов);
	НовСтрока.СуммаУпр            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
	                                                  ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
													  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  СтруктураДополнительныеСвойства.КурсУпр,
													  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  СтруктураДополнительныеСвойства.КратностьУпр);
													  
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов"   , ТаблицаВзаиморасчетов);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыставленныхУслуг", ТабДанных);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатПоступлениеАгрегатовШины.СерияНоменклатуры
	|ПОМЕСТИТЬ АгрегатыДокумента
	|ИЗ
	|	Документ.уатПоступлениеАгрегатов.Шины КАК уатПоступлениеАгрегатовШины
	|ГДЕ
	|	уатПоступлениеАгрегатовШины.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПоступлениеАгрегатовАккумуляторы.СерияНоменклатуры
	|ИЗ
	|	Документ.уатПоступлениеАгрегатов.Аккумуляторы КАК уатПоступлениеАгрегатовАккумуляторы
	|ГДЕ
	|	уатПоступлениеАгрегатовАккумуляторы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПоступлениеАгрегатовПрочиеАгрегаты.СерияНоменклатуры
	|ИЗ
	|	Документ.уатПоступлениеАгрегатов.ПрочиеАгрегаты КАК уатПоступлениеАгрегатовПрочиеАгрегаты
	|ГДЕ
	|	уатПоступлениеАгрегатовПрочиеАгрегаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.ТС,
	|	уатАгрегатыТССрезПоследних.МестоУстановки
	|ИЗ
	|	АгрегатыДокумента КАК АгрегатыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&МоментВремени, ) КАК уатАгрегатыТССрезПоследних
	|		ПО АгрегатыДокумента.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|ГДЕ
	|	(НЕ уатАгрегатыТССрезПоследних.СерияНоменклатуры ЕСТЬ NULL )
	|	И уатАгрегатыТССрезПоследних.СостояниеАгрегата <> ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)"; 
	
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", Новый Граница(ДокументСсылка.Дата, ВидГраницы.Исключая));
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	ВыборкаКонтроля = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаКонтроля.следующий() Цикл
		Если ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
			ТекстСообщения = "Аккумулятор ";	
		Иначе
			ТекстСообщения = "Шина ";	
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + ВыборкаКонтроля.СерияНоменклатуры.СерийныйНомер + " уже установлен";
		Если ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
			ТекстСообщения = ТекстСообщения + "а";	
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + " на транспортном средстве " + ВыборкаКонтроля.ТС;
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);	
	КонецЦикла;
	
КонецПроцедуры
