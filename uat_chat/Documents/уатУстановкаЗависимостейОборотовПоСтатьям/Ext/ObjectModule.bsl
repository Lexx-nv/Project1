////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЕсли;		
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Объект,НаименованиеОбъекта,ТекстПустоеЗначение,ПустаяСсылка=Неопределено)

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТекстПустоеЗначение="Неопределено" Тогда
			
			ТекстУсловия=ТекстУсловия+"
			|И (Исх"+НаименованиеОбъекта+"=&"+НаименованиеОбъекта+" ИЛИ Исх"+НаименованиеОбъекта+"=Неопределено)";
			
			Запрос.УстановитьПараметр(НаименованиеОбъекта,Объект);
			
		Иначе
			
			ТекстУсловия=ТекстУсловия+"
			|И (Исх"+НаименованиеОбъекта+"=&"+НаименованиеОбъекта+" ИЛИ Исх"+НаименованиеОбъекта+"=&"+ТекстПустоеЗначение+НаименованиеОбъекта+")";
			
			Запрос.УстановитьПараметр(НаименованиеОбъекта,Объект);
			Запрос.УстановитьПараметр(ТекстПустоеЗначение+НаименованиеОбъекта,ПустаяСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьРавенствоРеквизитов(ИсходныйОбъект,ЗависимыйОбъект)
	
	Равенство=Ложь;
	
	Если НЕ ЗначениеЗаполнено(ИсходныйОбъект)
		ИЛИ НЕ ЗначениеЗаполнено(ЗависимыйОбъект)
		ИЛИ ИсходныйОбъект=ЗависимыйОбъект Тогда
		
		Равенство=Истина;
		
	КонецЕсли;
	
	Возврат Равенство;
	
КонецФункции 

Функция ПроверкаНеоднозначнойЗависимости()
		
	ОднозначнаяЗависимость = Истина;
	
	Запрос = Новый Запрос;
	
	ТекстУсловия = "ИсхСтатьяОборотов=&ТекСтатьяОборотов";
	Запрос.УстановитьПараметр("ТекСтатьяОборотов",СтатьяОборотовВлияющая);
	
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Сценарий    ,"Сценарий"    ,"Пустой",Справочники.уатСценарииПланирования.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ЦФО         ,"ЦФО"         ,"Пустой",Справочники.Подразделения.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Проект      ,"Проект"      ,"Пустой",Справочники.Проекты.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Контрагент  ,"Контрагент"  ,"Пустой",Справочники.Контрагенты.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Номенклатура,"Номенклатура","Неопределено");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗависимостиОборотовПоСтатьям.ИсхСценарий КАК ИсхСценарий,
	|	ЗависимостиОборотовПоСтатьям.ИсхЦФО КАК ИсхЦФО,
	|	ЗависимостиОборотовПоСтатьям.ИсхПроект КАК ИсхПроект,
	|	ЗависимостиОборотовПоСтатьям.ИсхКонтрагент КАК ИсхКонтрагент,
	|	ЗависимостиОборотовПоСтатьям.ИсхНоменклатура КАК ИсхНоменклатура,
	|	ЗависимостиОборотовПоСтатьям.ЗависимаяСтатьяОборотов КАК ЗависимаяСтатьяОборотов,
	|	ЗависимостиОборотовПоСтатьям.Регистратор.Представление КАК Регистратор
	|ИЗ
	|	РегистрСведений.уатЗависимостиОборотовПоСтатьямБюджетирования.СрезПоследних(&ДатаНач,"+ТекстУсловия+") КАК ЗависимостиОборотовПоСтатьям";
	
	Запрос.УстановитьПараметр("ДатаНач",Дата);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ОднозначнаяЗависимость;
	Иначе
		
		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();
		
		Для Каждого ТекущаяЗависимость Из ТабЗависимыхСтатей Цикл
			
			Если (НЕ ЗависимостиОборотовПоСтатьям.Найти(ТекущаяЗависимость.ЗависимаяСтатьяОборотов,"ЗависимаяСтатьяОборотов")=Неопределено)
				И (НЕ (ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхСценарий,Сценарий)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхЦФО,ЦФО)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхПроект,Проект)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхНоменклатура,Номенклатура)
					И ПроверитьРавенствоРеквизитов(ТекущаяЗависимость.ИсхКонтрагент,Контрагент))) Тогда
				#Если Клиент Тогда
				Сообщить("Неоднозначная зависимость для статьи "+ТекущаяЗависимость.ЗависимаяСтатьяОборотов+".
				|Уже установлена следующая зависимость, пересекающаяся с текущей:
				|Документ: "+ТекущаяЗависимость.Регистратор+"
				|Сценарий: "+?(ТекущаяЗависимость.ИсхСценарий=Справочники.уатСценарииПланирования.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхСценарий)+"
				|ЦФО: "+?(ТекущаяЗависимость.ИсхЦФО=Справочники.Подразделения.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхЦФО)+"
				|Проект: "+?(ТекущаяЗависимость.ИсхПроект=Справочники.Проекты.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхПроект)+"
				|Контрагент: "+?(ТекущаяЗависимость.ИсхКонтрагент=Справочники.Контрагенты.ПустаяСсылка()," не указан",ТекущаяЗависимость.ИсхКонтрагент)+"
				|Номенклатура: "+?(ТекущаяЗависимость.ИсхНоменклатура=Неопределено," не указано",ТекущаяЗависимость.ИсхНоменклатура)+".");
                #КонецЕсли
				ОднозначнаяЗависимость=Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ОднозначнаяЗависимость;
		
	КонецЕсли;
	
КонецФункции // ПроверкаНеоднозначнойЗависимости()

// Проверяет отсутствие среди статей, рекурсивно зависящих от выбранной, выбранной статьи
//
Функция ПроверкаРекурсивнойЗависимости(ТекСтатьяОборотов,
										ТекЦФО,
										ТекПроект,
										ТекКонтрагент,
										ТекНоменклатура)

	ПроверкаПройдена=Истина;
	Запрос=Новый Запрос;
	
	ТекстУсловия="ИсхСтатьяОборотов=&ТекСтатьяОборотов";
	Запрос.УстановитьПараметр("ТекСтатьяОборотов",ТекСтатьяОборотов);
		
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,Сценарий,"Сценарий","Пустой",Справочники.уатСценарииПланирования.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекЦФО,"ЦФО","Пустой",Справочники.Подразделения.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекПроект,"Проект","Пустой",Справочники.Проекты.ПустаяСсылка());
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекКонтрагент,"Контрагент","Пустой",Справочники.Контрагенты.ПустаяСсылка());
	
	ДобавитьВСтрокуУсловия(Запрос,ТекстУсловия,ТекНоменклатура,"Номенклатура","Неопределено");
		
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимаяСтатьяОборотов КАК ЗависимаяСтатьяОборотов,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимыйЦФО КАК ЗависимыйЦФО,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимыйПроект КАК ЗависимыйПроект,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимыйКонтрагент КАК ЗависимыйКонтрагент,
	             |	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ЗависимаяНоменклатура КАК ЗависимаяНоменклатура
	             |ИЗ
	             |	РегистрСведений.уатЗависимостиОборотовПоСтатьямБюджетирования.СрезПоследних(&ДатаДокумента,"+ТекстУсловия+") КАК ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних";

	Запрос.УстановитьПараметр("ДатаДокумента",Дата);
	Запрос.УстановитьПараметр("Статья",ТекСтатьяОборотов);

	РезультатЗапроса=Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда

		Возврат ПроверкаПройдена;

	Иначе

		ТабЗависимыхСтатей=РезультатЗапроса.Выгрузить();

		Для Каждого ТекущаяСтатья Из ТабЗависимыхСтатей Цикл
		
			Если ТекущаяСтатья.ЗависимаяСтатьяОборотов=СтатьяОборотовВлияющая
				И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимыйЦФО,ЦФО)
				И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимыйПроект,Проект)
				И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимыйКонтрагент,Контрагент)
                И ПроверитьРавенствоРеквизитов(ТекущаяСтатья.ЗависимаяНоменклатура,Номенклатура) Тогда

				Возврат НЕ ПроверкаПройдена; 

			Иначе

				ПроверкаПройдена=ПроверкаРекурсивнойЗависимости(ТекущаяСтатья.ЗависимаяСтатьяОборотов,
																ТекущаяСтатья.ЗависимыйЦФО,
																ТекущаяСтатья.ЗависимыйПроект,
																ТекущаяСтатья.ЗависимыйКонтрагент,
																ТекущаяСтатья.ЗависимаяНоменклатура);
				Если Не ПроверкаПройдена Тогда

					Возврат ПроверкаПройдена;

				КонецЕсли;

			КонецЕсли;	
		
		КонецЦикла; 

	КонецЕсли;
	
	Возврат ПроверкаПройдена;

КонецФункции // ПроверкаРекурсивнойЗависимости()
 
// Проверяет список зависимостей на образование циклической
// зависимости
//
Функция ПроверкаЦиклическойЗависимости()

	ПроверкаПройдена=Истина;

	// Простая проверка. Если влияющая статья никогда не встречается среди зависимых в регистре, то
	// проверка пройдена

	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних.ИсхСтатьяОборотов
	|ИЗ
	|	РегистрСведений.уатЗависимостиОборотовПоСтатьямБюджетирования.СрезПоследних(&ДатаДокумента, ЗависимаяСтатьяОборотов=&ВлияющаяСтатья)
	|КАК ЗависимостиОборотовПоСтатьямБюджетированияСрезПоследних";

	мЗапрос.УстановитьПараметр("ДатаДокумента",Дата);
	мЗапрос.УстановитьПараметр("ВлияющаяСтатья",СтатьяОборотовВлияющая);

	Если мЗапрос.Выполнить().Пустой() Тогда

		Возврат ПроверкаПройдена;

	Иначе  // Поиск среди статей, рекурсивно зависящих от статей в строках ТЧ, влияющей статьи.

		Для Каждого Зависимость Из ЗависимостиОборотовПоСтатьям Цикл

			ПроверкаПройдена=ПроверкаРекурсивнойЗависимости(Зависимость.ЗависимаяСтатьяОборотов,
															Зависимость.ЗависимыйЦФО,
															Зависимость.ЗависимыйПроект,
															Зависимость.ЗависимыйКонтрагент,
															Зависимость.ЗависимаяНоменклатура);

			Если Не ПроверкаПройдена Тогда
				Возврат ПроверкаПройдена;
			КонецЕсли;
			  
		КонецЦикла;

	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции // ПроверкаЦиклическойЗависимости() 


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	Если Не ПроверкаЦиклическойЗависимости() Тогда
		ТекстСообщения = "Обнаружена циклическая зависимость статей!";
		Общегоназначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
	КонецЕсли;
	
	Если НЕ ПроверкаНеоднозначнойЗависимости() Тогда
		ТекстСообщения = "Обнаружена неоднозначная зависимость статей!";
		Общегоназначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
	КонецЕсли;

	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
    уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
    // Инициализация данных документа.
    Документы.уатУстановкаЗависимостейОборотовПоСтатьям.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
    // Подготовка наборов записей.
    уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
    // Отражение в разделах учета.
    уатПроведение_проф.ОтразитьЗависимостиОборотовПоСтатьямБюджетирования(ДополнительныеСвойства, Движения, Отказ);
    // Запись наборов записей.
    уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
    // Контроль возникновения отрицательного остатка.
    Документы.уатУстановкаЗависимостейОборотовПоСтатьям.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры	

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли




















