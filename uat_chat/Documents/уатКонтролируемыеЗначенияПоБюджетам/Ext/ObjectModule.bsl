////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЕсли;		
КонецПроцедуры

#КонецЕсли

//////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Таблица значений - обороты по контролирующему сценарию, соответствующие выбранным
//	 аналитическим измерениям табличной части документа
//
Функция ПолучитьОборотыКонтролирующегоСценария(СтруктураДанныхШапки)
	
	Если ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийПоВсем Тогда
		
		Запрос=Новый Запрос;
		ТекстЗапроса="ВЫБРАТЬ
		|	ОборотыБюджетовОбороты.Период КАК Период,
		|	ОборотыБюджетовОбороты.Период КАК НачалоКонтролируемогоПериода,
		|	ОборотыБюджетовОбороты.СтатьяОборотов КАК СтатьяОборотов,";
		
		Если КонтролироватьПроекты Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	ОборотыБюджетовОбороты.Проект КАК Проект,";
		КонецЕсли;
		
		Если КонтролироватьЦФО Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	ОборотыБюджетовОбороты.ЦФО КАК ЦФО,";
		КонецЕсли;
		
		Если КонтролироватьКонтрагентов Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	ОборотыБюджетовОбороты.Контрагент КАК Контрагент,";
		КонецЕсли;
		
		Если КонтролироватьНоменклатуру Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	ОборотыБюджетовОбороты.Номенклатура КАК Номенклатура,";
		КонецЕсли;
		
		// Пересчитываем в валюту сценария, для которого устанавливаются граничные значения
		ТекстЗапроса=ТекстЗапроса+"        
		|	ВЫРАЗИТЬ 
		|		(ВЫБОР 
		|			КОГДА &ВалютаСценарияПланирования=&ВалютаУпрУчета ТОГДА ОборотыБюджетовОбороты.СуммаУпрОборот
		|			КОГДА &ВалютаСценарияПланирования<>&ВалютаУпрУчета И КурсыСценарияПлан.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
		|				ОборотыБюджетовОбороты.СуммаУпрОборот*КурсыУпрУчета.Курс * КурсыСценарияПлан.Кратность 
		|				/ (КурсыСценарияПлан.Курс * КурсыУпрУчета.Кратность)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2))";
		
		Если ВидОтклоненияКонтролируемыхЗначений=Перечисления.ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Абсолютное Тогда
			ТекстЗапроса=ТекстЗапроса+" + &Отклонение КАК СуммаСценарияКонтроль";
			ПараметрОтклонение=Отклонение;
		Иначе
			ТекстЗапроса=ТекстЗапроса+"*&Отклонение КАК СуммаСценарияКонтроль";
			ПараметрОтклонение=1+Отклонение/100;
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ
		|	РегистрНакопления.уатОборотыБюджетов.Обороты(&ДатаНач, &ДатаКон,"
		+СтруктураДанныхШапки.КонтролирующийСценарийПериодичность+", Сценарий=&КонтролирующийСценарий) КАК ОборотыБюджетовОбороты	
		// Курсы валюты упр. учета
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|(ВЫБРАТЬ 
		|	ПериодПоследнейЗаписиКурсаНаДатуСценария.Дата, 
		|	КурсыВалют.Курс, 
		|	КурсыВалют.Кратность
		|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ
		|		Максимум(КурсыВнутр.Период) КАК Период,
		|		Дата
		|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ Период КАК Дата ИЗ
		|	РегистрНакопления.уатОборотыБюджетов.Обороты(&ДатаНач, &ДатаКон,"
		+СтруктураДанныхШапки.КонтролирующийСценарийПериодичность+", Сценарий=&КонтролирующийСценарий)) КАК Контр
		|	ПО Контр.Дата >= КурсыВнутр.Период
		|	И КурсыВнутр.Валюта = &ВалютаУпрУчета";
		Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
			ТекстЗапроса=ТекстЗапроса+"
		|	И КурсыВнутр.Сценарий=&Сценарий";
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|	СГРУППИРОВАТЬ ПО Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуСценария
		|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуСценария.Период
		|ГДЕ КурсыВалют.Валюта = &ВалютаУпрУчета";
		Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	И КурсыВалют.Сценарий=&Сценарий";
		КонецЕсли;
        ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыУпрУчета 
		|ПО КурсыУпрУчета.Дата = ОборотыБюджетовОбороты.Период
		// Курсы сценария планирования
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|(ВЫБРАТЬ 
		|	ПериодПоследнейЗаписиКурсаНаДатуСценария.Дата, 
		|	КурсыВалют.Курс, 
		|	КурсыВалют.Кратность
		|ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВалют
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ
		|		Максимум(КурсыВнутр.Период) КАК Период,
		|		Дата
		|	ИЗ РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+" КАК КурсыВнутр
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ Период КАК Дата ИЗ
		|	РегистрНакопления.уатОборотыБюджетов.Обороты(&ДатаНач, &ДатаКон,"
		+СтруктураДанныхШапки.КонтролирующийСценарийПериодичность+", Сценарий=&КонтролирующийСценарий)) КАК Контр
		|				ПО Контр.Дата >= КурсыВнутр.Период
		|	И КурсыВнутр.Валюта = &ВалютаСценарияПланирования";
		Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
			ТекстЗапроса=ТекстЗапроса+"
		|	И КурсыВнутр.Сценарий=&Сценарий";
		КонецЕсли;
		ТекстЗапроса=ТекстЗапроса+"
		|	СГРУППИРОВАТЬ ПО Дата) КАК ПериодПоследнейЗаписиКурсаНаДатуСценария
		|	ПО КурсыВалют.Период = ПериодПоследнейЗаписиКурсаНаДатуСценария.Период
		|ГДЕ КурсыВалют.Валюта = &ВалютаСценарияПланирования";
		Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	И КурсыВалют.Сценарий=&Сценарий";
		КонецЕсли;
        ТекстЗапроса=ТекстЗапроса+" ) КАК КурсыСценарияПлан 
		|ПО КурсыСценарияПлан.Дата = ОборотыБюджетовОбороты.Период";
			
		Запрос.Текст=ТекстЗапроса;	
		Запрос.УстановитьПараметр("ДатаНач",ДатаНачалаКонтролирующегоСценария);
		Запрос.УстановитьПараметр("ДатаКон",ДатаКонцаКонтролирующегоСценария);
		Запрос.УстановитьПараметр("КонтролирующийСценарий",КонтролирующийСценарий);
		Запрос.УстановитьПараметр("Сценарий",Сценарий);
		Запрос.УстановитьПараметр("Отклонение",ПараметрОтклонение);
		Запрос.УстановитьПараметр("ВалютаСценарияПланирования",СтруктураДанныхШапки.СценарийВалюта);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
		
		РезультатЗапроса = Запрос.Выполнить();
		ТабКонтролирующихОборотов=РезультатЗапроса.Выгрузить();
		
		ТабКонтролирующихОборотов.Колонки.Добавить("КонтролирующийСценарий");
		ТабКонтролирующихОборотов.Колонки.Добавить("Сценарий");
		ТабКонтролирующихОборотов.Колонки.Добавить("ВидКонтролируемогоЗначения");
		ТабКонтролирующихОборотов.Колонки.Добавить("ИспользованиеКонтролируемогоЗначения");
		
		ТабКонтролирующихОборотов.ЗаполнитьЗначения(КонтролирующийСценарий,"КонтролирующийСценарий");
		ТабКонтролирующихОборотов.ЗаполнитьЗначения(Сценарий,"Сценарий");
		ТабКонтролирующихОборотов.ЗаполнитьЗначения(ИспользованиеКонтролируемыхЗначений,"ИспользованиеКонтролируемогоЗначения");
		ТабКонтролирующихОборотов.ЗаполнитьЗначения(ВидКонтролируемыхЗначений,"ВидКонтролируемогоЗначения");
		
	Иначе
		
		ТабКонтролирующихОборотов = Новый ТаблицаЗначений;
		ТабКонтролирующихОборотов.Колонки.Добавить("Период");
		ТабКонтролирующихОборотов.Колонки.Добавить("НачалоКонтролируемогоПериода");
		ТабКонтролирующихОборотов.Колонки.Добавить("КонтролирующийСценарий");
		ТабКонтролирующихОборотов.Колонки.Добавить("Сценарий");
		ТабКонтролирующихОборотов.Колонки.Добавить("ИспользованиеКонтролируемогоЗначения");
		ТабКонтролирующихОборотов.Колонки.Добавить("ВидКонтролируемогоЗначения");
		ТабКонтролирующихОборотов.Колонки.Добавить("Проект");
		ТабКонтролирующихОборотов.Колонки.Добавить("ЦФО");
		ТабКонтролирующихОборотов.Колонки.Добавить("СтатьяОборотов");
		ТабКонтролирующихОборотов.Колонки.Добавить("Контрагент");
		ТабКонтролирующихОборотов.Колонки.Добавить("Номенклатура");
		ТабКонтролирующихОборотов.Колонки.Добавить("СуммаСценарияКонтроль");
		
		Запрос = Новый Запрос;
		СтруктураПараметров = Новый Структура;
		
		Для Каждого СтрокаГраницы Из ГраницыЗначений Цикл
			
			ТекстУсловия = "";
		
			Если Не СтрокаГраницы.ЦФО.Пустая() Тогда
				ТекстУсловия = ТекстУсловия+" И ЦФО=&ЦФО";
				СтруктураПараметров.Вставить("ЦФО",СтрокаГраницы.ЦФО);
			КонецЕсли;
						
			Если Не СтрокаГраницы.Проект.Пустая() Тогда
				ТекстУсловия = ТекстУсловия+" И Проект=&Проект";
				СтруктураПараметров.Вставить("Проект",СтрокаГраницы.Проект);
			КонецЕсли;
			
			Если Не СтрокаГраницы.Контрагент.Пустая() Тогда
				ТекстУсловия = ТекстУсловия+" И Контрагент=&Контрагент";
				СтруктураПараметров.Вставить("Контрагент",СтрокаГраницы.Контрагент);
			КонецЕсли;
			
			Если Не СтрокаГраницы.Номенклатура=Неопределено И Не СтрокаГраницы.Номенклатура.Пустая() Тогда
				ТекстУсловия = ТекстУсловия+" И Номенклатура=&Номенклатура";
				СтруктураПараметров.Вставить("Номенклатура",СтрокаГраницы.Контрагент);
			КонецЕсли;
			
			ТекстУсловия = ТекстУсловия+" И СтатьяОборотов=&СтатьяОборотов";
			СтруктураПараметров.Вставить("СтатьяОборотов",СтрокаГраницы.СтатьяОборотов);
			
			ТекстУсловия = ТекстУсловия+" И Сценарий=&Сценарий";
			СтруктураПараметров.Вставить("Сценарий",КонтролирующийСценарий);
			
			ТекстУсловия = Сред(ТекстУсловия,3);
			
			ТекстЗапроса="ВЫБРАТЬ        
			|	ВЫРАЗИТЬ 
			|		(ВЫБОР 
			|			КОГДА &ВалютаСценарияПланирования=&ВалютаУпрУчета ТОГДА ОборотыБюджетовОбороты.СуммаУпрОборот
			|			КОГДА &ВалютаСценарияПланирования<>&ВалютаУпрУчета И КурсыСценарияПлан.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
			|				ОборотыБюджетовОбороты.СуммаУпрОборот*КурсыУпрУчета.Курс * КурсыСценарияПлан.Кратность 
			|				/ (КурсыСценарияПлан.Курс * КурсыУпрУчета.Кратность)
			|		ИНАЧЕ
			|			0
			|		КОНЕЦ КАК ЧИСЛО (15,2))";
			
			Если СтрокаГраницы.ВидОтклоненияКонтролируемыхЗначений=Перечисления.ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Абсолютное Тогда
				ТекстЗапроса = ТекстЗапроса+" + &Отклонение КАК СуммаСценарияКонтроль";
				СтруктураПараметров.Вставить("Отклонение",СтрокаГраницы.Отклонение);
			Иначе
				ТекстЗапроса = ТекстЗапроса+"*&Отклонение КАК СуммаСценарияКонтроль";
				СтруктураПараметров.Вставить("Отклонение",1+СтрокаГраницы.Отклонение/100);
			КонецЕсли;
			
			ТекстЗапроса=ТекстЗапроса+"
			|ИЗ
			|	РегистрНакопления.уатОборотыБюджетов.Обороты(&ДатаНач, &ДатаКон, ,"+ТекстУсловия+") КАК ОборотыБюджетовОбороты,
			|РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+".СрезПоследних(&ДатаНач,Валюта=&ВалютаСценарияПланирования";
			Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
				ТекстЗапроса=ТекстЗапроса+" И Сценарий=&Сценарий";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+") КАК КурсыСценарияПлан,
			|РегистрСведений."+СтруктураДанныхШапки.РегистрКурсовВалют+".СрезПоследних(&ДатаНач,Валюта=&ВалютаУпрУчета";
			Если СтруктураДанныхШапки.ИспользоватьКурсыСценария Тогда
				ТекстЗапроса=ТекстЗапроса+" И Сценарий=&Сценарий";
			КонецЕсли;
			ТекстЗапроса=ТекстЗапроса+") КАК КурсыУпрУчета";
			
			Запрос.Текст=ТекстЗапроса;
			
			Для Каждого Параметр Из СтруктураПараметров Цикл
				
				Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
				
			КонецЦикла;
			
			Запрос.УстановитьПараметр("ДатаНач",СтрокаГраницы.Период);
			Запрос.УстановитьПараметр("ДатаКон",ОбщегоНазначения.ДатаКонцаПериода(СтрокаГраницы.Период,СтруктураДанныхШапки.КонтролирующийСценарийПериодичность));
			Запрос.УстановитьПараметр("ВалютаСценарияПланирования",СтруктураДанныхШапки.СценарийВалюта);
			Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
		
			СтрокаЗапроса = Запрос.Выполнить().Выбрать();
			
			Если СтрокаЗапроса.Следующий() Тогда
				
				СтрокаОборотов=ТабКонтролирующихОборотов.Добавить();
				СтрокаОборотов.Период=СтрокаГраницы.Период;
				СтрокаОборотов.НачалоКонтролируемогоПериода=СтрокаГраницы.Период;
				СтрокаОборотов.Проект=СтрокаГраницы.Проект;
				СтрокаОборотов.Сценарий=Сценарий;
				СтрокаОборотов.КонтролирующийСценарий=КонтролирующийСценарий;
				Строкаоборотов.ИспользованиеКонтролируемогоЗначения=ИспользованиеКонтролируемыхЗначений;
				Строкаоборотов.ВидКонтролируемогоЗначения=ВидКонтролируемыхЗначений;
				СтрокаОборотов.ЦФО=СтрокаГраницы.ЦФО;
				СтрокаОборотов.СтатьяОборотов=СтрокаГраницы.СтатьяОборотов;
				СтрокаОборотов.Контрагент=СтрокаГраницы.Контрагент;
				СтрокаОборотов.Номенклатура=СтрокаГраницы.Номенклатура;
				СтрокаОборотов.СуммаСценарияКонтроль=СтрокаЗапроса.СуммаСценарияКонтроль;
				
			КонецЕсли;			
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ТабКонтролирующихОборотов;	
	
КонецФункции // ПолучитьОборотыКонтролирующегоСценария()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок)
	
	// По контролирующему сценарию
	
	Если НЕ ВидОграниченияОборотов = Перечисления.ВидыОграниченийОборотовБюджета.ПредварительныйБюджет Тогда
		ТабЗначенийОборотов = ПолучитьОборотыКонтролирующегоСценария(СтруктураДанныхШапки);
	Иначе
		
		ТабЗначенийОборотов = ГраницыЗначений.Выгрузить();
		ТабЗначенийОборотов.Колонки.Добавить("Сценарий");
		ТабЗначенийОборотов.Колонки.Добавить("ИспользованиеКонтролируемогоЗначения");
		ТабЗначенийОборотов.Колонки.Добавить("ВидКонтролируемогоЗначения");
		ТабЗначенийОборотов.Колонки.Добавить("НачалоКонтролируемогоПериода");
		
		ТабЗначенийОборотов.ЗаполнитьЗначения(Сценарий,"Сценарий");
		ТабЗначенийОборотов.ЗаполнитьЗначения(ИспользованиеКонтролируемыхЗначений,"ИспользованиеКонтролируемогоЗначения");
		ТабЗначенийОборотов.ЗаполнитьЗначения(ВидКонтролируемыхЗначений,"ВидКонтролируемогоЗначения");
		
		МассивПериодов = ТабЗначенийОборотов.ВыгрузитьКолонку("Период");
		ТабЗначенийОборотов.ЗагрузитьКолонку(МассивПериодов,"НачалоКонтролируемогоПериода");
		
	КонецЕсли;
	
	ТабЗначенийОборотов.Сортировать("Период Возр");
	
	Если ВидКонтролируемыхЗначений = Перечисления.ВидыКонтролируемогоЗначенияБюджета.Ограничивающее Тогда
		
		// По регистру "КонтролируемыеЗначенияБюджетов"
		НаборДвижений = Движения.уатКонтролируемыеЗначенияБюджетов;	
		НаборДвижений.Загрузить(ТабЗначенийОборотов);
		
	Иначе
		// По регистру "ЦелевыеЗначенияПоБюджетам"
		НаборДвижений = Движения.уатЦелевыеЗначенияПоБюджетам;	
		НаборДвижений.Загрузить(ТабЗначенийОборотов);	
	КонецЕсли;
	
	// По регистру ".УстановкаОграниченийПоБюджетам"
	НаборДвижений = Движения.уатУстановкаОграниченийПоБюджетам;
		
	Если ВидОграниченияОборотов = Перечисления.ВидыОграниченийОборотовБюджета.ПредварительныйБюджет
		ИЛИ ОбщегоНазначения.ЧислоДнейВПериоде(СтруктураДанныхШапки.СценарийПериодичность) >= ОбщегоНазначения.ЧислоДнейВПериоде(СтруктураДанныхШапки.КонтролирующийСценарийПериодичность) Тогда // Периодичность контроля и планирования
		// совпадают
		НаборДвижений.Загрузить(ТабЗначенийОборотов);			
	Иначе	
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		Для каждого СтрокаОборотов Из ТабЗначенийОборотов Цикл
			
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаОборотов);				
			СтрокаДвижений.НачалоКонтролируемогоПериода = СтрокаОборотов.Период;
			
			НачалоСледующегоПериода = ОбщегоНазначения.ДобавитьИнтервал(СтрокаОборотов.Период,СтруктураДанныхШапки.КонтролирующийСценарийПериодичность,1);
			ДатаДвижения = ОбщегоНазначения.ДобавитьИнтервал(СтрокаОборотов.Период,СтруктураДанныхШапки.СценарийПериодичность,1);
			
			Пока ДатаДвижения<НачалоСледующегоПериода Цикл
				
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений,СтрокаОборотов);	
				
				СтрокаДвижений.Период = ДатаДвижения;
				СтрокаДвижений.НачалоКонтролируемогоПериода = СтрокаОборотов.Период;
				
				ДатаДвижения = ОбщегоНазначения.ДобавитьИнтервал(ДатаДвижения,СтруктураДанныхШапки.СценарийПериодичность,1);
				
			КонецЦикла;
			
		КонецЦикла; 
		
		НаборДвижений.Загрузить(ТаблицаДвижений);			
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураДанныхШапки=Новый Структура;
	
	СтруктураДанныхШапки.Вставить("КонтролирующийСценарийПериодичность",КонтролирующийСценарий.Периодичность);
	СтруктураДанныхШапки.Вставить("СценарийПериодичность",Сценарий.Периодичность);
	СтруктураДанныхШапки.Вставить("КонтролирующийСценарийВалюта",КонтролирующийСценарий.Валюта);
	СтруктураДанныхШапки.Вставить("СценарийВалюта",Сценарий.Валюта);
	СтруктураДанныхШапки.Вставить("РегистрКурсовВалют",?(Сценарий.ИспользоватьКурсыСценария,"уатКурсыВалютПоСценариям","КурсыВалют"));
	СтруктураДанныхШапки.Вставить("ИспользоватьКурсыСценария",Сценарий.ИспользоватьКурсыСценария);
	
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураДанныхШапки, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры	// ОбработкаПроведения

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ВидОграниченияОборотов = Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно Тогда
		ПроверяемыеРеквизиты.Добавить("КонтролирующийСценарий");
	ИначеЕсли ВидОграниченияОборотов = Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийПоВсем Тогда
		ПроверяемыеРеквизиты.Добавить("КонтролирующийСценарий");
		ПроверяемыеРеквизиты.Добавить("ДатаНачалаКонтролирующегоСценария");
		ПроверяемыеРеквизиты.Добавить("ДатаКонцаКонтролирующегоСценария");
		ПроверяемыеРеквизиты.Добавить("ВидОтклоненияКонтролируемыхЗначений");
	КонецЕсли;
	Если НЕ ВидОграниченияОборотов = Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийПоВсем Тогда
		ПроверяемыеРеквизиты.Добавить("ГраницыЗначений.Период");
		ПроверяемыеРеквизиты.Добавить("ГраницыЗначений.СтатьяОборотов");
		Если ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно Тогда
			ПроверяемыеРеквизиты.Добавить("ГраницыЗначений.ВидОтклоненияКонтролируемыхЗначений");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли