// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатТТДСтоимость.Ссылка.Дата КАК Период,
	|	уатТТДСтоимость.Ссылка.Ссылка КАК Регистратор,
	|	уатТТДСтоимость.Ссылка.Организация КАК Организация,
	|	уатТТДСтоимость.Ссылка.Контрагент КАК Контрагент,
	|	уатТТДСтоимость.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатТТДСтоимость.ПутЛист,
	|	уатТТДСтоимость.ПутЛист.ТранспортноеСредство КАК ТС,
	|	уатТТДСтоимость.ПараметрВыработки,
	|	уатТТДСтоимость.Номенклатура,
	|	уатТТДСтоимость.НоменклатураУслуги,
	|	уатТТДСтоимость.Маршрут,
	|	уатТТДСтоимость.ОбъектСтроительства,
	|	уатТТДСтоимость.Количество,
	|	уатТТДСтоимость.Сумма КАК Сумма,
	|	0 КАК СуммаУпр,
	|	уатТТДСтоимость.СуммаНДС,
	|	уатТТДСтоимость.Сумма КАК СуммаВзаиморасчетов,
	|	уатТТДСтоимость.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА уатТТДСтоимость.ПараметрВыработки.Временный
	|			ТОГДА уатТТДСтоимость.КоличествоПараметрВыработки * 3600
	|		ИНАЧЕ уатТТДСтоимость.КоличествоПараметрВыработки
	|	КОНЕЦ КАК КоличествоПараметрВыработки
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|ГДЕ
	|	уатТТДСтоимость.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	ТабДанных = мЗапрос.Выполнить().Выгрузить();
	
	СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ВалютаДокумента,ДокументСсылка.Дата);
	Для Каждого ТекСтрока ИЗ ТабДанных Цикл
		СуммаВсего = ТекСтрока.Сумма + ?(ДокументСсылка.СуммаВключаетНДС, 0, ТекСтрока.СуммаНДС);		
		ТекСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								СтруктураКурсаДокумента.Курс, 
								1,
								СтруктураКурсаДокумента.Кратность, 
								1);
								
		ТекСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего, ДокументСсылка.ВалютаДокумента,
								ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
								СтруктураКурсаДокумента.Курс, 
								ДокументСсылка.КурсВзаиморасчетов,
								СтруктураКурсаДокумента.Кратность, 
								ДокументСсылка.КратностьВзаиморасчетов);
								
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") тогда
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
								СтруктураКурсаДокумента.Курс, 
								СтруктураДополнительныеСвойства.КурсУпр,
								СтруктураКурсаДокумента.Кратность,  
								СтруктураДополнительныеСвойства.КратностьУпр);
		Иначе
			ТекСтрока.СуммаУпр = 0;								
		КонецЕсли;	

		ТекСтрока.Сумма =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								СтруктураКурсаДокумента.Курс, 
								1,
								СтруктураКурсаДокумента.Кратность, 
								1); 

	КонецЦикла;
	ТабПредоставленныеУслуги = ТабДанных.Скопировать();						
	ТабПредоставленныеУслуги.Колонки.Удалить("ПутЛист");
	ТабПредоставленныеУслуги.Колонки.Удалить("ТС");
	ТабПредоставленныеУслуги.Колонки.Удалить("Маршрут");
	Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОбъектСтроительства", ДокументСсылка.Метаданные(), "Стоимость") Тогда
		ТабПредоставленныеУслуги.Колонки.Удалить("ОбъектСтроительства");
	КонецЕсли;
	ТабПредоставленныеУслуги.Колонки.Удалить("Номенклатура");
	ТабПредоставленныеУслуги.Колонки.Удалить("ПараметрВыработки");
	ТабПредоставленныеУслуги.Колонки.Удалить("КоличествоПараметрВыработки");
	ТабПредоставленныеУслуги.Колонки.Сумма.Имя = "СуммаРегл";
	ТабПредоставленныеУслуги.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	ТабПредоставленныеУслуги.Колонки.НоменклатураУслуги.Имя = "Номенклатура";
	
	ТабДанных.Колонки.Удалить("ПолучательУслуг");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиПоСтоимости", ТабДанных);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныхУслуг", ТабПредоставленныеУслуги);
	
КонецПроцедуры 

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
КонецПроцедуры
