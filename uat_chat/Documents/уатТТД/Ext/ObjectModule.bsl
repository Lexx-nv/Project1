////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
//полученное из константы.
Перем мЕстьСправочникЕдиницыИзмерения Экспорт; //Для БП это ложь, для остальных конфигураций - истина

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура обновляет базовый документ (Выработка ОС) 
// Основание - документ ЗаявкаНаИспользование
// НомерСтроки - номер строки табличной части основания, для которой формируем задание
Процедура ОбновитьБазовыйДокумент() Экспорт
	//Если Не уатПризнакОбновленияБазовыхДокументов(ПакетнаяОбработкаБазовыхДокументов) Тогда
	//	Возврат;
	//КонецЕсли;	
	//
	//флРеализацияТоваровУслуг = Ложь;
	//Для Каждого ТекСтрокаБД Из БазовыеДокументы Цикл
	//	Если ТипЗнч(ТекСтрокаБД.БазовыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//
	//		флРеализацияТоваровУслуг = Истина;
	//	
	//		Попытка
	//			дБазовыйДок = БазовыйДокумент.ПолучитьОбъект();
	//			дБазовыйДок.Услуги.Очистить();
	//		Исключение
	//			дБазовыйДок = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//		КонецПопытки;	
	//		
	//		ЗаполнитьДокументРеализацияТоваровУслуг(дБазовыйДок);
	//		
	//		дБазовыйДок.Записать();
	//		ТекСтрокаБД.БазовыйДокумент = дБазовыйДок.Ссылка;
	//	КонецЕсли;	
	//КонецЦикла;
	//	
	//Если Не флРеализацияТоваровУслуг Тогда
	//	
	//	дБазовыйДок = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	ЗаполнитьДокументРеализацияТоваровУслуг(дБазовыйДок);
	//	дБазовыйДок.Записать();
	//	
	//	НоваяСтрока					= БазовыеДокументы.Добавить();
	//	НоваяСтрока.БазовыйДокумент = дБазовыйДок.Ссылка;
	//	
	//КонецЕсли;	
	
КонецПроцедуры

#Если Клиент Тогда
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("ПечататьВсюТТН","Печатать всю ТТН");
		СтруктураМакетов.Вставить("ПечататьЛицСторону","Печатать лиц. сторону");
		СтруктураМакетов.Вставить("ПечататьОбрСторону","Печатать обр. сторону");
		СтруктураМакетов.Вставить("ТранспортнаяНакладная", "Транспортная накладная");
		СтруктураМакетов.Вставить("БланкиТТН", "Бланки ТТН");
		
		МакетЭСМ7 = ПолучитьОбщийМакет("уатЭСМ7");
		СтруктураМакетов.Вставить("уатЭСМ7", "ЭСМ7");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Формирует печатную форму путевых листов 3
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечатьТТН(ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		мМаксСтрок = 18;
		
		мДлинаСтрокиГрузополучателяПодСреднийШрифт   = 135;
		мДлинаСтрокиГрузополучателяПодМаленькийШрифт = 190;
		мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт   = 30;
		мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт = 40;
		мДлинаСтрокиПредставлениеОрганизацииПодСреднийШрифт   = 60;
		мДлинаСтрокиПредставлениеОрганизацииПодМаленькийШрифт = 85;
		
		СреднийШрифт   = Новый Шрифт("Arial", 6);
		МаленькийШрифт = Новый Шрифт("Arial", 4);
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН_ТТН";
		
		Макет = ПолучитьМакет("ТТН");
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			Обл.Параметры.НомерТТН       	= уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			Обл.Параметры.ДеньДок       	= День(Дата);
			Обл.Параметры.МесяцДок       	= Месяц(Дата);
			Обл.Параметры.ГодДок       		= Год(Дата);
			
			
			ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель, Дата));
			ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузоотправитель, Дата));
			ПлательщикПредставление		  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата));
			
			ДлинаСтрокиГрузоотправитель = СтрДлина(ГрузоотправительПредставление);
			ДлинаСтрокиГрузополучатель  = СтрДлина(ГрузополучательПредставление);
			ДлинаСтрокиПлательщик		= СтрДлина(ПлательщикПредставление);
			
			// проверим, вместятся ли строки и уменьшим шрифт
			Если ДлинаСтрокиГрузоотправитель > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
				Обл.Область("R8C6:R8C37").Шрифт = МаленькийШрифт;
			ИначеЕсли ДлинаСтрокиГрузоотправитель > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
				Обл.Область("R8C6:R8C37").Шрифт = СреднийШрифт;
			КонецЕсли;
			
			Если ДлинаСтрокиГрузополучатель > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
				Обл.Область("R10C6:R10C37").Шрифт = МаленькийШрифт;
			ИначеЕсли ДлинаСтрокиГрузополучатель > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
				Обл.Область("R10C6:R10C37").Шрифт = СреднийШрифт;
			КонецЕсли;
			
			Если ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
				Обл.Область("R12C5:R12C37").Шрифт = МаленькийШрифт;
			ИначеЕсли ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
				Обл.Область("R12C5:R12C37").Шрифт = СреднийШрифт;
			КонецЕсли;
								
			Обл.Параметры.Грузополучатель = Грузополучатель;
			Обл.Параметры.ГрузополучательПредставление = ГрузополучательПредставление;
			Обл.Параметры.ГрузополучательОКПО = ?(НЕ ЗначениеЗаполнено(Грузополучатель), "", Грузополучатель.КодПоОКПО);
			
			Обл.Параметры.Грузоотправитель = Грузоотправитель;
			Обл.Параметры.ГрузоотправительПредставление = ГрузоотправительПредставление;
			Обл.Параметры.ГрузоотправительОКПО = ?(НЕ ЗначениеЗаполнено(Грузоотправитель), "", Грузоотправитель.КодПоОКПО);
			
			Обл.Параметры.Плательщик = Контрагент;			
			Обл.Параметры.ПлательщикПредставление = ПлательщикПредставление;
			Обл.Параметры.ПлательщикОКПО = ?(НЕ ЗначениеЗаполнено(Контрагент), "", Контрагент.КодПоОКПО);
			
			УменьшитьШрифтВТаблицеНаМаленький = Ложь;
			УменьшитьШрифтВТаблицеНаСредний = Ложь;
			КоличествоМест	  = 0;
			КоличествоТонн	  = 0;
			ВсегоНаименований = 0;
			Для Каждого ТекСтр Из Выработка Цикл
				Если ТекСтр.НомерСтроки < 9 Тогда
					Если ЗначениеЗаполнено(ТекСтр.Номенклатура) Тогда
						// проверим, вместятся ли строки
						ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Номенклатура);
						Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаМаленький = Истина;
						ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаСредний = Истина;
						КонецЕсли;
						
						Обл.Параметры["Код" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Номенклатура.Код;
						Обл.Параметры["Цена" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Цена;
						Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Номенклатура;
						Обл.Параметры["ЕдИзм" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ЕдиницаИзмерения;
						Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ВидУпаковки;
						Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.КоличествоМест;
						Обл.Параметры["Сумма" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Сумма;
						Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] 	= Формат(ТекСтр.КоличествоТонн, "ЧЦ=10; ЧДЦ=3");
						
						ВсегоНаименований = ВсегоНаименований + 1;
						КоличествоМест	  = КоличествоМест + ТекСтр.КоличествоМест;
						КоличествоТонн	  = КоличествоТонн + ТекСтр.КоличествоТонн;
					КонецЕсли;					
				КонецЕсли;	
			КонецЦикла;
			Если УменьшитьШрифтВТаблицеНаМаленький Тогда
				Обл.Область("R17:R24").Шрифт = МаленькийШрифт;
			ИначеЕсли УменьшитьШрифтВТаблицеНаСредний Тогда
				Обл.Область("R17:R24").Шрифт = СреднийШрифт;
			КонецЕсли;
			
			ПарПредмета = "штука, штуки, штук, ж, , , , , 0";
			Обл.Параметры.ВсегоНаименований = ?(ЗначениеЗаполнено(ВсегоНаименований), ЧислоПрописью(ВсегоНаименований, "Л = ru_RU", ПарПредмета), "");
			
			ПарПредмета = "место, места, мест, с, , , , , 0";
			Обл.Параметры.ВсегоМест = ?(ЗначениеЗаполнено(КоличествоМест), ЧислоПрописью(КоличествоМест, "Л = ru_RU", ПарПредмета), "");
			
			ПарПредмета = "тонна, тонны, тонн, ж, кг, кг, кг, м, 3";
			Обл.Параметры.МассаГрузаБруттоПрописью = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			
			Обл.Параметры.МассаГрузаБрутто = КоличествоТонн;
			
			СведенияОтпускРазрешил = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Ссылка.ОтпускРазрешил, ТекущаяДата(),, Ссылка.Организация);
			Обл.Параметры.ОтпускРазрешил = ?(СведенияОтпускРазрешил = Неопределено, Ложь, СведенияОтпускРазрешил.Должность);
			Обл.Параметры.ОтпускРазрешилФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Ссылка.ОтпускРазрешил);
			
			СведенияОтпускПроизвел = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Ссылка.ОтпускПроизвел, ТекущаяДата(),, Ссылка.Организация);
			Обл.Параметры.ОтпускПроизвел = ?(СведенияОтпускПроизвел = Неопределено, Ложь, СведенияОтпускПроизвел.Должность);
			Обл.Параметры.ОтпускПроизвелФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Ссылка.ОтпускПроизвел);
			
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			ФорматДаты      = "ДФ='дд ММММ гггг'";
			Обл.Параметры.НомерТТН 	= уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			Обл.Параметры.ДатаТТН	= Формат(Дата,ФорматДаты);
			
			ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
			ДлинаСтрокиОрганизация = СтрДлина(ОрганизацияПредставление);
			Если ДлинаСтрокиОрганизация > мДлинаСтрокиПредставлениеОрганизацииПодМаленькийШрифт Тогда
				Обл.Область("R5C5:R5C20").Шрифт = МаленькийШрифт;
			ИначеЕсли ДлинаСтрокиОрганизация > мДлинаСтрокиПредставлениеОрганизацииПодСреднийШрифт Тогда
				Обл.Область("R5C5:R5C20").Шрифт = СреднийШрифт;				
			КонецЕсли;
			Обл.Параметры.НазваниеОрганизации = ОрганизацияПредставление;
			Обл.Параметры.Организация = Ссылка.Организация;
			
			Обл.Параметры.ВидПеревозки = ВидПеревозки;
			
			Для каждого ТекСтр из Выработка Цикл
				Если ЗначениеЗаполнено(ТекСтр.ПутЛист) Тогда
					Обл.Параметры.НомерПЛ 	= ТекСтр.ПутЛист.Номер;
					рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТекСтр.ПутЛист.ТранспортноеСредство);
					Обл.Параметры.Марка  	= рсТранспортноеСредство.Модель;
					Обл.Параметры.ГосНомер	= рсТранспортноеСредство.ГосударственныйНомер;
					
					ПлательщикПредставление	= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата));					
					ДлинаСтрокиПлательщик = СтрДлина(ПлательщикПредставление);
					Если ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
						Обл.Область("R7C8:R7C41").Шрифт = МаленькийШрифт;
					ИначеЕсли ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
						Обл.Область("R7C8:R7C41").Шрифт = СреднийШрифт;
					КонецЕсли;
					Обл.Параметры.Плательщик = ПлательщикПредставление;
					
					Водитель = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекСтр.ПутЛист.Водитель1);
					Обл.Параметры.Водители = Водитель;
								
					уатОбщегоНазначения.уатУдостоверениеВодителя(ТекСтр.ПутЛист.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
					Обл.Параметры.Удостоверения = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
					
					Обл.Параметры.ЛицензионнаяКарточка  	= рсТранспортноеСредство.ЛицензионнаяКарточка;
					Обл.Параметры.НомерЛицензионнойКарточки = рсТранспортноеСредство.НомерЛицензионнойКарточки;
					Обл.Параметры.СерияЛицензионнойКарточки = рсТранспортноеСредство.СерияЛицензионнойКарточки;
					Обл.Параметры.ПунктПогрузки	 = ?(ТипЗнч(АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения"), ?(ЗначениеЗаполнено(АдресОтправления.Адрес), АдресОтправления.Адрес, АдресОтправления), АдресОтправления);
					Обл.Параметры.ПунктРазгрузки = ?(ТипЗнч(АдресДоставки)    = Тип("СправочникСсылка.уатПунктыНазначения"), ?(ЗначениеЗаполнено(АдресДоставки.Адрес)   , АдресДоставки.Адрес   , АдресДоставки)   , АдресДоставки);
					Обл.Параметры.Переадресовка	 = ?(ТипЗнч(Переадресовка)    = Тип("СправочникСсылка.уатПунктыНазначения"), ?(ЗначениеЗаполнено(Переадресовка.Адрес)   , Переадресовка.Адрес   , Переадресовка)   , Переадресовка);
					НН = 0;                               
					Для каждого ТекСтрПриц из ТекСтр.ПутЛист.Прицепы Цикл
						Если ЗначениеЗаполнено(ТекСтрПриц.ТС) Тогда
							реквПриц = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТекСтрПриц.ТС);
							Если ЗначениеЗаполнено(реквПриц.Модель) Тогда
								Если ЗначениеЗаполнено(реквПриц.ТипТС) Тогда
									Если реквПриц.ТипТС.ВидТС = Перечисления.уатВидыТС.Полуприцеп или реквПриц.ТипТС.ВидТС = Перечисления.уатВидыТС.Прицеп или реквПриц.ТипТС.ВидТС = Перечисления.уатВидыТС.ПрицепСамосвал Тогда
										Если НН < 2 Тогда
											НН = НН + 1;
											Обл.Параметры["МаркаПрицеп" + Строка(НН)]  		= реквПриц.Модель;
											Обл.Параметры["ГосНомерПрицеп" + Строка(НН)]	= реквПриц.ГосударственныйНомер;
											Обл.Параметры["ГарНомПрицеп" + Строка(НН)]		= реквПриц.ГаражныйНомер;
										КонецЕсли;	
									КонецЕсли;	
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
				Прервать;
			КонецЦикла;
			УменьшитьШрифтВТаблицеНаМаленький = Ложь;
			УменьшитьШрифтВТаблицеНаСредний = Ложь;
			ВсегоНаименований = 0;
			КоличествоЕздок	  = 0;
			КоличествоТонн	  = 0;
			Для каждого ТекСтр из Выработка Цикл
				Если ТекСтр.НомерСтроки < 4 Тогда
					Если ЗначениеЗаполнено(ТекСтр.Номенклатура) Тогда
						// проверим, вместятся ли строки
						ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Номенклатура);
						Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаМаленький = Истина;
						ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
							УменьшитьШрифтВТаблицеНаСредний = Истина;
						КонецЕсли;						
						
						Обл.Параметры["КодГруза" + Строка(ТекСтр.НомерСтроки)] 		= ТекСтр.Номенклатура.Код;
						Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.Номенклатура;
						Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] 	= ТекСтр.ВидУпаковки;
						Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)]= ТекСтр.КоличествоМест;
						Обл.Параметры["СОМ" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.СпособОпределенияМассы;
						Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] = Формат(ТекСтр.КоличествоТонн, "ЧЦ=10; ЧДЦ=3");
						
						ВсегоНаименований = ВсегоНаименований + 1;
						КоличествоТонн	  = КоличествоТонн  + ТекСтр.КоличествоТонн;
						КоличествоЕздок	  = КоличествоЕздок + ТекСтр.КоличествоЕздок;
					КонецЕсли;						
				КонецЕсли;	
			КонецЦикла;
			Если УменьшитьШрифтВТаблицеНаМаленький Тогда
				Обл.Область("R24:R26").Шрифт = МаленькийШрифт;
			ИначеЕсли УменьшитьШрифтВТаблицеНаСредний Тогда
				Обл.Область("R24:R26").Шрифт = СреднийШрифт;
			КонецЕсли;
			
			Обл.Параметры.КолвоЕздок = КоличествоЕздок;
			Обл.Параметры.МассаВсего = КоличествоТонн;
						
			ПарПредмета = "тонна, тонны, тонн, ж, кг, кг, кг, м, 3";
			Обл.Параметры.МассаБруттоПрописью = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			Обл.Параметры.МассаБрутто = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // Печать_3()
	
	// Формирует печатную форму транспортной накладной
	//
	Функция уатПечатьТранспортнаяНакладная1() Экспорт
		
		ВыработкаЗаполнена = Ложь;
		Если Выработка.Количество() Тогда
			ВыработкаЗаполнена = Истина;
			ПутЛист = Выработка[0].ПутЛист;
		КонецЕсли;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТранспортнаяНакладная";
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		Макет = ПолучитьМакет("ТранспортнаяНакладная");
		ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
		ОбластьОборотная  = Макет.ПолучитьОбласть("Оборотная");
		
		// лицевая
		ОбластьЛицевая.Параметры.НомерТТН = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
		ОбластьЛицевая.Параметры.Дата = Дата;
		
		МассивСтрок = Новый Массив;
		
		мГрузополучатель = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель, Дата), "ПолноеНаименование, ЮридическийАдрес");
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузополучатель, 42);
		ОбластьЛицевая.Параметры.ГрузополучательПредставление1 = МассивСтрок[0];
		Если МассивСтрок.Количество() > 1 Тогда
			ОбластьЛицевая.Параметры.ГрузополучательПредставление2 = МассивСтрок[1];
		КонецЕсли;
		ГрузополучательТелефон = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель, Дата), "Телефоны");
		ОбластьЛицевая.Параметры.ГрузополучательПредставление3 = ГрузополучательТелефон;
		
		мГрузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузоотправитель, Дата), "ПолноеНаименование, ЮридическийАдрес");
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузоотправитель, 42);
		ОбластьЛицевая.Параметры.ГрузоотправительПредставление1 = МассивСтрок[0];
		Если МассивСтрок.Количество() > 1 Тогда
			ОбластьЛицевая.Параметры.ГрузоотправительПредставление2 = МассивСтрок[1];
		КонецЕсли;
		ГрузоотправительТелефон = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузоотправитель, Дата), "Телефоны");
		ОбластьЛицевая.Параметры.ГрузоотправительПредставление3 = ГрузоотправительТелефон;
		
		СтрокаГруза = "";
		Для Каждого СтрокаТаблицы Из Выработка Цикл
			СтрокаГруза = СтрокаГруза + СтрокаТаблицы.Номенклатура.Наименование;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
				СтрокаГруза = СтрокаГруза + ", " + СтрокаТаблицы.ВидУпаковки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоМест) Тогда
				СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоМест) + " мест";
				Если СтрокаТаблицы.КоличествоМест = 1 Тогда
					СтрокаГруза = СтрокаГруза + "о";
				ИначеЕсли СтрокаТаблицы.КоличествоМест = 2 Тогда
					СтрокаГруза = СтрокаГруза + "а";
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоТонн) Тогда
				СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоТонн) + " т";
			КонецЕсли;	
			СтрокаГруза = СтрокаГруза + "; ";
		КонецЦикла;
		
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаГруза, 120);
		Сч = 0;
		Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
			ОбластьЛицевая.Параметры["НаименованиеГрузаПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
			Если Сч = 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьЛицевая.Параметры.АдресПогрузкиПредставление  = АдресОтправления;
		ОбластьЛицевая.Параметры.АдресРазгрузкиПредставление = АдресДоставки;
		
		// оборотная
		Перевозчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование, ЮридическийАдрес");
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Перевозчик, 42);
		ОбластьОборотная.Параметры.ПеревозчикПредставление1 = МассивСтрок[0];
		Если МассивСтрок.Количество() > 1 Тогда
			ОбластьОборотная.Параметры.ПеревозчикПредставление2 = МассивСтрок[1];
		КонецЕсли;
		ПеревозчикТелефон = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), "Телефоны");
		ОбластьОборотная.Параметры.ПеревозчикПредставление5 = ПеревозчикТелефон;
		
		Если ВыработкаЗаполнена Тогда
			ОбластьОборотная.Параметры.ПеревозчикПредставление4 = "№" + ПутЛист.Номер;
			
			ФИО = уатОбщегоНазначения.уатФИОФизЛица(ПутЛист.Водитель1.ФизЛицо);
			Если НЕ ФИО = Неопределено Тогда
				ОбластьОборотная.Параметры.ПеревозчикПредставление3 = ФИО.Фамилия + " " + Лев(ФИО.Имя, 1) + "." + Лев(ФИО.Отчество, 1) + ".";
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Тип = &Тип";
			
			Запрос.УстановитьПараметр("Объект", ПутЛист.Водитель1.ФизЛицо);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			ТЗ = Запрос.Выполнить().Выгрузить();
			Если ТЗ.Количество() Тогда
				ОбластьОборотная.Параметры.ПеревозчикПредставление3 = ОбластьОборотная.Параметры.ПеревозчикПредставление3 + ", тел. " + ТЗ[0].Представление;
			КонецЕсли;		
			
			СтрокаПредставлениеТС = уатОбщегоНазначения.уатПредставлениеТС(ПутЛист.ТранспортноеСредство,Неопределено);			
			СтрокаХарактеристикиТС = "Модель " + Строка(ПутЛист.ТранспортноеСредство.Модель);
			
			Для Каждого Прицеп Из ПутЛист.Прицепы Цикл
				Если Прицеп.ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					СтрокаПредставлениеТС = СтрокаПредставлениеТС + ", " + уатОбщегоНазначения.уатПредставлениеТС(Прицеп.ТС,Неопределено);
					СтрокаХарактеристикиТС = СтрокаХарактеристикиТС + ", " + "Модель " + Строка(Прицеп.ТС.Модель);
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаПредставлениеТС, 35);
			Сч = 0;
			Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
				ОбластьОборотная.Параметры["ТСПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
				Если Сч = 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаХарактеристикиТС, 60);
			Сч = 0;
			Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
				ОбластьОборотная.Параметры["ТСХарактеристикиПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
				Если Сч = 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ОбластьОборотная.Параметры.СтоимостьПредставление = Стоимость.Итог("Сумма");
		Иначе
			КурсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, Дата);												 
			СтоимостьВРублях =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Стоимость.Итог("Сумма"), мВалютаРегламентированногоУчета,
			ВалютаДокумента, КурсВалютыДокумента.Курс, 1, КурсВалютыДокумента.Кратность, 1); 																					 
			
			ОбластьОборотная.Параметры.СтоимостьПредставление = СтоимостьВРублях;
		КонецЕсли;
		
		КолВо = 2;
		Если Не ВвестиЧисло(КолВо, "Введите число экземпляров") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для НомерЭкземпляра = 1 по КолВо Цикл
			ТабДокумент.Вывести(ОбластьЛицевая);
			ТабДокумент.Вывести(ОбластьОборотная);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		Возврат ТабДокумент;
	КонецФункции	
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь, ФлагПечати = 0) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
		Иначе
			
			Если  НазваниеМакета = "ПечататьЛицСторону" Тогда
				ИмяФункцииПечати = "уатПечатьТТН(1)";
				ТабДокумент = Вычислить(ИмяФункцииПечати);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли   НазваниеМакета = "ПечататьОбрСторону" Тогда
				ИмяФункцииПечати = "уатПечатьТТН(2)";
				ТабДокумент = Вычислить(ИмяФункцииПечати);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли   НазваниеМакета = "ПечататьВсюТТН" Тогда
				ИмяФункцииПечати = "уатПечатьТТН(0)";
				ТабДокумент = Вычислить(ИмяФункцииПечати);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли НазваниеМакета = "уатЭСМ7" Тогда
				Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства) Тогда
					ТабДокумент = уатЗащищенныеФункции.уатПечать_ТТД_ЭСМ7(ЭтотОбъект, "уатЭСМ7", 0);
					уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
				Иначе
					Сообщить("По организации """ + Организация + """ не ведётся учет выработки по объектам строительства.", СтатусСообщения.Важное);
				КонецЕсли;
			ИначеЕсли НазваниеМакета = "ТранспортнаяНакладная" Тогда
				ИмяФункцииПечати = "уатПечатьТранспортнаяНакладная()";
				ТабДокумент = Вычислить(ИмяФункцииПечати);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
				
			ИначеЕсли НазваниеМакета = "БланкиТТН" Тогда
				ОбработкаПечати = Обработки.уатПечатьТТН.ПолучитьФорму("Форма");
				ОбработкаПечати.Документ = Ссылка;
				ОбработкаПечати.ПунктРазгрузки = АдресДоставки;
				ОбработкаПечати.Открыть();
				
			КонецЕсли;
		КонецЕсли;    		
	КонецПроцедуры // Печать
	
	Процедура ДобавитьСтрокуСтоимости(ТекСтрока, ПараметрВыработки, Количество, СсылкаПрейскурант, СсылкаТариф, Тариф)
		Если Тариф > 0 И ((Не СсылкаТариф.ФиксированныйТариф И Количество > 0) ИЛИ СсылкаТариф.ФиксированныйТариф) Тогда
			
			НоваяСтрока = Стоимость.Добавить();
			НоваяСтрока.ПутЛист = ТекСтрока.ПутЛист;
			НоваяСтрока.НоменклатураУслуги = СсылкаТариф.НоменклатураУслуги;
			
			Если СсылкаТариф.ФиксированныйТариф Тогда
				
				НоваяСтрока.ПараметрВыработки = СсылкаТариф.ПараметрВыработки;
				НоваяСтрока.Количество = 1;
				НоваяСтрока.КоличествоПараметрВыработки = 1;
				НоваяСтрока.Цена 	= Тариф;
				СуммаПоТарифу 		= Тариф;
				
			Иначе
				
				НоваяСтрока.Маршрут = ТекСтрока.Маршрут;
				
				Если уатОбщегоНазначенияТиповые.ЕстьРеквизитТабЧастиДокумента("ОбъектСтроительства", Метаданные(), "Стоимость") Тогда
					НоваяСтрока.ОбъектСтроительства = ТекСтрока.ОбъектСтроительства;
				КонецЕсли;
				
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.ПараметрВыработки = ПараметрВыработки;
				НоваяСтрока.Количество = уатОбщегоНазначения.уатКоличествоВыработкиДляРасчетаСтоимости(ПараметрВыработки, Количество);
				НоваяСтрока.КоличествоПараметрВыработки = уатОбщегоНазначения.уатКоличествоВыработкиДляРасчетаСтоимости(ПараметрВыработки, Количество);
				Если СсылкаТариф.МинимальнаяВыработка < НоваяСтрока.Количество Тогда
					НоваяСтрока.Цена = Тариф;
					СуммаПоТарифу = НоваяСтрока.Количество * НоваяСтрока.Цена;
				Иначе
					СуммаПоТарифу = СсылкаТариф.МинимальнаяВыработка * Тариф;
					НоваяСтрока.Цена = СуммаПоТарифу / НоваяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
			
			ТекСтавкаНДС = НоваяСтрока.НоменклатураУслуги.СтавкаНДС;
			Если НЕ ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
				ТекСтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
			КонецЕсли;
			
			Если УчитыватьНДС И ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = ТекСтавкаНДС;
				НоваяСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СуммаПоТарифу,
				УчитыватьНДС, СсылкаПрейскурант.СуммаВключаетНДС,
				уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
				
				Если СсылкаПрейскурант.СуммаВключаетНДС И СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = СуммаПоТарифу;
				ИначеЕсли  НЕ СсылкаПрейскурант.СуммаВключаетНДС И НЕ СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = СуммаПоТарифу;
				ИначеЕсли  НЕ СсылкаПрейскурант.СуммаВключаетНДС И  СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = СуммаПоТарифу+НоваяСтрока.СуммаНДС;
					НоваяСтрока.Цена=?(НоваяСтрока.Количество=0,0,НоваяСтрока.Сумма/НоваяСтрока.Количество);
				ИначеЕсли  СсылкаПрейскурант.СуммаВключаетНДС И  НЕ СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = СуммаПоТарифу-НоваяСтрока.СуммаНДС;
					НоваяСтрока.Цена=?(НоваяСтрока.Количество=0,0,НоваяСтрока.Сумма/НоваяСтрока.Количество);
				КонецЕсли;
			Иначе
				НоваяСтрока.Сумма = СуммаПоТарифу;                         // НДС нас не интересует
			КонецЕсли;
			
			КурсКратностьВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсКратностьВалютыПрейскуранта = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СсылкаПрейскурант.Валюта, Дата);
			КоэффициентПересчетаИзВалютыВВалюту = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(1, СсылкаПрейскурант.Валюта, ВалютаДокумента,
			КурсКратностьВалютыПрейскуранта.Курс, КурсКратностьВалютыДокумента.Курс,
			КурсКратностьВалютыПрейскуранта.Кратность, КурсКратностьВалютыДокумента.Кратность);
			
			НоваяСтрока.Цена = НоваяСтрока.Цена * КоэффициентПересчетаИзВалютыВВалюту;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма * КоэффициентПересчетаИзВалютыВВалюту;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС * КоэффициентПересчетаИзВалютыВВалюту;
		КонецЕсли;
	КонецПроцедуры
	
	// Функция рассчитывает стоимость услуг
	//
	Процедура РассчитатьСтоимостьУслуг(ПоказатьВопрос = Ложь) Экспорт 
		Если Стоимость.Количество() = 0 Тогда
			Если ПоказатьВопрос Тогда
				мОтвет = Вопрос("Рассчитать стоимость услуг?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				Если мОтвет <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПоказатьВопрос Тогда
				мОтвет = Вопрос("Рассчитать стоимость услуг. Очистить таблицу перед заполнением?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
				Если мОтвет = КодВозвратаДиалога.Да Тогда
					Стоимость.Очистить();
				ИначеЕсли мОтвет = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
			Иначе	
				Стоимость.Очистить();
			КонецЕсли;	
		КонецЕсли;	
		
		СписокФильтров = Новый Структура();
		СписокФильтров.Вставить("Дата", Дата);
		СписокФильтров.Вставить("Организация", Организация);
		СписокФильтров.Вставить("Контрагент", Контрагент);
		СписокФильтров.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		
		тзВыработка = Выработка.Выгрузить();
		тзВыработка.Колонки.Добавить("ВремяСекунды");
		тзВыработка.Колонки.Добавить("ВыработкаДополнительное");
		
		мСписокФиксированныхТарифов = Новый СписокЗначений;
		тзФиксированныеТарифы = Новый ТаблицаЗначений;
		тзФиксированныеТарифы.Колонки.Добавить("Прейскурант");
		тзФиксированныеТарифы.Колонки.Добавить("Тариф");
		тзФиксированныеТарифы.Колонки.Добавить("ПутЛист");
		
		Для Каждого ТекСтрока Из тзВыработка Цикл
			ТекСтрока.ВремяСекунды = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоЧасов);
			Если ТекСтрока.ПараметрВыработки.Временный Тогда
				ТекСтрока.ВыработкаДополнительное = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Выработка);	
			Иначе	
				ТекСтрока.ВыработкаДополнительное = ТекСтрока.Выработка;	
			КонецЕсли;
			
			мКоличествоЕздок1 	= ?(ТекСтрока.КоличествоЕздок = 0, 1, ТекСтрока.КоличествоЕздок);
			//мКоличествоЕздок1 	= ТекСтрока.КоличествоЕздок;
			ТекСтрока.КоличествоКмПорожний 	= ТекСтрока.КоличествоКмПорожний * мКоличествоЕздок1;
			ТекСтрока.КоличествоКмГруз 		= ТекСтрока.КоличествоКмГруз * мКоличествоЕздок1;
			ТекСтрока.КоличествоКмСпец 		= ТекСтрока.КоличествоКмСпец * мКоличествоЕздок1;
			ТекСтрока.КоличествоКмСпец2 	= ТекСтрока.КоличествоКмСпец2 * мКоличествоЕздок1;
			ТекСтрока.КоличествоКмСпец3 	= ТекСтрока.КоличествоКмСпец3 * мКоличествоЕздок1;
			ТекСтрока.КоличествоКмСпец4 	= ТекСтрока.КоличествоКмСпец4 * мКоличествоЕздок1;
			ТекСтрока.КоличествоКмСпец5 	= ТекСтрока.КоличествоКмСпец5 * мКоличествоЕздок1;
			
			мРасстояниеГруз 	= ТекСтрока.КоличествоКмГруз;
			мРасстояниеПорожний = ТекСтрока.КоличествоКмПорожний;
			мРасстояниеСпец  	= ТекСтрока.КоличествоКмСпец;
			мРасстояниеСпец2  	= ТекСтрока.КоличествоКмСпец2;
			мРасстояниеСпец3  	= ТекСтрока.КоличествоКмСпец3;
			мРасстояниеСпец4  	= ТекСтрока.КоличествоКмСпец4;
			мРасстояниеСпец5  	= ТекСтрока.КоличествоКмСпец5;
			мВремяРаботы 		= ТекСтрока.ВремяСекунды;
			мКоличествоОпераций = ТекСтрока.КоличествоОпераций;
			мГрузоподъемность 	= уатОбщегоНазначения.уатГрузоподъемностьПоПЛ(ТекСтрока.ПутЛист);
			мКлассГруза 		= уатОбщегоНазначения.уатКлассГруза(ТекСтрока.Номенклатура);
			мОбъемКм			= ТекСтрока.Объем * ТекСтрока.КоличествоКмГруз; 			
			мТнКм 				= ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз;
			ТекСтрока.КоличествоТонн 	= ТекСтрока.КоличествоТонн * мКоличествоЕздок1;
			ТекСтрока.Объем				= ТекСтрока.Объем * мКоличествоЕздок1;			
			мПробегОбщий = мРасстояниеГруз + мРасстояниеПорожний + мРасстояниеСпец + мРасстояниеСпец2
			+ мРасстояниеСпец3 + мРасстояниеСпец4 + мРасстояниеСпец5;
			
			//обновили фильтры данными текущей строки
			Если ЗначениеЗаполнено(ТекСтрока.ПутЛист) Тогда
				СписокФильтров.Вставить("Тягач", ТекСтрока.ПутЛист.ТранспортноеСредство);
				СписокФильтров.Вставить("МодельТягача", ТекСтрока.ПутЛист.ТранспортноеСредство.Модель);
				СписокФильтров.Вставить("ТипТягача", ТекСтрока.ПутЛист.ТранспортноеСредство.ТипТС);
				Если ТекСтрока.ПутЛист.Прицепы.Количество() > 0 Тогда
					СписокПрицепов = Новый СписокЗначений;
					СписокМоделейПрицепов = Новый СписокЗначений;
					СписокТиповПрицепов = Новый СписокЗначений;
					Для Каждого ТекПрицеп Из ТекСтрока.ПутЛист.Прицепы Цикл
						СписокПрицепов.Добавить(ТекПрицеп.ТС);
						СписокМоделейПрицепов.Добавить(ТекПрицеп.ТС.Модель);
						СписокТиповПрицепов.Добавить(ТекПрицеп.ТС.ТипТС);
					КонецЦикла;
					СписокФильтров.Вставить("Прицеп", СписокПрицепов);
					СписокФильтров.Вставить("МодельПрицепа", СписокМоделейПрицепов);
					СписокФильтров.Вставить("ТипПрицепа", СписокТиповПрицепов);
				КонецЕсли;
			КонецЕсли;
			СписокФильтров.Вставить("Маршрут", ТекСтрока.Маршрут);
			СписокФильтров.Вставить("Номенклатура", ТекСтрока.Номенклатура);
			СписокФильтров.Вставить("ОбъектСтроительства", ТекСтрока.ОбъектСтроительства);
			
			//ищем прейскурант
			мТаблицаПрейскурант = уатОбщегоНазначения.уатНайтиПрейскурант(СписокФильтров, Организация, Дата, Истина);
			
			//не нашли прейскурант
			Если мТаблицаПрейскурант.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;	
			
			//нашли прейскурант
			Для Каждого ТекСтрокаТариф из мТаблицаПрейскурант Цикл
				мСсылкаТариф = ТекСтрокаТариф.Тариф;
				мПрейскурант = ТекСтрокаТариф.Прейскурант;
				
				Если мСсылкаТариф.ФиксированныйТариф Тогда
					
					//Если тариф фиксированный то проверяем чтобы не было дублирования тарифа для разных строк ТТД
					Если тзФиксированныеТарифы.Найти(мСсылкаТариф, "Тариф") = Неопределено Тогда
						мНоваяСтрокаФТ 			= тзФиксированныеТарифы.Добавить();
						мНоваяСтрокаФТ.Прейскурант = мПрейскурант;
						мНоваяСтрокаФТ.Тариф 	= мСсылкаТариф;
						мНоваяСтрокаФТ.ПутЛист 	= ТекСтрока.ПутЛист;
					КонецЕсли;
				Иначе	
					
					//Если тариф не фиксированный то считаем от выработки
					//Произвольный параметр выработки
					Если ТекСтрока.ВыработкаДополнительное > 0 И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки) 
						и ТекСтрока.ПараметрВыработки = мСсылкаТариф.ПараметрВыработки Тогда
						
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, ТекСтрока.ПараметрВыработки, ТекСтрока.ВыработкаДополнительное, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Время работы		
					ИначеЕсли мВремяРаботы > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяРаботы, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Количество операций		
					ИначеЕсли мКоличествоОпераций > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоОпераций Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.КоличествоОпераций, мКоличествоОпераций, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег с грузом
					ИначеЕсли мРасстояниеГруз > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегСГрузом, мРасстояниеГруз, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег порожний
					ИначеЕсли мРасстояниеПорожний > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеПорожний, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегПорожний, мРасстояниеПорожний, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег спец.
					ИначеЕсли мРасстояниеСпец > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеСпец, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы, мРасстояниеСпец, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег спец2.
					ИначеЕсли мРасстояниеСпец2 > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2 Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеСпец2, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2, мРасстояниеСпец2, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег спец3.
					ИначеЕсли мРасстояниеСпец3 > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3 Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеСпец3, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3, мРасстояниеСпец3, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег спец4.
					ИначеЕсли мРасстояниеСпец4 > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4 Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеСпец4, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4, мРасстояниеСпец4, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег спец5.
					ИначеЕсли мРасстояниеСпец5 > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5 Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеСпец3, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5, мРасстояниеСпец5, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Пробег общий - рассчитывается как сумма всех расстояний
					ИначеЕсли мПробегОбщий > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мПробегОбщий, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Количество ездок
					ИначеЕсли ТекСтрока.КоличествоЕздок > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЕздок Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрока.КоличествоЕздок, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Количество тонн
					ИначеЕсли ТекСтрока.КоличествоТонн > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрока.КоличествоТонн, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Объем
					ИначеЕсли ТекСтрока.Объем > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.Объем, ТекСтрока.Объем, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Количество ТнКм
					ИначеЕсли мТнКм > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ТнКм, мТнКм, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Количество ОбъемКм
					ИначеЕсли мОбъемКм > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ОбъемКм Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ОбъемКм, мОбъемКм, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Погрузочно-разгрузочные работы
					ИначеЕсли ТекСтрока.ПогрузочноРазгрузочныеРаботы > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрока.ПогрузочноРазгрузочныеРаботы, мПрейскурант, мСсылкаТариф, мТариф);
						
						//Простой под погрузкой
					ИначеЕсли ТекСтрока.ПростойПодПогрузкой > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПростойПодПогрузкой Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ПростойПодПогрузкой), мПрейскурант, мСсылкаТариф, мТариф);
						
						//Простой под разгрузкой
					ИначеЕсли ТекСтрока.ПростойПодРазгрузкой > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ПростойПодРазгрузкой), мПрейскурант, мСсылкаТариф, мТариф);
						
						//Подача
					ИначеЕсли ТекСтрока.Подача > 0 и мСсылкаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.Подача Тогда
						мТариф = уатОбщегоНазначения.уатНайтиТариф(мСсылкаТариф, мРасстояниеГруз, мВремяРаботы/3600, мГрузоподъемность, мКлассГруза);
						ДобавитьСтрокуСтоимости(ТекСтрока, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Подача), мПрейскурант, мСсылкаТариф, мТариф);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;
		
		Для Каждого ТекСтрока Из тзФиксированныеТарифы Цикл
			ДобавитьСтрокуСтоимости(ТекСтрока, "", 0, ТекСтрока.Прейскурант, ТекСтрока.Тариф, ТекСтрока.Тариф.Тариф);
		КонецЦикла;	
		
	КонецПроцедуры //РасчетПрейскурантов
	
	
	
		
Функция СткШапка()
	
	Стк = Новый Структура;
	
	ТекГрузоотправитель = Организация;
	ТекГрузополучатель = Организация;
	Если ЗначениеЗаполнено(Грузополучатель)
		и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.Контрагенты") ТОгда
		ТекГрузополучатель = Грузополучатель;
	КонецеСЛИ;
	
	// лицевая
	Стк.Вставить("Дата",Дата);
	Стк.Вставить("ВремяПрибытия",ВремяПрибытия);
	Стк.Вставить("ВремяУбытия",ВремяУбытия);
	Стк.Вставить("ТекДата",Формат(Дата,"ДФ=dd.MM.yyyy"));
	
	Стк.Вставить("ГрузополучательПредставление1",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекГрузополучатель, Дата), "ПолноеНаименование,ИНН"));
	Стк.Вставить("ГрузополучательПредставление2",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекГрузополучатель, Дата), "ЮридическийАдрес"));
	
	Стк.Вставить("ГрузоотправительПредставление1",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекГрузоотправитель, Дата), "ПолноеНаименование,ИНН"));
	Стк.Вставить("ГрузоотправительПредставление2",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекГрузоотправитель, Дата), "ЮридическийАдрес"));
	
	пГРуз="";
	ДЛя каждого стр из Выработка Цикл
		пГРуз = пГРуз +","+СокрлП(Стр.Номенклатура);
		ЕдИзм = стр.ЕдиницаИзмерения;
	КонецЦИкла;
	
	Стк.Вставить("Груз", Сред(пГруз,2));
	Стк.Вставить("Объем", ""+Выработка.Итог("КоличествоТонн")+" "+ЕдИзм);
	
	Стк.Вставить("АдресПогрузкиПредставление",СокрЛП(АдресОтправления));
	
	Стк.Вставить("ПеревозчикПредставление1",Стк.ГрузоотправительПредставление1);
	Стк.Вставить("ПеревозчикПредставление2",Стк.ГрузоотправительПредставление2);
	
	С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(Организация,ОтпускРазрешил,Дата);
	Стк.Вставить("СдалФИО",С.Представление);
	Стк.Вставить("Сдал",""+С.Фамилия+" "+С.Имя+" "+С.Отчество);
	
	Если ТекГрузополучатель = Грузополучатель ТОгда //это контрагент
		Выборка = Справочники.КонтактныеЛицаКонтрагентов.Выбрать(,Грузополучатель);
		Если Выборка.Следующий() Тогда
			Стк.Вставить("Принял",СокрлП(ВЫборка.Наименование));
			Стк.Вставить("ПринялДлж",СокрлП(ВЫборка.Должность));
			Стк.Вставить("ПринялДов",СокрлП(ВЫборка.Комментарий));
		КонецеСЛИ;
	ИНАче
		С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(Организация,Принял,Дата);
		Стк.Вставить("ПринялФИО",С.Представление);
		Стк.Вставить("Принял",""+С.Фамилия+" "+С.Имя+" "+С.Отчество);
		Стк.Вставить("ПринялДлж",С.Должность);
	КонецеСЛИ;
	
	п = СокрЛП(ИмяПользователя());
	П = СтрЗаменить(п," ",Символы.ПС);
	Стк.Вставить("Пользователь",СтрПолучитьСтроку(п,1)+" "
							+Лев(СтрПолучитьСтроку(п,2),1)+". "
							+Лев(СтрПолучитьСтроку(п,3),1)+"."
							);
	
	Возврат Стк;
	
КонецФункции

// Формирует печатную форму транспортной накладной
//
Функция уатПечатьТранспортнаяНакладная() Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТранспортнаяНакладная";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект)  Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Если Проведен=Ложь ТОгда
		Записать(РежимЗаписиДокумента.Проведение);
	КонецеСЛИ;
	
	
	ПутЛист = ПутевойЛист;
	СткШапка = СткШапка();
	ФИОВод = уатОбщегоНазначения.уатФИОФизЛица(Водитель.ФизЛицо);

	
	Макет = ПолучитьМакет("ТранспортнаяНакладная");
	ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
	ОбластьОборотная  = Макет.ПолучитьОбласть("Оборотная");
	
	// лицевая
	
	ОбластьЛицевая.Параметры.Заполнить(СткШапка);
	ОбластьЛицевая.Параметры.НомерТТН = СокрлП(Номер);
	ОбластьЛицевая.Параметры.АдресРазгрузкиПредставление = АдресДоставки;
	//ОбластьЛицевая.Параметры.Объем = ""+ТекСтрока.ОБъем+" м3";
	//ОбластьЛицевая.Параметры.Время = ТекСтрока.ВремяПрибытия;
	Если НЕ ФИОВод = Неопределено Тогда
		ОбластьЛицевая.Параметры.ВодительФИО = ФИОВод.Фамилия + " " + Лев(ФИОВод.Имя, 1) + "." + Лев(ФИОВод.Отчество, 1);
	КонецесЛИ;
	
	// оборотная
	ОбластьОборотная.Параметры.Заполнить(СткШапка);
	
	ОбластьОборотная.Параметры.ПеревозчикПредставление4 = "Путевой лист №" + ПутЛист.Номер+" от "+Формат(ПутЛист.Дата,"ДФ=dd.MM.yyyy")+" г.";
	
	Если НЕ ФИОВод = Неопределено Тогда
		ОбластьОборотная.Параметры.Водитель = ФИОВод.Фамилия + " " + ФИОВод.Имя + " " + ФИОВод.Отчество;
	КонецЕсли;
	
	ОбластьОборотная.Параметры.ТСХарактеристикиПредставление1 = СокрЛП(ТС);
	ОбластьОборотная.Параметры.ТСПредставление1 = "Гос.№ "+СокрЛП(ТС.ГосударственныйНомер);
	
	
	
	ТабДокумент.Вывести(ОбластьЛицевая);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОбластьОборотная);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Возврат ТабДокумент;
КонецФункции	


#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция возвращает количество выработки
//Параметры: Количество - время в ЧЧ.Десятые доли
//Если параметр выработки - время, то производится пересчет в секунды
//
Функция КоличествоВыработкиДляРегистра(ПараметрВыработки, Количество)	Экспорт
	Если ПараметрВыработки.Временный Тогда
		мКоличество = Количество*3600;
	Иначе
		мКоличество = Количество;
	КонецЕсли;	
	
	Возврат мКоличество;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатПутевойЛист") 
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		Дата 			= ТекущаяДата();
		Организация 	= ДанныеЗаполнения.Организация;
		Ответственный 	= ДанныеЗаполнения.Ответственный;
		БазовыйДокумент = Неопределено;
		
		ТипОснования_Форма = ЛОЖЬ;
		ФормаОснования = ДанныеЗаполнения.ПолучитьФорму();
		Если ФормаОснования.Открыта() Тогда
			Основание = ФормаОснования;
			ТипОснования_Форма = ИСТИНА;
		КонецЕсли;
		
		ДокументСсылка_ = ?(ТипОснования_Форма, Основание.ДокументОбъект, ДанныеЗаполнения);
		
		Дата = ДокументСсылка_.ДатаВыезда;
		
		мТекущаяСтрока = Неопределено;
		Если ТипОснования_Форма И Основание.ЭлементыФормы.ТабличноеПолеЗадание.ТекущаяСтрока <> Неопределено Тогда
			мТекущаяСтрока = Основание.ЭлементыФормы.ТабличноеПолеЗадание.ТекущаяСтрока;
		КонецЕсли;
		Если мТекущаяСтрока = Неопределено И ДокументСсылка_.Задание.Количество() > 0 Тогда
			мТекущаяСтрока = ДокументСсылка_.Задание[0];
		КонецЕсли;	
		Если мТекущаяСтрока = Неопределено Тогда
			НоваяСтрока 		= Выработка.Добавить();
			НоваяСтрока.ПутЛист = ДокументСсылка_.Ссылка;
		КонецЕсли;
		
		Если мТекущаяСтрока <> Неопределено И Контрагент.Пустая() Тогда
			Контрагент = мТекущаяСтрока.Контрагент;
		КонецЕсли;
		
		//следующие строки нужны чтобы корректно просуммировать часы
		мНоваяТаблица  	= ДокументСсылка_.Задание.Выгрузить();
		мНоваяТаблица.Колонки.Добавить("ВремяСекунды");
		
		Для Каждого мТекСтрокаЗадания Из мНоваяТаблица Цикл
			мТекСтрокаЗадания.ВремяСекунды = уатОбщегоНазначения.уатВремяВСекунды(мТекСтрокаЗадания.КоличествоЧасов);
		КонецЦикла;	
		
		// сделаем соответствие вида номер этапа - максимальный объем
		СоответствиеНомерЭтапаИОбъем = Новый Соответствие;
		// сделаем соответствие вида номер этапа - максимальный вес
		СоответствиеНомерЭтапаИВес   = Новый Соответствие;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	уатПутевойЛистЗадание.НомерСтроки,
		|	уатПутевойЛистЗадание.КоличествоТонн КАК КоличествоТонн,
		|	уатПутевойЛистЗадание.Объем КАК Объем,
		|	уатПутевойЛистЗадание.НомерЕздки КАК НомерЕздки
		|ИЗ
		|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
		|ГДЕ
		|	уатПутевойЛистЗадание.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(КоличествоТонн),
		|	МАКСИМУМ(Объем)
		|ПО
		|	НомерЕздки";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка_.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			СоответствиеНомерЭтапаИОбъем.Вставить(Выборка.НомерЕздки, Выборка.Объем);
			СоответствиеНомерЭтапаИВес.Вставить(Выборка.НомерЕздки, Выборка.КоличествоТонн);
		КонецЦикла;
		
		Если уатОбщегоНазначенияТиповые.ЕстьРеквизитТабЧастиДокумента("ОбъектСтроительства", Метаданные(), "Стоимость") Тогда
			мНоваяТаблица.Свернуть("Контрагент, Маршрут, Номенклатура, ОбъектСтроительства, НомерЕздки", "Подача, ВремяСекунды, КоличествоЕздок, КоличествоОпераций, КоличествоТонн, Объем, КоличествоКмГруз, КоличествоКмПорожний,КоличествоКмСпец, КоличествоКмСпец2, КоличествоКмСпец3, КоличествоКмСпец4, КоличествоКмСпец5");
		Иначе
			мНоваяТаблица.Свернуть("Контрагент, Маршрут, Номенклатура, НомерЕздки", "Подача, ВремяСекунды, КоличествоЕздок, КоличествоОпераций, КоличествоТонн, Объем, КоличествоКмГруз, КоличествоКмСпец, КоличествоКмПорожний, КоличествоКмСпец2, КоличествоКмСпец3, КоличествоКмСпец4, КоличествоКмСпец5");
		КонецЕсли;
		
		Для Каждого мТекСтрокаЗадания Из мНоваяТаблица Цикл
			Если мТекСтрокаЗадания.Контрагент <> Контрагент Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Выработка.Добавить();
			
			Если мЕстьСправочникЕдиницыИзмерения Тогда
				НоваяСтрока.ЕдиницаИзмерения = мТекСтрокаЗадания.Номенклатура.ЕдиницаХраненияОстатков;
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = мТекСтрокаЗадания.Номенклатура.БазоваяЕдиницаИзмерения;
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.ЕстьРеквизитТабЧастиДокумента("ОбъектСтроительства", Метаданные(), "Стоимость") Тогда
				НоваяСтрока.ОбъектСтроительства = мТекСтрокаЗадания.ОбъектСтроительства;
			КонецЕсли;
			
			НоваяСтрока.ПутЛист              = ДокументСсылка_.Ссылка;
			НоваяСтрока.Номенклатура 	     = мТекСтрокаЗадания.Номенклатура;
			НоваяСтрока.Подача 			     = мТекСтрокаЗадания.Подача;
			НоваяСтрока.Маршрут 		     = мТекСтрокаЗадания.Маршрут;
			НоваяСтрока.КоличествоЧасов      = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мТекСтрокаЗадания.ВремяСекунды);
			НоваяСтрока.КоличествоЕздок      = мТекСтрокаЗадания.КоличествоЕздок;
			НоваяСтрока.КоличествоОпераций   = мТекСтрокаЗадания.КоличествоОпераций;
			Если мТекСтрокаЗадания.НомерЕздки = 0 Тогда
				НоваяСтрока.КоличествоТонн = мТекСтрокаЗадания.КоличествоТонн;
				НоваяСтрока.Объем		   = мТекСтрокаЗадания.Объем;
			Иначе
				НоваяСтрока.КоличествоТонн = СоответствиеНомерЭтапаИВес.Получить(мТекСтрокаЗадания.НомерЕздки);
				НоваяСтрока.Объем		   = СоответствиеНомерЭтапаИОбъем.Получить(мТекСтрокаЗадания.НомерЕздки);
			КонецЕсли;
			НоваяСтрока.КоличествоКмГруз     = мТекСтрокаЗадания.КоличествоКмГруз;
			НоваяСтрока.КоличествоКмПорожний = мТекСтрокаЗадания.КоличествоКмПорожний;
			НоваяСтрока.КоличествоКмСпец     = мТекСтрокаЗадания.КоличествоКмСпец;
			НоваяСтрока.КоличествоКмСпец2    = мТекСтрокаЗадания.КоличествоКмСпец2;
			НоваяСтрока.КоличествоКмСпец3    = мТекСтрокаЗадания.КоличествоКмСпец3;
			НоваяСтрока.КоличествоКмСпец4    = мТекСтрокаЗадания.КоличествоКмСпец4;
			НоваяСтрока.КоличествоКмСпец5    = мТекСтрокаЗадания.КоличествоКмСпец5;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ТекДолг = уатОбщегоНазначенияТиповые_проф.ТекущийДолг(ДоговорКонтрагента, Неопределено, Ссылка);
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если НЕ ЭтоОбъединениеСБП И ДоговорКонтрагента.КонтролироватьСуммуЗадолженности И ТекДолг > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности тогда
		ТекстСообщения = "Текущий долг контрагента превышает максимально допустимое значение." + Символы.ПС +
		"Текущий долг: " + ТекДолг + ", максимальная сумма задолженности: " + ДоговорКонтрагента.ДопустимаяСуммаЗадолженности;
		#Если Клиент тогда
			Сообщить(ТекстСообщения,СтатусСообщения.Важное);
		#КонецЕсли
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатТТД.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьВыработкуПоСтоимости(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатТТД.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатТТД.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	
	//уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект,"Стоимость",,Отказ,Заголовок);
	Для каждого ТекСтрока Из Стоимость Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке №" + ТекСтрока.НомерСтроки + " табличной части ""Стоимость"": ";
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураУслуги) И (НЕ ТекСтрока.НоменклатураУслуги.Услуга) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке
			+ "содержится номенклатура услуги, не являющаяся услугой!", Отказ, Заголовок);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) И (ТекСтрока.Номенклатура.Услуга) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке
			+ "содержится номенклатура груза, не являющаяся товаром!", Отказ, Заголовок);
		КонецЕсли;
		Если УчитыватьНДС И (НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке
			+ "не заполнена ставка НДС!", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока Из Выработка Цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ТекСтрока.НомерСтроки) +
		""" табличной части """"Выработка:"""" ";
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) И НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита """"Единица измерения""""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

//мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

Если Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено  Тогда
	мЕстьСправочникЕдиницыИзмерения = Ложь;
Иначе	
	мЕстьСправочникЕдиницыИзмерения = Истина;
КонецЕсли;