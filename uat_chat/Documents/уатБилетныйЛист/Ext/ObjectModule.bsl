////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем ДанныеИзменились Экспорт; // Признак изменения данных документа (экспорт сделан для использования формой объекта).
Перем ТаблицаПоБилетам;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок)
	
	СтруктураПолей = Новый Структура("Организация, Склад, ТС, Сотрудник");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
	Если Отказ Тогда Возврат КонецЕсли;
	
	//СтруктураПолей = Новый Структура("Сотрудник, Количество, Сумма");
	СтруктураПолей = Новый Структура("Маршрут, Билет");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Билеты", СтруктураПолей, Отказ, Заголовок);
	
КонецПроцедуры

Функция ПолучитьМаршрут()
	Маршрут = Новый Структура("Номер, Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатБилетныйЛистБилеты.Маршрут.НомерМаршрута КАК Номер,
	|	уатБилетныйЛистБилеты.Маршрут.Наименование КАК Наименование
	|ИЗ
	|	Документ.уатБилетныйЛист.Билеты КАК уатБилетныйЛистБилеты
	|ГДЕ
	|	уатБилетныйЛистБилеты.Ссылка = &СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если  Выборка.Следующий() Тогда 
		Маршрут.Номер = Выборка.Номер;
		Маршрут.Наименование = Выборка.Наименование;
	КонецЕсли;
	Возврат Маршрут;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуБилетов()
	
	ТаблицаПоБилетам = Билеты.Выгрузить();
	
	Возврат ТаблицаПоБилетам;
	
КонецФункции // ПодготовитьТаблицуМатериалов()

#Если Клиент Тогда
		
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		СтруктураМакетов.Вставить("ПечататьВесьБилетныйЛист", "Печатать весь билетный лист");
		СтруктураМакетов.Вставить("ПечататьЛицСторону", "Печатать лиц. сторону");
		СтруктураМакетов.Вставить("ПечататьОбрСторону", "Печатать обр. сторону");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Функция выполняет печать документа билетный лист
	// Параметры:
	//  нет
	// 
	// Возвращаемое значение:
	//  табличныйДокумент - печатная форма
	//
	Функция ПечатьБЛ(ФлагПечати="") Экспорт
		ТабДокумент = Новый ТабличныйДокумент;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	уатБилетныйЛист.Номер КАК НомерДокумента,
		|	уатБилетныйЛист.Дата КАК ДатаДокумента,
		|	уатБилетныйЛист.Организация,
		|	уатБилетныйЛист.Сотрудник КАК Кондуктор,
		|	уатБилетныйЛист.ТС.ГосударственныйНомер КАК ГосНомерТС,
		|	уатСведенияОСотрудникахСрезПоследних.ТабельныйНомер КАК ТабельныйНомер
		|ИЗ
		|	Документ.уатБилетныйЛист КАК уатБилетныйЛист
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСведенияОСотрудниках.СрезПоследних КАК уатСведенияОСотрудникахСрезПоследних
		|		ПО уатБилетныйЛист.Сотрудник = уатСведенияОСотрудникахСрезПоследних.Сотрудник
		|			И уатБилетныйЛист.Организация = уатСведенияОСотрудникахСрезПоследних.Организация
		|ГДЕ
		|	уатБилетныйЛист.Ссылка = &СсылкаНаОбъект";
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДанныеШапка = Выборка;
		Иначе
			Сообщить("Не удалось напечатать документ", СтатусСообщения.Важное);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 9
		|	уатБилетныйЛистБилеты.Билет.ВидБилета КАК ВидБилета,
		|	уатБилетныйЛистБилеты.Билет.Цена КАК ЦенаБилета,
		|	уатБилетныйЛистБилеты.Билет.Серия КАК СерияБилета,
		|	уатБилетныйЛистБилеты.НомерНачальный КАК НомерБилетаНачальный,
		|	уатБилетныйЛистБилеты.НомерКонечный КАК НомерБилетаКонечный,
		|	уатБилетныйЛистБилеты.Количество КАК КоличествоБилетов,
		|	уатБилетныйЛистБилеты.Сумма КАК СуммаБилетов
		|ИЗ
		|	Документ.уатБилетныйЛист.Билеты КАК уатБилетныйЛистБилеты
		|ГДЕ
		|	уатБилетныйЛистБилеты.Ссылка = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатБилетныйЛистБилеты.НомерСтроки";
		
		ВыборкаСтрок = Запрос.Выполнить().Выбрать();
		Макет = ПолучитьМакет("БилетноУчетныйЛист");
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Область = Макет.ПолучитьОбласть("Страница1");
			Область.Параметры.Заполнить(ДанныеШапка);
			Область.Параметры.НомерДокумента = Формат(Число(уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(Ссылка)), "ЧЦ=6; ЧВН=; ЧГ=0");
			Маршрут = ПолучитьМаршрут();
			Область.Параметры.НомерМаршрута = Маршрут.Номер;
			Область.Параметры.НаименованиеМаршрута = Маршрут.Наименование;
			Счетчик = 1;
			Пока ВыборкаСтрок.Следующий() Цикл
				Область.Параметры["ВидБилета"            + Строка(Счетчик)] = ВыборкаСтрок.ВидБилета;
				Область.Параметры["ЦенаБилета"           + Строка(Счетчик)] = ВыборкаСтрок.ЦенаБилета;
				Область.Параметры["СерияБилета"          + Строка(Счетчик)] = ВыборкаСтрок.СерияБилета;
				Область.Параметры["НомерБилетаНачальный" + Строка(Счетчик)] = ВыборкаСтрок.НомерБилетаНачальный;
				Область.Параметры["НомерБилетаКонечный"  + Строка(Счетчик)] = ВыборкаСтрок.НомерБилетаКонечный;
				Область.Параметры["КоличествоБилетов"    + Строка(Счетчик)] = ВыборкаСтрок.КоличествоБилетов;
				Область.Параметры["СуммаБилетов"         + Строка(Счетчик)] = ВыборкаСтрок.СуммаБилетов;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Макет = ПолучитьМакет("БилетноУчетныйЛистОбратнаяСторона");
			Область = Макет.ПолучитьОбласть("Страница2");
			Область.Параметры.Заполнить(ДанныеШапка);
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		Возврат ТабДокумент;
	КонецФункции
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь, ФлагПечати = 0) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если ДанныеИзменились И Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект)  Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			ИмяФайла = КаталогВременныхФайлов() + "PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
		Иначе
			Если НазваниеМакета = "ПечататьЛицСторону" Тогда
				ТабДокумент = ПечатьБЛ(1);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли   НазваниеМакета = "ПечататьОбрСторону" Тогда
				ТабДокумент = ПечатьБЛ(2);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли   НазваниеМакета = "ПечататьВесьБилетныйЛист" Тогда
				ТабДокумент = ПечатьБЛ();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права );
			КонецЕсли;
		КонецЕсли;    		
	КонецПроцедуры // Печать
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура движений по регистру агрегатов
//
Процедура ФормированиеДвиженийПоСкладу(Отказ, Заголовок, РежимПроведения)
	
	ТаблицаПоБилетам		= ПодготовитьТаблицуБилетов();
	
	// Выполняем списание со склада, заполняем таблицу материалов рассчитанной стоимостью списания проводим по ТС
	
	НаборЗаписейПоБилетам								= Движения.уатБилетыНаСкладах;
	НаборЗаписейПоБилетам.ДокументОбъект				= ЭтотОбъект;
	НаборЗаписейПоБилетам.РезультатЗапросаПоБилетам		= ТаблицаПоБилетам;
	Отказ												= НЕ НаборЗаписейПоБилетам.Расход() ИЛИ Отказ;
	
КонецПроцедуры // ФормированиеДвиженийПоАгрегатам()

// Функция списания материалов с регистра ТоварыНаСкладе
//
Функция ФормированиеДвиженийПоВыручке(Отказ, Заголовок, РежимПроведения)
	
	НаборДвижений   = Движения.уатВыручка;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого ТекСтрока Из Билеты Цикл
		НоваяСтрока 			= ТаблицаДвижений.Добавить();
		НоваяСтрока.Период 		= Дата;
		НоваяСтрока.Сотрудник 	= Сотрудник;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПутевойЛист = ТекСтрока.ПутевойЛист;
		НоваяСтрока.ТС 			= ТС;
		НоваяСтрока.Маршрут 	= ТекСтрока.Маршрут;
		НоваяСтрока.Билет 		= ТекСтрока.Билет;
		НоваяСтрока.Количество 	= ТекСтрока.Количество;
		НоваяСтрока.Сумма 		= ТекСтрока.Сумма; 
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("Форма") Или ТипЗнч(Основание) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		Организация = Основание.Организация;
		Ответственный = Основание.Ответственный;
		ТС = Основание.ТранспортноеСредство;
		Сотрудник = Основание.Водитель1;
		
		Если Не ЗначениеЗаполнено(Дата) Тогда
			Дата = Основание.ДатаВыезда;
		КонецЕсли;
		
		//добавим основной ТС
		НоваяСтрока = Билеты.Добавить();
		НоваяСтрока.ПутевойЛист = Основание.Ссылка;
		
		Если Основание.Задание.Количество() > 0 Тогда
			ТекСтрока = Основание.Задание[0];
			НоваяСтрока.Маршрут = ТекСтрока.Маршрут;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента,Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ФормированиеДвиженийПоВыручке(Отказ, "", РежимПроведения);
	ФормированиеДвиженийПоСкладу(Отказ, "", РежимПроведения);
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	СуммаДокумента = Билеты.Итог("Сумма");
	СуммаПроданоБилетов = СуммаДокумента;
	
КонецПроцедуры // ПередЗаписью


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// инициализируем переменную
ДанныеИзменились = Ложь;

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;	
#КонецЕсли
