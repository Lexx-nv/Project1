
// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатОприходованиеТоваровТовары.Ссылка.Дата КАК Период,
	|	уатОприходованиеТоваровТовары.Ссылка КАК Регистратор,
	|	уатОприходованиеТоваровТовары.Ссылка.Склад КАК Склад,
	|	&Партия КАК Партия,
	|	уатОприходованиеТоваровТовары.Номенклатура,
	|	уатОприходованиеТоваровТовары.ЕдиницаИзмерения,
	|	&КоличествоДляЗамены КАК Количество,
	|	уатОприходованиеТоваровТовары.Цена,
	|	уатОприходованиеТоваровТовары.Сумма
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатОприходованиеТоваров.Товары КАК уатОприходованиеТоваровТовары
	|ГДЕ
	|	уатОприходованиеТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаТовары.Склад,
	|	ТаблицаДокументаТовары.Партия,
	|	ТаблицаДокументаТовары.Номенклатура
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";
	
	Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
		СтрокаРасчетаКоличества = " ВЫРАЗИТЬ(уатОприходованиеТоваровТовары.Количество * уатОприходованиеТоваровТовары.ЕдиницаИзмерения.Коэффициент / уатОприходованиеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3)) ";
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены",СтрокаРасчетаКоличества);	
	Иначе
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены"," уатОприходованиеТоваровТовары.Количество ");	
	КонецЕсли;
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия",ДокументСсылка);
	Иначе
		мЗапрос.УстановитьПараметр("Партия",Неопределено);
	КонецЕсли;
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
	
	Для каждого КолонкаРезультатЗапроса Из МассивРезультатов[1].Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	мЗапрос.Текст = 	
	"ВЫБРАТЬ
	|	Товары.ВидДвижения,
	|	Товары.Период,
	|	Товары.Регистратор,
	|	Товары.Склад,
	|	Товары.Партия,
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.Сумма КАК Стоимость,
	|	Товары.Сумма КАК СтоимостьУпр
	|ИЗ
	|	ТаблицаДокументаТовары КАК Товары";
	
	Выборка = мЗапрос.Выполнить();
	ТаблицаПартии = Выборка.Выгрузить();
	Для Каждого ТекСтрока ИЗ ТаблицаПартии Цикл
		
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") И СтруктураДополнительныеСвойства.ВалютаУпрУчета <> СтруктураДополнительныеСвойства.ВалютаРеглУчета тогда
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость, СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
			СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			СтруктураДополнительныеСвойства.КурсУпр, 
			СтруктураДополнительныеСвойства.КурсРегл,
			СтруктураДополнительныеСвойства.КратностьУпр, 
			СтруктураДополнительныеСвойства.КратностьРегл);
		Иначе
			ТекСтрока.СтоимостьУпр = 0;	
		КонецЕсли;	
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", ТаблицаПартии);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаОприходованиеТоваров, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	Оприходование.Номенклатура,
	|	Оприходование.Ссылка КАК Регистратор,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	Документ.уатОприходованиеТоваров.Товары КАК Оприходование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							уатОприходованиеТоваровТовары.Номенклатура
	|						ИЗ
	|							Документ.уатОприходованиеТоваров.Товары КАК уатОприходованиеТоваровТовары
	|						ГДЕ
	|							уатОприходованиеТоваровТовары.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО Оприходование.Ссылка.Склад = уатПартииТоваровНаСкладахОстатки.Склад
	|			И Оприходование.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|			И (&Партия = уатПартииТоваровНаСкладахОстатки.Партия)
	|ГДЕ
	|	Оприходование.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылкаОприходованиеТоваров.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылкаОприходованиеТоваров);
	мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылкаОприходованиеТоваров.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия",ДокументСсылкаОприходованиеТоваров);
	Иначе
		мЗапрос.УстановитьПараметр("Партия",Неопределено);
	КонецЕсли;
	
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылкаОприходованиеТоваров);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстСообщения = "Для """ + Выборка.Номенклатура + """ получены отрицательные остатки на складе """ + ДокументСсылкаОприходованиеТоваров.Склад + """. Остаток на складе: " + Выборка.КоличествоОстаток;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);	
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры // ВыполнитьКонтроль()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьОприходованияТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиОприходованияТоваров(ТекущийДокумент)
	
	ПараметрыПечати = Новый Структура;
	
	ТекстКодАртикул = "Код";
	ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
	ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Код");
	ПараметрыПечати.Вставить("ВыводитьКоличествоМест", Ложь); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК Склад,
	|	Основание,
	|	&ВалютаУпрУчета КАК ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Код КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.уатОприходованиеТоваров КАК ОприходованиеТоваров,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
	Запрос.Параметры.Вставить("ВалютаУпрУчета", мВалютаУпрУчета);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	// Выводим шапку накладной
	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Оприходование материалов"));

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("Получатель"			  , Шапка.Организация);
	ПараметрыПечати.Вставить("ПредставлениеСклада"	  , Шапка.Склад);
	ПараметрыПечати.Вставить("ПредставлениеОснования" , Шапка.Основание);
	
	// Вывести табличную часть
	Позиции = Новый Массив;
	СуммаИтого    = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура"	, ВыборкаСтрокТовары.Номенклатура);		
		
		ПараметрыПозиции.Вставить("НомерСтроки"		, ВыборкаСтрокТовары.НомерСтроки);
		ПараметрыПозиции.Вставить("Товар"			, ВыборкаСтрокТовары.Товар);
		ПараметрыПозиции.Вставить("Количество"		, ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена"			, ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("Сумма"			, ВыборкаСтрокТовары.Сумма);
        ПараметрыПозиции.Вставить("КодАртикул"		, ВыборкаСтрокТовары.КодАртикул);
		
		Позиции.Добавить(ПараметрыПозиции);
		
		СуммаИтого = СуммаИтого + ВыборкаСтрокТовары.Сумма;
	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(СуммаИтого));

	// Вывести Сумму прописью
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаИтого, Шапка.ВалютаДокумента));
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого,  Шапка.ВалютаДокумента));

	Возврат ПараметрыПечати;

КонецФункции //ПолучитьДанныеДляПечатиОприходованияТоваров()

Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОприходованиеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОприходованиеТоваров_Накладная";
		Макет = УправлениеПечатью.ПолучитьМакет("Документ.уатОприходованиеТоваров.Накладная");
		
		ПараметрыПечати = ПолучитьДанныеДляПечатиОприходованияТоваров(ТекущийДокумент);	
		
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		Конецесли;
				
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = ПараметрыПечати.ИмяКолонкиКодов;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
			
			ОбластьМакета.Параметры.Товар = ПараметрыПозиции.Номенклатура;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);		
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОприходованиеТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОприходованиеТоваров", "Оприходование товаров", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
	ДанныеПоВсемОбъектам,
	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	ОписаниеОбластей,
	ТипыМакетов,
	ДвоичныеДанныеМакетов));
	
КонецФункции
