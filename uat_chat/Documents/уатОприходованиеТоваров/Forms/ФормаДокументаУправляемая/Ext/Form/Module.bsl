////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
// Выполняет необходимые действия при изменении реквизита ИнвентаризацияТоваровНаСкладе
//
Процедура ПриИзмененииИнвентаризацииТоваровНаСкладе() 
	
	Если ЗначениеЗаполнено(Объект.ИнвентаризацияТоваровНаСкладе) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Объект.ИнвентаризацияТоваровНаСкладе.Организация;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Объект.ИнвентаризацияТоваровНаСкладе.Склад;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Если НЕ Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	Иначе
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	ЕстьУслуги = Ложь;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад", Объект.Склад);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
	
КонецПроцедуры //

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт
	
	Перем Номенклатура, ЕдиницаИзмерения, Количество;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",		Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",	ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",		Количество);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура	  = Номенклатура;
		СтрокаТабличнойЧасти.Количество  	  = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры //

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризации(Команда)
	ЗаполнитьПоИнвентаризацииСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоИнвентаризацииСервер()
	Если НЕ ЗначениеЗаполнено(Объект.ИнвентаризацияТоваровНаСкладе) Тогда
		ТекстПредупреждения = "Документ ""Инвентаризация материалов"" не выбран.
		|Заполнение невозможно.";
		#Если Клиент Тогда
			Предупреждение(ТекстПредупреждения, , );
			Возврат;                                                  		
		#Иначе
			ВызватьИсключение ТекстПредупреждения;
		#КонецЕсли	
		
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0 Тогда
				
		#Если Клиент Тогда			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		#КонецЕсли		
		
		Объект.Товары.Очистить();
		
	КонецЕсли;
	
	СтруктураКурса    = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаУпрУчета, Объект.Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",          Объект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", Объект.ИнвентаризацияТоваровНаСкладе);
	
	// Заполняем выявленными излишками по инвентаризации, с учетом уже выполненного оприходования
	// по данной инвентаризации. Цены берем из документа инвентаризации.
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет)     КАК КоличествоОтклонениеИнвентаризации, // в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|	КОНЕЦ)                                            КАК КоличествоОприходованное,
	|	Док.Цена,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.уатИнвентаризацияТоваров.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.уатОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка                              <> &ДокументСсылка
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Склад = Объект.ИнвентаризацияТоваровНаСкладе.Склад;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтрокиДобавлены = Ложь;
	Пока Выборка.Следующий() Цикл
		
		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество                 = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма 						= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
	КонецЦикла;
	
	#Если Клиент Тогда
		
		Если Объект.Товары.Количество() = 0 Тогда
			Сообщить("В документе """ + Объект.ИнвентаризацияТоваровНаСкладе.Метаданные().Представление() + """ № " + Объект.ИнвентаризацияТоваровНаСкладе.Номер +" отсутствуют товары фактическое количество которых превышает учетное.");
		КонецЕсли;
		
	#КонецЕсли
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ОтражатьВНалоговомУчете.Доступность = Объект.ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	Объект.ОтражатьВНалоговомУчете = Объект.ОтражатьВБухгалтерскомУчете;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		Предупреждение("В обработке ""Установка прав и настроек"" для организации """ + Объект.Организация + """
		|отключена возможность ведения складского учета документами УАТ!", 5);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияТоваровНаСкладеПриИзменении(Элемент)
	ПриИзмененииИнвентаризацииТоваровНаСкладе();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() 
	 ИЛИ СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * ВыбранноеЗначение.Коэффициент / СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	КонецЕсли; 		
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		ТекОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Иначе
		ТекОрганизация = Объект.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекОрганизация) И НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		#Если Клиент тогда
			Предупреждение("В обработке ""Установка прав и настроек"" для организации """ + ТекОрганизация + """
			|отключена возможность ведения складского учета документами УАТ!");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;	
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
	Объект,
	,
	Параметры.ЗначениеКопирования,
	Параметры.Основание,
	,
	,
	,
	Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
	
	Если НЕ Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда
		Элементы.ТоварыЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
	Иначе	
		Элементы.ТоварыЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
	КонецЕсли;
	
	Элементы.ТоварыЕдиницаИзмерения.ВыбиратьТип = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);
		
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры