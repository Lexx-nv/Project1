////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.

#Если Клиент Тогда
	
	Функция ПечатьОперации() 
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацииСАгрегатами_Операции";
		Макет       = ПолучитьМакет("Операции");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	уатОперацииСАгрегатамиПрочиеАгрегаты.ТС,
		|	уатОперацииСАгрегатамиПрочиеАгрегаты.Состояние,
		|	уатОперацииСАгрегатамиПрочиеАгрегаты.СерияНоменклатуры.Модель КАК Модель,
		|	уатОперацииСАгрегатамиПрочиеАгрегаты.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатОперацииСАгрегатами.ПрочиеАгрегаты КАК уатОперацииСАгрегатамиПрочиеАгрегаты
		|ГДЕ
		|	уатОперацииСАгрегатамиПрочиеАгрегаты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТЗ = Запрос.Выполнить().Выгрузить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, "Операции с агрегатами");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		ОбластьМакета.Параметры.Организация		 = Ссылка.Организация;
		ОбластьМакета.Параметры.СкладПолучатель  = Ссылка.СкладПолучатель;
		ОбластьМакета.Параметры.СкладОтправитель = Ссылка.СкладОтправитель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для Каждого ВыборкаСтрок Из ТЗ Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.НомерСтроки = ТЗ.Индекс(ВыборкаСтрок) + 1;
			
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = Ссылка.Ответственный;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		Иначе
			
			Если НазваниеМакета = "Операции" тогда
				
				ТабДокумент = ПечатьОперации();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецПроцедуры
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("Операции", "Операции с агрегатами");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА


//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатОперацииСАгрегатами.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьАгрегатыТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатОперацииСАгрегатами.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	//Документы.уатОперацииСАгрегатами.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	ЕстьСписание = Ложь;
	ЕстьПриходование = Ложь;
	Для Каждого ТекСтрока ИЗ ПрочиеАгрегаты Цикл
		Если ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.Снято тогда
			ЕстьПриходование = Истина;
		ИначеЕсли ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе тогда
			ЕстьСписание = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьСписание тогда
		ПроверяемыеРеквизиты.Добавить("СкладОтправитель");
	КонецЕсли;
	Если ЕстьПриходование тогда
		ПроверяемыеРеквизиты.Добавить("СкладПолучатель");
	КонецЕсли;
	
	мТаб = ПрочиеАгрегаты.Выгрузить();
	мТаб.Свернуть("СерияНоменклатуры");
	
	Если мТаб.Количество() <> ПрочиеАгрегаты.Количество() тогда
		ТекстСообщения = "В документе есть повторяющиеся агрегаты";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ);
	КонецЕсли;
	
	Для Каждого ТекСтрока ИЗ ПрочиеАгрегаты Цикл
		ТекстСообщения = "";
		Если ТекСтрока.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
			ТекстСообщения = "Агрегат " + ТекСтрока.СерияНоменклатуры.СерийныйНомер + " является шиной. В документе не допустимо использование шин и аккумуляторов";
		ИначеЕсли ТекСтрока.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
			ТекстСообщения = "Агрегат " + ТекСтрока.СерияНоменклатуры.СерийныйНомер + " является аккумулятором. В документе не допустимо использование шин и аккумуляторов";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстСообщения) тогда
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатИнвентаризацияАгрегатов") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатИнвентаризацияАгрегатов") Тогда
		
		Организация 	  = ДанныеЗаполнения.Организация;
		Ответственный	  = ДанныеЗаполнения.Ответственный;
		Комментарий 	  = ДанныеЗаполнения.Комментарий;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.уатВидыДокументаИнвентаризацияАгрегатов.ИнвентаризацияНаТС Тогда
			Для Каждого ТекСтрокаАгрегатыТС Из ДанныеЗаполнения.АгрегатыТС Цикл
				Если ТекСтрокаАгрегатыТС.Агрегат.ТипАгрегата <> Справочники.уатТипыАгрегатов.Аккумулятор И 
					ТекСтрокаАгрегатыТС.Агрегат.ТипАгрегата <> Справочники.уатТипыАгрегатов.Шина Тогда
					НоваяСтрока 				  = ПрочиеАгрегаты.Добавить();
					НоваяСтрока.ТС 				  = ТекСтрокаАгрегатыТС.ТС;
					НоваяСтрока.СерияНоменклатуры = ТекСтрокаАгрегатыТС.Агрегат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли
