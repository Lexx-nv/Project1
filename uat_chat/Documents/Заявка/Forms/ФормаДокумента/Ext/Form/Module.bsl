&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечатьНаСервере(Объект);
	ТабДок.Показать();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатьНаСервере(Знач Объект)
	Возврат Документы.Заявка.Печать(Объект); 		
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Дата = ТекущаяДата();
		Объект.ДатаСоздания = ТекущаяДата();
	КонецЕсли;
	
	фИскомаяСтрока = Неопределено;
	Если Параметры.Свойство("ИдентификаторСтрокиЗаявки") Тогда
		мОбъект = РеквизитФормыВЗначение("Объект");
		Для Каждого мСтрока Из мОбъект.Состав Цикл
			Если мСтрока.КоличествоТС < 1 Тогда
				Продолжить;
			КонецЕсли;
			мМассивИдентификаторов = мСтрока.ХранилищеИдентификаторов.Получить();
			Для Каждого мЭлемент из мМассивИдентификаторов Цикл
				Если Строка(мЭлемент) = Параметры.ИдентификаторСтрокиЗаявки Тогда
					мИндексСтроки = мОбъект.состав.Индекс(мСтрока);
					фИскомаяСтрока = Объект.Состав[мИндексСтроки].ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если фИскомаяСтрока <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого мСтрока Из Объект.Состав Цикл
		мСтрока.СтрокаИсходныхДанныхДляОтображения = СтрЗаменить(СтрЗаменить(мСтрока.СтрокаИсходныхДанных, "&", " / "), "..", "/");
		Если ТипЗнч(мСтрока.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты") Тогда
			мРеквизитыМаршрута = ПолучитьРеквизитыОбъекта(мСтрока.ЦехМаршрут, "Начало, Окончание, Ответсвенный");
			мСтрока.ОтветственныйИзМаршрута = мРеквизитыМаршрута.Ответсвенный;
		КонецЕсли;
	КонецЦикла;
	фСтруктураСтруктурДней = ЗаполнитьСтруктурыДнейМесяца(Объект.Дата);
	ДобавитьСтрокуШаблона(фСтруктураСтруктурДней);
	Если Не фСтруктураСтруктурДней.Свойство("Шаблон") Тогда
		Элементы.ЗапомнитьШаблон.Видимость = Ложь;
		Элементы.ЗапомнитьШаблонКМ.Видимость = Ложь;
		Элементы.ЗаполнитьПоШаблону.Видимость = Ложь;
		Элементы.ЗаполнитьПоШаблонуКМ.Видимость = Ложь;
	КонецЕсли;
	УстановитьУсловноеОформление();
	Элементы.СоставОчиститьСостав.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.X, Ложь, Истина, Истина);	//Ctrl + Shift + X
	Элементы.СоставУдалитьТекущуюСтроку.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.X, Ложь, Истина, Ложь);	//Ctrl + X
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуШаблона(пСтруктураДней)
	вСтруктураШаблона = Новый Структура;
	Если пСтруктураДней = Неопределено Тогда
		Возврат;	//не получится использовать шаблоны
	Иначе
		Для Итр = 1 По 31 Цикл
			вСтруктураШаблона.Вставить("д" + Формат(Итр, "ЧГ="), Ложь);
		КонецЦикла;
		вСтруктураШаблона.Вставить("РабочихДнейВНеделе", "Шаблон");
		вСтруктураШаблона.Вставить("ВсегоДней", 0);
	КонецЕсли;
	пСтруктураДней.Вставить("Шаблон", вСтруктураШаблона);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	//нужно очищать, т.к. дни в месяцах разные
	// выходные и праздники - подсветка
	УсловноеОформление.Элементы.Очистить();
	Если фСтруктураСтруктурДней.Свойство("Режим9") Тогда
		Для мИтр = 1 По 31 Цикл
			Если фСтруктураСтруктурДней.Режим9["д" + мИтр] > 0 Тогда
				мНовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				ДобавитьОформляемоеПоле(мНовыйЭлементУсловногоОформления.Поля, "Составд" + мИтр);
				ДобавитьПростейшийОтбор(мНовыйЭлементУсловногоОформления.Отбор);
				мНовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//доступность дней вне текущего месяца (29 30 31 для февраля, например)
	Если фСтруктураСтруктурДней.Свойство("Режим7") Тогда
		Для мИтр = 1 По 31 Цикл
			Если фСтруктураСтруктурДней.Режим7["д" + мИтр] = 0 Тогда
				мНовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				мНовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
				ДобавитьПростейшийОтбор(мНовыйЭлементУсловногоОформления.Отбор);
				ДобавитьОформляемоеПоле(мНовыйЭлементУсловногоОформления.Поля, "Составд" + мИтр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//подсветка строк, где дней = 0
	мНовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	мНовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Коралловый);
	ДобавитьОтборПосложнее(мНовыйЭлементУсловногоОформления.Отбор, "Объект.Состав.ДнейРаботы", 1, ВидСравненияКомпоновкиДанных.Меньше);
	ДобавитьОформляемоеПоле(мНовыйЭлементУсловногоОформления.Поля, "СоставДнейРаботы");
	
	//Замена текста если Ответственный изменился в маршруте
	мНовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	мПолеКомпоновкиДанныхТекстОтветственный = Новый ПолеКомпоновкиДанных("Объект.Состав.ОтветственныйИзМаршрута");
	мНовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", мПолеКомпоновкиДанныхТекстОтветственный);
	ДобавитьОтборЕщеСложнее(мНовыйЭлементУсловногоОформления.Отбор, "Объект.Состав.ОтветственныйИзМаршрута", "Объект.Состав.Ответственный", ВидСравненияКомпоновкиДанных.НеРавно);
	ДобавитьОформляемоеПоле(мНовыйЭлементУсловногоОформления.Поля, "СоставОтветственный");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда, пПринудительноОткрытьСНезаполненнымиРеквизитами = Ложь)
	Если Не пПринудительноОткрытьСНезаполненнымиРеквизитами Тогда
		//реквизиты, критичные для загрузки
		мСтрокаВажныхРеквизитов = "Контрагент
		|Дата";
		Для мИтр = 1 По СтрЧислоСтрок(мСтрокаВажныхРеквизитов) Цикл
			мИмяРеквизита = СтрПолучитьСтроку(мСтрокаВажныхРеквизитов, мИтр);
			Если ЗначениеЗаполнено(Объект[мИмяРеквизита]) Тогда
				мСтрокаВажныхРеквизитов = СтрЗаменить(мСтрокаВажныхРеквизитов, мИмяРеквизита, "");
			КонецЕсли;
		КонецЦикла;
		мСтрокаВажныхРеквизитов = СокрЛП(мСтрокаВажныхРеквизитов);
		Если мСтрокаВажныхРеквизитов <> "" Тогда
			мЧислоНезаполненныхРеквизитов = СтрЧислоСтрок(мСтрокаВажныхРеквизитов);
			мСтрокаВажныхРеквизитов = СтрЗаменить(мСтрокаВажныхРеквизитов, Символы.ПС, ", ");
			мСписокЗначенийДляКнопок = Новый СписокЗначений;
			мСписокЗначенийДляКнопок.Добавить(КодВозвратаДиалога.Да, "Продолжить");
			мСписокЗначенийДляКнопок.Добавить(КодВозвратаДиалога.Нет, "Вернуться к заполнению");
			мОписаниеОповещенияОтветНаВопросКонтрагентПустПриЗагрузке = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросПустыеРеквизитыПриЗагрузке", ЭтаФорма);
			ПоказатьВопрос(мОписаниеОповещенияОтветНаВопросКонтрагентПустПриЗагрузке, "Важны" + ?(мЧислоНезаполненныхРеквизитов = 1, "й", "е") + " реквизит" + ?(мЧислоНезаполненныхРеквизитов = 1, "", "ы") + " <" + мСтрокаВажныхРеквизитов + "> не указан" + ?(мЧислоНезаполненныхРеквизитов = 1, "", "ы") + ". Загрузка чувствительна к этому. Желаете продолжить или вернуться к заполнению?", мСписокЗначенийДляКнопок, , КодВозвратаДиалога.Да, "Важные реквизиты");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Лог = "Загрузка файла: " + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	мОписаниеОповещенияЗакрытияФормыЗагрузки = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЗагрузки", ЭтаФорма);
	мПараметрыЗагрузки = Новый Структура("Контрагент", Объект.Контрагент);
	ОткрытьФорму("Обработка.юкУниверсальнаяОбработкаЗагрузкиЗаявок.Форма.Форма", мПараметрыЗагрузки, ЭтаФорма, , , , мОписаниеОповещенияЗакрытияФормыЗагрузки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоставПриАктивизацииЯчейки(Элемент)
	//Элемент.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросПустыеРеквизитыПриЗагрузке(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьИзФайла(Неопределено, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЗагрузки(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И пРезультат.Количество() > 0 Тогда
		Объект.Состав.Очистить();
		Для Каждого тЭлемент Из пРезультат Цикл
			мНоваяСтрока = Объект.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, тЭлемент);
			мНоваяСтрока.Комментарий = мНоваяСтрока.Комментарий + тЭлемент.ПостоянноеЗначение;
			мДниЗаполнены = Ложь;
			Если мНоваяСтрока.ДнейРаботы > фСтруктураСтруктурДней.Режим7.ВсегоДней И (мНоваяСтрока.ДнейРаботы % 2 = 0) Тогда
				//предполагаем что это машино-смены при двухсменном графике
				мНоваяСтрока.ВремяПодачи2см = Дата("00010101190000");
				мНоваяСтрока.ДнейРаботы = мНоваяСтрока.ДнейРаботы / 2;
			КонецЕсли;
			Если ЗначениеЗаполнено(тЭлемент.РаботаС) И тЭлемент.РаботаС > НачалоМесяца(Объект.Дата) И мНоваяСтрока.ДнейРаботы >= 1 Тогда
				Для Итр = День(тЭлемент.РаботаС) По День(тЭлемент.РаботаС) + мНоваяСтрока.ДнейРаботы - 1 Цикл
					мНоваяСтрока["д" + Формат(Итр, "ЧГ=")] = Истина;
				КонецЦикла;
				мДниЗаполнены = Истина;
			Иначе
				Если мНоваяСтрока.ДнейРаботы > 0 Тогда
					Для Каждого мПараКлючЗначение Из фСтруктураСтруктурДней Цикл
						Если мНоваяСтрока.ДнейРаботы = мПараКлючЗначение.Значение.ВсегоДней Тогда
							ЗаполнитьЗначенияСвойств(мНоваяСтрока, мПараКлючЗначение.Значение);
							мДниЗаполнены = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Если Не мДниЗаполнены Тогда
				мНоваяСтрока.ДнейРаботы = 0;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(мНоваяСтрока.ВремяПодачи) Тогда
				мНоваяСтрока.ВремяПодачи = Дата("00010101060000");
			КонецЕсли;
			мНоваяСтрока.СтрокаИсходныхДанныхДляОтображения = СтрЗаменить(СтрЗаменить(мНоваяСтрока.СтрокаИсходныхДанных, "&", "."), "..", ".");
			мНоваяСтрока.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭмулироватьРаботуОператора(Команда)
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение( , "Укажите контрагента");
		Возврат;
	КонецЕсли;
	мМассивДанных = ПолучитьМассивСлучайныхТиповИЦехов(500, Объект.Контрагент, Число(СтрокаПоМаске(Строка(Новый УникальныйИдентификатор), "1234567890", 38)));
	ЗаполнитьТаблицуИзМассива(Объект.Состав, мМассивДанных, Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСлучайныхТиповИЦехов(пЧислоСтрок, пКонтрагент, пЗерноГенератора = 0)
	вМассив = Новый Массив;
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ЦехаКонтрагента.Ссылка КАК ЦехМаршрут,
	|	уатТипыТС.Ссылка КАК ТипТС
	|ИЗ
	|	Справочник.уатТипыТС КАК уатТипыТС
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦехаКонтрагента КАК ЦехаКонтрагента
	|	ПО ИСТИНА
	|ГДЕ
	|	НЕ уатТипыТС.ЭтоГруппа 
	|	И НЕ ЦехаКонтрагента.ЭтоГруппа
	|	И ЦехаКонтрагента.Владелец = &Контрагент");
	мЗапрос.УстановитьПараметр("Контрагент", пКонтрагент);
	мТаблицаДанных = мЗапрос.Выполнить().Выгрузить();
	мЧислоСтрокТаблицы = мТаблицаДанных.Количество();
	
	мГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(пЗерноГенератора);
	мСтрокаИменКолонок = "";
	Для Каждого мКолонка Из мТаблицаДанных.Колонки Цикл
		мСтрокаИменКолонок = мСтрокаИменКолонок + ", " + мКолонка.Имя;
	КонецЦикла;
	мСтрокаИменКолонок = Сред(мСтрокаИменКолонок, 2);
	
	Для Итр = 1 По пЧислоСтрок Цикл
		мСлучайноеЧисло = мГенераторСлучайныхЧисел.СлучайноеЧисло(0, мЧислоСтрокТаблицы - 1);
		мСтруктура = Новый Структура(мСтрокаИменКолонок);
		ЗаполнитьЗначенияСвойств(мСтруктура, мТаблицаДанных[мСлучайноеЧисло]);
		мСтруктура.Вставить("КоличествоТС", мСлучайноеЧисло);
		Для мИтр = 1 По 31 Цикл
			мСтруктура.Вставить("д" + мИтр, ?(мСлучайноеЧисло%мИтр = 0, Истина, Ложь));
		КонецЦикла;
		
		вМассив.Добавить(мСтруктура);
		мТаблицаДанных.Сдвинуть(мСлучайноеЧисло, - мСлучайноеЧисло + 1);
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуИзМассива(пТаблицаЗначенийФормы, пМассивСтруктур, пОчищать = Истина)
	Если пОчищать Тогда
		пТаблицаЗначенийФормы.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	Для Каждого мЭлемент Из пМассивСтруктур Цикл
		мНоваяСтрока = пТаблицаЗначенийФормы.Добавить();
		ЗаполнитьЗначенияСвойств(мНоваяСтрока, мЭлемент);
		мНоваяСтрока.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоМаске(пСтрока, пМаска, пМаксимумСимволов = -1)
	вРезультат = "";
	пСтрока = СокрЛП(пСтрока);
	мДлинаИсходнойСтроки = СтрДлина(пСтрока);
	Для мИтр = 1 По мДлинаИсходнойСтроки Цикл
		мСимвол = Сред(пСтрока, мИтр, 1);
		Если Найти(пМаска, мСимвол) > 0 Тогда
			Если пМаксимумСимволов > 0 и мДлинаИсходнойСтроки > пМаксимумСимволов Тогда
				Если СтрДлина(вРезультат) = пМаксимумСимволов Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			вРезультат = вРезультат + мСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат вРезультат;
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	фСтруктураСтруктурДней = ЗаполнитьСтруктурыДнейМесяца(Объект.Дата);
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСтруктурыДнейМесяца(пДата)
	Возврат ПолучитьСтруктуруДней(пДата);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДней(пДата)
	//монструозное преобразование столбцов в строки, пока так... сильно не ругайте, но так быстрее и проще...
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	5 КАК РабочихДнейВНеделе,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	Пятидневка КАК ВсегоДней
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	Шестидневка
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	КалендарныеДни
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8,	//Праздники
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9,	//Праздники + Выходные
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,	//Весь месяц
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)");
	
	мСтрокаДней = "д1,д2,д3,д4,д5,д6,д7,д8,д9,д10,д11,д12,д13,д14,д15,д16,д17,д18,д19,д20,д21,д22,д23,д24,д25,д26,д27,д28,д29,д30,д31";
	мЗапрос.УстановитьПараметр("Дата", НачалоМесяца(пДата));
	мРезультат = мЗапрос.Выполнить().Выгрузить();
	мРезультат.Свернуть("РабочихДнейВНеделе", "" + мСтрокаДней + ",ВсегоДней");
	
	вСтруктура = Новый Структура;
	Для Каждого мСтрока Из мРезультат Цикл
		мСтруктура = Новый Структура("РабочихДнейВНеделе," + мСтрокаДней + ",ВсегоДней");
		ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
		вСтруктура.Вставить("Режим" + Строка(мСтрока.РабочихДнейВНеделе), мСтруктура);
	КонецЦикла;
	
	Возврат вСтруктура;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если фИскомаяСтрока = Неопределено Тогда
		фИскомаяСтрока = 0;
	КонецЕсли;
	Элементы.Состав.ТекущаяСтрока = фИскомаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	Если Лев(Элемент.ТекущийЭлемент.Имя, 7) = "Составд" Тогда
		Если Элементы.Состав.ТекущиеДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "Состав", "")] Тогда
			Элементы.Состав.ТекущиеДанные.ДнейРаботы = Элементы.Состав.ТекущиеДанные.ДнейРаботы + 1;
		Иначе
			Элементы.Состав.ТекущиеДанные.ДнейРаботы = Элементы.Состав.ТекущиеДанные.ДнейРаботы - 1;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	
	Если ТипЗнч(Элементы.Состав.ТекущиеДанные.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты") Тогда
		мРеквизитыМаршрута = ПолучитьРеквизитыОбъекта(Элементы.Состав.ТекущиеДанные.ЦехМаршрут, "Ответсвенный");
		Элементы.Состав.ТекущиеДанные.ОтветственныйИзМаршрута = мРеквизитыМаршрута.Ответсвенный;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПростейшийОтбор(пКоллекцияОтборов)
    мЭлементОтбор = пКоллекцияОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    мЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Дата");
	//мЭлементОтбор.ПравоеЗначение = Истина;
	мЭлементОтбор.Использование = Истина;
	мЭлементОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборПосложнее(пКоллекцияОтборов, пИмяПоляЛевоеЗначение, пПравоеЗначение, пВидСравнения)
    мЭлементОтбор = пКоллекцияОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    мЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пИмяПоляЛевоеЗначение);
	мЭлементОтбор.ПравоеЗначение = пПравоеЗначение;
	мЭлементОтбор.Использование = Истина;
	мЭлементОтбор.ВидСравнения = пВидСравнения;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборЕщеСложнее(пКоллекцияОтборов, пИмяПоляЛевоеЗначение, пПравоеЗначение, пВидСравнения)
    мЭлементОтбор = пКоллекцияОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    мЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пИмяПоляЛевоеЗначение);
	мЭлементОтбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(пПравоеЗначение);
	мЭлементОтбор.Использование = Истина;
	мЭлементОтбор.ВидСравнения = пВидСравнения;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОформляемоеПоле(пКоллекцияПолей, пИмяПоля)
    мПолеЭлемента = пКоллекцияПолей.Элементы.Добавить();
    мПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(пИмяПоля);
	мПолеЭлемента.Использование = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсходныеДанные(Команда)
	Если Элементы.Состав.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСтрокуИсходныхДанных(Элементы.Состав.ТекущиеДанные.СтрокаИсходныхДанных);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтрокуИсходныхДанных(пСтрока)
	мПараметрыФормыСтрокиИсходныхДанных = Новый Структура("СтрокаИсходныхДанных, НомерСтрокиДокумента", пСтрока, (Элементы.Состав.ТекущаяСтрока + 1));
	ОткрытьФорму("Документ.Заявка.Форма.ФормаСтрокиИсходныхДанных", мПараметрыФормыСтрокиИсходныхДанных, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСостав(Команда)
	Если Объект.Состав.Количество() > 0 Тогда
		Объект.Состав.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущуюСтроку(Команда)
	Если Элементы.Состав.ТекущиеДанные <> Неопределено Тогда
		Объект.Состав.Удалить(Элементы.Состав.ТекущиеДанные.НомерСтроки - 1);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафику9(Команда)
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, фСтруктураСтруктурДней.Режим9);
	Элементы.Состав.ТекущиеДанные.ДнейРаботы = фСтруктураСтруктурДней.Режим9.ВсегоДней;
	Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафику5(Команда)
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, фСтруктураСтруктурДней.Режим5);
	Элементы.Состав.ТекущиеДанные.ДнейРаботы = фСтруктураСтруктурДней.Режим5.ВсегоДней;
	Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафику6(Команда)
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, фСтруктураСтруктурДней.Режим6);
	Элементы.Состав.ТекущиеДанные.ДнейРаботы = фСтруктураСтруктурДней.Режим6.ВсегоДней;
	Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафику7(Команда)
	ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, фСтруктураСтруктурДней.Режим7);
	Элементы.Состав.ТекущиеДанные.ДнейРаботы = фСтруктураСтруктурДней.Режим7.ВсегоДней;
	Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГрафикуПусто(Команда)
	Для Итр = 1 По 31 Цикл
		Элементы.Состав.ТекущиеДанные["д" + Итр] = Ложь;
	КонецЦикла;
	Элементы.Состав.ТекущиеДанные.ДнейРаботы = 0;
	Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеТипТС(Команда)
	ВызовВводаЗначенияЗаполнения("ТипТС", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВызовВводаЗначенияЗаполнения(пИмяКолонки, пТолькоПустые)
	пДополнительныеПараметры = Новый Структура("ИмяКолонки, ТолькоПустые, ДополнительныеСоответствияПолей", пИмяКолонки, пТолькоПустые, Неопределено);
	мОписаниеОповещенияВыбраноЗначениеЗаполнения = Новый ОписаниеОповещения("ЗаполнитьЗначенияТаблицы", ЭтаФорма, пДополнительныеПараметры);
	ПоказатьВводЗначения(мОписаниеОповещенияВыбраноЗначениеЗаполнения, Элементы.Состав.ТекущиеДанные[пИмяКолонки], "Укажите значение для заполнения");
КонецПроцедуры

&НаКлиенте
Процедура ВызовЗаполненияПоСтруктуре(пСтруктураЗначений, пСтруктураДополнительныхСоответствий)
	пДополнительныеПараметры = Новый Структура("ИмяКолонки, ТолькоПустые", "", Ложь);
	пДополнительныеПараметры.Вставить("ДополнительныеСоответствияПолей", пСтруктураДополнительныхСоответствий);
	ЗаполнитьЗначенияТаблицы(пСтруктураЗначений, пДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеТипТС(Команда)
	ВызовВводаЗначенияЗаполнения("ТипТС", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеДни5(Команда)
	пСтруктураСоответствияДнейРаботыВсегоДней = Новый Структура("ДнейРаботы", "ВсегоДней");
	ВызовЗаполненияПоСтруктуре(фСтруктураСтруктурДней.Режим5, пСтруктураСоответствияДнейРаботыВсегоДней);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеДни6(Команда)
	пСтруктураСоответствияДнейРаботыВсегоДней = Новый Структура("ДнейРаботы", "ВсегоДней");
	ВызовЗаполненияПоСтруктуре(фСтруктураСтруктурДней.Режим6, пСтруктураСоответствияДнейРаботыВсегоДней);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеДни9(Команда)
	пСтруктураСоответствияДнейРаботыВсегоДней = Новый Структура("ДнейРаботы", "ВсегоДней");
	ВызовЗаполненияПоСтруктуре(фСтруктураСтруктурДней.Режим9, пСтруктураСоответствияДнейРаботыВсегоДней);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеДни7(Команда)
	пСтруктураСоответствияДнейРаботыВсегоДней = Новый Структура("ДнейРаботы", "ВсегоДней");
	ВызовЗаполненияПоСтруктуре(фСтруктураСтруктурДней.Режим7, пСтруктураСоответствияДнейРаботыВсегоДней);
КонецПроцедуры

//процедура заполняет колонку пДополнительныеПараметры.ИмяКолонки выбранным значением пРезультат
//если пДополнительныеПараметры имеет Истину в свойстве "ТолькоПустые" тогда заполняются только пустые строки
//заполнение всегда идет в учетом всех отборов (только видимые данные)
//если ИмяКолонки пустое - заполнение по структуре
//при заполнении по структуре, в поле ДополнительныеСоответствияПолей из пДополнительныеПараметры может быть передана структура дополнительных соответствий полей
//например: пДополнительныеПараметры.Вставить("ДополнительныеСоответствияПолей", Новый Структура("ДнейРаботы", "ВсегоДней"));
// будет означать что в строку таблицы в поле ДнейРаботы нужно заполнить значение из поля ВсегоДней структры пРезультат
&НаКлиенте
Процедура ЗаполнитьЗначенияТаблицы(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		мЗаполнятьТолькоПустые = пДополнительныеПараметры.ТолькоПустые;
		мИмяКолонки = пДополнительныеПараметры.ИмяКолонки;
		мЗаполнениеПоСтруктуре = мИмяКолонки = "";
		мСтруктураДополнительныхСоответствийПолей = пДополнительныеПараметры.ДополнительныеСоответствияПолей;
		мИдентификаторКрайнейСтроки = Неопределено;
		Для Каждого мСтрока Из Объект.Состав Цикл
			мИдентификаторСтроки = мСтрока.ПолучитьИдентификатор();
			Если Элементы.Состав.ПроверитьСтроку(мИдентификаторСтроки) Тогда
				мИдентификаторКрайнейСтроки = мИдентификаторСтроки;
				
				Если (Не мЗаполнениеПоСтруктуре) И (Не мЗаполнятьТолькоПустые) Или (мЗаполнятьТолькоПустые И Не ЗначениеЗаполнено(мСтрока[мИмяКолонки])) Тогда
					мСтрока[мИмяКолонки] = пРезультат;
				ИначеЕсли мЗаполнениеПоСтруктуре Тогда
					ЗаполнитьЗначенияСвойств(мСтрока, пРезультат);
					мСтрока.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
					Если мСтруктураДополнительныхСоответствийПолей <> Неопределено Тогда
						Для Каждого мПараКлючЗначение Из мСтруктураДополнительныхСоответствийПолей Цикл
							мСтрока[мПараКлючЗначение.Ключ] = пРезультат[мПараКлючЗначение.Значение];
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//позиционирование на крайней заполненной строке
		Если мИдентификаторКрайнейСтроки <> Неопределено Тогда
			Элементы.Состав.ТекущаяСтрока = мИдентификаторКрайнейСтроки;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиИсходныхДанных(Команда)
	Элементы.СоставСтрокаИсходныхДанных.Видимость = Не Элементы.СоставСтрокаИсходныхДанных.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеДниОчистить(Команда)
	Для Каждого мСтрока Из Объект.Состав Цикл
		мИдентификаторСтроки = мСтрока.ПолучитьИдентификатор();
		Если Элементы.Состав.ПроверитьСтроку(мИдентификаторСтроки) Тогда
			Для Итр = 1 По 31 Цикл
				мСтрока["д" + Итр] = Ложь;
			КонецЦикла;
			мСтрока.ДнейРаботы = 0;
			мСтрока.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеДниЧисло(Команда)
	пДополнительныеПараметры = Новый Структура("ТолькоПустые, ЗначениеЗаполнения", Ложь, Истина);
	мОписаниеОповещенияЗаполнитьВсеДниЧислоОбработка = Новый ОписаниеОповещения("ЗаполнитьВсеДниЧислоОбработка", ЭтаФорма, пДополнительныеПараметры);
	ПоказатьВводСтроки(мОписаниеОповещенияЗаполнитьВсеДниЧислоОбработка, "1-21,22,28", "Укажите дни или диапазоны дней к заполнению");
КонецПроцедуры

//пРезультат - строка с номерами заполняемых дней, например: "1-21,22 28 23-25" 
&НаКлиенте
Процедура ЗаполнитьВсеДниЧислоОбработка(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		мОчищеннаяСтрока = СтрЗаменить(пРезультат, " ", ",");
		мОчищеннаяСтрока = СтрокаПоМаске(мОчищеннаяСтрока, "1234567890,-");
		
		мМассивОбработки = Новый Массив;
		//мТаблицаОбработки.Колонки.Добавить("НачальноеЗначение");
		//мТаблицаОбработки.Колонки.Добавить("КонечноеЗначение");
		//мТаблицаОбработки.Колонки.Добавить("Цикл");
		
		мТолькоПустые = пДополнительныеПараметры.ТолькоПустые;
		мЗначениеЗаполнения = пДополнительныеПараметры.ЗначениеЗаполнения;
		//от множественных запятых мы защищены, а от множественных дефисов нужно избавляться
		Пока Найти(мОчищеннаяСтрока, "--") > 0 Цикл
			мОчищеннаяСтрока = СтрЗаменить(мОчищеннаяСтрока, "--", "-");
		КонецЦикла;
		//готовим таблицу обработки
		мМультиСтрокаОбработки = СтрЗаменить(мОчищеннаяСтрока, ",", Символы.ПС);
		Для Итр = 1 По СтрЧислоСтрок(мМультиСтрокаОбработки) Цикл
			мПодстрока = СтрПолучитьСтроку(мМультиСтрокаОбработки, Итр);
			Если мПодстрока <> "" Тогда
				Если Лев(мПодстрока, 1) = "-" Или Прав(мПодстрока, 1) = "-" Тогда	//это защита от множественных запятых, образующих пустые подстроки и незначащих дефисов - пропускаем все
					Сообщить("Пропущена строка с неверным форматом: " + мПодстрока);
					Продолжить;
				КонецЕсли;
				мПозицияДефиса = Найти(мПодстрока, "-"); //если дефис и есть, то он не в начале и не в конце
				
				мСтруктураМассиваОбработки = Новый Структура("НачальноеЗначение, КонечноеЗначение, Цикл", 9999999, 9999999, Ложь);
				Если мПозицияДефиса > 0 Тогда
					мСтруктураМассиваОбработки.Цикл = Истина;
					//ограничиваем сверху количеством дней в текущем месяце
					мСтруктураМассиваОбработки.КонечноеЗначение = Мин(Число(Сред(мПодстрока, мПозицияДефиса + 1)), фСтруктураСтруктурДней.Режим7.ВсегоДней);
					мПодстрока = Лев(мПодстрока, мПозицияДефиса - 1);	//обращений к несуществующим индексам не будет.... 8)
				Иначе
					мСтруктураМассиваОбработки.Цикл = Ложь;
				КонецЕсли;
				мСтруктураМассиваОбработки.НачальноеЗначение = Макс(Число(мПодстрока), 1);	// не меньше 1
				Если мСтруктураМассиваОбработки.Цикл И мСтруктураМассиваОбработки.КонечноеЗначение < мСтруктураМассиваОбработки.НачальноеЗначение Тогда
					//SWAP
					мВременноеЗначениеДляОбмена = мСтруктураМассиваОбработки.КонечноеЗначение;
					мСтруктураМассиваОбработки.КонечноеЗначение = мСтруктураМассиваОбработки.НачальноеЗначение;
					мСтруктураМассиваОбработки.НачальноеЗначение = мВременноеЗначениеДляОбмена;
				КонецЕсли;
				мМассивОбработки.Добавить(мСтруктураМассиваОбработки);
			КонецЕсли;
		КонецЦикла;
		
		//непосредственно обработка
		Для Каждого мСтрока Из Объект.Состав Цикл
			мИдентификаторСтроки = мСтрока.ПолучитьИдентификатор();
			Если Элементы.Состав.ПроверитьСтроку(мИдентификаторСтроки) Тогда
				Для Каждого мСтрокаОбработки Из мМассивОбработки Цикл
					Если мСтрокаОбработки.Цикл Тогда
						Для Итр = мСтрокаОбработки.НачальноеЗначение По мСтрокаОбработки.КонечноеЗначение Цикл
							мСтрока["д" + Итр] = мЗначениеЗаполнения;
							мСтрока.ДнейРаботы = мСтрока.ДнейРаботы + ?(мЗначениеЗаполнения, 1, -1);
						КонецЦикла;
					ИначеЕсли мСтрокаОбработки.НачальноеЗначение <= фСтруктураСтруктурДней.Режим7.ВсегоДней Тогда
							
						мСтрока["д" + мСтрокаОбработки.НачальноеЗначение] = мЗначениеЗаполнения;
						мСтрока.ДнейРаботы = мСтрока.ДнейРаботы + ?(мЗначениеЗаполнения, 1, -1);
					КонецЕсли;
					мСтрока.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьШаблон(Команда)
	Если Элементы.Состав.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(фСтруктураСтруктурДней.Шаблон, Элементы.Состав.ТекущиеДанные);
		фСтруктураСтруктурДней.Шаблон.ВсегоДней = Элементы.Состав.ТекущиеДанные.ДнейРаботы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	Если Элементы.Состав.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Элементы.Состав.ТекущиеДанные, фСтруктураСтруктурДней.Шаблон);
		Элементы.Состав.ТекущиеДанные.ДнейРаботы = фСтруктураСтруктурДней.Шаблон.ВсегоДней;
		Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроку(Команда)
	Элементы.Состав.СкопироватьСтроку();
КонецПроцедуры

&НаКлиенте
Процедура СоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элементы.Состав.ТекущиеДанные.СтрокаИсходныхДанных = "Очистить хранилище";
		Элементы.Состав.ТекущиеДанные.СтрокаИсходныхДанныхДляОтображения = "Скопировано";
	КонецЕсли;
	Если НоваяСтрока Тогда
		Элементы.Состав.ТекущиеДанные.КоличествоТС = 1;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент.Имя = "СоставИдентификаторСтрокиЛота" Тогда
		мСтрокаТекущихДанных = Элементы.Состав.ТекущиеДанные;
		
		мСвойстваРазбивки = Новый Структура("ТипТС, Контрагент, ЦехМаршрут, ВремяПодачи, ВремяВозврата, ПозицияПП, МестоРаботы");
		ЗаполнитьЗначенияСвойств(мСвойстваРазбивки, Объект, "Контрагент, МестоРаботы");
		ЗаполнитьЗначенияСвойств(мСвойстваРазбивки, мСтрокаТекущихДанных, "ТипТС, ЦехМаршрут, ВремяПодачи, ВремяВозврата");
		мСвойстваРазбивки.Вставить("ДнейЗаМесяц", мСтрокаТекущихДанных.ДнейРаботы);
		
		мСвойстваРазбивки.Вставить("РежимВыбораИдентификатора", Истина);
		мОписаниеОповещенияВыборСтрокиЛота = Новый ОписаниеОповещения("ОбработкаВыбораСтрокиЛота", ЭтаФорма);
		ОткрытьФорму("Документ.юкЛот.Форма.ФормаПодбораЛота", мСвойстваРазбивки, , , , , мОписаниеОповещенияВыборСтрокиЛота, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСтрокиЛота(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И Не пРезультат = "" Тогда
		Элементы.Состав.ТекущиеДанные.ИдентификаторСтрокиЛота = пРезультат;
		Элементы.Состав.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Элементы.Состав.ТекущиеДанные.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЛог(Команда)
	ПоказатьЗначение( , Элементы.Состав.ТекущиеДанные.Лог);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеВремяПодачи(Команда)
	ВызовВводаЗначенияЗаполненияВремени("ВремяПодачи", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеВремяПодачи2см(Команда)
	ВызовВводаЗначенияЗаполненияВремени("ВремяПодачи2см", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВызовВводаЗначенияЗаполненияВремени(пИмяКолонки, пТолькоПустые)
	мКвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Время);
	мОписаниеТипаВремя = Новый ОписаниеТипов("Дата", , , мКвалификаторДаты, );
	пДополнительныеПараметры = Новый Структура("ИмяКолонки, ТолькоПустые, ДополнительныеСоответствияПолей", пИмяКолонки, пТолькоПустые, Неопределено);
	мОписаниеОповещенияВыбраноЗначениеЗаполнения = Новый ОписаниеОповещения("ЗаполнитьЗначенияТаблицы", ЭтаФорма, пДополнительныеПараметры);
	ПоказатьВводЗначения(мОписаниеОповещенияВыбраноЗначениеЗаполнения, Элементы.Состав.ТекущиеДанные[пИмяКолонки], "Укажите значение для заполнения", мОписаниеТипаВремя);
КонецПроцедуры

&НаКлиенте
Процедура СоставЦехМаршрутПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.Состав.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И ЗначениеЗаполнено(мСтрокаТекущихДанных.ЦехМаршрут) И ТипЗнч(мСтрокаТекущихДанных.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты") Тогда
		мРеквизитыМаршрута = ПолучитьРеквизитыОбъекта(мСтрокаТекущихДанных.ЦехМаршрут, "Начало, Окончание, Ответсвенный");
		мСтрокаТекущихДанных.ВремяПодачи = мРеквизитыМаршрута.Начало;
		мСтрокаТекущихДанных.ВремяВозврата = мРеквизитыМаршрута.Окончание;
		мСтрокаТекущихДанных.Ответственный = мРеквизитыМаршрута.Ответсвенный;
		мСтрокаТекущихДанных.ОтветственныйИзМаршрута = мСтрокаТекущихДанных.Ответственный;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыОбъекта(пОбъект, пСтрокаРеквизитов);
	вСтруктура = Новый Структура();
	мСтрокаРеквизитов = СтрЗаменить(пСтрокаРеквизитов, ",", Символы.ПС);
	Если СтрДлина(мСтрокаРеквизитов) > 0 Тогда
		Для Итр = 1 По СтрЧислоСтрок(мСтрокаРеквизитов) Цикл
			мПоле = СокрЛП(СтрПолучитьСтроку(мСтрокаРеквизитов, Итр));
			вСтруктура.Вставить(мПоле, пОбъект[мПоле]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат вСтруктура;
КонецФункции

&НаКлиенте
Процедура СоставПередНачаломИзменения(Элемент, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры
