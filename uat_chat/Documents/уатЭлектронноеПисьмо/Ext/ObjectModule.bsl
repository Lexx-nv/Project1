////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мОбъектКопирования Экспорт; // Ссылка на источник копирования (при вводе нового копированием).
Перем мСтруктураДоступа Экспорт; // Структура доступных текущему пользователю учетных записей.
Перем НеВыдаватьСообщенияПриЗаписиОбъекта Экспорт; // Признак отмены сообщений при записи/проведении объекта

Перем мРежимБезЗаписи Экспорт; // Флаг запрещает запись документа.

Перем мЭтоНовый;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
	
#Если Клиент Тогда
		
	Процедура ЗаменитьЗапрещенныеСимволыИмени(ИмяФайла)
		
		Если Найти(ИмяФайла,  "\") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "\", " ");
		КонецЕсли;
		Если Найти(ИмяФайла,  "/") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", " ");
		КонецЕсли;
		Если Найти(ИмяФайла,  ":") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, ":", " ");
		КонецЕсли;
		Если Найти(ИмяФайла,  "*") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "*", " ");
		КонецЕсли;
		Если Найти(ИмяФайла,  "?") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "?", " ");
		КонецЕсли;
		Если Найти(ИмяФайла, """") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, """", " ");
		КонецЕсли;
		Если Найти(ИмяФайла,  "<") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "<", " ");
		КонецЕсли;
		Если Найти(ИмяФайла,  ">") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, ">", " ");
		КонецЕсли;
		Если Найти(ИмяФайла,  "|") > 0 Тогда
			ИмяФайла = СтрЗаменить(ИмяФайла, "|", " ");
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура открывает фай для редактирования внешним редактором HTML
	Процедура ЗахватитьТекст() Экспорт
		
		ИмяФайла = "Электронное письмо " + СокрЛП(Номер) + ?(ЗначениеЗаполнено(Тема), (" (" + СокрЛП(Тема) + ")"), "");
		ЗаменитьЗапрещенныеСимволыИмени(ИмяФайла);
		Если СтрДлина(ИмяФайла) > 256 Тогда
			ИмяФайла = Лев(ИмяФайла, 256);
		КонецЕсли; 
		
		ИмяСохраненияФайла = уатУниверсальныеМеханизмы.уатПолучитьИмяФайла(уатУниверсальныеМеханизмы.уатПолучитьИмяКаталога(глЗначениеПеременной("глТекущийПользователь")), (ИмяФайла + ".HTM"));
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстПисьма);
		Попытка
			ТекстовыйДокумент.Записать(ИмяСохраненияФайла);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сохранить файл на диск!");
			Возврат;
		КонецПопытки;
		
		ИмяФайлаРедактированияХТМЛТекста      = ИмяСохраненияФайла;
		ИмяКомпьютераРедактированияХТМЛТекста = ИмяКомпьютера();
		
		ТекстПисьма = "<HTML><HEAD>
		|<META http-equiv=Content-Type content=""" + "text/html; charset=utf-8""" + ">
		|<META content=""" + "MSHTML 6.00.2800.1458""" + " name=GENERATOR></HEAD>
		|<BODY>
		|<P>Текст данного письма редактируется внешним редактором HTML текстов.</P>
		|<P><A href=""" + "ИмяФайлаРедактированияХТМЛТекста" + """>Перейдите по гиперссылке для начала редактирования.</A></P>
		|<P>(" + ИмяФайлаРедактированияХТМЛТекста + ")</A></P>
		|</BODY></HTML>";
		
		
		уатОтношенияСКлиентами.уатОткрытьФайлДляРедактированияВнешнимХТМЛРедактором(ИмяФайлаРедактированияХТМЛТекста);
		
	КонецПроцедуры
	
	// Процедура удаляет файлы обмена
	Процедура ОсвободитьТекст() Экспорт
		
		Если ИмяКомпьютера() <> ИмяКомпьютераРедактированияХТМЛТекста Тогда
			Сообщить("Файл редактируется на компьютере""" + ИмяКомпьютераРедактированияХТМЛТекста + """" + ". Редактирование на текущем компьютере невозможно.");
			Возврат;
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(ИмяФайлаРедактированияХТМЛТекста);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Файл редактирования не удалось открыть.");
			Возврат;
		КонецПопытки;
		
		ТекстПисьма = ТекстовыйДокумент.ПолучитьТекст();
		
		Если ЗначениеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) И НЕ ЗначениеЗаполнено(Ссылка.ИмяФайлаРедактированияХТМЛТекста) Тогда
			Попытка
				УдалитьФайлы(ИмяФайлаРедактированияХТМЛТекста);
			Исключение
			КонецПопытки;
		КонецЕсли; 
		
		ИмяКомпьютераРедактированияХТМЛТекста = "";
		ИмяФайлаРедактированияХТМЛТекста      = "";
		
	КонецПроцедуры
	
	// Процедура заполняет группу по умолчанию у нового письма.
	//
	Процедура УказатьГруппуПоУмолчанию() Экспорт
		
		Если НЕ ЗначениеЗаполнено(ГруппаУчетнойЗаписи) ИЛИ ГруппаУчетнойЗаписи.Владелец <> УчетнаяЗапись Тогда
			ГруппаУчетнойЗаписи = УчетнаяЗапись.ГруппаИсходящие;
		КонецЕсли; 
		
	КонецПроцедуры
	
	// Процедура инициирует отправку письма.
	//
	Процедура ОтправитьПисьмо(ФормаПисьма = Неопределено) Экспорт
		
		ШапкаСообщения = "Не отправлено: " + Строка(ЭтотОбъект);
		
		Если СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное ИЛИ СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное Тогда
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(Кому) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан ни один получатель.",, ШапкаСообщения);
			Возврат;
		КонецЕсли;
		
		Если ПометкаУдаления Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Нельзя отправлять помеченное на удаление письмо.",, ШапкаСообщения);
			Возврат;
		КонецЕсли;
		
		СтатусПисьма = Перечисления.уатСтатусыПисем.Исходящее;
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли; 
		
		Если ФормаПисьма <> Неопределено Тогда
			Попытка
				ФормаПисьма.ЗаписатьВФорме();
				ФормаПисьма.Закрыть();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаСообщения);
				Возврат;
			КонецПопытки;
		Иначе
			Попытка
				ЭтотОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаСообщения);
				Возврат;
			КонецПопытки;
		КонецЕсли; 
		
		Если уатОтношенияСКлиентами.уатПолучитьДоступныеУчетныеЗаписи(глЗначениеПеременной("глТекущийПользователь")).Транспорт.НайтиПоЗначению(УчетнаяЗапись) <> Неопределено Тогда
			УчетныеЗаписи = Новый Массив;
			УчетныеЗаписи.Добавить(УчетнаяЗапись);
			Письма = Новый Массив;
			Письма.Добавить(Ссылка);
			уатОтношенияСКлиентами.уатПолучениеОтправкаПисем(глСоответствиеТекстовЭлектронныхПисемУАТ, глЗначениеПеременной("глТекущийПользователь"), УчетныеЗаписи, Письма, Истина);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Функция формирует строку таблицы документа HTML
	//
	// Параметры
	//  Значение1  – текст обычный. Ячейка 1.
	//  Значение2  – текст, выделенный жирным, справа от обычного. Ячейка 2.
	//
	// Возвращаемое значение:
	//   Строка таблицы HTML
	//
	Функция СтрокаТаблицы(Значение1, Значение2)
		
		СтрокаВозврата = "<TR>
		|<TD class=R0C0>" + Значение1 + "</TD>
		|<TD class=R0C1><STRONG>" + Значение2 + "</STRONG></TD>
		|<TD>&nbsp;</TD></TR>";
		
		Возврат СтрокаВозврата;
		
	КонецФункции // СтрокаТаблицы()
	
	// Функция представляет строку как строку документа HTML
	//
	// Параметры:
	//  ИсходнаяСтрока  – Строка
	//
	// Возвращаемое значение:
	//   Строка HTML
	//
	Функция ПредставлениеСтрокиДляHTML(ИсходнаяСтрока)
		
		СтрокаВозврата = ИсходнаяСтрока;
		
		СтрокаВозврата = СтрЗаменить(СтрокаВозврата, "<", "&lt;");
		СтрокаВозврата = СтрЗаменить(СтрокаВозврата, ">", "&gt;");
		
		Возврат СтрокаВозврата;
		
	КонецФункции // ПредставлениеСтрокиДляHTML()
	
	// Процедура отправляет текущий документ в печать
	//
	Процедура НапечататьПисьмо() Экспорт
		
		ТекстОписанияЭлектронногоПисьма = "Электронное письмо № " + СокрЛП(Номер) + ", " + Дата + "<BR>" + ПредставлениеСтрокиДляHTML((СокрЛП(УчетнаяЗапись) + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">"));
		
		ТекстВыходногоДокумента = "<HTML><HEAD>
		|<META http-equiv=Content-Type content="+""""+"text/html; charset=utf-8" +"""" +  ">
		|<META content=" + """" + "MSHTML 6.00.2800.1458" + """" + " name=GENERATOR></HEAD>
		|<BODY>
		|<H3 class=" + """" + """" + ">" + ТекстОписанияЭлектронногоПисьма + "</H2>
		|<HR>
		|<TABLE cellSpacing=0>
		|<TBODY>
		|<TR class=invisible>
		|<TD width=250></TD>
		|<TD width=460></TD>
		|<TD></TD></TR>
		|";
		
		ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Дата создания:", Строка(Дата));
		ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Дата отправления:", Строка(ДатаОтправления));
		ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Отправитель:", ПредставлениеСтрокиДляHTML(ОтправительПредставление));
		
		Если КомуТЧ.Количество() > 0 Тогда
			ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Получатели:", ПредставлениеСтрокиДляHTML((КомуТЧ[0].Представление + " <" + КомуТЧ[0].АдресЭлектроннойПочты + ">")));
			Для а = 1 По КомуТЧ.Количество() - 1 Цикл
				ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("", ПредставлениеСтрокиДляHTML((КомуТЧ[а].Представление + " <" + КомуТЧ[а].АдресЭлектроннойПочты + ">")));
			КонецЦикла; 
		КонецЕсли;
		
		Если КопииТЧ.Количество() > 0 Тогда
			ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Копии:", ПредставлениеСтрокиДляHTML((КопииТЧ[0].Представление + " <" + КопииТЧ[0].АдресЭлектроннойПочты + ">")));
			Для а = 1 По КопииТЧ.Количество() - 1 Цикл
				ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("", ПредставлениеСтрокиДляHTML((КопииТЧ[а].Представление + " <" + КопииТЧ[а].АдресЭлектроннойПочты + ">")));
			КонецЦикла; 
		КонецЕсли;
		
		ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Тема:", ПредставлениеСтрокиДляHTML(Тема));
		
		Если ЗначениеЗаполнено(Предмет) Тогда
			ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Предмет:", ПредставлениеСтрокиДляHTML(Строка(Предмет)));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ТекстВыходногоДокумента = ТекстВыходногоДокумента + СтрокаТаблицы("Ответственный:", ПредставлениеСтрокиДляHTML(Строка(Ответственный)));
		КонецЕсли;
		
		ТекстВыходногоДокумента = ТекстВыходногоДокумента + "</TBODY></TABLE>
		|";
		
		ТекстВыходногоДокумента = ТекстВыходногоДокумента + "<HR>
		|";
		
		
		ТекстПисьмаДляПечати = ТекстПисьма;
		Если ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ТекстПисьмаДляПечати);
			НовыйHTMLДокумент.close();
			ТегBODY = НовыйHTMLДокумент.all.Tags("BODY");
			Если ТегBODY.length > 0 Тогда
				ТекстПисьмаДляПечати = НовыйHTMLДокумент.all.Tags("Body").item(0).innerHTML;
			КонецЕсли;
		Иначе
			ТекстПисьмаДляПечати = СтрЗаменить(ТекстПисьмаДляПечати, Символы.ПС, "<BR>");
		КонецЕсли;
		
		ТекстВыходногоДокумента = ТекстВыходногоДокумента + "<P>" + ТекстПисьмаДляПечати + "</P>
		|<HR>
		|<P>
		|<TABLE cellSpacing=0>
		|<TBODY>
		|<TR class=invisible>
		|<TD width=250></TD>
		|<TD width=460></TD>
		|<TD></TD></TR>
		|<TR>
		|<TD class=R0C0>Напечатано:</TD>
		|<TD class=R0C1><STRONG>" + Строка(ТекущаяДата()) + "</STRONG></TD>
		|<TD>&nbsp;</TD></TR></TBODY></TABLE></P></BODY></HTML>";
		
		ФормаПечати = ПолучитьФорму("ФормаПечати");
		ФормаПечати.ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстВыходногоДокумента);
		ФормаПечати.Заголовок = Строка(ЭтотОбъект);
		ФормаПечати.Открыть();
		
	КонецПроцедуры
	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА
	
	// Процедура - обработчик события "ПриКопировании" объекта.
	//
	Процедура ПриКопировании(ОбъектКопирования)
		
		мОбъектКопирования = ОбъектКопирования.Ссылка;
		
	КонецПроцедуры
	
	// Процедура - обработчик события "ПриЗаписи" объекта.
	//
	Процедура ПриЗаписи(Отказ)
		
		ШапкаСообщения = "Не записано: " + Строка(ЭтотОбъект);
		
		// Запишем потомственность писем
		Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
			
			Если Ответ ИЛИ Переадресация Тогда
				
				СостояниеПотомка = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ПустаяСсылка();
				Если СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное Тогда
					Если Ответ Тогда
						СостояниеПотомка = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ОтветОтправлен;
					Иначе
						СостояниеПотомка = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ПереадресацияОтправлена;
					КонецЕсли; 
				ИначеЕсли СтатусПисьма = Перечисления.уатСтатусыПисем.Исходящее ИЛИ СтатусПисьма = Перечисления.уатСтатусыПисем.Сохраненное Тогда
					Если Ответ Тогда
						СостояниеПотомка = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ОтветСохранен;
					Иначе
						СостояниеПотомка = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ПереадресацияСохранена;
					КонецЕсли; 
				КонецЕсли;
				
				ОбъектОснование = Основание.ПолучитьОбъект();
				ОбъектОснование.СостояниеПотомкаПисьма = СостояниеПотомка;
				
				Если Основание.НеРассмотрено
					И УчетнаяЗапись.АвтоматическаяУстановкаПометкиРассмотреноПриОтвете
					И СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное
					И Ответ Тогда
					Если НЕ ЗначениеЗаполнено(ОбъектОснование.Ответственный) Тогда
						ОбъектОснование.Ответственный = глЗначениеПеременной("глТекущийПользователь");
					КонецЕсли; 
					ОбъектОснование.НеРассмотрено = Ложь;
				КонецЕсли; 
				
				Попытка
					ОбъектОснование.Записать();
				Исключение
				КонецПопытки;
				
			Иначе
				
				Если Основание.НеРассмотрено
					И УчетнаяЗапись.АвтоматическаяУстановкаПометкиРассмотреноПриПолученииОтвета
					И СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное
					И мЭтоНовый Тогда
					
					ОбъектОснование = Основание.ПолучитьОбъект();
					Если НЕ ЗначениеЗаполнено(ОбъектОснование.Ответственный) Тогда
						ОбъектОснование.Ответственный = глЗначениеПеременной("глТекущийПользователь");
					КонецЕсли; 
					ОбъектОснование.НеРассмотрено = Ложь;
					Попытка
						ОбъектОснование.Записать();
					Исключение
					КонецПопытки;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
		ГруппаУдаленные = УчетнаяЗапись.ГруппаУдаленные;
		ГруппаЧерновики = УчетнаяЗапись.ГруппаЧерновики;
		
		Если ПометкаУдаления И ЗначениеЗаполнено(ГруппаУдаленные) Тогда
			ТекГруппа = ГруппаУдаленные;
		ИначеЕсли НЕ ПометкаУдаления И ЗначениеЗаполнено(ГруппаЧерновики) И СтатусПисьма = Перечисления.уатСтатусыПисем.Сохраненное Тогда
			ТекГруппа = ГруппаЧерновики;
		Иначе
			ТекГруппа = ГруппаУчетнойЗаписи;
		КонецЕсли; 
		
		// Записи регистра для подсчета количества не рассмотренных писем
		Набор = Движения.уатПисьмаЭлектроннойПочты;
		Набор.Прочитать();
		Набор.Очистить();
		
		Запись = Набор.Добавить();
		Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
		Запись.КоличествоЧерновики = 0;
		Если ПометкаУдаления И ЗначениеЗаполнено(ГруппаУдаленные) Тогда
			Запись.ГруппаУчетнойЗаписи = ГруппаУдаленные;
		ИначеЕсли НЕ ПометкаУдаления И ЗначениеЗаполнено(ГруппаЧерновики) И СтатусПисьма = Перечисления.уатСтатусыПисем.Сохраненное Тогда
			Запись.ГруппаУчетнойЗаписи = ГруппаЧерновики;
			Запись.КоличествоЧерновики = 1;
		Иначе
			Запись.ГруппаУчетнойЗаписи = ГруппаУчетнойЗаписи;
		КонецЕсли; 
		Если УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам И ЗначениеЗаполнено(ТекГруппа) И ТекГруппа.ИспользоватьПредметыПисем Тогда
			Запись.Предмет = ?(НЕ ЗначениеЗаполнено(Предмет), "", Предмет);
		Иначе
			Запись.Предмет = "";
		КонецЕсли;
		Запись.КоличествоНеРассмотрено = ?(НеРассмотрено, 1, 0);
		Запись.ГраницаПрочитанности    = РассмотретьПосле;
		Запись.Период                  = Дата;
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаСообщения);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		// Записи регистра для отображения соответствия Группа писем/Предмет
		Набор = Движения.уатПредметыЭлектронныхПисем;
		
		Набор.Прочитать();
		
		Если мЭтоНовый Тогда
			СкрытыйПредмет = Ложь;
		Иначе
			Если Набор.Количество() > 0 Тогда
				СкрытыйПредмет = Набор[0].Скрытый;
			Иначе
				СкрытыйПредмет = Ложь;
			КонецЕсли; 
		КонецЕсли; 
		
		Набор.Очистить();
		
		Если УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам И ЗначениеЗаполнено(ТекГруппа) И ТекГруппа.ИспользоватьПредметыПисем Тогда
			Запись = Набор.Добавить();
			Запись.ГруппаПисемЭлектроннойПочты = ТекГруппа;
			Запись.Предмет                     = ?(НЕ ЗначениеЗаполнено(Предмет), "", Предмет);
			Запись.Период                      = Дата;
			Запись.Скрытый                     = СкрытыйПредмет;
		КонецЕсли; 
		
		Попытка
			Набор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ШапкаСообщения);
			Отказ = Истина;
		КонецПопытки;
		
	КонецПроцедуры
	
	// Процедура вызывается перед записью документа 
	//
	Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
		уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
		Если мРежимБезЗаписи Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		РассмотретьПосле = НачалоМинуты(РассмотретьПосле);
		
		мЭтоНовый = ЭтоНовый();
		
		Транспорт = мСтруктураДоступа.Транспорт;
		Отправка  = мСтруктураДоступа.Отправка;
		
		ШапкаСообщения = "Не записано: " + Строка(ЭтотОбъект);
		
		Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Если НЕ НеВыдаватьСообщенияПриЗаписиОбъекта Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указана учетная запись.",, ШапкаСообщения);
			КонецЕсли; 
			Отказ = Истина;
		КонецЕсли;
		
		Если СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное Тогда
			Если НЕ ЗначениеЗаполнено(Ответственный) И НЕ НеРассмотрено Тогда
				НеРассмотрено = Истина;
			КонецЕсли;
		ИначеЕсли СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное Тогда
			Если ЭтоНовый() Тогда
				Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
					Ответственный = глЗначениеПеременной("глТекущийПользователь");
				КонецЕсли;
			Иначе
				Если Ответственный <> Ссылка.Ответственный Тогда
					Если НЕ НеВыдаватьСообщенияПриЗаписиОбъекта Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Нельзя менять ответственного в отправленном электронном письме.",, ШапкаСообщения);
					КонецЕсли; 
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		// В группу Удаленные и Черновики нельзя записывать письма
		ГруппаУдаленные = мСтруктураДоступа.ГруппыУдаленные.Получить(УчетнаяЗапись);
		Если ГруппаУчетнойЗаписи = ГруппаУдаленные Тогда
			Если НЕ НеВыдаватьСообщенияПриЗаписиОбъекта Тогда
				ОбщегоНазначения.СообщитьОбОшибке(("Нельзя выбирать в качестве группы письма группу """ + ГруппаУдаленные + """, потому что она предназначена только для отображения удаленных писем."),, ШапкаСообщения);
			КонецЕсли; 
			Отказ = Истина;
		КонецЕсли;
		
		ГруппаЧерновики = мСтруктураДоступа.ГруппыЧерновики.Получить(УчетнаяЗапись);
		Если ГруппаУчетнойЗаписи = ГруппаЧерновики Тогда
			Если НЕ НеВыдаватьСообщенияПриЗаписиОбъекта Тогда
				ОбщегоНазначения.СообщитьОбОшибке(("Нельзя выбирать в качестве группы письма группу """ + ГруппаЧерновики + """, потому что она предназначена только для отображения черновиков писем."),, ШапкаСообщения);
			КонецЕсли; 
			Отказ = Истина;
		КонецЕсли; 
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		КомуПредставление = "";
		Для каждого СтрокаКому Из КомуТЧ Цикл
			КомуПредставление = КомуПредставление + ", " + ?(ПустаяСтрока(СтрокаКому.Представление), СтрокаКому.АдресЭлектроннойПочты, СтрокаКому.Представление);
		КонецЦикла;
		Если НЕ ПустаяСтрока(КомуПредставление) Тогда
			КомуПредставление = Сред(КомуПредставление, 3);
		КонецЕсли; 
		
		КопииПредставление = "";
		Для каждого СтрокаКопии Из КопииТЧ Цикл
			КопииПредставление = КопииПредставление + ", " + ?(ПустаяСтрока(СтрокаКопии.Представление), СтрокаКопии.АдресЭлектроннойПочты, СтрокаКопии.Представление);
		КонецЦикла; 
		Если НЕ ПустаяСтрока(КопииПредставление) Тогда
			КопииПредставление = Сред(КопииПредставление, 3);
		КонецЕсли; 
		
		Если УчетнаяЗапись.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма И ЭтоНовый() И НЕ ЗначениеЗаполнено(Предмет) Тогда
			Предмет = Тема;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтатусПисьма) Тогда
			СтатусПисьма = Перечисления.уатСтатусыПисем.Сохраненное;
		КонецЕсли; 
		
		Если СтатусПисьма <> Перечисления.уатСтатусыПисем.Полученное Тогда
			ОтправительИмя                   = УчетнаяЗапись.Наименование;
			ОтправительАдресЭлектроннойПочты = УчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли; 
		
		Если ПустаяСтрока(ОтправительПредставление) Тогда
			Если НЕ ПустаяСтрока(УчетнаяЗапись.Наименование) И ПустаяСтрока(УчетнаяЗапись.АдресЭлектроннойПочты) Тогда
				ОтправительПредставление = УчетнаяЗапись.Наименование;
			ИначеЕсли ПустаяСтрока(УчетнаяЗапись.Наименование) И НЕ ПустаяСтрока(УчетнаяЗапись.АдресЭлектроннойПочты) Тогда
				ОтправительПредставление = УчетнаяЗапись.АдресЭлектроннойПочты;
			Иначе
				ОтправительПредставление = УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";
			КонецЕсли; 
		КонецЕсли;
		
		Если ПустаяСтрока(ОтправительИмя) Тогда
			ОтправительИмя = ОтправительАдресЭлектроннойПочты;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Предмет) Тогда
			Предмет = "";
		КонецЕсли; 
		
		Если НЕ ЭтоНовый() Тогда
			
			Выборка = Справочники.уатВложенияЭлектронныхПисем.Выбрать(,, Новый Структура("Объект", Ссылка));
			
			НаличиеВложенийКартинок = Ложь;
			ЕстьВложения = Ложь;
			
			НайденноеСоответствие = глСоответствиеТекстовЭлектронныхПисемУАТ.Получить(Ссылка);
			
			ТаблицаКартинок = Новый ТаблицаЗначений;
			ТаблицаКартинок.Колонки.Добавить("Данные");
			ТаблицаКартинок.Колонки.Добавить("ИмяФайла");
			ТаблицаКартинок.Колонки.Добавить("ИДФайлаПочтовогоПисьма");
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ПометкаУдаления <> ПометкаУдаления Тогда
					Объект = Выборка.ПолучитьОбъект();
					Попытка
						Объект.УстановитьПометкуУдаления(ПометкаУдаления);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(Выборка.ИДФайлаПочтовогоПисьма) Тогда
					НаличиеВложенийКартинок = Истина;
					Если НайденноеСоответствие = Неопределено Тогда
						НоваяСтрокаТЗ = ТаблицаКартинок.Добавить();
						НоваяСтрокаТЗ.Данные                 = Выборка.Хранилище;
						НоваяСтрокаТЗ.ИДФайлаПочтовогоПисьма = Выборка.ИДФайлаПочтовогоПисьма;
					КонецЕсли;
				Иначе
					ЕстьВложения = Истина;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если НайденноеСоответствие = Неопределено И ТаблицаКартинок.Количество() > 0 Тогда
				КопияТекстаПисьма = ТекстПисьма;
				уатОтношенияСКлиентами.уатПропарситьHTMLИДВ_ТекстКартинки(глСоответствиеТекстовЭлектронныхПисемУАТ, глЗначениеПеременной("глТекущийПользователь"), ТаблицаКартинок, КопияТекстаПисьма);
				глСоответствиеТекстовЭлектронныхПисемУАТ.Вставить(Ссылка, КопияТекстаПисьма);
			КонецЕсли; 
			
			Если ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Если НаличиеВложенийКартинок = Истина Тогда
					ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками;
				Иначе
					ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML;
				КонецЕсли; 
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИмяФайлаРедактированияХТМЛТекста) И ЗначениеЗаполнено(Ссылка.ИмяФайлаРедактированияХТМЛТекста) Тогда
				Попытка
					УдалитьФайлы(Ссылка.ИмяФайлаРедактированияХТМЛТекста);
				Исключение
				КонецПопытки;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецПроцедуры // ПередЗаписью
	
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мСтруктураДоступа = уатОтношенияСКлиентами.уатПолучитьДоступныеУчетныеЗаписи(глЗначениеПеременной("глТекущийПользователь"));
НеВыдаватьСообщенияПриЗаписиОбъекта = Ложь;
мРежимБезЗаписи = Ложь;


