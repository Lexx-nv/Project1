////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.

#Если Клиент Тогда
	
	Функция ПечатьПоступление() 
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеАгрегатов_Поступление";
		Макет       = ПолучитьМакет("Поступление");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	уатПоступлениеАгрегатовШины.Цена,
		|	уатПоступлениеАгрегатовШины.СерияНоменклатуры.Модель КАК Модель,
		|	уатПоступлениеАгрегатовШины.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатПоступлениеАгрегатов.Шины КАК уатПоступлениеАгрегатовШины
		|ГДЕ
		|	уатПоступлениеАгрегатовШины.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатПоступлениеАгрегатовАккумуляторы.СерияНоменклатуры.Модель КАК Модель,
		|	уатПоступлениеАгрегатовАккумуляторы.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатПоступлениеАгрегатов.Аккумуляторы КАК уатПоступлениеАгрегатовАккумуляторы
		|ГДЕ
		|	уатПоступлениеАгрегатовАккумуляторы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатПоступлениеАгрегатовПрочиеАгрегаты.СерияНоменклатуры.Модель КАК Модель,
		|	уатПоступлениеАгрегатовПрочиеАгрегаты.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатПоступлениеАгрегатов.ПрочиеАгрегаты КАК уатПоступлениеАгрегатовПрочиеАгрегаты
		|ГДЕ
		|	уатПоступлениеАгрегатовПрочиеАгрегаты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТЗШины		   = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ТЗАккумуляторы = Запрос.ВыполнитьПакет()[1].Выгрузить();
		ТЗПрочие 	   = Запрос.ВыполнитьПакет()[2].Выгрузить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, "Поступление агрегатов");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		ОбластьМакета.Параметры.Организация = Ссылка.Организация;
		ОбластьМакета.Параметры.Склад		= Ссылка.Склад;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ТЗШины.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыШины");
			ТабДокумент.Вывести(ОбластьМакета);
			Сумма = 0;
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаШины");
			Для Каждого ВыборкаСтрок Из ТЗШины Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗШины.Индекс(ВыборкаСтрок) + 1;
				Сумма = Сумма + ВыборкаСтрок.Цена;
				
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Вывести Сумму прописью
			ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи                          = Сумма;
			ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ТЗШины.Количество()
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Ссылка.ВалютаДокумента);
			ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Ссылка.ВалютаДокумента);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ТЗАккумуляторы.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыАккумуляторы");
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаАккумуляторы");
			Для Каждого ВыборкаСтрок Из ТЗАккумуляторы Цикл			
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗАккумуляторы.Индекс(ВыборкаСтрок) + 1;
				
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЦикла;
			Если ТЗПрочие.Количество() Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалАккумуляторы");
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;
		
		Если ТЗПрочие.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыПрочие");
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПрочие");
			Для Каждого ВыборкаСтрок Из ТЗПрочие Цикл			
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗПрочие.Индекс(ВыборкаСтрок) + 1;
				
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЦикла;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = Ссылка.Ответственный;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		Иначе
			
			Если НазваниеМакета = "Поступление" тогда
				
				ТабДокумент = ПечатьПоступление();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецПроцедуры
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("Поступление", "Поступление агрегатов");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ЗаписатьРеквизитыШин(Отказ)
	ТекВалюта = ?(ЗначениеЗаполнено(ВалютаДокумента), ВалютаДокумента, Константы.ВалютаРегламентированногоУчета.Получить());
	Для Каждого ТекСтрокаШина Из Шины Цикл
		Если ТекСтрокаШина.СерияНоменклатуры.ПервоначальнаяСтоимость <> ТекСтрокаШина.Цена
			ИЛИ ТекСтрокаШина.СерияНоменклатуры.Валюта <> ТекВалюта Тогда
			ШинаОбъект = ТекСтрокаШина.СерияНоменклатуры.ПолучитьОбъект(); 
			ШинаОбъект.ПервоначальнаяСтоимость = ТекСтрокаШина.Цена;
			ШинаОбъект.Валюта = ТекВалюта;
			Попытка 
				ШинаОбъект.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать шину " + ШинаОбъект.СерийныйНомер + "",Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Процедура ЗаписатьРеквизитыПрочихАгрегатов(Отказ)
	Для Каждого ТекСтрока Из ПрочиеАгрегаты Цикл
		Если ТекСтрока.СерияНоменклатуры.ГоденДо <> ТекСтрока.ГоденДо Тогда
			СпрОб = ТекСтрока.СерияНоменклатуры.ПолучитьОбъект(); 
			СпрОб.ГоденДо = ТекСтрока.ГоденДо;
			Попытка 
				СпрОб.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать агрегат " + СпрОб.СерийныйНомер + " (" + СпрОб.Модель + ")",Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 


//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	Документы.уатПоступлениеАгрегатов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьИзносПробегШин(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗаписатьРеквизитыШин(Отказ);
	ЗаписатьРеквизитыПрочихАгрегатов(Отказ);
	
	Документы.уатПоступлениеАгрегатов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатПоступлениеАгрегатов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	Для каждого ТекСтрокаШина Из Шины Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрокаШина.СерияНоменклатуры.Модель) Тогда 
			ТекстСообщения = "Не заполнена модель у шины с номером " + ТекСтрокаШина.СерияНоменклатуры.СерийныйНомер;
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	//проверка на дубли строк
	Если НЕ Отказ Тогда
		тблШины = Шины.Выгрузить().Скопировать();
		тблШины.Свернуть("СерияНоменклатуры");
		Если тблШины.Количество() < Шины.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Шины"" присутствуют повторяющиеся строки (дублирование серий номенклатуры)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		тблАккумуляторы = Аккумуляторы.Выгрузить().Скопировать();
		тблАккумуляторы.Свернуть("СерияНоменклатуры");
		Если тблАккумуляторы.Количество() < Аккумуляторы.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Аккумуляторы"" присутствуют повторяющиеся строки (дублирование серий номенклатуры)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		тблПрочиеАгрегаты = ПрочиеАгрегаты.Выгрузить().Скопировать();
		тблПрочиеАгрегаты.Свернуть("СерияНоменклатуры");
		Если тблПрочиеАгрегаты.Количество() < ПрочиеАгрегаты.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Прочие агрегаты"" присутствуют повторяющиеся строки (дублирование серий номенклатуры)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатИнвентаризацияАгрегатов") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатИнвентаризацияАгрегатов") Тогда
		
		Организация 	  = ДанныеЗаполнения.Организация;
		Комментарий 	  = ДанныеЗаполнения.Комментарий;
		Ответственный	  = ДанныеЗаполнения.Ответственный;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.уатВидыДокументаИнвентаризацияАгрегатов.ИнвентаризацияНаСкладах Тогда
			Склад = ДанныеЗаполнения.Склад;			
			Для Каждого ТекСтрока Из ДанныеЗаполнения.АгрегатыСклад Цикл
				// проверяем на наличие неучтенных агрегатов
				Если ТекСтрока.Наличие И НЕ ТекСтрока.НаличиеУчет Тогда											
					Если ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда	
						НоваяСтрока					  = Шины.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					ИначеЕсли ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда 										
						НоваяСтрока 				  = Аккумуляторы.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					Иначе
						НоваяСтрока 				  = ПрочиеАгрегаты.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;				
					КонецЕсли;					
				КонецЕсли;
			КонецЦикла;				
		Иначе			
			Для Каждого ТекСтрока Из ДанныеЗаполнения.АгрегатыТС Цикл				
				// проверяем на наличие неучтенных агрегатов				
				Если ТекСтрока.Наличие И НЕ ТекСтрока.НаличиеУчет Тогда														
					Если ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда					
						НоваяСтрока					  = Шины.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					ИначеЕсли ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда 										
						НоваяСтрока 				  = Аккумуляторы.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					Иначе					
						НоваяСтрока 				  = ПрочиеАгрегаты.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					КонецЕсли;				
				КонецЕсли;
			КонецЦикла;							
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли
