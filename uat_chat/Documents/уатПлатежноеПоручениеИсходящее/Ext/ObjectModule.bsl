Перем Права Экспорт; //Переменная хранит список прав и настроек , полученный из глобальной переменной

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт; //Курс валюты документа
Перем КратностьДокумента Экспорт;  //Кратность валюты документа

Перем мВалютаРегламентированногоУчета Экспорт;//Переменная хранит значение валюты регламентированного учёта,полученное из констант

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	НомерПечать = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
	
	Если Прав(НомерПечать,3)="000" Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = БанковскийСчет.МесяцПрописью;
	СуммаБезКопеек  = БанковскийСчет.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(БанковскийСчет.БанкДляРасчетов), БанковскийСчет.Банк, БанковскийСчет.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если ЭтоОбъединениеСБП Тогда
		Обл.Параметры.ИННПлательщика			   = "ИНН " + Организация.ИНН;
		Обл.Параметры.КПППлательщика			   = "КПП " + Организация.КПП;		
		Обл.Параметры.ТекстПлательщика			   = Организация.НаименованиеПолное;
		Обл.Параметры.НаименованиеБанкаПлательщика = "" + БанкОрганизации + " " + БанкОрганизации.Город;
		Обл.Параметры.НаименованиеБанкаПолучателя  = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
		Обл.Параметры.ИННПолучателя		           = "ИНН " + Контрагент.ИНН;
		Обл.Параметры.КПППолучателя     	       = "КПП " + Контрагент.КПП;
		Обл.Параметры.ТекстПолучателя              = Контрагент.НаименованиеПолное;
	Иначе
		Обл.Параметры.ПлательщикИНН				   = "ИНН " + Организация.ИНН;
		Обл.Параметры.ПлательщикКПП				   = "КПП " + Организация.КПП;	
		Обл.Параметры.Плательщик	               = Организация.НаименованиеПолное;
		Обл.Параметры.БанкПлательщика			   = "" + БанкОрганизации + " " + БанкОрганизации.Город;
		Обл.Параметры.БанкПолучателя			   = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
		Обл.Параметры.ПолучательИНН          	   = "ИНН " + Контрагент.ИНН;
		Обл.Параметры.ПолучательКПП           	   = "КПП " + Контрагент.КПП;
		Обл.Параметры.Получатель              	   = Контрагент.НаименованиеПолное;
	КонецЕсли;
	
	Если БанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + БанковскийСчет.НомерСчета+ " в " + БанковскийСчет.Банк + " " + БанковскийСчет.Банк.Город;	
	КонецЕсли;
	
	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(БанковскийСчет);
	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;
	
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;
	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()	
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	ИначеЕсли НазваниеМакета = "ПлатежноеПоручение" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
		
	КонецЕсли;		
КонецПроцедуры

// Стандартная отработка события изменения контрагента в платежных документах
//
// Параметры
//   ДокументОбъект – ДокументОбъект – Документ, у которого изменился контрагент
//   СтрокаПлатеж - строка содержащая сумму платежа по контрагенту
//
Процедура ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж) Экспорт

	ВосстанавливатьРеквизиты = (РасшифровкаПлатежа.Количество() = 1);
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
		
	Иначе
		
		СписокДоговоров = Новый СписокЗначений;
	 	Если ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ПрочиеРасчетыСКонтрагентами тогда
			СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		ИначеЕсли ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ОплатаПокупателя тогда
			СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		КонецЕсли;
		СтруктураПараметровДляПолученияДоговора = Новый Структура ("СписокДопустимыхВидовДоговоров",СписокДоговоров);
		СтрокаПлатеж.ДоговорКонтрагента = уатОбщегоНазначенияТиповые.уатПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора);
		
	КонецЕсли;
		
	СтрокаПлатеж.СуммаПлатежа = ДокументОбъект.СуммаДокумента;

	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтавкаНДС = СтараяСтавкаНДС;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаВПлатежномДокументе()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение","Платежное поручение");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = БанковскийСчет.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

#КонецЕсли

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт

	ЗначениеСтавкиНДС     = уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);

	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);

КонецПроцедуры // ПересчитатьСуммуНДС()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	Документы.уатПлатежноеПоручениеИсходящее.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение_проф.ОтразитьДвижениеДДС(ДополнительныеСвойства, Движения, Отказ);
	Если НЕ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.РасходДенежныхСредствПрочее тогда
		уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатПлатежноеПоручениеИсходящее.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	МассивДоговоров = ЭтотОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента");
	ТаблицаДоговоров = Новый таблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Договор");
	ТаблицаДоговоров.ЗагрузитьКолонку(МассивДоговоров,"Договор");
	ТаблицаДоговоров.Свернуть("Договор");
	
	Если ТаблицаДоговоров.Количество() = 1 Тогда
		ДоговорКонтрагента = ТаблицаДоговоров[0].Договор;
	Иначе
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатПлатежноеПоручениеИсходящее.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке(" не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
	КонецЕсли;
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если НЕ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.расходДенежныхСредствПрочее Тогда
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
			Если НЕ ЭтоОбъединениеСБП И НЕ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				
				Если НЕ ЗначениеЗаполнено(Платеж.Сделка) тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Сделка""",Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.РасходДенежныхСредствПрочее Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.найти("Контрагент"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.найти("РасшифровкаПлатежа.ДоговорКонтрагента"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.найти("РасшифровкаПлатежа.СуммаВзаиморасчетов"));
	КонецЕсли;


КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

