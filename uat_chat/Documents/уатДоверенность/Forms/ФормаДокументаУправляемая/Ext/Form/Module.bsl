////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации()
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	ЕстьУслуги = Ложь;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
		
КонецПроцедуры //

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",	   ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",		   Количество);
	
	Если ТипЗнч(ЕдиницаИзмерения) <> Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ЕдиницаИзмерения = ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
	КонецЕсли;
	
	НаименованиеТовара = Номенклатура.НаименованиеПолное;
	Если ПустаяСтрока(НаименованиеТовара) Тогда
		НаименованиеТовара = Номенклатура.Наименование;
	КонецЕсли;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("НаименованиеТовара",      НаименованиеТовара);
	СтруктураОтбора.Вставить("ЕдиницаПоКлассификатору", ЕдиницаИзмерения);
	
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара		 = НаименованиеТовара;
		СтрокаТабличнойЧасти.Количество  	    	 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаПоКлассификатору = ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры //


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;

	// если дата действия отличалась на 10 дней, т.е. не была исправлена, надо ее поправить
	Если (НачалоДня(Объект.ДатаДействия) - НачалоДня(ДатаДокумента) = 10 * (24 * 60 * 60)) Тогда
		Объект.ДатаДействия = ДатаДокумента + 10 * (24 * 60 * 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		Предупреждение("В обработке ""Установка прав и настроек"" для организации """ + Объект.Организация + """
				       |отключена возможность ведения складского учета документами УАТ!", 5);
	КонецЕсли;

	
	ПриИзмененииКонтрагентаИлиОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ПриИзмененииКонтрагентаИлиОрганизации();
		
	КонецЕсли;

	Объект.НаПолучениеОт = Строка(Объект.Контрагент.НаименованиеПолное);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	// Вывести информацию об удостоверении личности.
	Элементы.ИнфНадписьУдЛичностиФизЛица.Заголовок = уатОбщегоНазначенияТиповые.уатПолучитьПаспортныеДанныеСтрокой(Объект.Сотрудник.ФизЛицо);
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	// обработка выполняется, только если значение поля действительно изменилось
	Если НЕ Сделка = Объект.Сделка Тогда
		
		// формирование представления документа
		ПредставлениеДокумента = ?(НЕ ЗначениеЗаполнено(Объект.Сделка), "", уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Объект.Сделка, СокрЛП(Сделка.Метаданные().Представление())));
		
		// если реквизит не пустой и отличается от сформированного представления документа - задается вопрос, что с ним делать
		Если ЗначениеЗаполнено(Объект.ПоДокументу) И НЕ Объект.ПоДокументу = ПредставлениеДокумента Тогда
			
			Ответ = Вопрос(?(НЕ ЗначениеЗаполнено(Объект.Сделка), "Очистить", "Изменить") +  " дополнительный реквизит ""По документу""?",
						   РежимДиалогаВопрос.ДаНет, , ,"Очистка реквизита формы");
						   
		КонецЕсли;
		
		// если решено что-то сделать или документ пустой, записывается новое значение
		Если Ответ = КодВозвратаДиалога.Да ИЛИ НЕ ЗначениеЗаполнено(Объект.ПоДокументу) Тогда
			
			Объект.ПоДокументу = ПредставлениеДокумента;
			
		КонецЕсли;			   
		
		// запоминается новое текущее значение документа расчетов
		Сделка = Объект.Сделка;
		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		ТекОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Иначе
		ТекОрганизация = Объект.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекОрганизация) И НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		#Если Клиент тогда
			Предупреждение("В обработке ""Установка прав и настроек"" для организации """ + ТекОрганизация + """
				|отключена возможность ведения складского учета документами УАТ!");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
		Объект,
		,
		Параметры.ЗначениеКопирования,
		Параметры.Основание,
		,
		,
		,
		Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// Инициализация реквизитов формы.	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		 И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Объект.Контрагент.ДоговорПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Контрагент = Объект.Контрагент;
	Договор = Объект.ДоговорКонтрагента;
    Сделка = Объект.Сделка;
	
	Объект.ДатаДействия = ДатаДокумента + 10 * (24 * 60 * 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вывести информацию об удостоверении личности.
	Элементы.ИнфНадписьУдЛичностиФизЛица.Заголовок = уатОбщегоНазначенияТиповые.уатПолучитьПаспортныеДанныеСтрокой(Объект.Сотрудник.ФизЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры