Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
	
	
	// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
//Функция ПолучитьСписокПечатныхФорм() Экспорт
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("РеестрУслуг", "Реестр услуг"); 
    СтруктураМакетов.Вставить("Акт", "Акт");
	Если ЗначениеЗаполнено(Договор.КонтрагентПосредник) Тогда
		СтруктураМакетов.Вставить("РеестрУслугПосредник", "Реестр услуг "+Договор.КонтрагентПосредник+" -> "+Организация); 
	КонецЕсли;
	Возврат СтруктураМакетов ;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ДанныеШапка(СсылкаНаОбъект,ВерсияПосредник=Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CASE WHEN &ЕстьПосредник = TRUE and &ВерсияПосредник = Ложь THEN &Посредник
				   |         ELSE РеестрУслугУслуги.Организация.НаименованиеПолное END КАК Организация,
	               |	РеестрУслугУслуги.Номер,
	               |	РеестрУслугУслуги.Дата Дт,
	               |	
	               |	CASE WHEN &ЕстьПосредник = TRUE and &ВерсияПосредник = Истина THEN &Посредник
	               |	     ELSE РеестрУслугУслуги.Контрагент.НаименованиеПолное END КАК Заказчик,
	               |	
	               |	""Заказчик"" ИмяЗаказчик,
	               |	""Исполнитель"" ИмяИсполнитель,
	               |	ISNULL(ДокИсп.Сотрудник,Значение(Справочник.уатСотрудники.ПустаяСсылка)) КАК пГлОпер,
	               |	КонтактнаяИнформация.Представление КАК Телефон,
				   |    ДокТб.МаксДт мкДт,
				   |    ДокТб.МинДт мнДт,
				   |    ""Кол-во часов"" ЧасыШапка
	               |ИЗ
	               |	Документ.РеестрУслугСубподряд КАК РеестрУслугУслуги
				   
				   |      LEFT OUTER JOIN (SELECT Ссылка, MAX(ПутевойЛист.ДатаВыезда) МаксДт,MIN(ПутевойЛист.ДатаВыезда) МинДт
				   |						 FROM Документ.РеестрУслугСубподряд.Услуги ДокТб 
				   |                        WHERE ДокТб.Ссылка = &СС
				   |					 GROUP BY Ссылка) ДокТб ON Истина
				   
				   |     LEFT OUTER JOIN Документ.РеестрУслугСубподряд.ПодписиИсполнитель ДокИсп  ON ДокИсп.Ссылка = РеестрУслугУслуги.Ссылка и ДокИсп.НомерСтроки = 1
				   
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ПО ДокИсп.Сотрудник.ФизЛицо = КонтактнаяИнформация.Объект
	               |			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСлужебный))
	               |			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
				   |
	               |ГДЕ
	               |	РеестрУслугУслуги.Ссылка = &СС";
				   Запрос.УстановитьПараметр("сс",СсылкаНаОбъект);
				   Запрос.УстановитьПараметр("ЕстьПосредник",ЗначениеЗаполнено(Договор.КонтрагентПосредник));
				   Запрос.УстановитьПараметр("ВерсияПосредник",ВерсияПосредник);
				   Запрос.УстановитьПараметр("Посредник",Договор.КонтрагентПосредник.НаименованиеПолное);
				   
				   
				   ТБл = Запрос.Выполнить().Выгрузить();
				   Стк = Новый Структура;
				   Стк.Вставить("ЗаказчикНашаОрганизация",Истина);
				   Стк.Вставить("ЗкзТхт","");
				   
				   
				   
				   Если Тбл.Количество()>0 Тогда
					   Для каждого Кол из ТБл.Колонки Цикл
						   Стк.Вставить(Кол.имя,тбл[0][Кол.Имя]);   
					   КонецЦикла;
					   
					   С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(Организация,Стк.пГлОпер.ФизЛицо,Дата);
					   Стк.Вставить("испТхт", ""+СокрЛП(С.Должность)+Символы.ПС+СокрЛП(Организация.НаименованиеПолное));
					   Стк.Вставить("испРуководитель", с.Представление);
					   Стк.Вставить("Дов",  СокрЛП(Стк.пГлОпер.Доверенность));
					   
					   Если ПодписиЗаказчик.Количество()<>0 Тогда
						   Стк.Вставить("ЗкзТхт",ПодписиЗаказчик[0].Должность+Символы.ПС+СокрЛП(Стк.Заказчик));
						   Стк.Вставить("ЗкзРуководитель",ПодписиЗаказчик[0].ФИО);
					   КонецЕСЛИ;
					   
					   Если ЗначениеЗаполнено(Договор.КонтрагентПосредник) ТОгда
						   Если ВерсияПосредник Тогда
							   Если ПодписиПосредник.Количество()<>0 Тогда
								   Стк.Вставить("ЗкзТхт",ПодписиПосредник[0].Должность+Символы.ПС+СокрЛП(Стк.Заказчик));
								   Стк.Вставить("ЗкзРуководитель",ПодписиПосредник[0].ФИО);
							   ИНаче
								   Стк.Вставить("ЗкзТхт",СокрЛП(Стк.Заказчик));
								   Стк.Вставить("ЗкзРуководитель"," ______________________");
							   КонецЕСЛИ;
							   
						   ИНАче
							   Стк.Вставить("ЗаказчикНашаОрганизация",Ложь);
							   Если ПодписиПосредник.Количество()<>0 Тогда
								   Стк.Вставить("испТхт",ПодписиПосредник[0].Должность+Символы.ПС+СокрЛП(Стк.Организация));
								   Стк.Вставить("испРуководитель",ПодписиПосредник[0].ФИО);
							   ИНаче
								   Стк.Вставить("испТхт",СокрЛП(Стк.Организация));
								   Стк.Вставить("испРуководитель"," ______________________");
							   КонецЕСЛИ;
						   КонецЕСли;
						   
						   
					   КонецЕсли;
					   
					   
					   Стк.Вставить("Дата",     Формат(Тбл[0].Дт,"ДФ=dd.MM.yyyy"));
					   Стк.Вставить("Месяц",    Формат(Тбл[0].Дт,"ДФ='MMMM yyyy ""г.""'"));
					   Стк.Вставить("МаксДата", Формат(Тбл[0].мкДт,"ДФ=dd.MM.yyyy"));
					   Стк.Вставить("МинДата",  Формат(Тбл[0].мнДт,"ДФ=dd.MM.yyyy"));
					   
					   
				   КонецеСЛИ;
				   
				   
				   
				   Возврат Стк;
	
КонецФункции


Функция Данные(СсылкаНаОбъект,сооКолонок,СтрСвр,ВерсияПосредник=Ложь)
	
	сооКолонок.Колонки.Добавить("Ключ");
	сооКолонок.Колонки.Добавить("Значение");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	
					|ВЫБРАТЬ
					|	ТЧУслуги.ПутевойЛист.Водитель1 КАК ПутевойЛистВодитель1,
					|	МАКСИМУМ(уатДокументыВодителей.ДатаВыдачи) КАК ДатаВыдачи
					|ПОМЕСТИТЬ ВрТЗДата
					|ИЗ
					|	Документ.РеестрУслугСубподряд.Услуги КАК ТЧУслуги
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
					|		ПО ТЧУслуги.ПутевойЛист.Водитель1 = уатДокументыВодителей.Сотрудник
					|ГДЕ
					|	ТЧУслуги.Ссылка = &Сс
	                |	И (уатДокументыВодителей.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДДД.УдостоверениеВодителя))
				    |   И НЕ уатДокументыВодителей.Архив
					|СГРУППИРОВАТЬ ПО
					|	ТЧУслуги.ПутевойЛист.Водитель1
					|;

					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВрТЗ.ПутевойЛистВодитель1 КАК Водитель1,
					|	МАКСИМУМ(уатДокументыВодителей.Номер)
					|ПОМЕСТИТЬ ВрТЗВУ
					|ИЗ
					|	ВрТЗДата КАК ВрТЗ
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
					|			ПО ВрТЗ.ДатаВыдачи = уатДокументыВодителей.ДатаВыдачи
					|			 И ВрТЗ.ПутевойЛистВодитель1 = уатДокументыВодителей.Сотрудник
					|СГРУППИРОВАТЬ ПО
					|	ВрТЗ.ПутевойЛистВодитель1
					|;
	
	
	
	               |ВЫБРАТЬ *, &сс как ССылка INTO врТбл FROM &ТБЛ Т;
	               |
	               |
	               |ВЫБРАТЬ
	               |	РеестрУслугУслуги.Ссылка.Организация.НаименованиеПолное КАК Организация,
	               |	РеестрУслугУслуги.Ссылка.Номер,
	               |	РеестрУслугУслуги.Ссылка,
	               |	РеестрУслугУслуги.Ссылка.Дата,
	               |	РеестрУслугУслуги.Ссылка.Контрагент.НаименованиеПолное КАК Заказчик,
				   //|	РеестрУслугУслуги.Ссылка.Договор КАК Договор,
				   //|	ISNULL(тбЗаявки.НомерЗаявки,"""") КАК НомерЗаявки,
	               |	РеестрУслугУслуги.ПутевойЛист КАК ПЛ,
	               |	РеестрУслугУслуги.ПутевойЛист.Номер КАК НомерПЛ,
	               |	РеестрУслугУслуги.ПутевойЛист.НомерПачки КАК НомерПачки,
	               |	РеестрУслугУслуги.ПутевойЛист.ДатаВыезда КАК ДатаВыезда,
				   |	РеестрУслугУслуги.ПутевойЛист.Водитель1 КАК Водитель1,
	               |	НачалоПериода(РеестрУслугУслуги.ПутевойЛист.ДатаВыезда,День) КАК дтВзд,
	               |	CASE WHEN КонецПериода(РеестрУслугУслуги.ПутевойЛист.ДатаВыезда,Месяц) < РеестрУслугУслуги.ПутевойЛист.ДатаВозвращения
				   |         THEN КонецПериода(РеестрУслугУслуги.ПутевойЛист.ДатаВыезда,Месяц) ELSE РеестрУслугУслуги.ПутевойЛист.ДатаВозвращения END КАК ДатаВозвращения,
	               |	РеестрУслугУслуги.ЦехКонтрагента.КодПоиска КАК ЦехКонтрагентаКод,
	               |	РеестрУслугУслуги.ЦехКонтрагента КАК ЦехКонтрагента,
	               |	РеестрУслугУслуги.ЦехКонтрагента.Код КАК грпЦехКонтрагента,
	               |	CASE WHEN ЦехКонтрагента.Родитель = Значение(Справочник.ЦехаКонтрагента.ПустаяССЫлка) или ЦехКонтрагента.Родитель.НеВыводитьВГруппировкахНаПечать=Истина THEN ЦехКонтрагента     ELSE ЦехКонтрагента.Родитель      END КАК    ЦехПапка,
	               |	CASE WHEN ЦехКонтрагента.Родитель = Значение(Справочник.ЦехаКонтрагента.ПустаяССЫлка) или ЦехКонтрагента.Родитель.НеВыводитьВГруппировкахНаПечать=Истина THEN ЦехКонтрагента.Код ELSE ЦехКонтрагента.Родитель.Код  END КАК грпЦехПапка,
	               |	CASE WHEN ПодСтрока(ISNULL(Рег.ИмяТС,"" ""),1,1)<>"" ""   THEN Рег.ИмяТС
	               |	     WHEN ПодСтрока(ISNULL(РегТип.ИмяТС,"" ""),1,1)<>"" "" THEN РегТип.ИмяТС 
			       |         ELSE РеестрУслугУслуги.ТС END КАК ТС,
	               |	РеестрУслугУслуги.ТС КАК грпТС,
	               |	РеестрУслугУслуги.ТипТС.ВидТС КАК ВидТС,
	               |	РеестрУслугУслуги.ТипТС КАК ТипТС,
	               |	РеестрУслугУслуги.ТипТС КАК грпТипТС,
	               |	РеестрУслугУслуги.ТипТС.ПроизводственыйКод КАК ТипТСПрзКод,
	               |	РеестрУслугУслуги.ТС.ГаражныйНомер КАК ГарНомер,
	               |	РеестрУслугУслуги.ТС.ГосударственныйНомер КАК ГосНомер,
				   |    РеестрУслугУслуги.ТС.Модель.Грузоподъемность КАК ГрузоподъемностьТС,
				   //|    РеестрУслугУслуги.Прицеп.Модель.Грузоподъемность КАК Грузоподъемность,
				   |	РеестрУслугУслуги.ЦехКонтрагента.МВЗ КАК МВЗ,
				   |	РеестрУслугУслуги.ЦехКонтрагента.Месторождение КАК Месторождение,
				   |	РеестрУслугУслуги.ЦехКонтрагента.Месторождение.Код КАК грпМесторождение,
				   |	РеестрУслугУслуги.ЦехКонтрагента.ИмяНаПечать КАК ЦехКонтрагентаПН,
				   |	РеестрУслугУслуги.ЦехКонтрагента.Доп  КАК ЦехКонтрагентаДоп,
				   |	РеестрУслугУслуги.ЦехКонтрагента.Доп1 КАК ЦехКонтрагентаДоп1,
				   |	РеестрУслугУслуги.ТС.Модель КАК МодельТС,
				   |	РеестрУслугУслуги.ТС.Модель КАК ТСМодель,
				   |	РеестрУслугУслуги.ТС.Модель.Код КАК ТСМодельКод,
				   //|	РеестрУслугУслуги.КоличествоКмГруз КАК КоличествоКмГруз,
				   //|	РеестрУслугУслуги.КоличествоТонн КАК КоличествоТонн,
				   |     СуммаПосредника,
	               |	РеестрУслугУслуги.Количество + РеестрУслугУслуги.Количество1 + РеестрУслугУслуги.Количество2 + РеестрУслугУслуги.Количество3  КАК Часы,
	               |	 (Сумма  + СуммаКм + Сумма1 + РеестрУслугУслуги.Сумма2 + РеестрУслугУслуги.Сумма3)  КАК итСумма,
	               |	 (Сумма  + СуммаКм)   КАК итСуммаОсн,
	               |	 (Сумма  + СуммаКм + Сумма1 + РеестрУслугУслуги.Сумма2 + РеестрУслугУслуги.Сумма3 )  * 0.2 КАК СуммаНДС,
				   |	 (Сумма  + СуммаКм + Сумма1 + РеестрУслугУслуги.Сумма2 + РеестрУслугУслуги.Сумма3 )  * 1.2 КАК СуммаСНДС,
				   |	 (  Тариф+Тариф1 + РеестрУслугУслуги.Тариф2 + РеестрУслугУслуги.Тариф3)   КАК ТарифЧасы,
	               |	РеестрУслугУслуги.Пробег КАК Пробег,
				   |    1 КолПЛ,
	               |	ISNULL(ISNULL(РегТип.Зн, Рег.Зн) ,"" "")  КАК ДопЗн,
	               |	ISNULL(ISNULL(РегТип.Зн1,Рег.Зн1),"" "") КАК ДопЗн1,
	               |	ISNULL(ISNULL(РегТип.Зн1,Рег.Зн2),"" "") КАК ДопЗн2,
				   |    РегПодр.Подразделение.Код Подразделение,
				   |    РеестрУслугУслуги.ПутевойЛист.НомерПачки Пачка,
				                                                         
	               |	РеестрУслугУслуги.Количество  КАК Количество,
	               |	CASE WHEN СуммаКм=0     THEN 0 ELSE РеестрУслугУслуги.КоличествоКм END КАК КоличествоКм,
				   |	РеестрУслугУслуги.Количество1 КАК ДокКоличество1,
	               |	РеестрУслугУслуги.Количество2 КАК ДокКоличество2,
	               |	РеестрУслугУслуги.Количество3 КАК ДокКоличество3,
				   
	               |	РеестрУслугУслуги.Сумма     КАК Сумма,
				   |	РеестрУслугУслуги.СуммаКм   КАК СуммаКм,
	               |	РеестрУслугУслуги.Сумма1    КАК ДокСумма1,
	               |	РеестрУслугУслуги.Сумма2  	КАК ДокСумма2,
	               |	РеестрУслугУслуги.Сумма3  	КАК ДокСумма3,
				   
	               |	РеестрУслугУслуги.Номенклатура  КАК Номенклатура,
	               |	РеестрУслугУслуги.Номенклатура1 КАК Номенклатура1,
	               |	РеестрУслугУслуги.Номенклатура2 КАК Номенклатура2,
	               |	РеестрУслугУслуги.Номенклатура3 КАК Номенклатура3,
				   
	               |	РеестрУслугУслуги.Номенклатура1.КОд КАК Код1,
	               |	РеестрУслугУслуги.Номенклатура2.КОд КАК Код2,
	               |	РеестрУслугУслуги.Номенклатура3.КОд КАК Код3,
				   
				   //+Lexx от 26.03.2018
	               |	РеестрУслугУслуги.ПутевойЛист.Водитель1 Как Водитель,
				   |	ISNULL(ДокументыВодителей.Номер,"""") Как НомерВУ,
				   //+Lexx от 26.03.2018
				   
				   |	Тариф     КАК Тариф,
				   |	ТарифКм   КАК ТарифКм,
				   |	Тариф1    КАК ДокТариф1,
	               |	РеестрУслугУслуги.Тариф2    КАК ДокТариф2,
	               |	РеестрУслугУслуги.Тариф3    КАК ДокТариф3,
	               |	РеестрУслугУслуги.Тариф     КАК ДокТариф,
	               |	РеестрУслугУслуги.Тарифкм   КАК ДокТарифКм,
				   |    0 КолСмен
				   |
				   |ИЗ
				   |	врТбл КАК РеестрУслугУслуги
				   //|	Документ.РеестрУслуг.Услуги КАК РеестрУслугУслуги
				   |    LEFT OUTER JOIN РегистрСведений.ДопАналитикаПоТСдляКонтрагента как Рег    ON Рег.Модель    = РеестрУслугУслуги.ТС       и Рег.Контрагент    = РеестрУслугУслуги.Ссылка.Контрагент
				   |    LEFT OUTER JOIN РегистрСведений.ДопАналитикаПоТСдляКонтрагента как РегТип ON РегТип.Модель = РеестрУслугУслуги.ТипТС    и РегТип.Контрагент = РеестрУслугУслуги.Ссылка.Контрагент
				   |    LEFT OUTER JOIN РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт, ТС в (SELECT DISTINCT Д.ТС FROM врТбл Д  )) РегПодр ON  РегПодр.ТС = РеестрУслугУслуги.ТС
				   
				   //+Lexx от 26.03.2018
				   |	ЛЕВОЕ СОЕДИНЕНИЕ ВрТЗВУ КАК ДокументыВодителей
	               |		ПО РеестрУслугУслуги.ПутевойЛист.Водитель1 = ДокументыВодителей.Водитель1
				   |
				   
				   //|ГДЕ
				   //|	РеестрУслугУслуги.Ссылка = &СС
	               |
				   |";
				   Запрос.УстановитьПараметр("сс",СсылкаНаОбъект);
				   Запрос.УстановитьПараметр("КА",Контрагент);
				   Если ВерсияПосредник Тогда
					   Запрос.УстановитьПараметр("ТБл",РассчитатьТаблицуПосредника());
				   ИНаче
					   Запрос.УстановитьПараметр("ТБл",Услуги.Выгрузить());
				   КонецЕСЛИ;
				   Запрос.УстановитьПараметр("Дт",СсылкаНаОбъект.Дата);
				   Запрос.УстановитьПараметр("Номенклатура1",Справочники.Номенклатура.ПустаяСсылка());
				   Запрос.УстановитьПараметр("Номенклатура2",Справочники.Номенклатура.ПустаяСсылка());
				   Запрос.УстановитьПараметр("Номенклатура3",Справочники.Номенклатура.ПустаяСсылка());
				   Запрос.УстановитьПараметр("Номенклатура1КОд","001");
				   Запрос.УстановитьПараметр("Номенклатура2КОд","002");
				   Запрос.УстановитьПараметр("Номенклатура3КОд","003");
				   
				   Тбл =  Запрос.Выполнить().Выгрузить(); 
				   
				   
				   СТрСвр = "Пробег,Часы,итСумма,итСуммаОсн,СуммаНДС,СуммаСНДС,Количество,КоличествоКм,Сумма,СуммаКм,КолПЛ,СуммаПосредника";
				   Если Тбл.Итог("Сумма")<>0 Тогда
					   НовСтр = сооКолонок.Добавить();
					   НовСтр.Ключ = Справочники.Номенклатура.Автоуслуги;
					   НовСтр.Значение = "";
				   КонецЕСЛИ;
				   
				   Если Тбл.Итог("СуммаКм")<>0 Тогда
					   НовСтр = сооКолонок.Добавить();
					   НовСтр.Ключ = Справочники.Номенклатура.Пробег;
					   НовСтр.Значение = "Км";
				   КонецЕСЛИ;
				   
				   
				   Для каждого стр из Тбл Цикл
					   
					   Стр.КолСмен = МАКС(1,ОКР(стр.Часы/11,0));
					   
					   Для а=1 по 3 Цикл
						   Если Стр["ДокСумма"+а]=0 ТОгда ПродолжитЬ; КонецЕСЛИ;
						   
						   Если сооКолонок.Найти(Стр["Номенклатура"+а],"Ключ")=Неопределено Тогда
							   НовСтр = сооКолонок.Добавить();
							   НовСтр.Ключ = Стр["Номенклатура"+а];
							   НовСтр.Значение = СокрлП(Стр["Код"+а]);
							   Тбл.Колонки.Добавить("Количество"+СокрлП(Стр["Код"+а]),Новый ОписаниеТипов("Число"));
							   Тбл.Колонки.Добавить("Тариф"+СокрлП(Стр["Код"+а]),Новый ОписаниеТипов("Число"));
							   Тбл.Колонки.Добавить("Сумма"+СокрлП(Стр["Код"+а]),Новый ОписаниеТипов("Число"));
						   КонецЕСЛИ;
						   
						   Стр["Количество"+СокрлП(Стр["Код"+а])] 	= Стр["ДокКоличество"+а];
						   Стр["Тариф"+СокрлП(Стр["Код"+а])] 		= Стр["ДокТариф"+а];
						   Стр["Сумма"+СокрлП(Стр["Код"+а])] 		= Стр["ДокСумма"+а];
						   СтрСвр = СтрСвр+",Количество"+СокрлП(Стр["Код"+а])+",Сумма"+СокрлП(Стр["Код"+а]);
					   КонецЦикла;
						   
				   КонецЦикла;
				   
				   
				   сооКолонок.Сортировать("Значение");
				   
		Возврат Тбл;		   
				   
КонецФункции

Процедура ВывестиТекОбл(Таб,ТекОбласть,НадоОчистить=Истина)
	Попытка
		Если Таб.ПроверитьВывод(ТекОБласть)=Ложь Тогда
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
		КонецеСЛИ;
	Исключение 
		ХранилищеСистемныхНастроек.удалить(Таб.ИмяПараметровПечати,,ИмяПользователя());
	КонецПопытки;
	Таб.Вывести(ТекОбласть);
	
	Если НадоОчистить Тогда
		ТекОбласть.Очистить();
	КонецЕСЛИ;
	
КонецПроцедуры

Функция ПЕчатьИзВнешнегоОтчета(ХранилищеОБ)  Экспорт
	
	//Результат = Ложь;
	//
	//ДвоичныеДанные = ХранилищеОб.Получить();
	//Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
	//	
	//	ИмяФайла = ПолучитьИмяВременногоФайла();
	//	ДвоичныеДанные.Записать(ИмяФайла);
	//	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
	//	УдалитьФайлы(ИмяФайла);
	//	
	//	ВнешняяОбработка.ССылкаНаОбъект = ссылка;
	//	ВнешняяОбработка.ПЕчать();
	//	
	//	Результат = Истина;
	//	
	//КонецеСЛИ;
	//
	//Возврат Результат;
	
КонецФункции

Функция КомпоновкаМакетов(сооКолонок,ТекДог)
	
	Макет = ПолучитьМакет("Основной");
	Таб  = ПолучитьМакет("Основной");
	Таб.УдалитьОбласть(Таб.Область(,1,,Таб.ШиринаТаблицы),ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Таб.ВставитьОбласть(Макет.Область("й1"),Таб.Область(,1,,Макет.ПолучитьОбласть("й1").ШиринаТаблицы),,Ложь);
	
	ТекДог = Новый Структура();
	ТекДОг.Вставить("ВывНомерЗаявки",ЛОжь);
	ТекДОг.Вставить("ВывЛот",ЛОжь);
	ТекДОг.Вставить("ВывПодр",ЛОжь);
	ТекДОг.Вставить("ВывПачка",ЛОжь);
	ТекДОг.Вставить("ВывВид",ЛОжь);
	ТекДОг.Вставить("ВывТип",ЛОжь);
	ТекДОг.Вставить("ВывПроизвКод",ЛОжь);
	ТекДОг.Вставить("ВывГрп",ЛОжь);
	ТекДОг.Вставить("ВывГрпПрц",ЛОжь);
	ТекДОг.Вставить("ВывТонны",ЛОжь);
	ТекДОг.Вставить("ВывНоменклатура",ЛОжь);
	ТекДОг.Вставить("ВЫвЧас",Истина);
	ТекДОг.Вставить("ВЫвЦО",ЛОжь);
	ТекДОг.Вставить("ВЫвПробег",Истина);
	
	
	Если ТекДог.ВывНомерЗаявки ТОгда
		Таб.ВставитьОбласть(Макет.Область("йНомерЗаявки"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йНомерЗаявки").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывЛот ТОгда
		Таб.ВставитьОбласть(Макет.Область("йЛот"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йЛот").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывПодр ТОгда
		Таб.ВставитьОбласть(Макет.Область("йПодр"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йПодр").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывПачка ТОгда
		Таб.ВставитьОбласть(Макет.Область("йПачка"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йПачка").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывВид ТОгда
		Таб.ВставитьОбласть(Макет.Область("Вид"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("Вид").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывТип ТОгда
		Таб.ВставитьОбласть(Макет.Область("йТип"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йТип").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывПроизвКод ТОгда
		Таб.ВставитьОбласть(Макет.Область("ПроизвКод"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("ПроизвКод").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывГрп ТОгда
		Таб.ВставитьОбласть(Макет.Область("Грп"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("Грп").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывГрпПрц ТОгда
		Таб.ВставитьОбласть(Макет.Область("ГрпПрц"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("ГрпПрц").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывТонны ТОгда
		Таб.ВставитьОбласть(Макет.Область("ВывТонны"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("ВывТонны").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВывНоменклатура ТОгда
		Таб.ВставитьОбласть(Макет.Область("ДопУслуга"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("ДопУслуга").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВЫвПробег ТОгда
		Таб.ВставитьОбласть(Макет.Область("йПробег"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йПробег").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если ТекДог.ВЫвЧас или сооКолонок.Количество()=1 ТОгда
		Таб.ВставитьОбласть(Макет.Область("йЧасы"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йЧасы").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Если сооКолонок.Количество()=1 ТОгда
		Таб.ВставитьОбласть(Макет.Область("йТариф"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("йТариф").ШиринаТаблицы),,Ложь);
	Иначе
		Для каждого Эл из сооКолонок Цикл
			
			ТабУсл = Макет.ПолучитьОбласть("облУслуга");
			Для аСтр=1 по ТабУсл.ВысотаТаблицы Цикл
				Для аКол=1 по ТабУсл.ШиринаТаблицы Цикл
					пПар = ТабУсл.Область(аСтр,аКол,аСтр,аКол).Параметр;
					Если Найти(",количество,тариф,сумма,",","+НреГ(пПар)+",")<>0 Тогда
						ТабУсл.Область(аСтр,аКол,аСтр,аКол).Параметр = пПар+Эл.Значение;
					ИНачеЕсли Нрег(ТабУсл.Область(аСтр,аКол,аСтр,аКол).Текст) = "усл.имя" ТОгда
						ТабУсл.Область(аСтр,аКол,аСтр,аКол).Текст = СокрЛП(Эл.Ключ);
					ИНачеЕсли Нрег(ТабУсл.Область(аСтр,аКол,аСтр,аКол).Текст) = "едусл" ТОгда
						ТабУсл.Область(аСтр,аКол,аСтр,аКол).Текст = СокрЛП(Эл.Ключ.БазоваяЕдиницаИзмерения.НаименованиеПолное);
					КонецЕСЛИ;
				КонецЦикла;
			КонецЦикла;
			
			Таб.ВставитьОбласть(ТабУсл.Область(,1,,ТабУсл.ШиринаТаблицы),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+ТабУсл.ШиринаТаблицы),,Ложь);
			
		КонецЦикла;
	КонецЕСЛИ;
	
	Таб.ВставитьОбласть(Макет.Область("й2"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("й2").ШиринаТаблицы),,Ложь);
	Если ТекДог.ВЫвЦО ТОгда
		Таб.ВставитьОбласть(Макет.Область("МВЗ"),Таб.Область(,Таб.ШиринаТаблицы+1,,Таб.ШиринаТаблицы+Макет.ПолучитьОбласть("МВЗ").ШиринаТаблицы),,Ложь);
	КонецЕСЛИ;
	
	Таб.Область(8,Таб.ШиринаТаблицы,Таб.ВысотаТаблицы,Таб.ШиринаТаблицы).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
	
	Таб.УдалитьОбласть(Таб.Область("Подвал"),ТипСмещенияТабличногоДокумента.ПоВертикали);
	Таб.УдалитьОбласть(Таб.Область("Отв0"),ТипСмещенияТабличногоДокумента.ПоВертикали);
	Таб.ВставитьОбласть(Макет.Область("Подвал"),Таб.Область(Таб.ВысотаТаблицы+1,,Таб.ВысотаТаблицы+Макет.ПолучитьОбласть("Подвал").ВысотаТаблицы),,Ложь);
	Таб.ВставитьОбласть(Макет.Область("Отв0"),Таб.Область(Таб.ВысотаТаблицы+1,,Таб.ВысотаТаблицы+Макет.ПолучитьОбласть("Отв0").ВысотаТаблицы),,Ложь);
	
	//Таб.Показать();
	
	
	
	
	
	Возврат Таб;
	
КонецФункции

Функция ПечатьРеестр(ВерсияПосредник=Ложь) Экспорт
	
	//Если ЗначениеЗаполнено(ССылка)=Ложь ТОгда
	//	
	//ИначеЕсли Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПЕчатьИзВнешнегоОтчета(Ссылка.Договор.ХранилищеОб) Тогда Возврат; КонецеСЛИ;
	СсылкаНаОбъект = ссылка;
	
	сооКолонок = Новый ТаблицаЗначений;
	СтрСвр="";
	Тбл = Данные(СсылкаНаОбъект,сооКолонок,СтрСвр,ВерсияПосредник);
	Если Тбл.Количество()=0 Тогда
		ПРедупреждение("Нет данных для вывода на печать!");
		Возврат Неопределено;
	КонецЕСЛИ;
	
	СтрШапка =  ДанныеШапка(Ссылка,ВерсияПосредник);
	СтрШапка.Вставить("СуммаПрописью", ЧислоПрописью(Тбл.Итог("итСумма"),,Константы.ВалютаРегламентированногоУчета.Получить().ПараметрыПрописиНаРусском));
	
	
	ГрпПап = ЛОжь;//СсылкаНаОбъект.Договор.ГрпПап;
	ГрпЦех = ЛОжь;//СсылкаНаОбъект.Договор.ГрпЦех;
	ГрпМод = ЛОжь;//СсылкаНаОбъект.Договор.ГрпМод;
	ГрпТС  = Истина;//СсылкаНаОбъект.Договор.ГрпТС;
	ГрпТип = ЛОжь;//СсылкаНаОбъект.Договор.ГрпТип;
	ГрпМст = ЛОжь;//СсылкаНаОбъект.Договор.ГрпМст;
    ВыводитьПрочеркВПустыхЯчейках = ЛОжь;//СсылкаНаОбъект.Договор.ВыводитьПрочеркВПустыхЯчейках;	
	
	хрМакет = ЛОжь;//СсылкаНаОбъект.Договор.Хранилище.Получить();
	тпМакет = ЛОжь;//СсылкаНаОбъект.ТИпТС.Хранилище.Получить();
	
	Таб = Новый ТабличныйДокумент;
		Макет = КомпоновкаМакетов(сооКолонок,Неопределено);
	
	//Заполним подвал
	Подвал = Макет.ПолучитьОбласть("Подвал");
	Подвал.Параметры.Заполнить(СтрШапка);
	Если СокрлП(СтрШапка.ЗкзТхт)="" ТОгда
		Попытка
		Подвал.Область("ПодчеркЗаказчик").Очистить(Истина,Истина,Истина);
		Исключение КонецПопытки;
	КонецеСЛИ;    
	
		ДокТблИсполнитель = ПодписиИсполнитель;
		ДокТблЗаказчик = ПодписиЗаказчик;
		
		Если СтрШапка.ЗаказчикНашаОрганизация = Истина Тогда
			ДЛя а=1 по Макс(ДокТблЗаказчик.Количество()-1,ДокТблИсполнитель.Количество()-1) Цикл
				
				ОблОтвет = Макет.ПолучитьОбласть("Отв0");
				Если ДокТблИсполнитель.Количество()>а ТОгда
						ОблОтвет.Параметры.Представитель = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ДокТблИсполнитель[а].Сотрудник.ФизЛицо);
				ИНаче
					облОтвет.Область(1,1,2,7).Очистить(Истина,Истина,Истина);
				КонецесЛИ;
				
				//Если ДокТблЗаказчик.Количество()>а ТОгда
				//	облОтвет.Параметры.Заполнить(ДокТблЗаказчик[а]);
				//ИНаче
					облОтвет.Область(1,8,2,13).Очистить(Истина,Истина,Истина);
				//КонецесЛИ;
				Подвал.Вывести(ОблОтвет);
				
			КонецЦиклА;
		КонецесЛИ;
	
	
	
	
	Шапка  = Макет.ПолучитьОбласть("Шапка");
	Строка = Макет.ПолучитьОбласть("Строка");
	Итог   = Макет.ПолучитьОбласть("Итог");
	
	тбТС = Тбл.Скопировать();
	
				 
	Если ГрпМст ТОгда 
		стрМст  = Макет.ПолучитьОбласть("Мст");
		ИтогМст = Макет.ПолучитьОбласть("итогМст");
	Иначе
		Тбл.ЗаполнитьЗначения(Неопределено,"грпМесторождение");
		тбТС.ЗаполнитьЗначения(Неопределено,"грпМесторождение,Месторождение");
	КонецеСЛИ;
	
	Если ГрпПап ТОгда 
		стрПап  = Макет.ПолучитьОбласть("ЦОпапка"); 
		ИтогПап = Макет.ПолучитьОбласть("итогЦОпапка"); 
	Иначе
		Тбл.ЗаполнитьЗначения(Неопределено,"грпЦехПапка");
		тбТС.ЗаполнитьЗначения(Неопределено,"грпЦехПапка,ЦехПапка")
	КонецеСЛИ;
	
	Если ГрпЦех ТОгда 
		стрЦО  = Макет.ПолучитьОбласть("ЦО"); 
		ИтогЦО = Макет.ПолучитьОбласть("итогЦО"); 
	Иначе
		Тбл.ЗаполнитьЗначения(Неопределено,"грпЦехКонтрагента");
		тбТС.ЗаполнитьЗначения(Неопределено,"грпЦехКонтрагента,ЦехКонтрагента,ЦехКонтрагентаКод")
	КонецеСЛИ;
				 
	Если ГрпТип ТОгда 
		стрТип  = Макет.ПолучитьОбласть("Тип");
		ИтогТип = Макет.ПолучитьОбласть("итогТип");
	Иначе
		Тбл.ЗаполнитьЗначения(Неопределено,"грпТипТС");
		тбТС.ЗаполнитьЗначения(Неопределено,"грпТипТС,ТипТС");
	КонецеСЛИ;
	
	Если ГрпМод ТОгда 
		ИтогМод= Макет.ПолучитьОбласть("итогМод"); 
	Иначе
		Тбл.ЗаполнитьЗначения(Неопределено,"ТСМодель");
		тбТС.ЗаполнитьЗначения(Неопределено,"ТСМодель");
	КонецеСЛИ;
				 
	Если ГрпТС ТОгда 
		стрТС  = Макет.ПолучитьОбласть("ТС");
		ИтогТС = Макет.ПолучитьОбласть("итогТС");
	Иначе
		Тбл.ЗаполнитьЗначения(Неопределено,"грпТС");
		тбТС.ЗаполнитьЗначения(Неопределено,"грпТС,ГосНомер,ГарНомер,ТС");
	КонецеСЛИ;
	
	//Если  СсылкаНаОбъект.Договор.ВывПачка=Ложь ТОгда
		Тбл.ЗаполнитьЗначения(Неопределено,"НомерПачки");
		тбТС.ЗаполнитьЗначения(Неопределено,"НомерПачки");
	//КонецЕСЛИ;
	
	Тбл.Сортировать("грпМесторождение,грпЦехПапка,грпЦехКонтрагента,грпЦехКонтрагента,грпТипТС,НомерПачки,дтВзд,НомерПЛ,ТСМодель,грпТС,ТС");
	тбТС.Сортировать("Месторождение,грпМесторождение,ЦехПапка,грпЦехПапка,грпЦехКонтрагента,грпЦехКонтрагента,грпТипТС,ТСМодель,грпТС,ТС");

	
	Шапка.Параметры.Заполнить(СтрШапка);
	Таб.Вывести(Шапка);
	Таб.ПовторятьПриПечатиСтроки = таб.Область(8,,9,);
	итКолПЛ=0;
	
	
	Таб.ИмяПараметровПечати = "ДекРеестрПеч_СубОсн";
	
	ТекОбласть = Новый ТабличныйДокумент;
	
	тбТС.Свернуть("Месторождение,грпМесторождение,ЦехПапка,грпЦехПапка,ЦехКонтрагента,грпЦехКонтрагента,ЦехКонтрагентаКод,грпТипТС,ТипТС,ТСМодель,грпТС,ТС,ГарНомер,ГосНомер",СтрСвр);
	тбМод = тбТС.Скопировать();
	тбМод.Свернуть("Месторождение,грпМесторождение,ЦехПапка,грпЦехПапка,ЦехКонтрагента,грпЦехКонтрагента,ЦехКонтрагентаКод,грпТипТС,ТипТС,ТСМодель",СтрСвр);
	тбТип = тбМод.Скопировать();
	тбТип.Свернуть("Месторождение,грпМесторождение,ЦехПапка,грпЦехПапка,ЦехКонтрагента,грпЦехКонтрагента,ЦехКонтрагентаКод,грпТипТС,ТипТС",СтрСвр);
	тбЦО = тбТип.Скопировать();
	тбЦО.Свернуть("Месторождение,грпМесторождение,ЦехПапка,грпЦехПапка,ЦехКонтрагента,грпЦехКонтрагента,ЦехКонтрагентаКод",СтрСвр);
	тбПап = тбЦО.Скопировать();
	тбПап.Свернуть("Месторождение,грпМесторождение,ЦехПапка,грпЦехПапка",СтрСвр);
	тбМст = тбЦО.Скопировать();
	тбМст.Свернуть("Месторождение,грпМесторождение",СтрСвр);
	
	
	Ном=0;
	Для каждого стМст из тбМст Цикл
		
		Если ГрпМст Тогда
			СтрМст.Параметры.Заполнить(стМст);
			ТекОбласть.Вывести(СтрМст);
		КонецЕСЛИ;
		
		масПап = тбПап.НайтиСтроки(Новый Структура("грпМесторождение",стМст.грпМесторождение));
		Для каждого стПап из МасПап Цикл 
			
			Если ГрпПап Тогда
				СтрПап.Параметры.Заполнить(стПап);
				ТекОбласть.Вывести(СтрПап);
			КонецЕСЛИ;
		
		масЦО = тбЦО.НайтиСтроки(Новый Структура("грпМесторождение,грпЦехПапка",стМст.грпМесторождение,стПап.грпЦехПапка));
		Для каждого стЦО из МасЦО Цикл 
			
			Если ГрпЦех Тогда
				СтрЦо.Параметры.Заполнить(стЦО);
				ТекОбласть.Вывести(СтрЦО);
			КонецЕСЛИ;
			
			масТип = тбТип.НайтиСтроки(Новый Структура("грпМесторождение,грпЦехПапка,грпЦехКонтрагента",стЦО.грпМесторождение,стПап.грпЦехПапка,стЦО.грпЦехКонтрагента));
			Для каждого стТип из МасТип Цикл 
				
				Если ГрпТип Тогда
					СтрТип.Параметры.Заполнить(стТип);
					ТекОбласть.Вывести(СтрТип);
				КонецЕСЛИ;
				
				
				масМод = тбМод.НайтиСтроки(Новый Структура("грпМесторождение,грпЦехПапка,грпЦехКонтрагента,грпТипТС",стЦО.грпМесторождение,стПап.грпЦехПапка,стЦО.грпЦехКонтрагента,стТип.грпТипТС));
				Для каждого стМод из МасМод Цикл 
					
					//Если ГрпМод Тогда
					//	СтрМод.Параметры.Заполнить(стМод);
					//	ТекОбласть.Вывести(СтрМод);
					//КонецЕСЛИ;
					
					масТС = тбТС.НайтиСтроки(Новый Структура("грпМесторождение,грпЦехПапка,грпЦехКонтрагента,грпТипТС,ТСМодель",стЦО.грпМесторождение,стПап.грпЦехПапка,стЦО.грпЦехКонтрагента,стТип.грпТипТС,стМод.ТСМодель));
					Для каждого стТС из МасТС Цикл 
						
						Если ГрпТС Тогда
							СтрТС.Параметры.Заполнить(стТС);
							ТекОбласть.Вывести(СтрТС);
						КонецЕСЛИ;
						
						мас = Тбл.НайтиСтроки(Новый Структура("грпМесторождение,грпЦехПапка,грпЦехКонтрагента,грпТипТС,ТСМодель,грпТС",стЦО.грпМесторождение,стПап.грпЦехПапка,стЦО.грпЦехКонтрагента,стТип.грпТипТС,стМод.ТСМодель,стТС.грпТС));
						Для каждого Стр из Мас Цикл 
							
							НОм=Ном+1;
							Индикатор1 = ном/Тбл.Количество()*100;
							Строка.Параметры.Заполнить(Стр);
							Если ВыводитьПрочеркВПустыхЯчейках ТОгда
								Для аПар=1 по Строка.Параметры.Количество() Цикл
									Если ЗначениеЗаполнено(Строка.Параметры.Получить(аПар-1))=ЛОжь ТОгда
										Строка.Параметры.Установить(аПар-1,"---");
									КонецЕсли;
								КонецЦикла;
							КонецЕСЛИ;
							
							Попытка
								Строка.Параметры.Ном = Ном;
							Исключение КонецПопытки;
							Попытка
								Строка.Параметры.НомТС = Мас.Найти(Стр)+1;
							Исключение КонецПопытки;
							
							Если Мас.Найти(Стр)=0 Тогда
								ТекОбласть.Вывести(Строка);
								ВывестиТекОбл(Таб,ТекОбласть);
							ИНачеЕсли Мас.Найти(Стр)=Мас.ВГраница() ТОгда
								ТекОбласть.Очистить();
								ТекОбласть.Вывести(Строка);
							ИНаче
								ВывестиТекОбл(Таб,Строка,Ложь);
							КонецЕСЛИ;	
							
						КонецЦикла;
						
						Если ГрпТС Тогда
							итогТС.Параметры.Заполнить(стТС);
							ТекОбласть.Вывести(итогТС);
							
							Если масТС.Найти(стТС)<>масТс.ВГраница() Тогда
								ВывестиТекОбл(Таб,ТекОбласть);
							КонецЕСЛИ;
							
						КонецЕСЛИ;
						
					КонецЦикла;
					
					Если ГрпМод Тогда
						итогМод.Параметры.Заполнить(стМод);
						ТекОбласть.Вывести(итогМод);
						
						Если МасМод.Найти(стМод) <> масМод.ВГраница() Тогда
							ВывестиТекОбл(Таб,ТекОбласть);	
						КонецЕСЛИ;
					КонецЕСЛИ;
				КонецЦикла;
				
				Если ГрпТип Тогда
					итогТип.Параметры.Заполнить(стТип);
					ТекОбласть.Вывести(итогТип);
					
					Если МасТип.Найти(стТип) <> масТип.ВГраница() Тогда
						ВывестиТекОбл(Таб,ТекОбласть);	
					КонецЕСЛИ;
				КонецЕСЛИ;
			КонецЦикла;
			
			Если ГрпЦех Тогда
				итогЦО.Параметры.Заполнить(стЦО);
				ТекОбласть.Вывести(итогЦО);
				
				Если МасЦО.Найти(стЦО) <> масЦО.ВГраница() Тогда
					ВывестиТекОбл(Таб,ТекОбласть);	
				КонецЕСЛИ;
			КонецЕСЛИ;
		КонецЦикла;
			
			Если ГрпПап Тогда
				итогПап.Параметры.Заполнить(стПап);
				ТекОбласть.Вывести(итогПап);
				
				Если МасПап.Найти(стПап) <> масПап.ВГраница() Тогда
					ВывестиТекОбл(Таб,ТекОбласть);	
				КонецЕСЛИ;
			КонецЕСЛИ;
		КонецЦикла;
		
		Если ГрпМст Тогда
			итогМст.Параметры.Заполнить(стМст);
			ТекОбласть.Вывести(итогМст);
			
			Если тбМст.индекс(стМст) <> тбМст.Количество()-1 Тогда
				ВывестиТекОбл(Таб,ТекОбласть);	
			КонецЕСЛИ;
		КонецЕСЛИ;
	КонецЦикла;
	
	
		
	
	тбМст.свернуть("",СтрСвр);
	Итог.Параметры.Заполнить(тбМст[0]);	
	ТекОбласть.Вывести(Итог);
	ТекОбласть.Вывести(Подвал);
	ВывестиТекОбл(Таб,ТекОбласть);
	
	
	
	Таб.ТолькоПросмотр = Истина;
	Таб.ОтображатьСетку = Ложь;
	Таб.ОтображатьЗаголовки = Ложь;
	
	Возврат Таб;
	Таб.Показать();
	
КонецФункции



// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	Иначе
		
		// Получить экземпляр документа на печать
		Если НазваниеМакета = "РеестрУслуг" тогда
			ТабДокумент = ПечатьРеестр();
		ИНачеЕсли НазваниеМакета = "РеестрУслугПосредник" тогда
			ТабДокумент = ПечатьРеестр(Истина);
		ИначеЕсли НазваниеМакета = "Акт" тогда
			ТабДокумент = ПечатьАкт();
		КонецЕсли;
		
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
		
	КонецЕсли;
КонецПроцедуры


Процедура ДвиженияРаботаТС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Значение(ВидДвиженияНакопления.Расход) ВидДвижения,
	               |	РеестрУслугУслуги.Ссылка.Дата Период,
	               |	РеестрУслугУслуги.Реестр Реестр,
	               |	РеестрУслугУслуги.Ссылка.Контрагент Контрагент,
	               |	РеестрУслугУслуги.ЦехКонтрагента,
	               |	РеестрУслугУслуги.ПутевойЛист,
	               |	1 Талон,
	               |	РеестрУслугУслуги.Сумма,
	               |	РеестрУслугУслуги.ТС,
	               |	РеестрУслугУслуги.Пробег,
	               |	РеестрУслугУслуги.ИдСтроки
	               |ИЗ
	               |	Документ.РеестрУслугСубподряд.Услуги КАК РеестрУслугУслуги
	               |ГДЕ
	               |	РеестрУслугУслуги.Ссылка = &Ссылка
				   | и РеестрУслугУслуги.Реестр <> Значение(Документ.РеестрУслуг.ПустаяСсылка)";
				   Запрос.УстановитьПараметр("Ссылка",ССылка);
				   Тбл =Запрос.Выполнить().Выгрузить();
				   
	   
		   Движения.РаботаТССубподряд.Записывать = Истина;
		   Движения.РаботаТССубподряд.Загрузить(Тбл);	
	
КонецПроцедуры


Процедура ДвиженияРеестрыУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Значение(ВидДвиженияНакопления.Приход) ВидДвижения,
	               |	CASE WHEN РеестрУслугУслуги.Реестр.договор IS NULL THEN РеестрУслугУслуги.Ссылка.Дата else РеестрУслугУслуги.Реестр.Дата end Период,
	               |	РеестрУслугУслуги.Реестр.договор договор,
	               |	РеестрУслугУслуги.Заказчик Контрагент,
	               |	РеестрУслугУслуги.ССЫлка.Контрагент Владелец,
	               |	РеестрУслугУслуги.ЦехКонтрагента,
	               |	РеестрУслугУслуги.ПутевойЛист,
	               |	РеестрУслугУслуги.Номенклатура,
	               |	РеестрУслугУслуги.Сумма+СУммаКм+СУмма1+СУмма2+Сумма3 СуммаСуб,
	               |	РеестрУслугУслуги.ТС,
	               |	РеестрУслугУслуги.ИдСтроки,
	               |	РеестрУслугУслуги.СуммаПосредника,
	               |	РеестрУслугУслуги.Ссылка.Договор ДоговорСуб,
				   |    CASE WHEN РеестрУслугУслуги.Реестр.договор IS NULL THEN РеестрУслугУслуги.Ссылка ELSE РеестрУслугУслуги.Реестр END Реестр
	               |ИЗ
	               |	Документ.РеестрУслугСубподряд.Услуги КАК РеестрУслугУслуги
	               |ГДЕ
	               |	РеестрУслугУслуги.Ссылка = &Ссылка
				   | ";
				   Запрос.УстановитьПараметр("Ссылка",ССылка);
				   Тбл =Запрос.Выполнить().Выгрузить();
				   
	   
		   Движения.РеестрыУслуг.Записывать = Истина;
		   Движения.РеестрыУслуг.Загрузить(Тбл);	
	
КонецПроцедуры

Функция ПолучитьТаблицуПосредника()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеестрыУслуг.*, 
	|	(РеестрыУслуг.Сумма+РеестрыУслуг.СуммаКм+РеестрыУслуг.Сумма1+РеестрыУслуг.Сумма2+РеестрыУслуг.Сумма3+РеестрыУслуг.СУмма4) КАК итСумма
	|ИЗ
	|	РегистрНакопления.РеестрыУслуг КАК РеестрыУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрУслугСубподряд.Услуги КАК РеестрУслугСубподрядУслуги
	|		ПО РеестрыУслуг.ПутевойЛист = РеестрУслугСубподрядУслуги.ПутевойЛист
	|			И РеестрыУслуг.идСтроки = РеестрУслугСубподрядУслуги.ИдСтроки
	|ГДЕ
	|	РеестрУслугСубподрядУслуги.Ссылка = &Ссылка
	|   и РеестрыУслуг.Сумма <> 0
	|	";
	Запрос.УстановитьПараметр("ссылка",ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

Функция ПолучитьКоэфПосредника()
	Возврат 0.98;
КонецФункции

Функция РассчитатьТаблицуПосредника()
	ТБл = Услуги.Выгрузить();
	тбПоср = ПолучитьТаблицуПосредника();
	Коэф = ПолучитьКоэфПосредника();
	
	Для каждого Стр из ТБл Цикл
		
		мас = тбПоср.НайтиСтроки(Новый Структура("ПутевойЛист,ИдСтроки",Стр.ПутевойЛист,Стр.ИдСтроки));
		Если мас.Количество()=0 Тогда
			Сообщить("Нет дохода по путевому листу "+Стр.ПутевойЛист+" ("+Стр.ИдСтроки+")");
			Стр.Сумма  = Стр.СуммаПосредника;
			Продолжить;
		КонецЕСЛИ;
		Эл = Мас[0];
		
		Стр.Тариф   = ОКР(Эл.Тариф   * Коэф,2,1);
		Стр.Сумма1  = ОКР(Эл.Сумма1  * Коэф,2,1);
		Стр.Сумма2  = ОКР(Эл.Сумма2  * Коэф,2,1);
		Стр.Сумма3  = ОКР(Эл.Сумма3  * Коэф,2,1);
		Стр.СуммаКм = ОКР(Эл.СуммаКм * Коэф,2,1);
		Стр.Тариф1  = ОКР(Эл.Тариф1  * Коэф,2,1);
		Стр.Тариф2  = ОКР(Эл.Тариф2  * Коэф,2,1);
		Стр.Тариф3  = ОКР(Эл.Тариф3  * Коэф,2,1);
		Стр.ТарифКм = ОКР(Эл.ТарифКм * Коэф,2,1);
		Стр.Сумма   = Стр.СуммаПосредника - Стр.Сумма1 - Стр.Сумма2 - Стр.Сумма3 - Стр.СуммаКм;
		
	КонецЦикла;
	
	 Возврат ТБл;
	
КонецФункции

Процедура РассчитатьСуммуПосредника()
	
	ТБл = ПолучитьТаблицуПосредника();
	Коэф = ПолучитьКоэфПосредника();
	Тбл.свернуть("ПутевойЛист,ИдСтроки","итСумма");
	
	Для каждого Стр из Услуги Цикл
		мас = Тбл.НайтиСтроки(Новый Структура("ПутевойЛист,ИдСтроки",Стр.ПутевойЛист,Стр.ИдСтроки));
		Если мас.Количество()=0 Тогда
			Сообщить("Нет дохода по путевому листу "+Стр.ПутевойЛист+" ("+Стр.ИдСтроки+")");
			Продолжить;
		КонецЕСЛИ;
		Стр.СуммаПосредника = ОКР(МАс[0].итСумма * Коэф,2,1);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если ЗначениеЗаполнено(Договор.КонтрагентПосредник) Тогда
		РассчитатьСуммуПосредника();
		Записать();
	ИНаче
		Для каждого Стр из Услуги Цикл
			Стр.СуммаПосредника = 0;
		КонецЦикла;
		Записать();
	КонецЕсли;
	
	ДвиженияРаботаТС();
	ДвиженияРеестрыУслуг();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	пСум = Услуги.Итог("Сумма")+Услуги.Итог("СуммаКм")+Услуги.Итог("Сумма1")+Услуги.Итог("Сумма2")+Услуги.Итог("Сумма3");
	СуммаДокумента = пСум;
	КоличествоСтрокУслуги = Услуги.Количество();
	//Если за указанный месяц есть проведенный документ "ЗакрытиеПериодаПоСубподряду"
	//редактирование этого документа ЗАПРЕЩЕНО
	Если глОбщий.ЗакрытПериодПоСубподряду(Дата) ТОгда
		Отказ = Истина;
		ВозвраТ;
	КонецЕСЛИ;
КонецПроцедуры


Функция ДанныеДляЗаполнения(Обновить=Ложь) Экспорт
	
	врТБл="";
	Запрос = глОбщий.ИерархияСправочника("ЦехаКонтрагента",врТБл);
	
	 ТекстЗапроса  = "";
	
	 Если 	Обновить ТОгда
		 
		 Если ЗначениеЗаполнено(ССылка)=Ложь ТОгда
			 
		 ИначеЕсли Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			 Возврат Неопределено;
		 КонецЕсли;
		 
		ТекстЗапроса = ТекстЗапроса +"
		|	
		| ВЫБРАТЬ
		|	ДокРее.ТС ТранспортноеСредство,
		|	ДокРее.ТС.Модель Модель,
		|	CASE WHEN ДокРее.ТИПТС = Значение(Справочник.уатТипыТС.Пустаяссылка) THEN ДокРее.ТС.ТипТС ELSE ДокРее.ТИПТС END ТипТС,
		|	ДокРее.Реестр Реестр,
		|	ДокРее.Заказчик Заказчик,
		|	&КА Контрагент,
		|	ДокРее.ЦехКонтрагента,
		|	ДокРее.ЦехКонтрагента.Родитель РодЦех,
		|	ДокРее.ЦехКонтрагента.МЕсторождение Месторождение,
		|	ДокРее.ЦехКонтрагента.МЕсторождение.РОдитель РодМст,
		|	ДокРее.ПутевойЛист,
		|	ДокРее.ПутевойЛист.ДатаВыезда ДатаВыезда,
		|	ДокРее.Количество Количество,
		|	0 КоличествоКм,
		|	0 Количество1,
		|	0 Количество2,
		|	0 Количество3,
		|	0 Количество4,
		|	0 Количество5,
		|	0 Количество6,
		|	ДокРее.идСтроки идСтроки,
		|	ДокРее.Пробег,
		|	ДокРее.СуммаРеестра ДокСумма,
		|	ДокРее.Номенклатура
		|  INTO ВрДокСуб
		|ИЗ
		|	Документ.РеестрУслугСубподряд.услуги как ДокРее
		|WHERE  ДокРее.Ссылка = &сс
		|; ";
		
	ИНаче	
		
		ТекстЗапроса = ТекстЗапроса +глОбщий.ТекстЗапросаПодразделения();
		
		ТекстЗапроса = ТекстЗапроса +"
		|
		|	
		|	
		
		|	
		| ВЫБРАТЬ
		|	ДокРее.ТС ТранспортноеСредство,
		|	ДокРее.ТС.Модель Модель,
		|	CASE WHEN ДокРее.ТИПТС = Значение(Справочник.уатТипыТС.Пустаяссылка) THEN ДокРее.ТС.ТипТС ELSE ДокРее.ТИПТС END ТипТС,
		|	ДокРее.Ссылка Реестр,
		|	ДокРее.Ссылка.Контрагент Заказчик,
		|	&КА Контрагент,
		|	ДокРее.ЦехКонтрагента,
		|	ДокРее.ЦехКонтрагента.Родитель РодЦех,
		|	ДокРее.ЦехКонтрагента.МЕсторождение Месторождение,
		|	ДокРее.ЦехКонтрагента.МЕсторождение.РОдитель РодМст,
		|	РаботаТСОстатки.ПутевойЛист,
		|	ISNULL(РаботаТСОстатки.ПутевойЛист.ДатаВыезда,Док.Дата) ДатаВыезда,
		|	ДокРее.Количество Количество,
		|	ДокРее.КоличествоКм КоличествоКм,
		|	ДокРее.Количество1,
		|	ДокРее.Количество2,
		|	ДокРее.Количество3,
		|	ДокРее.Количество4,
		|	ДокРее.Количество5,
		|	ДокРее.Количество6,
		|	ДокРее.идСтроки идСтроки,
		|	ДокРее.Пробег,
		|	ДокРее.Сумма + ДокРее.СуммаКм + ДокРее.Сумма1 + ДокРее.Сумма2 + ДокРее.Сумма3 + ДокРее.Сумма4 ДокСумма,
		|	ДокРее.Номенклатура
		|  INTO ВрДокСуб
		|ИЗ
		|	РегистрНакопления.РаботаТССубподряд.Остатки(,   
		//|	и (Номенклатура = &Ном OR &Ном =Значение(Справочник.Номенклатура.ПустаяСсылка))
		|	) КАК РаботаТСОстатки
		|        INNER JOIN Документ.РеестрУслуг.Услуги как ДокРее ON    ДокРее.Ссылка      = РаботаТСОстатки.Реестр 
		| 															   и ДокРее.идСтроки    = РаботаТСОстатки.идСтроки
		| 															   и ДокРее.ПутевойЛист = РаботаТСОстатки.ПутевойЛист
		| 															   и РаботаТСОстатки.ТалонОстаток > 0
		| 															   
		|        INNER JOIN Документ.РеестрУслуг  как Док ON Док.ссылка = ДокРее.ссылка и Док.Ссылка.Дата <= &Дт1
		| 															   
		| 		 INNER JOIN врПодр ТблПодр ON  ДокРее.ТС    =  ТблПодр.ТС													   
		|                                      и ISNULL(РаботаТСОстатки.ПутевойЛист.ДатаВыезда,Док.Дата) >= ТблПодр.Период 
		|                                      и ISNULL(РаботаТСОстатки.ПутевойЛист.ДатаВыезда,Док.Дата) <  ТблПодр.ПериодКон
		|                                      и &КА = ТблПодр.Владелец
		|; ";
		
		
	КонецЕСЛИ;	
	
	
	ТекстЗапроса = ТекстЗапроса +"
|
|	
	
//Соберем прейскурант
|SELECT	
|	Рег.Период,
|	Рег.Цена    Тариф,
|	Рег.ЦенаКм  ТарифКм,
|	Рег.Услуга1 Тариф1,
|	Рег.Услуга2 Тариф2,
|	Рег.Услуга3 Тариф3,
|	Рег.Услуга4 Тариф4,
|	Рег.Услуга5 Тариф5,
|	Рег.Услуга6 Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.Регистратор ПРейскурант
|	INTO ВрРег0Суб
|FROM 	
|	РегистрСведений.уатПрейскурантыТССубПодряд  КАК Рег
|WHERE
|      (Контрагент     в (SELECT DISTINCT Контрагент     Из ВрДокСуб как тбДок1) OR Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
|  and (Номенклатура   в (SELECT DISTINCT Номенклатура   Из ВрДокСуб как тбДок3) OR Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)) 
|
|  and (ЦехКонтрагента в (SELECT DISTINCT ЦехКонтрагента Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT тбРод.Родитель Из ВрДокСуб как тбДок2  
|                                                INNER JOIN "+врТбл+" тбРод ON тбРод.ссылка = РодЦех)
|

|    OR ЦехКонтрагента в (SELECT DISTINCT Месторождение Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT Заказчик Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT РодМст Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка),Значение(Справочник.Контрагенты.ПустаяСсылка))   )  
|
|  AND (Модель         в (SELECT DISTINCT ТранспортноеСредство Из ВрДокСуб как тбДок4 UNION ALL 
|                         SELECT DISTINCT Модель               Из ВрДокСуб как тбДок6 UNION ALL
|                         SELECT DISTINCT ТипТС                Из ВрДокСуб как тбДок7 
|                         )
|    OR Модель         в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка) ))  
| 
|;                          
|SELECT	
|	MIN(ISNULL(Рег0.Период,&Дт1)) ПериодКон,
|	Рег.Период,
|	Рег.Период ИзначДт,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.ПРейскурант
|INTO ВрРег1Суб	
|FROM ВрРег0Суб Рег	
|LEFT OUTER JOIN ВрРег0Суб Рег0 ON Рег.Период < Рег0.Период	
|	                     и Рег.Контрагент = Рег0.Контрагент
|	                     и Рег.ЦехКонтрагента = Рег0.ЦехКонтрагента
|	                     и Рег.Номенклатура = Рег0.Номенклатура
|	                     и Рег.Модель = Рег0.Модель
|GROUP BY	
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.ПРейскурант
|	
|;	
	
|SELECT	
|	Рег.ПериодКон,
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.ПРейскурант
|INTO ВрРег2Суб	
|FROM ВрРег1Суб Рег	
|INNER JOIN (SELECT Период,Контрагент,ЦехКонтрагента,Номенклатура,Модель,MAX(ИзначДт) ИзначДт  FROM ВрРег1Суб Рг
|																							   GROUP BY Период,Контрагент,ЦехКонтрагента,Номенклатура,Модель 
|           ) Рег0 ON Рег.Период = Рег0.Период	
|	                и Рег.ИзначДт = Рег0.ИзначДт
|	                и Рег.Контрагент = Рег0.Контрагент
|	                и Рег.ЦехКонтрагента = Рег0.ЦехКонтрагента
|	                и Рег.Номенклатура = Рег0.Номенклатура
|	                и Рег.Модель = Рег0.Модель
|	 и (Рег.Тариф<>0
|	или Рег.ТарифКм<>0
|	или Рег.Тариф1<>0
|	или Рег.Тариф2<>0
|	или Рег.Тариф3<>0
|	или Рег.Тариф4<>0
|	или Рег.Тариф5<>0
|	или Рег.Тариф6<>0
|	или Рег.Процент<>0)
|
|;
|
//Сгруппируем по цехам


|	
|SELECT	
|	Рег.ПериодКон,
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	ISNULL(тбРодЦех.Ссылка,Рег.ЦехКонтрагента) ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.ПРейскурант,
|	ISNULL(тбРодЦех.Уровень,0) Уровень
|INTO ВрРегСуб	
|FROM ВрРег2Суб Рег	
|LEFT OUTER JOIN "+врТбл+" тбРодЦех ON тбРодЦех.Родитель = Рег.ЦехКонтрагента
|	
|;

//Соеденим с документом
|/////////////	
|	ВЫБРАТЬ
|   Док.ПутевойЛист,
|   Док.ИдСтроки,
|   Док.Номенклатура,
|   Док.Заказчик,
|   Док.ТранспортноеСредство ТС,
|   Док.ТипТС,
|   Док.Реестр,
|   Док.ЦехКонтрагента,
|   Док.Месторождение,

|   Док.Количество,
|   Док.КоличествоКм,
|   Док.Количество1,
|   Док.Количество2,
|   Док.Количество3,
|   Док.Количество4,
|   Док.Количество5,
|   Док.Количество6,

|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,

|   Док.ДокСумма,
|   Док.Пробег,

|	ISNULL(Рег.Процент,0) Процент,
|	ISNULL(Рег.Тариф,0) Тариф,
|	ISNULL(Рег.ТарифКм,0) ТарифКм,
|	ISNULL(Рег.Тариф1,0)  Тариф1,
|	ISNULL(Рег.Тариф2,0)  Тариф2,
|	ISNULL(Рег.Тариф3,0)  Тариф3,
|	ISNULL(Рег.Тариф4,0)  Тариф4,
|	ISNULL(Рег.Тариф5,0)  Тариф5,
|	ISNULL(Рег.Тариф6,0)  Тариф6,
|	  CASE WHEN  Док.Контрагент = Рег.Контрагент              THEN 10000 ELSE 0 END

|	+ CASE WHEN  Док.ЦехКонтрагента = Рег.ЦехКонтрагента      THEN 4000 
|	       WHEN  Док.РодЦех         = Рег.ЦехКонтрагента      THEN 3000 + Рег.Уровень*100 
|	       WHEN  Док.Заказчик       = Рег.ЦехКонтрагента      THEN 2500 
|	       WHEN  Док.Месторождение  = Рег.ЦехКонтрагента      THEN 2000 
|	       WHEN  Док.РодМст         = Рег.ЦехКонтрагента      THEN 1000 ELSE 0 END

|	+ CASE WHEN  Док.Номенклатура = Рег.Номенклатура          THEN 10 ELSE 0 END

|	+ CASE WHEN  Док.ТранспортноеСредство = Рег.Модель        THEN 3
|	       WHEN  Док.Модель = Рег.Модель                      THEN 2 
|	       WHEN  Док.ТипТС  = Рег.Модель                      THEN 1 ELSE 0 END Инд
|	
|	INTO ВрТблСуб
|ИЗ
|	 ВрДокСуб КАК Док
|	
|LEFT OUTER JOIN ВрРегСуб Рег	ПО  (Рег.Контрагент = Док.Контрагент OR Рег.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
|       and (Рег.Номенклатура = Док.Номенклатура OR Рег.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)) 
|	
|       and (Рег.ЦехКонтрагента = Док.ЦехКонтрагента 
|	        OR Рег.ЦехКонтрагента = Док.РодЦех
|	        OR Рег.ЦехКонтрагента = Док.Месторождение
|	        OR Рег.ЦехКонтрагента = Док.Заказчик
|	        OR Рег.ЦехКонтрагента = Док.РодМст
|    		OR Рег.ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка),Значение(Справочник.Контрагенты.ПустаяСсылка))   )  
|	
|       and (Рег.Модель   = Док.ТранспортноеСредство 
|			OR Рег.Модель = Док.Модель 
|			OR Рег.Модель = Док.ТипТС 
|    		OR Рег.Модель в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка)) )  
|	
|	    and (Рег.Период <= Док.ДатаВыезда и Рег.ПериодКон > Док.ДатаВыезда)
|	
| 
|;
|SELECT
|   Т1.ТС,
|   Т1.ПутевойЛист,
|   Т1.ИдСтроки,
|   Т1.Номенклатура,
|   Т1.Заказчик,
|   Т1.ТипТС,
|   Т1.Реестр,
|   Т1.ЦехКонтрагента,
|   Т1.Месторождение,
|   Т1.ДокСумма СуммаРеестра,

|  Количество,
|  КоличествоКм,
|  Количество1,
|  Количество2,
|  Количество3,
|  Пробег,

|	Номенклатура1,
|	Номенклатура2,
|	Номенклатура3,
|	Номенклатура4,
|	Номенклатура5,
|	Номенклатура6,

|  Тариф,
|  ТарифКм,
|  Тариф1,
|  Тариф2,
|  Тариф3,
|  Тариф4,
|  Тариф5,
|  Тариф6,
|
|  Тариф  * Количество + Выразить(ДокСумма*Процент/100 как Число(17,2))  Сумма,
|  ТарифКм* КоличествоКм СуммаКм,
|  Тариф1 * Количество1  Сумма1,
|  Тариф2 * Количество2  Сумма2,
|  Тариф3 * Количество3  Сумма3,
|  Тариф4 * Количество4  Сумма4,
|  Тариф5 * Количество5  Сумма5,
|  Тариф6 * Количество6  Сумма6
|
|FROM ВрТблСуб Т1
|INNER JOIN (SELECT ПутевойЛист,ИдСтроки,Реестр, Max(Инд) Инд FROM ВрТблСуб Т2 GROUP BY ПутевойЛист,ИдСтроки,Реестр) Т2 ON Т2.ПутевойЛист = Т1.ПутевойЛист 
|																					  					и Т2.ИдСтроки = Т1.ИдСтроки 
|																					  					и Т2.ИНд = Т1.ИНд
|																										и Т2.Реестр = Т1.Реестр
|WHERE 
|   &Заказчик = Т1.Заказчик OR &Заказчик = Значение(Справочник.Контрагенты.ПустаяСсылка)
|";

Запрос.Текст = ТекстЗапроса;
Запрос.УстановитьПараметр("ДтДляПодр",НачалоМесяца(Дата)-1);
Запрос.УстановитьПараметр("Дт1",КонецМесяца(Дата)+1);
Запрос.УстановитьПараметр("КА",Контрагент);
Запрос.УстановитьПараметр("Заказчик",Заказчик);
Запрос.УстановитьПараметр("сс",ссылка);
	
   Возврат Запрос.Выполнить().Выгрузить();

КонецФункции



Процедура ОбновитьНадписи() Экспорт
	
	Если ПодписиИсполнитель.Количество() = 0 Тогда
		ПодписиИсполнитель.Загрузить(РегистрыСведений.Подписи.ПолучитьТаблицуПодписей(ЭтотОбъект,Контрагент));
	КонецЕСЛи;
	
КонецПроцедуры



Функция НайтиГород(Док)
	
	Стр = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Док.Организация,"Юридический");
	
	ТекСтр = СТрЗаменить(Стр,",",Символы.ПС);
	ДЛя а=1 по СтрЧислоСтрок(ТекСтр) Цикл
		 п = СокрЛП(СтрПолучитьСтроку(ТекСтр,а));
		 Если Прав(п,2) = " г" ТОгда
			 Возврат "г. "+Лев(п,СтрДлина(п)-2);
	     КонецЕСЛИ;
	 КонецЦикла;
	 
	 Возврат СокрЛП(СтрПолучитьСтроку(ТекСтр,2));
	
КонецФункции


Функция ДанныеШапкаАкт(Док)
	
	Стк = Новый Структура;
	Стк.Вставить("МесяцГод",Формат(Док.Дата,"ДФ='MMMM yyyy ""г.""'"));
	Стк.Вставить("Номер",Док.Номер);
	Стк.Вставить("ДатаДок",Формат(Док.Дата,"ДФ='dd MMMM yyyy ""г.""'"));
	Стк.Вставить("Город",НайтиГород(Док));
	Стк.Вставить("НазваниеЗаказчикаРП","Заказчика");
	Стк.Вставить("НазваниеЗаказчика","Заказчик");
	Стк.Вставить("НазваниеИсполнителяРП","Исполнитель");
	Стк.Вставить("НазваниеИсполнителя","Исполнитель");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтвРук.Период,
	               |	ОтвРук.ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(
	               |			&Дт,
	               |			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.Руководитель)
	               |				И СтруктурнаяЕдиница = &Орг) КАК ОтвРук";
				   Запрос.УстановитьПараметр("Дт",Док.Дата);
				   Запрос.УстановитьПараметр("Орг",Док.организация);
				   тбл = запрос.Выполнить().Выгрузить();
				   С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(Док.организация,Тбл[0].ФизическоеЛицо,Док.Дата);
				   
	Стк.Вставить("НазваниеОрганизации",Док.организация.НаименованиеПолное);
	Стк.Вставить("Должность",С.Должность);
	Стк.Вставить("Рук",С.Представление);
	Стк.Вставить("Д11",глОбщий.ПолучитьХарактеристику(С.Должность,"Должность РП","Строка"));
	Стк.Вставить("Ф11",глОбщий.ПолучитьХарактеристику(Тбл[0].ФизическоеЛицо,"Физлицо РП","Строка"));
	Стк.Вставить("О11",?(СокрлП(С.Сотрудник.Доверенность)="","Устава",СокрлП(С.Сотрудник.Доверенность)));
	СуммаАкта =  Док.Услуги.Итог("Сумма")+ Док.Услуги.Итог("СуммаКм")+ Док.Услуги.Итог("Сумма1")+ Док.Услуги.Итог("Сумма2") + Док.Услуги.Итог("Сумма3");
	Стк.Вставить("Сумма",СуммаАкта);
	Стк.вставить("ПрописьСУмма",ЧислоПрописью(СуммаАкта, ,Константы.ВалютаРегламентированногоУчета.Получить().ПараметрыПрописиНаРусском));
	
	Стк.Вставить("Контрагент",Док.Контрагент.НаименованиеПолное);
	Стк.Вставить("Исполнитель",Док.Контрагент.НаименованиеПолное);
	Стк.Вставить("АдресКА",СокрЛП(УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Док.Контрагент,"Юридический")));
	
	Возврат Стк;
	
КонецФункции


Функция ПечатьАкт() Экспорт
	
	//Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Таб = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "Акт_Субподряд";
	Макет = ПолучитьМакет("Акт");
	
	Стк = ДанныеШапкаАкт(Ссылка);
	
	Обл = Макет.ПолучитьОбласть("Область1");
	
	//+Lexx от 27.06.2017 по заявке 3997
	Обл.Параметры.ДлжЗкз = "";
	Обл.Параметры.ФИОЗкз = "";
	Если Ссылка.ПодписиИсполнитель.Количество() >= 2 Тогда
		пСтр = Ссылка.ПодписиИсполнитель[1];
		Стр = уатОбщегоНазначенияТиповые.ДанныеФизЛица(Ссылка.Организация,пСтр.Сотрудник.ФизЛицо,Ссылка.Дата);
		Обл.Параметры.ДлжЗкз = Стр.Должность;
		Обл.Параметры.ФИОЗкз = Стр.Представление;
	КонецЕСЛИ;
	//-Lexx от 27.06.2017 по заявке 3997
	
	
	
	Обл.Параметры.Заполнить(Стк);
	Таб.Вывести(Обл);
	
	//Если НаПринтер Тогда
	//	уатОбщегоНазначенияТиповые.уатНапечататьДокумент(Таб, 1, НаПринтер, "Акт", Неопределено);
	//ИНАче
	//	Таб.ТолькоПросмотр = Истина;
	//	Таб.ОтображатьСетку = Ложь;
	//	Таб.ОтображатьЗаголовки = Ложь;
	//	Таб.Показать();
	//КонецЕСЛИ;
	Возврат Таб;
	
КонецФункции

//Вариант 0 - пусто; 1- Со спидометром и часами
Процедура ПечатьТалонов(Вариант,ТекПЛ,ВидТалона="й0",ВерсияПосредник = Ложь)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПутевойЛист.Номер,
	               |	уатПутевойЛист.Дата КАК Дата,
	               |	уатПутевойЛист.ТранспортноеСредство КАК ТранспортноеСредство,
	               |	уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КАК ТранспортноеСредствоГарНомер,
	               |	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ТранспортноеСредствоГосНомер,
	               |	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыезда, ДЕНЬ) КАК ДатаВыезда,
	               |	НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВозвращения, ДЕНЬ) КАК ДатаВозвращения,
	               |	уатПутевойЛист.ДатаВыезда КАК ВремяВыезда,
	               |	уатПутевойЛист.ДатаВозвращения КАК ВремяВозвращения,
	               |	&Орг КАК ОрганизацияКР,
	               |	уатПутевойЛист.ТранспортноеСредство.Наименование КАК МодельТС,
	               |	СпрКА.КонтрагентНаПечать КАК Заказчик,
	               |	СпрКА.НаименованиеПолное КАК ЗаказчикП,
	               |	СпрКА.Наименование КАК ЗаказчикС,
	               |	СпрКА.ссылка КАК ЗаказчикСсылка,
	               |	РеестрУслугСубподрядУслуги.Количество КАК Количество,
	               |	РеестрУслугСубподрядУслуги.Пробег КАК Пробег,
	               |	уатПутевойЛист.СпидометрВыезда,
	               |	уатПутевойЛист.СпидометрВозвращения,
	               |	уатПутевойЛист.ВсегоЧасов
	               |ИЗ
	               |	Документ.РеестрУслугСубподряд.Услуги КАК РеестрУслугСубподрядУслуги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	               |		ПО РеестрУслугСубподрядУслуги.ПутевойЛист = уатПутевойЛист.Ссылка
	               |
	               |     LEFT OUTER JOIN Справочник.Контрагенты СпрКА ON СпрКА.ссылка = &КА
	               |
	               |ГДЕ
	               |	РеестрУслугСубподрядУслуги.Ссылка = &Ссылка
	               |	И (&ПЛ = ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	               |			ИЛИ уатПутевойЛист.Ссылка = &ПЛ)
	               |
				   //-Lexx заявка 3856 
	               |УПОРЯДОЧИТЬ ПО
	               |	ТранспортноеСредство,
	               |	Дата
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   //-Lexx заявка 3856 
				   Запрос.УстановитьПараметр("Ссылка",Ссылка);
				   Запрос.УстановитьПараметр("ПЛ",ТекПЛ);
				   
				   НачальникОЭ = Неопределено;
				   Если ЗначениеЗаполнено(Договор.КонтрагентПосредник) Тогда
					   Если ВерсияПосредник ТОгда
						   Запрос.УстановитьПараметр("Орг",Организация.Наименование);
						   Запрос.УстановитьПараметр("КА",Договор.КонтрагентПосредник);
					   ИНаче
						   Запрос.УстановитьПараметр("Орг",Договор.КонтрагентПосредник.НаименованиеПолное);
						   Запрос.УстановитьПараметр("КА",Контрагент);
						   Если ПодписиПосредник.Количество()<>0 Тогда
							  	НачальникОЭ = ПодписиПосредник[0].ФИО;
							  КонецЕСЛИ;
					   КонецЕСЛИ;
				   ИНаче
					   Запрос.УстановитьПараметр("Орг",Организация.Наименование);
					   Запрос.УстановитьПараметр("КА",Контрагент);
				   КонецеСЛИ;
				   
				   ТБл = Запрос.Выполнить().Выгрузить();
				   
   Если НачальникОЭ=Неопределено Тогда
	   Запрос = Новый Запрос;
	   Запрос.Параметры.Вставить("Организация", Организация);
	   Запрос.Параметры.Вставить("ОтвЛицо", Перечисления.ОтветственныеЛицаОрганизации.НачОЭ);
	   Запрос.Текст = "ВЫБРАТЬ
	   |	ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо
	   |ИЗ
	   |	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних КАК ОтветственныеЛицаОрганизацииСрезПоследних
	   |ГДЕ
	   |	ОтветственныеЛицаОрганизацииСрезПоследних.СтруктурнаяЕдиница = &Организация
	   |	И ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо = &ОтвЛицо";
	   
	   
	   выб = Запрос.Выполнить().Выбрать();
	   выб.Следующий();
	   НачальникОЭ = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(выб.ФизическоеЛицо);
   КонецЕСЛИ;
   
	Макет = ПолучитьМакет("Талон");
	Обл = Макет.ПолучитьОбласть("й2|"+видТалона);
	
	Таб = Новый ТабличныйДокумент;
	Таб.ИмяПараметровПечати = "ТалоныИзРеестра";
	
	Для каждого Стр из Тбл Цикл
		Обл.Параметры.Заполнить(Стр);
		обл.Параметры.ДатаВыписки = Формат(Стр.ДатаВыезда,"ДФ=dd.MM.yy");	
		Если Стр.ДатаВыезда = Стр.ДатаВозвращения Тогда
			обл.Параметры.ТекстДействителенДо = "";	
		ИНАче
			обл.Параметры.ТекстДействителенДо = Формат(Стр.ДатаВозвращения,"ДФ=dd.MM.yy");	
		КонецесЛИ;
		
		Если Стр.ВремяВыезда = Дата(1,1,1) Тогда
			обл.Параметры.ДатаВыезда = "";	
			обл.Параметры.ДатаВозвращения = "";	
		КонецесЛИ;
		
		Если СокрЛП(Стр.Заказчик) = "" Тогда
			обл.Параметры.Заказчик = Стр.ЗаказчикС;	
		КонецеСЛИ;
		
		//Вот тут сделаем изменение Заказчика:
		//Если у субчика указан Головной контрагент, то именно его и пихаем в "ОрганизацияКР"
		//Если ЗначениеЗаполнено(Стр.ЗаказчикСсылка.ГоловнойКонтрагент) Тогда
		//	Если СокрЛП(Стр.ЗаказчикСсылка.ГоловнойКонтрагент.КонтрагентНаПечать) = "" Тогда
		//		обл.Параметры.ОрганизацияКР = Стр.ЗаказчикСсылка.ГоловнойКонтрагент.Наименование;	
		//	Иначе
		//		обл.Параметры.ОрганизацияКР = Стр.ЗаказчикСсылка.ГоловнойКонтрагент.КонтрагентНаПечать;	
		//	КонецЕсли;	
		//КонецЕсли;	
		
		
		
	    обл.Параметры.Ответственный = НачальникОЭ;
		
		
		
		
		Если Таб.ВысотаТаблицы = 0 ТОгда
			Таб.Вывести(Обл);
		ИНАчеЕсли Таб.ПроверитьПрисоединение(Обл) Тогда
			Таб.Присоединить(Обл);
		ИНАчеЕсли Таб.ПроверитьВывод(Обл) Тогда
			Таб.Вывести(Обл);
		ИНаче
			Таб.ВывестиГоризонтальныйРазделительСтраниц();
			Таб.Вывести(Обл);
		КонецЕСЛИ;
			
		
	КонецЦиклА;	
	
	Таб.ТолькоПросмотр = Истина;
	Таб.ОтображатьСетку = Ложь;
	Таб.Показать("Талоны");

		
	
КонецПроцедуры

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

