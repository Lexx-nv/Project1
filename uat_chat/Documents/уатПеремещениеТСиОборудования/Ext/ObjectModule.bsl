////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует простой табличный документ
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма
	//
	Функция ПечатьПеремещение()
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТС";
		Макет = ПолучитьМакет("Перемещение");
		
		// Выводим шапку
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, "Перемещение ТС и оборудования");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		ОбластьМакета.Параметры.Организация = Организация;
		ОбластьМакета.Параметры.Подразделение = Подразделение;
		ОбластьМакета.Параметры.Колонна = Колонна;
		ТабДокумент.Вывести(ОбластьМакета);
		
		//формируем таблицы ТС и оборудования
		тблТС = ТС.Выгрузить().Скопировать();
		Сч = тблТС.Количество()-1;
		Пока Сч >= 0 Цикл
			Если НЕ тблТС[Сч].ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
				тблТС.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		тблОборудование = ТС.Выгрузить().Скопировать();
		Сч = тблОборудование.Количество()-1;
		Пока Сч >= 0 Цикл
			Если тблОборудование[Сч].ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
				тблОборудование.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		
		НомерСтроки = 1;
		// Выводим таблицу ТС
		Если тблТС.Количество() > 0 Тогда
			ТекОбласть = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабДокумент.Вывести(ТекОбласть);
			Для Каждого ТекСтрока Из тблТС Цикл
				ТекОбласть = Макет.ПолучитьОбласть("Строка");
				ТекОбласть.Параметры.Заполнить(ТекСтрока);
				ТекОбласть.Параметры.НомерСтроки = НомерСтроки;
				ТекОбласть.Параметры.ПредставлениеТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Организация);
				МестоТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.ДатаВвода-1);
				ТекОбласть.Параметры.Заполнить(МестоТС);
				НомерСтроки = НомерСтроки + 1;
				ТабДокумент.Вывести(ТекОбласть);
			КонецЦикла;
			
			ТекОбласть = Макет.ПолучитьОбласть("Итого");
			ТабДокумент.Вывести(ТекОбласть);
		КонецЕсли;
		
		НомерСтроки = 1;
		// Выводим таблицу оборудования
		Если тблОборудование.Количество() > 0 Тогда
			ТекОбласть = Макет.ПолучитьОбласть("ШапкаТаблицыОборудование");
			ТабДокумент.Вывести(ТекОбласть);
			Для Каждого ТекСтрока Из тблОборудование Цикл
				ТекОбласть = Макет.ПолучитьОбласть("СтрокаОборудование");
				ТекОбласть.Параметры.Заполнить(ТекСтрока);
				ТекОбласть.Параметры.НомерСтроки = НомерСтроки;
				ТекОбласть.Параметры.Оборудование = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Организация);
				МестоТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.ДатаВвода-1);
				ТекОбласть.Параметры.Заполнить(МестоТС);
				НомерСтроки = НомерСтроки + 1;
				ТабДокумент.Вывести(ТекОбласть);
			КонецЦикла;
			ТекОбласть = Макет.ПолучитьОбласть("ИтогоОборудование");
			ТабДокумент.Вывести(ТекОбласть);
		КонецЕсли;
		
		// Вывести подписи
		ТекОбласть = Макет.ПолучитьОбласть("Подвал");
		ТекОбласть.Параметры.Ответственный = Ответственный;
		ТабДокумент.Вывести(ТекОбласть);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСписаниеТоваров()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если НазваниеМакета = "Перемещение" Тогда
			ТабДокумент = ПечатьПеремещение();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			
		ИначеЕсли ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("Перемещение", "Перемещение ТС и оборудования");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ЗаписатьРеквизитыТСиОборудования(Отказ)
	Для каждого СтрТС Из ТС Цикл
		ТСОбъект = СтрТС.ТС.ПолучитьОбъект();
		
		МестоТС = уатОбщегоНазначения.МестонахождениеТС(СтрТС.ТС);
		
		ТСОбъект.Организация = МестоТС.Организация;
		ТСОбъект.Колонна = МестоТС.Колонна;
		ТСОбъект.Подразделение = МестоТС.Подразделение;
		ТСОбъект.Состояние = МестоТС.Состояние;
		
		Если МестоТС.Состояние = Справочники.уатСостояниеТС.Привлеченный ТОгда
			ТСОбъект.ВладелецТС = МестоТС.Владелец;
			ТСОбъект.ПривлеченноеТС = Истина;
		ИНаче
			ТСОбъект.ВладелецТС = Организация;
			ТСОбъект.ПривлеченноеТС = Ложь;
		КонецЕслИ;
		
		Попытка 
			ТСОбъект.Записать();
			#Если Клиент Тогда
				Оповестить("ОбновитьФорму_МестонахождениеТС", , ТСОбъект.Ссылка);
			#КонецЕсли
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать ТС/оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(СтрТС.ТС, Организация) + """", Отказ);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ВосстановитьТСиОборудованиеДоПеремещения(Отказ)
	Для каждого СтрТС Из ТС Цикл
		ТСОбъект = СтрТС.ТС.ПолучитьОбъект();
		
		МестоТС = уатОбщегоНазначения.МестонахождениеТС(СтрТС.ТС, СтрТС.ДатаВвода - 1);
		
		ТСОбъект.Организация = МестоТС.Организация;
		ТСОбъект.Подразделение = МестоТС.Подразделение;
		ТСОбъект.Колонна = МестоТС.Колонна;
		
		Если МестоТС.Состояние = Справочники.уатСостояниеТС.Привлеченный ТОгда
			ТСОбъект.ВладелецТС = МестоТС.Владелец;
			ТСОбъект.ПривлеченноеТС = Истина;
		ИНаче
			ТСОбъект.ВладелецТС = Организация;
			ТСОбъект.ПривлеченноеТС = Ложь;
		КонецЕслИ;
		
		Попытка 
			ТСОбъект.Записать();
			#Если Клиент Тогда
				Оповестить("ОбновитьФорму_МестонахождениеТС", , ТСОбъект.Ссылка);
			#КонецЕсли
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать ТС/оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(СтрТС.ТС, Организация) + """", Отказ);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция ТСВведеныВЭксплуатацию(Отказ)
	Рез = Истина;
	
	Для Каждого ТекСтрока Из ТС Цикл
		Если ТекСтрока.ТС.ДатаВводаВЭксплуатацию = '00010101' ИЛИ ТекСтрока.ДатаВвода < ТекСтрока.ТС.ДатаВводаВЭксплуатацию Тогда
			ОбщегоНазначения.СообщитьОбОшибке("ТС/оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Организация) + """ не введено в эксплуатацию!", Отказ);
			Рез = Ложь;
		ИначеЕсли ТекСтрока.ТС.ДатаВыбытия <> '00010101' И ТекСтрока.ДатаВвода >= ТекСтрока.ТС.ДатаВыбытия Тогда
			ОбщегоНазначения.СообщитьОбОшибке("ТС/оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Организация) + """ выбыло из эксплуатации!", Отказ);
			Рез = Ложь;
		ИначеЕсли (ТекСтрока.ТС.ПривлеченноеТС = Истина и Состояние <> Справочники.уатСостояниеТС.Привлеченный) 
			  или (ТекСтрока.ТС.ПривлеченноеТС = Ложь   и Состояние =  Справочники.уатСостояниеТС.Привлеченный) ТОгда
			//ОбщегоНазначения.СообщитьОбОшибке("ТС/оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Организация) + """ нельзя менять состояние привлеченного ТС!", Отказ);
			//Рез = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции


//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//Проверка согласования документа
	Если ТребуетСогласования И (НЕ уатОбщегоНазначения_проф.ДокументСогласован(Ссылка)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ """ + Ссылка + """ необходимо согласовать!", Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверка на то, что все ТС и оборудование введены в эксплуатацию
	Если НЕ ТСВведеныВЭксплуатацию(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатПеремещениеТСиОборудования.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение_проф.ОтразитьМестонахождениеТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатПеремещениеТСиОборудования.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Запись даты ввода в карточках ТС и оборудования
	ЗаписатьРеквизитыТСиОборудования(Отказ);
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//+Lexx Проверим срок консервации
	ТЗ = ТС.Выгрузить();
	Обр = Отчеты.КонтрольПериодаКонсервации.Создать();
	Отказ = Обр.КонтрольСрокаКонсервации(ТЗ,Состояние);
	//-Lexx
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		и ЗначениеЗаполнено(Проверил) ТОгда
		 Сообщить("Нельзя отменить  проведение у ПРОВЕРЕННЫХ документов!");
		 Отказ = Истина;
	КонецеслИ;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		
		СтруктураПолей = Новый Структура("Организация, Ответственный");
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
		СтруктураПолей = Новый Структура("ТС, ДатаВвода");
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ТС", СтруктураПолей, Отказ, Заголовок);
		
		//проверка на дубли строк
		тблТС = ТС.Выгрузить().Скопировать();
		тблТС.Свернуть("ТС");
		Если тблТС.Количество() < ТС.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""ТС"" присутствуют повторяющиеся строки (дублирование ТС)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьТСиОборудованиеДоПеремещения(Отказ);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли
