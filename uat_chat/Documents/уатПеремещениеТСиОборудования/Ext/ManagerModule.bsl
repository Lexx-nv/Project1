// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицуТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	//////СформироватьТаблицуГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Формирует таблицу значений, содержащую данные для проведения по регистру Местонахождение ТС.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблМестонахожденияТС = Новый ТаблицаЗначений;
	тблМестонахожденияТС.Колонки.Добавить("Регистратор");
	тблМестонахожденияТС.Колонки.Добавить("Период");
	тблМестонахожденияТС.Колонки.Добавить("ТС");
	тблМестонахожденияТС.Колонки.Добавить("Организация");
	тблМестонахожденияТС.Колонки.Добавить("Подразделение");
	тблМестонахожденияТС.Колонки.Добавить("Колонна");
	тблМестонахожденияТС.Колонки.Добавить("Состояние");
	тблМестонахожденияТС.Колонки.Добавить("Владелец");
	
	Для Каждого ТекСтрокаТС Из ДокументСсылка.ТС Цикл
		НоваяСтрока = тблМестонахожденияТС.Добавить();
		НоваяСтрока.Период = ТекСтрокаТС.ДатаВвода;
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.ТС = ТекСтрокаТС.ТС;
		НоваяСтрока.Организация = ДокументСсылка.Организация;
		НоваяСтрока.Подразделение = ДокументСсылка.Подразделение;
		НоваяСтрока.Колонна = ДокументСсылка.Колонна;
		
		Если ЗначениеЗаполнено(ДокументСсылка.Состояние) ТОгда
			НоваяСтрока.Состояние = ДокументСсылка.Состояние;
		ИНАче
			МестоТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НачалоДня(ТекСтрокаТС.ДатаВвода)-1);
			НоваяСтрока.Состояние = МестоТС.Состояние;
		КонецЕСЛИ;
		
		Если ДокументСсылка.Состояние = Справочники.уатСостояниеТС.Привлеченный Тогда
			Если ЗначениеЗаполнено(ДокументСсылка.Владелец) ТОгда
				НоваяСтрока.Владелец = ДокументСсылка.Владелец;
			ИНАче
				МестоТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НачалоДня(ТекСтрокаТС.ДатаВвода)-1);
				Если МестоТС.Владелец <> ДокументСсылка.Организация ТОгда
					НоваяСтрока.Владелец = МестоТС.Владелец;
				КонецЕСЛИ;
			КонецеСЛИ;
		ИНаче
			НоваяСтрока.Владелец = ДокументСсылка.Организация;
		КонецеСЛИ;
	КонецЦикла;
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.уатМестонахождениеТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = тблМестонахожденияТС;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	Блокировка.Заблокировать();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаМестонахожденияТС", тблМестонахожденияТС);
КонецПроцедуры // СформироватьТаблицуАгрегатыТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру Остатки ГСМ на ТС.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	//запрос по ТС, которые учитываются при перемещении ГСМ
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатПеремещениеТСиОборудованияТС.ТС КАК ТС
	|ИЗ
	|	Документ.уатПеремещениеТСиОборудования.ТС КАК уатПеремещениеТСиОборудованияТС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
	|	ПО уатПеремещениеТСиОборудованияТС.ТС = уатМестонахождениеТС.ТС
	|ГДЕ
	|	уатПеремещениеТСиОборудованияТС.Ссылка = &Ссылка
	|	И уатМестонахождениеТС.Колонна <> &Колонна";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Дата", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("Колонна", ДокументСсылка.Колонна);
	мсвТС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТС");
	
	//запрос по остаткам ГСМ
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатОстаткиГСМнаТСОстатки.Колонна,
	|	уатОстаткиГСМнаТСОстатки.ТС,
	|	уатОстаткиГСМнаТСОстатки.ГСМ,
	|	уатОстаткиГСМнаТСОстатки.Партия,
	|	уатОстаткиГСМнаТСОстатки.КоличествоОстаток КАК Количество,
	|	уатОстаткиГСМнаТСОстатки.СтоимостьОстаток КАК Стоимость,
	|	уатОстаткиГСМнаТСОстатки.СтоимостьУпрОстаток КАК СтоимостьУпр
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(&МоментВремени, ТС В (&мсвТС) И Колонна <> &Колонна) КАК уатОстаткиГСМнаТСОстатки";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.Параметры.Вставить("мсвТС", мсвТС);
	Запрос.Параметры.Вставить("Колонна", ДокументСсылка.Колонна);
	
	тблОстаткиГСМ = Запрос.Выполнить().Выгрузить();
	тблОстаткиГСМ.Колонки.Добавить("Регистратор");
	тблОстаткиГСМ.Колонки.Добавить("Период");
	тблОстаткиГСМ.Колонки.Добавить("ВидДвижения");
	тблОстаткиГСМ.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	тблОстаткиГСМ.ЗаполнитьЗначения(ДокументСсылка.Дата, "Период");
	тблОстаткиГСМ.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	тблОстаткиГСМ_Приход = тблОстаткиГСМ.Скопировать();
	
	Для Каждого ТекСтрокаТС Из тблОстаткиГСМ_Приход Цикл
		НоваяСтрока = тблОстаткиГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТС);
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.Колонна = ДокументСсылка.Колонна;
	КонецЦикла;
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГСМнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = тблОстаткиГСМ;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГСМ", "ГСМ");
	Блокировка.Заблокировать();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", тблОстаткиГСМ);
КонецПроцедуры // СформироватьТаблицуАгрегатыТС()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	//Зарезервировано
КонецПроцедуры

Процедура СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ДатаОкончания");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Состояние");
	тблДвижений.Колонки.Добавить("Контрагент");
	
	Если ЗначениеЗаполнено(ДокументСсылка.Состояние) тогда  	
		Для Каждого ТекСтрокаТС Из ДокументСсылка.ТС Цикл
			НоваяСтрока = тблДвижений.Добавить();
			НоваяСтрока.ТС = ТекСтрокаТС.ТС;
			НоваяСтрока.Период = ТекСтрокаТС.ДатаВвода;
			НоваяСтрока.Регистратор = ДокументСсылка;
			НоваяСтрока.Состояние = ДокументСсылка.Состояние;
		КонецЦикла;
	КонецЕСЛИ;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаСостояниеТС()
