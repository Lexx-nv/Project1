
// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка"          , ДокументСсылка);
	мЗапрос.УстановитьПараметр("Склад"           , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("МоментВремени"   , СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
	|	ТаблицаДокумента.Номенклатура,
	|	&КоличествоДляЗамены КАК Количество,
	|	ТаблицаДокумента.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатВозвратТоваров.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументаТовары.Склад,
	|	ТаблицаДокументаТовары.Номенклатура
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";	
	
	Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
		СтрокаРасчетаКоличества = "ВЫРАЗИТЬ(ТаблицаДокумента.Количество * ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3)) ";
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены",СтрокаРасчетаКоличества);	
	Иначе
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены","ТаблицаДокумента.Количество ");	
	КонецЕсли;
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
	Для каждого КолонкаРезультатЗапроса Из МассивРезультатов[1].Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();

	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТабНоменклатуры.Склад,
	|	ТабНоменклатуры.Номенклатура,
	|	ТабНоменклатуры.Количество,
	|	ТабНоменклатуры.Период
	|ИЗ 
	|	ТаблицаДокументаТовары КАК ТабНоменклатуры";
	
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ТабДанных.Склад,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Партия,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период,
	|	&Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр
	|ИЗ ВремТаблицаПартий КАК ТабДанных";
	
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);

	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", МассивРезультатов[1].Выгрузить());
	
    Выборка = ЗапросПартии.Выполнить();
	ТаблицаПартии = Выборка.Выгрузить();
	Для Каждого ТекСтрока ИЗ ТаблицаПартии Цикл

		Если СтруктураДополнительныеСвойства.ВалютаРеглУчета <> ДокументСсылка.ВалютаДокумента тогда
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость, ДокументСсылка.ВалютаДокумента, 
		   						СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								ДокументСсылка.КурсВзаиморасчетов, 
								СтруктураДополнительныеСвойства.КурсРегл,
								ДокументСсылка.КратностьВзаиморасчетов,  
								СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") И СтруктураДополнительныеСвойства.ВалютаУпрУчета <> ДокументСсылка.ВалютаДокумента тогда
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СтоимостьУпр, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
								ДокументСсылка.КурсВзаиморасчетов, 
								СтруктураДополнительныеСвойства.КурсУпр,
								ДокументСсылка.КратностьВзаиморасчетов,  
								СтруктураДополнительныеСвойства.КратностьУпр);
		Иначе
			ТекСтрока.СтоимостьУпр = 0;								
		КонецЕсли;	
		
	КонецЦикла;
	
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("Регистратор");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Период");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Контрагент");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Организация");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр");
	
	НовСтрока = ТаблицаВзаиморасчетов.Добавить();
	НовСтрока.Регистратор        = ДокументСсылка;
	НовСтрока.Период             = ДокументСсылка.Дата;
	НовСтрока.ВидДвижения        = ВидДвиженияНакопления.Расход;
	НовСтрока.ДоговорКонтрагента = ДокументСсылка.ДоговорКонтрагента;
	НовСтрока.Контрагент         = ДокументСсылка.Контрагент;
	НовСтрока.Организация        = ДокументСсылка.Организация;
	
	НовСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
	                                                  ДокументСсылка.ВалютаДокумента, ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  ДокументСсылка.КурсВзаиморасчетов,
													  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  ДокументСсылка.КратностьВзаиморасчетов);
	НовСтрока.СуммаУпр            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
	                                                  ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
													  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  СтруктураДополнительныеСвойства.КурсУпр,
													  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  СтруктураДополнительныеСвойства.КратностьУпр);
													  
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	Документ.уатВозвратТоваров.Товары КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатВозвратТоваров.Товары КАК ТабНоменклатуры
	|						ГДЕ
	|						 	ТабНоменклатуры.Ссылка = &Ссылка
	|							)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО &Склад = уатПартииТоваровНаСкладахОстатки.Склад
	|		  И	ТаблицаДокумента.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстСообщения = "Для """ + Выборка.Номенклатура + """ получены отрицательные остатки на складе """ + мЗапрос.Параметры.Склад + """. Остаток на складе: " + Выборка.КоличествоОстаток;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);	
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()
