////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
//полученное из константы.

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("Акт","Акт ремонта");
		СтруктураМакетов.Вставить("ОС3","Форма ОС-3");
		
		Если СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона Тогда
			СтруктураМакетов.Вставить("уатМ8","Лимитно-заборная карта");
		КонецЕсли;
		
		СтруктураМакетов.Вставить("РемонтныйЛист","Ремонтный лист");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Функция осуществляет печать формы "Акт о ремонте"
	//
	// Возвращаемое значение:
	//  Табличный документ
	//
	Функция ПечатьАкта() ЭКСПОРТ
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Акт");
		
		Движения.уатПартииТоваровНаСкладах.Прочитать();
		ТабДвижений = Движения.уатПартииТоваровНаСкладах.Выгрузить();
		
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Организация = Организация;
		Область.Параметры.Номер = Номер;
		Область.Параметры.Дата = Дата;
		Область.Параметры.Модель = ТС.Модель;
		Область.Параметры.ГосНомер = ТС.ГосударственныйНомер;
		
		Попытка
			СсылкаСотрудник = Исполнители.Получить(0).Сотрудник;
			ТаблицаРегистра = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("Сотрудник",СсылкаСотрудник));
			Фамилия = ТаблицаРегистра.Получить(0).Фамилия;
			Имя = ТаблицаРегистра.Получить(0).Имя;
			Отчество = ТаблицаРегистра.Получить(0).Отчество;
			Область.Параметры.ФИО = Фамилия+" "+Лев(Имя,1)+"."+" "+Лев(Отчество,1)+"."+","+" ";
			
			СсылкаСотрудник1 = Исполнители.Получить(1).Сотрудник;
			ТаблицаРегистра1 = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("Сотрудник",СсылкаСотрудник1));
			Фамилия1 = ТаблицаРегистра1.Получить(0).Фамилия;
			Имя1 = ТаблицаРегистра1.Получить(0).Имя;
			Отчество1 = ТаблицаРегистра1.Получить(0).Отчество;
			Область.Параметры.ФИО1 = Фамилия1+" "+Лев(Имя1,1)+"."+" "+Лев(Отчество1,1)+"."; 
		Исключение
		КонецПопытки;
		
		ТабДок.Вывести(Область);
		// Материалы
		Область = Макет.ПолучитьОбласть("МатериалыШапка");
		ТабДок.Вывести(Область);
		НомПП = 0;
		мСумма = 0;
		мСуммаИтого = 0;
		Для Каждого ТекСтрокаМатериалы Из Материалы Цикл
			НомПП = НомПП + 1;
			Область = Макет.ПолучитьОбласть("Материалы");
			Область.Параметры.Номенклатура = ТекСтрокаМатериалы.Номенклатура;
			Область.Параметры.Количество = ТекСтрокаМатериалы.Количество;
			Область.Параметры.ЕдиницаИзмерения = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			
			Если СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
				мСумма 					= ТекСтрокаМатериалы.Сумма; 
				Область.Параметры.Цена 	= ТекСтрокаМатериалы.Цена;
				Область.Параметры.Сумма = мСумма;
			ИначеЕсли уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
				//складской учет ведется средствами УАТ
				мСумма 					= РассчитатьСуммуСписания(ТекСтрокаМатериалы, ТабДвижений);
				Область.Параметры.Цена  = Окр(мСумма / ТекСтрокаМатериалы.Количество, 2, 1);
				Область.Параметры.Сумма = мСумма;
			Иначе
				мСумма 					= ТекСтрокаМатериалы.Сумма; 
				Область.Параметры.Цена 	= ТекСтрокаМатериалы.Цена;
				Область.Параметры.Сумма = мСумма;
			КонецЕсли;
			
			мСуммаИтого = мСуммаИтого + мСумма;
			
			Попытка
				СсылкаСотрудник = Исполнители.Получить(0).Сотрудник;
				ТаблицаРегистра = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("Сотрудник",СсылкаСотрудник));
				Фамилия = ТаблицаРегистра.Получить(0).Фамилия;
				Имя = ТаблицаРегистра.Получить(0).Имя;
				Отчество = ТаблицаРегистра.Получить(0).Отчество;
				Область.Параметры.Исполнитель1 = Фамилия+" "+Лев(Имя,1)+"."+" "+Лев(Отчество,1)+".";
				
				СсылкаСотрудник1 = Исполнители.Получить(1).Сотрудник;
				ТаблицаРегистра1 = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("Сотрудник",СсылкаСотрудник1));
				Фамилия1 = ТаблицаРегистра1.Получить(0).Фамилия;
				Имя1 = ТаблицаРегистра1.Получить(0).Имя;
				Отчество1 = ТаблицаРегистра1.Получить(0).Отчество;
				Область.Параметры.Исполнитель2 = Фамилия1+" "+Лев(Имя1,1)+"."+" "+Лев(Отчество1,1)+".";
				
				Отбор = Новый Структура;
				Отбор.Вставить("Сотрудник",Исполнители.Получить(0).Сотрудник.Ссылка);
				Область.Параметры.Должность1 = РегистрыСведений.уатСведенияОСотрудниках.ПолучитьПоследнее(,Отбор).Должность;
				Отбор1 = Новый Структура;
				Отбор1.Вставить("Сотрудник",Исполнители.Получить(1).Сотрудник.Ссылка);
				Область.Параметры.Должность2 = РегистрыСведений.уатСведенияОСотрудниках.ПолучитьПоследнее(,Отбор1).Должность;
			Исключение
			КонецПопытки;
			
			Область.Параметры.НомПП = НомПП;
			ТабДок.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("Подвал");
		Область.Параметры.ИтогСумма = мСуммаИтого;
		ТабДок.Вывести(Область);
		
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ПолеСлева = 0;
		ТабДок.ПолеСправа = 0;
		
		// Присвоим имя для сохранения параметров печати табличного документа
		ТабДок.ИмяПараметровПечати = "АктРемонта";
		
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Ложь;
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.Показать("Акт");
		Возврат ТабДок;
		
	КонецФункции // ПечатьАкта()
	
	// Функция осуществляет печать формы "ОС-3"
	//
	// Возвращаемое значение:
	//  Табличный документ
	//
	Функция ПечатьОС3()           ЭКСПОРТ
		
		Макет       = ПолучитьМакет("ОС3");
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_ОС3";
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	уатРемонтныйЛистРаботы.Ссылка.Номер КАК НомерДок,
		|	уатРемонтныйЛистРаботы.Ссылка.Дата КАК ДатаДок,
		|	уатРемонтныйЛистРаботы.Работа КАК ВидРабот,
		|	уатРемонтныйЛистРаботы.Ссылка.ТС КАК ОсновноеСредство,
		|	уатРемонтныйЛистРаботы.Ссылка.ТС.Наименование КАК НаимОС,
		|	уатРемонтныйЛистРаботы.Ссылка.ТС.ГаражныйНомер КАК ИнвНомер,
		|	уатРемонтныйЛистРаботы.Ссылка.ТС.ДатаВводаВЭксплуатацию КАК ДатаНачалаЭксплуатации,
		|	уатРемонтныйЛистРаботы.Сумма КАК СуммаЗатрат,
		|	уатРемонтныйЛистРаботы.Ссылка.ВидОбслуживания КАК ВидОбслуживания
		|ИЗ
		|	Документ.уатРемонтныйЛист.Работы КАК уатРемонтныйЛистРаботы
		|ГДЕ
		|	уатРемонтныйЛистРаботы.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатРемонтныйЛистМатериалы.Ссылка.Номер,
		|	уатРемонтныйЛистМатериалы.Ссылка.Дата,
		|	уатРемонтныйЛистМатериалы.Номенклатура,
		|	уатРемонтныйЛистМатериалы.Ссылка.ТС,
		|	уатРемонтныйЛистМатериалы.Ссылка.ТС.Наименование,
		|	уатРемонтныйЛистМатериалы.Ссылка.ТС.ГаражныйНомер,
		|	уатРемонтныйЛистМатериалы.Ссылка.ТС.ДатаВводаВЭксплуатацию,
		|	уатРемонтныйЛистМатериалы.Сумма,
		|	уатРемонтныйЛистМатериалы.Ссылка.ВидОбслуживания
		|ИЗ
		|	Документ.уатРемонтныйЛист.Материалы КАК уатРемонтныйЛистМатериалы
		|ГДЕ
		|	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка";	
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("КонДата", Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		// Печать лицевой стороны.
		// Секция № 1
		Шапка         = Макет.ПолучитьОбласть("Шапка1");
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка1");
		Подвал        = Макет.ПолучитьОбласть("Строка1П");
		
		Шапка.Параметры.Заполнить(Выборка);
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Шапка.Параметры.Исполнитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата), "ПолноеНаименование");;;
			Шапка.Параметры.КодОКПОИсполнителя = Контрагент.КодПоОКПО;
		Иначе
			Шапка.Параметры.Исполнитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование");;;
			Шапка.Параметры.КодОКПОИсполнителя = Организация.КодПоОКПО;
		КонецЕсли;
		
		Шапка.Параметры.Заказчик = Организация;
		Шапка.Параметры.ЗаказчикПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование");;
		Шапка.Параметры.КодОКПОЗаказчика = Организация.КодПоОКПО;
		Шапка.Параметры.ДатаНачала = ДатаНачала;
		Шапка.Параметры.ДатаОкончания=ДатаОкончания;
		
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(Организация, Дата);
		Шапка.Параметры.Руководитель = Руководители.Руководитель;
		Шапка.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		ТабДокумент.Вывести(Шапка);
		
		НомПП = 0;
		ДокВводаБУ  = Неопределено;
		ДатаВводаБУ = Дата('00000000');
		
		Выборка = РезультатЗапроса.Выгрузить();       // только первую строку распечатаем
		//Для каждого СтрокаВыборки Из Выборка Цикл
		Если Выборка.Количество()>0 Тогда
			СтрокаВыборки=Выборка[0];
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			НомПП = НомПП + 1;
			СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
			
			Если СтрокаВыборки.ДатаНачалаЭксплуатации<>ДатаВводаБУ Тогда   // заполнена
				СтрокаТаблицы.Параметры.СрокЭкспл  = Цел((Дата - СтрокаВыборки.ДатаНачалаЭксплуатации) / 2592000); //это в месяцах - по 30 дней
			КонецЕсли; 
			
			ТабДокумент.Вывести(СтрокаТаблицы);
		КонецЕсли; 
		
		ТабДокумент.Вывести(Подвал);
		
		// Секция № 2
		Шапка         = Макет.ПолучитьОбласть("Шапка2");
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка2");
		Подвал        = Макет.ПолучитьОбласть("Строка2П");
		
		ТабДокумент.Вывести(Шапка);
		
		НомПП = 0;
		ИтогоСуммаЗатратРем=0;
		ИтогоСуммаЗатрат=0;
		
		Для каждого СтрокаВыборки Из Выборка Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			Если СтрокаВыборки.ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.Дооборудование Или
				СтрокаВыборки.ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.Модернизация Тогда
				
				ИтогоСуммаЗатрат=ИтогоСуммаЗатрат+СтрокаВыборки.СуммаЗатрат;
				СтрокаТаблицы.Параметры.СуммаЗатратРем=0;
				
			Иначе
				
				СтрокаТаблицы.Параметры.СуммаЗатратРем=СтрокаВыборки.СуммаЗатрат; // на ремонт, а не на модернизацию
				СтрокаТаблицы.Параметры.СуммаЗатрат=0;          // на модернизацию
				ИтогоСуммаЗатратРем=ИтогоСуммаЗатратРем+СтрокаВыборки.СуммаЗатрат;
				
			КонецЕсли;
			
			НомПП = НомПП + 1;
			СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
			ТабДокумент.Вывести(СтрокаТаблицы);
		КонецЦикла;
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.ИтогоСуммаЗатратРем=ИтогоСуммаЗатратРем;
		Подвал.Параметры.ИтогоСуммаЗатрат =ИтогоСуммаЗатрат;
		
		ТабДокумент.Вывести(Подвал);
		
		// Печать оборотной стороны.
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьПечати = Макет.ПолучитьОбласть("ОборотнаяСторона");
		ОбластьПечати.Параметры.ДатаДок=Дата;
		
		ТабДокумент.Вывести(ОбластьПечати);
		ТабДокумент.Показать("ОС-3");
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьОС3()
	
	// Функция формирует печатную форму документа
	//
	Функция ПечатьЛимитноЗаборнаяКарта(ИмяМакета)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатПартииТоваровНаСкладах.Номенклатура,
		|	СУММА(уатПартииТоваровНаСкладах.Количество) КАК Количество,
		|	СУММА(уатПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
		|	СУММА(уатПартииТоваровНаСкладах.СтоимостьУпр) КАК СтоимостьУпр
		|ИЗ
		|	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		|ГДЕ
		|	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	уатПартииТоваровНаСкладах.Номенклатура";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТаблицаЦенТоваров = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛимитноЗаборнаяКарта";
		
		//Макет = ПолучитьМакет(ИмяМакета);
		Макет = ПолучитьОбщийМакет(ИмяМакета);
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		//ОбластьМакетаШапка.Параметры.Номер = Номер;
		
		ОбластьМакетаЗаголовок 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакетаПодвал 	= Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета 			= Макет.ПолучитьОбласть("Строка");
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		
		ШапкаВыведена = Ложь;
		
		ВысотаЗаголовка = ТабДокумент.ВысотаТаблицы;
		Если ВысотаЗаголовка <> 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
		
		ВыведеноСтрок = 0;
		ВсегоСтрокДокумента = Материалы.Количество();
		
		ЕстьВалУпрУчета = Метаданные.Константы.Найти("ВалютаУправленческогоУчета") <> Неопределено;
		Если ЕстьВалУпрУчета Тогда
			ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
		
		
		Для Каждого ТекСтрока Из Материалы Цикл
			ОбластьМакетаШапка.Параметры.Заполнить(ЭтотОбъект);
			ОбластьМакетаШапка.Параметры.Заполнить(ТекСтрока);
			ОбластьМакетаШапка.Параметры.НоменклатурныйНомер = ТекСтрока.Номенклатура.Код;
			ОбластьМакетаШапка.Параметры.ЕдиницаИзмеренияКод = ТекСтрока.ЕдиницаИзмерения.Код;
			ОбластьМакетаШапка.Параметры.Лимит = ТекСтрока.Количество;
			ОбластьМакетаШапка.Параметры.ДатаСоставления = Дата;
			ОбластьМакетаШапка.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
			ОбластьМакетаШапка.Параметры.КодОКПО = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО");
			
			Если НЕ ЕстьВалУпрУчета Тогда
				ОбластьМакетаШапка.Параметры.ТекстЦена  = "Цена(" + мВалютаРегламентированногоУчета + ")";
				ОбластьМакетаШапка.Параметры.ТекстСумма = "Сумма(" + мВалютаРегламентированногоУчета + ")";
				
				НайденнаяСтрока = ТаблицаЦенТоваров.Найти(ТекСтрока.Номенклатура, "Номенклатура");
				Если НЕ НайденнаяСтрока = Неопределено И НЕ НайденнаяСтрока.Количество = 0 Тогда
					ОбластьМакетаШапка.Параметры.Цена = НайденнаяСтрока.Стоимость / НайденнаяСтрока.Количество;
					ОбластьМакетаШапка.Параметры.Сумма = НайденнаяСтрока.Стоимость / НайденнаяСтрока.Количество * ТекСтрока.Количество;
				КонецЕсли;
				
			Иначе 
				ОбластьМакетаШапка.Параметры.ТекстЦена  = "Цена(" + ВалютаУпрУчета + ")";
				ОбластьМакетаШапка.Параметры.ТекстСумма = "Сумма(" + ВалютаУпрУчета + ")";
				
				НайденнаяСтрока = ТаблицаЦенТоваров.Найти(ТекСтрока.Номенклатура, "Номенклатура");
				Если НЕ НайденнаяСтрока = Неопределено И НЕ НайденнаяСтрока.Количество = 0 Тогда
					ОбластьМакетаШапка.Параметры.Цена = НайденнаяСтрока.СтоимостьУпр / НайденнаяСтрока.Количество;
					ОбластьМакетаШапка.Параметры.Сумма = НайденнаяСтрока.СтоимостьУпр / НайденнаяСтрока.Количество * ТекСтрока.Количество;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.МатериалНаименование = СокрЛП(ТекСтрока.Номенклатура);// + ФормированиеПечатныхФорм.ПредставлениеСерий(ТекСтрока);
			
			ТабДокумент.Вывести(ОбластьМакетаШапка);
			ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			ВывестиПодвалЛиста = Ложь;
			Пока НЕ ВывестиПодвалЛиста Цикл
				
				// Проверим, уместится ли строка на странице или надо открывать новую страницу
				Попытка
					флПроверитьВыводТабличногоДокумента = ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
				Исключение
					флПроверитьВыводТабличногоДокумента = Истина;
				КонецПопытки;
				
				ВывестиПодвалЛиста = Не флПроверитьВыводТабличногоДокумента;
				Если ВывестиПодвалЛиста Тогда
					ТабДокумент.Вывести(ОбластьМакетаПодвал);
				Иначе
					ОбластьСтрока = ТабДокумент.Вывести(ОбластьМакета);
					
					ТабДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					ТабДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
			
			Если ВыведеноСтрок<ВсегоСтрокДокумента Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТабДокумент;
	КонецФункции // ПечатьЛимитноЗаборнаяКарта()
	
	// Функция осуществляет печать всего ремонтного листа
	//
	// Возвращаемое значение:
	//  Табличный документ
	//
	Функция ПечатьРемонтныйЛист() ЭКСПОРТ
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.АвтоМасштаб = Истина;
		Макет = ПолучитьМакет("РемонтныйЛист");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	уатРемонтныйЛист.Номер,
		|	уатРемонтныйЛист.Дата,
		|	уатРемонтныйЛист.ВидОбслуживания,
		|	уатРемонтныйЛист.ВидОбслуживания2,
		|	уатРемонтныйЛист.ВидОбслуживания3,
		|	уатРемонтныйЛист.ВыработкаПриТО,
		|	уатРемонтныйЛист.ВыработкаПриТО2,
		|	уатРемонтныйЛист.ВыработкаПриТО3,
		|	уатРемонтныйЛист.ДатаНачала,
		|	уатРемонтныйЛист.ДатаОкончания,
		|	уатРемонтныйЛист.ДоговорКонтрагента,
		|	уатРемонтныйЛист.Контрагент,
		|	уатРемонтныйЛист.Организация,
		|	уатРемонтныйЛист.Подразделение,
		|	уатРемонтныйЛист.ПричинаОбращения,
		|	уатРемонтныйЛист.СпособРемонта,
		|	уатРемонтныйЛист.ТС,
		|	уатРемонтныйЛист.УчитыватьНДС,
		|	уатРемонтныйЛист.СуммаВключаетНДС,
		|	уатРемонтныйЛист.ВалютаДокумента,
		|	уатРемонтныйЛист.СкладОтправитель,
		|	уатРемонтныйЛист.СкладПолучатель
		|ИЗ
		|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
		|ГДЕ
		|	уатРемонтныйЛист.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатРемонтныйЛистРаботы.Ссылка,
		|	уатРемонтныйЛистРаботы.НомерСтроки,
		|	уатРемонтныйЛистРаботы.Работа,
		|	уатРемонтныйЛистРаботы.Количество,
		|	уатРемонтныйЛистРаботы.Цена,
		|	уатРемонтныйЛистРаботы.Сумма,
		|	уатРемонтныйЛистРаботы.СтавкаНДС,
		|	уатРемонтныйЛистРаботы.СуммаНДС,
		|	уатРемонтныйЛистРаботы.ЗаявкаНаРемонт,
		|	уатРемонтныйЛистРаботы.Ссылка.СпособРемонта КАК СпособРемонта
		|ИЗ
		|	Документ.уатРемонтныйЛист.Работы КАК уатРемонтныйЛистРаботы
		|ГДЕ
		|	уатРемонтныйЛистРаботы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатРемонтныйЛистМатериалы.Ссылка,
		|	уатРемонтныйЛистМатериалы.НомерСтроки,
		|	уатРемонтныйЛистМатериалы.Номенклатура,
		|	уатРемонтныйЛистМатериалы.Количество,
		|	уатРемонтныйЛистМатериалы.Цена,
		|	уатРемонтныйЛистМатериалы.Сумма,
		|	уатРемонтныйЛистМатериалы.СтавкаНДС,
		|	уатРемонтныйЛистМатериалы.СуммаНДС,
		|	уатРемонтныйЛистМатериалы.ЕдиницаИзмерения,
		|	уатРемонтныйЛистМатериалы.Ссылка.СпособРемонта
		|ИЗ
		|	Документ.уатРемонтныйЛист.Материалы КАК уатРемонтныйЛистМатериалы
		|ГДЕ
		|	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатРемонтныйЛистШины.НомерСтроки,
		|	уатРемонтныйЛистШины.СерияНоменклатуры.Модель КАК Модель,
		|	уатРемонтныйЛистШины.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатРемонтныйЛистШины.Состояние
		|ИЗ
		|	Документ.уатРемонтныйЛист.Шины КАК уатРемонтныйЛистШины
		|ГДЕ
		|	уатРемонтныйЛистШины.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатРемонтныйЛистАккумуляторы.НомерСтроки,
		|	уатРемонтныйЛистАккумуляторы.СерияНоменклатуры.Модель КАК Модель,
		|	уатРемонтныйЛистАккумуляторы.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатРемонтныйЛистАккумуляторы.Состояние
		|ИЗ
		|	Документ.уатРемонтныйЛист.Аккумуляторы КАК уатРемонтныйЛистАккумуляторы
		|ГДЕ
		|	уатРемонтныйЛистАккумуляторы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатРемонтныйЛистПрочиеАгрегаты.НомерСтроки,
		|	уатРемонтныйЛистПрочиеАгрегаты.СерияНоменклатуры.Модель КАК Модель,
		|	уатРемонтныйЛистПрочиеАгрегаты.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатРемонтныйЛистПрочиеАгрегаты.Состояние
		|ИЗ
		|	Документ.уатРемонтныйЛист.ПрочиеАгрегаты КАК уатРемонтныйЛистПрочиеАгрегаты
		|ГДЕ
		|	уатРемонтныйЛистПрочиеАгрегаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатРемонтныйЛистИсполнители.НомерСтроки,
		|	уатРемонтныйЛистИсполнители.Сотрудник,
		|	уатРемонтныйЛистИсполнители.Начало,
		|	уатРемонтныйЛистИсполнители.ВремяРаботы
		|ИЗ
		|	Документ.уатРемонтныйЛист.Исполнители КАК уатРемонтныйЛистИсполнители
		|ГДЕ
		|	уатРемонтныйЛистИсполнители.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатРемонтныйЛистЗарплата.НомерСтроки,
		|	уатРемонтныйЛистЗарплата.Сотрудник,
		|	уатРемонтныйЛистЗарплата.ВидНачисления,
		|	уатРемонтныйЛистЗарплата.Сумма
		|ИЗ
		|	Документ.уатРемонтныйЛист.Зарплата КАК уатРемонтныйЛистЗарплата
		|ГДЕ
		|	уатРемонтныйЛистЗарплата.Ссылка = &Ссылка";		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Шапка	         = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ТЗРаботы 	     = Запрос.ВыполнитьПакет()[1].Выгрузить();
		ТЗМатериалы	     = Запрос.ВыполнитьПакет()[2].Выгрузить();
		ТЗШины		     = Запрос.ВыполнитьПакет()[3].Выгрузить();
		ТЗАккумуляторы   = Запрос.ВыполнитьПакет()[4].Выгрузить();
		ТЗПрочиеАгрегаты = Запрос.ВыполнитьПакет()[5].Выгрузить();
		ТЗВремяРаботы    = Запрос.ВыполнитьПакет()[6].Выгрузить();
		ТЗЗарплата	     = Запрос.ВыполнитьПакет()[7].Выгрузить();
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Ссылка, "Ремонтный лист");
		ТабДок.Вывести(ОбластьЗаголовок);
		
		// шапка
		Для Каждого ТекСтрока Из Шапка Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				ОбластьОрганизацияПодразделение = Макет.ПолучитьОбласть("ОрганизацияПодразделение");
				ОбластьОрганизацияПодразделение.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьОрганизацияПодразделение);
			Иначе
				ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
				ОбластьОрганизация.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьОрганизация);    	
			КонецЕсли;
			ОбластьРеквизитыШапки1 = Макет.ПолучитьОбласть("РеквизитыШапки1");
			ОбластьРеквизитыШапки1.Параметры.ТС = ТекСтрока.ТС.Модель.Наименование + " " + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, ТекСтрока.Организация);
			ОбластьРеквизитыШапки1.Параметры.СпособРемонта = ТекСтрока.СпособРемонта;
			ТабДок.Вывести(ОбластьРеквизитыШапки1 );
			Если ТекСтрока.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
				ОбластьВАвтосервисе = Макет.ПолучитьОбласть("ВАвтосервисе");
				ОбластьВАвтосервисе.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьВАвтосервисе);
			Иначе
				ОбластьСобственнаяРемЗона = Макет.ПолучитьОбласть("СобственнаяРемЗона");
				ОбластьСобственнаяРемЗона.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСобственнаяРемЗона);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ПричинаОбращения) Тогда
				ОбластьПричинаОбращения = Макет.ПолучитьОбласть("ПричинаОбращения");
				ОбластьПричинаОбращения.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьПричинаОбращения);
			КонецЕсли;
			ОбластьРеквизитыШапки2 = Макет.ПолучитьОбласть("РеквизитыШапки2");
			ОбластьРеквизитыШапки2.Параметры.Заполнить(ТекСтрока);	
			ТабДок.Вывести(ОбластьРеквизитыШапки2);			
			Если ЗначениеЗаполнено(ТекСтрока.ВидОбслуживания2) Тогда
				ОбластьВидРемонта2 = Макет.ПолучитьОбласть("ВидРемонта2");
				ОбластьВидРемонта2.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьВидРемонта2);			
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ВидОбслуживания3) Тогда
				ОбластьВидРемонта3 = Макет.ПолучитьОбласть("ВидРемонта3");
				ОбластьВидРемонта3.Параметры.Заполнить(ТекСтрока);	
				ТабДок.Вывести(ОбластьВидРемонта3);
			КонецЕсли;
		КонецЦикла;
		
		// работы
		Если ТЗРаботы.Количество() И ТЗРаботы[0].СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона Тогда
			ОбластьШапкаРаботыСклад = Макет.ПолучитьОбласть("ШапкаРаботыСклад");
			ТабДок.Вывести(ОбластьШапкаРаботыСклад);
			Для Каждого ТекСтрока Из ТЗРаботы Цикл
				ОбластьСтрокаРаботыСклад = Макет.ПолучитьОбласть("СтрокаРаботыСклад");
				ОбластьСтрокаРаботыСклад.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаРаботыСклад);
			КонецЦикла;
			ОбластьПодвалРаботыСклад = Макет.ПолучитьОбласть("ПодвалРаботыСклад");
			ТабДок.Вывести(ОбластьПодвалРаботыСклад);
		ИначеЕсли ТЗРаботы.Количество() И ТЗРаботы[0].СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			ОбластьШапкаРаботыКонтрагент = Макет.ПолучитьОбласть("ШапкаРаботыКонтрагент");
			ТабДок.Вывести(ОбластьШапкаРаботыКонтрагент);							
			Сумма    = 0;
			СуммаНДС = 0;
			Для Каждого ТекСтрока Из ТЗРаботы Цикл
				ОбластьСтрокаРаботыКонтрагент = Макет.ПолучитьОбласть("СтрокаРаботыКонтрагент");
				ОбластьСтрокаРаботыКонтрагент.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаРаботыКонтрагент);
				Сумма    = Сумма    + ТекСтрока.Сумма;
				СуммаНДС = СуммаНДС + ТекСтрока.СуммаНДС;
			КонецЦикла;			
			ОбластьПодвалРаботыКонтрагент = Макет.ПолучитьОбласть("ПодвалРаботыКонтрагент");
			ОбластьПодвалРаботыКонтрагент.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабДок.Вывести(ОбластьПодвалРаботыКонтрагент);
			Если Шапка[0].УчитыватьНДС Тогда
				ОбластьИтогоНДСРаботыКонтрагент = Макет.ПолучитьОбласть("ИтогоНДСРаботыКонтрагент");
				Если СуммаНДС <> 0 Тогда
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.НДС = ?(Шапка[0].СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
				Иначе
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.НДС = "Без налога (НДС)";
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.ВсегоНДС = "-";
				КонецЕсли;
				ТабДок.Вывести(ОбластьИтогоНДСРаботыКонтрагент);
			КонецЕсли;
			ОбластьСуммаПрописьюРаботыКонтрагент                          = Макет.ПолучитьОбласть("СуммаПрописьюРаботыКонтрагент");
			СуммаКПрописи                       						  = Сумма + ?(Шапка[0].СуммаВключаетНДС, 0, СуммаНДС);
			ОбластьСуммаПрописьюРаботыКонтрагент.Параметры.ИтоговаяСтрока = "Всего работ " + ТЗРаботы.Количество()
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ОбластьСуммаПрописьюРаботыКонтрагент.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ТабДок.Вывести(ОбластьСуммаПрописьюРаботыКонтрагент);
		КонецЕсли;
		
		// материалы
		Если ТЗМатериалы.Количество() И ТЗМатериалы[0].СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона Тогда
			ОбластьШапкаМатериалыСклад = Макет.ПолучитьОбласть("ШапкаМатериалыСклад");
			ТабДок.Вывести(ОбластьШапкаМатериалыСклад);
			Для Каждого ТекСтрока Из ТЗМатериалы Цикл
				ОбластьСтрокаМатериалыСклад = Макет.ПолучитьОбласть("СтрокаМатериалыСклад");
				ОбластьСтрокаМатериалыСклад.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаМатериалыСклад);
			КонецЦикла;
			ОбластьПодвалМатериалыСклад = Макет.ПолучитьОбласть("ПодвалМатериалыСклад");
			ТабДок.Вывести(ОбластьПодвалМатериалыСклад);
		ИначеЕсли ТЗМатериалы.Количество() И ТЗМатериалы[0].СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			ОбластьШапкаМатериалыКонтрагент = Макет.ПолучитьОбласть("ШапкаМатериалыКонтрагент");
			ТабДок.Вывести(ОбластьШапкаМатериалыКонтрагент);							
			Сумма    = 0;
			СуммаНДС = 0;
			Для Каждого ТекСтрока Из ТЗМатериалы Цикл
				ОбластьСтрокаМатериалыКонтрагент = Макет.ПолучитьОбласть("СтрокаМатериалыКонтрагент");
				ОбластьСтрокаМатериалыКонтрагент.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаМатериалыКонтрагент);
				Сумма    = Сумма    + ТекСтрока.Сумма;
				СуммаНДС = СуммаНДС + ТекСтрока.СуммаНДС;
			КонецЦикла;			
			ОбластьПодвалМатериалыКонтрагент = Макет.ПолучитьОбласть("ПодвалМатериалыКонтрагент");
			ОбластьПодвалМатериалыКонтрагент.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабДок.Вывести(ОбластьПодвалМатериалыКонтрагент);
			Если Шапка[0].УчитыватьНДС Тогда
				ОбластьИтогоНДСМатериалыКонтрагент = Макет.ПолучитьОбласть("ИтогоНДСМатериалыКонтрагент");
				Если СуммаНДС <> 0 Тогда
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.НДС = ?(Шапка[0].СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
				Иначе
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.НДС = "Без налога (НДС)";
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.ВсегоНДС = "-";
				КонецЕсли;
				ТабДок.Вывести(ОбластьИтогоНДСМатериалыКонтрагент);
			КонецЕсли;
			ОбластьСуммаПрописьюМатериалыКонтрагент                          = Макет.ПолучитьОбласть("СуммаПрописьюМатериалыКонтрагент");
			СуммаКПрописи                       						     = Сумма + ?(Шапка[0].СуммаВключаетНДС, 0, СуммаНДС);
			ОбластьСуммаПрописьюМатериалыКонтрагент.Параметры.ИтоговаяСтрока = "Всего наименований " + ТЗМатериалы.Количество()
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ОбластьСуммаПрописьюМатериалыКонтрагент.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ТабДок.Вывести(ОбластьСуммаПрописьюМатериалыКонтрагент);
		КонецЕсли;
		
		// шины
		Если ТЗШины.Количество() Тогда
			ОбластьШапкаШины = Макет.ПолучитьОбласть("ШапкаШины");
			ОбластьШапкаШины.Параметры.Заполнить(Шапка[0]);
			ТабДок.Вывести(ОбластьШапкаШины);
			Для Каждого ТекСтрока Из ТЗШины Цикл
				ОбластьСтрокаШины = Макет.ПолучитьОбласть("СтрокаШины");
				ОбластьСтрокаШины.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаШины);
			КонецЦикла;
			ОбластьПодвалШины = Макет.ПолучитьОбласть("ПодвалШины");
			ТабДок.Вывести(ОбластьПодвалШины);
		КонецЕсли;
		
		// аккумуляторы		
		Если ТЗАккумуляторы.Количество() Тогда
			ОбластьШапкаАккумуляторы = Макет.ПолучитьОбласть("ШапкаАккумуляторы");
			ОбластьШапкаАккумуляторы.Параметры.Заполнить(Шапка[0]);
			ТабДок.Вывести(ОбластьШапкаАккумуляторы);
			Для Каждого ТекСтрока Из ТЗАккумуляторы Цикл
				ОбластьСтрокаАккумуляторы = Макет.ПолучитьОбласть("СтрокаАккумуляторы");
				ОбластьСтрокаАккумуляторы.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаАккумуляторы);
			КонецЦикла;
			ОбластьПодвалАккумуляторы = Макет.ПолучитьОбласть("ПодвалАккумуляторы");
			ТабДок.Вывести(ОбластьПодвалАккумуляторы);
		КонецЕсли;
		
		// прочие агрегаты
		Если ТЗПрочиеАгрегаты.Количество() Тогда
			ОбластьШапкаПрочиеАгрегаты = Макет.ПолучитьОбласть("ШапкаПрочиеАгрегаты");
			ОбластьШапкаПрочиеАгрегаты.Параметры.Заполнить(Шапка[0]);
			ТабДок.Вывести(ОбластьШапкаПрочиеАгрегаты);
			Для Каждого ТекСтрока Из ТЗПрочиеАгрегаты Цикл
				ОбластьСтрокаПрочиеАгрегаты = Макет.ПолучитьОбласть("СтрокаПрочиеАгрегаты");
				ОбластьСтрокаПрочиеАгрегаты.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаПрочиеАгрегаты);
			КонецЦикла;
			ОбластьПодвалПрочиеАгрегаты = Макет.ПолучитьОбласть("ПодвалПрочиеАгрегаты");
			ТабДок.Вывести(ОбластьПодвалПрочиеАгрегаты);
		КонецЕсли;		
		
		// исполнители
		Если ТЗВремяРаботы.Количество() Тогда
			ОбластьШапкаВремяРаботы = Макет.ПолучитьОбласть("ШапкаВремяРаботы");
			ТабДок.Вывести(ОбластьШапкаВремяРаботы);
			Для Каждого ТекСтрока Из ТЗВремяРаботы Цикл
				ОбластьСтрокаВремяРаботы = Макет.ПолучитьОбласть("СтрокаВремяРаботы");
				ОбластьСтрокаВремяРаботы.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаВремяРаботы);
			КонецЦикла;
			ОбластьПодвалВремяРаботы = Макет.ПолучитьОбласть("ПодвалВремяРаботы");
			ТабДок.Вывести(ОбластьПодвалВремяРаботы);
		КонецЕсли;
		
		// зарплата
		Если ТЗЗарплата.Количество() Тогда
			ОбластьШапкаЗарплата = Макет.ПолучитьОбласть("ШапкаЗарплата");
			ТабДок.Вывести(ОбластьШапкаЗарплата);
			Сумма = 0;
			Для Каждого ТекСтрока Из ТЗЗарплата Цикл
				ОбластьСтрокаЗарплата = Макет.ПолучитьОбласть("СтрокаЗарплата");
				ОбластьСтрокаЗарплата.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСтрокаЗарплата);
				Сумма = Сумма + ТекСтрока.Сумма;
			КонецЦикла;			
			ОбластьПодвалЗарплата = Макет.ПолучитьОбласть("ПодвалЗарплата");
			ОбластьПодвалЗарплата.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабДок.Вывести(ОбластьПодвалЗарплата);
			ОбластьСуммаПрописьюЗарплата			              = Макет.ПолучитьОбласть("СуммаПрописьюЗарплата");
			ОбластьСуммаПрописьюЗарплата.Параметры.ИтоговаяСтрока = "Всего на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма, мВалютаРегламентированногоУчета);
			ОбластьСуммаПрописьюЗарплата.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(Сумма, мВалютаРегламентированногоУчета);
			ТабДок.Вывести(ОбластьСуммаПрописьюЗарплата);
			
		КонецЕсли;		
		
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ПолеСлева = 0;
		ТабДок.ПолеСправа = 0;
		ТабДок.ИмяПараметровПечати = "РемонтныйЛист";
		
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Ложь;
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.Показать("РемонтныйЛист");
		Возврат ТабДок;
		
	КонецФункции
	
	Функция ПроверкаВнешнейПечатиОТК()
		
		//Проверим нет ли спец формы
		Если ЗначениеЗаполнено(ВидОбслуживания) Тогда
			ДвоичныеДанные = ВидОбслуживания.Хранилище.Получить();
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				Печать(ВидОбслуживания.Хранилище);
				Возврат Истина;
			КонецЕСЛИ;
		КонецеСЛИ;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВнешниеОбработки.Ссылка,
		               |	ВнешниеОбработки.Наименование
		               |ИЗ
		               |	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
		               |ГДЕ
		               |	ВнешниеОбработки.ВидОбработки = Значение(Перечисление.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма)
		               |	И ВнешниеОбработки.Наименование ПОДОБНО ""ПечатьОТК%"" ";
					   ТБл = Запрос.Выполнить().Выгрузить();
					   Если Тбл.Количество()=0 ТОгда 
						   Возврат Ложь; 
					   ИНаче
						   Печать(Тбл[0].Ссылка);
						   Возврат Истина;
					   КонецеСЛИ;
		
	КонецФункции
	
	// Функция осуществляет печать всего ремонтного листа
	//
	// Возвращаемое значение:
	//  Табличный документ
	//
	Функция ПечатьОТК() ЭКСПОРТ
		
		Если ПроверкаВнешнейПечатиОТК() ТОгда Возврат Неопределено; КонецесЛИ;
		
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.АвтоМасштаб = Истина;
		Макет = ПолучитьМакет("ОТК");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	уатРемонтныйЛист.Дата,
		               |	уатРемонтныйЛист.Номер,
		               |	уатРемонтныйЛист.ВидОбслуживания,
		               |	уатРемонтныйЛист.Организация,
		               |	уатРемонтныйЛист.ТС,
		               |	уатРемонтныйЛист.ПоказанияСпидометра,
		               |	уатРемонтныйЛист.ТС.ГаражныйНомер КАК ГарНомер,
		               |	уатРемонтныйЛист.ТС.ГосударственныйНомер КАК ГосНомер,
		               |	уатМестонахождениеТССрезПоследних.Подразделение,
		               |	уатМестонахождениеТССрезПоследних.Подразделение.Код КАК ПодразделениеКод,
		               |	уатРемонтныйЛист.ОстатокТопливаВыезд,
		               |	""                            "" КАК ФИОВодитель,
		               |	""                            "" КАК ФИОМеханик,
		               |	уатРемонтныйЛист.МеханикОТК.ФизЛицо КАК МеханикОТК,
		               |	уатРемонтныйЛист.Водитель.ФизЛицо КАК Водитель,
		               |	уатРемонтныйЛист.Водитель.Код КАК КодВодитель,
		               |	ЕСТЬNULL(уатДокументыТС.ДатаОкончания, ЛОЖЬ) КАК ДатаОкончанияГарТалона
		               |ИЗ
		               |	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних
		               |		ПО уатРемонтныйЛист.ТС = уатМестонахождениеТССрезПоследних.ТС
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатДокументыТС КАК уатДокументыТС
		               |		ПО уатРемонтныйЛист.ТС = уатДокументыТС.ТС
		               |			И (уатДокументыТС.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДДД.ГарантийныйТалон))
		               |			И (уатДокументыТС.ДатаОкончания >= &Дт)
		               |ГДЕ
		               |	уатРемонтныйЛист.Ссылка = &Ссылка";	
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Дт", Дата);
		Запрос.УстановитьПараметр("ТС", ТС);
		Тбл = запрос.Выполнить().Выгрузить();
		
		ТблСтр = Тбл[0];
		Если ЗначениеЗаполнено(ТблСтр.Водитель) Тогда
			С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(ТблСтр.Организация,ТблСтр.Водитель,Дата);
			ТблСтр.ФИОВодитель = С.Представление;
		КонецеСЛИ;
		Если ЗначениеЗаполнено(ТблСтр.МеханикОТК) Тогда
			С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(ТблСтр.Организация,ТблСтр.МеханикОТК,Дата);
			ТблСтр.ФИОМеханик = С.Представление;
		КонецеСЛИ;
		
		макШапка = Макет.ПолучитьОбласть("С1");
		МакШапка.Параметры.Заполнить(ТблСтр);
		//+Lexx - найдем информацию о гарантийном талоне по текущему ТС
		Если ТблСтр.ДатаОкончанияГарТалона <> ЛОЖЬ Тогда
			МакШапка.Параметры.Гарантия = "Гар. срок до " + Строка(Формат(ТблСтр.ДатаОкончанияГарТалона, "ДЛФ=Д"));
		Иначе
			МакШапка.Параметры.Гарантия = "";
		КонецЕсли;	
		//-Lexx - найдем информацию о гарантийном талоне по текущему ТС
		Если ТС.ПриоритетноеТС Тогда	
			глОбщий.ВывестиКУ(макШапка,,185,15,15);
		КонецЕсли;
		ТабДок.Вывести(макШапка);
		
		
		макС5 = Макет.ПолучитьОбласть("С5");
		НомСтр=0;
		Для каждого стр из Работы Цикл
			Если ЗначениеЗаполнено(Стр.Работа)=Ложь Тогда продолжитЬ; КонецеСЛИ;
			Род=Стр.Работа.Родитель;
			Если ЗначениеЗаполнено(Род) тогда
				Род1 = Род.Родитель;
				Род = СокрЛП(Род)+" \ ";
				Если ЗначениеЗаполнено(Род1) Тогда
					Род = СокрЛП(Род1)+" \ "+род;
				КонецеСЛИ;
			КонецЕсли;
			
			МакС5.Параметры.Работа = ""+Род+Стр.Работа;
			макС5.Параметры.ФИОМеханик = ТблСтр.ФИОМЕханик;
			ТабДок.Вывести(МакС5);
			НомСтр=НомСтр+1;
		КонецЦикла;
		
		макС5 = Макет.ПолучитьОбласть("С5");
		Для а=НомСтр по 9 Цикл 
			ТабДок.Вывести(МакС5);
		КонецЦикла;
		
		МакПодвал = макет.ПолучитьОбласть("Подвал");
		
		//+Lexx - Выведем QR-код Юралс
		Обр = ОБработки.ПечатьQRКода.Создать();
		Обр.ВывестиQRКодЮралс(Ссылка.ТС,Ссылка.Водитель,Ссылка,МакПодвал,105,1);
		
		
		МакПодвал.Параметры.Заполнить(ТблСтр);
		ТабДок.Вывести(МакПодвал);
		
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		МакПодвал = макет.ПолучитьОбласть("Зап_Обор");
		МакПодвал.Параметры.Заполнить(ТблСтр);
		ТабДок.Вывести(МакПодвал);
		
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ПолеСлева = 0;
		ТабДок.ПолеСправа = 0;
		ТабДок.ИмяПараметровПечати = "РемонтныйЛист";
		
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Ложь;
		ТабДок.ТолькоПросмотр = Ложь;
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.Показать("РемонтныйЛист");
		Возврат ТабДок;
		
	КонецФункции
		
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если ОстатокТопливаВыезд = 0 и глОбщий.ЭтоПрицеп(ТС) = Ложь Тогда
			ТекстПредупреждения = "Не указано количество топлива в баке при заезде на ремонт!
									|Печатная форма сформирована не будет!";
			Предупреждение(ТекстПредупреждения);
			Возврат;
		КонецЕсли;	
		
		//+Lexx от 07.12.2017
		Если уатОбработчикиПодписокНаСобытия.НайтиПутевойЛист(Ссылка) Тогда Возврат; КонецесЛИ;
		//-Lexx от 07.12.2017
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") 
			или ТипЗнч(НазваниеМакета) = Тип("ХранилищеЗначения") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
				ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
				Если ОбъектВнешнейФормы = Неопределено Тогда
					Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
					Возврат;
				КонецЕсли;	
				ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ИНаче
				ДвоичныеДанные = НазваниеМакета.Получить();
			КонецеСЛИ;
			
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
		Иначе
			Если НазваниеМакета = "ОС3" Тогда
				ТабДокумент = ПечатьОС3();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли 	НазваниеМакета = "Акт" Тогда
				ТабДокумент = ПечатьАкта();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли 	НазваниеМакета = "уатМ8" Тогда
				ТабДокумент = ПечатьЛимитноЗаборнаяКарта("уатМ8");
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли 	НазваниеМакета = "РемонтныйЛист" Тогда
				ТабДокумент = ПечатьОТК();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
#КонецЕсли

// Функция рассчитывает доплаты (за ночные и прочие) к з/п по пут. листу
//Функция вызывается из документа "уатПутевойЛист" при выборе действия расчета. 
//
//докПЛ - объект путевого листа
//вхТС - ТС, ссылка справочника ОС , для которого рассчитываем расход
//вхГСМ - ГСМ, ссылка справочника Номенклатура, для которого рассчитываем расход
//
//
//
//------------------ Описание алгоритмов-------------------------------------------------
//Для автобусов нормируемое значение расхода топлива рассчитывается по следующему соотношению:
//	Qн = 0,01 x Hs x S x (1 + 0,01 x D) + Нот x Т,             (2)
//где:
//Qн - нормативный расход топлива, литры;
//Hs - транспортная норма расхода топлива на пробег автобуса, л/100 км с учетом нормируемой по классу и назначению
//автобуса загрузкой пассажиров);
//S - пробег автобуса, км;
//Нот - норма расхода топлива при использовании штатных независимых отопителей на работу отопителя (отопителей), л/час;
//Т - время работы автомобиля с включенным отопителем, час;
//D - поправочный коэффициент (суммарная относительная надбавка или снижение) к норме в процентах.
//
//======================================================================================================
//
//Для грузовых бортовых автомобилей и автопоездов нормируемое значение расхода топлива рассчитывается
//по следующему соотношению:
//	Qн = 0,01 x (Hsan x S + Hw x W) x (1 + 0,01 x D),          (3)
//где:
//Qн - нормативный расход топлива, литры;
//S - пробег автомобиля или автопоезда, км;
//Hsan - норма расхода топлива на пробег автомобиля или автопоезда в снаряженном состоянии без груза:
//Hsan = Hs + Hg x Gпр, л/100 км, где
//Hs - базовая норма расхода топлива на пробег автомобиля (тягача) в снаряженном состоянии, л/100 км
//(Hsan = Hs, л/100 км, для одиночного автомобиля, тягача);
//Hg - норма расхода топлива на дополнительную массу прицепа или полуприцепа, л/100 т.км;
//Gпр - собственная масса прицепа или полуприцепа, т;
//Hw - норма расхода топлива на транспортную работу, л/100 т.км,
//W - объем транспортной работы, т.км: W = Gгр x Sгр (где Gгр - масса груза, т; Sгр - пробег с грузом, км);
//D - поправочный коэффициент (суммарная относительная надбавка или снижение) к норме в процентах.
//
//======================================================================================================
//
//Для автомобилей-самосвалов и самосвальных автопоездов нормируемое значение расхода топлива рассчитывается
//по следующему соотношению:
//	Qн = 0,01 x Hsanc x S x (1 + 0,01 x D) + Hz x Z,           (4)
//где:
//Qн - нормативный расход топлива, литры;
//S - пробег автомобиля-самосвала или автопоезда, км;
//Hsanc - норма расхода топлива автомобиля-самосвала или самосвального автопоезда:
//Hsanc = Hs + Hw x (Gпр + 0,5 x q), л/100 км, где
//Hs - базовая норма расхода топлива автомобиля-самосвала в снаряженном состоянии без груза или транспортная норма
//с учетом транспортной работы с коэффициентом загрузки 0,5 л/100 км;
//Hw - норма расхода топлива на транспортную работу автомобиля-самосвала (если при расчете Нs не учтен коэффициент 0.5)
//и на дополнительную массу самосвального прицепа или полуприцепа, л/100 т.км;
//Gпр - собственная масса самосвального прицепа, полуприцепа, т;
//q - грузоподъемность прицепа, полуприцепа (0,5 х q - с коэффициентом загрузки 0,5), т;
//Hz - дополнительная норма расхода топлива на каждую ездку с грузом автомобиля-самосвала, автопоезда, л;
//Z - количество ездок с грузом за смену;
//D - поправочный коэффициент (суммарная относительная надбавка или снижение) к норме в процентах.
//
//======================================================================================================
//
//Нормативный расход топлива для спецавтомобилей, выполняющих основную работу в период стоянки, определяется следующим
//образом:
//	Qн = (0,01 x Hsc x S + Нт x Т) x (1 + 0,01 x D), литры     (5)
//где: Hsc - индивидуальная норма расхода топлива на пробег спецавтомобиля, л/100 км (в случаях, когда спецавтомобиль
//предназначен также для перевозки груза, индивидуальная норма рассчитывается с учетом выполнения транспортной работы:
//Hsc' = Hsc + Hw x W);
//S - пробег спецавтомобиля к месту работы и обратно, км;
//Нт - норма расхода топлива на работу специального оборудования, л/час или литры на выполняемую операцию
//(заполнение цистерны и т.п.);
//Т - время работы оборудования, час. или количество выполненных операций;
//D - суммарная относительная надбавка или снижение к норме, в процентах (при работе оборудования применяются
//только надбавки на работу в зимнее время и в горных местностях).
//
//======================================================================================================
//
//Нормативный расход топлива для спецавтомобилей, выполняющих основную работу в процессе передвижения, определяется
//следующим образом:
//	Qн = 0,01 x (Hsc x S' + Hs'' x S'') x (1 + 0,01 x D), литры (6)
//где: Hsc - индивидуальная норма расхода топлива на пробег спецавтомобиля, л/100 км;
//S' - пробег спецавтомобиля к месту работы и обратно, км;
//Hs'' - норма расхода топлива на пробег при выполнении специальной работы во время передвижения, л/100 км;
//S'' - пробег автомобиля при выполнении специальной работы при передвижении, км.
Процедура РасчетДоплатЗП(вхСотрудник, вхТарифыЗП, вхВидДоплаты )
	мТарифыДоплата = вхТарифыЗП.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", вхВидДоплаты));
	Для счТарифы = 0 По мТарифыДоплата.Количество() - 1 Цикл
		
		ТекСтрока = мТарифыДоплата[счТарифы];
		мВидНачисления = ТекСтрока.ВидНачисления;
		СтруктураОбластьДействия = Новый Структура("ТС", ТС);
		Если Не уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрока.ТарифЗП, Организация, СтруктураОбластьДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		мСумма = 0;
		
		Для Каждого ТекСтрокаИсточник Из мВидНачисления.БазовыеВидыРасчета Цикл
			мЗП = Зарплата.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			
			//просуммируем все начисления данного вида
			Для счЗП = 0 По мЗП.Количество() - 1 Цикл
				мСумма = мСумма + мЗП[счЗП].Сумма;
			КонецЦикла;	
		КонецЦикла;	
		
		мСуммаЗП = Окр(мСумма * ТекСтрока.ТарифЗП.Тариф / 100,2);
		
		Если мСуммаЗП > 0 Тогда
			НоваяСтрока 					= Зарплата.Добавить();
			НоваяСтрока.ВидНачисления 		= мВидНачисления;
			НоваяСтрока.Сотрудник 			= вхСотрудник;
			НоваяСтрока.Сумма 				= мСуммаЗП;
			НоваяСтрока.РучнойВвод 			= Ложь;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

// Функция рассчитывает начисление з/п по рем. листу
//
Процедура РасчетЗП() Экспорт
	
	//не удаляем вручную введенные начисления
	мЗП = Зарплата.НайтиСтроки(Новый Структура("РучнойВвод", Ложь));
	Для мСч = 0 По мЗП.Количество() - 1 Цикл
		Зарплата.Удалить(мЗП[мСч]);
	КонецЦикла;	
	
	Для Каждого ТекСтрока Из Исполнители Цикл
		
		мТарифы = уатОбщегоНазначения.уатНайтиТарифыЗП(ТекСтрока.Сотрудник, Дата);
		
		мВремяРаботы 		= 0;
		мГрузоподъемность 	= 0;
		мКлассГруза 		= 0;
		мРасстояниеГруз		= 0;
		
		//ищем сдельные тарифы от выработки
		мТарифыСдельные = мТарифы.НайтиСтроки(Новый Структура("ВидНачисления", ПланыВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт));
		
		Если мТарифыСдельные.Количество() = 0 Тогда
			Сообщить("Для сотрудника <" + ТекСтрока.Сотрудник + "> не задано ни одного тарифа с видом начисления <Оплата за ремонт>!");
		КонецЕсли;
		
		Для счТарифы = 0 По мТарифыСдельные.Количество() - 1 Цикл
			ТекСтрокаТарифыСдельные = мТарифыСдельные[счТарифы];
			СтруктураОбластьДействия = Новый Структура("ТС, ВидРемонта", ТС, ВидОбслуживания);
			Если НЕ уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрокаТарифыСдельные.ТарифЗП, Организация, СтруктураОбластьДействия) Тогда
				Продолжить;
			КонецЕсли;	
			
			//перевели в секунды
			мВремяВРемонте = ТекСтрока.ВремяРаботы - НачалоДня(ТекСтрока.ВремяРаботы);
			мТариф = уатОбщегоНазначения.уатРасчетСдельногоТарифаЗП(ТекСтрокаТарифыСдельные.ТарифЗП, мРасстояниеГруз, мВремяВРемонте  / 3600, мГрузоподъемность, мКлассГруза);
			
			мСумма 							= Окр(мВремяВРемонте  / 3600 * мТариф, 2);
			Если мСумма > 0 Тогда
				НоваяСтрока 				= Зарплата.Добавить();
				НоваяСтрока.ВидНачисления 	= ТекСтрокаТарифыСдельные.ВидНачисления;
				НоваяСтрока.Сотрудник 		= ТекСтрока.Сотрудник;
				НоваяСтрока.Сумма 			= мСумма;
				//НоваяСтрока.ПараметрВыработки = ТекСтрокаТарифыСдельные.ПараметрВыработки;
				НоваяСтрока.РучнойВвод 		= Ложь;
			КонецЕсли;	
			
		КонецЦикла;	
		
		//затем ищем прочие надбавки
		РасчетДоплатЗП(ТекСтрока.Сотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений);
		
	КонецЦикла;	
	
	Зарплата.Свернуть("Сотрудник, ВидНачисления, РучнойВвод", "Сумма");
КонецПроцедуры //РасчетЗП

// Функция рассчитывает сумму списанную по текущей строке документа
//
Функция РассчитатьСуммуСписания(ТекСтрока, ТабДвижений) Экспорт
	
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Номенклатура", ТекСтрока.Номенклатура);
	
	НаборСтрок = ТабДвижений.НайтиСтроки(СтруктПоиска);
	КолСписать = ТекСтрока.Количество;
	Сумма      = 0;
	
	Для Каждого СтрокаДвиж Из НаборСтрок Цикл
		Если КолСписать >= СтрокаДвиж.Количество Тогда
			Сумма      = Сумма      + СтрокаДвиж.Стоимость;
			КолСписать = КолСписать - СтрокаДвиж.Количество;
			СтрокаДвиж.Стоимость  = 0;
			СтрокаДвиж.Количество = 0;
		Иначе
			Если Не СтрокаДвиж.Количество = 0 Тогда
				СумСписать = Окр( СтрокаДвиж.Стоимость * КолСписать / СтрокаДвиж.Количество, 2, 1);
				Сумма      = Сумма + СумСписать;
				СтрокаДвиж.Стоимость  = СтрокаДвиж.Стоимость  - СумСписать;
				СтрокаДвиж.Количество = СтрокаДвиж.Количество - КолСписать;
			Иначе
				Сумма = Сумма + СтрокаДвиж.Стоимость;
				СтрокаДвиж.Стоимость = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // РассчитатьСуммуСписания()

Функция СнимаемыеАгрегаты()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СерияНоменклатуры КАК Агрегат,
	|	ВложенныйЗапрос.ВидАгрегата КАК ВидАгрегата,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК Состояние
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатРемонтныйЛистШины.СерияНоменклатуры КАК СерияНоменклатуры,
	|		0 КАК ВидАгрегата
	|	ИЗ
	|		Документ.уатРемонтныйЛист.Шины КАК уатРемонтныйЛистШины
	|	ГДЕ
	|		уатРемонтныйЛистШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|		И уатРемонтныйЛистШины.Ссылка = &ДокументСсылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатРемонтныйЛистАккумуляторы.СерияНоменклатуры,
	|		1 КАК ВидАгрегата
	|	ИЗ
	|		Документ.уатРемонтныйЛист.Аккумуляторы КАК уатРемонтныйЛистАккумуляторы
	|	ГДЕ
	|		уатРемонтныйЛистАккумуляторы.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|		И уатРемонтныйЛистАккумуляторы.Ссылка = &ДокументСсылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатРемонтныйЛистПрочиеАгрегаты.СерияНоменклатуры,
	|		2 КАК ВидАгрегата
	|	ИЗ
	|		Документ.уатРемонтныйЛист.ПрочиеАгрегаты КАК уатРемонтныйЛистПрочиеАгрегаты
	|	ГДЕ
	|		уатРемонтныйЛистПрочиеАгрегаты.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|		И уатРемонтныйЛистПрочиеАгрегаты.Ссылка = &ДокументСсылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&ДатаКон, ) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры");
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаКон"       , ДатаОкончания);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание,СтандартнаяОбработка)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаявкаНаРемонт") Тогда
		
		Дата = ТекущаяДата();
		Организация = Основание.Организация;
		ТС = Основание.ТС;
		ПричинаОбращения 	= Основание.ПричинаОбращения;
		ВидОбслуживания		= Основание.ВидОбслуживания;
		ДатаНачала			= Основание.ДатаНачала;
		ДатаОкончания		= Основание.ДатаОкончания;
		ДокументОснование   = Основание;
		ЗаявкаНаРемонт		= Основание;
		
		Для Каждого ТекСтрока из Основание.Работы Цикл
			НоваяСтрока				= Работы.Добавить();
			НоваяСтрока.Работа 		= ТекСтрока.Работа;
			НоваяСтрока.Количество 	= ТекСтрока.Количество;
			НоваяСтрока.ЗаявкаНаРемонт = Основание;			
		КонецЦикла;
		
		Для Каждого ТекСтрока из Основание.Материалы Цикл
			НоваяСтрока						= Материалы.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
			НоваяСтрока.Количество 			= ТекСтрока.Количество;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрока.ЕдиницаИзмерения;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатДТП") Тогда
		
		Дата = ТекущаяДата();
		Организация = Основание.Организация;
		ТС = Основание.ТС;
		ПричинаОбращения  = "После ДТП. Номер документа ДТП " + Основание.Номер;
		ДокументОснование = Основание;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Если у пользователя в регистре сведений "уатПраваИНастройки" для права "Пользователь является администратором системы" стоит "Истина", то никаких проверок делать не будем
	ФлагАдминистраторСистемы = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.ПользовательАдминистратор);
	Если ФлагАдминистраторСистемы Тогда
		Возврат;
	КонецЕсли;	
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьВреестре() Тогда
		Сообщить("Рем. лист есть реестре!");
		Отказ = Истина;
		Возврат;
	КонецеСЛИ;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение ТОгда
		логПроведен = глОбщий.ВремяМестоСобытия();
	ИНачеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ТОгда
		логПроведен = "Отменен : "+глОбщий.ВремяМестоСобытия();
	КонецЕСЛИ;
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения и ПометкаУдаления=Ложь ТОгда
		Если глОбщий.ПроверкаРазрешенияНаВыпискуПЛ(Организация,ДатаНачала,ТС,Отказ)=Истина ТОгда
			Возврат;
		КонецЕсли;
	КонецЕсЛИ;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, Права);
	
	Для а=-Работы.Количество()по -1 Цикл
		Если ЗначениеЗаполнено(Работы[-а-1].Работа)=Ложь Тогда
			Работы.Удалить(-а-1);
		КонецЕСЛИ;
		
	КонецЦикла;
	
	Если Работы.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ОсновнаяРабота)=Ложь ТОгда
			ОсновнаяРабота = Работы[0].Работа;
		КонецЕСЛи;
		
		СтрОсновнаяРабота = ОсновнаяРабота.ПолноеНаименование();
	ИНаче
		СтрОсновнаяРабота = СокрЛП(ВидОбслуживания);
	КонецЕСЛи;
	
	//Проверим кучу различных параметров по выписке ремонтного листа
	Отказ = глОбщий.ПроверкаРазрешенияНаВыпискуРЛ(Организация,Дата,ДатаНачала,ДатаОкончания,ТС,Работы,Ссылка);
	
КонецПроцедуры

Процедура РаботаВод()
	
	Если Исполнители.Количество() = 0 ТОгда Возврат; КонецеСЛИ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачалоПериода(уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря,День) Дн
	               |ИЗ
	               |	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
				   |ГДЕ ДатаКалендаря >= &Дт и ДатаКалендаря < &Дт1 и ВидДня = Значение(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ";
				   
				   
	тТ = Исполнители.Выгрузить();
	тт.Сортировать("Начало");
				   
	Запрос.УстановитьПараметр("Дт",НачалоМЕсяца(тт[0].Начало));
	Запрос.УстановитьПараметр("Дт1", КонецМЕсяца(тт[ТТ.Количество()-1].Начало)+1);
	тбПрз = Запрос.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = " SELECT
				   |  Док.СОтрудник,
				   |  ISNULL(тбСотр.ЭтоОклад,Ложь) ЭтоОклад,
				   |  ISNULL (ISNULL(
				   |               CASE WHEN тбТС.ЛинияПов = 0 THEN тбТС.Линия
				   |               ELSE тбТС.Линия *(1 - ISNULL(тбКадр.Должность.ПовТариф,0))+тбТС.ЛинияПов* ISNULL(тбКадр.Должность.ПовТариф,0) END,
				   |               CASE WHEN тбМод.ЛинияПов = 0 THEN тбМод.Линия
				   |               ELSE тбМод.Линия*(1 - ISNULL(тбКадр.Должность.ПовТариф,0))+тбМод.ЛинияПов*ISNULL(тбКадр.Должность.ПовТариф,0) END),
				   |               0) Линия,
				   |  ISNULL (ISNULL(тбТС.Разрыв,тбМод.Разрыв),0) Разрыв,
				   |  ISNULL (ISNULL(
				   |               CASE WHEN тбТС.ЛинияПов = 0 THEN тбТС.Ремонт
				   |               ELSE тбТС.Ремонт *(1 - ISNULL(тбКадр.Должность.ПовТариф,0))+тбТС.ЛинияПов* ISNULL(тбКадр.Должность.ПовТариф,0) END,
				   |               CASE WHEN тбМод.ЛинияПов = 0 THEN тбМод.Ремонт
				   |               ELSE тбМод.Ремонт*(1 - ISNULL(тбКадр.Должность.ПовТариф,0))+тбМод.ЛинияПов*ISNULL(тбКадр.Должность.ПовТариф,0) END),
				   |               0) Ремонт
				   | 
				   | FROM (SELECT DISTINCT Сотрудник FROM Документ.уатРемонтныйЛист.Исполнители Т WHERE Т.Ссылка = &Сс )  Док
				   | LEFT OUTER JOIN РегистрСведений.ТарифыТСнаЗП.СрезПоследних(&Дт,Модель = &ТС) тбТС ON Истина
				   | LEFT OUTER JOIN РегистрСведений.ТарифыТСнаЗП.СрезПоследних(&Дт,Модель = &Мод) тбМод ON Истина
				   | LEFT OUTER JOIN РегистрСведений.уатТарифыСотрудников.СрезПоследних(&Дт,Сотрудник в (&МасСотр) ) тбСотр ON тбСотр.Сотрудник = Док.Сотрудник
				   | LEFT OUTER JOIN РегистрСведений.уатСведенияОСотрудниках.СрезПоследних(&Дт,Сотрудник в (&МасСотр) ) тбКадр ON тбКадр.Сотрудник = Док.Сотрудник
				   | ";
				   запрос.УстановитьПараметр("сс",Ссылка);
				   запрос.УстановитьПараметр("Дт",КонецДня(Дата));
				   запрос.УстановитьПараметр("ТС",ТС);
				   запрос.УстановитьПараметр("Мод",ТС.Модель);
				   Запрос.УстановитьПараметр("МасСотр",Исполнители.ВыгрузитьКолонку("Сотрудник"));
				   
	Тбл = Запрос.Выполнить().Выгрузить();
	
   Рег = Движения.РаботаВодителей;
   Рег.Очистить();
   Рег.Записывать = Истина;
   
   ТекВР = ПланыВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт;
   ТекТариф = Тбл[0].Ремонт;
   
   Для каждого Стр из Исполнители Цикл
	   
	 	Зап = Рег.Добавить();
		Зап.Период = дата;
		
		Зап.Водитель = Стр.Сотрудник;
		Зап.ВидРасчета = ТекВР;
		Зап.ПериодРаботы = НачалоМесяца(Стр.Начало);
		Зап.ДатаРаботы = Стр.Начало;
		Зап.Тс = ТС;
		
		Зап.Количество = (Стр.ВремяРаботы - Дата(1,1,1))/3600;
		
		
		//По окладникам нет суммы
		С = ТБл.Найти(Стр.Сотрудник,"Сотрудник");
		ЕСли С<>Неопределено ТОгда
			Если С.ЭтоОклад ТОгда Продолжить; КонецеСЛИ;
		КонецесЛИ;
		
		Зап.сумма = Зап.Количество * ТекТариф;
		Зап.Тариф = ТекТариф;
		
		Если тбПрз.Найти(НачалоДня(Стр.Начало),"Дн")<>Неопределено ТОгда
			ЗапПрз = Рег.Добавить();
			ЗаполнитьЗначенияСвойств(ЗапПрз,Зап,,"ВидДвижения,Регистратор");
			Зап.ВидРасчета = ПланыВидовРасчета.уатОсновныеНачисления.ДоплатаЗаПраздничныеИВыходные;
		КонецЕСЛИ;
		

	КонецЦиклА;
				   
	
КонецПроцедуры


// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатРемонтныйЛист.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РаботаВод();
	
	Если Выполнен тогда
		
		//Проверка на наличие агрегатов на ТС
		тблСнимаемыеАгрегаты = СнимаемыеАгрегаты();
		Для Каждого ТекСтрокаАгрегат Из тблСнимаемыеАгрегаты Цикл
			Если ТекСтрокаАгрегат.Состояние = NULL ИЛИ ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.Снято Тогда
				Если ТекСтрокаАгрегат.ВидАгрегата = 0 Тогда
					Сообщить("Шина " + ТекСтрокаАгрегат.Агрегат + " не установлена на ТС!", СтатусСообщения.Внимание);
				ИначеЕсли ТекСтрокаАгрегат.ВидАгрегата = 1 Тогда
					Сообщить("Аккумулятор " + ТекСтрокаАгрегат.Агрегат + " не установлен на ТС!", СтатусСообщения.Внимание);
				Иначе
					Сообщить("Агрегат " + ТекСтрокаАгрегат.Агрегат + " не установлен на ТС!", СтатусСообщения.Внимание);
				КонецЕсли;
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	
		// Отражение в разделах учета.
		уатПроведение.ОтразитьАгрегатыТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьПрохождениеТО(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьНоменклатуруТС(ДополнительныеСвойства, Движения, Отказ);
		Если ЗначениеЗаполнено(ЗаявкаНаРемонт) Тогда
			уатПроведение.ОтразитьЗаявкиНаРемонт(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатРемонтныйЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатРемонтныйЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Дата      = ТекущаяДата();
	Выполнен = Ложь;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если Выполнен Тогда
		СтруктураПолей = Новый Структура("ДатаОкончания");
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
		Если ДатаОкончания = ДатаНачала Тогда 
			СтрокаСообщения = "Дата и время начала ремонта не может равняться дате и времени окончания ремонта !";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьУстанавливаемые = Ложь;
	ЕстьСнимаемые       = Ложь;
	Для Каждого ТекСтрока ИЗ Шины Цикл
		ЕстьУстанавливаемые = ЕстьУстанавливаемые ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
		ЕстьСнимаемые       = ЕстьСнимаемые       ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЦикла;
	Если ЕстьУстанавливаемые И НЕ ЗначениеЗаполнено(СкладОтправитель) тогда
		СтрокаСообщения = "Не заполнено значение реквизита ""Склад отправитель"" на закладке ""Шины""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	Если ЕстьСнимаемые И НЕ ЗначениеЗаполнено(СкладПолучатель) тогда
		СтрокаСообщения = "Не заполнено значение реквизита ""Склад получатель"" на закладке ""Шины""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;		
	
	ЕстьУстанавливаемые = Ложь;
	ЕстьСнимаемые       = Ложь;
	Для Каждого ТекСтрока ИЗ Аккумуляторы Цикл
		ЕстьУстанавливаемые = ЕстьУстанавливаемые ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
		ЕстьСнимаемые       = ЕстьСнимаемые       ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЦикла;
	Если ЕстьУстанавливаемые И НЕ ЗначениеЗаполнено(СкладОтправитель) тогда
		СтрокаСообщения = "Не заполнено значение реквизита ""Склад отправитель"" на закладке ""Аккумуляторы""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	Если ЕстьСнимаемые И НЕ ЗначениеЗаполнено(СкладПолучатель) тогда
		СтрокаСообщения = "Не заполнено значение реквизита ""Склад получатель"" на закладке ""Аккумуляторы""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	ЕстьУстанавливаемые = Ложь;
	ЕстьСнимаемые       = Ложь;
	Для Каждого ТекСтрока ИЗ ПрочиеАгрегаты Цикл
		ЕстьУстанавливаемые = ЕстьУстанавливаемые ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
		ЕстьСнимаемые       = ЕстьСнимаемые       ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЦикла;
	Если ЕстьУстанавливаемые И НЕ ЗначениеЗаполнено(СкладОтправитель) тогда
		СтрокаСообщения = "Не заполнено значение реквизита ""Склад отправитель"" на закладке ""Прочие агрегаты""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	Если ЕстьСнимаемые И НЕ ЗначениеЗаполнено(СкладПолучатель) тогда
		СтрокаСообщения = "Не заполнено значение реквизита ""Склад получатель"" на закладке ""Прочие агрегаты""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис тогда
		ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");
	КонецЕсли;
	
	//дубли строк шин, аккумуляторов и прочих агрегатов
	тблШиныСвернутая = Шины.Выгрузить().Скопировать();
	тблШиныСвернутая.Свернуть("СерияНоменклатуры");
	Если тблШиныСвернутая.Количество() < Шины.Количество() Тогда
		СтрокаСообщения = "В табличной части ""Шины"" присутствуют строки с дублированием значения серии номенклатуры!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	тблАккумСвернутая = Аккумуляторы.Выгрузить().Скопировать();
	тблАккумСвернутая.Свернуть("СерияНоменклатуры");
	Если тблАккумСвернутая.Количество() < Аккумуляторы.Количество() Тогда
		СтрокаСообщения = "В табличной части ""Аккумуляторы"" присутствуют строки с дублированием значения серии номенклатуры!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	тблПрочиеСвернутая = ПрочиеАгрегаты.Выгрузить().Скопировать();
	тблПрочиеСвернутая.Свернуть("СерияНоменклатуры");
	Если тблПрочиеСвернутая.Количество() < ПрочиеАгрегаты.Количество() Тогда
		СтрокаСообщения = "В табличной части ""Прочие агрегаты"" присутствуют строки с дублированием значения серии номенклатуры!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	Если ВидОбслуживания.ИспользоватьВПланированииТО Тогда
		Префикс= "ТО-";
	ИНАче
		Префикс = "0";
	КонецеСЛИ;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

Функция ЕстьВреестре() Экспорт
	
		Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	реестрДокументовДоки.Ссылка
	               |ИЗ
	               |	Документ.реестрДокументов.Доки КАК реестрДокументовДоки
	               |ГДЕ
	               |	реестрДокументовДоки.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И реестрДокументовДоки.Док = &сс
	               |			И реестрДокументовДоки.Док <> ЗНАЧЕНИЕ(Документ.уатРемонтныйЛист.ПустаяСсылка)";
				   Запрос.УстановитьПараметр("сс",Ссылка);
				   Тбл = Запрос.Выполнить().Выгрузить();
				   
				   Возврат Тбл.Количество()>0;

	
КонецФункции

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();