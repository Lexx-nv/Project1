
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Ключ.Пустая() Тогда
		Дата = ТекущаяДата();
		Объект.ДатаСоздания = ТекущаяДата();
	КонецЕсли;
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	// в отличие от документа Заявка, где подсвечиваются выходные и праздники, здесь для удобства подсвечиваются те дни, в которые есть Заявка по строке
	УсловноеОформление.Элементы.Очистить();
	
	мНовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ДобавитьОформляемоеПоле(мНовыйЭлементУсловногоОформления.Поля, "СоставКоличествоОтмена");
	ДобавитьПростейшийОтбор(мНовыйЭлементУсловногоОформления.Отбор, "Объект.Состав.КоличествоОтмена", 0, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	мНовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЛососьСветлый);
	
	Для Каждого мЭлемент Из Объект.ТаблицаДней Цикл
		мНовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ДобавитьОформляемоеПоле(мНовыйЭлементУсловногоОформления.Поля, "Составд" + мЭлемент.День);
		ДобавитьПростейшийОтбор(мНовыйЭлементУсловногоОформления.Отбор, "Объект.Состав.НомерСтроки", мЭлемент.НомерСтрокиСостава, ВидСравненияКомпоновкиДанных.Равно);
		мНовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ТемноБирюзовый);
		//TODO: подумать как по всем остальным дням отрубить Доступность
		//мНовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПростейшийОтбор(пКоллекцияОтборов, пИмяПоляДанных, пЗначение, пВидСравнения)
    мЭлементОтбор = пКоллекцияОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    мЭлементОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пИмяПоляДанных);
	мЭлементОтбор.ПравоеЗначение = пЗначение;
	мЭлементОтбор.Использование = Истина;
	мЭлементОтбор.ВидСравнения = пВидСравнения;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОформляемоеПоле(пКоллекцияПолей, пИмяПоля)
    мПолеЭлемента = пКоллекцияПолей.Элементы.Добавить();
    мПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(пИмяПоля);
	мПолеЭлемента.Использование = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоставПриАктивизацииЯчейки(Элемент)
	Элемент.ВыделенныеСтроки.Очистить();	//устанавливает прозрачный фон, при этом ТекущаяCтрока доступна
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСостав(Команда)
	Если Объект.Состав.Количество() > 0 Тогда
		Объект.Состав.Очистить();
		Объект.ТаблицаДней.Очистить();
		Объект.ТаблицаИдентификаторов.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущуюСтроку(Команда)
	Если Элементы.Состав.ТекущиеДанные <> Неопределено Тогда
		мНомерСтроки = Элементы.Состав.ТекущиеДанные.НомерСтроки;
		Объект.Состав.Удалить(мНомерСтроки - 1);
		УдалитьИзТаблицыНоНомеруСтрокиСостава(Объект.ТаблицаДней, мНомерСтроки);
		УдалитьИзТаблицыНоНомеруСтрокиСостава(Объект.ТаблицаИдентификаторов, мНомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзТаблицыНоНомеруСтрокиСостава(пТаблица, пНомерСтрокиСостава)
	мОтборПоНомеруСтрокиСостава = Новый Структура("НомерСтрокиСостава", пНомерСтрокиСостава);
	мСтрокиТаблицы = пТаблица.НайтиСтроки(мОтборПоНомеруСтрокиСостава);
	Для Каждого мЭлемент Из мСтрокиТаблицы Цикл
		пТаблица.Удалить(мЭлемент);
	КонецЦикла;
	Для Каждого тСтрокаТаблицы Из пТаблица Цикл
		Если тСтрокаТаблицы.НомерСтрокиСостава > пНомерСтрокиСостава Тогда
			тСтрокаТаблицы.НомерСтрокиСостава = тСтрокаТаблицы.НомерСтрокиСостава - 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТипуТС(Команда)
	Если Не ЗначениеЗаполнено(Объект.Дата) или Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение( , "Проверьте Дату и Контрагента - эти поля должны быть заполнены!");
		Возврат;
	КонецЕсли;
	мМассивТиповТС = ПолучитьМассивТиповТСЗаМесяц(Объект.Дата, Объект.Контрагент);
	мСписокЗначений = Новый СписокЗначений();
	мСписокЗначений.ЗагрузитьЗначения(мМассивТиповТС);
	мОписаниеОповещенияВыборТипаТС = Новый ОписаниеОповещения("ОбработкаВыбораТипаТС", ЭтаФорма);
	ПоказатьВыборИзМеню(мОписаниеОповещенияВыборТипаТС, мСписокЗначений, Элементы.ЗаполнитьПоТипуТС);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаТС(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		ДополнитьСостав(пРезультат.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуИзМассива(пТаблицаЗначенийФормы, пМассивСтруктур)
	Для Каждого мЭлемент Из пМассивСтруктур Цикл
		мНоваяСтрока = пТаблицаЗначенийФормы.Добавить();
		ЗаполнитьЗначенияСвойств(мНоваяСтрока, мЭлемент);
	КонецЦикла;
КонецПроцедуры

// хотелось бы использовать контекстный вызов, т.к. на основании этих данных меняется УсловноеОформление, доступное только на сервере, но хранящееся на клиенте
//	чтобы не гонять несколько раз данные туда-сюда, условное оформление могло бы обновляться сразу здесь, тут же дополняться ТЧ Состав
//	НО!... Седая старуха, Злодейка-Судьба... В ХранилищеЗначений не поместить значение, так как это, видите ли, ДанныеФормы, а в них ХранилищеЗначений недоступно...
//	C'est la vie =D Итог - ХранилищаЗначений не используем - слишком много операций записи, много контекстных вызовов с одинаковыми данными, от которых хочу избавиться, ибо будет тормозить
&НаСервере
Процедура ДополнитьСостав(пТипТС)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|//сначала все данные за месяц
	|	АВТОНОМЕРЗАПИСИ() КАК ИдентификаторГруппы,
	|	ДополнительныеСведенияЗаявокОбороты.Период КАК День,
	|	СведенияРасширенные.ТипТС,
	|	СведенияРасширенные.ЦехМаршрут,
	|	ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки,
	|	СведенияРасширенные.ВремяПодачи,
	|	ДополнительныеСведенияЗаявокОбороты.КоличествоТСОборот КАК КоличествоОтмена
	|ПОМЕСТИТЬ ДанныеДляОтмены
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок.Обороты(НАЧАЛОПЕРИОДА(&ДатаОтчета, МЕСЯЦ), КОНЕЦПЕРИОДА(&ДатаОтчета, МЕСЯЦ), День) КАК ДополнительныеСведенияЗаявокОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДополнительныеСведенияЗаявок КАК СведенияРасширенные
	|	ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = СведенияРасширенные.ИдентификаторСтрокиЗаявки И ДополнительныеСведенияЗаявокОбороты.Период = СведенияРасширенные.Период
	|ГДЕ
	|	ДополнительныеСведенияЗаявокОбороты.КоличествоТСОборот > 0
	|	И СведенияРасширенные.ТипТС = &ТипТС
	|	И ВЫБОР КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ СведенияРасширенные.Контрагент = &Контрагент КОНЕЦ
	|;
	|//	получим групповой идентификатор - уникальный для каждого набора (ТипТС, ЦехМаршрут, ВремяПодачи)
	|ВЫБРАТЬ
	|	МИНИМУМ(ИдентификаторГруппы) КАК ГрупповойИдентификатор,
	|	ДанныеДляОтмены.ТипТС,
	|	ДанныеДляОтмены.ЦехМаршрут,
	|	ДанныеДляОтмены.ВремяПодачи
	|ПОМЕСТИТЬ ГрупповыеИдентификаторы
	|ИЗ ДанныеДляОтмены КАК ДанныеДляОтмены
	|СГРУППИРОВАТЬ ПО 
	|	ДанныеДляОтмены.ТипТС,
	|	ДанныеДляОтмены.ЦехМаршрут,
	|	ДанныеДляОтмены.ВремяПодачи
	|;
	|//теперь есть групповой признак, по которому можно определить - началась ли новая группа или нет...
	|ВЫБРАТЬ
	|	ГрупповыеИдентификаторы.ГрупповойИдентификатор КАК ГрупповойИдентификатор,
	|	ДЕНЬ(ДанныеДляОтмены.День) КАК День,	//TODO: День как день... только ты почему-то грустишь... =D (С) Минутка смеха. Удалить T0D0 когда надоест
	|	ДанныеДляОтмены.ТипТС,
	|	ДанныеДляОтмены.ЦехМаршрут,
	|	ДанныеДляОтмены.ВремяПодачи,
	|	ДанныеДляОтмены.ИдентификаторСтрокиЗаявки,
	|	ДанныеДляОтмены.КоличествоОтмена
	|ИЗ ДанныеДляОтмены КАК ДанныеДляОтмены
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГрупповыеИдентификаторы КАК ГрупповыеИдентификаторы
	|	ПО ДанныеДляОтмены.ТипТС = ГрупповыеИдентификаторы.ТипТС И ДанныеДляОтмены.ЦехМаршрут = ГрупповыеИдентификаторы.ЦехМаршрут И ДанныеДляОтмены.ВремяПодачи = ГрупповыеИдентификаторы.ВремяПодачи
	|УПОРЯДОЧИТЬ ПО ГрупповойИдентификатор ВОЗР");
	
	мЗапрос.УстановитьПараметр("ДатаОтчета", Объект.Дата);
	мЗапрос.УстановитьПараметр("ТипТС", пТипТС);
	мЗапрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	мРезультат = мЗапрос.Выполнить().Выгрузить();
	Если мРезультат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//так как мы получили множество строк, их необходимо свернуть по групповому агрегату ИдентификаторГруппы (ТипТС, ЦехМаршрут и ВремяПодачи) суммируя КоличествоОтмена.
	
	ГрупповойИдентификатор = "";
	мНоваяСтрока = Неопределено;
	мМассивДнейЗаявки = Новый Массив;
	мМассивИдентификаторовСтрокЗаявки = Новый Массив;
	мИтр = 1;
	Для Каждого мСтрокаРезультата Из мРезультат Цикл
		Если ГрупповойИдентификатор <> мСтрокаРезультата.ГрупповойИдентификатор Тогда
			//собранное поместим
			Если мНоваяСтрока <> Неопределено Тогда
				ПоместитьДанныеВТаблицы(мМассивИдентификаторовСтрокЗаявки, мМассивДнейЗаявки, Объект.Состав.Количество());	//поместим в конец
			КонецЕсли;
			мИтр = мИтр + 1;
			ГрупповойИдентификатор = мСтрокаРезультата.ГрупповойИдентификатор;
			мНоваяСтрока = Объект.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, мСтрокаРезультата);
			мМассивДнейЗаявки.Очистить();
			мМассивИдентификаторовСтрокЗаявки.Очистить();
		КонецЕсли;
		ДобавитьВМассивСКонтролемУникальности(мМассивИдентификаторовСтрокЗаявки, мСтрокаРезультата.ИдентификаторСтрокиЗаявки);
		ДобавитьВМассивСКонтролемУникальности(мМассивДнейЗаявки, мСтрокаРезультата.День);
	КонецЦикла;
	ПоместитьДанныеВТаблицы(мМассивИдентификаторовСтрокЗаявки, мМассивДнейЗаявки, Объект.Состав.Количество());	//поместим в конец
	
	//обновим условное оформление
	УстановитьУсловноеОформление();
	Возврат;
КонецПроцедуры

&НаСервере
Процедура ПоместитьДанныеВТаблицы(пМассивИдентификаторовСтрокЗаявки, пМассивДнейЗаявки, пНомерСтрокиСостава)
	Для Каждого мЭлемент Из пМассивДнейЗаявки Цикл
		мНоваяСтрока = Объект.ТаблицаДней.Добавить();
		мНоваяСтрока.НомерСтрокиСостава = пНомерСтрокиСостава;
		мНоваяСтрока.День = мЭлемент;
	КонецЦикла;
	Для Каждого мЭлемент Из пМассивИдентификаторовСтрокЗаявки Цикл
		мНоваяСтрока = Объект.ТаблицаИдентификаторов.Добавить();
		мНоваяСтрока.НомерСтрокиСостава = пНомерСтрокиСостава;
		мНоваяСтрока.ИдентификаторСтрокиЗаявки = мЭлемент;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВМассивСКонтролемУникальности(пМассив, пЭлемент)
	Если пМассив.Найти(пЭлемент) = Неопределено Тогда
		пМассив.Добавить(пЭлемент);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуВМассивСтруктур(пТаблица)
	вМассив = Новый Массив;
	мСтрокаИменКолонок = "";
	Для Каждого мКолонка Из пТаблица.Колонки Цикл
		мСтрокаИменКолонок = мСтрокаИменКолонок + ", " + мКолонка.Имя;
	КонецЦикла;
	мСтрокаИменКолонок = Сред(мСтрокаИменКолонок, 2);
	
	Для Каждого мСтрока Из пТаблица Цикл
		мСтруктура = Новый Структура(мСтрокаИменКолонок);
		ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
		вМассив.Добавить(мСтруктура);
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивТиповТСЗаМесяц(пДата, пКонтрагент)
	мЗапрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиОбороты.ТипТС
	|ИЗ
	|	РегистрНакопления.Заявки.Обороты(НАЧАЛОПЕРИОДА(&ДатаОтчета, МЕСЯЦ), КОНЕЦПЕРИОДА(&ДатаОтчета, МЕСЯЦ), Период, Контрагент = &Контрагент) КАК ЗаявкиОбороты
	|ГДЕ (ЗаявкиОбороты.КоличествоТСОборот - ЗаявкиОбороты.КоличествоОтменаОборот) > 0");
	мЗапрос.УстановитьПараметр("ДатаОтчета", пДата);
	мЗапрос.УстановитьПараметр("Контрагент", пКонтрагент);
	
	мРезультат = мЗапрос.Выполнить().Выгрузить();
	Возврат мРезультат.ВыгрузитьКолонку("ТипТС");
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	Если Лев(Элемент.ТекущийЭлемент.Имя, 7) = "Составд" Тогда
		Если Элементы.Состав.ТекущиеДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "Состав", "")] Тогда
			Элементы.Состав.ТекущиеДанные.ДнейОтмены = Элементы.Состав.ТекущиеДанные.ДнейОтмены + 1;
		Иначе
			Элементы.Состав.ТекущиеДанные.ДнейОтмены = Элементы.Состав.ТекущиеДанные.ДнейОтмены - 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставКоличествоОтменаПриИзменении(Элемент)
	мОтборПоНомеруСтроки = Новый Структура("НомерСтрокиСостава", Элементы.Состав.ТекущиеДанные.НомерСтроки);
	мМассивСтрокПоИдентификаторам = Объект.ТаблицаИдентификаторов.НайтиСтроки(мОтборПоНомеруСтроки);
	//Макс(КолвоОтмена, 0) не добавил, т.к. неотрицательное значение типа Число (unsigned)
	Элементы.Состав.ТекущиеДанные.КоличествоОтмена = Мин(Элементы.Состав.ТекущиеДанные.КоличествоОтмена, мМассивСтрокПоИдентификаторам.Количество());
КонецПроцедуры
