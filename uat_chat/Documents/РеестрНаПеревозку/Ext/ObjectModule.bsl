Процедура ОчиститьПЛ(ДокМас=Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатПутевойЛистРабота.Ссылка,
	               |	уатПутевойЛистРабота.ИдСтроки,
				   |    ""Работа"" ИмяТаблицы
	               |ИЗ
	               |	Документ.уатПутевойЛист.Работа КАК уатПутевойЛистРабота
	               |ГДЕ
	               |	уатПутевойЛистРабота.Реестр = &сс
				   |  и ИдСтроки NOT IN (&Мас)
				   |
				   | UNION ALL
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатПутевойЛистРабота.Ссылка,
	               |	уатПутевойЛистРабота.ИдСтроки,
				   |    ""Задание"" ИмяТаблицы
	               |ИЗ
	               |	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистРабота
	               |ГДЕ
	               |	уатПутевойЛистРабота.Реестр = &сс
				   |  и ИдСтроки NOT IN (&МасКА)
				   |";
				   Запрос.УстановитьПараметр("сс",ссылка);
				   Если ДокМас=Неопределено ТОгда
						Запрос.УстановитьПараметр("Мас",999999999);   
						Запрос.УстановитьПараметр("МасКА",999999999);   
					ИНачеЕсли ЗначениеЗаполнено(Контрагент) ТОгда
						Запрос.УстановитьПараметр("Мас",999999999);   
						Запрос.УстановитьПараметр("МасКА",ДокМас);   
					ИНаче
						Запрос.УстановитьПараметр("Мас",ДокМас);   
						Запрос.УстановитьПараметр("МасКА",999999999);   
				   КонецеСЛИ;
				   
				   ТБл = Запрос.Выполнить().Выгрузить();

	Для каждого стр из Тбл Цикл
					   
		Обк = Стр.ссылка.ПолучитьОбъект();
		МАс = Обк[Стр.ИмяТаблицы].НайтиСтроки(Новый Структура("Реестр,идСтроки",Ссылка,Стр.ИдСтроки));
		ДЛя каждого Эл из Мас Цикл
			Обк[Стр.ИмяТаблицы].Удалить(Эл);
		КонецЦИкла;
		
		Состояние("Удалена строка из "+Обк);
		Если Обк.Проведен ТОгда
			Обк.Записать(РежимЗаписиДокумента.Проведение);
		ИНаче
			Обк.Записать(РежимЗаписиДокумента.Запись);
		КонецеСЛИ;
		
	КонецЦикла;			   
	
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеЗаполнено(Контрагент) и ЗначениеЗаполнено(Подразделение) ТОгда
		Сообщить("Нельзя выбирать контрагента и подразделение одновременно в одном документе!");
		Отказ=Истина;
		Возврат;
	КонецЕСЛИ;
	
	Если ЭтоНовый() Тогда
		Создал = ПараметрыСеанса.ТекущийПользователь;
	КонецЕСЛИ;
	
	Если (РежимЗаписи = РежимЗаписиДокумента.Запись и ПометкаУдаления) или
		 (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) ТОгда
		ОчиститьПЛ();	
	КонецеСЛИ;
	
	//Проверим строку на уникальность!
	Если Задание.Количество()<>0 Тогда
		Т=Задание.Выгрузить(,"ИдСтроки");
		Т.Сортировать("ИдСтроки Desc");
		М=Т[0].ИдСтроки;
		Для каждого Стр из Задание Цикл
			Если Стр.ИдСтроки = 0 Тогда
				М=М+1;
				Стр.ИдСтроки = М;
			КонецЕСЛИ;
		КонецЦикла;
		
		Т = Задание.Выгрузить(,"ИдСтроки");
		Т.Колонки.Добавить("Инд");
		Т.ЗаполнитьЗначения(1,"инд");
		Т.Свернуть("ИдСтроки","инд");
		Для каждого стр из Т Цикл
			Если Стр.Инд<>1 ТОгда
				Сообщить("Ошибка уникальности строки!");
				Отказ = Истина;
				ВозвраТ;
			КонецЕСЛИ;
		КонецЦикла;
	КонецЕСЛИ;
	
КонецПроцедуры

Процедура ПровестиРаботаТС(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |    РеестрНаПеревозкуПЛ.ПутевойЛист.Дата Период,
				   |    Значение(ВидДвиженияНакопления.Приход) ВидДвижения,
	               |	CASE WHEN Ссылка.ОбъектСтроительства = Значение(Справочник.уатОбъектыСтроительства.ПустаяСсылка) THEN РеестрНаПеревозкуПЛ.Ссылка.Контрагент ELSE NULL END Контрагент,
	               |	CASE WHEN Ссылка.ОбъектСтроительства = Значение(Справочник.уатОбъектыСтроительства.ПустаяСсылка) THEN РеестрНаПеревозкуПЛ.ЦехКонтрагента ELSE NULL END ЦехКонтрагента,
	               |	CASE WHEN Ссылка.ОбъектСтроительства = Значение(Справочник.уатОбъектыСтроительства.ПустаяСсылка) THEN 1 ELSE 0 END Талон,
	               |	РеестрНаПеревозкуПЛ.ПутевойЛист,
	               |	РеестрНаПеревозкуПЛ.ИдСтроки,
				   |	РеестрНаПеревозкуПЛ.КоличествоЧасов,
				   |	РеестрНаПеревозкуПЛ.ПутевойЛист.ТранспортноеСредство ТС,
	               |	РеестрНаПеревозкуПЛ.Расстояние*КоличествоЕздок ПробегСдел,
				   |	РеестрНаПеревозкуПЛ.Объем,
				   |	РеестрНаПеревозкуПЛ.КоличествоТонн Тонны,
				   |	РеестрНаПеревозкуПЛ.КоличествоТонн*РеестрНаПеревозкуПЛ.Расстояние*КоличествоЕздок ТнКм,
				   |	РеестрНаПеревозкуПЛ.КоличествоЕздок Ездки,
	               |	РеестрНаПеревозкуПЛ.Ссылка.Услуга Номенклатура,
	               |	РеестрНаПеревозкуПЛ.Ссылка.Груз,
	               |	РеестрНаПеревозкуПЛ.Ссылка.Подразделение,
	               |	РеестрНаПеревозкуПЛ.Ссылка.ОбъектСтроительства Объект
	               |ИЗ
	               |	Документ.РеестрНаПеревозку.Задание КАК РеестрНаПеревозкуПЛ
	               |ГДЕ
	               |	РеестрНаПеревозкуПЛ.Ссылка = &сс";
				   Запрос.УстановитьПараметр("сс",ссылка);
				   
				Движения.РаботаТС.Загрузить(Запрос.Выполнить().Выгрузить());
				Движения.РаботаТС.Записать();
	
			КонецПроцедуры
			
Процедура ПровестиРаботаВодителей(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |    РеестрНаПеревозку.Ссылка Регистратор,	
				   |    РеестрНаПеревозку.Дата Период,	
				   |    РеестрНаПеревозку.Дата ДатаРаботы,	
				   |    НачалоПериода(РеестрНаПеревозку.Дата,Месяц) ПериодРаботы,	
				   |    Значение(ПланВидовРасчета.уатОсновныеНачисления.СдельнаяОплата) ВидРасчета,	
	               |	CASE WHEN РеестрНаПеревозку.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка) THEN РеестрНаПеревозку.Подразделение ELSE Контрагент END Контрагент,
	               |	CASE WHEN РеестрНаПеревозку.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка) THEN РеестрНаПеревозку.ОбъектСтроительства ELSE РеестрНаПеревозкуЗадание.ЦехКонтрагента END ЦехКонтрагента,
	               |	РеестрНаПеревозку.Услуга Номенклатура,
	               |	РеестрНаПеревозкуЗадание.ПутевойЛист.Водитель1 Водитель,
	               |	РеестрНаПеревозкуЗадание.ПутевойЛист КПутевомуЛисту,
	               |	РеестрНаПеревозкуЗадание.ПутевойЛист.ТранспортноеСредство ТС,
	               |	ISNULL(ГруппыДорогМодели.Тариф,0)*60/CASE WHEN ISNULL(ГруппыДорогМодели.НормаВремени,0)<>0 THEN ГруппыДорогМодели.НормаВремени ELSE 1 END тариф,
	               |	ISNULL(СпособыПогрузкиРазгрузкиМодели.Тариф,0) тарифПР,
	               |	РеестрНаПеревозкуЗадание.КоличествоТонн*Расстояние*ISNULL(ГруппыДорогМодели.Тариф,0)+
				   |    РеестрНаПеревозкуЗадание.КоличествоТонн*ISNULL(СпособыПогрузкиРазгрузкиМодели.Тариф,0) Сумма,
				   
				   |    CASE WHEN Ссылка.ГруппаДорог.Скорость <> 0 
			   		|        THEN (Расстояние * КоличествоЕздок * 2) / Ссылка.ГруппаДорог.Скорость + СпособыПогрузкиРазгрузкиМодели.НормаВремени * КоличествоЕздок 
			   		|		ELSE 0 END НормаЧасовПоСделке
				   
	               |ИЗ
	               |	Документ.РеестрНаПеревозку.Задание КАК РеестрНаПеревозкуЗадание
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрНаПеревозку КАК РеестрНаПеревозку
	               |			ПО РеестрНаПеревозкуЗадание.Ссылка = РеестрНаПеревозку.Ссылка и РеестрНаПеревозку.Ссылка = &сс
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДорог.Модели КАК ГруппыДорогМодели
	               |			ПО РеестрНаПеревозку.ГруппаДорог = ГруппыДорогМодели.Ссылка
				   | 			 и РеестрНаПеревозкуЗадание.ПутевойЛист.ТранспортноеСредство.Модель = ГруппыДорогМодели.Модель
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыПогрузкиРазгрузки.Модели КАК СпособыПогрузкиРазгрузкиМодели
	               |			ПО РеестрНаПеревозку.СпособПогрузки = СпособыПогрузкиРазгрузкиМодели.Ссылка
				   | 			 и РеестрНаПеревозкуЗадание.ПутевойЛист.ТранспортноеСредство.Модель = СпособыПогрузкиРазгрузкиМодели.Модель
                   |";
				   Запрос.УстановитьПараметр("сс",Ссылка);
				   ТБл = Запрос.Выполнить().Выгрузить();
				   ДЛя каждого стр из Тбл Цикл
					   Если Стр.Тариф = 0 ТОгда
						   Сообщить("НЕТ тарифа на Тн/км для "+Стр.тс);
						   //Отказ = Истина;
					   КонецеСЛИ;
					   Если Стр.ТарифПР = 0 ТОгда
						   Сообщить("НЕТ тарифа на ПРР для "+Стр.тс);
						   //Отказ = Истина;
					   КонецеСЛИ;
				   КонецЦикла;
				   
				   
				   Рег = Движения.РаботаВодителей;
				   Рег.Записывать = Истина;
				   Рег.Загрузить(ТБл);


КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		Обработал = ПараметрыСеанса.ТекущийПользователь;
		//ПровестиРаботаТС(Отказ);
		
		ПровестиРаботаВодителей(Отказ);
		
		ЧасыСдел = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПродолжительностьРабДняПриСделке);
		
		ОчиститьПЛ(Задание.ВыгрузитьКолонку("ИдСтроки"));
		Для каждого стр из Задание Цикл
			Обк = Стр.ПутевойЛист.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(Контрагент) ТОгда
				ОбкТаб = Обк.Задание;	
			ИНаче
				ОбкТаб = Обк.Работа;
			КонецЕСЛИ;
			
			Мас = ОбкТаб.НайтиСтроки(Новый Структура("Реестр,идСтроки",Ссылка,Стр.ИдСтроки));
			Если Мас.Количество()>1 ТОгда
				ДЛя а=1 по Мас.Количество()-1 Цикл
					ОбкТаб.Удалить(МАс[а]);
				КонецЦикла;
			ИНачеЕсли Мас.Количество()=0 ТОгда
				ТекСтр = ОбкТаб.Добавить();
			ИНАче
				ТекСтр = Мас[0];
			КонецеСЛИ;
			
			ТекСтр.КоличествоЕздок = Стр.КоличествоЕздок;
			ТекСтр.КоличествоКмГруз= Стр.Расстояние;
			ТекСтр.ОбъектСтроительства = Ссылка.ОбъектСтроительства;
			ТекСтр.Подразделение  = Ссылка.Подразделение;
			ТекСтр.КоличествоТонн = Стр.КоличествоТонн;
			ТекСтр.ИдСтроки = Стр.ИдСтроки;
			ТекСтр.Реестр   = ссылка;
			ТекСтр.ГруппаДорог   = ГруппаДорог;
			ТекСтр.Груз          = Груз;
			ТекСтр.Номенклатура = ССылка.Услуга;
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ТекСтр.Контрагент = Контрагент;
				ТекСтр.ЦехКонтрагента = Стр.ЦехКонтрагента;
				ТекСтр.Объем = Стр.Объем;
				ТекСтр.Услуга1 = 0;
			КонецеСЛИ;
			
			Состояние(Обк);
			Если Обк.Проведен ТОгда
				Обк.Записать(РежимЗаписиДокумента.Проведение);
			ИНаче
				Обк.Записать(РежимЗаписиДокумента.Запись);
			КонецеСЛИ;
		КонецЦИкла;
		
КонецПроцедуры
	
Функция СткШапка()
	
	Стк = Новый Структура;
	
	Грузополучатель = Контрагент;
	Грузоотправитель = Организация;
	
	// лицевая
	Стк.Вставить("Дата",Дата);
	Стк.Вставить("ТекДата",Формат(Дата,"ДФ=dd.MM.yyyy"));
	
	Стк.Вставить("ГрузополучательПредставление1",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель, Дата), "ПолноеНаименование,ИНН"));
	Стк.Вставить("ГрузополучательПредставление2",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузополучатель, Дата), "ЮридическийАдрес"));
	
	Стк.Вставить("ГрузоотправительПредставление1",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузоотправитель, Дата), "ПолноеНаименование,ИНН"));
	Стк.Вставить("ГрузоотправительПредставление2",ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Грузоотправитель, Дата), "ЮридическийАдрес"));
	
	Стк.Вставить("Груз", СокрлП(Груз));
	
	Стк.Вставить("АдресПогрузкиПредставление",СокрЛП(АдресОтправления));
	
	Стк.Вставить("ПеревозчикПредставление1",Стк.ГрузоотправительПредставление1);
	Стк.Вставить("ПеревозчикПредставление2",Стк.ГрузоотправительПредставление2);
	
	С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(Организация,АдресОтправления.Ответсвенный,Дата);
	Стк.Вставить("СдалФИО",С.Представление);
	Стк.Вставить("Сдал",""+С.Фамилия+" "+С.Имя+" "+С.Отчество);
	
	Выборка = Справочники.КонтактныеЛицаКонтрагентов.Выбрать(,Контрагент);
	Если Выборка.Следующий() Тогда
		Стк.Вставить("Принял",СокрлП(ВЫборка.Наименование));
		Стк.Вставить("ПринялДлж",СокрлП(ВЫборка.Должность));
		Стк.Вставить("ПринялДов",СокрлП(ВЫборка.Комментарий));
	КонецеСЛИ;
	
	Возврат Стк;
	
КонецФункции

// Формирует печатную форму транспортной накладной
//
Функция уатПечатьТранспортнаяНакладная(ТекСтрока,ТабДокумент=Неопределено) Экспорт
	
	Если ТипЗнч(ТабДокумент) <> Тип("ТабличныйДокумент") Тогда		
		ТабДокумент = Новый ТабличныйДокумент;
	КонецеСЛИ;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТранспортнаяНакладная";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект)  Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	
	
	ПутЛист = ТекСтрока.ПутевойЛист;
	СткШапка = СткШапка();
	ФИОВод = уатОбщегоНазначения.уатФИОФизЛица(ПутЛист.Водитель1.ФизЛицо);

	
	Макет = ПолучитьМакет("ТранспортнаяНакладная");
	ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
	ОбластьОборотная  = Макет.ПолучитьОбласть("Оборотная");
	
	// лицевая
	
	ОбластьЛицевая.Параметры.Заполнить(СткШапка);
	ОбластьЛицевая.Параметры.НомерТТН = "021/"+СокрлП(ПутЛист.Номер)+"-"+СокрлП(ТекСтрока.НомерСтроки);
	ОбластьЛицевая.Параметры.АдресРазгрузкиПредставление = ТекСтрока.ЦехКонтрагента;
	ОбластьЛицевая.Параметры.Объем = ""+ТекСтрока.ОБъем+" м3";
	ОбластьЛицевая.Параметры.Время = ТекСтрока.ВремяПрибытия;
	Если НЕ ФИОВод = Неопределено Тогда
		ОбластьЛицевая.Параметры.ВодительФИО = ФИОВод.Фамилия + " " + Лев(ФИОВод.Имя, 1) + "." + Лев(ФИОВод.Отчество, 1);
	КонецесЛИ;
	
	// оборотная
	ОбластьОборотная.Параметры.Заполнить(СткШапка);
	
	ОбластьОборотная.Параметры.ПеревозчикПредставление4 = "Путевой лист №" + ПутЛист.Номер+" от "+Формат(ПутЛист.Дата,"ДФ=dd.MM.yyyy")+" г.";
	
	Если НЕ ФИОВод = Неопределено Тогда
		ОбластьОборотная.Параметры.Водитель = ФИОВод.Фамилия + " " + ФИОВод.Имя + " " + ФИОВод.Отчество;
	КонецЕсли;
	
	ОбластьОборотная.Параметры.ТСХарактеристикиПредставление1 = СокрЛП(ПутЛист.ТранспортноеСредство);
	ОбластьОборотная.Параметры.ТСПредставление1 = "Гос.№ "+СокрЛП(ПутЛист.ТранспортноеСредство.ГосударственныйНомер);
	
	
	
	ТабДокумент.Вывести(ОбластьЛицевая);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ОбластьОборотная);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Возврат ТабДокумент;
КонецФункции	

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	ПРефикс ="0";
КонецПроцедуры




