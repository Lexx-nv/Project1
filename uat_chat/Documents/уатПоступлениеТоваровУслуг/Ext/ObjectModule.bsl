////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
												//полученное из константы.

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьПоступлениеТоваров()
		
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
		
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Номер,
		|	ПоступлениеТоваровУслуг.Дата,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Организация КАК Покупатель,
		|	ПоступлениеТоваровУслуг.СуммаДокумента,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.УчитыватьНДС,
		|	ПоступлениеТоваровУслуг.СуммаВключаетНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросПоТоварам.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапрос.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка КАК Метка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
		|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.Цена КАК Цена,
		|		СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
		|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС) КАК СуммаНДС,
		|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
		|		0 КАК Метка
		|	ИЗ
		|		Документ.уатПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		ПоступлениеТоваровУслуг.СтавкаНДС,
		|		ПоступлениеТоваровУслуг.Цена,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Содержание,
		|	ПоступлениеТоваровУслуг.Содержание,
		|   ПоступлениеТоваровУслуг.Номенклатура.Код,
		|	//ЕДИНИЦАИЗМЕРЕНИЯ
		|	ПоступлениеТоваровУслуг.Количество,
		|	ПоступлениеТоваровУслуг.Цена,
		|	ПоступлениеТоваровУслуг.Сумма,
		|	ПоступлениеТоваровУслуг.СуммаНДС,
		|	ПоступлениеТоваровУслуг.СтавкаНДС,
		|	ПоступлениеТоваровУслуг.НомерСтроки,
		|	1
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Метка,
		|	НомерСтроки";
		
		СтрЕдИзмерения = ?(Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено,"ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения, ",
																						   "ВЫБОР
																							|		КОГДА
																							|			ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
																							|		ТОГДА
																							|			ПоступлениеТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Представление
																							|		ИНАЧЕ
																							|			ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление
																							|	КОНЕЦ , ");

		ЗапросПоТоварам.Текст = СтрЗАменить(ЗапросПоТоварам.Текст,"//ЕДИНИЦАИЗМЕРЕНИЯ",СтрЕдИзмерения);
		ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
		Макет       = ПолучитьМакет("Накладная");
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Накладная");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Сумма    = 0;
		СуммаНДС = 0;
		
		Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар); //ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
			
			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПоступлениеТоваров()
	
	// Функция формирует табличный документ унифицированной формы ТОРГ-4
	// "Акт о приемке товара, поступившего без счета поставщика"
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма ТОРГ-4
	//
	Функция ПечатьТОРГ4()
		
		ТоварКод = "Код";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаДокументаСопровождения,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерДокументаСопровождения,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	ПоступлениеТоваровУслуг.Организация КАК Руководители,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Грузоотправитель,
		//|	ПоступлениеТоваровУслуг.Подразделение.Представление КАК ПредставлениеПодразделения,
		|	ПоступлениеТоваровУслуг.Подразделение,
		|	ПоступлениеТоваровУслуг.Склад,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
		|			ТОГДА 1
		|		ИНАЧЕ ПоступлениеТоваровУслуг.КратностьВзаиморасчетов
		|	КОНЕЦ КАК Кратность
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросПоТоварам.УстановитьПараметр("Курс",            ?(КурсВзаиморасчетов = 0, 1,КурсВзаиморасчетов));
		ЗапросПоТоварам.УстановитьПараметр("Кратность",       ?(КратностьВзаиморасчетов = 0,1,КратностьВзаиморасчетов));
		
		ЗапросПоТоварам.Текст = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "   КАК ТоварКод,
		|	ВложенныйЗапрос.Количество КАК КоличествоШтук,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмерения." + ?(Метаданные.НайтиПоПолномуИмени("Справочник.ЕдиницыИзмерения") = Неопределено,"Код","ЕдиницаПоКлассификатору.Код") + " КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Стоимость,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка       КАК Метка
		|
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.Цена        * &Курс / &Кратность  КАК Цена,
		|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
		|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки)       КАК НомерСтроки,
		|		0                                                  КАК Метка
		|	ИЗ
		|		Документ.уатПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		ПоступлениеТоваровУслуг.СтавкаНДС,
		|		ПоступлениеТоваровУслуг.Цена,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
		|
		|";
		ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
		
		Макет = ПолучитьОбщийМакет("ТОРГ4");
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_ТОРГ4";
		
		// Выводим общие реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);
		
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Шапка.Контрагент) Тогда
			СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
			ОбластьМакета.Параметры.ПредставлениеПоставщика       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
			ОбластьМакета.Параметры.ОписаниеПоставщика            = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			ОбластьМакета.Параметры.ПоставщикПоОКПО               = СведенияОПоставщике.КодПоОКПО;
		КонецЕсли;
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.НомерДокумента           = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
		Попытка
			ОбластьМакета.Параметры.ГрузополучательПоОКПО    = СведенияОПокупателе.КодПоОКПО;
		Исключение
		КонецПопытки;
		ОбластьМакета.Параметры.ФИОРуководителя          = Руководитель;
		Попытка
			ОбластьМакета.Параметры.ДолжностьРуководителя     = Руководители.РуководительДолжность;
		Исключение
		КонецПопытки;
		ОбластьМакета.Параметры.РеквизитыСопроводительногоДокумента = "сопроводительный документ № "
		+ Шапка.НомерДокументаСопровождения + " от "
		+ Формат(Шапка.ДатаДокументаСопровождения, "ДФ='дд ММММ гггг'");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 20;
		СтрокПодвала    = 7;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// инициализация итогов по странице
		ИтогоМестПоСтранице        = 0;
		ИтогоШтукПоСтранице        = 0;
		ИтогоМассаБруттоПоСтранице = 0;
		ИтогоМассаНеттоПоСтранице  = 0;
		ИтогоСтоимостьПоСтранице   = 0;
		
		// инициализация итогов по документу
		ИтогоМест        = 0;
		ИтогоШтук        = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСтоимость   = 0;
		Ном              = 0;
		
		// Выводим многострочную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
				
				ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМестПоСтранице        = 0;
				ИтогоШтукПоСтранице        = 0;
				ИтогоМассаБруттоПоСтранице = 0;
				ИтогоМассаНеттоПоСтранице  = 0;
				ИтогоСтоимостьПоСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
			Попытка
				ТекМассаНетто = ВыборкаСтрокТовары.ЕдиницаИзмерения.Вес * ВыборкаСтрокТовары.КоличествоШтук;
				ОбластьМакета.Параметры.МассаНетто = ТекМассаНетто;
			Исключение
				ТекМассаНетто = 0;
			КонецПопытки;
				
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Обновим итоги по странице
			ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТовары.КоличествоШтук;
			ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
			ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + ТекМассаНетто;
			ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;
			
			// Обновим итогов по документу
			ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТовары.КоличествоШтук;
			ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
			ИтогоМассаНетто  = ИтогоМассаНетто  + ТекМассаНетто;
			ИтогоСтоимость   = ИтогоСтоимость   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в общем
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтогоШтук        = ИтогоШтук;
		ОбластьМакета.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогоМассаНетто  = ИтогоМассаНетто;
		ОбластьМакета.Параметры.ИтогоСтоимость   = ИтогоСтоимость;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху = 0;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьТОРГ4()
	
	// Функция формирует табличный документ унифицированной формы М-4
	//
	// Параметры: 
	//  Нет.
	//
	// Возвращаемое значение:
	//  Табличный документ по форме М-4 (приходный ордер).
	//
	Функция ПечатьМ4()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",     Ссылка);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Дата КАК ДатаСоставления,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	ПоступлениеТоваровУслуг.Склад КАК МестоПриемки,
		|	ПоступлениеТоваровУслуг.Склад КАК СкладНаименование,
		|	ПоступлениеТоваровУслуг.Подразделение,
		|	ПоступлениеТоваровУслуг.Подразделение КАК ПредставлениеПодразделения,
		|	ПоступлениеТоваровУслуг.Контрагент.Код КАК ПоставщикКод,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
		|			ТОГДА 1
		|		ИНАЧЕ ПоступлениеТоваровУслуг.КратностьВзаиморасчетов
		|	КОНЕЦ КАК Кратность,
		|	ПоступлениеТоваровУслуг.УчитыватьНДС,
		|	ПоступлениеТоваровУслуг.СуммаВключаетНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросПоТоварам.УстановитьПараметр("Курс",            ?(КурсВзаиморасчетов = 0, 1,КурсВзаиморасчетов));
		ЗапросПоТоварам.УстановитьПараметр("Кратность",       ?(КратностьВзаиморасчетов = 0,1,КратностьВзаиморасчетов));
		
		ЗапросПоТоварам.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		//|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения." + ?(Метаданные.НайтиПоПолномуИмени("Справочник.ЕдиницыИзмерения") = Неопределено,"Код","ЕдиницаПоКлассификатору.Код") + " КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.КоличествоПринято,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Стоимость,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка КАК Метка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК КоличествоПринято,
		|		СУММА(ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность) КАК Цена,
		|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
		|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
		|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
		|		0 КАК Метка
		|	ИЗ
		|		Документ.уатПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.СтавкаНДС) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Метка,
		|	НомерСтроки";
		ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
		
		Макет = ПолучитьОбщийМакет("М4");
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_М4";
		
		// Выводим общие реквизиты шапки
		СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.НомерДокумента           = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок документа
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		СтрокНаСтранице = 24;
		СтрокШапки      = 9;
		СтрокПодвала    = 3;
		НомерСтраницы   = 1;
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоСуммаНДС    = 0;
		ИтогоВсегоСНДС   = 0;
		Ном              = 0;
		
		// Выводим многострочную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
				ТабДокумент.Вывести(ПодвалСтрок);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			ВсегоСНДС = (ВыборкаСтрокТовары.Стоимость
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));
			
			КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;
			СуммаНДС          = ВыборкаСтрокТовары.СуммаНДС / Шапка.Кратность;
			Цена              = (ВсегоСНДС - СуммаНДС) / КоличествоПринято;
			
			ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
			ОбластьМакета.Параметры.ВсегоСНДС         = ВсегоСНДС;
			ОбластьМакета.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
			ОбластьМакета.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакета.Параметры.Цена              = Цена;
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
			//+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
			+ ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
			ТабДокумент.Вывести(ОбластьМакета);
			
			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
			ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		
		ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
		ОбластьМакета.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
		ОбластьМакета.Параметры.ИтогоСуммаНДС    = ИтогоСуммаНДС;
		ОбластьМакета.Параметры.ИтогоВсегоСНДС   = ИтогоВсегоСНДС;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху         = 0;
		ТабДокумент.ПолеСлева          = 0;
		ТабДокумент.ПолеСнизу          = 0;
		ТабДокумент.ПолеСправа         = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьМ4()
	
	// Функция формирует табличный документ с печатной формой акта об
	// оказании услуг
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма акта
	//
	Функция ПечатьАктаОПолученииУслуг()
		
		ЗапросШапка = Новый Запрос;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	Контрагент КАК Получатель,
		|	Организация КАК Поставщик,
		|	Организация,
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросУслуги = Новый Запрос;
		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросУслуги.Текст =
		"ВЫБРАТЬ
		|	Номенклатура КАК ПростоНоменклатура,
		|	Содержание КАК Товар,
		|	Количество,
		|	Цена,
		|	Сумма,
		|	СтавкаНДС,
		|	СуммаНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
		|
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|";
		
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уэПоступлениеУслуг_Акт";
		Макет       = ПолучитьМакет("Акт");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Акт");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			
			ТабДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		Если ТаблицаУслуги <> Неопределено Тогда
			
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
			
		Иначе
			
			Сумма    = 0;
			СуммаНДС = 0;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.УчитыватьНДС Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьАктаОбОказанииУслуг()	
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
		Иначе
			
			// Получить экземпляр документа на печать
			Если НазваниеМакета = "Накладная" тогда
				
				// Управленческая печатная форма документа
				ТабДокумент = ПечатьПоступлениеТоваров();
				
			ИначеЕсли НазваниеМакета = "ТОРГ4" тогда
				
				// Унифицированная форма ТОРГ-4 (акт приемки товара без счета поставщика)
				ТабДокумент = ПечатьТОРГ4();
				
			ИначеЕсли НазваниеМакета = "М4" тогда
				
				// Унифицированная форма М-4 (приходный ордер)
				ТабДокумент = ПечатьМ4();
				
			ИначеЕсли НазваниеМакета = "Акт" тогда
				
				ТабДокумент = ПечатьАктаОПолученииУслуг();
				
			КонецЕсли;
			
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
			
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
		//
		// Возвращаемое значение:
		//  Структура, каждая строка которой соответствует одному из вариантов печати
		//  
		//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
			
		СтруктураМакетов = Новый Структура;
				
		Если Метаданные.ОбщиеМакеты.Найти("ТОРГ4") <> Неопределено тогда
			СтруктураМакетов.Вставить("ТОРГ4"    , "ТОРГ-4 (Акт о приемке товара без счета поставщика)");
		КонецЕсли;
		Если Метаданные.ОбщиеМакеты.Найти("М4") <> Неопределено тогда
			СтруктураМакетов.Вставить("М4"       , "М-4 (Приходный ордер)");
		КонецЕсли;
		СтруктураМакетов.Вставить("Накладная", "Приходная накладная");
		СтруктураМакетов.Вставить("Акт"      , "Акт о получении услуг");

		Возврат СтруктураМакетов ;
			
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	//используется в УЭ
	Процедура ЗаполнитьУслугиПоТЧ(ТЧ, СтруктураПараметров) Экспорт
		Если НЕ Услуги.Количество() = 0  Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Таб. часть Услуги не пустая. Очистить?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Услуги.Очистить();
			КонецЕсли;  
		КонецЕсли;
		флПоЗаказам = Ложь;
		СтруктураПараметров.Свойство("ПоЗаказам",флПоЗаказам);
		КурсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			НоваяСтрока = Услуги.Добавить();
			СтрокаСодержание = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТЧ.Услуга), "", Строка(СтрокаТЧ.Услуга))
			+ ?(СтруктураПараметров.ПоЗаказам, " Заказ :" + Строка(СтрокаТЧ.Заказ), "" ) 
			+ ?(СтруктураПараметров.ПоОперациям, " Операция :" + Строка(СтрокаТЧ. Операция), "" );
			НоваяСтрока.Номенклатура     = СтрокаТЧ.Услуга;
			НоваяСтрока.Содержание       = СтрокаСодержание;
			НоваяСтрока.Количество       = СтрокаТЧ.Количество;
			НоваяСтрока.СтавкаНДС        = СтрокаТЧ.СтавкаНДС;
			
			мСуммаРегл 					 = СтрокаТЧ.СуммаРегл - ?(СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСуммаРегл,
							                                                                     мВалютаРегламентированногоУчета,
				                                                                                 ВалютаДокумента,
																								 1,
																								 курсВалютыДокумента.Курс,
																								 1,
																								 курсВалютыДокумента.Кратность
																								 );
			
			НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаНДС,
							                                                                     мВалютаРегламентированногоУчета,
				                                                                                 ВалютаДокумента,
																								 1,
																								 курсВалютыДокумента.Курс,
																								 1,
																								 курсВалютыДокумента.Кратность
																								 );
			НоваяСтрока.Цена 			 = НоваяСтрока.Сумма/НоваяСтрока.Количество;
			
			Если флПоЗаказам тогда
				НоваяСтрока.Заказ		 = СтрокаТЧ.Заказ;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры


#КонецЕсли

Функция ПодготовитьТаблицуПредоставленныхИВыставленныхУслуг()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация) КАК ПолучательУслуг,
	|	уатПоступлениеТоваровУслугУслуги.НомерСтроки,
	|	уатПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
	|	уатПоступлениеТоваровУслугУслуги.Количество,
	|	уатПоступлениеТоваровУслугУслуги.Сумма,
	|	уатПоступлениеТоваровУслугУслуги.СтавкаНДС,
	|	уатПоступлениеТоваровУслугУслуги.СуммаНДС,
	|	уатПоступлениеТоваровУслугУслуги.Заказ КАК Заказ,
	|	уатПоступлениеТоваровУслугУслуги.Ссылка.Организация КАК Организация,
	|	уатПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатПоступлениеТоваровУслугУслуги.Ссылка КАК Регистратор,
	|	уатПоступлениеТоваровУслугУслуги.Ссылка.Дата КАК Период
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК уатПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	уатПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("Сделка");
	
	ЕстьВалютаУправленческогоУчета =  уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета");
	Если ЕстьВалютаУправленческогоУчета тогда
		Таблица.Колонки.Добавить("СуммаУпр");
		мВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		КурсУпр      = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр,Дата).Курс;
		КратностьУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр,Дата).Кратность;
	КонецЕсли;
	
	Таблица.Колонки.Добавить("СуммаРегл");
	Таблица.Колонки.Добавить("СуммаБезНДС");
	
	КурсВалютыРегламентногоУчета      = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета,Дата).Курс;
	КратностьВалютыРегламентногоУчета = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета,Дата).Кратность;
	
	мСпособВзаиморасчетов = Неопределено;
	Выполнить("мСпособВзаиморасчетов = уатОбщегоНазначения_уэ.ПолучитьВедениеВзаиморасчетовУЭ(ДоговорКонтрагента)");
	
	Для каждого ТекСтрока ИЗ Таблица цикл
		
		Если мСпособВзаиморасчетов = Перечисления.уатВедениеВзаиморасчетовПоДоговорам_уэ.ПоДоговоруВЦелом тогда
			ТекСтрока.Сделка = Неопределено;
		ИначеЕсли мСпособВзаиморасчетов = Перечисления.уатВедениеВзаиморасчетовПоДоговорам_уэ.ПоСчетам тогда
			ТекСтрока.Сделка = Сделка;
		Иначе
			ТекСтрока.Сделка = ТекСтрока.Заказ;
		КонецЕсли;
		
		ТекСтрока.СуммаБезНДС = ТекСтрока.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, ТекСтрока.СуммаНДС, 0);
		мСумма  = ТекСтрока.СуммаБезНДС + ТекСтрока.СуммаНДС;
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСумма,  ВалютаДокумента, 
			мВалютаРегламентированногоУчета,
			уатОбщегоНазначенияТиповые.уатКурсДокумента(ЭтотОбъект,мВалютаРегламентированногоУчета), 
			1,
			уатОбщегоНазначенияТиповые.уатКратностьДокумента(ЭтотОбъект,мВалютаРегламентированногоУчета),
			1);
			ТекСтрока.СуммаНДС =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,  ВалютаДокумента, 
			мВалютаРегламентированногоУчета,
			уатОбщегоНазначенияТиповые.уатКурсДокумента(ЭтотОбъект,мВалютаРегламентированногоУчета),
			1,
			уатОбщегоНазначенияТиповые.уатКратностьДокумента(ЭтотОбъект,мВалютаРегламентированногоУчета), 
			1);
		Иначе
			ТекСтрока.СуммаРегл = мСумма;
		КонецЕсли;	
		Если ЕстьВалютаУправленческогоУчета Тогда
			
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСумма, ВалютаДокумента, 
			мВалютаУпр,
			уатОбщегоНазначенияТиповые.уатКурсДокумента(ЭтотОбъект,мВалютаРегламентированногоУчета),
			КурсУпр,
			уатОбщегоНазначенияТиповые.уатКратностьДокумента(ЭтотОбъект,мВалютаРегламентированногоУчета), 
			КратностьУпр);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//проверка на ведение складского учета средствами УАТ
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		Сообщить("Для организации """ + Организация + """ отключена возможность ведения складского учета документами УАТ!", СтатусСообщения.Внимание);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Инициализация данных документа.
	Документы.уатПоступлениеТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	// Отражение в разделах учета.
	уатПроведение.ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	
	Если уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ") Тогда
		
		ТаблицаДвижений = ПодготовитьТаблицуПредоставленныхИВыставленныхУслуг();
		НаборДвижений = Движения.уатВыставленныеУслуги;
		НаборДвижений.Записывать = Истина;
		НаборДвижений.Загрузить(ТаблицаДвижений);

	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатПоступлениеТоваровУслуг.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатПоступлениеТоваровУслуг.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если НЕ ЭтоОбъединениеСБП И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
	   И НЕ ЗначениеЗаполнено(Сделка) тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение ""Сделка""",Отказ,Заголовок);
   	КонецЕсли;
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", , Отказ, Заголовок);
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", , Отказ, Заголовок);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатСчетНаОплатуПоставщика") Тогда	
		
		Дата 					= ТекущаяДата();
		Организация         	= ДанныеЗаполнения.Организация;
		Контрагент          	= ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента  	= ДанныеЗаполнения.ДоговорКонтрагента;
		СуммаДокумента      	= ДанныеЗаполнения.СуммаДокумента;
		УчитыватьНДС        	= ДанныеЗаполнения.УчитыватьНДС; 
		СуммаВключаетНДС    	= ДанныеЗаполнения.СуммаВключаетНДС;
		Комментарий         	= "Заполнен на основании " + ДанныеЗаполнения;
		ВалютаДокумента 		= ДанныеЗаполнения.ВалютаДокумента;
		КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= ДанныеЗаполнения.КурсВзаиморасчетов;
		ДокументОснование 		= ДанныеЗаполнения;
		Сделка 					= ДанныеЗаполнения;
		
		Для Каждого ТекСтрока из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока				 = Услуги.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.Содержание 	 = ТекСтрока.Содержание;
			НоваяСтрока.Количество 	 = ТекСтрока.Количество;
			НоваяСтрока.Цена 		 = ТекСтрока.Цена;
			НоваяСтрока.Сумма 		 = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС  	 = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 	 = ТекСтрока.СуммаНДС;
		КонецЦикла;
		
		Для Каждого ТекСтрока из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока					 = Товары.Добавить();
			НоваяСтрока.Номенклатура	 = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество 		 = ТекСтрока.Количество;
			НоваяСтрока.Цена 			 = ТекСтрока.Цена;
			НоваяСтрока.Сумма 			 = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 		 = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 		 = ТекСтрока.СуммаНДС;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();