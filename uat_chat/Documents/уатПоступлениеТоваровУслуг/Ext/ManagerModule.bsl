
// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия",ДокументСсылка);
	Иначе
		мЗапрос.УстановитьПараметр("Партия",Неопределено);
	КонецЕсли;
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТабЧастьДокумента.Ссылка.Дата КАК Период,
	|	ТабЧастьДокумента.Ссылка КАК Регистратор,
	|	ТабЧастьДокумента.Ссылка.Склад КАК Склад,
	|	&Партия КАК Партия,
	|	ТабЧастьДокумента.Номенклатура,
	|	ТабЧастьДокумента.ЕдиницаИзмерения,
	|	&КоличествоДляЗамены КАК Количество,
	|	ТабЧастьДокумента.Цена,
	|	ВЫБОР
	|		КОГДА ТабЧастьДокумента.Ссылка.УчитыватьНДС
	|				И (НЕ ТабЧастьДокумента.Ссылка.СуммаВключаетНДС)
	|			ТОГДА ТабЧастьДокумента.Сумма + ТабЧастьДокумента.СуммаНДС
	|		ИНАЧЕ ТабЧастьДокумента.Сумма
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Товары КАК ТабЧастьДокумента
	|ГДЕ
	|	ТабЧастьДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаТовары.Номенклатура,
	|	ТаблицаДокументаТовары.Склад,
	|	ТаблицаДокументаТовары.Регистратор КАК Партия
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";
	
	Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
		СтрокаРасчетаКоличества = "ВЫРАЗИТЬ(ТабЧастьДокумента.Количество * ТабЧастьДокумента.ЕдиницаИзмерения.Коэффициент / ТабЧастьДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3)) ";
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены",СтрокаРасчетаКоличества);	
	Иначе
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены","ТабЧастьДокумента.Количество ");	
	КонецЕсли;
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
	
	Для каждого КолонкаРезультатЗапроса Из МассивРезультатов[1].Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	мЗапрос.Текст = 	
	"ВЫБРАТЬ
	|	Товары.ВидДвижения,
	|	Товары.Период,
	|	Товары.Регистратор,
	|	Товары.Склад,
	|	Товары.Партия,
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.Сумма КАК Стоимость,
	|	Товары.Сумма КАК СтоимостьУпр
	|ИЗ
	|	ТаблицаДокументаТовары КАК Товары";
	
    Выборка = мЗапрос.Выполнить();
	ТаблицаПартии = Выборка.Выгрузить();
	Для Каждого ТекСтрока ИЗ ТаблицаПартии Цикл

		Если СтруктураДополнительныеСвойства.ВалютаРеглУчета <> ДокументСсылка.ВалютаДокумента тогда
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость, ДокументСсылка.ВалютаДокумента, 
		   						СтруктураДополнительныеСвойства.ВалютаРеглУчета,
								ДокументСсылка.КурсВзаиморасчетов, 
								СтруктураДополнительныеСвойства.КурсРегл,
								ДокументСсылка.КратностьВзаиморасчетов,  
								СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") И СтруктураДополнительныеСвойства.ВалютаУпрУчета <> ДокументСсылка.ВалютаДокумента тогда
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СтоимостьУпр, ДокументСсылка.ВалютаДокумента,
								СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
								ДокументСсылка.КурсВзаиморасчетов, 
								СтруктураДополнительныеСвойства.КурсУпр,
								ДокументСсылка.КратностьВзаиморасчетов,  
								СтруктураДополнительныеСвойства.КратностьУпр);
		Иначе
			ТекСтрока.СтоимостьУпр = 0;								
		КонецЕсли;	
		
	КонецЦикла;
	
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("Регистратор");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Период");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Контрагент");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Организация");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр");
	
	Если Не ДокументСсылка.СуммаДокумента = 0 Тогда
		НовСтрока = ТаблицаВзаиморасчетов.Добавить();
		НовСтрока.Регистратор        = ДокументСсылка;
		НовСтрока.Период             = ДокументСсылка.Дата;
		НовСтрока.ВидДвижения        = ВидДвиженияНакопления.Расход;
		НовСтрока.ДоговорКонтрагента = ДокументСсылка.ДоговорКонтрагента;
		НовСтрока.Контрагент         = ДокументСсылка.Контрагент;
		НовСтрока.Организация        = ДокументСсылка.Организация;
		ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
		Если НЕ ЭтоОбъединениеСБП И ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам тогда
			НовСтрока.Сделка         = ДокументСсылка.Сделка;
		КонецЕсли;
		
		НовСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
		                                                  ДокументСсылка.ВалютаДокумента, ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
														  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
														  ДокументСсылка.КурсВзаиморасчетов,
														  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
														  ДокументСсылка.КратностьВзаиморасчетов);
		НовСтрока.СуммаУпр            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
		                                                  ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
														  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
														  СтруктураДополнительныеСвойства.КурсУпр,
														  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
														  СтруктураДополнительныеСвойства.КратностьУпр);
	КонецЕсли;
													  
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии"        , ТаблицаПартии);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	Поступление.Номенклатура,
	|	Поступление.Ссылка КАК Регистратор,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Товары КАК Поступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки("
	+ ?(НЕ УдалениеПроведения, "&МоментВремени", "") + ",
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							уатПоступлениеТоваровУслугТовары.Номенклатура
	|						ИЗ
	|							Документ.уатПоступлениеТоваровУслуг.Товары КАК уатПоступлениеТоваровУслугТовары
	|						ГДЕ
	|							уатПоступлениеТоваровУслугТовары.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО Поступление.Ссылка.Склад = уатПартииТоваровНаСкладахОстатки.Склад
	|			И Поступление.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|			И (&Партия = уатПартииТоваровНаСкладахОстатки.Партия)
	|ГДЕ
	|	Поступление.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	Если НЕ УдалениеПроведения Тогда
		мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	КонецЕсли;
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия",ДокументСсылка);
	Иначе
		мЗапрос.УстановитьПараметр("Партия",Неопределено);
	КонецЕсли;

	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстСообщения = "Для """ + Выборка.Номенклатура + """ получены отрицательные остатки на складе """ + ДокументСсылка.Склад + """. Остаток на складе: " + Выборка.КоличествоОстаток;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);	
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры // ВыполнитьКонтроль()
