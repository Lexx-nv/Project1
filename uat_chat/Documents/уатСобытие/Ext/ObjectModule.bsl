////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.

Перем мСписокСтарыхПользователей;
Перем мСтараяДатаНачалаСобытия;
Перем мСтараяДатаОкончанияСобытия;
Перем мСписокПользователей;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает список пользователей для календаря событий
//
// Возвращаемое значение:
//   Список пользователей
//
Функция ПолучитьСписокПользователейДляКалендаря() Экспорт
	
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.Добавить(Ответственный);
	
	Возврат СписокПользователей;	
	
КонецФункции // ПолучитьСписокПользователейДляКалендаря()

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЕсли;		
КонецПроцедуры

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция возвращает номер строки в поле табличного документа
//  для вывода События по его дате (начала или конца)
//
// Параметры
//  Часы - Строка, часы даты
//  Минуты - Строка, минуты даты
//  Дата - Дата, текущее значение даты для определения
//  Начало - Булево, признак начала или окончания периода
//  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
//
// Возвращаемое значение:
//   Число - номер строки в поле табличного документа
//
Функция мВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения)
	
	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
	Иначе
		Часы = Число(Часы);
	КонецЕсли; 
	
	Если ПустаяСтрока(Минуты) Тогда
		Минуты = 0;
	Иначе
		Минуты = Число(Минуты);
	КонецЕсли; 
	
	Если Начало Тогда
		Если Дата < НачалоДня(ДатаСравнения) Тогда
			Возврат 1;
		Иначе
			Если Минуты < 30 Тогда
				Если Минуты = 0 Тогда
					Если Часы = 0 Тогда
						Возврат 1;
					Иначе
						Возврат (Часы * 2 + 1);
					КонецЕсли; 
				Иначе
					Возврат (Часы * 2 + 1);
				КонецЕсли; 
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если Дата > КонецДня(ДатаСравнения) Тогда
			Возврат 48;
		Иначе
			Если Минуты = 0 Тогда
				Если Часы = 0 Тогда
					Возврат 1;
				Иначе
					Возврат (Часы * 2);
				КонецЕсли; 
			ИначеЕсли Минуты <= 30 Тогда
				Возврат (Часы * 2 + 1);
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

Процедура ВвестиЗаписьВРегистр(Дата, НомерНачальнойСтроки, НомерКонечнойСтроки, НаборЗаписейРегистра)
	
	Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
		
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		
		НоваяЗапись.Событие              = Ссылка;
		НоваяЗапись.Дата                 = Дата;
		НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
		НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
		НоваяЗапись.Пользователь         = ЭлементСпискаПользователей.Значение;
		
		НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
		НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
		НоваяЗапись.Контрагент           = Контрагент;
		НоваяЗапись.КонтактноеЛицо       = КонтактноеЛицо;
		НоваяЗапись.ОписаниеСобытия      = ОписаниеСобытия;
		НоваяЗапись.Важность             = Важность;
		НоваяЗапись.СостояниеСобытия     = СостояниеСобытия;
		НоваяЗапись.ТипСобытия           = ТипСобытия;
		НоваяЗапись.ВидСобытия           = ВидСобытия;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗапомнитьСтарыеЗначения()
	
	мСписокСтарыхПользователей = Новый СписокЗначений;
	мСтараяДатаНачалаСобытия = НачалоСобытия;
	мСтараяДатаОкончанияСобытия = ОкончаниеСобытия;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущееСобытие", Ссылка);
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Пользователь КАК Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.уатСобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие = &ТекущееСобытие
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		ТаблицаПользователей = ТаблицаЗапроса.Скопировать();
		ТаблицаПользователей.Свернуть("Пользователь");
		мСписокСтарыхПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
		
		ТаблицаЗапроса.Свернуть("ДатаСобытия");
		ТаблицаЗапроса.Сортировать("ДатаСобытия ВОЗР");
		
		мСтараяДатаНачалаСобытия = ТаблицаЗапроса[0].ДатаСобытия;
		мСтараяДатаОкончанияСобытия = ТаблицаЗапроса[ТаблицаЗапроса.Количество() - 1].ДатаСобытия;
		
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДокОснование)
	
	Если  ТипЗнч(ДокОснование) = Тип("ДокументСсылка.уатСобытие") Тогда
		ТипСобытия       = Перечисления.уатВходящееИсходящееСобытие.Исходящее;
		ВидСобытия       = Перечисления.уатВидыСобытий.ТелефонныйЗвонок;
		Основание        = ДокОснование;
		Важность         = Перечисления.уатВажность.Средняя;
		СостояниеСобытия = Перечисления.уатСостоянияСобытий.Запланировано;
		Ответственный    = ПараметрыСеанса.ТекущийПользователь;
		
		Контрагент     = ДокОснование.Контрагент;
		КонтактноеЛицо = ДокОснование.КонтактноеЛицо;
		ВидСобытия     = ДокОснование.ВидСобытия;
		ТипСобытия     = ДокОснование.ТипСобытия;
		Важность       = ДокОснование.Важность;
		Основание      = ДокОснование;
		ВидОбъекта     = ДокОснование.ВидОбъекта;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
		ТипСобытия       = Перечисления.уатВходящееИсходящееСобытие.Исходящее;
		ВидСобытия       = Перечисления.уатВидыСобытий.ТелефонныйЗвонок;
		Основание        = ДокОснование;
		Важность         = Перечисления.уатВажность.Средняя;
		СостояниеСобытия = Перечисления.уатСостоянияСобытий.Запланировано;
		Ответственный    = ПараметрыСеанса.ТекущийПользователь;
		
		ВидСобытия = Перечисления.уатВидыСобытий.ЭлектронноеПисьмо;
		
		Если ДокОснование.СтатусПисьма = Перечисления.уатСтатусыПисем.Исходящее или ДокОснование.СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное Тогда
			ТипСобытия = Перечисления.уатВходящееИсходящееСобытие.Исходящее;
		Иначе
			ТипСобытия = Перечисления.уатВходящееИсходящееСобытие.Входящее;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если ДокОснование.СтатусПисьма <> Перечисления.уатСтатусыПисем.Полученное Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|	ПРАВОЕ СОЕДИНЕНИЕ
			|		(
			|		ВЫБРАТЬ
			|			ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты
			|		ИЗ
			|			Документ.уатЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|		ГДЕ
			|			ЭлектронноеПисьмоКомуТЧ.Ссылка = &ТекДокумент
			|		) КАК Адреса
			|	ПО
			|		ВЫРАЗИТЬ(Адреса.АдресЭлектроннойПочты КАК СТРОКА(200)) = ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200))
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица
			|	И
			|	КонтактнаяИнформация.Объект.ВидКонтактногоЛица <> &Личное)
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|";
			
			Запрос.УстановитьПараметр("ТекДокумент", ДокОснование);
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица
			|	И
			|	КонтактнаяИнформация.Объект.ВидКонтактногоЛица <> &Личное)
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|	И
			|	КонтактнаяИнформация.Представление ПОДОБНО &Представление
			|";
			
			Запрос.УстановитьПараметр("Представление", ДокОснование.ОтправительАдресЭлектроннойПочты);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Личное", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВыбОбъект = Выборка.Объект;
			Иначе
				СписокВыбора = Новый СписокЗначений;
				Пока Выборка.Следующий() Цикл
					СписокВыбора.Добавить(Выборка.Объект);
				КонецЦикла;
				
				ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите объект события");
				
				Если ВыбранныйЭлемент = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ВыбОбъект = ВыбранныйЭлемент.Значение;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Если ВыбОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
				ВидОбъекта     = Перечисления.уатВидыОбъектовСобытия.Контрагент;
				Контрагент     = ВыбОбъект.ОбъектВладелец;
				КонтактноеЛицо = ВыбОбъект;
			Иначе
				ВидОбъекта     = Перечисления.уатВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
				КонтактноеЛицо = ВыбОбъект;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.уатВидыОбъектовСобытия.Контрагент;
			Контрагент = ВыбОбъект;
		КонецЕсли; 
		
		Основание       = ДокОснование;
		ОписаниеСобытия = ДокОснование.Тема;
		Если ДокОснование.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ ДокОснование.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ДокОснование.ТекстПисьма);
			НовыйHTMLДокумент.close();
			СодержаниеСобытия = СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");
		Иначе
			СодержаниеСобытия = ДокОснование.ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	//структура, содержащая имена регистров сведений по которым надо проводить документ для управления персоналом
	Перем СтруктураПроведенияПоРегистрамСведений;
	
	// Формируем движения для нужд календаря пользователя
	
	
	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.уатСобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НачальнаяСтрока = мВозвратитьНомерСтроки(Формат(НачалоСобытия,"ДФ=Ч"), Формат(НачалоСобытия,"ДФ=м"), НачалоСобытия, Истина, НачалоСобытия);
	Если Формат(НачалоСобытия,"ДФ=Ч") = Формат(ОкончаниеСобытия,"ДФ=Ч") И Формат(НачалоСобытия,"ДФ=м") = Формат(ОкончаниеСобытия,"ДФ=м") Тогда
		КонечнаяСтрока  = НачальнаяСтрока;
	Иначе
		КонечнаяСтрока  = мВозвратитьНомерСтроки(Формат(ОкончаниеСобытия,"ДФ=Ч"), Формат(ОкончаниеСобытия,"ДФ=м"), ОкончаниеСобытия, Ложь, ОкончаниеСобытия);
	КонецЕсли; 
	
	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей);
			
		КонецЦикла;
		
		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, 48, НаборЗаписей);
		ВвестиЗаписьВРегистр(НачалоДня(ОкончаниеСобытия), 1, КонечнаяСтрока, НаборЗаписей);
		
	Иначе
		
		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей);
		
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	СписокПерераспределенныхДат = Новый СписокЗначений;
	
	Если НачалоДня(мСтараяДатаНачалаСобытия) <> НачалоДня(НачалоСобытия) ИЛИ НачалоДня(мСтараяДатаОкончанияСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		КоличествоИнтерваловМеждуДнями = Цел((КонецДня(мСтараяДатаОкончанияСобытия) + 1 - НачалоДня(мСтараяДатаНачалаСобытия))/(60*60*24));
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоДня(мСтараяДатаНачалаСобытия) + (60*60*24)*а - 1);
			СписокПерераспределенныхДат.Добавить(ДатаИнтервала);
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			Если СписокПерераспределенныхДат.НайтиПоЗначению(ДатаИнтервала) = Неопределено Тогда
				
				Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
					СтарыйПользователь = ЭлементСпискаПользователей.Значение;
					Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
						уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
					КонецЕсли; 
				КонецЦикла; 
				
				Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
					уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ОкончаниеСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
	Иначе
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения()
	
	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.уатСобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла;
		
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	Иначе
		
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			уатОбщегоНазначенияТиповые.уатРаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		уатОбщегоНазначенияТиповые.уатУдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ);
	КонецЕсли; 
	#Если Клиент Тогда 	
		Оповестить("ЗаписанДокументУатСобытие",Ссылка,);
	#КонецЕсли
КонецПроцедуры

Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
КонецПроцедуры // ПередЗаписью


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли
