Перем Права Экспорт; //Переменная хранит список прав и настроек , полученный из глобальной переменной

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт; //Курс валюты документа
Перем КратностьДокумента Экспорт;  //Кратность валюты документа

Перем мВалютаРегламентированногоУчета Экспорт;//Переменная хранит значение валюты регламентированного учёта,полученное из констант

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьПКО()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Номер,
		|	ПриходныйКассовыйОрдер.Дата КАК ДатаДокумента,
		|	ПриходныйКассовыйОрдер.Организация КАК Орган,
		|	ПриходныйКассовыйОрдер.Организация,
		|	ПриходныйКассовыйОрдер.Организация КАК Руководители,
		|	ПриходныйКассовыйОрдер.Подразделение.Представление КАК ПредставлениеПодразделения,
		|	ПриходныйКассовыйОрдер.Подразделение КАК Подразделение,
		|	ПриходныйКассовыйОрдер.Контрагент,
		|	ПриходныйКассовыйОрдер.Контрагент.Представление КАК Контрагент,
		|	ПриходныйКассовыйОрдер.ПринятоОт КАК ПринятоОт,
		|	ПриходныйКассовыйОрдер.Основание КАК Основание,
		|	ПриходныйКассовыйОрдер.Приложение КАК Приложение,
		|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		|	ПриходныйКассовыйОрдер.ВалютаДокумента,
		|	ПриходныйКассовыйОрдер.ВалютаДокумента.Представление КАК ВалютаПредставление,
		|	ПриходныйКассовыйОрдер.СтавкаНДС
		|ИЗ
		|	Документ.уатПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
		Макет       = ПолучитьОбщийМакет("КО1");
		

		ЕстьРасчетыСКонтрагентами = уатОбщегоНазначения_проф.ЕстьРасчетыСКонтрагентами(ВидОперации);
		
		// Выводим шапку ПКО
		
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.СуммаРубКоп       = ?(НЕ Касса.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета,Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+" "+СокрЛП(Шапка.ВалютаДокумента),РубКоп(Шапка.Сумма));
		ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета," "+СокрЛП(Шапка.ВалютаДокумента),"");
		ОбластьМакета.Параметры.СуммаПрописью     = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.НомерДокумента    = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(Шапка);
		
		ТабНДС = РасшифровкаПлатежа.Выгрузить();
		
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		ТекстСуммаНДС="";
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			
			ТекстСуммаНДС = ТекстСуммаНДС+Символы.ПС + "НДС (" + ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
			
		КонецЦикла;
		
		ТекстСуммаНДС = Сред(ТекстСуммаНДС,2);
		
		ОбластьМакета.Параметры.ВТомЧисле = ТекстСуммаНДС;
		
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизации(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
		
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		Кассир       = Руководители.Кассир;
		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
		ОбластьМакета.Параметры.ФИОКассира = Кассир;
		
		ТекстПринятоОт = Шапка.ПринятоОт;
		
		Если ТекстПринятоОт = "" И ЗначениеЗаполнено(Контрагент) Тогда
			
				Запрос=Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ
				|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
				|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
				|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
				|ИЗ
				|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
				Запрос.УстановитьПараметр("Дата",Дата);
				Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
				
				Результат=Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					ТекстПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
					Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
				КонецЕсли;
			
		КонецЕсли;
		
		ТекстОснование=Основание;
		
		Если Основание = "" И ЗначениеЗаполнено(РасчетныйДокумент) Тогда
			
			ТекстОснование = Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1) + Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПринятоОт  = ТекстПринятоОт;
		ОбластьМакета.Параметры.Основание  = ТекстОснование;
		ОбластьМакета.Параметры.Приложение = Приложение;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПКО()	
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		ИначеЕсли НазваниеМакета = "ПКО" Тогда 
			
			ТабДокумент = ПечатьПКО();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
			
		КонецЕсли;		
	КонецПроцедуры
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		Возврат Новый Структура("ПКО", "Приходный кассовый ордер");
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Стандартная отработка события изменения контрагента в платежных документах
	//
	// Параметры
	//   ДокументОбъект – ДокументОбъект – Документ, у которого изменился контрагент
	//   СтрокаПлатеж - строка содержащая сумму платежа по контрагенту
	//
	Процедура ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж) Экспорт
		
		ВосстанавливатьРеквизиты = (РасшифровкаПлатежа.Количество() = 1);
		СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
		
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			
			СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
			
		Иначе
			
			СписокДоговоров = Новый СписокЗначений;
			Если ВидОперации = Перечисления.уатВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами тогда
				СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
			ИначеЕсли ВидОперации = Перечисления.уатВидыОперацийПКО.ОплатаПокупателя тогда
				СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			КонецЕсли;
			
			СтруктураПараметровДляПолученияДоговора = Новый Структура ("СписокДопустимыхВидовДоговоров",СписокДоговоров);
			СтрокаПлатеж.ДоговорКонтрагента = уатОбщегоНазначенияТиповые.уатПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора);
			
		КонецЕсли;
		
		СтрокаПлатеж.СуммаПлатежа = ДокументОбъект.СуммаДокумента;
		
		Если ВосстанавливатьРеквизиты Тогда
			СтрокаПлатеж.СтавкаНДС = СтараяСтавкаНДС;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
		КонецЕсли;
		
	КонецПроцедуры // ПриИзмененииКонтрагентаВПлатежномДокументе()
	
	Функция РубКоп(Сумма)
	
	Руб = Цел(Сумма);
	Коп = ОКР(100*(Сумма-Руб),0,1);
	СуммаРубКоп = "" + Руб + " руб. " + Цел(Коп/10) + (Коп-10*Цел(Коп/10)) + " коп.";
	Возврат СуммаРубКоп;
	
КонецФункции

#КонецЕсли

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС     = уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()


//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт
	
	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	Документы.уатПриходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение_проф.ОтразитьДвижениеДДС(ДополнительныеСвойства, Движения, Отказ);
	Если ВидОперации = Перечисления.уатВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами тогда
		уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатПриходныйКассовыйОрдер.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	МассивДоговоров = ЭтотОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента");
	ТаблицаДоговоров = Новый таблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Договор");
	ТаблицаДоговоров.ЗагрузитьКолонку(МассивДоговоров,"Договор");
	ТаблицаДоговоров.Свернуть("Договор");
	
	Если ТаблицаДоговоров.Количество() = 1 Тогда
		ДоговорКонтрагента = ТаблицаДоговоров[0].Договор;
	Иначе
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатПриходныйКассовыйОрдер.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();

	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке(" не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
	КонецЕсли;
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если НЕ ВидОперации = Перечисления.уатВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если НЕ ЭтоОбъединениеСБП И НЕ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				
				Если НЕ ЗначениеЗаполнено(Платеж.Сделка) тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита ""Сделка""",Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидОперации = Перечисления.уатВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.найти("Контрагент"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.найти("РасшифровкаПлатежа.ДоговорКонтрагента"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.найти("РасшифровкаПлатежа.СуммаВзаиморасчетов"));
	КонецЕсли;
	
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

