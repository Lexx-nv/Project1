////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует простой табличный документ
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма
	//
	Функция ПечатьВводВЭксплуатацию()
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВводВЭксплуатацию";
		Макет = ПолучитьМакет("ВводВЭксплуатацию");
		
		// Выводим шапку
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, "Ввод в эксплуатацию ТС и оборудования");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		ОбластьМакета.Параметры.Организация = Организация;
		ОбластьМакета.Параметры.Подразделение = Подразделение;
		ОбластьМакета.Параметры.Колонна = Колонна;
		ТабДокумент.Вывести(ОбластьМакета);
		
		//формируем таблицы ТС и оборудования
		тблТС = ТС.Выгрузить().Скопировать();
		Сч = тблТС.Количество()-1;
		Пока Сч >= 0 Цикл
			Если НЕ тблТС[Сч].ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
				тблТС.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		тблОборудование = ТС.Выгрузить().Скопировать();
		Сч = тблОборудование.Количество()-1;
		Пока Сч >= 0 Цикл
			Если тблОборудование[Сч].ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
				тблОборудование.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		
		// Выводим таблицу ТС
		Если тблТС.Количество() > 0 Тогда
			ТекОбласть = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабДокумент.Вывести(ТекОбласть);
			НомерСтроки = 1;
			Для Каждого ТекСтрока Из тблТС Цикл
				ТекОбласть = Макет.ПолучитьОбласть("Строка");
				ТекОбласть.Параметры.НомерСтроки = НомерСтроки;
				ТекОбласть.Параметры.ПредставлениеТС = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Организация);
                ТекОбласть.Параметры.ДатаВвода = ТекСтрока.ДатаВвода;
				НомерСтроки = НомерСтроки + 1;
				ТабДокумент.Вывести(ТекОбласть);
			КонецЦикла;
			ТекОбласть = Макет.ПолучитьОбласть("Итого");
			ТабДокумент.Вывести(ТекОбласть);
		КонецЕсли;
		
		// Выводим таблицу оборудования
		Если тблОборудование.Количество() > 0 Тогда
			ТекОбласть = Макет.ПолучитьОбласть("ШапкаТаблицыОборудование");
			ТабДокумент.Вывести(ТекОбласть);
			НомерСтроки = 1;			
			Для Каждого ТекСтрока Из тблОборудование Цикл
				ТекОбласть = Макет.ПолучитьОбласть("СтрокаОборудование");
				ТекОбласть.Параметры.НомерСтроки = НомерСтроки;
				ТекОбласть.Параметры.Оборудование = уатОбщегоНазначения.уатПредставлениеТС(ТекСтрока.ТС, Организация);
                ТекОбласть.Параметры.ДатаВвода = ТекСтрока.ДатаВвода;
				НомерСтроки = НомерСтроки + 1;	
				ТабДокумент.Вывести(ТекОбласть);
			КонецЦикла;
			ТекОбласть = Макет.ПолучитьОбласть("ИтогоОборудование");
			ТабДокумент.Вывести(ТекОбласть);
		КонецЕсли;
		
		// Вывести подписи
		ТекОбласть = Макет.ПолучитьОбласть("Подвал");
		ТекОбласть.Параметры.Ответственный = Ответственный;
		ТабДокумент.Вывести(ТекОбласть);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСписаниеТоваров()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если НазваниеМакета = "ВводВЭксплуатацию" Тогда
			ТабДокумент = ПечатьВводВЭксплуатацию();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			
		ИначеЕсли ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;

			
		КонецЕсли; 
		
	КонецПроцедуры // Печать
	
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("ВводВЭксплуатацию", "Ввод в эксплуатацию");
	
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ЗаписатьРеквизитыТСиОборудования(Отказ)
	Для каждого СтрТС Из ТС Цикл
		ТСОбъект = СтрТС.ТС.ПолучитьОбъект();
		ТСОбъект.ДатаВводаВЭксплуатацию = СтрТС.ДатаВвода;
		
		МестоТС = уатОбщегоНазначения.МестонахождениеТС(СтрТС.ТС, СтрТС.ДатаВвода);
		
		ТСОбъект.Организация = МестоТС.Организация;
		ТСОбъект.Колонна = МестоТС.Колонна;
		ТСОбъект.Подразделение = МестоТС.Подразделение;
		ТСОбъект.Состояние = МестоТС.Состояние;
		
		Если СтрТС.Состояние = Справочники.уатСостояниеТС.Привлеченный ТОгда
			ТСОбъект.ВладелецТС = СтрТС.Владелец;
			ТСОбъект.ПривлеченноеТС = Истина;
		ИНаче
			ТСОбъект.ВладелецТС = Организация;
			ТСОбъект.ПривлеченноеТС = Ложь;
		КонецЕслИ;
		
		Если ТСОбъект.ДатаВыбытия<>Дата(1,1,1) ТОгда
			Т = РегистрыСведений.уатМестонахождениеТС.СрезПоследних(КонецДня(ТСОбъект.ДатаВыбытия),Новый Структура("ТС",ТСОбъект.Ссылка));
			Есть=Ложь;
			Для каждого с из Т Цикл
				Если с.Состояние = Справочники.уатСостояниеТС.Выбыло ТОгда
					Есть = Истина;
				КонецеСЛИ;
			КонецЦиклА;
			Если Не ЕСть Тогда
				ТСОбъект.ДатаВыбытия = дата(1,1,1);
			КонецЕСЛИ;
		КонецЕСЛИ;
		
		Попытка 
			ТСОбъект.Записать();
			#Если Клиент Тогда
				Оповестить("ОбновитьФорму_МестонахождениеТС", , ТСОбъект.Ссылка);
			#КонецЕсли
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать ТС / оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(СтрТС.ТС, Организация) + """", Отказ);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьТСиОборудованиеДоВвода(Отказ)
	Для каждого СтрТС Из ТС Цикл
		ТСОбъект = СтрТС.ТС.ПолучитьОбъект();
		ТСОбъект.ДатаВводаВЭксплуатацию = '00010101';
		
		ТСОбъект.Организация = Неопределено;
		ТСОбъект.Подразделение = Неопределено;
		ТСОбъект.Колонна = Неопределено;
		
		ТСОбъект.ВладелецТС = Неопределено;
		ТСОбъект.ПривлеченноеТС = Неопределено;
		
		Попытка 
			ТСОбъект.Записать();
			#Если Клиент Тогда
				Оповестить("ОбновитьФорму_МестонахождениеТС", , ТСОбъект.Ссылка);
			#КонецЕсли
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать ТС / оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(СтрТС.ТС, Организация) + """", Отказ);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция УжеЕстьВводВЭксплуатацию(Отказ)
	Рез = Ложь;
	
	// по ТС
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатВводВЭксплуатациюТСиОборудования_ТС.Ссылка КАК Ссылка,
	|	уатВводВЭксплуатациюТСиОборудования_ТС.ТС КАК ТС
	|ИЗ
	|	Документ.уатВводВЭксплуатациюТСиОборудования.ТС КАК уатВводВЭксплуатациюТСиОборудования_ТС
	|ГДЕ
	|	уатВводВЭксплуатациюТСиОборудования_ТС.Ссылка <> &ДокументСсылка
	|	И уатВводВЭксплуатациюТСиОборудования_ТС.Ссылка.Проведен
	|	И (уатВводВЭксплуатациюТСиОборудования_ТС.ТС В(&СписокТС))");
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("СписокТС", тс.ВыгрузитьКолонку("ТС"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("ТС / оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(Выборка.ТС, Организация) + """ уже введено в эксплуатацию: """ + Выборка.Ссылка + """", Отказ);
		Рез = Истина;
	КонецЦикла;
	
	
	Возврат Рез;
КонецФункции

Функция ПроверкаПривлеченныхТС(Отказ)
	
	Возврат Ложь;
	
	Рез = Ложь;
	
	Запрос = новый Запрос;
	
	
	Запрос.Текст = "ВЫБРАТЬ distinct
	               |	РеестрыУслугОбороты.ТС
				   |INTO врДох
	               |ИЗ
	               |	РегистрНакопления.РеестрыУслуг.Обороты(, , , ТС В (&МасТС)) КАК РеестрыУслугОбороты
	               |;
	               |
	               |ВЫБРАТЬ
	               |	уатВводВЭксплуатациюТСиОборудованияТС.ТС,
	               |	уатВводВЭксплуатациюТСиОборудованияТС.Состояние
	               |ИЗ
	               |	Документ.уатВводВЭксплуатациюТСиОборудования.ТС КАК уатВводВЭксплуатациюТСиОборудованияТС
	               |ГДЕ
	               |	уатВводВЭксплуатациюТСиОборудованияТС.Ссылка = &Ссылка
				   |    И
				   |(
				   // Условие 1
				   |     (
	               |	   уатВводВЭксплуатациюТСиОборудованияТС.Состояние = Значение(Справочник.уатСостояниеТС.Привлеченный)
				   |       и
				   |       Владелец = Значение(Справочник.Контрагенты.ПустаяСсылка) 
				   |     ) 
				   |
				   |   ИЛИ
				   //Условие 2
				   |    (
				   |      (
				   |        (уатВводВЭксплуатациюТСиОборудованияТС.Состояние = Значение(Справочник.уатСостояниеТС.Привлеченный)  и ТС.ПривлеченноеТС = Ложь) 
				   |            или
				   |        (уатВводВЭксплуатациюТСиОборудованияТС.Состояние <> Значение(Справочник.уатСостояниеТС.Привлеченный) и ТС.ПривлеченноеТС = Истина)
				   |      )
				   |     и Тс в (SELECT ТС ИЗ врДох т)
				   |    )
				   |
				   |)
				   |" ;
				   Запрос.УстановитьПараметр("Ссылка", Ссылка);
				   Запрос.УстановитьПараметр("МасТС", Ссылка.ТС.ВыгрузитьКолонку("ТС"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("ТС / оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(Выборка.ТС, Организация) + " не выбран владелец или ТС учасвует в реестрах услуг", Отказ);
		Рез = Истина;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции


Процедура ОтразитьПробег(Отказ)
	
	Возврат;
	
	Рег = Движения.уатВыработкаТС;
	Рег.Записывать = Истина;
	
	Для каждого стр из ТС Цикл
		ЕСли Стр.НачПробег = 0 ТОгда Продолжить; КонецеСЛИ;
		
		Зап = Рег.Добавить();
		Зап.Период = Дата(2000,1,1); //Типа ввод начальных остатков
		Зап.Организация = Организация;
		Зап.ТС = Стр.ТС;
		Зап.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
		Зап.Количество = Стр.НачПробег;
		
	КонецЦикла;
	
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//Проверка согласования документа
	Если ТребуетСогласования И (НЕ уатОбщегоНазначения_проф.ДокументСогласован(Ссылка)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ """ + Ссылка + """ необходимо согласовать!", Отказ);
		Возврат;
	КонецЕсли;
	
	// Проверка уже введенных документов
	Если УжеЕстьВводВЭксплуатацию(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверкаПривлеченныхТС(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатВводВЭксплуатациюТСиОборудования.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение_проф.ОтразитьМестонахождениеТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьПробег(Отказ);
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатВводВЭксплуатациюТСиОборудования.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Запись даты ввода в карточках ТС и оборудования
	ЗаписатьРеквизитыТСиОборудования(Отказ);
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		и ЗначениеЗаполнено(Проверил) ТОгда
		 Сообщить("Нельзя отменить  проведение у ПРОВЕРЕННЫХ докуметов!");
		 Отказ = Истина;
	КонецеслИ;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//проверка на дубли строк
	Если НЕ Отказ Тогда
		// Заголовок для сообщений об ошибках проведения.
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		
		тблТС = ТС.Выгрузить().Скопировать();
		тблТС.Свернуть("ТС");
		Если тблТС.Количество() < ТС.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""ТС"" присутствуют повторяющиеся строки (дублирование ТС)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьТСиОборудованиеДоВвода(Отказ);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли