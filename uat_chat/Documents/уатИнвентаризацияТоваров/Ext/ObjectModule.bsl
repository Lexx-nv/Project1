////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
                                               //полученное из константы.
Перем мВалютаУпрУчета Экспорт; // Переменная хранит значение валюты управленческого учёта, полученное из константы.

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьДокумента и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиДокумента() Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
	ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Код");
	
	ТекстКодАртикул = "Код";
		
	ВалютаПечати = мВалютаУпрУчета;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Организация,
	|	Склад,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество                      КАК Количество,
	|		КоличествоУчет                  КАК КоличествоПоУчету,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаУчет КАК СуммаПоУчету
	|	)
	|ИЗ
	|	Документ.уатИнвентаризацияТоваров КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	// Выводим шапку накладной
	ПараметрыПечати.Вставить("ТекстЗаголовка", уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Инвентаризация материалов"));

	// Выводим данные об организации и складе
	ПараметрыПечати.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("ПредставлениеСклада", Шапка.ПредставлениеСклада);
	ПараметрыПечати.Вставить("ВалютаНаименование", СокрЛП(ВалютаПечати));
	ПараметрыПечати.Вставить("Валюта", ВалютаПечати);
	
	Позиции = Новый Массив;
	
	ИтогСуммы        = 0;
	ИтогСуммыПоУчету = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		
        ПараметрыПозиции.Вставить("НомерСтроки", ВыборкаСтрокТовары.НомерСтроки);		
		ПараметрыПозиции.Вставить("Товар", ВыборкаСтрокТовары.Товар);
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("КоличествоПоУчету", ВыборкаСтрокТовары.КоличествоПоУчету);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма);
		ПараметрыПозиции.Вставить("СуммаПоУчету", ВыборкаСтрокТовары.СуммаПоУчету);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТовары.КодАртикул);
		КонецЕсли;

		ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
		ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(ИтогСуммы));
	ПараметрыПечати.Вставить("ВсегоПоУчету", ОбщегоНазначения.ФорматСумм(ИтогСуммыПоУчету));	

	Возврат ПараметрыПечати;
	
КонецФункции //ПолучитьДанныеДляПечатиДокумента()	

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	ПараметрыПечати = ПолучитьДанныеДляПечатиДокумента();
	
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";

	Макет = ПолучитьМакет("ИнвентаризацияТоваровНаСкладе");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим данные об организации и складе
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = ПараметрыПечати.ИмяКолонкиКодов;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета    = Макет.ПолучитьОбласть(ОбластьСтроки);

	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл	

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подписи к документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
            ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	Иначе
		Если НазваниеМакета = "Ведомость" Тогда
			ТабДокумент = ПечатьДокумента();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Ведомость", "Инвентаризация материалов");

	Возврат СтруктураМакетов ;
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


// Процедура заполнения начальных настроек построителя отчета для работы с различными вариантами
//автозаполнения таблицы Товаров
Процедура ЗаполнитьНачальныеНастройки(ПостроительОтчета) Экспорт
	ПостроительОтчета.Текст =
	"ВЫБРАТЬ
	|	ОстаткиПартий.Номенклатура,
	|	СУММА(ОстаткиПартий.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0) ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	|			0 
	|		ИНАЧЕ
	|			СУММА(ОстаткиПартий.СтоимостьОстаток) * СУММА(ОстаткиПартий.КоличествоОстаток) /  СУММА(ОстаткиПартий.КоличествоОстаток)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(, Склад = &ПартионныйСклад) КАК ОстаткиПартий
	|
	|{ГДЕ ОстаткиПартий.Номенклатура КАК Номенклатура, 
	|     ОстаткиПартий.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартий.Номенклатура";
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("НоменклатурнаяГруппа");
	
	Для Каждого Элемент Из МассивОтбора Цикл
		ПолеОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки() 

#КонецЕсли

// Выполняет необходимые действия при изменении реквизита Организация
//
Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт

	Если Не ПустаяСтрока(Номер) Тогда
		уатОбщегоНазначенияТиповые.уатСброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОрганизации()

// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамНаСкладе(ПостроительОтчета, ТолькоУчетные = Ложь) Экспорт

	СтруктураКурса    = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	ПостроительОтчета.Текст =
	"ВЫБРАТЬ
	|	ОстаткиПартий.Номенклатура,
	|	" + ?(уатРаботаСМетаданными.естьСпрЕдиницыИзмерения(), "ОстаткиПартий.Номенклатура.ЕдиницаХраненияОстатков", "ОстаткиПартий.Номенклатура.БазоваяЕдиницаИзмерения") + " КАК ЕдиницаХранения,
	|	" + ?(уатРаботаСМетаданными.естьСпрЕдиницыИзмерения(), "ОстаткиПартий.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "1") + " КАК КоэффициентЕдиницыХранения,
	|	СУММА(ОстаткиПартий.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0) ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	|			0 
	|		ИНАЧЕ
	|			СУММА(ОстаткиПартий.СтоимостьОстаток) * СУММА(ОстаткиПартий.КоличествоОстаток) / СУММА(ОстаткиПартий.КоличествоОстаток)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментДокумента, Склад = &Склад) КАК ОстаткиПартий
	|
	|{ГДЕ ОстаткиПартий.Номенклатура КАК Номенклатура, 
	|     ОстаткиПартий.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартий.Номенклатура";
	
	Запрос = ПостроительОтчета.ПолучитьЗапрос();

	Запрос.УстановитьПараметр("Склад", Склад);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
		СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.КоличествоУчет);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
		СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, Выборка.Сумма);
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

// Процедура перезаполняет учетные количества в документе
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПерезаполнитьУчетныеКоличества(ПостроительОтчета) Экспорт

#Если Клиент Тогда
	Если Товары.Количество() > 0 Тогда
		ТекстВопроса = "Перезаполнить учетные количества и суммы?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;

	// Документ должен быть записан, чтобы этот запрос сработал.
	Если Модифицированность() Тогда
		ТекстВопроса = "Перед заполнением следует записать документ.
		               |Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
#КонецЕсли

	ПостроительОтчета.Текст =
	"ВЫБРАТЬ
	|	ПартииПартий.Номенклатура,
	|	" + ?(уатРаботаСМетаданными.естьСпрЕдиницыИзмерения(), "ПартииПартий.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "1") + " КАК КоэффициентЕдиницыХранения,
	|	СУММА(ПартииПартий.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА (СУММА(ПартииПартий.КоличествоОстаток) = 0) ИЛИ (СУММА(ПартииПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	|			0 
	|		ИНАЧЕ
	|			СУММА(ПартииПартий.СтоимостьОстаток) * СУММА(ПартииПартий.КоличествоОстаток) / СУММА(ПартииПартий.КоличествоОстаток)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
	|	                Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Документ.уатИнвентаризацияТоваров.Товары
	|	                                ГДЕ Документ.уатИнвентаризацияТоваров.Товары.Ссылка = &ДокументСсылка)
	|	              И Склад = &Склад) КАК ПартииПартий
	|
	|{ГДЕ ПартииПартий.Номенклатура КАК Номенклатура, 
	|     ПартииПартий.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииПартий.Номенклатура";
	
	Запрос = ПостроительОтчета.ПолучитьЗапрос();
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	КонецЕсли;

	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	СтрокаИндекса = "Номенклатура";
	ТаблицаОстатков.Индексы.Добавить(СтрокаИндекса);

	Для каждого СтрокаТабличнойЧасти ИЗ Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);

		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = 0;
			СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Продолжить;
		КонецЕсли;

		Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
			СтрокаТабличнойЧасти.КоличествоУчет = МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения / СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		Иначе
			СтрокаТабличнойЧасти.КоличествоУчет = МассивСтрок[0].Количество;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаУчет      = МассивСтрок[0].Сумма;
		СтрокаТабличнойЧасти.Цена           = ?(СтрокаТабличнойЧасти.КоличествоУчет = 0, 0,
		                                      СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет);
											  
		уатОбщегоНазначенияТиповые.уатРассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЦикла;
КонецПроцедуры  // ПерезаполнитьУчетныеКоличества()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	//проверка на ведение складского учета средствами УАТ
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		Сообщить("Для организации """ + Организация + """ отключена возможность ведения складского учета документами УАТ!", СтатусСообщения.Внимание);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
	мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
Иначе
	мВалютаУпрУчета = мВалютаРегламентированногоУчета;
КонецЕсли;