////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", уатОбщегоНазначенияСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Если НЕ Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	Иначе
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.БазоваяЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма      = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	ЕстьУслуги = Ложь;
	Если ИмяТабличнойЧасти = "Товары" Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад", Объект.Склад);
	
	РаботаСДиалогамиКлиент.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
	
КонецПроцедуры //

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора) Экспорт
	
	Перем Номенклатура, ЕдиницаИзмерения, Количество;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура",		Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",	ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",		Количество);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.Номенклатура	  = Номенклатура;
		СтрокаТабличнойЧасти.Количество  	  = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
	КонецЕсли;
КонецПроцедуры //

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСкладеСервер(ВалютаУчета, ТолькоУчетные = Ложь)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
		
	СтруктураКурса    = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаУчета, Объект.Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОстаткиПартий.Номенклатура,
	|	" + ?(уатРаботаСМетаданными.естьСпрЕдиницыИзмерения(), "ОстаткиПартий.Номенклатура.ЕдиницаХраненияОстатков", "ОстаткиПартий.Номенклатура.БазоваяЕдиницаИзмерения") + " КАК ЕдиницаХранения,
	|	" + ?(уатРаботаСМетаданными.естьСпрЕдиницыИзмерения(), "ОстаткиПартий.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "1") + " КАК КоэффициентЕдиницыХранения,
	|	СУММА(ОстаткиПартий.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0) ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	|			0 
	|		ИНАЧЕ
	|			СУММА(ОстаткиПартий.СтоимостьОстаток) * СУММА(ОстаткиПартий.КоличествоОстаток) / СУММА(ОстаткиПартий.КоличествоОстаток)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментДокумента, Склад = &Склад) КАК ОстаткиПартий
	|
	|{ГДЕ ОстаткиПартий.Номенклатура КАК Номенклатура, 
	|     ОстаткиПартий.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПартий.Номенклатура");
	
	Запрос.УстановитьПараметр("Склад", ДокОбъект.Склад);
	Если Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(ДокОбъект.Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", ДокОбъект.МоментВремени());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ДокОбъект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
		СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.КоличествоУчет);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
		СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, Выборка.Сумма);
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;
		
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьУчетныеКоличестваИСуммыСервер(ВалютаУчета, флЗаписатьДокумент = Ложь)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Если флЗаписатьДокумент Тогда
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПартииПартий.Номенклатура,
	|	" + ?(уатРаботаСМетаданными.естьСпрЕдиницыИзмерения(), "ПартииПартий.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "1") + " КАК КоэффициентЕдиницыХранения,
	|	СУММА(ПартииПартий.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА (СУММА(ПартииПартий.КоличествоОстаток) = 0) ИЛИ (СУММА(ПартииПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	|			0 
	|		ИНАЧЕ
	|			СУММА(ПартииПартий.СтоимостьОстаток) * СУММА(ПартииПартий.КоличествоОстаток) / СУММА(ПартииПартий.КоличествоОстаток)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
	|	                Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Документ.уатИнвентаризацияТоваров.Товары
	|	                                ГДЕ Документ.уатИнвентаризацияТоваров.Товары.Ссылка = &ДокументСсылка)
	|	              И Склад = &Склад) КАК ПартииПартий
	|
	|{ГДЕ ПартииПартий.Номенклатура КАК Номенклатура, 
	|     ПартииПартий.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииПартий.Номенклатура");
	
	Запрос.УстановитьПараметр("Склад", ДокОбъект.Склад);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокОбъект.Ссылка);
	Если ДокОбъект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(ДокОбъект.Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", ДокОбъект.МоментВремени());
	КонецЕсли;

	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	СтрокаИндекса = "Номенклатура";
	ТаблицаОстатков.Индексы.Добавить(СтрокаИндекса);

	Для каждого СтрокаТабличнойЧасти ИЗ ДокОбъект.Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);

		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = 0;
			СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Продолжить;
		КонецЕсли;

		Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
			СтрокаТабличнойЧасти.КоличествоУчет = МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения / СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		Иначе
			СтрокаТабличнойЧасти.КоличествоУчет = МассивСтрок[0].Количество;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаУчет = МассивСтрок[0].Сумма;
		СтрокаТабличнойЧасти.Цена      = ?(СтрокаТабличнойЧасти.КоличествоУчет = 0, 0,
											  СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет);
											  
		СтрокаТабличнойЧасти.Сумма     = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьОтклонение()
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.Отклонение = ТекСтрока.Количество - ТекСтрока.КоличествоУчет;	
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьСправочникЕдиницыИзмерения()
	Возврат (Метаданные.Справочники.Найти("ЕдиницыИзмерения") <> Неопределено);
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ДействиеПодбор("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладе(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстПредупреждения = "Склад не выбран.
		|Заполнение невозможно.";

		Предупреждение(ТекстПредупреждения, , );
		Возврат;                                                  		
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0 Тогда	
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;

		Объект.Товары.Очистить();		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСкладеСервер(мВалютаРегламентированногоУчета);
	
	ПосчитатьОтклонение();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетныеКоличества(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстПредупреждения = "Склад не выбран.
		|Заполнение невозможно.";

		Предупреждение(ТекстПредупреждения, , );
		Возврат;                                                  		
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0 Тогда	
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;

		Объект.Товары.Очистить();		
	КонецЕсли;

	ЗаполнитьПоОстаткамНаСкладеСервер(мВалютаРегламентированногоУчета, Истина);
	
	ПосчитатьОтклонение();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУчетныеКоличестваИСуммы(Команда)
	Если Объект.Товары.Количество() > 0 Тогда	
		ТекстВопроса = "Перезаполнить учетные количества и суммы?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Документ должен быть записан, чтобы этот запрос сработал.
	флЗаписать = Ложь;
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Перед заполнением следует записать документ.
		               |Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		флЗаписать = Истина;
	КонецЕсли;
	
	ПерезаполнитьУчетныеКоличестваИСуммыСервер(мВалютаРегламентированногоУчета, флЗаписать);
	
	ПосчитатьОтклонение();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы действительно хотите очистить табличную часть?",РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,"Очистка таблицы");
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ")) Тогда
		Предупреждение("В обработке ""Установка прав и настроек"" для организации """ + Объект.Организация + """
		|отключена возможность ведения складского учета документами УАТ!", 5);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = "Перезаполнить учетные количества и суммы?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	// Документ должен быть записан, чтобы этот запрос сработал.
	флЗаписать = Ложь;
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Перед заполнением следует записать документ.
		               |Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		флЗаписать = Истина;
	КонецЕсли;
	
	ПерезаполнитьУчетныеКоличестваИСуммыСервер(мВалютаРегламентированногоУчета, флЗаписать);
	
	ПосчитатьОтклонение();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		ТекОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Иначе
		ТекОрганизация = Объект.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекОрганизация) И НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		#Если Клиент тогда
			Предупреждение("В обработке ""Установка прав и настроек"" для организации """ + ТекОрганизация + """
			|отключена возможность ведения складского учета документами УАТ!");
		#КонецЕсли
		Отказ = Истина;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(
	Объект,
	,
	Параметры.ЗначениеКопирования,
	Параметры.Основание,
	,
	,
	,
	Параметры.ЗначенияЗаполнения
	);
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЕстьСправочникЕдиницыИзмерения() Тогда
		Элементы.ТоварыЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
	Иначе	
		Элементы.ТоварыЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
	КонецЕсли;
	
	Элементы.ТоварыЕдиницаИзмерения.ВыбиратьТип = Ложь;
	
    ПосчитатьОтклонение();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПосчитатьОтклонение();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);
		
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора("Товары", ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Цена 			  = 0;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() 
		ИЛИ СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * ВыбранноеЗначение.Коэффициент / СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	КонецЕсли; 		
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	ТоварыСуммаПриИзменении(Элемент);
КонецПроцедуры