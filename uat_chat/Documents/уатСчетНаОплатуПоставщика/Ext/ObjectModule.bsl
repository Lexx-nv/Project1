Перем мВалютаРегламентированногоУчета Экспорт; // Удалять движения при удалении документа
Перем Права Экспорт; //Переменная хранит список прав и настроек , полученный из глобальной переменной

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой заказа или счета,
	// разработанного методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - сформированная печатная форма
	//
	Функция ПечатьСчетаЗаказа(Тип)
		
		ТабДокумент = Новый ТабличныйДокумент;
		Макет = ЭтотОбъект.ПолучитьМакет(Тип);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	Контрагент КАК Поставщик,
		|	Организация,
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС
		|ИЗ
		|	Документ.уатСчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|
		|ГДЕ
		|	СчетНаОплатуПоставщика.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ОбластьШапки  = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст ="ВЫБРАТЬ
		|	ЗаказПоставщику.Номенклатура КАК Товар,
		|	ЗаказПоставщику.Количество,
		|	ЗаказПоставщику.НомерСтроки КАК НомерСтроки,
		|	ЗаказПоставщику.ЕдиницаИзмерения,
		|	ЗаказПоставщику.Цена,
		|	ЗаказПоставщику.Сумма,
		|	ЗаказПоставщику.СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		уатСчетНаОплатуПоставщикаТовары.Номенклатура  КАК Номенклатура,
		|		уатСчетНаОплатуПоставщикаТовары.Цена КАК Цена,
		|		уатСчетНаОплатуПоставщикаТовары.СтавкаНДС  КАК СтавкаНДС,
		|		СУММА(уатСчетНаОплатуПоставщикаТовары.Количество)  КАК Количество,
		|		СУММА(уатСчетНаОплатуПоставщикаТовары.Сумма)  КАК Сумма,
		|		СУММА(уатСчетНаОплатуПоставщикаТовары.СуммаНДС) КАК СуммаНДС,
		|		МИНИМУМ(уатСчетНаОплатуПоставщикаТовары.НомерСтроки) КАК НомерСтроки,
		|		уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения
		|	ИЗ
		|		Документ.уатСчетНаОплатуПоставщика.Товары КАК уатСчетНаОплатуПоставщикаТовары
		|	ГДЕ
		|		уатСчетНаОплатуПоставщикаТовары.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		уатСчетНаОплатуПоставщикаТовары.Номенклатура,
		|		уатСчетНаОплатуПоставщикаТовары.Цена,
		|		уатСчетНаОплатуПоставщикаТовары.СтавкаНДС,
		|		уатСчетНаОплатуПоставщикаТовары.ЕдиницаИзмерения
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		уатСчетНаОплатуПоставщикаУслуги.Номенклатура,
		|		уатСчетНаОплатуПоставщикаУслуги.Цена,
		|		уатСчетНаОплатуПоставщикаУслуги.СтавкаНДС,
		|		СУММА(уатСчетНаОплатуПоставщикаУслуги.Количество),
		|		СУММА(уатСчетНаОплатуПоставщикаУслуги.Сумма),
		|		СУММА(уатСчетНаОплатуПоставщикаУслуги.СуммаНДС),
		|		МИНИМУМ(уатСчетНаОплатуПоставщикаУслуги.НомерСтроки),
		|		//ЕДИНИЦАИЗМЕРЕНИЯ
		|	ИЗ
		|		Документ.уатСчетНаОплатуПоставщика.Услуги КАК уатСчетНаОплатуПоставщикаУслуги
		|	ГДЕ
		|		уатСчетНаОплатуПоставщикаУслуги.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		уатСчетНаОплатуПоставщикаУслуги.Номенклатура,
		|		уатСчетНаОплатуПоставщикаУслуги.Цена,
		|		уатСчетНаОплатуПоставщикаУслуги.СтавкаНДС,
		|		//ЕДИНИЦАИЗМЕРЕНИЯ) КАК ЗаказПоставщику";
		
		СтрЕдИзмерения = ?(Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено,"уатСчетНаОплатуПоставщикаУслуги.Номенклатура.БазоваяЕдиницаИзмерения",
		"ВЫБОР
		|		КОГДА
		|			уатСчетНаОплатуПоставщикаУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
		|		ТОГДА
		|			уатСчетНаОплатуПоставщикаУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление
		|		ИНАЧЕ
		|			уатСчетНаОплатуПоставщикаУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление
		|	КОНЕЦ");
		
		Запрос.Текст = СтрЗАменить(Запрос.Текст,"//ЕДИНИЦАИЗМЕРЕНИЯ",СтрЕдИзмерения);					  
					  
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		// Выводим шапку накладной
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Счет на оплату поставщика");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ТабДокумент.Вывести(ОбластьШапки);
		
		Сумма    = 0;
		СуммаНДС = 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьСтроки.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ОбластьСтроки.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар);
			
			ТабДокумент.Вывести(ОбластьСтроки);
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			Если СуммаНДС <> 0 Тогда
				ОбластьМакета.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
				ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			Иначе
				ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДС = "-";
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
		+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ФИОРуководителя = "/"+ Руководитель + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера   = "/"+ Бухгалтер    + "/";
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСчетаЗаказа()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли НЕ Проведен И Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		
		Если НазваниеМакета = "СчетЗаказ" Тогда
			// Печать счета на оплату
			ТабДокумент = ПечатьСчетаЗаказа(НазваниеМакета);
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
			
		ИначеЕсли ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("СчетЗаказ", "Счет на оплату");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Заполняет услуги во выбранной табличной части
	//	используется в УЭ
	//  ТЧ - табличная часть для заполнения
	//  СтруктураПараметров - структура отбора для заполнения
	//
	Процедура ЗаполнитьУслугиПоТЧ(ТЧ) Экспорт
		Если Услуги.Количество() Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Таб. часть Услуги не пустая. Очистить?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Услуги.Очистить();
			КонецЕсли;
		КонецЕсли;
		флПоЗаказам = Ложь;
		
		курсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			НоваяСтрока = Услуги.Добавить();
			СтрокаСодержание = Строка(СтрокаТЧ.Услуга);
			НоваяСтрока.Номенклатура     = СтрокаТЧ.Услуга;
			НоваяСтрока.Содержание       = СтрокаСодержание;
			НоваяСтрока.Количество       = СтрокаТч.Количество;
			НоваяСтрока.СтавкаНДС        = СтрокаТЧ.СтавкаНДС;
			
			мСуммаРегл 					 = СтрокаТЧ.СуммаРегл - ?(СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСуммаРегл,
			мВалютаРегламентированногоУчета,
			ВалютаДокумента,
			1,
			курсВалютыДокумента.Курс,
			1,
			курсВалютыДокумента.Кратность
			);
			
			НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаНДС,
			мВалютаРегламентированногоУчета,
			ВалютаДокумента,
			1,
			курсВалютыДокумента.Курс,
			1,
			курсВалютыДокумента.Кратность
			);
			Если НоваяСтрока.Количество = 0 тогда
				НоваяСтрока.Цена = 0;
			Иначе
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецПроцедуры
	
	
#КонецЕсли

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Содержание, Количество, Сумма");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", , Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Процедура проверяет правильность заполнения табличной части "Товары".
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ, Заголовок)
	
	СтруктураОбязательныхРеквизитов = Новый Структура("Номенклатура, Количество, Цена, ЕдиницаИзмерения");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхРеквизитов.Вставить("СтавкаНДС");
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхРеквизитов, Отказ, Заголовок);
	
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", , Отказ, Заголовок);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполнения реквизита "ДатаОплаты" по договору.
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(РежимВызова = "")Экспорт
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоДнейДоОплаты = 0;
	
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если НЕ ЭтоОбъединениеСБП Тогда
		ВидВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(ВидВзаиморасчетов) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Если ВидВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КонтролироватьЧислоДнейЗадолженности", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Исключим выходные дни, и получим новую дату оплаты
	//ДатаОплатыНовая   = НачалоДня(Дата);
	//ЧислоДнейДоОплаты = ЧислоДнейДоОплаты + ?(ДеньНедели(ДатаОплатыНовая) > 5, 1, 0);
	
	Пока ЧислоДнейДоОплаты > 0 Цикл
		ДатаОплатыНовая   = ДатаОплатыНовая + 86400;
		ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - 1;
		
		Пока ДеньНедели(ДатаОплатыНовая) > 5 Цикл
			ДатаОплатыНовая = ДатаОплатыНовая + 86400;
		КонецЦикла;
	КонецЦикла;
	
	Если ДатаОплаты <> ДатаОплатыНовая Тогда
		// Проверка режима вызова процедуры
		Если НЕ ПустаяСтрока(РежимВызова) Тогда
			Если РежимВызова = "ДатаДокумента" Тогда
				ТекстВопроса = "Изменилась дата документа.";
			Иначе
				ТекстВопроса = "Изменился договор с контрагентом.";
			КонецЕсли;
			#Если Клиент Тогда
				Если Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		ДатаОплаты = ДатаОплатыНовая;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДатуОплатыПоДоговору()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//==================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Основание = ДанныеЗаполнения;
	Если Метаданные.Документы.Найти("уатЗаказГрузоотправителя") <> Неопределено  И ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		// Заполнение шапки
		ВалютаДокумента         = Основание.ВалютаДокумента;
		Комментарий             = Основание.Комментарий;
		Организация             = Основание.Организация;
		Ответственный           = Основание.Ответственный;
		СуммаВключаетНДС        = Основание.СуммаВключаетНДС;
		СуммаДокумента          = Основание.СуммаДокумента;
		ДокументОснование       = Основание.Ссылка;
		
	ИначеЕсли Метаданные.Документы.Найти("уатРеализацияУслуг") <> Неопределено И ТипЗнч(Основание) = Тип("ДокументСсылка.уатРеализацияУслуг") Тогда
		
		Дата = ТекущаяДата();
		Организация         = Основание.Организация;
		Контрагент          = Основание.Контрагент;
		ДоговорКонтрагента  = Основание.ДоговорКонтрагента;
		СуммаДокумента      = Основание.СуммаДокумента;
		УчитыватьНДС        = Основание.УчитыватьНДС; 
		СуммаВключаетНДС    = Основание.СуммаВключаетНДС;
		ОбъектСтроительства = Основание.ОбъектСтроительства;
		Комментарий         = "Заполнен на основании " + Основание;
		ВалютаДокумента 		= Основание.ВалютаДокумента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		//ТипЦен 					= Основание.ТипЦен;
		ДокументОснование = Основание;
		
		Для Каждого ТекСтрока из Основание.Услуги Цикл
			НоваяСтрока						= Услуги.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
			НоваяСтрока.Содержание 			= ТекСтрока.Содержание;
			НоваяСтрока.Количество 			= ТекСтрока.Количество;
			//НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Цена 			    = ТекСтрока.Цена;
			НоваяСтрока.Сумма 			    = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 			= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 			= ТекСтрока.СуммаНДС;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
		
		Дата = ТекущаяДата();
		Организация         = Основание.Организация;
		Контрагент          = Основание.Контрагент;
		ДоговорКонтрагента  = Основание.ДоговорКонтрагента;
		СуммаДокумента      = Основание.СуммаДокумента;
		УчитыватьНДС        = Основание.УчитыватьНДС; 
		СуммаВключаетНДС    = Основание.СуммаВключаетНДС;
		Комментарий         = "Заполнен на основании " + Основание;
		ВалютаДокумента 		= Основание.ВалютаДокумента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		ДокументОснование = Основание;
		СтруктурнаяЕдиница = Основание.Организация.ОсновнойБанковскийСчет;
		
		Для Каждого ТекСтрока из Основание.Услуги Цикл
			НоваяСтрока						= Услуги.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
			НоваяСтрока.Содержание 			= ТекСтрока.Содержание;
			НоваяСтрока.Количество 			= ТекСтрока.Количество;
			НоваяСтрока.Цена 			    = ТекСтрока.Цена;
			НоваяСтрока.Сумма 			    = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 			= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 			= ТекСтрока.СуммаНДС;
		КонецЦикла;
		
		Для Каждого ТекСтрока из Основание.Товары Цикл
			НоваяСтрока						= Товары.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения	= ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество 			= ТекСтрока.Количество;
			НоваяСтрока.Цена 			    = ТекСтрока.Цена;
			НоваяСтрока.Сумма 			    = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 			= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 			= ТекСтрока.СуммаНДС;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = "Невозможно записать документ: "+СокрЛП(ЭтотОбъект);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(Отказ,заголовок);
	ПроверитьЗаполнениеТабличнойЧастиТовары(Отказ,заголовок);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();