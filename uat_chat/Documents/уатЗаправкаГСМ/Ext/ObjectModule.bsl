////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем ПризнакФормированияТиповыхДокументов Экспорт; // Если Истина, то при проведении будут формироваться типовые док.
Перем ПризнакФормированияТиповыхДокументовТолькоДляНовых Экспорт; // Если Истина, то при формировании типовых
//документов, они будут формироваться только для тех документов УАТ, для которых еще не были сформированы типовые.
Перем ПризнакРедактированияИзПутевогоЛиста Экспорт; // Если документ вводится/редактируется из путевого листа
Перем ПризнакРедактированияИзПутевогоЛистаСсылка Экспорт;
// Если документ вводится/редактируется из путевого листа, ссылка на путевой лист

Процедура ЗаправкиПриИзмененииГСМ(ТекСтрока) Экспорт
КонецПроцедуры


//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Получает данные по регистру Номенклатура ГСМ
// Это плотность ГСМ, группа ГСМ (топливо, талон литровый/рублевый), ГСМ дла талона
//
Функция ПолучитьПараметрыНоменклатурыГСМ(ГСМ)
	// получим результат запроса по товарной таблице
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатНоменклатураГСМ.Номенклатура
	|	КОНЕЦ КАК НоменклатураГСМ,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Плотность <> 0
	|			ТОГДА уатЗаправкаГСМЗаправки.Количество * уатЗаправкаГСМЗаправки.Плотность
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Количество
	|	КОНЕЦ КАК Количество,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка
	|	И уатЗаправкаГСМЗаправки.ГСМ = &ГСМ";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ГСМ", ГСМ);
	Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Рез.Выгрузить()[0];
	КонецЕсли;
	
КонецФункции

// Процедура заполняет стоимость номенклатуры ГСМ
Процедура ЗаполнитьСтоимостьНоменклатурыГСМ() Экспорт
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ОчиститьСтоимостьНоменклатурыГСМ();
	
	//Остатки партии по всей номенклатуре ГСМ
	ОстаткиПартийВсейНоменклатуры = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартии.Скопировать();
	
	//Перебираем строки номенклатуры ГСМ, которую надо списать
	Для каждого текСтрока Из Заправки Цикл //цикл по заправкам
		ДанныеПоНоменклатуреГСМ = ПолучитьПараметрыНоменклатурыГСМ(текСтрока.ГСМ);
		Если ДанныеПоНоменклатуреГСМ = Неопределено Тогда
			Сообщить("Не обнаружены данные по номенклатуре ГСМ """ + текСтрока.ГСМ + """", СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
		мСписаноСтоимость  = 0;
		
		НадоСписатьКоличество = ДанныеПоНоменклатуреГСМ.Количество;
				
		//Получение остатков позиции номенклатуры по партиям
		РезультатЗапросаПартии = ОстаткиПартийВсейНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, Склад", текСтрока.ГСМ, АЗС.Контрагент_Склад));
				
		Для Каждого СтрокаПартии Из РезультатЗапросаПартии Цикл // цикл по партиям
			Если (НадоСписатьКоличество  <= 0) Тогда
				Прервать; // Все списали
			КонецЕсли;      
			
			мКоличество = Мин(НадоСписатьКоличество, СтрокаПартии.Количество);
			
			мСтоимость = ?(НадоСписатьКоличество > СтрокаПартии.Количество, СтрокаПартии.Стоимость,
				НадоСписатьКоличество*СтрокаПартии.Стоимость/СтрокаПартии.Количество);
			
			Если мКоличество > 0 Или мСтоимость > 0 Тогда
				СтрокаПартии.Количество = СтрокаПартии.Количество - мКоличество; //обновим количество партии
				СтрокаПартии.Стоимость = СтрокаПартии.Стоимость - мСтоимость; //обновим стоимость партии
				
				текСтрока.Сумма = текСтрока.Сумма + мСтоимость;
			КонецЕсли;
			
			НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьСтоимостьНоменклатурыГСМ()
	Для Каждого ТекСтрока Из Заправки Цикл
		ТекСтрока.Сумма = 0;
		ТекСтрока.СуммаНДС = 0;
	КонецЦикла;
КонецПроцедуры

// Процедура обеспечивает проведение по партиям. Поскольку заправки могут быть выполнены в различное время
// то для корректного получения партий необходимо перед списанием очередной списывать предыдущие. В связи с этим 
// движения делаются последовательно с группировкой по каждой дате. 
//
Процедура ПроведениеПоПартиям(СтруктураДополнительныеСвойства, Движения, Отказ) 
	
	ТаблицаГСМДата = Новый ТаблицаЗначений;
	ТаблицаГСМДата.Колонки.Добавить("Склад"       ,Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаГСМДата.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаГСМДата.Колонки.Добавить("Количество"  ,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));

	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад КАК Склад,
	|	ТаблицаДокумента.ГСМ КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.Плотность = 0
	|				ТОГДА ТаблицаДокумента.Количество
	|			ИНАЧЕ ТаблицаДокумента.Количество * ТаблицаДокумента.Плотность
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО ТаблицаДокумента.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ГСМ,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад,
	|	ТаблицаДокумента.Ссылка,
	|	уатНоменклатураГСМ.ГруппаГСМ,
	|	уатНоменклатураГСМ.ГСМТалона
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Период";
	
	мЗапрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаГСМ = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГСМ.Следующий() Цикл
		ВыборкаГруппировкаДата = ВыборкаГСМ.Выбрать();
		ТаблицаГСМДата.Очистить();
		Пока ВыборкаГруппировкаДата.Следующий() Цикл
			НовСтрока = ТаблицаГСМДата.Добавить();
			НовСтрока.Склад        = ВыборкаГруппировкаДата.склад;
			НовСтрока.Номенклатура = ВыборкаГруппировкаДата.Номенклатура;
			НовСтрока.Количество   = ВыборкаГруппировкаДата.Количество;
		КонецЦикла;
		ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(ТаблицаГСМДата,уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),ВыборкаГСМ.Период);
		
		ЗапросПартии = Новый Запрос();
		ЗапросПартии.Текст = 
		"ВЫБРАТЬ
		|	ТабДанных.Склад,
		|	ТабДанных.Номенклатура,
		|	ТабДанных.Партия,
		|	ТабДанных.Количество,
		|	ТабДанных.Стоимость,
		|	ТабДанных.СтоимостьУпр
		|ПОМЕСТИТЬ ВремТаблицаПартий
		|ИЗ
		|	&ТаблицаПарам КАК ТабДанных
		|;
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период,
		|	&Регистратор,
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.Партия,
		|	ТабДанных.Номенклатура,
		|	ТабДанных.Количество,
		|	ТабДанных.Стоимость,
		|	ТабДанных.СтоимостьУпр
		|ИЗ ВремТаблицаПартий КАК ТабДанных";
		
		ЗапросПартии.УстановитьПараметр("Период"      , ВыборкаГСМ.Период);
		ЗапросПартии.УстановитьПараметр("ТаблицаПарам", ТаблицаПартий);
		ЗапросПартии.УстановитьПараметр("Регистратор" , Ссылка);
		
		МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
		ТаблицаДвижений = МассивРезультатов[1].Выгрузить();
		
		Движения.уатПартииТоваровНаСкладах.Загрузить(ТаблицаДвижений);
		Движения.уатПартииТоваровНаСкладах.Записать(Ложь);
		
	КонецЦикла;

	
	//мЗапрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТабНоменклатуры.Склад,
	//|	ТабНоменклатуры.Номенклатура,
	//|	ТабНоменклатуры.Количество
	//|ИЗ 
	//|	ТаблицаДокументаЗаправки КАК ТабНоменклатуры";
	//
	//ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),СтруктураДополнительныеСвойства.УчетнаяПолитикаУАТ.СпособОценкиМПЗ,СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	//
	//ЗапросПартии = Новый Запрос();
	//ЗапросПартии.Текст = 
	//"ВЫБРАТЬ
	//|	ТабДанных.Склад,
	//|	ТабДанных.Номенклатура,
	//|	ТабДанных.Партия,
	//|	ТабДанных.Количество,
	//|	ТабДанных.Стоимость,
	//|	ТабДанных.СтоимостьУпр
	//|ПОМЕСТИТЬ ВремТаблицаПартий
	//|ИЗ
	//|	&ТаблицаПарам КАК ТабДанных
	//|;
	//|ВЫБРАТЬ
	//|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	//|	&Период,
	//|	&Регистратор,
	//|	ТабДанных.Склад КАК Склад,
	//|	ТабДанных.Партия,
	//|	ТабДанных.Номенклатура,
	//|	ТабДанных.Количество,
	//|	ТабДанных.Стоимость,
	//|	ТабДанных.СтоимостьУпр
	//|ИЗ ВремТаблицаПартий КАК ТабДанных";
	//
	//ЗапросПартии.УстановитьПараметр("Период"      , ссылка.Дата);
	//ЗапросПартии.УстановитьПараметр("ТаблицаПарам", ТаблицаПартий);
	//ЗапросПартии.УстановитьПараметр("Регистратор" , Ссылка);

	//МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	//ТаблицаДокумента = МассивРезультатов[1].Выгрузить();

	
	
КонецПроцедуры


//==================================================================================
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		СтандартнаяОбработка = Ложь;
		
		уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		ДокументОснование = ДанныеЗаполнения;
		
		Организация   = ДанныеЗаполнения.Организация;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Дата          = ДанныеЗаполнения.ДатаВыезда;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ТранспортноеСредство) И НЕ ЗначениеЗаполнено(Колонна) Тогда
			Колонна = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ДанныеЗаполнения.ТранспортноеСредство, "Колонна", Дата).Колонна;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АЗС) Тогда
			АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
			Если ТипЗнч(АЗС.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
				ДоговорКонтрагента = АЗС.Контрагент_Склад.ОсновнойДоговорКонтрагента;
				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					ОтражатьВНалоговомУчете = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидДвиженияГСМ) Тогда
			ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
		КонецЕсли;
		
		//добавим основной ТС
		НоваяСтрока = Заправки.Добавить();
		НоваяСтрока.ПутевойЛист = ДанныеЗаполнения.Ссылка;
		НоваяСтрока.ТС          = ДанныеЗаполнения.ТранспортноеСредство;
		НоваяСтрока.Дата        = ДанныеЗаполнения.ДатаВыезда;
		НоваяСтрока.Водитель    = ДанныеЗаполнения.Водитель1;
		Если ВидДвиженияГСМ <> Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ГСМ) И ЗначениеЗаполнено(ДанныеЗаполнения.ТранспортноеСредство) Тогда
				НоваяСтрока.ГСМ = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ДанныеЗаполнения.ТранспортноеСредство).Модель.ОсновноеТопливо;
				ЗаправкиПриИзмененииГСМ(НоваяСтрока);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта) И ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта Тогда
				НоваяСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(НоваяСтрока.ТС, НоваяСтрока.Водитель);
			КонецЕсли;	
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
			НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		НоваяСтрока.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

 
Процедура ОтразитьВыдачуГСМ(Отказ)
	
	Запрос = Новый Запрос;          
	Запрос.Текст = "ВЫБРАТЬ
				   |    уатЗаправкаГСМЗаправки.Ссылка.Дата Период,
				   |    Значение(ВидДвиженияНакопления.Приход) ВидДвижения,
	               |	уатЗаправкаГСМЗаправки.ТС,
	               |	уатЗаправкаГСМЗаправки.ГСМ,
				   |    CASE WHEN ОборудованиеРабота = Значение(Справочник.ОборудованиеРаботыГСМ.ПустаяСсылка) Тогда Истина ELSE ложь END БакОсновной,
	               |	уатЗаправкаГСМЗаправки.Ссылка,
	               |	уатЗаправкаГСМЗаправки.Количество,
	               |	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
	               |	уатЗаправкаГСМЗаправки.Ссылка.АЗС АЗС,
	               |	уатЗаправкаГСМЗаправки.Ссылка.АЗС Партия,
	               |	уатЗаправкаГСМЗаправки.Ссылка     ДокПартии,
	               |	уатЗаправкаГСМЗаправки.Водитель,
	               |	уатЗаправкаГСМЗаправки.ПутевойЛист  ПЛ,
	               |	0  Слив
	               |ИЗ
	               |	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	               |ГДЕ ссылка = &сс
				   |
				   |UNION ALL
				   |
				   //Уберем привлеченников , сделаем слив на склад, т.к. потом будет реализация со склада
				   |ВЫБРАТЬ
				   |    уатЗаправкаГСМЗаправки.Ссылка.Дата Период,
				   |    Значение(ВидДвиженияНакопления.РАсход) ВидДвижения,
	               |	уатЗаправкаГСМЗаправки.ТС,
	               |	уатЗаправкаГСМЗаправки.ГСМ,
				   |    CASE WHEN ОборудованиеРабота = Значение(Справочник.ОборудованиеРаботыГСМ.ПустаяСсылка) Тогда Истина ELSE ложь END БакОсновной,
	               |	уатЗаправкаГСМЗаправки.Ссылка,
	               |	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
	               |	уатЗаправкаГСМЗаправки.Количество,
	               |	Значение(Справочник.уатАЗС.СкладРеализации) АЗС,
	               |	уатЗаправкаГСМЗаправки.Ссылка.АЗС Партия,
	               |	уатЗаправкаГСМЗаправки.Ссылка     ДокПартии,
	               |	уатЗаправкаГСМЗаправки.Водитель,
	               |	уатЗаправкаГСМЗаправки.ПутевойЛист  ПЛ,
				   |    2 Слив
	               |ИЗ
	               |	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
				   |INNER JOIN РегистрСведений.уатМестонахождениеТС.СрезПоследних(&дт, ТС в (SELECT ТС  FROM Документ.уатЗаправкаГСМ.Заправки)) КАК уатМестонахождениеТССрезПоследних
				   |        ON уатМестонахождениеТССрезПоследних.ТС = уатЗаправкаГСМЗаправки.ТС  и уатМестонахождениеТССрезПоследних.Состояние = Значение(Справочник.уатСостояниеТС.Привлеченный)
				   |
	               |ГДЕ ссылка = &сс
				   |";
				  Запрос.УстановитьПараметр("сс",Ссылка);
				  Запрос.УстановитьПараметр("Дт",Дата);
				  ТБл = запрос.Выполнить().Выгрузить();
	
	 
	 Рег = Движения.уатОстаткиГСМнаТС;
	 Рег.Записывать = Истина;   
	 Рег.Загрузить(Тбл);
	 
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
    // Инициализация данных документа - только по партиям
	//Документы.уатЗаправкаГСМ.ИнициализироватьДанныеДокументаПоПартиям(Ссылка, ДополнительныеСвойства);
	
	// Заполняем цены номенклатуры, если конфигурация объединена с типовой и складской учет ведется также типовой
	//Если флОтражатьВПартиях Тогда
	//	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
	//		ЗаполнитьСтоимостьНоменклатурыГСМ();
	//	Иначе
	//		тблЗаправки = Заправки.Выгрузить().Скопировать();
	//		тблЗаправки.Колонки.ГСМ.Имя = "Номенклатура";
	//		Для Каждого ТекСтрока Из тблЗаправки Цикл
	//			Если ТекСтрока.Плотность <> 0 Тогда
	//				ТекСтрока.Количество = ТекСтрока.Количество * ТекСтрока.Плотность;
	//			КонецЕсли;
	//		КонецЦикла;
	//		уатОбщегоНазначения.уатЗаполнитьЦеныНоменклатуры(тблЗаправки, Дата, АЗС.Контрагент_Склад, Организация);
	//	КонецЕсли;
	//	Записать();
	//КонецЕсли;
	
	// Инициализация данных документа - остальные (все кроме партий)
    Документы.уатЗаправкаГСМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
    // Подготовка наборов записей.
    уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
    
    // Отражение в разделах учета.
	//Если флОтражатьВПартиях И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
	//	ПроведениеПоПартиям(ДополнительныеСвойства, Движения, Отказ);
	//КонецЕсли;
	ОтразитьВыдачуГСМ(Отказ);
	//уатПроведение.ОтразитьОборотыПоЗаправкамГСМ(ДополнительныеСвойства, Движения, Отказ);

    // Запись наборов записей.
    уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
    
    // Контроль возникновения отрицательного остатка.
	//Если флОтражатьВПартиях И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
	//	Документы.уатЗаправкаГСМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	//КонецЕсли;
	
	//Если Отказ И флОтражатьВПартиях Тогда
	//	ОчиститьСтоимостьНоменклатурыГСМ();
	//КонецЕсли;
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	
	уатОбщегоНазначения.уатДокументПередЗаписью(ЭтотОбъект, Отказ, Права, РежимЗаписи, РежимПроведения);
	
	Если глОбщий.ЕстьРасходГСМзаМесяц(Дата) ТОгда
		Отказ = Истина;
		ВозвраТ;
	КонецЕСЛИ;
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	КоличествоДокумента = Заправки.Итог("Количество");
	
КонецПроцедуры // ПередЗаписью

// Процедура вызывается перед удалением документа
//
Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ПриКопировании(ОбъектКопирования)
	Для Каждого ТекСтрока Из Заправки Цикл
		Если ТекСтрока.ПутевойЛист.Рассчитан Тогда
			ТекСтрока.ПутевойЛист = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	//Если НЕ Отказ Тогда
	//	Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные
	//		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
	//		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Тогда
	//		
	//		СтруктураПолей = Новый Структура();
	//		Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта Тогда
	//			СтруктураПолей.Вставить("ПластиковаяКарта");
	//		
	//		Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда
	//			СтруктураПолей.Вставить("Водитель");
	//		КонецЕсли;
	//		
	//		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заправки", СтруктураПолей, Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗАпрос.Текст =  "ВЫБРАТЬ
	                |	уатЗаправкаГСМЗаправки.Номерстроки,
	                |	уатЗаправкаГСМЗаправки.ТС,
	                |	уатЗаправкаГСМЗаправки.ПутевойЛист.ТранспортноеСредство,
	                |	уатЗаправкаГСМЗаправки.ПутевойЛист
	                |ИЗ
	                |	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
					|WHERE ссылка = &сс и ТС <> ПутевойЛист.ТранспортноеСредство";
					ЗАпрос.УстановитьПараметр("сс",ссылка);
					Тбл = Запрос.Выполнить().Выгрузить();
					ДЛя каждого стр из Тбл Цикл
						Сообщить("В строке "+Стр.НомерСТроки+" автомобиль не совпадает с ТС в путевом листе!");
						ОТказ = Истина;
					КонецЦИкла;
					
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатЗаправкаГСМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Очищаем цены ГСМ
	Если НЕ Отказ И (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад ИЛИ
		ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны) Тогда
		
		ОчиститьСтоимостьНоменклатурыГСМ();
	КонецЕсли;
КонецПроцедуры

Процедура Печать() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ DISTINCT
				   |	уатЗаправкаГСМЗаправки.НомерСТроки,
	               |	уатЗаправкаГСМЗаправки.ТС,
	               |	уатЗаправкаГСМЗаправки.ТС.ГаражныйНомер КАК ГарНом,
	               |	уатЗаправкаГСМЗаправки.ТС.ГосударственныйНомер КАК ГосНом,
	               |	уатЗаправкаГСМЗаправки.ГСМ,
	               |	уатЗаправкаГСМЗаправки.Водитель,
	               |	уатЗаправкаГСМЗаправки.Водитель.Код КАК ТабНом,
	               |	уатЗаправкаГСМЗаправки.Количество,
	               |	уатЗаправкаГСМЗаправки.Дата,
	               |	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	               |	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	               |	уатЗаправкаГСМЗаправки.ПутевойЛист.Номер КАК НомерПЛ,
	               |	уатЗаправкаГСМЗаправки.Ссылка.Номер Номер,
				   |    CASE WHEN тблЗап.ТС IS NULL THEN 0 ELSE 1 END Повтор
	               |ИЗ
	               |	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
				   |LEFT OUTER JOIN Документ.уатЗаправкаГСМ.Заправки тблЗап ON ТблЗап.ссылка = &сс
				   |														и тблЗап.НомерСТроки <> уатЗаправкаГСМЗаправки.НомерСТроки
				   |														и тблЗап.ТС = уатЗаправкаГСМЗаправки.ТС
				   |														и тблЗап.ГСМ = уатЗаправкаГСМЗаправки.ГСМ
				   |														и РазностьДат(ТблЗап.Дата,уатЗаправкаГСМЗаправки.Дата,Минута) <  11
				   |														и РазностьДат(ТблЗап.Дата,уатЗаправкаГСМЗаправки.Дата,Минута) > -11
	               |ГДЕ
	               |	уатЗаправкаГСМЗаправки.Ссылка = &сс";
				   Запрос.УстановитьПараметр("сс",Ссылка);
				   ТБл = Запрос.Выполнить().Выгрузить();
				   
				   
				   
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Макет");
	
	облШапка  = Макет.ПолучитьОбласть("Шапка");
	облСтрока = Макет.ПолучитьОбласть("Строка");
	облИтог   = Макет.ПолучитьОбласть("Итог");
	облИтогГСМ= Макет.ПолучитьОбласть("ИтогГСМ");
	облИтогСтр   = Макет.ПолучитьОбласть("СтрИтог");
	
	облШапка.Параметры.Заполнить(ТБл[0]);
	Таб.Вывести(ОблШапка);
	
	Ном=0;
	ДЛя каждого стр из Тбл Цикл
		Ном = Ном+1;
		облСтрока.Параметры.Заполнить(Стр);
		облСТрока.Параметры.Ном = Ном;
		Таб.Вывести(облСтрока);
		
		Если Стр.Повтор = 1 ТОгда
			Таб.Область(Таб.ВысотаТаблицы,1,Таб.ВысотаТаблицы,Таб.ШиринаТаблицы).ЦветФона = WebЦвета.Красный;
		КонецЕСЛИ;
	КонецЦикла;
	
	Таб.Вывести(облИтогСтр);
	
	Тбл.Свернуть("ГСМ","Количество");
	ДЛя каждого стр из Тбл Цикл
		облИтогГСМ.Параметры.Заполнить(Стр);
		Таб.Вывести(облИтогГСМ);
	КонецЦикла;
	
	облИтог.Параметры.Количество = Тбл.Итог("Количество");
	Таб.Вывести(облИтог);
	
	Таб.ТолькоПросмотр = Истина;
	Таб.ОтображатьСетку = Ложь;
	Таб.ОтображатьЗаголовки = Ложь;
	Таб.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Таб.АвтоМасштаб = Истина;
	
	Таб.Показать();
	
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

ПризнакРедактированияИзПутевогоЛиста = Ложь;
ПризнакРедактированияИзПутевогоЛистаСсылка = Документы.уатПутевойЛист.ПустаяСсылка();