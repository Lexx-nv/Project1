// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОборотыГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаПоПартиям(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Если (ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад ИЛИ
		ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны)
		И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		
		СформироватьТаблицаПартий(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПартий(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад КАК Склад,
	|	ТаблицаДокумента.ГСМ КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.Плотность = 0
	|				ТОГДА ТаблицаДокумента.Количество
	|			ИНАЧЕ ТаблицаДокумента.Количество * ТаблицаДокумента.Плотность
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ТаблицаДокументаЗаправки
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО ТаблицаДокумента.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ГСМ,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад,
	|	ТаблицаДокумента.Ссылка,
	|	уатНоменклатураГСМ.ГруппаГСМ,
	|	уатНоменклатураГСМ.ГСМТалона";
	
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
	//мЗапрос.УстановитьПараметр("Склад", ДокументСсылка.Склад);
	//мЗапрос.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Выборка = мЗапрос.Выполнить();
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТабНоменклатуры.Склад,
	|	ТабНоменклатуры.Номенклатура,
	|	ТабНоменклатуры.Количество
	|ИЗ 
	|	ТаблицаДокументаЗаправки КАК ТабНоменклатуры";
	
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ТабДанных.Склад,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Партия,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период,
	|	&Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр
	|ИЗ ВремТаблицаПартий КАК ТабДанных";
	
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);

	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	ТаблицаДокумента = МассивРезультатов[1].Выгрузить();
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаДокумента;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	Блокировка.Заблокировать();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", ТаблицаДокумента);
	
КонецПроцедуры // СформироватьТаблицаПартий()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// получим результат запроса по товарной таблице
	Запрос = Новый Запрос();
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.ТС,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатНоменклатураГСМ.Номенклатура
	|	КОНЕЦ КАК ГСМ,
	|	уатНоменклатураГСМ.ГруппаГСМ,
	|	уатЗаправкаГСМЗаправки.Количество,
	|	уатЗаправкаГСМЗаправки.Сумма,
	|	уатЗаправкаГСМЗаправки.Валюта,
	|	уатЗаправкаГСМЗаправки.Дата,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ,
	|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ1
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
	
	тблГСМ = Запрос.Выполнить().Выгрузить();
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГСМнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = тблГСМ;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГСМ", "ГСМ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	Блокировка.Заблокировать();
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		Если ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			ТекСтрока.Количество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(ТекСтрока.Дата, ТекСтрока.АЗС, ТекСтрока.ГСМ1, ТекСтрока.Количество);
		КонецЕсли;	
	КонецЦикла;
	
	тблГСМ.Колонки.Добавить("ВидДвижения");
	тблГСМ.Колонки.Добавить("Партия");
	тблГСМ.Колонки.Добавить("Колонна");
	тблГСМ.Колонки.Добавить("Регистратор");
	тблГСМ.Колонки.Добавить("Стоимость");
	тблГСМ.Колонки.Добавить("СтоимостьУпр");
	тблГСМ.Колонки.Дата.Имя = "Период";
	
	мВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпр = мВалютаРегл;
	КонецЕсли;
	мКурсВалютыРеглСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегл, ДокументСсылка.Дата);
	мКурсВалютыРегл = ?(мКурсВалютыРеглСтруктура.Кратность = 0, 0, мКурсВалютыРеглСтруктура.Курс / мКурсВалютыРеглСтруктура.Кратность);
	мКурсВалютыУпрСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр, ДокументСсылка.Дата);
	мКурсВалютыУпр = ?(мКурсВалютыУпрСтруктура.Кратность = 0, 0, мКурсВалютыУпрСтруктура.Курс / мКурсВалютыУпрСтруктура.Кратность);
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		ТекПартия = ДокументСсылка;
	Иначе
		ТекПартия = Неопределено;
	КонецЕсли;
	
	//колонны ТС (для УАТ ПРОФ)
	Для Каждого ТекСтрока Из тблГСМ Цикл
		СтруктураМестонахождение = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период);
		ТекСтрока.Колонна = СтруктураМестонахождение.Колонна;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		ТекСтрока.Регистратор = ДокументСсылка;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ТекСтрока.Партия = ТекПартия;
		
		ТекСтрока.Стоимость = 0;
		ТекСтрока.СтоимостьУпр = 0;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", тблГСМ);
	
КонецПроцедуры // СформироватьТаблицаГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	// получим результат запроса по таблице ГСМ
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Регистратор,
	|	уатЗаправкаГСМЗаправки.Дата КАК Период,
	|	уатЗаправкаГСМЗаправки.Ссылка.Колонна КАК Колонна,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатЗаправкаГСМЗаправки.ГСМ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НоменклатураТалонов,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.ГСМ
	|	КОНЕЦ КАК ГСМ,
 	|	уатНоменклатураГСМ.ГруппаГСМ КАК ГруппаГСМ,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ КАК ВидЗаправки,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта КАК ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Сумма КАК Стоимость,
	|	уатЗаправкаГСМЗаправки.Сумма КАК СтоимостьУпр,
	|	уатЗаправкаГСМЗаправки.Валюта КАК Валюта,
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	|	уатЗаправкаГСМЗаправки.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист КАК ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.НомераТалонов,
	|	уатЗаправкаГСМЗаправки.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатЗаправкаГСМЗаправки.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоТалонов
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	тблГСМ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		Если ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			ТекСтрока.Количество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(ТекСтрока.Период, ТекСтрока.АЗС, ТекСтрока.НоменклатураТалонов, ТекСтрока.Количество);
		КонецЕсли;
		
		
		
		ТекКолонна = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТекСтрока.ТС, "Колонна", ТекСтрока.Период).Колонна;
		Если ЗначениеЗаполнено(ТекКолонна) Тогда
			ТекСтрока.Колонна = ТекКолонна;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыПоЗаправкамГСМ", тблГСМ);
КонецПроцедуры // СформироватьТаблицаОборотыГСМ()

Процедура ВыполнитьКонтрольСтарая(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если (ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад ИЛИ ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны)
	   И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		
		ТаблицаДат = Новый ТаблицаЗначений;
		ТаблицаДат.Колонки.Добавить("Дата");
		Для каждого ТекСтрокаЗаправка ИЗ ДокументСсылка.Заправки Цикл
			НовСтрока = ТаблицаДат.Добавить();
			НовСтрока.Дата = ТекСтрокаЗаправка.Дата;
		КонецЦикла;
		
		ТаблицаДат.Свернуть("Дата");
		
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатЗаправкаГСМЗаправки.ГСМ
		|ПОМЕСТИТЬ СписокГСМДокумента
		|ИЗ
		|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
		|ГДЕ
		|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		СчетчикДат = 1;
		Для каждого ТекДата ИЗ ТаблицаДат Цикл
			Если СчетчикДат <> 1 тогда
				мЗапрос.Текст = мЗапрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			мЗапрос.Текст = мЗапрос.Текст + "
			|ВЫБРАТЬ
			|	&Дата" + СчетчикДат + " КАК Дата,
			|	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&ДатаГр" + СчетчикДат + " , Склад = &Склад И Номенклатура В(Выбрать СписокГСМДокумента.ГСМ ИЗ СписокГСМДокумента)) КАК уатПартииТоваровНаСкладах
			|ГДЕ
			|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) < 0";
			мЗапрос.УстановитьПараметр("ДатаГр"+СчетчикДат,Новый Граница(ТекДата.Дата,ВидГраницы.Включая));
			мЗапрос.УстановитьПараметр("Дата"+СчетчикДат  ,ТекДата.Дата);
			СчетчикДат = СчетчикДат + 1;
		КонецЦикла;
		
		мЗапрос.УстановитьПараметр("Склад" , ДокументСсылка.АЗС.Контрагент_Склад);
		мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Рез = мЗапрос.ВыполнитьПакет()[1].Выбрать();
		
		Пока Рез.Следующий() Цикл
			ТекстСообщения = "Номенклатура """ + Рез.Номенклатура + """, Склад """ + ДокументСсылка.АЗС.Контрагент_Склад + """ ";
			ТекстСообщения = ТекстСообщения + " - отрицательный остаток Номенклатуры на Складе на " + Рез.Дата + ".";
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Остаток на складе: " + Рез.КоличествоОстаток + ".";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если (ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад ИЛИ ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны)
	   И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ)
	   И ДокументСсылка.Заправки.Количество() > 0 Тогда
		
		ТаблицаДат = Новый ТаблицаЗначений;
		ТаблицаДат.Колонки.Добавить("Дата");
		ТаблицаДат.Колонки.Добавить("ГСМ");
		Для каждого ТекСтрокаЗаправка ИЗ ДокументСсылка.Заправки Цикл
			НовСтрока = ТаблицаДат.Добавить();
			НовСтрока.Дата = ТекСтрокаЗаправка.Дата;
			НовСтрока.ГСМ = ТекСтрокаЗаправка.ГСМ;
		КонецЦикла;
		
		мЗапрос = Новый Запрос;
		
		СчетчикДат = 1;
		Для каждого ТекДата ИЗ ТаблицаДат Цикл
			Если СчетчикДат <> 1 тогда
				мЗапрос.Текст = мЗапрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			мЗапрос.Текст = мЗапрос.Текст + "
			|ВЫБРАТЬ
			|	&Дата" + СчетчикДат + " КАК Дата,
			|	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&ДатаГр" + СчетчикДат + ", Склад = &Склад И Номенклатура = &Номенклатура" + СчетчикДат + ") КАК уатПартииТоваровНаСкладах
			|ГДЕ
			|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) < 0";
			мЗапрос.УстановитьПараметр("ДатаГр" + СчетчикДат, Новый Граница(ТекДата.Дата, ВидГраницы.Включая));
			мЗапрос.УстановитьПараметр("Дата" + СчетчикДат, ТекДата.Дата);
			мЗапрос.УстановитьПараметр("Номенклатура" + СчетчикДат, ТекДата.ГСМ);
			СчетчикДат = СчетчикДат + 1;
		КонецЦикла;
		
		мЗапрос.УстановитьПараметр("Склад", ДокументСсылка.АЗС.Контрагент_Склад);
		Рез = мЗапрос.Выполнить().Выбрать();
		
		Пока Рез.Следующий() Цикл
			ТекстСообщения = "Номенклатура """ + Рез.Номенклатура + """, Склад """ + ДокументСсылка.АЗС.Контрагент_Склад + """ ";
			ТекстСообщения = ТекстСообщения + " - отрицательный остаток Номенклатуры на Складе на " + Рез.Дата + ".";
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Остаток на складе: " + Рез.КоличествоОстаток + ".";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
