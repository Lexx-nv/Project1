
// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка"          , ДокументСсылка);
	мЗапрос.УстановитьПараметр("СкладПолучатель" , ДокументСсылка.СкладПолучатель);
	мЗапрос.УстановитьПараметр("СкладОтправитель", ДокументСсылка.СкладОтправитель);
	мЗапрос.УстановитьПараметр("МоментВремени"   , СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	ТаблицаДокумента.Ссылка.СкладПолучатель КАК СкладПолучатель,
	|	&КоличествоДляЗамены КАК Количество,
	|	ТаблицаДокумента.Номенклатура
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатПеремещениеТоваров.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаТовары.СкладОтправитель КАК Склад,
	|	ТаблицаДокументаТовары.Номенклатура
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";	
	
	
	Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
		СтрокаРасчетаКоличества = "ВЫРАЗИТЬ(ТаблицаДокумента.Количество * ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3)) ";
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены",СтрокаРасчетаКоличества);	
	Иначе
		мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КоличествоДляЗамены","ТаблицаДокумента.Количество ");	
	КонецЕсли;
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
	
	Для каждого КолонкаРезультатЗапроса Из МассивРезультатов[1].Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТабНоменклатуры.СкладОтправитель КАК Склад,
	|	ТабНоменклатуры.Номенклатура,
	|	ТабНоменклатуры.Количество
	|ИЗ 
	|	ТаблицаДокументаТовары КАК ТабНоменклатуры";
	
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ТабДанных.Склад,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Партия,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период,
	|	&Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр
	|ИЗ ВремТаблицаПартий КАК ТабДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период,
	|	&Регистратор,
	|	&СкладПолучатель,
	|	ТабДанных.Партия,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр
	|ИЗ ВремТаблицаПартий КАК ТабДанных";
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);
	ЗапросПартии.УстановитьПараметр("СкладПолучатель", ДокументСсылка.СкладПолучатель);
	
	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", МассивРезультатов[1].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаПеремещениеТоваров, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	Документ.уатПеремещениеТоваров.Товары КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки("
	+	?(НЕ УдалениеПроведения,"&МоментВремени", "") + ",
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатПеремещениеТоваров.Товары КАК ТабНоменклатуры
	|						ГДЕ
	|						 	ТабНоменклатуры.Ссылка = &Ссылка
	|							)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО &Склад = уатПартииТоваровНаСкладахОстатки.Склад
	|		  И	ТаблицаДокумента.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	Если НЕ УдалениеПроведения тогда
		мЗапрос.УстановитьПараметр("Склад" , ДокументСсылкаПеремещениеТоваров.СкладОтправитель);
	Иначе
		мЗапрос.УстановитьПараметр("Склад" , ДокументСсылкаПеремещениеТоваров.СкладПолучатель);
	КонецЕсли;
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылкаПеремещениеТоваров);
	Если НЕ УдалениеПроведения Тогда
		мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	КонецЕсли;
	
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылкаПеремещениеТоваров);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстСообщения = "Для """ + Выборка.Номенклатура + """ получены отрицательные остатки на складе """ + мЗапрос.Параметры.Склад + """. Остаток на складе: " + Выборка.КоличествоОстаток;
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);	
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ ФОРМЫ

Функция ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПеремещениеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ПеремещениеТоваров.Организация,
		|	ПеремещениеТоваров.СкладОтправитель,
		|	ПеремещениеТоваров.СкладОтправитель.Представление КАК Поставщик,
		|	ПеремещениеТоваров.СкладПолучатель,
		|	ПеремещениеТоваров.СкладПолучатель.Представление КАК Покупатель,
		|	ПеремещениеТоваров.Товары.(
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Номенклатура.Код КАК Код,
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.уатПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПеремещениеТоваров.Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
		Макет = УправлениеПечатью.ПолучитьМакет("Документ.уатПеремещениеТоваров.Накладная");
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
		ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
		ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ВыводитьКоды = Истина;
		Колонка = "Код";
		
		ИмяШапки  = "ШапкаТаблицы";
		ИмяСтроки = "Строка";
		
		ФлагПечатиМест = Ложь;
		ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
		ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
		ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки
			+ ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
		КонецЕсли;
		Если ФлагПечатиМест Тогда
			ТабличныйДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");
		
		Ном = 0;
		
		// Выборка товаров
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			//ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				//Если Колонка = "Артикул" Тогда
				//	ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				//Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				//КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = ВыборкаСтрокТовары.Товар;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			Если ФлагПечатиМест Тогда
				ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабличныйДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		КонецЦикла;
		
		// Вывести подвал
		ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		Если ФлагПечатиМест Тогда
			ТабличныйДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПеремещениеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		мЗапрос = Новый Запрос;
		мЗапрос.УстановитьПараметр("Ссылка", ТекущийДокумент.Ссылка);
		мЗапрос.Текст = 
		"ВЫБРАТЬ
		|	уатПеремещениеТоваровТовары.Ссылка,
		|	уатПеремещениеТоваровТовары.Ссылка.Организация КАК Организация,
		|	уатПеремещениеТоваровТовары.Ссылка.Номер КАК НомерДокумента,
		|	уатПеремещениеТоваровТовары.Ссылка.Дата КАК ДатаДокумента,
		|	уатПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК ОтправительПодразделение,
		|	уатПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК ПолучательПодразделение,
		|	уатПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	уатПеремещениеТоваровТовары.Номенклатура,
		|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения,
		|	уатПеремещениеТоваровТовары.Количество КАК КоличествоМест,
		|	уатПеремещениеТоваровТовары.Номенклатура.Код КАК ТоварКод,
		|	уатПеремещениеТоваровТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		|	&КолВЕдХрОстатков КАК КолЕдХрОстатков,
		|	0 КАК Сумма,
		|	&ЕдИзмКодПоОКЕИ КАК ЕдиницаИзмеренияКодПоОКЕИ
		|ИЗ
		|	Документ.уатПеремещениеТоваров.Товары КАК уатПеремещениеТоваровТовары
		|ГДЕ
		|	уатПеремещениеТоваровТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатПартииТоваровНаСкладах.Номенклатура,
		|	уатПартииТоваровНаСкладах.Партия,
		|	уатПартииТоваровНаСкладах.Количество,
		|	уатПартииТоваровНаСкладах.Стоимость,
		|	уатПартииТоваровНаСкладах.СтоимостьУпр,
		|	уатПартииТоваровНаСкладах.Количество КАК ОсталосьКоличество,
		|	уатПартииТоваровНаСкладах.Стоимость КАК ОсталосьСумма
		|ИЗ
		|	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		|ГДЕ
		|	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		|	И уатПартииТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатПартииТоваровНаСкладах.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатПеремещениеТоваров.Ссылка,
		|	уатПеремещениеТоваров.Номер КАК НомерДокумента,
		|	уатПеремещениеТоваров.Дата КАК ДатаДокумента,
		|	уатПеремещениеТоваров.Организация,
		|	уатПеремещениеТоваров.СкладОтправитель КАК ОтправительПодразделение,
		|	уатПеремещениеТоваров.СкладПолучатель КАК ПолучательПодразделение
		|ИЗ
		|	Документ.уатПеремещениеТоваров КАК уатПеремещениеТоваров
		|ГДЕ
		|	уатПеремещениеТоваров.Ссылка = &Ссылка";
	
		Если НЕ Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено Тогда
			СтрокаРасчетаКоличества = " ВЫРАЗИТЬ(уатПеремещениеТоваровТовары.Количество * уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Коэффициент / уатПеремещениеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3)) ";
			СтрокаКодПоОКЕИ = " уатПеремещениеТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код ";
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КолВЕдХрОстатков",СтрокаРасчетаКоличества);
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&ЕдИзмКодПоОКЕИ"  ,СтрокаКодПоОКЕИ);
		Иначе
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КолВЕдХрОстатков"," уатПеремещениеТоваровТовары.Количество ");	
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&ЕдИзмКодПоОКЕИ" ," уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Код ");	
		КонецЕсли;
		
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		ТабНоменклатурыДок = МассивРезультатов[0].Выгрузить();
		ТабПартийДок       = МассивРезультатов[1].Выгрузить();
		ВыборкаШапка       = МассивРезультатов[2].Выбрать();
		ВыборкаШапка.следующий();
		Для Каждого ТекСтрокаДок ИЗ ТабНоменклатурыДок Цикл
			Если ТекСтрокаДок.КолЕдХрОстатков = 0 тогда продолжить; КонецЕсли;
			Для Каждого ТекСтрокаПартии ИЗ ТабПартийДок Цикл
				Если ТекСтрокаПартии.Номенклатура <> ТекСтрокаДок.Номенклатура 
					ИЛИ ТекСтрокаПартии.ОсталосьКоличество = 0 тогда
					Продолжить;
				КонецЕсли;
				СписатьКол = Мин(ТекСтрокаПартии.ОсталосьКоличество,ТекСтрокаДок.КолЕдХрОстатков);
				Если СписатьКол = ТекСтрокаПартии.ОсталосьКоличество тогда
					ТекСтрокаДок.Сумма = ТекСтрокаДок.Сумма + ТекСтрокаПартии.ОсталосьСумма;
				Иначе
					ТекСтрокаДок.Сумма = ТекСтрокаДок.Сумма + ТекСтрокаПартии.Стоимость/ТекСтрокаПартии.Количество * СписатьКол;
					ТекСтрокаПартии.ОсталосьСумма = ТекСтрокаПартии.ОсталосьСумма - ТекСтрокаДок.Сумма;
				КонецЕсли;
				ТекСтрокаДок.КолЕдХрОстатков = ТекСтрокаДок.КолЕдХрОстатков - СписатьКол;
				ТекСтрокаПартии.ОсталосьКоличество = ТекСтрокаПартии.ОсталосьКоличество - СписатьКол;
			КонецЦикла;
		КонецЦикла;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПеремещениеТоваров_ТОРГ13";
		Макет = ПолучитьОбщийМакет("ТОРГ13");
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента);
		ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаШапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента));
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущийДокумент);
		ОбластьМакета.Параметры.ДатаДокумента            = ВыборкаШапка.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ТабНоменклатурыДок.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// инициализация итогов по странице
		//ИтогКоличествоМестПоСтранице = 0;
		ИтогМассаБруттоПоСтранице    = 0;
		ИтогМассыНеттоПоСтранице     = 0;
		ИтогСуммыПоСтранице          = 0;
		
		// инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСумма       = 0;
		
		Ном = 0;
		
		// Выводим многострочную часть документа
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		
		// Выборка товаров
		Для Каждого ТекСтрокаДок ИЗ ТабНоменклатурыДок Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаДок.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				//ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
				
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// инициализация итогов по странице
				ИтогКоличествоМестПоСтранице = 0;
				ИтогМассаБруттоПоСтранице    = 0;
				ИтогМассаНеттоПоСтранице     = 0;
				ИтогСуммыПоСтранице          = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ТекСтрокаДок);
			ОбластьМакета.Параметры.ТоварНаименование = ТекСтрокаДок.ТоварНаименование;
			
			Если ТекСтрокаДок.КоличествоМест = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Сумма = ТекСтрокаДок.Сумма;
				Цена  = Окр(Сумма / ТекСтрокаДок.КоличествоМест, 2);
			КонецЕсли;
			ОбластьМакета.Параметры.Цена  = Цена;
			ОбластьМакета.Параметры.Сумма = Сумма;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Обновим итоги по странице
			//ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
			ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
			ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
			ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;
			
			// Обновим итогов по документу
			ИтогоКоличество  = ИтогоКоличество  + ТекСтрокаДок.КоличествоМест;
			ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
			ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
			ИтогоСумма       = ИтогоСумма       + Сумма;
			
		КонецЦикла;
		
		//ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		//ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
		ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ВыборкаШапка);
		ОбластьМакета.Параметры.ИтогоСуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, Константы.ВалютаРегламентированногоУчета.Получить());
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	                                                                            
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Ведомость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Ведомость", "Перемещение товаров", ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ13") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ13", "ТОРГ-13 (Накладная на внутреннее перемещение)", ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
	ДанныеПоВсемОбъектам,
	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	ОписаниеОбластей,
	ТипыМакетов,
	ДвоичныеДанныеМакетов));
	
КонецФункции