////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
//полученное из константы.
Перем мВалютаУпрУчета Экспорт; // Переменная хранит значение валюты управленческого учёта, полученное из константы.


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьПеремещениеТоваров()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ПеремещениеТоваров.Организация,
		|	ПеремещениеТоваров.СкладОтправитель,
		|	ПеремещениеТоваров.СкладОтправитель.Представление КАК Поставщик,
		|	ПеремещениеТоваров.СкладПолучатель,
		|	ПеремещениеТоваров.СкладПолучатель.Представление КАК Покупатель,
		|	ПеремещениеТоваров.Товары.(
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Номенклатура.Код КАК Код,
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.уатПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПеремещениеТоваров.Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
		Макет       = ПолучитьМакет("Накладная");
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Накладная на перемещение");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
		ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
		ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ВыводитьКоды = Истина;
		Колонка = "Код";
		
		ИмяШапки  = "ШапкаТаблицы";
		ИмяСтроки = "Строка";
		
		ФлагПечатиМест = Ложь;
		ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
		ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
		ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки
			+ ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
		КонецЕсли;
		Если ФлагПечатиМест Тогда
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		
		ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");
		
		Ном = 0;
		
		// Выборка товаров
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			//ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				//Если Колонка = "Артикул" Тогда
				//	ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				//Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				//КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = ВыборкаСтрокТовары.Товар;
			ТабДокумент.Присоединить(ОбластьТовар);
			
			Если ФлагПечатиМест Тогда
				ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьДанных);
			
		КонецЦикла;
		
		// Вывести подвал
		ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		Если ФлагПечатиМест Тогда
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПеремещениеТоваров()
	
	// Формирует табличный документ по унифицированной форме ТОРГ-13
	// 
	// Возвращаемое значение
	//  Табличный документ - унифицированная форма ТОРГ-13
	//
	Функция ПечатьТОРГ13()
		
		мЗапрос = Новый Запрос;
		мЗапрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		мЗапрос.Текст = 
		"ВЫБРАТЬ
		|	уатПеремещениеТоваровТовары.Ссылка,
		|	уатПеремещениеТоваровТовары.Ссылка.Организация КАК Организация,
		|	уатПеремещениеТоваровТовары.Ссылка.Номер КАК НомерДокумента,
		|	уатПеремещениеТоваровТовары.Ссылка.Дата КАК ДатаДокумента,
		|	уатПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК ОтправительПодразделение,
		|	уатПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК ПолучательПодразделение,
		|	уатПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	уатПеремещениеТоваровТовары.Номенклатура,
		|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения,
		|	уатПеремещениеТоваровТовары.Количество КАК КоличествоМест,
		|	уатПеремещениеТоваровТовары.Номенклатура.Код КАК ТоварКод,
		|	уатПеремещениеТоваровТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		|	&КолВЕдХрОстатков КАК КолЕдХрОстатков,
		|	0 КАК Сумма,
		|	&ЕдИзмКодПоОКЕИ КАК ЕдиницаИзмеренияКодПоОКЕИ
		|ИЗ
		|	Документ.уатПеремещениеТоваров.Товары КАК уатПеремещениеТоваровТовары
		|ГДЕ
		|	уатПеремещениеТоваровТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатПартииТоваровНаСкладах.Номенклатура,
		|	уатПартииТоваровНаСкладах.Партия,
		|	уатПартииТоваровНаСкладах.Количество,
		|	уатПартииТоваровНаСкладах.Стоимость,
		|	уатПартииТоваровНаСкладах.СтоимостьУпр,
		|	уатПартииТоваровНаСкладах.Количество КАК ОсталосьКоличество,
		|	уатПартииТоваровНаСкладах.Стоимость КАК ОсталосьСумма
		|ИЗ
		|	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		|ГДЕ
		|	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		|	И уатПартииТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатПартииТоваровНаСкладах.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатПеремещениеТоваров.Ссылка,
		|	уатПеремещениеТоваров.Номер КАК НомерДокумента,
		|	уатПеремещениеТоваров.Дата КАК ДатаДокумента,
		|	уатПеремещениеТоваров.Организация,
		|	уатПеремещениеТоваров.СкладОтправитель КАК ОтправительПодразделение,
		|	уатПеремещениеТоваров.СкладПолучатель КАК ПолучательПодразделение
		|ИЗ
		|	Документ.уатПеремещениеТоваров КАК уатПеремещениеТоваров
		|ГДЕ
		|	уатПеремещениеТоваров.Ссылка = &Ссылка";
		
		мЗапрос.УстановитьПараметр("Ссылка",Ссылка);
		Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
			СтрокаРасчетаКоличества = " ВЫРАЗИТЬ(уатПеремещениеТоваровТовары.Количество * уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Коэффициент / уатПеремещениеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Число(15,3)) ";
			СтрокаКодПоОКЕИ = " уатПеремещениеТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код ";
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КолВЕдХрОстатков",СтрокаРасчетаКоличества);
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&ЕдИзмКодПоОКЕИ",СтрокаКодПоОКЕИ);
		Иначе
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&КолВЕдХрОстатков"," уатПеремещениеТоваровТовары.Количество ");	
			мЗапрос.Текст = стрЗаменить(мЗапрос.Текст,"&ЕдИзмКодПоОКЕИ" ," уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Код ");	
		КонецЕсли;
		
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		ТабНоменклатурыДок = МассивРезультатов[0].Выгрузить();
		ТабПартийДок       = МассивРезультатов[1].Выгрузить();
		ВыборкаШапка       = МассивРезультатов[2].Выбрать();
		ВыборкаШапка.следующий();
		Для Каждого ТекСтрокаДок ИЗ ТабНоменклатурыДок Цикл
			Если ТекСтрокаДок.КолЕдХрОстатков = 0 тогда продолжить; КонецЕсли;
			Для Каждого ТекСтрокаПартии ИЗ ТабПартийДок Цикл
				Если ТекСтрокаПартии.Номенклатура <> ТекСтрокаДок.Номенклатура 
				 ИЛИ ТекСтрокаПартии.ОсталосьКоличество = 0 тогда
				 	Продолжить;
				КонецЕсли;
				СписатьКол = Мин(ТекСтрокаПартии.ОсталосьКоличество,ТекСтрокаДок.КолЕдХрОстатков);
				Если СписатьКол = ТекСтрокаПартии.ОсталосьКоличество тогда
					ТекСтрокаДок.Сумма = ТекСтрокаДок.Сумма + ТекСтрокаПартии.ОсталосьСумма;
				Иначе
					ТекСтрокаДок.Сумма = ТекСтрокаДок.Сумма + ТекСтрокаПартии.Стоимость/ТекСтрокаПартии.Количество * СписатьКол;
					ТекСтрокаПартии.ОсталосьСумма = ТекСтрокаПартии.ОсталосьСумма - ТекСтрокаДок.Сумма;
				КонецЕсли;
				ТекСтрокаДок.КолЕдХрОстатков = ТекСтрокаДок.КолЕдХрОстатков - СписатьКол;
				ТекСтрокаПартии.ОсталосьКоличество = ТекСтрокаПартии.ОсталосьКоличество - СписатьКол;
			КонецЦикла;
		КонецЦикла;
		
		Макет = ПолучитьОбщийМакет("ТОРГ13");
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента);
		ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаШапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента));
		ОбластьМакета.Параметры.НомерДокумента           = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
		ОбластьМакета.Параметры.ДатаДокумента            = ВыборкаШапка.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ТабДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ТабНоменклатурыДок.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// инициализация итогов по странице
		//ИтогКоличествоМестПоСтранице = 0;
		ИтогМассаБруттоПоСтранице    = 0;
		ИтогМассыНеттоПоСтранице     = 0;
		ИтогСуммыПоСтранице          = 0;
		
		// инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСумма       = 0;
		
		Ном = 0;
		
		// Выводим многострочную часть документа
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		
		// Выборка товаров
		Для Каждого ТекСтрокаДок ИЗ ТабНоменклатурыДок Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаДок.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				//ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// инициализация итогов по странице
				ИтогКоличествоМестПоСтранице = 0;
				ИтогМассаБруттоПоСтранице    = 0;
				ИтогМассаНеттоПоСтранице     = 0;
				ИтогСуммыПоСтранице          = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ТекСтрокаДок);
			ОбластьМакета.Параметры.ТоварНаименование = ТекСтрокаДок.ТоварНаименование;
			
			Если ТекСтрокаДок.КоличествоМест = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Сумма = ТекСтрокаДок.Сумма;
				Цена  = Окр(Сумма / ТекСтрокаДок.КоличествоМест, 2);
			КонецЕсли;
			ОбластьМакета.Параметры.Цена  = Цена;
			ОбластьМакета.Параметры.Сумма = Сумма;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Обновим итоги по странице
			//ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
			ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
			ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
			ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;
			
			// Обновим итогов по документу
			ИтогоКоличество  = ИтогоКоличество  + ТекСтрокаДок.КоличествоМест;
			ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
			ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
			ИтогоСумма       = ИтогоСумма       + Сумма;
			
		КонецЦикла;
		
		//ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
		
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		//ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
		ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ВыборкаШапка);
		ОбластьМакета.Параметры.ИтогоСуммаПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(ИтогоСумма, Константы.ВалютаРегламентированногоУчета.Получить());
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху = 0;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Возврат ТабДокумент;
		
	КонецФункции
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если НазваниеМакета = "Ведомость" Тогда
			
			ТабДокумент = ПечатьПеремещениеТоваров();
		ИначеЕсли НазваниеМакета = "ТОРГ13" тогда
			
			// Унифицированная форма ТОРГ-13 (накладная на внутренее перемещение)
			ТабДокумент = ПечатьТОРГ13();
			
		ИначеЕсли ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЕсли; 
		
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("Ведомость", "Перемещение товаров");
		
		СтруктураМакетов.Вставить("ТОРГ13", "ТОРГ-13 (Накладная на внутреннее перемещение)");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	//проверка на ведение складского учета средствами УАТ
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		Сообщить("Для организации """ + Организация + """ отключена возможность ведения складского учета документами УАТ!", СтатусСообщения.Внимание);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатПеремещениеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение.ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатПеремещениеТоваров.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатПеремещениеТоваров.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", , Отказ, Заголовок);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
	мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
Иначе
	мВалютаУпрУчета = мВалютаРегламентированногоУчета;
КонецЕсли;