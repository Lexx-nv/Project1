
&НаКлиенте
Процедура СменаМесяцаПлюс(Команда)
	фМесяцСтарый = фМесяц;
	фМесяц = ?(фМесяц = 12, Месяц(Объект.Дата), фМесяц + 1);
	УстановитьВидимостьМесяца();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьМесяца()
	Элементы.фНадписьМесяц.Заголовок = Формат(ДобавитьМесяц(НачалоГода(ТекущаяДата()), фМесяц - 1), "ДФ=ММММ");
	
	Элементы["ТаблицаЛотов1КоличествоТС"].Видимость = Истина;
	Элементы["ТаблицаЛотов1КоличествоТС"].Заголовок = "Ко-во ТС";
	
	//Элементы["ТаблицаЛотов1КоличествоТС" + фМесяц].Видимость = Истина;
	//Элементы["ТаблицаЛотов1КоличествоТС" + фМесяц].Заголовок = "Ко-во ТС" + Символы.ПС + "(" + Элементы.фНадписьМесяц.Заголовок + ")";
	//Элементы["ТаблицаЛотов1КоличествоТС" + фМесяцСтарый].Видимость = Ложь;
	
	Элементы["ТаблицаЛотов1ДнейВРаботеЗаСмену" + фМесяц].Видимость = Истина;
	Элементы["ТаблицаЛотов1ДнейВРаботеЗаСмену" + фМесяц].Заголовок = "Дней в работе" + Символы.ПС + "(" + Элементы.фНадписьМесяц.Заголовок + ")";
	Элементы["ТаблицаЛотов1ДнейВРаботеЗаСмену" + фМесяцСтарый].Видимость = Ложь;
	
	Элементы["ТаблицаЛотов1Сменность"].Видимость = Истина;
	Элементы["ТаблицаЛотов1Сменность"].Заголовок = "Сменность";
	
	Элементы["ТаблицаМесяцаСуммаИтого" + фМесяц].Видимость = Истина;
	Элементы["ТаблицаМесяцаСуммаИтого" + фМесяц].Заголовок = "Сумма" + Символы.ПС + "(" + Элементы.фНадписьМесяц.Заголовок + ")";
	Элементы["ТаблицаМесяцаСуммаИтого" + фМесяцСтарый].Видимость = Ложь;
	
	Элементы.ТаблицаМесяцаТарифУслуга1.Видимость = Объект.ИспользоватьУслуга1;
	Элементы.ТаблицаМесяцаЧасыУслуга1.Видимость = Объект.ИспользоватьУслуга1;
	Элементы.ТаблицаМесяцаТарифУслуга1.Заголовок = "Тариф " + Символы.ПС + Объект.Номенклатура1;
	Элементы.ТаблицаМесяцаЧасыУслуга1.Заголовок = "Кол-во " + Символы.ПС + Объект.Номенклатура1;
	Элементы.ТаблицаМесяцаТарифУслуга2.Видимость = Объект.ИспользоватьУслуга2;
	Элементы.ТаблицаМесяцаЧасыУслуга2.Видимость = Объект.ИспользоватьУслуга2;
	Элементы.ТаблицаМесяцаТарифУслуга2.Заголовок = "Тариф " + Символы.ПС + Объект.Номенклатура2;
	Элементы.ТаблицаМесяцаЧасыУслуга2.Заголовок = "Кол-во " + Символы.ПС + Объект.Номенклатура2;
	Элементы.ТаблицаМесяцаТарифУслуга3.Видимость = Объект.ИспользоватьУслуга3;
	Элементы.ТаблицаМесяцаЧасыУслуга3.Видимость = Объект.ИспользоватьУслуга3;
	Элементы.ТаблицаМесяцаТарифУслуга3.Заголовок = "Тариф " + Символы.ПС + Объект.Номенклатура3;
	Элементы.ТаблицаМесяцаЧасыУслуга3.Заголовок = "Кол-во " + Символы.ПС + Объект.Номенклатура3;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	фМесяцСтарый = 12;
	фМесяц = Месяц(Объект.Дата);
	Если Не Параметры.Ключ.Пустая() Тогда
		фСписокКорректировок.ЗагрузитьЗначения(ПолучитьСписокКорректировок(Параметры.Ключ));
	КонецЕсли;
	Элементы.ТаблицаМесяцаИдентификаторСтрокиЛота.Видимость = РольДоступна("уатАдминистратор");
	Параметры.Свойство("СтруктураПереносаРазбивки", фСтруктураПереносаРазбивки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКорректировок(пСсылка)
	вМассив = Новый Массив;
	
	мЗапрос = Новый запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛотыПроизводственнойПрограммы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЛотыПроизводственнойПрограммы КАК ЛотыПроизводственнойПрограммы
	|ГДЕ
	|	ЛотыПроизводственнойПрограммы.ДокументЛота <> ЛотыПроизводственнойПрограммы.Регистратор
	|	И ЛотыПроизводственнойПрограммы.ДокументЛота = &Ссылка");
	мЗапрос.УстановитьПараметр("Ссылка", пСсылка);
	
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Пока мРезультат.Следующий() Цикл
		вМассив.Добавить(мРезультат.Регистратор);
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	фСторнируемыйЛот = Объект.СторнируемыйЛот;
	ОбновитьСуммуВоВсехСтроках();
	УстановитьВидимостьМесяца();
	Если ЗначениеЗаполнено(Объект.НачалоПериодаДокумента) Тогда
		ЗаполнитьСтруктуруДнейГода();
	КонецЕсли;
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов()
	Элементы.КомментарийКорректировки.Видимость = Объект.Корректировочный;
	Элементы.СторнируемыйЛот.Видимость = Объект.Корректировочный;
	Элементы.СтраницаНастройки.Видимость = Не ЗначениеЗаполнено(Объект.СторнируемыйЛот);
	мЕстькорректировки = фСписокКорректировок.Количество() > 0;
	Элементы.СсылкаКорректировки.Видимость = мЕстькорректировки;
	Элементы.СсылкаКорректировки.Заголовок = "Корректировки (" + Формат(фСписокКорректировок.Количество(), "ЧГ=") + ")";
	Элементы.ТаблицаМесяца.ТолькоПросмотр = мЕстькорректировки;
	Элементы.фГод.ТолькоПросмотр = мЕстькорректировки;
	Элементы.Контрагент.ТолькоПросмотр = мЕстькорректировки;
	Элементы.Договор.ТолькоПросмотр = мЕстькорректировки;
	Элементы.ОграничениеПоВозрастуТС.ТолькоПросмотр = мЕстькорректировки;
	Элементы.Дата.ТолькоПросмотр = мЕстькорректировки;
	Элементы.ЗагрузкаИзExcel.Доступность = Не мЕстькорректировки;
	Элементы.СтраницаНастройки.ТолькоПросмотр = мЕстькорректировки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуВоВсехСтроках()
	Для Каждого мСтрокаТекущихДанных Из Объект.ТаблицаЛотов Цикл
		ОбновитьСуммуВСтроке(мСтрокаТекущихДанных);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуВСтроке(пСтрока)
	мИтогоВсего = 0;
	Для Итр = Месяц(Объект.Дата) По 12 Цикл
		мСменоДней = пСтрока["ДнейВРаботеЗаСмену" + Итр] * пСтрока.Сменность * пСтрока.КоличествоТС;
		пСтрока["СуммаИтого" + Итр] = пСтрока.ТарифЧасовой * пСтрока.ЧасыРаботы * мСменоДней + пСтрока.ТарифПробег * пСтрока.Пробег * мСменоДней + пСтрока.ТарифУслуга1 * пСтрока.КоличествоУслуга1 * мСменоДней + пСтрока.ТарифУслуга2 * пСтрока.КоличествоУслуга2 * мСменоДней + пСтрока.ТарифУслуга3 * пСтрока.КоличествоУслуга3 * мСменоДней;
		мИтогоВсего = мИтогоВсего + пСтрока["СуммаИтого" + Итр];
	КонецЦикла;
	пСтрока.ИтогоВсего = мИтогоВсего;
КонецПроцедуры

&НаКлиенте
Процедура СменаМесяцаМинус(Команда)
	фМесяцСтарый = фМесяц;
	фМесяц = ?(фМесяц = Месяц(Объект.Дата), 12, фМесяц - 1);
	УстановитьВидимостьМесяца();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМесяцаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		мСтрокаТекущихДанных = Элементы.ТаблицаМесяца.ТекущиеДанные;
		Если мСтрокаТекущихДанных <> Неопределено Тогда
			Если мСтрокаТекущихДанных.ИдентификаторСтрокиЛота = "" Тогда
				мСтрокаТекущихДанных.ИдентификаторСтрокиЛота = СокрЛП(Новый УникальныйИдентификатор);
			КонецЕсли;
			ОбновитьСуммуВСтроке(мСтрокаТекущихДанных);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПриОткрытии(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастройкиУслуг(Элемент)
	УстановитьВидимостьМесяца();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзExcel(Команда)
	
	//реквизиты, критичные для загрузки
	мСтрокаВажныхРеквизитов = "Контрагент
	|Дата";
	Для мИтр = 1 По СтрЧислоСтрок(мСтрокаВажныхРеквизитов) Цикл
		мИмяРеквизита = СтрПолучитьСтроку(мСтрокаВажныхРеквизитов, мИтр);
		Если ЗначениеЗаполнено(Объект[мИмяРеквизита]) Тогда
			мСтрокаВажныхРеквизитов = СтрЗаменить(мСтрокаВажныхРеквизитов, мИмяРеквизита, "");
		КонецЕсли;
	КонецЦикла;
	мСтрокаВажныхРеквизитов = СокрЛП(мСтрокаВажныхРеквизитов);
	Если мСтрокаВажныхРеквизитов <> "" Тогда
		мЧислоНезаполненныхРеквизитов = СтрЧислоСтрок(мСтрокаВажныхРеквизитов);
		мСтрокаВажныхРеквизитов = СтрЗаменить(мСтрокаВажныхРеквизитов, Символы.ПС, ", ");
		мСписокЗначенийДляКнопок = Новый СписокЗначений;
		мСписокЗначенийДляКнопок.Добавить(КодВозвратаДиалога.Да, "Продолжить");
		мСписокЗначенийДляКнопок.Добавить(КодВозвратаДиалога.Нет, "Вернуться к заполнению");
		мОписаниеОповещенияОтветНаВопросКонтрагентПустПриЗагрузке = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросПустыеРеквизитыПриЗагрузке", ЭтаФорма);
		ПоказатьВопрос(мОписаниеОповещенияОтветНаВопросКонтрагентПустПриЗагрузке, "Важны" + ?(мЧислоНезаполненныхРеквизитов = 1, "й", "е") + " реквизит" + ?(мЧислоНезаполненныхРеквизитов = 1, "", "ы") + " <" + мСтрокаВажныхРеквизитов + "> не указан" + ?(мЧислоНезаполненныхРеквизитов = 1, "", "ы") + ". Загрузка чувствительна к этому. Желаете продолжить или вернуться к заполнению?", мСписокЗначенийДляКнопок, , КодВозвратаДиалога.Да, "Важные реквизиты");
		Возврат;
	КонецЕсли;
	
	Объект.Лог = "Загрузка файла: " + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
	мОписаниеОповещенияЗакрытияФормыЗагрузки = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЗагрузки", ЭтаФорма);
	мМассивНовыхКолонок = ПолучитьМассивНовыхКолонок();
	мПараметрыЗагрузки = Новый Структура("Контрагент, ДополнительныеКолонки", Объект.Контрагент, мМассивНовыхКолонок);
	ОткрытьФорму("Обработка.юкУниверсальнаяОбработкаЗагрузкиЗаявок.Форма.Форма", мПараметрыЗагрузки, ЭтаФорма, , , , мОписаниеОповещенияЗакрытияФормыЗагрузки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивНовыхКолонок()
	вМассив = Новый Массив;
	вМассив.Добавить("ТарифЧасовой");
	вМассив.Добавить("ТарифПробег");
	Если ЗначениеЗаполнено(Объект.Номенклатура1) Тогда
		вМассив.Добавить("ТарифУслуга1");//, "Тариф " + Объект.Номенклатура1);
		вМассив.Добавить("КоличествоУслуга1");//, "Кол-во " + Объект.Номенклатура1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Номенклатура2) Тогда
		вМассив.Добавить("ТарифУслуга2");//, "Тариф " + Объект.Номенклатура2);
		вМассив.Добавить("КоличествоУслуга2");//, "Кол-во " + Объект.Номенклатура2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Номенклатура3) Тогда
		вМассив.Добавить("ТарифУслуга3");//, "Тариф " + Объект.Номенклатура3);
		вМассив.Добавить("КоличествоУслуга3");//, "Кол-во " + Объект.Номенклатура3);
	КонецЕсли;
	вМассив.Добавить("КоличествоТС");
	вМассив.Добавить("Сменность");
	Для Итр = 1 По 12 Цикл
		вМассив.Добавить("ДнейВРаботеЗаСмену" + Итр);
	КонецЦикла;
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ОбработкаОтветаНаВопросПустыеРеквизитыПриЗагрузке(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат = КодВозвратаДиалога.Да Тогда
		ЗагрузкаИзExcel(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЗагрузки(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И пРезультат.Количество() > 0 Тогда
		Если пДополнительныеПараметры <> Неопределено И пДополнительныеПараметры.Свойство("Очищать") И пДополнительныеПараметры.Очищать Тогда
			Объект.ТаблицаЛотов.Очистить();
		КонецЕсли;
		Для Каждого тЭлемент Из пРезультат Цикл
			мНоваяСтрока = Объект.ТаблицаЛотов.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, тЭлемент);
			мНоваяСтрока.ЦехКонтрагента = тЭлемент.ЦехМаршрут;
			мНоваяСтрока.Пробег = тЭлемент.СуточныйПробег;
			мНоваяСтрока.ЧасыРаботы = тЭлемент.КоличествоЧасов;
			//Если Не ЗначениеЗаполнено(мНоваяСтрока.ВремяПодачи) Тогда
			//	мНоваяСтрока.ВремяПодачи = Дата("00010101060000");
			//КонецЕсли;
			//мНоваяСтрока.СтрокаИсходныхДанныхДляОтображения = СтрЗаменить(СтрЗаменить(мНоваяСтрока.СтрокаИсходныхДанных, "&", "."), "..", ".");
			//мНоваяСтрока.Лог = "" + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМесяцаРежимРаботыПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.ТаблицаМесяца.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мПозицияРазделителя = ?(Найти(мСтрокаТекущихДанных.РежимРаботы, "х") > 0, Найти(мСтрокаТекущихДанных.РежимРаботы, "х"), ?(Найти(мСтрокаТекущихДанных.Режим, "x") > 0, Найти(мСтрокаТекущихДанных.Режим, "x"), 0));
		мПозицияРазделителяДробь = ?(Найти(мСтрокаТекущихДанных.РежимРаботы, "/") > 0, Найти(мСтрокаТекущихДанных.РежимРаботы, "/"), 0);
		мЧасов = 0;
		мДнейВРежиме = 0;
		Если мПозицияРазделителя > 0 Тогда
			Если мПозицияРазделителяДробь = 0 Тогда
				мСтрокаЧисла = Лев(мСтрокаТекущихДанных.РежимРаботы, мПозицияРазделителя - 1);
				мСтрокаЧислаУслугаПростой = "0";
			Иначе
				мСтрокаЧисла = Лев(мСтрокаТекущихДанных.РежимРаботы, мПозицияРазделителяДробь - 1);
				мСтрокаЧислаУслугаПростой = Сред(мСтрокаТекущихДанных.РежимРаботы, мПозицияРазделителяДробь + 1, мПозицияРазделителя - мПозицияРазделителяДробь - 1);
			КонецЕсли;
			мЧасов = Число(мСтрокаЧисла);
			мКоличествоУслугаПростой = Число(мСтрокаЧислаУслугаПростой);
			мДнейВРежиме = Число(Сред(мСтрокаТекущихДанных.РежимРаботы, мПозицияРазделителя + 1));
			Если мЧасов > 0 Тогда
				мСтрокаТекущихДанных.ЧасыРаботы = мЧасов;
			КонецЕсли;
			
			//Если мКоличествоУслугаПростой  > 0 Тогда
				мИндексУслугиПростой = ПолучитьИндексУслуги("Отстой");
				Если мИндексУслугиПростой > 0 Тогда
					мСтрокаТекущихДанных["КоличествоУслуга" + мИндексУслугиПростой] = мКоличествоУслугаПростой;
				КонецЕсли;
			//КонецЕсли;
			Если мДнейВРежиме > 0 И фСтруктураСтруктурДней <> Неопределено Тогда
				Для Итр = 1 По 12 Цикл
					Если мДнейВРежиме >= 5 И мДнейВРежиме <= 7 Тогда
						мСтрокаТекущихДанных["ДнейВРаботеЗаСмену" + Итр] = фСтруктураСтруктурДней["месяц" + Итр]["режим" + мДнейВРежиме]["ВсегоДней"];
					ИначеЕсли мДнейВРежиме >= 2 И мДнейВРежиме <= 4 Тогда
						мСтрокаТекущихДанных["ДнейВРаботеЗаСмену" + Итр] = мДнейВРежиме * Цел(фСтруктураСтруктурДней["месяц" + Итр]["режим7"]["ВсегоДней"] / 7);
					Иначе
						мСтрокаТекущихДанных["ДнейВРаботеЗаСмену" + Итр] = мДнейВРежиме;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		ОбновитьСуммуВСтроке(мСтрокаТекущихДанных);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСтруктурыДнейМесяца(пДата)
	Возврат ПолучитьСтруктуруДней(пДата);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДней(пДата)
	//монструозное преобразование столбцов в строки, пока так... сильно не ругайте, но так быстрее и проще...
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	5 КАК РабочихДнейВНеделе,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Пятидневка ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	Пятидневка КАК ВсегоДней
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА Шестидневка ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	Шестидневка
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА КалендарныеДни ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	КалендарныеДни
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8,	//Праздники
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9,	//Праздники + Выходные
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИЛИ ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,	//Весь месяц
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 0) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д1,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 1) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д2,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 2) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д3,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 3) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д4,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 4) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д5,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 5) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д6,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 6) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д7,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 7) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д8,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 8) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д9,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 9) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д10,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 10) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д11,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 11) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д12,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 12) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д13,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 13) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д14,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 14) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д15,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 15) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д16,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 16) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д17,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 17) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д18,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 18) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д19,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 19) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д20,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 20) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д21,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 21) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д22,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 22) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д23,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 23) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д24,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 24) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д25,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 25) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д26,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 26) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д27,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 27) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д28,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 28) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д29,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 29) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д30,
	|	ВЫБОР КОГДА ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, 30) = уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря ТОГДА ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ ИНАЧЕ 0 КОНЕЦ КАК Д31,
	|	ВЫБОР КОГДА ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ КалендарныеДни КОНЕЦ
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)");
	
	мСтрокаДней = "д1,д2,д3,д4,д5,д6,д7,д8,д9,д10,д11,д12,д13,д14,д15,д16,д17,д18,д19,д20,д21,д22,д23,д24,д25,д26,д27,д28,д29,д30,д31";
	мЗапрос.УстановитьПараметр("Дата", НачалоМесяца(пДата));
	мРезультат = мЗапрос.Выполнить().Выгрузить();
	мРезультат.Свернуть("РабочихДнейВНеделе", "" + мСтрокаДней + ",ВсегоДней");
	
	вСтруктура = Новый Структура;
	Для Каждого мСтрока Из мРезультат Цикл
		мСтруктура = Новый Структура("РабочихДнейВНеделе," + мСтрокаДней + ",ВсегоДней");
		ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
		вСтруктура.Вставить("Режим" + Строка(мСтрока.РабочихДнейВНеделе), мСтруктура);
	КонецЦикла;
	
	Возврат вСтруктура;
КонецФункции

&НаКлиенте
Процедура фГодПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.НачалоПериодаДокумента) Тогда
		ЗаполнитьСтруктуруДнейГода();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруДнейГода()
	фСтруктураСтруктурДней = Новый Структура();
	Для Итр = Месяц(Объект.Дата) По 12 Цикл
		фСтруктураСтруктурДней.Вставить("месяц" + Итр, ЗаполнитьСтруктурыДнейМесяца(ДобавитьМесяц(Объект.НачалоПериодаДокумента, Итр - 1)));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЛотов1КоличествоТС1ПриИзменении(Элемент)
	//мСтрокаТекущихДанных = Элементы.ТаблицаМесяца.ТекущиеДанные;
	//Если мСтрокаТекущихДанных["КоличествоТС2"] = 0 Тогда
	//	ЗаполнитьПоЯнварю("КоличествоТС");
	//	ОбновитьСуммуВСтроке(мСтрокаТекущихДанных);
	//Иначе
	//	мОписаниеОповещенияОбработкаОтвета = Новый ОписаниеОповещения("ОбработкаОтветаВопросКопироватьКоличествоТССЯнваря", ЭтаФорма);
	//	ПоказатьВопрос(мОписаниеОповещенияОбработкаОтвета, "Скопировать количество ТС с января на остальные месяцы?", РежимДиалогаВопрос.ДаНет);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЯнварю(пИмяКолонки)
	мСтрокаТекущихДанных = Элементы.ТаблицаМесяца.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		Для Итр = 2 По 12 Цикл
			мСтрокаТекущихДанных["" + пИмяКолонки + Итр] = мСтрокаТекущихДанных["" + пИмяКолонки + "1"];
		КонецЦикла;
		ОбновитьСуммуВСтроке(мСтрокаТекущихДанных);
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаОтветаВопросКопироватьКоличествоТССЯнваря(пРезультат, пДополнительныеПараметры) Экспорт
//	Если пРезультат = КодВозвратаДиалога.Да Тогда
//		ЗаполнитьПоЯнварю("КоличествоТС");
//	КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаВопросКопироватьДнейВРаботеЗаСменуСЯнваря(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЯнварю("ДнейВРаботеЗаСмену");
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаОтветаВопросКопироватьСменностьСЯнваря(пРезультат, пДополнительныеПараметры) Экспорт
//	Если пРезультат = КодВозвратаДиалога.Да Тогда
//		ЗаполнитьПоЯнварю("Сменность");
//	КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМесяцаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		мСтрокаТекущихДанных = Элементы.ТаблицаМесяца.ТекущиеДанные;
		Если мСтрокаТекущихДанных <> Неопределено Тогда
			//Для Итр = 1 По 12 Цикл
				мСтрокаТекущихДанных["Сменность"] = 1;
			//КонецЦикла;
			мСтрокаТекущихДанных.ОграничениеПоВозрастуТС = Объект.ОграничениеПоВозрастуТС;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЛотов1ДнейВРаботеЗаСмену1ПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.ТаблицаМесяца.ТекущиеДанные;
	Если мСтрокаТекущихДанных["ДнейВРаботеЗаСмену1"] < 20 Тогда
		мОписаниеОповещенияОбработкаОтвета = Новый ОписаниеОповещения("ОбработкаОтветаВопросКопироватьДнейВРаботеЗаСменуСЯнваря", ЭтаФорма);
		ПоказатьВопрос(мОписаниеОповещенияОбработкаОтвета, "Скопировать количество дней за смену с января на остальные месяцы?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИндексУслуги(пНаименование)
	Если Объект.ИспользоватьУслуга1 И СокрЛП(ПолучитьРеквизитОбъекта(Объект.Номенклатура1, "Наименование")) = пНаименование Тогда
		Возврат 1;
	ИначеЕсли Объект.ИспользоватьУслуга2 И СокрЛП(ПолучитьРеквизитОбъекта(Объект.Номенклатура2, "Наименование")) = пНаименование Тогда
		Возврат 2;
	ИначеЕсли Объект.ИспользоватьУслуга3 И СокрЛП(ПолучитьРеквизитОбъекта(Объект.Номенклатура3, "Наименование")) = пНаименование Тогда
		Возврат 3;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыОбъекта(пОбъект, пСтрокаРеквизитов)
	вСтруктура = Новый Структура(пСтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(вСтруктура, пОбъект);
	Возврат вСтруктура;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(пОбъект, пРеквизит)
	Возврат пОбъект[пРеквизит];
КонецФункции

&НаКлиенте
Процедура ОбновитьПИ(Команда)
	фКоличествоТСПромежуточныйИтог = 0;
	фСуммаЗаМесяцПромежуточныйИтог = 0;
	фСуммаИтогоПромежуточныйИтог = 0;
	Для Каждого мСтрока Из Объект.ТаблицаЛотов Цикл
		мИдентификаторТекущейСтрокиТаблицы = мСтрока.ПолучитьИдентификатор();
		Если Элементы.ТаблицаМесяца.ПроверитьСтроку(мИдентификаторТекущейСтрокиТаблицы) Тогда
			фКоличествоТСПромежуточныйИтог = фКоличествоТСПромежуточныйИтог + мСтрока["КоличествоТС"];
			фСуммаЗаМесяцПромежуточныйИтог = фСуммаЗаМесяцПромежуточныйИтог + мСтрока["СуммаИтого" + фМесяц];
			фСуммаИтогоПромежуточныйИтог = фСуммаИтогоПромежуточныйИтог + мСтрока.ИтогоВсего;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КорректировочныйПриИзменении(Элемент)
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПоВозрастуТСПриИзменении(Элемент)
	Для Каждого мСтрока Из Объект.ТаблицаЛотов Цикл
		Если мСтрока.ОграничениеПоВозрастуТС = 0 Тогда
			мСтрока.ОграничениеПоВозрастуТС = Объект.ОграничениеПоВозрастуТС;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СторнируемыйЛотПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СторнируемыйЛот) Тогда
		Если Объект.ТаблицаЛотов.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(фСторнируемыйЛот) Тогда
				ОбработкаОтветаВопросИзмененСторнируемыйЛот(КодВозвратаДиалога.Да, Неопределено);
			Иначе 
				мОписаниеОповещенияОбработкаОтветаВопросИзмененСторнируемыйЛот = Новый ОписаниеОповещения("ОбработкаОтветаВопросИзмененСторнируемыйЛот", ЭтаФорма);
				ПоказатьВопрос(мОписаниеОповещенияОбработкаОтветаВопросИзмененСторнируемыйЛот, "Очистить таблицу перед заполнением по лоту?", РежимДиалогаВопрос.ДаНетОтмена);
			КонецЕсли;
		Иначе
			ОбработкаОтветаВопросИзмененСторнируемыйЛот(КодВозвратаДиалога.Да, Неопределено);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(фСторнируемыйЛот) И Объект.ТаблицаЛотов.Количество() > 0 Тогда
		мОписаниеОповещенияОбработкаОтветаОчиститьТаблицу = Новый ОписаниеОповещения("ОбработкаОтветаОчиститьТаблицу", ЭтаФорма);
		ПоказатьВопрос(, "Очистить лот?", РежимДиалогаВопрос.ДаНет, , , "Отмена сторно");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаВопросИзмененСторнируемыйЛот(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат = КодВозвратаДиалога.Да Или пРезультат = КодВозвратаДиалога.Нет Тогда
		Если пРезультат = КодВозвратаДиалога.Да Тогда
			Объект.ТаблицаЛотов.Очистить();
		КонецЕсли;
		фСторнируемыйЛот = Объект.СторнируемыйЛот;
		мРеквизитыСторнируемогоЛота = ПолучитьРеквизитыОбъекта(Объект.СторнируемыйЛот, "Контрагент, Договор, НачалоПериодаДокумента, ИспользоватьУслуга1, ИспользоватьУслуга2, ИспользоватьУслуга3, Номенклатура1, Номенклатура2, Номенклатура3");
		ЗаполнитьЗначенияСвойств(Объект, мРеквизитыСторнируемогоЛота);
		фМесяцСтарый = 12;
		фМесяц = Месяц(Объект.Дата);
		УстановитьВидимостьМесяца();
		Если ЗначениеЗаполнено(Объект.НачалоПериодаДокумента) Тогда
			ЗаполнитьСтруктуруДнейГода();
		КонецЕсли;
		ОбновитьВидимостьЭлементов();
		ЗаполнитьПоСторнируемомуЛоту();
		ОбновитьСуммуВоВсехСтроках();
	ИначеЕсли пРезультат = КодВозвратаДиалога.Отмена Тогда
		Объект.СторнируемыйЛот = фСторнируемыйЛот;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОчиститьТаблицу(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаЛотов.Очистить();
		ДополнительнаяОбработкаПослеОчисткиСторнируемогоЛота();
	ИначеЕсли пРезультат = КодВозвратаДиалога.Отмена Тогда
		Объект.СторнируемыйЛот = фСторнируемыйЛот;
	ИначеЕсли пРезультат = КодВозвратаДиалога.Нет Тогда
		//от очистки отказались, документ-сторно пустой, строки в таблице есть...
		//нужно перезаписать идентификаторы, т.к. некоторые из них могут быть идентификаторами из сторнируемого
		//	документа, а они теперь не должны совпадать
		Для Каждого мСтрока Из Объект.ТаблицаЛотов Цикл
			мСтрока.ИдентификаторСтрокиЛота = Новый УникальныйИдентификатор;
		КонецЦикла;
		ДополнительнаяОбработкаПослеОчисткиСторнируемогоЛота();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяОбработкаПослеОчисткиСторнируемогоЛота()
	фСторнируемыйЛот = Неопределено;
	Объект.НачалоПериодаДокумента = НачалоГода(Объект.Дата);
	фМесяцСтарый = 12;
	фМесяц = 1;
	УстановитьВидимостьМесяца();
	ОбновитьСуммуВоВсехСтроках();
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьПоСторнируемомуЛоту()
	фСтруктураЛота = ПолучитьСтрокиЛота(Объект.СторнируемыйЛот);
	мСтрокаСвойств = "ИдентификаторСтрокиЛота, ТипТС, ГрупповойТип, НаименованиеТипаКонтрагента, ЦехКонтрагента, МесторождениеСтрокой, РежимРаботы, ТарифЧасовой, ТарифПробег, ТарифУслуга1, ТарифУслуга2, ТарифУслуга3, ЧасыРаботы, КоличествоУслуга1, КоличествоУслуга2, КоличествоУслуга3, Пробег, КоличествоТС, Сменность, ОграничениеПоВозрастуТС";
	Для Итр = Месяц(Объект.Дата) По 12 Цикл
		мСтрокаСвойств = "" + мСтрокаСвойств + ", ДнейВРаботеЗаСмену" + Итр;
	КонецЦикла;
	Для Каждого мСтрокаСторнируемогоЛота Из фСтруктураЛота.МассивСтрокЛота Цикл
		мНоваяСтрокаСостава = Объект.ТаблицаЛотов.Добавить();
		ЗаполнитьЗначенияСвойств(мНоваяСтрокаСостава, мСтрокаСторнируемогоЛота, мСтрокаСвойств);
	КонецЦикла;
	Для Каждого мСтрокаСторнируемогоЛота Из фСтруктураЛота.МассивСтрокРазбиения Цикл
		мНоваяСтрокаСостава = Объект.РазбивкаПоЦехамМаршрутам.Добавить();
		ЗаполнитьЗначенияСвойств(мНоваяСтрокаСостава, мСтрокаСторнируемогоЛота, мСтрокаСвойств);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокиЛота(пЛот)
	мМассивСтрокЛота = Новый Массив;
	мМассивСтрокРазбиения = Новый Массив;
	
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	юкЛотТаблицаЛотов.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота
	|ПОМЕСТИТЬ ВсеИдентификаторыСторнируемого
	|ИЗ
	|	Документ.юкЛот.ТаблицаЛотов КАК юкЛотТаблицаЛотов
	|ГДЕ юкЛотТаблицаЛотов.Ссылка = &СторнируемыйЛот
	|;
	|ВЫБРАТЬ
	|	юкЛотТаблицаЛотов.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота
	|ПОМЕСТИТЬ СписокОтсторнированных
	|ИЗ
	|	Документ.юкЛот.ТаблицаЛотов КАК юкЛотТаблицаЛотов
	|ГДЕ (юкЛотТаблицаЛотов.ИдентификаторСтрокиЛота В (ВЫБРАТЬ ВсеИдентификаторыСторнируемого.ИдентификаторСтрокиЛота ИЗ ВсеИдентификаторыСторнируемого))
	|	И юкЛотТаблицаЛотов.Ссылка <> &СторнируемыйЛот
	|	И НЕ юкЛотТаблицаЛотов.Ссылка.ПометкаУдаления
	|;
	|ВЫБРАТЬ
	|	юкЛотТаблицаЛотов.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота,
	|	юкЛотТаблицаЛотов.ТипТС,
	|	юкЛотТаблицаЛотов.ГрупповойТип,
	|	юкЛотТаблицаЛотов.НаименованиеТипаКонтрагента,
	|	юкЛотТаблицаЛотов.ЦехКонтрагента,
	|	юкЛотТаблицаЛотов.МесторождениеСтрокой,
	|	юкЛотТаблицаЛотов.РежимРаботы,
	|	юкЛотТаблицаЛотов.ТарифЧасовой,
	|	юкЛотТаблицаЛотов.ТарифПробег,
	|	юкЛотТаблицаЛотов.ТарифУслуга1,
	|	юкЛотТаблицаЛотов.ТарифУслуга2,
	|	юкЛотТаблицаЛотов.ТарифУслуга3,
	|	юкЛотТаблицаЛотов.ЧасыРаботы,
	|	юкЛотТаблицаЛотов.КоличествоУслуга1,
	|	юкЛотТаблицаЛотов.КоличествоУслуга2,
	|	юкЛотТаблицаЛотов.КоличествоУслуга3,
	|	юкЛотТаблицаЛотов.Пробег,
	|	юкЛотТаблицаЛотов.КоличествоТС,
	|	юкЛотТаблицаЛотов.Сменность,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену1,
	|	юкЛотТаблицаЛотов.СуммаИтого1,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену2,
	|	юкЛотТаблицаЛотов.СуммаИтого2,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену3,
	|	юкЛотТаблицаЛотов.СуммаИтого3,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену4,
	|	юкЛотТаблицаЛотов.СуммаИтого4,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену5,
	|	юкЛотТаблицаЛотов.СуммаИтого5,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену6,
	|	юкЛотТаблицаЛотов.СуммаИтого6,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену7,
	|	юкЛотТаблицаЛотов.СуммаИтого7,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену8,
	|	юкЛотТаблицаЛотов.СуммаИтого8,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену9,
	|	юкЛотТаблицаЛотов.СуммаИтого9,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену10,
	|	юкЛотТаблицаЛотов.СуммаИтого10,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену11,
	|	юкЛотТаблицаЛотов.СуммаИтого11,
	|	юкЛотТаблицаЛотов.ДнейВРаботеЗаСмену12,
	|	юкЛотТаблицаЛотов.СуммаИтого12,
	|	юкЛотТаблицаЛотов.ИтогоВсего,
	|	юкЛотТаблицаЛотов.ОграничениеПоВозрастуТС
	|ИЗ
	|	Документ.юкЛот.ТаблицаЛотов КАК юкЛотТаблицаЛотов
	|ГДЕ (НЕ юкЛотТаблицаЛотов.ИдентификаторСтрокиЛота В (ВЫБРАТЬ СписокОтсторнированных.ИдентификаторСтрокиЛота ИЗ СписокОтсторнированных))
	|	И юкЛотТаблицаЛотов.Ссылка = &СторнируемыйЛот
	|;
	|ВЫБРАТЬ
	|	юкЛотТаблицаРазбиения.ИдентификаторСтрокиЛота,
	|	юкЛотТаблицаРазбиения.ИдентификаторСтрокиЗаявки,
	|	юкЛотТаблицаРазбиения.ЦехМаршрут,
	|	юкЛотТаблицаРазбиения.ВремяПодачи,
	|	юкЛотТаблицаРазбиения.ВремяВозврата,
	|	юкЛотТаблицаРазбиения.ПозицияПП
	|ИЗ
	|	Документ.юкЛот.РазбивкаПоЦехамМаршрутам КАК юкЛотТаблицаРазбиения
	|ГДЕ (НЕ юкЛотТаблицаРазбиения.ИдентификаторСтрокиЛота В (ВЫБРАТЬ СписокОтсторнированных.ИдентификаторСтрокиЛота ИЗ СписокОтсторнированных))
	|	И юкЛотТаблицаРазбиения.Ссылка = &СторнируемыйЛот");
	
	мЗапрос.УстановитьПараметр("СторнируемыйЛот", пЛот);
	мРезультатПакет = мЗапрос.ВыполнитьПакет();
	мРезультатСостав = мРезультатПакет[2].Выбрать();
	мРезультатРазбиения = мРезультатПакет[3].Выбрать();
	Пока мРезультатСостав.Следующий() Цикл
		мСтруктураСтроки = Новый Структура("ИдентификаторСтрокиЛота, ТипТС, ГрупповойТип, НаименованиеТипаКонтрагента, ЦехКонтрагента, МесторождениеСтрокой, РежимРаботы, ТарифЧасовой, ТарифПробег, ТарифУслуга1, ТарифУслуга2, ТарифУслуга3, ЧасыРаботы, КоличествоУслуга1, КоличествоУслуга2, КоличествоУслуга3, Пробег, КоличествоТС, ДнейВРаботеЗаСмену1, Сменность, ДнейВРаботеЗаСмену12, ДнейВРаботеЗаСмену2, ДнейВРаботеЗаСмену3, ДнейВРаботеЗаСмену4, ДнейВРаботеЗаСмену5, ДнейВРаботеЗаСмену6, ДнейВРаботеЗаСмену7, ДнейВРаботеЗаСмену8, ДнейВРаботеЗаСмену9, ДнейВРаботеЗаСмену10, ДнейВРаботеЗаСмену11, ОграничениеПоВозрастуТС");
		ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мРезультатСостав);
		мМассивСтрокЛота.Добавить(мСтруктураСтроки);
	КонецЦикла;
	Пока мРезультатРазбиения.Следующий() Цикл
		мСтруктураСтроки = Новый Структура("ИдентификаторСтрокиЛота, ИдентификаторСтрокиЗаявки, ЦехМаршрут, ВремяПодачи, ВремяВозврата, ПозицияПП, МестоРаботы");
		ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мРезультатРазбиения);
		//мСтруктураСтроки.Вставить("ИдентификаторСтрокиЗаявки", СокрЛП(Новый УникальныйИдентификатор));	//идентификатор должен быть изменен!!! ОБЯЗАТЕЛЬНО!!!
		мМассивСтрокРазбиения.Добавить(мСтруктураСтроки);
	КонецЦикла;
	
	вСтруктура = новый Структура;
	вСтруктура.Вставить("МассивСтрокРазбиения", мМассивСтрокРазбиения);
	вСтруктура.Вставить("МассивСтрокЛота", мМассивСтрокЛота);
	
	Возврат вСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	фМесяцСтарый = 12;
	фМесяц = Месяц(Объект.Дата);
	УстановитьВидимостьМесяца();
	ОбновитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаКорректировкиНажатие(Элемент)
	Если фСписокКорректировок.Количество() = 1 Тогда
		//форма документа
	Иначе
		//форма списка
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Разбивка(Команда)
	мПараметрыРазбивки = СформироватьСтруктуруРазбивкиТекущейСтроки();
	Если мПараметрыРазбивки <> Неопределено Тогда
		мПодолнительныеПараметры = Новый Структура("ИдентификаторСтрокиЛота", Элементы.ТаблицаМесяца.ТекущиеДанные.ИдентификаторСтрокиЛота);
		Если фСтруктураПереносаРазбивки <> Неопределено Тогда
			мПараметрыРазбивки.Вставить("СтруктураПереноса", фСтруктураПереносаРазбивки);
		КонецЕсли;
		мОписаниеОповещенияИзмененаРазбивка = Новый ОписаниеОповещения("ОбработкаИзмененияРазбивки", ЭтаФорма, мПодолнительныеПараметры);
		ОткрытьФорму("Документ.юкЛот.Форма.ФормаРазбивки", мПараметрыРазбивки, ЭтаФорма, , , , мОписаниеОповещенияИзмененаРазбивка, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияРазбивки(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И пРезультат.Свойство("МассивСтрок") Тогда
		
		мОтборПоИденитификаторуСтрокиЛота = Новый Структура("ИдентификаторСтрокиЛота", пДополнительныеПараметры.ИдентификаторСтрокиЛота);
		мСтрокиПоИдентификаторуСтрокиЛота = Объект.РазбивкаПоЦехамМаршрутам.НайтиСтроки(мОтборПоИденитификаторуСтрокиЛота);
		Для Каждого мЭлемент Из мСтрокиПоИдентификаторуСтрокиЛота Цикл
			Объект.РазбивкаПоЦехамМаршрутам.Удалить(мЭлемент);
		КонецЦикла;
		Для Каждого мЭлемент Из пРезультат.МассивСтрок Цикл
			мНоваяСтрока = Объект.РазбивкаПоЦехамМаршрутам.Добавить();
			ЗаполнитьЗначенияСвойств(мНоваяСтрока, мЭлемент);
			мНоваяСтрока.ИдентификаторСтрокиЛота = пДополнительныеПараметры.ИдентификаторСтрокиЛота;
			Модифицированность = Истина;
		КонецЦикла;
		мПереносВДругойДокумент = Неопределено;
		пРезультат.Свойство("ПереносВДругойДокумент", мПереносВДругойДокумент);
		Если мПереносВДругойДокумент <> Неопределено И мПереносВДругойДокумент Тогда
			мПараметрыОткрытияФормыПодбораЛота = Новый Структура("ЗапрещенныйЛот, СтруктураПереносаРазбивки, НомерМесяца, ГрупповойТип, ДнейВМесяц, ТС", Параметры.Ключ, пРезультат.СтруктураПереноса, фМесяц, Элементы.ТаблицаМесяца.ТекущиеДанные.ГрупповойТип, Элементы.ТаблицаМесяца.ТекущиеДанные["ДнейВРаботеЗаСмену" + фМесяц], ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка"));
			мОписаниеОповещенияОбработкаЗакрытияФормыПодбора = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыПодбора", ЭтаФорма);
			ОткрытьФорму("Документ.юкЛот.Форма.ФормаПодбораЛота", мПараметрыОткрытияФормыПодбораЛота, ЭтаФорма, , , , мОписаниеОповещенияОбработкаЗакрытияФормыПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			пРезультат.Свойство("СтруктураПереноса", фСтруктураПереносаРазбивки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗакрытияФормыПодбора(пРезультат, пДополнительныеПараметры) Экспорт
	фСтруктураПереносаРазбивки = пРезультат;
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруРазбивкиТекущейСтроки()
	Если Элементы.ТаблицаМесяца.ТекущиеДанные <> Неопределено Тогда
		мМассивРазбиенияПоТекущейСтроке = Новый Массив;
		мОтборПоИденитификатору = Новый Структура("ИдентификаторСтрокиЛота", Элементы.ТаблицаМесяца.ТекущиеДанные.ИдентификаторСтрокиЛота);
		мСтрокиПоИдентификатору = Объект.РазбивкаПоЦехамМаршрутам.НайтиСтроки(мОтборПоИденитификатору);
		Для Каждого мСтрока Из мСтрокиПоИдентификатору Цикл
			мСтруктураСтроки = Новый Структура("ИдентификаторСтрокиЗаявки, ЦехМаршрут, ВремяПодачи, ВремяВозврата, ПозицияПП, МестоРаботы");
			ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мСтрока);
			мМассивРазбиенияПоТекущейСтроке.Добавить(мСтруктураСтроки);
		КонецЦикла;
		вСтруктура = Новый Структура("ТаблицаРазбиения, Контрагент", мМассивРазбиенияПоТекущейСтроке, Объект.Контрагент);
		Возврат вСтруктура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПоискЗадания(Команда)
	мОписаниеОповещенияОбработкаЗапросаПоиска = Новый ОписаниеОповещения("ОбработкаЗапросаПоиска", ЭтаФорма);
	ОткрытьФорму("Документ.юкЛот.Форма.ФормаПоискаЗадания", , ЭтаФорма, , , , мОписаниеОповещенияОбработкаЗапросаПоиска, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗапросаПоиска(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		Если пРезультат.Свойство("ЦехМаршрут") И ЗначениеЗаполнено(пРезультат.ЦехМаршрут) Тогда
			мОтборЦехМаршрут = Новый Структура("ЦехМаршрут", пРезультат.ЦехМаршрут);
			мСтрокиРазбивки = Объект.РазбивкаПоЦехамМаршрутам.НайтиСтроки(мОтборЦехМаршрут);
			Если мСтрокиРазбивки.Количество() > 0 Тогда
				мМассивИдентификаторовЛотов = Новый Массив;
				//убираем старый отбор, если он был: (новый поиск сразу после выполнения старого)
				мОтборПоПоиску = Новый Структура("ОтборПоиска", Истина);
				мСтрокиСтарогоОтбора = Объект.ТаблицаЛотов.НайтиСтроки(мОтборПоПоиску);
				Для Каждого мСтрока Из мСтрокиСтарогоОтбора Цикл
					мСтрока.ОтборПоиска = Ложь;
				КонецЦикла;
				//заполняем новый отбор
				Для Каждого мСтрока Из мСтрокиРазбивки Цикл
					Если мМассивИдентификаторовЛотов.Найти(мСтрока.ИдентификаторСтрокиЛота) = Неопределено Тогда
						мМассивИдентификаторовЛотов.Добавить(мСтрока.ИдентификаторСтрокиЛота);
						мОтборПоИдентификатору = Новый Структура("ИдентификаторСтрокиЛота", мСтрока.ИдентификаторСтрокиЛота);
						мСтрокиИдентификатора = Объект.ТаблицаЛотов.НайтиСтроки(мОтборПоИдентификатору);
						Если мСтрокиИдентификатора.Количество() > 0 Тогда
							мСтрокиИдентификатора[0].ОтборПоиска = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если мМассивИдентификаторовЛотов.Количество() > 0 Тогда
					Элементы.ТаблицаМесяца.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтборПоиска", Истина);
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение( , "Ничего не нашлось");
			КонецЕсли;
		ИначеЕсли пРезультат.Свойство("Наименование") И ЗначениеЗаполнено(пРезультат.Наименование) Тогда
			// не реализовано...
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПоиска(Команда)
	Для Каждого мСтрока Из Объект.ТаблицаЛотов Цикл
		мСтрока.ОтборПоиска = Ложь;
	КонецЦикла;
	Элементы.ТаблицаМесяца.ОтборСтрок = Неопределено;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНеобработаннуюСтруктуруПереноса()
	Если фСтруктураПереносаРазбивки <> Неопределено Тогда
		ПоказатьПредупреждение( , "Есть вырезанное задание, которое никуда не вставили! Завершите перенос задания или закройте документ без сохранения");
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Отказ = ПроверитьНеобработаннуюСтруктуруПереноса();
КонецПроцедуры