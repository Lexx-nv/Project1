Перем мВалютаРегламентированногоУчета Экспорт;//Переменная хранит значение валюты регламентированного учёта, полученное из констант
Перем Права Экспорт; //Переменная хранит список прав и настроек , полученный из глобальной переменной

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьЗаказНаТС()
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.уатЗаказГрузоотправителя.ПолучитьМакет("Печать");
	
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Номер = Номер;
	ФорматДаты = "ДФ='дд ММММ гггг'";
	Область.Параметры.Дата = Формат(Дата, ФорматДаты);
	ТабДок.Вывести(Область);
	
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Организация = Организация;
	Шапка.Параметры.Контрагент = Контрагент;
	Шапка.Параметры.Ответственный = Ответственный;
	
	Шапка.Параметры.Заполнить(ЭтотОбъект);
	ТабДок.Вывести(Шапка);
	
	// Заказы
	Область = Макет.ПолучитьОбласть("ЗаказыШапка");
	ТабДок.Вывести(Область);
	ОбластьЗаказы = Макет.ПолучитьОбласть("Заказы");
	Для Каждого ТекСтрокаЗаказы Из Товары Цикл
		ОбластьЗаказы.Параметры.Заполнить(ТекСтрокаЗаказы);
		ТабДок.Вывести(ОбластьЗаказы);
	КонецЦикла;
	
	Сумма    = 0;
	СуммаНДС = 0;
	
	// Услуги
	Область = Макет.ПолучитьОбласть("УслугиШапка");
	ТабДок.Вывести(Область);
	ОбластьУслуги = Макет.ПолучитьОбласть("Услуги");
	Для Каждого ТекСтрокаУслуги Из Услуги Цикл
		ОбластьУслуги.Параметры.Заполнить(ТекСтрокаУслуги);
		
		Сумма    = Сумма + ТекСтрокаУслуги.Сумма;
		СуммаНДС = СуммаНДС + ТекСтрокаУслуги.СуммаНДС;
		
		ТабДок.Вывести(ОбластьУслуги);
	КонецЦикла;
	
	// Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
	Если УчитыватьНДС Тогда
		ОбластьМакета.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
	КонецЕсли;
	ТабДок.Вывести(ОбластьМакета);
	
	// Подвал
	ОбластьМакета                          = Макет.ПолучитьОбласть("Подвал");
	СуммаКПрописи                          = Сумма + ?(СуммаВключаетНДС, 0, СуммаНДС);
	Если УчитыватьНДС И СуммаНДС <> 0 Тогда
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + Услуги.Количество()
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ВалютаДокумента) + ", в том числе НДС " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС, ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ВалютаДокумента) + ", в том числе НДС " + уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаНДС, ВалютаДокумента);
	Иначе
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + Услуги.Количество()
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ВалютаДокумента);		
	КонецЕсли;
	ТабДок.Вывести(ОбластьМакета);
	
	Возврат ТабДок;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	Иначе
			
		// Получить экземпляр документа на печать
		Если НазваниеМакета = "Печать" тогда
			
			// Управленческая печатная форма документа
			ТабДокумент = ПечатьЗаказНаТС();
			
		КонецЕсли;
		
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
		
	КонецЕсли;

КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
//Функция ПолучитьСписокПечатныхФорм() Экспорт
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Печать", "Заказ на ТС");
	
	Возврат СтруктураМакетов ;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()


#КонецЕсли


// Возвращает представление адреса из РС КонтактнаяИнформация
// Парам.
// Запись - запись, из полей которой формируется представление
//
Функция ПолучитьПредставлениеАдресаИзКИ(Запись) Экспорт
ТекПредставление = "";

Если СокрЛП(Запись.Поле1) <> "" Тогда
	ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
КонецЕсли;

Если СокрЛП(Запись.Поле2) <> "" Тогда
	ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
КонецЕсли;

Если СокрЛП(Запись.Поле3) <> "" Тогда
	ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
КонецЕсли;

Если СокрЛП(Запись.Поле4) <> "" Тогда
	ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
КонецЕсли;

Если СокрЛП(Запись.Поле5) <> "" Тогда
	ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
КонецЕсли;

Если СокрЛП(Запись.Поле6) <> "" Тогда
	ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
КонецЕсли;

Если СокрЛП(Запись.Поле7) <> "" Тогда
	ТекПредставление = ТекПредставление + ", дом № " + СокрЛП(Запись.Поле7);
КонецЕсли;

Если СокрЛП(Запись.Поле8) <> "" Тогда
	ТекПредставление = ТекПредставление + ", корпус " + СокрЛП(Запись.Поле8);
КонецЕсли;

Если СокрЛП(Запись.Поле9) <> "" Тогда
	ТекПредставление = ТекПредставление + ", кв." + СокрЛП(Запись.Поле9);
КонецЕсли;

Если СтрДлина(ТекПредставление) > 2 Тогда
	ТекПредставление = Сред(ТекПредставление, 3);
КонецЕсли;

Возврат ТекПредставление;


КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//Обработчики событий
////////////////////////////////////////
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	ВесБрутто      = Товары.Итог("ВесБрутто");
	Объем          = Товары.Итог("Объем");
	КоличествоМест = Товары.Итог("КоличествоМест");
	ВалютаТоваров    = ВалютаДокумента;
	Если Товары.Количество() тогда
		НазваниеГруза    = Товары[0].Номенклатура.Наименование;
	Иначе
		НазваниеГруза    = "Груз";
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДоговорКонтрагента) тогда
		ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
		Если Не ЭтоОбъединениеСБП Тогда
			ТекДолг = уатОбщегоНазначенияТиповые_проф.ТекущийДолг(ДоговорКонтрагента, Неопределено, Ссылка);
			Если ДоговорКонтрагента.КонтролироватьСуммуЗадолженности И ТекДолг > ДоговорКонтрагента.ДопустимаяСуммаЗадолженности тогда
				ТекстСообщения = "Текущий долг контрагента превышает максимально допустимое значение." + Символы.ПС +
				"Текущий долг: " + ТекДолг + ", максимальная сумма задолженности: " + ДоговорКонтрагента.ДопустимаяСуммаЗадолженности;
				#Если Клиент тогда
					Сообщить(ТекстСообщения,СтатусСообщения.Важное);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатЗаказГрузоотправителя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьЗаказыНаТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьЗаказыГрузоотправителей(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатЗаказГрузоотправителя.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
Если ОбменДанными.Загрузка Тогда
	Возврат;
КонецЕсли;

#Если Клиент Тогда
	Оповестить("ЗаписанЗаказНаТС",,Ссылка);
#КонецЕсли
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатЗаказГрузоотправителя.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект,"Товары", , Отказ, Заголовок);
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", , Отказ, Заголовок);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

Права = Неопределено;
#Если Клиент Тогда
Права = глПраваУАТ;
#КонецЕсли

