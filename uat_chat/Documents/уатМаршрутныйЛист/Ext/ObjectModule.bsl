Перем Права Экспорт;  //Переменная хранит список прав и настроек , полученный из глобальной переменной

Перем мВалютаРегламентированногоУчета Экспорт;//Переменная хранит значение валюты регламентированного учёта,полученное из констант
Перем КэшЗаказовНаТС Экспорт; // Рабочая переменная-кэш содержит список заказов на ТС
Перем табВыбраннаяНоменклатура Экспорт; //таблица с уже добавленной в таб часть заказы номенклатурой
Перем мДоступнаКомпонентаУЭ Экспорт; // Используется решение УЭ


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Обновляет значение переменной КэшЗаказовНаТС 
Процедура ОбновитьКэшЗаказовНаТС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказыНаТСОстатки.ЗаказНаТС
	|ИЗ
	|	РегистрНакопления.уатЗаказыНаТС.Остатки(&ДатаКон, ) КАК уатЗаказыНаТСОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатЗаказыНаТСОстатки.ЗаказНаТС.Дата";
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	КэшЗаказовНаТС = Новый СписокЗначений();
	КэшЗаказовНаТС.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказНаТС"));

КонецПроцедуры

Функция ПолучитьАдресСтрокой(Адрес)
	Результат = "";
	Если ТипЗнч(Адрес) = Тип("СправочникСсылка.уатПунктыНазначения") тогда
		Если ПустаяСтрока(Адрес.Адрес) тогда
			Результат = Адрес.Наименование;
		Иначе
			Результат = Адрес.Адрес;
		КонецЕсли;
	ИначеЕсли типЗнч(Адрес) = тип("Строка") тогда
		Результат = Адрес;
	Иначе
		Результат = "";
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Функция объединения двух дат  в форматах Число либо Дата
// Время 1 будет увеличено на Время2
// Парам.
// Время1, Время2 - два значения времени, к первому будут добавлено второе 
//
Функция СложитьВремя(Время1,Время2) Экспорт
	Если ТипЗнч(Время1) = Тип("Число") И ТипЗнч(Время2) = Тип("Число") тогда
		час1 = Цел(Время1);
		час2 = Цел(время2);
		мЧас = Час1 + Час2;
		мин = ((Время1 - час1) + (Время2 - час2)) * 100;
		допЧас = Цел(мин / 60);
		мЧас = мЧас + допЧас;
		мин = (мин - ДопЧас*60) / 100;
		Возврат мЧас + Мин;
	ИначеЕсли ТипЗнч(Время1) = Тип("Дата") И ТипЗнч(Время2) = Тип("Дата") тогда
		Возврат Время1 + Час(Время2) * 60 * 60 + Минута(Время2) * 60 + Секунда(Время2); 	
	Иначе
		Если ТипЗнч(Время1) = Тип("Число") тогда
			мВремя1 = Время2;
			мВремя2 = Время1;
		Иначе
			мВремя1 = Время1;
			мВремя2 = Время2;
		КонецЕсли;
		мВремя = дата('00010101010101');
		МВремя = мВремя1 + Цел(мВремя2) * 60 * 60 + (Время2 - Цел(Время2)) * 100 * 60;
		Если ТипЗнч(Время1) = Тип("Число") тогда
			Возврат Час(мВремя) + Минута(мВремя) / 100;	
		Иначе
			Возврат мВремя;	
		КОнецЕсли;
	КонецЕсли;
КонецФункции

#Если Клиент Тогда

// Функция выполняет получение таблицы номенклатуры, которая еще не присутствует в 
// маршрутном листе по указанному заказу
//
// Параметры:
//  Заказ        - Заказ из которого производится выбор номенклатуры
//
// Возвращаемое значение:
//  Таблица доступной к выбору номенклатуры
//
Функция ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(Заказ) Экспорт
	
	Если НЕ ТипЗнч(Заказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") тогда
		мТаб = Новый ТаблицаЗначений();
		Возврат мТаб;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	мМенеджерВрТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = мМенеджерВрТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Заказчик,
	|	ЗаказНаТС,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	ДатаВыполнения,
	|	ПараметрВыработки
	|ПОМЕСТИТЬ 
	|	ВремТаб 
	|ИЗ &ВыбНоменклатура КАК Таб";
	
	Запрос.УстановитьПараметр("ВыбНоменклатура", табВыбраннаяНоменклатура);
	Запрос.Выполнить();
		
	Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатЗаказыНаТСОстатки.ЗаказНаТС КАК Заказ,
		|	уатЗаказыНаТСОстатки.Номенклатура КАК Номенклатура,
		|	уатЗаказыНаТСОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	уатЗаказыНаТСОстатки.ПараметрВыработки КАК ПараметрВыработки,
		|	уатЗаказыНаТСОстатки.КоличествоПараметрВыработкиОстаток КАК КоличествоПараметрВыработки,
		|	уатЗаказыНаТСОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) КАК Количество,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК ВесЕдиницы,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК ОбъемЕдиницы,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК КоличествоМестЕдиницы,
		|	(уатЗаказыНаТСОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК Вес,
		|	(уатЗаказыНаТСОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК Объем,
		|	(уатЗаказыНаТСОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК КоличествоМест
		|ИЗ
		|	РегистрНакопления.уатЗаказыНаТС.Остатки(&ДатаКон, ЗаказНаТС = &ВыбЗаказ) КАК уатЗаказыНаТСОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
		|		ПО уатЗаказыНаТСОстатки.ЗаказНаТС.Контрагент = ВремТаб.Заказчик
		|			И уатЗаказыНаТСОстатки.ЗаказНаТС = ВремТаб.ЗаказНаТС
		|			И уатЗаказыНаТСОстатки.Номенклатура = ВремТаб.Номенклатура
		|			И уатЗаказыНаТСОстатки.ДатаВыполнения = ВремТаб.ДатаВыполнения
		|			И уатЗаказыНаТСОстатки.ЕдиницаИзмерения = ВремТаб.ЕдиницаИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
		|		ПО уатЗаказыНаТСОстатки.ЗаказНаТС.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
		|			И уатЗаказыНаТСОстатки.ЗаказНаТС = уатЗаказГрузоотправителяЗаказы.Ссылка
		|			И уатЗаказыНаТСОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
		|			И уатЗаказыНаТСОстатки.ДатаВыполнения = уатЗаказГрузоотправителяЗаказы.Ссылка.КрайнийСрокОтработки
		|			И уатЗаказыНаТСОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
		|ГДЕ
		|	уатЗаказыНаТСОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) > 0";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатЗаказыНаТСОстатки.ЗаказНаТС            КАК Заказ,
		|	уатЗаказыНаТСОстатки.Номенклатура         КАК Номенклатура,
		|	уатЗаказыНаТСОстатки.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	уатЗаказыНаТСОстатки.ПараметрВыработки    КАК ПараметрВыработки,
		|	уатЗаказыНаТСОстатки.КоличествоПараметрВыработкиОстаток КАК КоличествоПараметрВыработки,
		|	уатЗаказыНаТСОстатки.КоличествоОстаток - ЕстьNULL(ВремТаб.Количество,0) КАК Количество, //количество в ед заказа
		|	ЕстьNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто,0)            / ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Количество,1) КАК ВесЕдиницы,
		|	ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Объем,0)          / ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Количество,1) КАК ОбъемЕдиницы,
		|	ЕстьNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест,0) / ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Количество,1) КАК КоличествоМестЕдиницы,
		|	(уатЗаказыНаТСОстатки.КоличествоОстаток - ЕстьNULL(ВремТаб.Количество,0)) * ЕстьNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто           ,0) / ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Количество,1) КАК Вес,
		|	(уатЗаказыНаТСОстатки.КоличествоОстаток - ЕстьNULL(ВремТаб.Количество,0)) * ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Объем         ,0) / ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Количество,1) КАК Объем,
		|	(уатЗаказыНаТСОстатки.КоличествоОстаток - ЕстьNULL(ВремТаб.Количество,0)) * ЕстьNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест,0) / ЕстьNULL(уатЗаказГрузоотправителяЗаказы.Количество,1) КАК КоличествоМест
		|ИЗ
		|	РегистрНакопления.уатЗаказыНаТС.Остатки(&ДатаКон, ЗаказНаТС = &ВыбЗаказ) КАК уатЗаказыНаТСОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
		|		ПО уатЗаказыНаТСОстатки.ЗаказНаТС.Контрагент = ВремТаб.Заказчик
		|			И уатЗаказыНаТСОстатки.ЗаказНаТС         = ВремТаб.ЗаказНаТС
		|			И уатЗаказыНаТСОстатки.Номенклатура      = ВремТаб.Номенклатура
		|			И уатЗаказыНаТСОстатки.ДатаВыполнения    = ВремТаб.ДатаВыполнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
		|		ПО уатЗаказыНаТСОстатки.ЗаказНаТС.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
		|			И уатЗаказыНаТСОстатки.ЗаказНаТС         = уатЗаказГрузоотправителяЗаказы.Ссылка
		|			И уатЗаказыНаТСОстатки.Номенклатура      = уатЗаказГрузоотправителяЗаказы.Номенклатура
		|			И уатЗаказыНаТСОстатки.ДатаВыполнения    = уатЗаказГрузоотправителяЗаказы.Ссылка.КрайнийСрокОтработки
		|ГДЕ
		|	уатЗаказыНаТСОстатки.КоличествоОстаток - ЕстьNULL(ВремТаб.Количество,0) > 0";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыбЗаказ", Заказ);
	Запрос.УстановитьПараметр("ДатаКон" , КонецДня(РабочаяДата));
	Возврат Запрос.Выполнить().Выгрузить();
	
КОнецФункции

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
//Функция ПолучитьСписокПечатныхФорм() Экспорт
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("МаршрутныйЛист"         , "Маршрутный лист");
	СтруктураМакетов.Вставить("МаршрутныйЛистСЗаказами", "Маршрутный лист (детализация по заказам)");
	
	Возврат СтруктураМакетов ;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Формирует печатную форму путевых листов
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
//
Функция ПечатьМаршрутныйЛист() Экспорт
	ТабДок = Новый ТабличныйДокумент;
	Макет = ЭтотОбъект.ПолучитьМакет("МаршрутныйЛист");
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Заголовок
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаШапка.Параметры.ТекстЗаголовка           = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, "Маршрутный лист");
	ОбластьМакетаШапка.Параметры.ПредставлениеПеревозчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата), "ПолноеНаименование");
	ОбластьМакетаШапка.Параметры.ПредставлениеТС          = уатОбщегоНазначения.уатПредставлениеТС(ТС, Организация) + " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ТС) + ")";
	Водитель1Представление = уатОбщегоНазначения.уатФИОФизЛица(Водитель1, НачалоДня(Дата));
	ОбластьМакетаШапка.Параметры.Водитель = Водитель1;
	ОбластьМакетаШапка.Параметры.ПредставлениеВодителя = ?(Водитель1Представление = Неопределено, Водитель1, 
		Водитель1Представление.Фамилия + " " + Водитель1Представление.Имя + " " + Водитель1Представление.Отчество);
	ОбластьМакетаШапка.Параметры.ДатаВыполнения           = ЭтотОбъект.ДатаИВремяВыполнения;
	
	ПлановоеВремяВыезда   = ЭтотОбъект.ДатаИВремяОтправленияПлан;
			
	ОбластьМакетаШапка.Параметры.ПлановоеВремяВыезда = ПлановоеВремяВыезда;
	
	ТабДокМаршрут = Новый ТабличныйДокумент;

	ОбластьМакета = Макет.ПолучитьОбласть("МаршрутШапка");
	ТабДокМаршрут.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("МаршрутСтрока");
	ПредАдр = 0;
	ОбщийПробег = 0;
	мВремяПрибытия = ПлановоеВремяВыезда;
	ПредСтрока = Неопределено;
	
	МаксВес    = 0; МаксОбъем    = 0; МаксКолМест    = 0;
	ПеревезВес = 0; ПеревезОбъем = 0; ПеревезКолМест = 0;
	ТекВес     = 0; ТекОбъем     = 0; ТекКолМест     = 0;
	
	Для Каждого ТекСтрока ИЗ Заказы цикл
		
		Если ТекСтрока.Пункт = Неопределено ИЛИ НЕ значениеЗаполнено(ТекСтрока.Пункт) тогда
			Если НЕ ТекСтрока.ЗаказГрузоотправителя.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
				мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресОтправления;	
			ИначеЕсли НЕ ТекСтрока.Заказ.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
				мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресНазначения;
			Иначе
				Продолжить;
			КОнецЕсли;
		Иначе
			мАдр = ТекСтрока.Пункт;
		КонецЕсли;
		мАдр = ПолучитьАдресСтрокой(мадр);
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() И ТекСтрока.Контрагент.Пустая()тогда
			мКонтр = "";
		ИначеЕсли ТекСтрока.ЗаказГрузоотправителя.Пустая() И НЕ ТекСтрока.Контрагент.Пустая() тогда	
			мКонтр = ТекСтрока.Контрагент;
		Иначе
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
				мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузоотправитель;	
			Иначе
				мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузополучатель;
			КонецЕсли;
			Если мКонтр = Неопределено ИЛИ НЕ ЗначениеЗаполнено(мКонтр) тогда
				мКонтр = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
			КОнецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
			ПеревезВес     = ПеревезВес     + ТекСтрока.ВесБрутто;
			ПеревезОбъем   = ПеревезОбъем   + ТекСтрока.Объем;
			ПеревезКолМест = ПеревезКолМест + ТекСтрока.КоличествоМест;
			ТекВес         = ТекВес         + ТекСтрока.ВесБрутто;
			ТекОбъем       = ТекОбъем       + ТекСтрока.Объем;
			ТекКолМест     = ТекКолМест     + ТекСтрока.КоличествоМест;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка тогда
			ТекВес         = ТекВес         - ТекСтрока.ВесБрутто;
			ТекОбъем       = ТекОбъем       - ТекСтрока.Объем;
			ТекКолМест     = ТекКолМест     - ТекСтрока.КоличествоМест;
		КонецЕсли;
		МаксВес     = Макс(МаксВес    ,ТекВес);
		МаксОбъем   = Макс(МаксОбъем  ,ТекОбъем);
		МаксКолМест = Макс(МаксКолМест,ТекКолМест);
		
		Если ПредАдр <> мАдр тогда
			мРаст = ТекСтрока.Расстояние;
			ОбщийПробег = ОбщийПробег  + мРаст;
		Иначе
			Если (ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя И ПредСтрока.ЗаказГрузоотправителя = ТекСтрока.ЗаказГрузоотправителя) ИЛИ (ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный И ПредСтрока.Контрагент = ТекСтрока.Контрагент) тогда
				Продолжить;		
			Иначе				
				мРаст = "";
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.НомерСтроки <> 1 тогда
			мВремяПрибытия = СложитьВремя(мВремяПрибытия,ПредСтрока.Время);
			мВремяПрибытия = СложитьВремя(мВремяПрибытия,ПредСтрока.Стоянка);
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерПункта  = ТекСтрока.НомерСтроки;
		ОбластьМакета.Параметры.Адрес        = мАдр;
		ОбластьМакета.Параметры.Расстояние   = мРаст;
		ОбластьМакета.Параметры.Контрагент   = мКонтр;
		ОбластьМакета.Параметры.ПрибытиеПлан = мВремяПрибытия;
		ОбластьМакета.Параметры.Операция     = ТекСТрока.ТипТочкиМаршрута;
		ОбластьМакета.Параметры.ВремяРабот   = ТекСтрока.Стоянка;
		
		ТабДокМаршрут.Вывести(ОбластьМакета);
		
		ПредАдр = мАдр;	
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("МаршрутПодвал");
	ОбластьМакета.Параметры.ПеревезеноВес     = ПеревезВес;
	ОбластьМакета.Параметры.ПеревезеноОбъем   = ПеревезОбъем;
	ОбластьМакета.Параметры.ПеревезеноКолМест = ПеревезКолМест;
	ОбластьМакета.Параметры.МаксВес           = МаксВес;
	ОбластьМакета.Параметры.МаксОбъем         = МаксОбъем;
	ОбластьМакета.Параметры.МаксКолМест       = МаксКолМест;
	ТабДокМаршрут.Вывести(ОбластьМакета);
	
	Если ПредСтрока <> Неопределено тогда
		мВремяПрибытия = СложитьВремя(мВремяПрибытия,ПредСтрока.Время);
		мВремяПрибытия = СложитьВремя(мВремяПрибытия,ПредСтрока.Стоянка);
	КонецЕсли;

	ОбластьМакетаШапка.Параметры.ПлановоеВремяВозврата = мВремяПрибытия;
	
	ТабДок.Вывести(ОбластьМакетаШапка);
	ТабДок.Вывести(ТабДокМаршрут);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Возврат ТабДок;
	
КонецФункции // ПечатьМаршрутногоЛистаПоЗаказам()

// Формирует печатную форму путевых листов с детализацией по заказам
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
//
Функция ПечатьМаршрутныйЛистСЗаказами() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ЭтотОбъект.ПолучитьМакет("МаршрутныйЛистСЗаказами");
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Заголовок
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаШапка.Параметры.ТекстЗаголовка           = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, "Маршрутный лист");
	ОбластьМакетаШапка.Параметры.ПредставлениеПеревозчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент, Дата), "ПолноеНаименование");
	ОбластьМакетаШапка.Параметры.ПредставлениеТС          = уатОбщегоНазначения.уатПредставлениеТС(ТС, Организация) + " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ТС) + ")";
	Водитель1Представление = уатОбщегоНазначения.уатФИОФизЛица(Водитель1, НачалоДня(Дата));
	ОбластьМакетаШапка.Параметры.Водитель = Водитель1;
	ОбластьМакетаШапка.Параметры.ПредставлениеВодителя = ?(Водитель1Представление = Неопределено, Водитель1, 
		Водитель1Представление.Фамилия + " " + Водитель1Представление.Имя + " " + Водитель1Представление.Отчество);
	ОбластьМакетаШапка.Параметры.ДатаВыполнения           = ЭтотОбъект.ДатаИВремяВыполнения;
	
	ПлановоеВремяВыезда   = ЭтотОбъект.ДатаИВремяОтправленияПлан;
			
	ОбластьМакетаШапка.Параметры.ПлановоеВремяВыезда = ПлановоеВремяВыезда;
	
	ТабДокМаршрут = Новый ТабличныйДокумент;
	ТабДокЗаказ   = Новый ТабличныйДокумент;

	ОбластьМакета = Макет.ПолучитьОбласть("МаршрутШапка");
	ТабДокМаршрут.Вывести(ОбластьМакета);
	
	ОбластьМакетаАдрес = Макет.ПолучитьОбласть("СтрокаАдрес");
	ОбластьМакетаЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказ");
	
	ПредАдр = 0;
	ПредСтрока = Неопределено;
	ИзменилсяЗаказ = Ложь;
	ОбщийПробег = 0; мСтоянка  = 0;
	СчАдресов = 1;  СчЗаказов = 1;
	МаксВес    = 0; МаксОбъем    = 0; МаксКолМест    = 0; МаксЗаказов    = 0;
	ПеревезВес = 0; ПеревезОбъем = 0; ПеревезКолМест = 0; ПеревезЗаказов = 0;
	мВес       = 0; мОбъем       = 0; мКолМест       = 0; 
	ТекВес     = 0; ТекОбъем     = 0; ТекКолМест     = 0; ТекКолЗаказов  = 0;
	мВремяПрибытия = ПлановоеВремяВыезда;
	
	Для Каждого ТекСтрока ИЗ Заказы цикл
		
		Если ТекСтрока.Пункт = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) тогда
			Если НЕ ТекСтрока.Заказ.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
				мАдр = ТекСтрока.Заказ.АдресОтправления;
			ИначеЕсли НЕ ТекСтрока.Заказ.Пустая() И ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
				мАдр = ТекСтрока.Заказ.АдресДоставки;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			мАдр = ТекСтрока.Пункт;
		КонецЕсли;
		
		мАдр = ПолучитьАдресСтрокой(мАдр);
		
		Если мАдр <> ПредАдр тогда
			
			Если ПредАдр <> 0 тогда
				//выводим старую
				ОбластьМакетаАдрес.Параметры.Стоянка      = мСтоянка;
				ТабДокМаршрут.Вывести(ОбластьМакетаАдрес);
				Если ИзменилсяЗаказ = Истина тогда
					ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
					ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
					ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
					Если СчАдресов > 2 тогда
						мВремяПрибытия = СложитьВремя(мВремяПрибытия,мСтоянка);
						ОбластьМакетаАдрес.Параметры.ПрибытиеПлан = мВремяПрибытия;
					КонецЕсли;
					ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
					мВес = 0; мОбъем = 0; мКолМест = 0;
				КонецЕсли;
				ТабДокМаршрут.Вывести(ТабДокЗаказ);
				ТабДокЗаказ = Новый ТабличныйДокумент;
				ИзменилсяЗаказ = Ложь;
			КонецЕсли;
			
			ОбластьМакетаАдрес = Макет.ПолучитьОбласть("СтрокаАдрес");
			ОбластьМакетаАдрес.Параметры.Адрес           = мАдр;
			ОбластьМакетаАдрес.Параметры.РасстояниеВремя = "" + ТекСтрока.Расстояние + " / " + Формат(ТекСтрока.Время,"ЧДЦ=2; ЧРД=:");
			ОбластьМакетаАдрес.Параметры.ПрибытиеПлан    = мВремяПрибытия;
			ОбластьМакетаАдрес.Параметры.Номер           = СчАдресов;
			мВремяПрибытия = СложитьВремя(мВремяПрибытия,ТекСтрока.Время);
			мСтоянка   = 0;
			СчАдресов = СчАдресов + 1;
			СчЗаказов = 1;
			ОбщийПробег = ОбщийПробег  + ТекСтрока.Расстояние;
			
		КонецЕсли;
		
		ПредАдр = мАдр;
		//произвольный пункт 
		Если ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя И НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) 
		 ИЛИ ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный И НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент) И НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) тогда
			мСтоянка   = мСтоянка + ТекСтрока.Стоянка;
			ПредСтрока = ТекСтрока;
			Продолжить;
		КонецЕсли;
		
		Если ПредСтрока = Неопределено
		 ИЛИ (ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя И (ПредСтрока.ЗаказГрузоотправителя <> ТекСтрока.ЗаказГрузоотправителя ИЛИ ПредСтрока.ТипТочкиМаршрута <> ТекСтрока.ТипТочкиМаршрута))
		 ИЛИ (ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный И ТекСтрока.Контрагент <> ПредСтрока.Контрагент) Тогда
		 
			Если ИзменилсяЗаказ = Истина Тогда
				//Выводим
				ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
				ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
				ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
				ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
				ИзменилсяЗаказ = Ложь;
				мВес = 0; мОбъем = 0; мКолМест = 0;
			КонецЕсли;
			мСтоянка = СложитьВремя(мСтоянка,ТекСтрока.Стоянка);
			ОбластьМакетаЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказ");
			мКонтр = "";
			Если ТекСтрока.ЗаказГрузоотправителя.Пустая() И НЕ ТекСтрока.Контрагент.Пустая() тогда
				мКонтр = ТекСтрока.Контрагент;
			Иначе
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузоотправитель;
				Иначе
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузополучатель;
				КонецЕсли;
				Если мКонтр = Неопределено ИЛИ НЕ ЗначениеЗаполнено(мКонтр) тогда
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
				КонецЕсли;
			КонецЕсли;
			
			ОбластьМакетаЗаказ.Параметры.Номер      = "" + (СчАдресов - 1) + "." + СчЗаказов;
			ОбластьМакетаЗаказ.Параметры.Контрагент = мКонтр;
			ОбластьМакетаЗаказ.Параметры.Заказ      = "" + ТекСтрока.ЗаказГрузоотправителя.Номер + " от " + ТекСтрока.ЗаказГрузоотправителя.Дата;
			ОбластьМакетаЗаказ.Параметры.НомерПоУчетуЗаказчика = ТекСтрока.ЗаказГрузоотправителя.НомерПоУчетуЗаказчика;
			ОбластьМакетаЗаказ.Параметры.Операция   = ТекСтрока.ТипТочкиМаршрута;
			
			СчЗаказов = СчЗаказов + 1;
			ИзменилсяЗаказ = Истина;
		КонецЕсли;
		
		мВес        = мВес        + ТекСтрока.ВесБрутто;
		мОбъем      = мОбъем      + ТекСтрока.Объем;
		мКолМест    = мКолМест    + ТекСтрока.КоличествоМест;
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
			ПеревезВес     = ПеревезВес     + ТекСтрока.ВесБрутто;
			ПеревезОбъем   = ПеревезОбъем   + ТекСтрока.Объем;
			ПеревезКолМест = ПеревезКолМест + ТекСтрока.КоличествоМест;
			ТекВес         = ТекВес         + ТекСтрока.ВесБрутто;
			ТекОбъем       = ТекОбъем       + ТекСтрока.Объем;
			ТекКолМест     = ТекКолМест     + ТекСтрока.КоличествоМест;
			ПеревезЗаказов = ПеревезЗаказов + 1;
			ТекКолЗаказов  = ТекКолЗаказов  + 1;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка тогда
			ТекВес         = ТекВес         - ТекСтрока.ВесБрутто;
			ТекОбъем       = ТекОбъем       - ТекСтрока.Объем;
			ТекКолМест     = ТекКолМест     - ТекСтрока.КоличествоМест;
			ТекКолЗаказов  = ТекКолЗаказов  - 1;
		КонецЕсли;
		МаксВес     = Макс(МаксВес    ,ТекВес);
		МаксОбъем   = Макс(МаксОбъем  ,ТекОбъем);
		МаксКолМест = Макс(МаксКолМест,ТекКолМест);
		МаксЗаказов = Макс(МаксЗаказов,ТекКолЗаказов);

		ПредСтрока = ТекСтрока;
		
	КонецЦикла;
	
	ОбластьМакетаАдрес.Параметры.Стоянка   = мСтоянка;
	//ОбластьМакетаАдрес.Параметры.ПрибытиеПлан =
	//ОбластьМакетаАдрес.Параметры.ПрибытиеФакт =
	ТабДокМаршрут.Вывести(ОбластьМакетаАдрес);
	Если ИзменилсяЗаказ = Истина тогда
		ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
		ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
		ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
		ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
	КонецЕсли;
	ТабДокМаршрут.Вывести(ТабДокЗаказ);
	ОбластьМакета = Макет.ПолучитьОбласть("МаршрутПодвал");
	ОбластьМакета.Параметры.ПеревезеноВес     = ПеревезВес;
	ОбластьМакета.Параметры.ПеревезеноОбъем   = ПеревезОбъем;
	ОбластьМакета.Параметры.ПеревезеноКолМест = ПеревезКолМест;
	ОбластьМакета.Параметры.ПеревезеноЗаказов = ПеревезЗаказов;
	ОбластьМакета.Параметры.МаксВес           = МаксВес;
	ОбластьМакета.Параметры.МаксОбъем         = МаксОбъем;
	ОбластьМакета.Параметры.МаксКолМест       = МаксКолМест;
	ОбластьМакета.Параметры.МаксЗаказов       = МаксЗаказов;
	ТабДокМаршрут.Вывести(ОбластьМакета);
	
	
	Если ПредСтрока <> Неопределено тогда
		мВремяПрибытия = СложитьВремя(мВремяПрибытия,ПредСтрока.Время);
		мВремяПрибытия = СложитьВремя(мВремяПрибытия,ПредСтрока.Стоянка);
	КонецЕсли;

	ОбластьМакетаШапка.Параметры.ПлановоеВремяВозврата = мВремяПрибытия;
	
	ТабДок.Вывести(ОбластьМакетаШапка);
	ТабДок.Вывести(ТабДокМаршрут);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	Возврат ТабДок;
	
КонецФункции // ПечатьМаршрутногоЛистаПоЗаказам()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ Проведен И Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
	Иначе
		Если НазваниеМакета = "МаршрутныйЛист" Тогда
			ТабДокумент  = ПечатьМаршрутныйЛист();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		ИначеЕсли НазваниеМакета = "МаршрутныйЛистСЗаказами" Тогда
			ТабДокумент  = ПечатьМаршрутныйЛистСЗаказами();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры // Печать

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроведениеПоЗаказамНаТСИЗаказамГрузоотправителей(Отказ, РежимПроведения, Заголовок, СтруктураШапкиДокумента) 
	
	//Подготовим таблицу заказов для проведения.
	ТаблицаПоЗаказам = ПодготовитьТаблицуЗаказов();
	ТаблицаПоЗаказамГрузоотправителей = ТаблицаПоЗаказам.скопировать();
	
	НаборДвижений = Движения.уатЗаказыНаТС;
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатЗаказыНаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаПоЗаказам;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказчик", "Заказчик");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказНаТС", "ЗаказНаТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаПоЗаказам", ТаблицаПоЗаказам);
	
	ТаблицыДанныхДокумента = уатОбщегоНазначенияТиповые.уатЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
	
	//сюда вставить контроль остатков по регистру заказы на ТС.
	НаборДвижений.КонтрольОстатков(ЭтотОбъект,"Заказы",СтруктураШапкиДокумента,Отказ,Заголовок);
	
	уатОбщегоНазначенияТиповые.уатЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	ТаблицаПоЗаказамГрузоотправителей.Колонки.Заказчик.Имя = "Контрагент";
	ТаблицаПоЗаказамГрузоотправителей.Колонки.ЗаказНаТС.Имя = "ЗаказГрузоотправителя";
	ТаблицаПоЗаказамГрузоотправителей.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаПоЗаказамГрузоотправителей.Колонки.Добавить("Период");
	ТаблицаПоЗаказамГрузоотправителей.Колонки.Добавить("Регистратор");
	ТаблицаПоЗаказамГрузоотправителей.Колонки.Добавить("видДвижения");
	Для каждого ТекСтрока ИЗ ТаблицаПоЗаказамГрузоотправителей цикл
		ТекСтрока.ДоговорКонтрагента = ТекСтрока.ЗаказГрузоотправителя.ДоговорКонтрагента;	
		ТекСтрока.Период = Дата;
		ТекСтрока.регистратор = Ссылка;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
	Движения.уатЗаказыГрузоотправителей.Загрузить(ТаблицаПоЗаказамГрузоотправителей);
	
КонецПроцедуры

Процедура ПроведениеПоОборотамПоМаршрутномуЛисту(Отказ,Заголовок,СтруктураШапкиДокумента)
	
	НаборДвижений = Движения.уатОборотыПоМаршрутномуЛисту;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	мТаб = Заказы.Выгрузить(,"ЗаказГрузоотправителя");
	мТаб.Свернуть("ЗаказГрузоотправителя");
	колЗаказов = мТаб.Количество();
	
	НовСтрока = ТаблицаДвижений.Добавить();
	НовСтрока.организация       = Организация;
	НовСТрока.Перевозчик        = Контрагент;
	НовСтрока.МаршрутныйЛист    = Ссылка;
//	НовСтрока.ТипПеревозки      = Типперевозки;
	НовСтрока.ТС                = ТС;
	НовСтрока.Водитель1         = Водитель1;
	НовСтрока.Водитель2         = Водитель2;
	НовСтрока.Сотрудник1        = Сотрудник1;
	НовСтрока.Сотрудник2        = Сотрудник2;
	НовСтрока.ВремяВПути        = ВремяВПути * 60;
	НовСтрока.Расстояние      = Расстояние;
	НовСтрока.КоличествоЗаказов = КолЗаказов;
	НовСтрока.КоличествоМест    = КоличествоМест;
	НовСтрока.Объем             = Объем;
	НовСтрока.ВесБрутто         = ВесБрутто;
	
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.ВыполнитьДвижения();
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Заказы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоЗаказам        - таблица значений, содержащая данные для проведения и проверки ТЧ Заказы
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Заказы";
	
	Если Заказы.Количество() = 0 Тогда
		СтрокаСообщения = "Не заполнена табличная часть ""Заказы""!";
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество");
	
	//!!!!вызываем не стандартный метод проверки, а делаем это своим потому что если у нас выбраны 
	// пункт выезда и возврата то в соответствующих строках таб части будет заполнено только поле Пункт 
	// и стандартный метод естественно будет ругаться на эту строку 
	// уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, 
	//     СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти.Заказы.Представление();
	МетаданныеРеквизиты         = ЭтотОбъект.Метаданные().ТабличныеЧасти.Заказы.Реквизиты;
	Для Каждого ТекСтрока ИЗ Заказы цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ТекСтрока.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
									   
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) тогда
			Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				Значение = ТекСтрока[КлючЗначение.Ключ];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
						ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
						СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					Иначе
						СтрокаСообщения = КлючЗначение.Значение;
					КонецЕсли;
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) тогда
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗаказы()
  
Функция  ПодготовитьТаблицуЗаказов()
	Запрос = Новый Запрос();
	ЗАпрос.Текст = 
	"ВЫБРАТЬ
	|	уатМаршрутныйЛист.НомерСтроки,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент КАК Заказчик,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя КАК ЗаказНаТС,
	|	уатМаршрутныйЛист.Номенклатура,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.КрайнийСрокОтработки КАК ДатаВыполнения,
	|	уатМаршрутныйЛист.ПараметрВыработки,
	|   СУММА(уатМаршрутныйЛист.Количество) КАК Количество,
	|	СУММА(уатМаршрутныйЛист.КоличествоПараметрВыработки) КАК КоличествоПараметрВыработки
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И ТипТочкиМаршрута = &ТипТочкиРазгрузка
	|	И НЕ ЗаказГрузоотправителя = &ПустойЗаказ
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛист.Номенклатура,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.КрайнийСрокОтработки,
	|	уатМаршрутныйЛист.ПараметрВыработки,
	|	уатМаршрутныйЛист.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка) ;
	Запрос.УстановитьПараметр("ТипТочкиРазгрузка",Перечисления.уатТипыТочекМаршрута.Разгрузка);
	Запрос.УстановитьПараметр("ПустойЗаказ",Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураПолей = Новый Структура("ТС, Контрагент, Организация, ДатаИВремяВыполнения");
	//Если уатОбщегоНазначения.уатДоступностьКомпоненты("УАТ") тогда
	//	СтруктураПолей.Вставить("Водитель1");
	//КонецЕсли;
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя тогда
		ПроверитьЗаполнениеТабличнойЧастиЗаказы(Отказ, Заголовок);
		Если Не Отказ Тогда
			ПроведениеПоЗаказамНаТСИЗаказамГрузоотправителей(Отказ,РежимПроведения,Заголовок,СтруктураШапкиДокумента);
		КонецЕсли;
	КонецЕсли;
	ПроведениеПоОборотамПоМаршрутномуЛисту(Отказ,Заголовок,СтруктураШапкиДокумента);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	мВес = 0; мОбъем = 0; мКолМест = 0;
	мВремяВПути = 0;
	мРасстояние = 0;
	Для Каждого ТекСтрока ИЗ Заказы цикл
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
			мВес     = мВес     + ТекСтрока.ВесБрутто;
			мОбъем   = мОбъем   + ТекСтрока.Объем;
			мКолМест = мКолМест + ТекСтрока.КоличествоМест;
		КонецЕсли;
		ТекСтрока.Выполнен = Истина;
		мРасстояние = мРасстояние + ТекСтрока.Расстояние;
		мВремяВПути = СложитьВремя(мВремяВПути, ТекСтрока.Время);
	КонецЦикла;
	ВесБрутто = мВес; Объем = мОбъем; КоличествоМест = мКолМест;
	Расстояние = мРасстояние;
	ВремяВПути = мВремяВПути;
	Если НЕ уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ") тогда
		Контрагент = Организация;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") тогда
		СтандартнаяОбработка = Ложь;
		ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
		Организация = ДанныеЗаполнения.Организация;
		ДатаИВремяВыполнения = ?(ТекущаяДата() > ДанныеЗаполнения.КрайнийСрокОтработки,ТекущаяДата(),ДанныеЗаполнения.КрайнийСрокОтработки);
		Если Ложь тогда
			ДанныеЗаполнения = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
		КонецЕсли;
		Для Каждого ТекСтрока ИЗ ДанныеЗаполнения.Товары Цикл
			НовСтрока = Заказы.Добавить();
			НовСтрока.ЗаказГрузоотправителя       = ДанныеЗаполнения;
			НовСтрока.Пункт                       = ДанныеЗаполнения.АдресОтправления;
			НовСтрока.ТипТочкиМаршрута            = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтрока.Номенклатура                = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.Количество                  = ТекСтрока.Количество;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.КоличествоМест              = ТекСтрока.КоличествоМест;
			НовСтрока.ПараметрВыработки           = ТекСтрока.ПараметрВыработки;
			НовСтрока.КоличествоПараметрВыработки = ТекСтрока.КоличествоПараметрВыработки;
			НовСтрока.ВесБрутто                   = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                       = ТекСтрока.Объем;
			НовСтрока.Стоянка					  = ДанныеЗаполнения.СтоянкаПунктОтправления;
		КонецЦикла;
		Для Каждого ТекСтрока ИЗ ДанныеЗаполнения.Товары Цикл
			НовСтрока = Заказы.Добавить();
			НовСтрока.ЗаказГрузоотправителя       = ДанныеЗаполнения;
			НовСтрока.Пункт                       = ДанныеЗаполнения.АдресНазначения;
			НовСтрока.ТипТочкиМаршрута            = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтрока.Номенклатура                = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.Количество                  = ТекСтрока.Количество;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.КоличествоМест              = ТекСтрока.КоличествоМест;
			НовСтрока.ПараметрВыработки           = ТекСтрока.ПараметрВыработки;
			НовСтрока.КоличествоПараметрВыработки = ТекСтрока.КоличествоПараметрВыработки;
			НовСтрока.ВесБрутто                   = ТекСтрока.ВесБрутто;
			НовСтрока.Объем                       = ТекСтрока.Объем;
			НовСтрока.Стоянка					  = ДанныеЗаполнения.СтоянкаПунктНазначения;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мДоступнаКомпонентаУЭ = уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ");

табВыбраннаяНоменклатура = Новый ТаблицаЗначений();
табВыбраннаяНоменклатура.Колонки.Добавить("Заказчик",          Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.ПодразделенияОрганизаций"));
табВыбраннаяНоменклатура.Колонки.Добавить("ЗаказНаТС",         Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
табВыбраннаяНоменклатура.Колонки.Добавить("Номенклатура",      Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() тогда 
	табВыбраннаяНоменклатура.Колонки.Добавить("ЕдиницаИзмерения",  Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
Иначе
	табВыбраннаяНоменклатура.Колонки.Добавить("ЕдиницаИзмерения",  Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
КонецЕсли;
табВыбраннаяНоменклатура.Колонки.Добавить("Количество",        Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
табВыбраннаяНоменклатура.Колонки.Добавить("ДатаВыполнения",    Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата)));
табВыбраннаяНоменклатура.Колонки.Добавить("ПараметрВыработки", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
