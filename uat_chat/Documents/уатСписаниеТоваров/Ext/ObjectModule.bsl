////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
//полученное из константы.


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьСписаниеТоваров()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписаниеТоваров.Номер,
		|	СписаниеТоваров.Дата,
		|	СписаниеТоваров.Организация КАК Организация,
		|	СписаниеТоваров.Организация.Представление,
		|	СписаниеТоваров.Подразделение,
		|	СписаниеТоваров.Подразделение.Представление,
		|	СписаниеТоваров.Склад,
		|	СписаниеТоваров.Склад.Представление,
		|	СписаниеТоваров.Товары.(
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Номенклатура.Код КАК Код,";
		
		// Берем из самого реквизита Номенклатура
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Артикул", Справочники.Номенклатура.ПустаяСсылка()) Тогда
			Запрос.Текст = Запрос.Текст + "
			|		Номенклатура.Артикул КАК Артикул,";
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.уатСписаниеТоваров КАК СписаниеТоваров
		|ГДЕ
		|	СписаниеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписаниеТоваров.Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";
		Макет       = ПолучитьМакет("Накладная");
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Накладная на списание");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		ОбластьМакета.Параметры.ПредставлениеОрганизации = Шапка.ОрганизацияПредставление;
		ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.ПодразделениеПредставление;
		ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.СкладПредставление;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыводитьКоды = Истина;
		Колонка      = "Код";
		
		Движения.уатПартииТоваровНаСкладах.Прочитать();
		ТабДвижений = Движения.уатПартииТоваровНаСкладах.Выгрузить();
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		
		СуммаИтого = 0;
		Ном        = 0;
		
		// Товары
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Товар;
			
			ОбластьДанных.Параметры.Сумма = РассчитатьСуммуСписания(ВыборкаСтрокТовары, ТабДвижений);
			ОбластьДанных.Параметры.Цена  = Окр(ОбластьДанных.Параметры.Сумма / ОбластьДанных.Параметры.Количество, 2, 1);
			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			СуммаИтого = СуммаИтого + ОбластьДанных.Параметры.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаИтого);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// Вывести Сумму прописью
		ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВыборкаСтрокТовары.Количество()
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаИтого, мВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаИтого, мВалютаРегламентированногоУчета);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьСписаниеТоваров()
	
	// Формирует табличный документ по унифицированной форме ТОРГ-13
	// 
	// Возвращаемое значение
	//  Табличный документ - унифицированная форма ТОРГ-13
	//
	Функция ПечатьТОРГ16()
		
		ТоварКод = "Код";
		
		ВалютаПечати = мВалютаРегламентированногоУчета;
		Запрос       = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер КАК НомерДокумента,
		|	Дата  КАК ДатаДокумента,
		|	Организация,
		|	Склад,
		|	Склад.Представление КАК ПредставлениеСклада,
		|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
		|	Товары.(
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|		Номенклатура." + ТоварКод + " КАК ТоварКод,
		//|		Цена,
		//|		Сумма Как Стоимость,
		|		Количество,
		|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
		|		ЕдиницаИзмерения." + ?(Метаданные.НайтиПоПолномуИмени("Справочник.ЕдиницыИзмерения") = Неопределено,"Код","ЕдиницаПоКлассификатору.Код") + " КАК ЕдиницаИзмеренияКодПоОКЕИ
		|	)
		|ИЗ
		|	Документ.уатСписаниеТоваров КАК СписаниеТоваров, Константы
		|
		|ГДЕ
		|	СписаниеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки
		|";
		
		Движения.уатПартииТоваровНаСкладах.Прочитать();
		ТабДвижений = Движения.уатПартииТоваровНаСкладах.Выгрузить();
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		Макет       = ПолучитьОбщийМакет("ТОРГ16");
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_ТОРГ16";
		
		// Выводим общие реквизиты шапки
		ОписаниеОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(ОписаниеОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = ОписаниеОрганизации.КодПоОКПО;
		
		//Руководители = ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
		//Руководитель = Руководители.Руководитель;
		//Бухгалтер    = Руководители.ГлавныйБухгалтер;
		//ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 11;
		СтрокПодвала    = 0;
		НомерСтраницы   = 1;
		Ном             = 0;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КоличествоСтрок    = ВыборкаСтрокТовары.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");
		
		// Товары
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ИтогоСтоимостьПоСтранице = 0;
				НомерСтраницы            = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ДатаСписанияТовара = Шапка.ДатаДокумента;
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		СтрокНаСтранице = 27;
		СтрокШапки      = 5;
		СтрокПодвала    = 11;
		НомерСтраницы   = 1;
		Ном             = 0;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		НомерСтраницы                            = НомерСтраницы + 1;
		ЗаголовокТаблицы                         = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		ИтогоСтоимость = 0;
		
		// Выводим многострочную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");
		
		// Товары
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			//Начинаем новую страницу, если предыдущая строка была последней на странице
			//или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ИтогоСтоимостьПоСтранице = 0;
				НомерСтраницы            = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			ОбластьМакета.Параметры.КоличествоМест = ВыборкаСтрокТовары.Количество;
			ОбластьМакета.Параметры.Стоимость = РассчитатьСуммуСписания(ВыборкаСтрокТовары, ТабДвижений);
			ОбластьМакета.Параметры.Цена  = Окр(ОбластьМакета.Параметры.Стоимость / ВыборкаСтрокТовары.Количество, 2, 1);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			// Обновим итоги по документу
			ИтогоСтоимость = ИтогоСтоимость + ОбластьМакета.Параметры.Стоимость;
		КонецЦикла;
		
		// Выводим итоги по документу в общем
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Итого = ИтогоСтоимость;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.СуммаСписанияПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(ИтогоСтоимость, Шапка.ВалютаДокумента);
													
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабДокумент.ПолеСверху = 0;
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСнизу  = 0;
		ТабДокумент.ПолеСправа = 0;
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		Возврат ТабДокумент;
		
		
	КонецФункции // ПечатьТОРГ16()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если НазваниеМакета = "Ведомость" Тогда
			
			ТабДокумент = ПечатьСписаниеТоваров();
		ИначеЕсли НазваниеМакета = "ТОРГ16" тогда
			
			// Унифицированная форма ТОРГ-16 (накладная на внутренее перемещение)
			ТабДокумент = ПечатьТОРГ16();
			
		ИначеЕсли ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЕсли; 
		
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("Ведомость", "Акт списания товаров");
		СтруктураМакетов.Вставить("ТОРГ16", "ТОРГ-16 (Акт о списании товаров)");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли

// Процедура выполняет заполнение табличной части по инвентаризации товаров.
//
// Параметры:
//  ДокументОснование 			- ссылка на документ основание (инвентаризация товаров).
//
//  ПодтверждатьОчисткуСтрок	– булево – Истина, если необходимо запрашивать 
//								  подтверждение пользователя на очистку текущего содержимого
//								  таб.части, иначе Ложь
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование, ПодтверждатьОчисткуСтрок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда		
		
		ПредставлениеИнвентаризацияТоваровНаСкладе = Метаданные.Документы.уатИнвентаризацияТоваров.Представление();
		ТекстПредупреждения = "Документ """ + ПредставлениеИнвентаризацияТоваровНаСкладе + """ не выбран.
		                      |Заполнение невозможно.";
	#Если Клиент Тогда							  
		Предупреждение(ТекстПредупреждения, , );
		Возврат;	
	#Иначе 
		ВызватьИсключение ТекстПредупреждения;
	#КонецЕсли

	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
       	Если ПодтверждатьОчисткуСтрок Тогда			
	#Если Клиент Тогда			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
	#КонецЕсли		
		КонецЕсли;

		Товары.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка",          Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное
	|ИЗ
	|	Документ.уатИнвентаризацияТоваров.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ 
	|       ДокСписание.Номенклатура,
	|       ДокСписание.Ссылка.Склад КАК Склад,
	|		ДокСписание.Количество КАК Количество
	|	 ИЗ
	|       Документ.уатСписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка <> &ДокументСсылка
	|       И ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	) КАК ВложенныйЗапрос
	|ПО
	|	Док.Номенклатура = ВложенныйЗапрос.Номенклатура И Док.Ссылка.Склад = ВложенныйЗапрос.Склад
	|
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка 
	|   И Док.КоличествоУчет - Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;

		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
 		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		
	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Функция рассчитывает сумму списанную по текущей строке документа
//
Функция РассчитатьСуммуСписания(ТекСтрока, ТабДвижений) Экспорт
	
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Номенклатура",               ТекСтрока.Номенклатура);
	
	НаборСтрок = ТабДвижений.НайтиСтроки(СтруктПоиска);
	КолСписать = ТекСтрока.Количество;
	Сумма      = 0;
	
	Для Каждого СтрокаДвиж Из НаборСтрок Цикл
		Если КолСписать >= ТекСтрока.Количество Тогда
			Сумма      = Сумма      + СтрокаДвиж.Стоимость;
			КолСписать = КолСписать - СтрокаДвиж.Количество;
			СтрокаДвиж.Стоимость  = 0;
			СтрокаДвиж.Количество = 0;
		Иначе
			Если Не СтрокаДвиж.Количество = 0 Тогда
				СумСписать = Окр( СтрокаДвиж.Стоимость * КолСписать / СтрокаДвиж.Количество, 2, 1);
				Сумма      = Сумма + СумСписать;
				СтрокаДвиж.Стоимость  = СтрокаДвиж.Стоимость  - СумСписать;
				СтрокаДвиж.Количество = СтрокаДвиж.Количество - КолСписать;
			Иначе
				Сумма = Сумма + СтрокаДвиж.Стоимость;
				СтрокаДвиж.Стоимость = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // РассчитатьСуммуСписания()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание,СтандартнаяОбработка)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатИнвентаризацияТоваров") Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ИнвентаризацияТоваровНаСкладе = Основание;
		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(Основание, Ложь);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	//проверка на ведение складского учета средствами УАТ
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		Сообщить("Для организации """ + Организация + """ отключена возможность ведения складского учета документами УАТ!", СтатусСообщения.Внимание);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатСписаниеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение.ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатСписаниеТоваров.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатСписаниеТоваров.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект,"Товары", , Отказ, Заголовок);
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
