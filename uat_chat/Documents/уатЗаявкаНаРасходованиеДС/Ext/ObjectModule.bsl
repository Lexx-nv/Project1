Перем Права Экспорт; //Переменная хранит список прав и настроек , полученный из глобальной переменной

Перем мВалютаРегламентированногоУчета Экспорт;//Переменная хранит значение валюты регламентированного учёта,полученное из констант
Перем ТаблицаПлатежейУпр; //Таблица платежей в управленческой валюте
Перем мСтруктураПараметровДенежныхСредств; //Структура параметров денежных средств
Перем мВалютаУправленческогоУчета Экспорт;

Перем ТабПроверкиОборотов; // Таблица для проверки контролируемых значений

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
	// Формирует печатную форму 
	// заявки
	//
	Функция ПечатьЗаявки()
		
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		
		ЕстьРасчетыСКонтрагентами = уатОбщегоНазначения_проф.ЕстьРасчетыСКонтрагентами(ВидОперации);
		Если ЕстьРасчетыСКонтрагентами Тогда
			СтруктураПолей = Новый Структура("Контрагент, Ответственный");
		Иначе
			СтруктураПолей = Новый Структура("Ответственный, ВалютаДокумента");
		КонецЕсли;
		
		Отказ=Ложь;
		//Проверим заполнение реквизитов документов
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаРасходованиеСредств";
		
		Макет = ПолучитьМакет("ЗаявкаНаРасходованиеСредств");
		Обл   = Макет.ПолучитьОбласть("Заголовок");
		
		Обл.Параметры.ЗаголовокЗаявки = "" + ЭтотОбъект + Символы.ПС + ВидОперации;
		Обл.Параметры.Заполнить(ЭтотОбъект);
		
		ТабДокумент.Вывести(Обл);
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			Обл = Макет.ПолучитьОбласть("ЗаголовокРасчеты");
			Обл.Параметры.Контрагент = Контрагент;
			ТабДокумент.Вывести(Обл);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка КАК Сделка,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА (НЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL )
			|			ТОГДА ВЫБОР
			|					КОГДА (НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Проведен)
			|						ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток + ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
			|					ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
			|				КОНЕЦ
			|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
			|	КОНЕЦ КАК ТекущийДолг
			|ИЗ
			|	Документ.уатЗаявкаНаРасходованиеДС.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки КАК РасчетыСКонтрагентамиОстатки
			|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента = РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
			|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка = РасчетыСКонтрагентамиОстатки.Сделка
			|ГДЕ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				Обл = Макет.ПолучитьОбласть("СтрокаРасчеты");
				Обл.Параметры.Заполнить(Результат);
				ТабДокумент.Вывести(Обл);
				
			КонецЦикла;
			
			Обл = Макет.ПолучитьОбласть("ПодвалРасчеты");
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;	
		
		Если НЕ Описание="" Тогда
			
			Обл = Макет.ПолучитьОбласть("ОписаниеЗаявки");
			Обл.Параметры.Описание = Описание;
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сценарий) Тогда // Есть связь с бюджетированием
			
			Обл=Макет.ПолучитьОбласть("ЗаголовокБюджетирование");
			Обл.Параметры.Заполнить(ЭтотОбъект);
			
			// Получение списка контролирующих сценариев для выбранного периода и измерений бюджетирования
			
			СформироватьТаблицуДляКонтроля();
			
			Для Каждого СтрокаПлатеж Из ТабПроверкиОборотов Цикл
				
				Запрос=Новый Запрос;
				
				Запрос.Текст="ВЫБРАТЬ
				|	УстановкаОграниченийПоБюджетам.КонтролирующийСценарий КАК КонтролирующийСценарий,
				|	УстановкаОграниченийПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
				|	УстановкаОграниченийПоБюджетам.ЦФО КАК ЦФО,
				|	УстановкаОграниченийПоБюджетам.Проект КАК Проект,
				|	УстановкаОграниченийПоБюджетам.Контрагент КАК Контрагент,
				|	УстановкаОграниченийПоБюджетам.Номенклатура КАК Номенклатура
				|ИЗ
				|	РегистрСведений.уатУстановкаОграниченийПоБюджетам КАК УстановкаОграниченийПоБюджетам
				|ГДЕ
				|	УстановкаОграниченийПоБюджетам.Период = &Период
				|	И УстановкаОграниченийПоБюджетам.СтатьяОборотов = &СтатьяОборотов
				|	И УстановкаОграниченийПоБюджетам.Сценарий = &Сценарий
				|	И (УстановкаОграниченийПоБюджетам.ЦФО = &ЦФО
				|			ИЛИ УстановкаОграниченийПоБюджетам.ЦФО = &ПустойЦФО)
				|	И (УстановкаОграниченийПоБюджетам.Проект = &Проект
				|			ИЛИ УстановкаОграниченийПоБюджетам.Проект = &ПустойПроект)
				|	И (УстановкаОграниченийПоБюджетам.Контрагент = &Контрагент
				|			ИЛИ УстановкаОграниченийПоБюджетам.Контрагент = &ПустойКонтрагент)
				|	И (УстановкаОграниченийПоБюджетам.Номенклатура = &Номенклатура
				|			ИЛИ УстановкаОграниченийПоБюджетам.Номенклатура = НЕОПРЕДЕЛЕНО)
				|	И УстановкаОграниченийПоБюджетам.ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения
				|	И УстановкаОграниченийПоБюджетам.ВидКонтролируемогоЗначения = &ВидКонтролируемогоЗначения";
				
				Запрос.УстановитьПараметр("Период",ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода,Сценарий.Периодичность));
				Запрос.УстановитьПараметр("СтатьяОборотов",СтатьяОборотов);
				Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
				Запрос.УстановитьПараметр("ВидКонтролируемогоЗначения",Перечисления.ВидыКонтролируемогоЗначенияБюджета.Ограничивающее);
				Запрос.УстановитьПараметр("Сценарий",Сценарий);
				
				Запрос.УстановитьПараметр("ЦФО",ЦФО);
				Запрос.УстановитьПараметр("ПустойЦФО",Новый(Тип("СправочникСсылка.Подразделения")));
				
				Запрос.УстановитьПараметр("Проект",СтрокаПлатеж.Проект);
				Запрос.УстановитьПараметр("ПустойПроект",Новый(Тип("СправочникСсылка.Проекты")));
				
				Запрос.УстановитьПараметр("Контрагент",Контрагент);
				Запрос.УстановитьПараметр("ПустойКонтрагент",Новый(Тип("СправочникСсылка.Контрагенты")));
				
				Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
				
				ТабРезультата = Запрос.Выполнить().Выгрузить();
				
				Если ТабРезультата.Количество()=0 Тогда
					
					Продолжить;
					
				Иначе
					
					Обл.Параметры.НадписьКонтрольОборотов = "Ограничения, установленные по обороту:";
					ТабДокумент.Вывести(Обл);
					
					Обл = Макет.ПолучитьОбласть("ЗаголовокКонтроль");
					ТабДокумент.Вывести(Обл);
					
					ТабРезультата.Колонки.Добавить("СуммаСценарияИсполнение");
					ТабРезультата.Колонки.Добавить("Период");
					
					Для каждого СтрокаПроверки Из ТабРезультата Цикл
						
						Обл = Макет.ПолучитьОбласть("СтрокаКонтроль");
						
						ТекущийСценарий = ?(СтрокаПроверки.КонтролирующийСценарий.Пустая(),Сценарий,СтрокаПроверки.КонтролирующийСценарий);
						
						ДатаНачала = ОбщегоНазначения.ДатаНачалаПериода(ДатаРасхода, ТекущийСценарий.Периодичность);
						ДатаКонца  = ОбщегоНазначения.ДатаКонцаПериода(ДатаНачала,ТекущийСценарий.Периодичность);
						
						КурсСценария = уатБюджетирование.КурсВалютыПоСценарию(Сценарий.Валюта, ДатаНачала,Сценарий).Курс;
						КратностьСценария = уатБюджетирование.КурсВалютыПоСценарию(Сценарий.Валюта, ДатаНачала,Сценарий).Кратность;
						
						Если ТабПроверкиОборотов.Колонки.Найти("СуммаУпр") = Неопределено Тогда
							
							СуммаСценария = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента, Сценарий.Валюта, КурсДокумента, КурсСценария, 
							КратностьДокумента, КратностьСценария);
							
						Иначе
							
							СуммаСценария = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаУпр, , Сценарий.Валюта, СтрокаПлатеж.КурсУпрУчета, КурсСценария, 
							СтрокаПлатеж.КратностьУпрУчета, КратностьСценария);
							
						КонецЕсли;
						
						Запрос.Текст="ВЫБРАТЬ
						|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияКонтрольОборот) КАК СуммаКонтроль,
						|	СУММА(КонтролируемыеЗначенияБюджетовОбороты.СуммаСценарияИсполнениеОборот) КАК СуммаИсполнение
						|ИЗ
						|	РегистрНакопления.уатКонтролируемыеЗначенияБюджетов.Обороты(
						|			&ДатаНач,
						|			&ДатаКон,
						|			,
						|			Контрагент = &Контрагент
						|				И КонтролирующийСценарий = &КонтролирующийСценарий
						|				И Номенклатура = &Номенклатура
						|				И Проект = &Проект
						|				И СтатьяОборотов = &СтатьяОборотов
						|				И Сценарий = &Сценарий
						|				И ЦФО = &ЦФО
						|				И ИспользованиеКонтролируемогоЗначения = &ИспользованиеКонтролируемогоЗначения) КАК КонтролируемыеЗначенияБюджетовОбороты";
									
						Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ДатаНачала));
						Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаНачала));
						Запрос.УстановитьПараметр("Контрагент",СтрокаПроверки.Контрагент);
						Запрос.УстановитьПараметр("КонтролирующийСценарий",СтрокаПроверки.КонтролирующийСценарий);
						Запрос.УстановитьПараметр("Номенклатура",СтрокаПроверки.Номенклатура);
						Запрос.УстановитьПараметр("Проект",СтрокаПроверки.Проект);
						Запрос.УстановитьПараметр("СтатьяОборотов",СтрокаПроверки.СтатьяОборотов);
						Запрос.УстановитьПараметр("Сценарий",Сценарий);
						Запрос.УстановитьПараметр("ЦФО",СтрокаПроверки.ЦФО);
						Запрос.УстановитьПараметр("ИспользованиеКонтролируемогоЗначения",Перечисления.ИспользованиеКонтролируемыхЗначенийБюджетов.ПриИсполнении);
						
						СуммаКонтроль = 0;
						СуммаИсполнение = 0;
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						Если Выборка.Следующий() И (НЕ Выборка["СуммаКонтроль"]=NULL) И (НЕ Выборка["СуммаИсполнение"]=NULL) Тогда
							Обл.Параметры.СуммаКонтроль = Выборка["СуммаКонтроль"];
							Обл.Параметры.СуммаИсполнение = Выборка["СуммаИсполнение"]+?(НЕ Проведен,СуммаСценария,0);
							Обл.Параметры.КонтролирующийСценарий = ТекущийСценарий;
							Обл.Параметры.ТекущийОстаток = Выборка["СуммаКонтроль"] - Выборка["СуммаИсполнение"] - ?(НЕ Проведен,СуммаСценария,0);
							Обл.Параметры.Период = ОбщегоНазначения.ПолучитьПериодСтрокой(ДатаНачала,Строка(ТекущийСценарий.Периодичность));
							ТабДокумент.Вывести(Обл);
						КонецЕсли;
						
					КонецЦикла; 
					
				КонецЕсли;
				
			КонецЦикла;
			
			Обл = Макет.ПолучитьОбласть("ПодвалКонтроль");
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;	
		
		Обл = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Обл);
		
		// Первую колонку не печатаем
		ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
		
		Возврат ТабДокумент;
	КонецФункции // ПечатьЗаявки()
	
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		ИначеЕсли НазваниеМакета = "ПечатьЗаявки" Тогда
			
			// Получить экземпляр документа на печать
			ТабДокумент = ПечатьЗаявки();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);		
			
		КонецЕсли;		
	КонецПроцедуры
		
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		Возврат Новый Структура("ПечатьЗаявки","Заявка на расходование средств");
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает таблицу для проверки контролируемых значений
//
Процедура СформироватьТаблицуДляКонтроля()
	
	ЕстьРасчетыСКонтрагентами = уатОбщегоНазначения_проф.ЕстьРасчетыСКонтрагентами(ВидОперации);
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РасшифровкаПлатежаДок.Ссылка.Сценарий КАК Сценарий,
		|	РасшифровкаПлатежаДок.Ссылка.СтатьяОборотов КАК СтатьяОборотов,
		|	РасшифровкаПлатежаДок.Ссылка.ЦФО КАК ЦФО,
		|	РасшифровкаПлатежаДок.Ссылка.Контрагент КАК Контрагент,
		|	РасшифровкаПлатежаДок.Ссылка.Номенклатура КАК Номенклатура,
		|	РасшифровкаПлатежаДок.Проект КАК Проект,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА РасшифровкаПлатежаДок.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаУпрУчета
		|					ТОГДА РасшифровкаПлатежаДок.СуммаВзаиморасчетов
		|				КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		|						ИЛИ РасшифровкаПлатежаДок.КурсВзаиморасчетов = 0
		|					ТОГДА 0
		|				КОГДА РасшифровкаПлатежаДок.ДоговорКонтрагента.ВалютаВзаиморасчетов <> &ВалютаУпрУчета
		|						И КурсыУпрУчета.Курс <> 0
		|						И РасшифровкаПлатежаДок.КурсВзаиморасчетов <> 0
		|					ТОГДА РасшифровкаПлатежаДок.СуммаВзаиморасчетов * РасшифровкаПлатежаДок.КурсВзаиморасчетов * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * РасшифровкаПлатежаДок.КратностьВзаиморасчетов)
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаУпр,
		|	КурсыУпрУчета.Курс КАК КурсУпрУчета,
		|	КурсыУпрУчета.Кратность КАК КратностьУпрУчета,
		|	СУММА(РасшифровкаПлатежаДок.СуммаПлатежа) КАК СуммаПлатежа
		|ИЗ
		|	Документ.уатЗаявкаНаРасходованиеДС.РасшифровкаПлатежа КАК РасшифровкаПлатежаДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасхода, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	РасшифровкаПлатежаДок.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасшифровкаПлатежаДок.Ссылка.Сценарий,
		|	РасшифровкаПлатежаДок.Ссылка.СтатьяОборотов,
		|	РасшифровкаПлатежаДок.Ссылка.ЦФО,
		|	РасшифровкаПлатежаДок.Ссылка.Контрагент,
		|	РасшифровкаПлатежаДок.Ссылка.Номенклатура,
		|	РасшифровкаПлатежаДок.Проект,
		|	КурсыУпрУчета.Курс,
		|	КурсыУпрУчета.Кратность";
		
		Запрос.УстановитьПараметр("ДатаРасхода",ДатаРасхода);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",мВалютаУправленческогоУчета);
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		ТабПроверкиОборотов = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	РасшифровкаПлатежаДок.Ссылка.Сценарий,
		|	РасшифровкаПлатежаДок.Ссылка.СтатьяОборотов,
		|	РасшифровкаПлатежаДок.Ссылка.ЦФО,
		|	РасшифровкаПлатежаДок.Ссылка.Контрагент,
		|	РасшифровкаПлатежаДок.Ссылка.Номенклатура,
		|	РасшифровкаПлатежаДок.Проект,
		|	РасшифровкаПлатежаДок.СуммаПлатежа
		|ИЗ
		|	Документ.уатЗаявкаНаРасходованиеДС.РасшифровкаПлатежа КАК РасшифровкаПлатежаДок
		|ГДЕ
		|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		ТабПроверкиОборотов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
			
КонецПроцедуры // СформироватьТаблицуДляКонтроля()
	
	
#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт
	
	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//Проверка согласования документа
	Если ТребуетСогласования И (НЕ уатОбщегоНазначения_проф.ДокументСогласован(Ссылка)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ """ + Ссылка + """ необходимо согласовать!", Отказ);
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Инициализация данных документа.
	Документы.уатЗаявкаНаРасходованиеДС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	// Отражение в разделах учета.
	уатПроведение_проф.ОтразитьЗаявкиНаРасходованиеДС(ДополнительныеСвойства, Движения, Отказ);
	Если Ложь тогда
		уатПроведение_проф.ОтразитьКонтролируемыеЗначенияБюджетов(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатЗаявкаНаРасходованиеДС.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	МассивДоговоров = ЭтотОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента");
	ТаблицаДоговоров = Новый таблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Договор");
	ТаблицаДоговоров.ЗагрузитьКолонку(МассивДоговоров,"Договор");
	ТаблицаДоговоров.Свернуть("Договор");
	
	Если ТаблицаДоговоров.Количество() = 1 Тогда
		ДоговорКонтрагента = ТаблицаДоговоров[0].Договор;
	Иначе
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ,Заголовок);
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.уатВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
		ПроверяемыеРеквизиты.Добавить("Контрагент");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
	КонецЕсли;
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если Не Отказ Тогда
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
			Если НЕ ЭтоОбъединениеСБП И НЕ Платеж.ДоговорКонтрагента.Пустая()
				И НЕ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом 
				И НЕ ЗначениеЗаполнено(Платеж.Сделка) Тогда
				ТекстСообщения = "По договору " + Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! Необходимо заполнить поле ""Заказ""!";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);   
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Платеж.ДоговорКонтрагента)
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ВалютаДокумента  = мВалютаРегламентированногоУчета;
	уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
	мВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
Иначе
	мВалютаУпрУчета = мВалютаРегламентированногоУчета;
КонецЕсли;

мСтруктураПараметровДенежныхСредств = Новый Структура;

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

