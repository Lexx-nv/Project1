////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	Если ЭтоНовый() Тогда
		#Если Клиент тогда
			Предупреждение("Документ можно распечатать только после его записи");
		#КонецЕсли
		Возврат;
	ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		#Если Клиент тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;			
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЕсли;		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ЗаписатьРеквизитыШин(Отказ)
	Для каждого СтрШина Из Шины Цикл
		ШинаОбъект = СтрШина.СерияНоменклатуры.ПолучитьОбъект(); 
		ШинаОбъект.ПервоначальнаяСтоимость = СтрШина.Стоимость;
		ШинаОбъект.Валюта = ?(ЗначениеЗаполнено(ВалютаДокумента), ВалютаДокумента, Константы.ВалютаРегламентированногоУчета.Получить());
		Попытка 
			ШинаОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать шину " + ШинаОбъект.СерийныйНомер + "", Отказ);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры 

Процедура ЗаписатьРеквизитыАккумуляторов(Отказ)
	Для каждого СтрАкк Из Аккумуляторы Цикл
		АккумОбъект = СтрАкк.СерияНоменклатуры.ПолучитьОбъект(); 
		АккумОбъект.НачалоЭксплуатации = СтрАкк.НачалоЭксплуатации;
		Попытка 
			АккумОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать аккумулятор " + АккумОбъект.СерийныйНомер + "", Отказ);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры 

Процедура ЗаписатьРеквизитыПрочихАгрегатов(Отказ)
	Для каждого ТекСтрока Из ПрочиеАгрегаты Цикл
		СпрОб = ТекСтрока.СерияНоменклатуры.ПолучитьОбъект(); 
		СпрОб.ГоденДо = ТекСтрока.ГоденДо;
		Попытка 
			СпрОб.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать агрегат " + СпрОб.СерийныйНомер + " (" + СпрОб.Модель + ")", Отказ);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры 


//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатВводНачальныхДанныхПоАгрегатам.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	Если ВидОперации = Перечисления.уатВидыОперацийВводОстатковПоАгрегатам.ВводОстатковПоСкладу Тогда
		уатПроведение.ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ);
	Иначе
		уатПроведение.ОтразитьАгрегатыТС(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	уатПроведение.ОтразитьИзносПробегШин(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗаписатьРеквизитыШин(Отказ);
	ЗаписатьРеквизитыАккумуляторов(Отказ);
	ЗаписатьРеквизитыПрочихАгрегатов(Отказ);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатВводНачальныхДанныхПоАгрегатам.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = "Проведение документа " + Ссылка;
	Если ВидОперации = Перечисления.уатВидыОперацийВводОстатковПоАгрегатам.УстановкаНаТС Тогда
		СтруктураШапкиДокумента = Новый Структура("ВидОперации, Организация");
	Иначе
		СтруктураШапкиДокумента = Новый Структура("ВидОперации, Организация, Склад");
	КонецЕСли;
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураШапкиДокумента, Отказ, Заголовок);
	Если ВидОперации = Перечисления.уатВидыОперацийВводОстатковПоАгрегатам.УстановкаНаТС Тогда
		СтруктураПолей = Новый Структура("ТС, СерияНоменклатуры");
	Иначе
		СтруктураПолей = Новый Структура("СерияНоменклатуры");
	КонецЕСли;
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Шины", СтруктураПолей, Отказ, Заголовок);
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Аккумуляторы", СтруктураПолей, Отказ, Заголовок);
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПрочиеАгрегаты", СтруктураПолей, Отказ, Заголовок);
	
	//проверка на дубли строк
	Если НЕ Отказ Тогда
		тблШины = Шины.Выгрузить().Скопировать();
		тблШины.Свернуть("СерияНоменклатуры");
		Если тблШины.Количество() < Шины.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Шины"" присутствуют повторяющиеся строки (дублирование серий номенклатуры)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		тблАккумуляторы = Аккумуляторы.Выгрузить().Скопировать();
		тблАккумуляторы.Свернуть("СерияНоменклатуры");
		Если тблАккумуляторы.Количество() < Аккумуляторы.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Аккумуляторы"" присутствуют повторяющиеся строки (дублирование серий номенклатуры)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		тблПрочиеАгрегаты = ПрочиеАгрегаты.Выгрузить().Скопировать();
		тблПрочиеАгрегаты.Свернуть("СерияНоменклатуры");
		Если тблПрочиеАгрегаты.Количество() < ПрочиеАгрегаты.Количество() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Прочие агрегаты"" присутствуют повторяющиеся строки (дублирование серий номенклатуры)!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли