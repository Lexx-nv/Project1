////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	// Функция формирует табличный документ с печатной формой
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма
	//
	Функция ПечатьПланаРаботыТС()
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		Запрос.Текст ="ВЫБРАТЬ
		|	NULL КАК Организация,
		|	уатПланированиеРаботыТС.Номер,
		|	уатПланированиеРаботыТС.Дата,
		|	уатПланированиеРаботыТС.ДатаПланирования,
		|	уатПланированиеРаботыТС.Ответственный.Представление,
		|	уатПланированиеРаботыТС.Подразделение.Представление,
		|	уатПланированиеРаботыТС.Сценарий.Представление,
		|	уатПланированиеРаботыТС.ПериодичностьДетализации,
		|	уатПланированиеРаботыТС.СоставПлана.(
		|		ДетализацияПланирования.Представление КАК ДетализацияПланированияПредставление,
		|		Количество,
		|		Номенклатура.Представление,
		|		Сумма,
		|		СуммаНДС,
		|		Заказ.Представление,
		|		ДетализацияПланирования,
		|		Номенклатура,
		|		Заказ.Номер,
		|		Заказ.Дата,
		|		Заказ,
		|		ПараметрВыработки.Представление
		|	),
		|	уатПланированиеРаботыТС.Ответственный,
		|	уатПланированиеРаботыТС.Подразделение,
		|	уатПланированиеРаботыТС.Сценарий,
		|	уатПланированиеРаботыТС.Сценарий.Периодичность КАК Периодичность,
		|	ПРЕДСТАВЛЕНИЕ(уатПланированиеРаботыТС.Сценарий.Периодичность) КАК ПериодичностьПредставление,
		|	уатПланированиеРаботыТС.СуммаВключаетНДС
		|ИЗ
		|	Документ.уатПланированиеРаботыТС КАК уатПланированиеРаботыТС
		|ГДЕ
		|	уатПланированиеРаботыТС.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСоставПлана = Шапка.СоставПлана.Выбрать();
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатПланированиеРаботыТС_ПланРаботыТС";
		Макет = ПолучитьМакет("ПланРаботыТС");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "План работы ТС");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ДатаНачала = Шапка.ДатаПланирования;
		ДатаОкончания = Шапка.ДатаПланирования;
		уатОбщегоНазначенияТиповые.уатВыровнятьПериод(ДатаНачала, ДатаОкончания, Шапка.Периодичность);
		
		ОбластьМакета.Параметры.ПериодПланирования = ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		ВыборкаСоставПлана = Шапка.СоставПлана.Выбрать();
		Пока ВыборкаСоставПлана.Следующий() Цикл
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
			Если ТипЗнч(ВыборкаСоставПлана.ДетализацияПланирования) = Тип("СправочникСсылка.уатТС") Тогда
				ОбластьСтроки.Параметры.ДетализацияПланированияПредставление = уатОбщегоНазначения.уатПредставлениеТС(ВыборкаСоставПлана.ДетализацияПланирования, Организация);
			Иначе
				ОбластьСтроки.Параметры.ДетализацияПланированияПредставление = ВыборкаСоставПлана.ДетализацияПланированияПредставление;
			КонецЕсли;
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСоставПлана.Заказ) Тогда
				ОбластьСтроки.Параметры.ЗаказПредставление = "";
			Иначе
				ОбластьСтроки.Параметры.ЗаказПредставление = ВыборкаСоставПлана.ЗаказНомер + " от " + Формат(ВыборкаСоставПлана.ЗаказДата, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			ОбластьСтроки.Параметры.Всего = ВыборкаСоставПлана.Сумма + ?(Шапка.СуммаВключаетНДС = Истина, 0, ВыборкаСоставПлана.СуммаНДС);
			
			ТабДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ОтветственныйПредставление = "/" + Шапка.ОтветственныйПредставление + "/";
		ОбластьМакета.Параметры.ИтогоВсего = СоставПлана.Итог("Сумма") + ?(Шапка.СуммаВключаетНДС = Истина, 0, СоставПлана.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.ИтогоСтоимость = СоставПлана.Итог("Сумма");
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПланаПроизводства()
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("ПланРаботыТС","План работы ТС");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;

		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;

		Иначе
			
			Если НазваниеМакета = "ПланРаботыТС" Тогда
				
				ТабДокумент = ПечатьПланаРаботыТС();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатПланированиеРаботыТС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение_проф.ОтразитьПланРаботыТС(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатПланированиеРаботыТС.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ,Истина);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатПланированиеРаботыТС.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "СоставПлана");
КонецПроцедуры // ПередЗаписью


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
