////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.

#Если Клиент Тогда
	
	// Функция формирует табличный документ с печатной формой отношения
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьАктыСписанияАккумуляторов()
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатСписаниеАгрегатов_АктСписанияАккумулятора";
		Макет = ПолучитьМакет("АктСписанияАккумулятора");
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.Модель КАК МаркаАккумулятора,
		|	1 КАК Количество,
		|	уатСписаниеАгрегатовАккумуляторы.ПричинаСписания,
		|	уатАгрегатыТССрезПервых.Период КАК ДатаУстановки,
		|	уатАгрегатыТССрезПоследних.ТС,
		|	уатАгрегатыТССрезПоследних.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	уатАгрегатыТССрезПоследних.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.Модель.СрокСлужбы КАК НормативныйСрокЭксплуатации,
		|	уатАгрегатыТССрезПоследних.Период КАК ДатаСнятия,
		|	РАЗНОСТЬДАТ(уатАгрегатыТССрезПоследних.Период, уатАгрегатыТССрезПервых.Период, МЕСЯЦ) КАК ФактическийСрокЭксплуатации
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Аккумуляторы КАК уатСписаниеАгрегатовАккумуляторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПервых(, СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)) КАК уатАгрегатыТССрезПервых
		|		ПО уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры = уатАгрегатыТССрезПервых.СерияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(, СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)) КАК уатАгрегатыТССрезПоследних
		|		ПО уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
		|ГДЕ
		|	уатСписаниеАгрегатовАккумуляторы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОбластьАкта = Макет.ПолучитьОбласть("Акт");
		
		ОбластьАкта.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), 
		"ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");;
		
		Пока Выборка.Следующий() Цикл // Уровень итогов по укрупнённому типу ТС
			// Очищаем старые значения
			Для Каждого ТекПараметр Из ОбластьАкта.Параметры Цикл
				ТекПараметр = "";
			КонецЦикла;
			
			// Заполняем новыми
			ОбластьАкта.Параметры.Заполнить(Выборка);
			ОбластьАкта.Параметры.НомерАкта = СокрЛП(Номер);
			ОбластьАкта.Параметры.ДатаАкта = Формат(Дата, "ДФ=dd.MM.yyyy");
			
			ТабДокумент.Вывести(ОбластьАкта);
			
			// Разбиваем на страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		ТабДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", Права);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьОприходованияТоваров()
	
	// Функция формирует табличный документ с печатной формой отношения
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
	Функция ПечатьАктыСписанияШин()
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатСписаниеАгрегатов_АктСписанияШины";
		Макет = ПолучитьМакет("АктСписанияШины");
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель КАК МаркаШины,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель.Производитель КАК Изготовитель,
		|	1 КАК Количество,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель.НормаПробега КАК НормаПробега,
		|	уатСписаниеАгрегатовШины.ПричинаСписания,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.СерийныйНомер,
		|	уатАгрегатыТССрезПоследних.ТС.Модель КАК МаркаТС,
		|	уатАгрегатыТССрезПоследних.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	уатАгрегатыТССрезПоследних.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	уатИзносПробегШинОбороты.ПробегОборот КАК ФактическийПробег
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Шины КАК уатСписаниеАгрегатовШины
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(, СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)) КАК уатАгрегатыТССрезПоследних
		|		ПО уатСписаниеАгрегатовШины.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатИзносПробегШин.Обороты(,,,СерияНоменклатуры.ТипАгрегата = ЗНАЧЕНИЕ(Справочник.уатТипыАгрегатов.Шина)) КАК уатИзносПробегШинОбороты
		|		ПО уатСписаниеАгрегатовШины.СерияНоменклатуры = уатИзносПробегШинОбороты.СерияНоменклатуры
		|ГДЕ
		|	уатСписаниеАгрегатовШины.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);        
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОбластьАкта = Макет.ПолучитьОбласть("Акт");
		
		ОбластьАкта.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), 
		"ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");;
		
		Пока Выборка.Следующий() Цикл // Уровень итогов по укрупнённому типу ТС
			// Очищаем старые значения
			Для Каждого ТекПараметр Из ОбластьАкта.Параметры Цикл
				ТекПараметр = "";
			КонецЦикла;
			
			// Заполняем новыми
			ОбластьАкта.Параметры.Заполнить(Выборка);
			ОбластьАкта.Параметры.НомерАкта = СокрЛП(Номер);
			ОбластьАкта.Параметры.ДатаАкта = Формат(Дата, "ДФ=dd.MM.yyyy");
			
			ТабДокумент.Вывести(ОбластьАкта);
			
			// Разбиваем на страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		ТабДокумент.ТолькоПросмотр = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", Права);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьОприходованияТоваров()
	
		Функция ПечатьСписание() 
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеАгрегатов_Списание";
		Макет       = ПолучитьМакет("Списание");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель КАК Модель,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Шины КАК уатСписаниеАгрегатовШины
		|ГДЕ
		|	уатСписаниеАгрегатовШины.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.Модель КАК Модель,
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Аккумуляторы КАК уатСписаниеАгрегатовАккумуляторы
		|ГДЕ
		|	уатСписаниеАгрегатовАккумуляторы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатСписаниеАгрегатовПрочиеАгрегаты.СерияНоменклатуры.Модель КАК Модель,
		|	уатСписаниеАгрегатовПрочиеАгрегаты.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.ПрочиеАгрегаты КАК уатСписаниеАгрегатовПрочиеАгрегаты
		|ГДЕ
		|	уатСписаниеАгрегатовПрочиеАгрегаты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТЗШины		   = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ТЗАккумуляторы = Запрос.ВыполнитьПакет()[1].Выгрузить();
		ТЗПрочие 	   = Запрос.ВыполнитьПакет()[2].Выгрузить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, "Списание агрегатов");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		ОбластьМакета.Параметры.Организация = Ссылка.Организация;
		ОбластьМакета.Параметры.Склад 		= Ссылка.Склад;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ТЗШины.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыШины");
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаШины");
			Для Каждого ВыборкаСтрок Из ТЗШины Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗШины.Индекс(ВыборкаСтрок) + 1;
				
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалШины");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ТЗАккумуляторы.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыАккумуляторы");
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаАккумуляторы");
			Для Каждого ВыборкаСтрок Из ТЗАккумуляторы Цикл			
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗАккумуляторы.Индекс(ВыборкаСтрок) + 1;
				
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалАккумуляторы");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ТЗПрочие.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыПрочие");
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПрочие");
			Для Каждого ВыборкаСтрок Из ТЗПрочие Цикл			
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗПрочие.Индекс(ВыборкаСтрок) + 1;
				
				ТабДокумент.Вывести(ОбластьМакета);			
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалПрочие");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = Ссылка.Ответственный;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Возврат ТабДокумент;
		
	КонецФункции
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если НазваниеМакета = "АктыСписанияАккумуляторов" Тогда
			Если Аккумуляторы.Количество() Тогда
				ТабДокумент = ПечатьАктыСписанияАккумуляторов();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Иначе
				Сообщить("Документ не будет распечатан, т.к. табличная часть ""Аккумуляторы"" не содержит записей.", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		ИначеЕсли НазваниеМакета = "АктыСписанияШин" Тогда
			Если Шины.Количество() Тогда
				ТабДокумент = ПечатьАктыСписанияШин();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Иначе
				Сообщить("Документ не будет распечатан, т.к. табличная часть ""Шины"" не содержит записей.", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;				
		ИначеЕсли НазваниеМакета = "Списание" тогда			
			ТабДокумент = ПечатьСписание();
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
		ИначеЕсли ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЕсли;	
		
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
//Функция ПолучитьСписокПечатныхФорм() Экспорт
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("АктыСписанияАккумуляторов", "Акты списания аккумуляторов");
	СтруктураМакетов.Вставить("АктыСписанияШин"			 , "Акты списания шин");
	СтруктураМакетов.Вставить("Списание"				 , "Списание агрегатов");
	
	Возврат СтруктураМакетов ;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ОбработкаПроведения(Отказ, Режим)
// Инициализация дополнительных свойств для проведения документа.
уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
Документы.уатСписаниеАгрегатов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

// Подготовка наборов записей.
уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

уатПроведение.ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ);
уатПроведение_проф.ОтразитьПричиныСписанияАгрегатов(ДополнительныеСвойства, Движения, Отказ);

уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

Документы.уатСписаниеАгрегатов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
Если ОбменДанными.Загрузка Тогда
	Возврат;
КонецЕсли;

уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
// Заголовок для сообщений об ошибках проведения.
Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);

СтруктураШапкиДокумента = Новый Структура("Склад, Организация");
уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);

СтруктураПолей = Новый Структура("СерияНоменклатуры");
уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Шины", СтруктураПолей, Отказ, Заголовок);
уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Аккумуляторы", СтруктураПолей, Отказ, Заголовок);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатИнвентаризацияАгрегатов") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатИнвентаризацияАгрегатов") Тогда
		
		Организация 	  = ДанныеЗаполнения.Организация;		
		Комментарий 	  = ДанныеЗаполнения.Комментарий;
		Ответственный	  = ДанныеЗаполнения.Ответственный;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		
		Если ДанныеЗаполнения.ВидОперации = Перечисления.уатВидыДокументаИнвентаризацияАгрегатов.ИнвентаризацияНаСкладах Тогда
			Склад = ДанныеЗаполнения.Склад;			
			Для Каждого ТекСтрока Из ДанныеЗаполнения.АгрегатыСклад Цикл
				// проверяем на наличие лишних агрегатов
				Если НЕ ТекСтрока.Наличие И ТекСтрока.НаличиеУчет Тогда											
					Если ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда	
						НоваяСтрока					  = Шины.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					ИначеЕсли ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда 										
						НоваяСтрока 				  = Аккумуляторы.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					Иначе
						НоваяСтрока 				  = ПрочиеАгрегаты.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;				
					КонецЕсли;				
				КонецЕсли;
			КонецЦикла;			
		Иначе			
			Для Каждого ТекСтрока Из ДанныеЗаполнения.АгрегатыТС Цикл				
				// проверяем на наличие лишних агрегатов
				Если НЕ ТекСтрока.Наличие И ТекСтрока.НаличиеУчет Тогда												
					Если ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда					
						НоваяСтрока					  = Шины.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					ИначеЕсли ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда 										
						НоваяСтрока 				  = Аккумуляторы.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					Иначе					
						НоваяСтрока 				  = ПрочиеАгрегаты.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;					
					КонецЕсли;				
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
Права = глПраваУАТ;
#КонецЕсли