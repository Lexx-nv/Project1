// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	уатЗаказыНаТСОстатки.Заказчик,
	|	уатЗаказыНаТСОстатки.ЗаказНаТС,
	|	уатЗаказыНаТСОстатки.Номенклатура,
	|	уатЗаказыНаТСОстатки.ЕдиницаИзмерения,
	|	уатЗаказыНаТСОстатки.ДатаВыполнения,
	|	уатЗаказыНаТСОстатки.ПараметрВыработки,
	|	уатЗаказыНаТСОстатки.КоличествоОстаток КАК Количество,
	|	уатЗаказыНаТСОстатки.КоличествоПараметрВыработкиОстаток КАК КОличествоПараметрВыработки,
	|	уатОтклонениеГрузаЗаказы.Ссылка КАК Регистратор,
	|	уатОтклонениеГрузаЗаказы.Ссылка.Дата КАК Период,
	|	уатОтклонениеГрузаЗаказы.ПричинаЗакрытия КАК ПричинаЗакрытияЗаказа
	|ИЗ
	|	РегистрНакопления.уатЗаказыНаТС.Остатки(&МоментВремени, Заказчик = &Заказчик
	|		    И ЗаказНаТС В
	|		        (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		            уатОтклонениеГрузаЗаказы.ЗаказНаТС
	|		        ИЗ
	|		            Документ.уатОтклонениеГруза.Заказы КАК уатОтклонениеГрузаЗаказы
	|		        ГДЕ
	|		            уатОтклонениеГрузаЗаказы.Ссылка = &Ссылка)) КАК уатЗаказыНаТСОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатОтклонениеГруза.Заказы КАК уатОтклонениеГрузаЗаказы
	|		ПО уатЗаказыНаТСОстатки.ЗаказНаТС = уатОтклонениеГрузаЗаказы.ЗаказНаТС
	|ГДЕ
	|	уатОтклонениеГрузаЗаказы.Ссылка = &Ссылка";	
		
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", ДокументСсылка.МоментВремени());
	мЗапрос.УстановитьПараметр("Заказчик"     , ДокументСсылка.Заказчик);
	
	ТабЗаказыНаТС = мЗапрос.Выполнить().Выгрузить();   
	ТабПричины = ТабЗаказыНаТС.Скопировать();
	
	ТабЗаказыНаТС.Колонки.Удалить("ПричинаЗакрытияЗаказа");
	
	//переводим количество в базовую единицу измерения
	Для Каждого ТекСтрокаПричины Из ТабПричины Цикл
		Если уатРаботаСМетаданными.естьСпрЕдиницыИзмерения() Тогда
			ТекКоэффициент = ТекСтрокаПричины.ЕдиницаИзмерения.Коэффициент;
			ТекКоэффициент = ?(ТекКоэффициент = 0, 1, ТекКоэффициент);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрокаПричины.Количество = ТекСтрокаПричины.Количество * ТекКоэффициент;
	КонецЦикла;
	
	ТабПричины.Колонки.Удалить("Заказчик");
	ТабПричины.Колонки.Удалить("ЕдиницаИзмерения");
	ТабПричины.Колонки.Удалить("ДатаВыполнения");
	ТабПричины.Колонки.Удалить("ПараметрВыработки");
	ТабПричины.Колонки.Удалить("ВидДвижения");
	ТабПричины.Колонки.ЗаказНаТС.Имя = "Заказ";
	ТабПричины.Свернуть("Период, Регистратор, Заказ, Номенклатура, ПричинаЗакрытияЗаказа", "Количество");
	
	//управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатЗаказыНаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТабЗаказыНаТС;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказчик", "Заказчик");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказНаТС", "ЗаказНаТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.уатПричиныОтклоненияЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТабПричины;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказовНаТС"   , ТабЗаказыНаТС);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПричинЗакрытия", ТабПричины);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
КонецПроцедуры
						 