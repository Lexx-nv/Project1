// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.УстановитьПараметр("ссылка",ДокументСсылка);
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасшифровкаПлатежаДок.НомерСтроки,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента,
	|	РасшифровкаПлатежаДок.Сделка,
	|	РасшифровкаПлатежаДок.КурсВзаиморасчетов,
	|	РасшифровкаПлатежаДок.СуммаПлатежа,
	|	РасшифровкаПлатежаДок.КратностьВзаиморасчетов,
	|	РасшифровкаПлатежаДок.СуммаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.СтавкаНДС,
	|	РасшифровкаПлатежаДок.СуммаНДС,
	|	РасшифровкаПлатежаДок.СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.уатРасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежаДок
	|ГДЕ
	|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
	
	ТабДокумента = мЗапрос.Выполнить().Выгрузить();
	
	ТабДвиженияДС = Новый ТаблицаЗначений;
	ТабДвиженияДС.колонки.Добавить("ВидДвижения");
	ТабДвиженияДС.колонки.Добавить("Период");
	ТабДвиженияДС.колонки.Добавить("Регистратор");
	ТабДвиженияДС.колонки.Добавить("Валюта");
	ТабДвиженияДС.колонки.Добавить("БанковскийСчетКасса");
	ТабДвиженияДС.колонки.Добавить("ВидДенежныхСредств");
	ТабДвиженияДС.колонки.Добавить("ПриходРасход");
	ТабДвиженияДС.колонки.Добавить("СтатьяДвиженияДенежныхСредств");
	ТабДвиженияДС.колонки.Добавить("ДокументДвижения");
	ТабДвиженияДС.колонки.Добавить("Контрагент");
	ТабДвиженияДС.колонки.Добавить("ДоговорКонтрагента");
	ТабДвиженияДС.колонки.Добавить("Сделка");
	ТабДвиженияДС.колонки.Добавить("Организация");
	ТабДвиженияДС.колонки.Добавить("Сумма");
	ТабДвиженияДС.колонки.Добавить("СуммаУпр");
	
	ТабВзаиморасчетов = Новый ТаблицаЗначений;
	ТабВзаиморасчетов.колонки.Добавить("ВидДвижения");
	ТабВзаиморасчетов.колонки.Добавить("Период");
	ТабВзаиморасчетов.колонки.Добавить("Регистратор");
	ТабВзаиморасчетов.колонки.Добавить("ДоговорКонтрагента");
	ТабВзаиморасчетов.колонки.Добавить("Сделка");
	ТабВзаиморасчетов.колонки.Добавить("Организация");
	ТабВзаиморасчетов.колонки.Добавить("Контрагент");
	ТабВзаиморасчетов.колонки.Добавить("СуммаВзаиморасчетов");
	ТабВзаиморасчетов.колонки.Добавить("СуммаУпр");

	Если ДокументСсылка.Оплачено тогда
		Для каждого ТекСтрока ИЗ ТабДокумента Цикл
			НовСтрока = ТабВзаиморасчетов.Добавить();
			НовСтрока.Период              = ДокументСсылка.Дата;
			НовСтрока.Регистратор         = ДокументСсылка;
			НовСтрока.видДвижения         = ВидДвиженияНакопления.Приход;
			НовСтрока.Контрагент          = ДокументСсылка.Контрагент;
			НовСтрока.ДоговорКонтрагента  = ТекСтрока.ДоговорКонтрагента;
			ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
			Если НЕ ЭтоОбъединениеСБП И ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом тогда
				НовСтрока.Сделка          = Неопределено;
			Иначе
				НовСтрока.Сделка          = ТекСтрока.Сделка;
			КонецЕсли;
			НовСтрока.Организация         = ДокументСсылка.Организация;
			НовСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаВзаиморасчетов;
			НовСтрока.СуммаУпр            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
																								  ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов,
																								  СтруктураДополнительныеСвойства.ВалютаУпрУчета,
																								  ТекСтрока.КурсВзаиморасчетов,
																								  СтруктураДополнительныеСвойства.КурсУпр,
																								  ТекСтрока.КратностьВзаиморасчетов,
																								  СтруктураДополнительныеСвойства.КратностьУпр);
			///
			///
			НовСтрока = ТабДвиженияДС.Добавить();
			НовСтрока.Период              = ДокументСсылка.Дата;
			НовСтрока.Регистратор         = ДокументСсылка;
			НовСтрока.Валюта              = ДокументСсылка.ВалютаДокумента;
			НовСтрока.БанковскийСчетКасса = ДокументСсылка.Касса;
			НовСтрока.ВидДенежныхСредств  = Перечисления.ВидыДенежныхСредств.Наличные;
			НовСтрока.ПриходРасход        = Перечисления.ВидыДвиженийПриходРасход.Расход;
			НовСтрока.СтатьяДвиженияДенежныхСредств = ТекСтрока.СтатьяДвиженияДенежныхСредств;
			НовСтрока.ДокументДвижения    = ДокументСсылка;
			НовСтрока.Контрагент          = ДокументСсылка.Контрагент;
			НовСтрока.ДоговорКонтрагента  = ТекСтрока.ДоговорКонтрагента;
			Если НЕ ЭтоОбъединениеСБП И ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом тогда
				НовСтрока.Сделка          = Неопределено;
			Иначе
				НовСтрока.Сделка          = ТекСтрока.Сделка;
			КонецЕсли;
			НовСтрока.Организация         = ДокументСсылка.Организация;
			НовСтрока.Сумма               = ТекСтрока.СуммаПлатежа;
			НовСтрока.СуммаУпр            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
																								  ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов,
																								  СтруктураДополнительныеСвойства.ВалютаУпрУчета,
																								  ТекСтрока.КурсВзаиморасчетов,
																								  СтруктураДополнительныеСвойства.КурсУпр,
																								  ТекСтрока.КратностьВзаиморасчетов,
																								  СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЦикла;
	КонецЕсли;
	
	ТабВзаиморасчетов.Свернуть("ВидДвижения, Период, Регистратор, ДоговорКонтрагента, Сделка, Организация, Контрагент","СуммаВзаиморасчетов, СуммаУпр");
	ТабДвиженияДС.Свернуть("ВидДвижения, Период, Регистратор, Валюта, БанковскийСчетКасса, ВидДенежныхСредств, ПриходРасход, СтатьяДвиженияДенежныхСредств, ДокументДвижения, Контрагент, ДоговорКонтрагента, Сделка, Организация","Сумма, СуммаУпр");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДвижениеДС"    , ТабДвиженияДС);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТабВзаиморасчетов);
	
	//СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", ТаблицаПартии);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	
КонецПроцедуры
