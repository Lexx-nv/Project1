////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
//полученное из константы.


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.уатСчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплату.Номенклатура,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.Содержание ЕСТЬ NULL 
	|				ИЛИ СчетНаОплату.Содержание = """"
	|			ТОГДА ВЫРАЗИТЬ(СчетНаОплату.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ СчетНаОплату.Содержание
	|	КОНЕЦ КАК Товар,
	|	СчетНаОплату.Номенклатура.Код КАК Код,
	|	СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплату.Количество,
	|	СчетНаОплату.Цена,
	|	СчетНаОплату.Сумма,
	|	СчетНаОплату.СуммаНДС,
	|	СчетНаОплату.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.уатСчетНаОплатуПокупателю.Услуги КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Макет = ПолучитьМакет("СчетЗаказ");
	
	// Выводим шапку накладной
	
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;
			
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	Сумма    = 0;
	СуммаНДС = 0;
	
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		
	КонецЦикла;
	
	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если СуммаНДС <> 0 Тогда
			ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьСуммы.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
		Иначе
			ОбластьДанных.Параметры.НДС = "Без налога (НДС)";
			ОбластьСуммы.Параметры.ВсегоНДС = "-";
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		
		//Руководители = уэРуководителиОрганизации(Шапка.Руководители, Шапка.Дата,);
		//Руководители = уатРегламентированнаяОтчетность.уатОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.Дата,);
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.Дата,);
		Если  НЕ Руководители = Неопределено Тогда
			Руководитель = Руководители.Руководитель;
			Бухгалтер    = Руководители.ГлавныйБухгалтер;
			
			ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
			ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
			ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";
		КонецЕсли;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьСчетаЗаказа()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли НЕ Проведен И Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	
	Если НазваниеМакета = "Счет" Тогда
		// Печать счета на оплату
		ТабДокумент     = ПечатьСчетаЗаказа(НазваниеМакета);
		
	ИначеЕсли ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Попытка
			Обработка.СсылкаНаОбъект = Ссылка;
			ТабДокумент = Обработка.Печать();
		Исключение
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ""), Права);
	
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
//Функция ПолучитьСписокПечатныхФорм() Экспорт
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Счет", "Счет на оплату");
	
	Возврат СтруктураМакетов ;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//
//используется в УЭ
Процедура ЗаполнитьУслугиПоТЧ(ТЧ, СтруктураПараметров) Экспорт
	Если НЕ Услуги.Количество() = 0  Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Таб. часть Услуги не пустая. Очистить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Услуги.Очистить();
		КонецЕсли;  
	КонецЕсли;
	флПоЗаказам = Ложь;
	СтруктураПараметров.Свойство("ПоЗаказам",флПоЗаказам);
	курсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	Для Каждого СтрокаТЧ Из ТЧ Цикл
		НоваяСтрока = Услуги.Добавить();
		СтрокаСодержание = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТЧ.Услуга), "", Строка(СтрокаТЧ.Услуга))
		+ ?(СтруктураПараметров.ПоЗаказам, " Заказ :" + Строка(СтрокаТЧ.Заказ), "" ) 
		+ ?(СтруктураПараметров.ПоОперациям, " Операция :" + Строка(СтрокаТЧ. Операция), "" );
		НоваяСтрока.Номенклатура     = СтрокаТЧ.Услуга;
		НоваяСтрока.Содержание       = СтрокаСодержание;
		НоваяСтрока.Количество       = СтрокаТЧ.Количество;
		НоваяСтрока.СтавкаНДС        = СтрокаТЧ.СтавкаНДС;
		
		мСуммаРегл 					 = СтрокаТЧ.СуммаРегл - ?(СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСуммаРегл,
						                                                                     мВалютаРегламентированногоУчета,
			                                                                                 ВалютаДокумента,
																							 1,
																							 курсВалютыДокумента.Курс,
																							 1,
																							 курсВалютыДокумента.Кратность
																							 );
		
		НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаНДС,
						                                                                     мВалютаРегламентированногоУчета,
			                                                                                 ВалютаДокумента,
																							 1,
																							 курсВалютыДокумента.Курс,
																							 1,
																							 курсВалютыДокумента.Кратность
																							 );
		НоваяСтрока.Цена 			 = НоваяСтрока.Сумма/НоваяСтрока.Количество;
		
		Если флПоЗаказам тогда
			НоваяСтрока.Заказ		 = СтрокаТЧ.Заказ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
#КонецЕсли

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Содержание, Количество, Сумма");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", , Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()


/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполнения реквизита "ДатаОплаты" по договору.
//
// Параметры: 
//  РежимВызова - режим вызова процедуры.
//
Процедура УстановитьДатуОплатыПоДоговору(РежимВызова = "")Экспорт
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Дата) Тогда
		Возврат;
	ИначеЕсли уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	ЧислоДнейДоОплаты = 0;
	
	ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
	Если НЕ ЭтоОбъединениеСБП Тогда
		ВидВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	//Если ВидВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КонтролироватьЧислоДнейЗадолженности", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Если ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности Тогда
			ЧислоДнейДоОплаты = ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности;
		Иначе
			ЧислоДнейДоОплаты = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Исключим выходные дни, и получим новую дату оплаты
	ДатаОплатыНовая   = НачалоДня(Дата);
	ЧислоДнейДоОплаты = ЧислоДнейДоОплаты + ?(ДеньНедели(ДатаОплатыНовая) > 5, 1, 0);
	
	Пока ЧислоДнейДоОплаты > 0 Цикл
		ДатаОплатыНовая   = ДатаОплатыНовая + 86400;
		ЧислоДнейДоОплаты = ЧислоДнейДоОплаты - 1;
		
		Пока ДеньНедели(ДатаОплатыНовая) > 5 Цикл
			ДатаОплатыНовая = ДатаОплатыНовая + 86400;
		КонецЦикла;
	КонецЦикла;
	
	Если ДатаОплаты <> ДатаОплатыНовая Тогда
		// Проверка режима вызова процедуры
		Если НЕ ПустаяСтрока(РежимВызова) Тогда
			Если РежимВызова = "ДатаДокумента" Тогда
				ТекстВопроса = "Изменилась дата документа.";
			Иначе
				ТекстВопроса = "Изменился договор с контрагентом.";
			КонецЕсли;
			#Если Клиент Тогда
				Если Вопрос(ТекстВопроса + " Пересчитать дату оплаты?", 
					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		ДатаОплаты = ДатаОплатыНовая;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДатуОплатыПоДоговору()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		// Заполнение шапки
		ВалютаДокумента 		= Основание.ВалютаДокумента;
		ДоговорКонтрагента 		= Основание.ДоговорКонтрагента;
		Комментарий 			= Основание.Комментарий;
		Контрагент 				= Основание.Контрагент;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		Организация 			= Основание.Организация;
		Ответственный 			= Основание.Ответственный;
		СуммаВключаетНДС 		= Основание.СуммаВключаетНДС;
		СуммаДокумента 			= Основание.СуммаДокумента;
		ТипЦен 					= Основание.ТипЦен;
		УчитыватьНДС 			= Основание.УчитыватьНДС;
		ДокументОснование 		= Основание.Ссылка;
		
		Для Каждого ТекСтрокаОперации Из Основание.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрокаОперации.Номенклатура;
			НоваяСтрока.Содержание   = ТекСтрокаОперации.Содержание;
			НоваяСтрока.Количество 	 = ТекСтрокаОперации.Количество;
			НоваяСтрока.СтавкаНДС 	 = ТекСтрокаОперации.СтавкаНДС;
			НоваяСтрока.Цена 		 = ТекСтрокаОперации.Цена;
			НоваяСтрока.Сумма 		 = ТекСтрокаОперации.Сумма;
			НоваяСтрока.СуммаНДС 	 = ТекСтрокаОперации.СуммаНДС;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатРеализацияУслуг") Тогда
		
		Дата = ТекущаяДата();
		ДокументОснование       = Основание;
		Организация             = Основание.Организация;
		Контрагент              = Основание.Контрагент;
		ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СуммаДокумента          = Основание.СуммаДокумента;
		УчитыватьНДС            = Основание.УчитыватьНДС; 
		СуммаВключаетНДС        = Основание.СуммаВключаетНДС;
		ОбъектСтроительства     = Основание.ОбъектСтроительства;
		Комментарий             = "Заполнен на основании "+Основание;
		ВалютаДокумента 		= Основание.ВалютаДокумента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		Для Каждого ТекСтрока из Основание.Услуги Цикл
			НоваяСтрока						= Услуги.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
			НоваяСтрока.Содержание 			= ТекСтрока.Содержание;
			НоваяСтрока.Количество 			= ТекСтрока.Количество;
			НоваяСтрока.Цена 			    = ТекСтрока.Цена;
			НоваяСтрока.Сумма 			    = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 			= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 			= ТекСтрока.СуммаНДС;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатТТД") Тогда
		
		Дата = ТекущаяДата();
		ДокументОснование       = Основание;
		Организация             = Основание.Организация;
		Контрагент              = Основание.Контрагент;
		ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		УчитыватьНДС            = Основание.УчитыватьНДС; 
		СуммаВключаетНДС        = Основание.СуммаВключаетНДС;
		Комментарий             = "Заполнен на основании " + Основание;
		ВалютаДокумента 		= Основание.ВалютаДокумента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		
		Для Каждого ТекСтрока из Основание.Стоимость Цикл
			НоваяСтрока						= Услуги.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.НоменклатураУслуги;
			НоваяСтрока.Содержание 			= ТекСтрока.НоменклатураУслуги.НаименованиеПолное;
			НоваяСтрока.Количество 			= ТекСтрока.Количество;
			НоваяСтрока.Цена 			    = ТекСтрока.Цена;
			НоваяСтрока.Сумма 			    = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 			= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 			= ТекСтрока.СуммаНДС;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, , Права);
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Услуги.Очистить();
	КонецЕсли;
	
	СтруктураШапкиДокумента = Новый Структура();
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(СтруктураШапкиДокумента,Отказ,заголовок);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);

КонецПроцедуры // ПередЗаписью


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();