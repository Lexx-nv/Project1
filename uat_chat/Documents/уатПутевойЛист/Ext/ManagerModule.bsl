////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА РАБОЧЕГО ВРЕМЕНИ ДЛЯ ТАБЕЛЯ

// Функция рассчитывает ночное время однодневного ПЛ
// Возвращает значение в секундах
Функция ВремяНочьОдинДень(ДокументСсылка) Экспорт
	сВремяНочь = 0;
	Если ДокументСсылка.ДатаВыезда - НачалоДня(ДокументСсылка.ДатаВыезда) <= 21600 Тогда
		сВремяНочь = ?(ДокументСсылка.ДатаВозвращения - НачалоДня(ДокументСсылка.ДатаВозвращения) > 21600,
			уатОбщегоНазначения.уатВремяВСекунды(6) - (ДокументСсылка.ДатаВыезда - НачалоДня(ДокументСсылка.ДатаВыезда)),
			ДокументСсылка.ДатаВозвращения - ДокументСсылка.ДатаВыезда);
	КонецЕсли;	
	Если Час(ДокументСсылка.ДатаВозвращения) >= 22 Тогда
		сВремяНочь = сВремяНочь + ?(Час(ДокументСсылка.ДатаВыезда) < 22,
			(ДокументСсылка.ДатаВозвращения - НачалоДня(ДокументСсылка.ДатаВозвращения))- уатОбщегоНазначения.уатВремяВСекунды(22),
			ДокументСсылка.ДатаВозвращения - ДокументСсылка.ДатаВыезда);
	КонецЕсли; 
	
	Возврат сВремяНочь;
КонецФункции	

// Функция рассчитывает ночное время первого дня многодневного ПЛ
// Возвращает значение в секундах
Функция ВремяНочьПервыйДень(ДокументСсылка) Экспорт
	Если Час(ДокументСсылка.ДатаВыезда) <= 6 Тогда
		// Время выезда раньше 6.00 -> Рассчитывается время работы до 6.00 + время работы с 22.00 до 24.00 = 2 часа
		сВремяНочь = уатОбщегоНазначения.уатВремяВСекунды(6) - (ДокументСсылка.ДатаВыезда
			- НачалоДня(ДокументСсылка.ДатаВыезда)) + уатОбщегоНазначения.уатВремяВСекунды(2);
	ИначеЕсли Час(ДокументСсылка.ДатаВыезда) >= 22 Тогда
		// Время выезда позже 22.00 -> Рассчитывается время работы
		сВремяНочь = уатОбщегоНазначения.уатВремяВСекунды(24) - (ДокументСсылка.ДатаВыезда - НачалоДня(ДокументСсылка.ДатаВыезда));
	Иначе
		// Время выезда позже 6.00, но раньше 22.00 -> Рассчитывается время работы с 22.00 до 24.00 = 2 часа
		сВремяНочь = уатОбщегоНазначения.уатВремяВСекунды(2);
	КонецЕсли;
	
	Возврат сВремяНочь;
КонецФункции

// Функция рассчитывает ночное время последнего дня многодневного ПЛ
// Возвращает значение в секундах
Функция ВремяНочьПоследнийДень(ДокументСсылка) Экспорт
	Если Час(ДокументСсылка.ДатаВозвращения) >= 22 Тогда
		// Время возвращения позже 22.00 ->
		//Рассчитывается время работы с 22.00 до возвращения + время работы с 0.00 до 6.00 = 6 часам
		сВремяНочь = уатОбщегоНазначения.уатВремяВСекунды(6) + (ДокументСсылка.ДатаВозвращения
			- НачалоДня(ДокументСсылка.ДатаВозвращения)) - уатОбщегоНазначения.уатВремяВСекунды(22);
	ИначеЕсли ДокументСсылка.ДатаВозвращения - НачалоДня(ДокументСсылка.ДатаВозвращения) <= 21600 Тогда
		// Время возвращения раньше 6.00 -> Рассчитывается время работы
		сВремяНочь = ДокументСсылка.ДатаВозвращения - НачалоДня(ДокументСсылка.ДатаВозвращения);
	Иначе	
		// Время возвращения позже 6.00, но раньше 22.00 -> Рассчитывается время работы с 0.00 до 6.00 = 6 часам
		сВремяНочь = уатОбщегоНазначения.уатВремяВСекунды(6);
	КонецЕсли;
	
	Возврат сВремяНочь;
КонецФункции	

// Функция рассчитывает обеденное время для ПЛ с указанным режимом работы ТС
// Применяется и для одно-, и для многодневных ПЛ
// Возвращает значение в секундах
//
Функция ВремяОбедаПоРежимуРаботы(НачалоРаботы, КонецРаботы, РежимРаботы) Экспорт
	Рез = 0;
	
	Если НЕ ЗначениеЗаполнено(РежимРаботы) Тогда
		Возврат Рез;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РежимРаботы.Обед) Тогда
		Возврат (РежимРаботы.Обед - '00010101');
	КонецЕсли;
	
	тблВозможныхОбедов = Новый ТаблицаЗначений;
	тблВозможныхОбедов.Колонки.Добавить("Начало");
	тблВозможныхОбедов.Колонки.Добавить("Конец");
	Если РежимРаботы.НачалоОбеда <= РежимРаботы.КонецОбеда Тогда
		НоваяСтрока = тблВозможныхОбедов.Добавить(); //добавляем обед на дату выезда
		НоваяСтрока.Начало = НачалоДня(НачалоРаботы) + (РежимРаботы.НачалоОбеда - '00010101');
		НоваяСтрока.Конец = НачалоДня(НачалоРаботы) + (РежимРаботы.КонецОбеда - '00010101');
		Если НачалоДня(КонецРаботы) <> НачалоДня(НачалоРаботы) Тогда
			НоваяСтрока = тблВозможныхОбедов.Добавить(); //добавляем обед на дату возвращения
			НоваяСтрока.Начало = НачалоДня(КонецРаботы) + (РежимРаботы.НачалоОбеда - '00010101');
			НоваяСтрока.Конец = НачалоДня(КонецРаботы) + (РежимРаботы.КонецОбеда - '00010101');
		КонецЕсли;
	Иначе
		Если РежимРаботы.КонецОбеда <> '00010101' Тогда
			НоваяСтрока = тблВозможныхОбедов.Добавить(); //добавляем ночной обед на начало даты выезда
			НоваяСтрока.Начало = НачалоДня(НачалоРаботы);
			НоваяСтрока.Конец = НачалоДня(НачалоРаботы) + (РежимРаботы.КонецОбеда - '00010101');
		КонецЕсли;
		НоваяСтрока = тблВозможныхОбедов.Добавить(); //добавляем ночной обед на конец даты выезда
		НоваяСтрока.Начало = НачалоДня(НачалоРаботы) + (РежимРаботы.НачалоОбеда - '00010101');
		НоваяСтрока.Конец = КонецДня(НачалоРаботы);
		Если НачалоДня(КонецРаботы) <> НачалоДня(НачалоРаботы) Тогда
			НоваяСтрока = тблВозможныхОбедов.Добавить(); //добавляем ночной обед на начало даты возвращения
			НоваяСтрока.Начало = НачалоДня(КонецРаботы);
			НоваяСтрока.Конец = НачалоДня(КонецРаботы) + (РежимРаботы.КонецОбеда - '00010101');
			НоваяСтрока = тблВозможныхОбедов.Добавить(); //добавляем ночной обед на конец даты возвращения
			НоваяСтрока.Начало = НачалоДня(КонецРаботы) + (РежимРаботы.НачалоОбеда - '00010101');
			НоваяСтрока.Конец = КонецДня(КонецРаботы);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтрокаОбеды Из тблВозможныхОбедов Цикл
		мНачалоОбеда = Макс(ТекСтрокаОбеды.Начало, НачалоРаботы);
		мКонецОбеда = Мин(ТекСтрокаОбеды.Конец, КонецРаботы);
		Если мКонецОбеда > мНачалоОбеда Тогда
			Рез = Рез + (мКонецОбеда-мНачалоОбеда);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Функция расчета времени простоев по заданному дню
// Возвращает значение в секундах
Функция РасчетПростоевНаДень(ДеньПростоя, ДокументСсылка) Экспорт
	ВремяВПростоеНаДень = 0;
	Для Каждого ТекСтрока Из ДокументСсылка.Простои Цикл
		Если НачалоДня(ТекСтрока.ВремяПростоя) = НачалоДня(ДеньПростоя) Тогда
			ВремяВПростоеНаДень = ВремяВПростоеНаДень + (ТекСтрока.ВремяПростоя - НачалоДня(ТекСтрока.ВремяПростоя));
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ВремяВПростоеНаДень;
КонецФункции	

// Процедура формирует таблицу рабочего времени сотрудников
//для дальнейшего формирования табеля рабочего времени
Процедура ФормированиеТаблицыРабочегоВремениДляТабеля(ТаблицаДвижений, ДокументСсылка, СтруктураДополнительныеСвойства)
	//формируем движения по рабочему/ночному времени
	Для Каждого ТекСтрокаФОВ Из ДокументСсылка.ФактическиОтработанноеВремя Цикл
		Если ТекСтрокаФОВ.ВремяДневное > 0 Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.Период = ДокументСсылка.ДатаВозвращения;
			Движение.Сотрудник = ТекСтрокаФОВ.Сотрудник;
			Движение.Организация = ДокументСсылка.Организация;
			Движение.ВидИспользованияРабочегоВремени = Справочники.уатКлассификаторИспользованияРабочегоВремени.Работа;
			Движение.ДатаРаботы = ТекСтрокаФОВ.Дата;
			Движение.Дней = 1;
			Движение.Время = ТекСтрокаФОВ.ВремяДневное;
		КонецЕсли;
		Если ТекСтрокаФОВ.ВремяНочное > 0 Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.Период = ДокументСсылка.ДатаВозвращения;
			Движение.Сотрудник = ТекСтрокаФОВ.Сотрудник;
			Движение.Организация = ДокументСсылка.Организация;
			Движение.ВидИспользованияРабочегоВремени = Справочники.уатКлассификаторИспользованияРабочегоВремени.Ночные;
			Движение.ДатаРаботы = ТекСтрокаФОВ.Дата;
			Движение.Дней = 1;
			Движение.Время = ТекСтрокаФОВ.ВремяНочное;
		КонецЕсли;
	КонецЦикла;
	
	//составим список задействованных сотрудников
	мсвСотрудники = Новый Массив;
	мсвСотрудники.Добавить(ДокументСсылка.Водитель1);
	Если ЗначениеЗаполнено(ДокументСсылка.Водитель2) Тогда
		мсвСотрудники.Добавить(ДокументСсылка.Водитель2);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДокументСсылка.Сотрудник1) Тогда
		мсвСотрудники.Добавить(ДокументСсылка.Сотрудник1);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДокументСсылка.Сотрудник2) Тогда
		мсвСотрудники.Добавить(ДокументСсылка.Сотрудник2);
	КонецЕсли;
	
	//формируем движения по простоям
	Для Каждого ТекСотрудник Из мсвСотрудники Цикл
		// Однодневный ПЛ - линия
		Если ДокументСсылка.ДатаВозвращения - ДокументСсылка.ДатаВыезда <= 86400 Тогда
			Простой = РасчетПростоевНаДень(ДокументСсылка.ДатаВыезда, ДокументСсылка);
			// Формируем движение табеля по времени в простое
			Если Простой > 0 Тогда
				Движение = ТаблицаДвижений.Добавить();
				Движение.Период = ДокументСсылка.ДатаВозвращения;
				Движение.Сотрудник = ТекСотрудник;
				Движение.Организация = ДокументСсылка.Организация;
				Движение.ВидИспользованияРабочегоВремени = Справочники.уатКлассификаторИспользованияРабочегоВремени.Простой;
				Движение.ДатаРаботы = НачалоДня(ДокументСсылка.ДатаВыезда);
				Движение.Дней = 1;
				Движение.Время = Простой;
			КонецЕсли;
			
			// Многодневный ПЛ - линия      
		Иначе
			//Формируем движения табеля по времени в простое
			Для ДатаРаботы = 0 по (НачалоДня(ДокументСсылка.ДатаВозвращения) - НачалоДня(ДокументСсылка.ДатаВыезда))/уатОбщегоНазначения.уатВремяВСекунды(24) Цикл
				сДатаРаботы = ДокументСсылка.ДатаВыезда + уатОбщегоНазначения.уатВремяВСекунды(24) * ДатаРаботы;
				сПростой = РасчетПростоевНаДень(сДатаРаботы, ДокументСсылка);
				Если сПростой > 0 Тогда
					Движение = ТаблицаДвижений.Добавить();
					Движение.Период = ДокументСсылка.ДатаВозвращения;
					Движение.Сотрудник = ТекСотрудник;
					Движение.Организация = ДокументСсылка.Организация;
					Движение.ВидИспользованияРабочегоВремени  = Справочники.уатКлассификаторИспользованияРабочегоВремени.Простой;
					Движение.ДатаРаботы = НачалоДня(сДатаРаботы);
					Движение.Дней = 1;
					Движение.Время = сПростой;              
				КонецЕсли;      
			КонецЦикла;     
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры  


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПланированияРаботыТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	Если ДокументСсылка.Рассчитан Тогда
		СформироватьТаблицаСчетчикиТС(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаВыработкаТС(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаВыработкаСотрудников(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаПростоев(ДокументСсылка, СтруктураДополнительныеСвойства);
		//СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
		//СформироватьТаблицаРасходГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаРасходТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаОсновныеНачисления(ДокументСсылка, СтруктураДополнительныеСвойства);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетРабочегоВремени) Тогда
			СформироватьТаблицаРабочееВремяРаботниковОрганизаций(ДокументСсылка, СтруктураДополнительныеСвойства);
		КонецЕсли;
		СформироватьТаблицаЗатратыПоВидамПеревозок(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ДатаОкончания");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Состояние");
	тблДвижений.Колонки.Добавить("Контрагент");
	
	НоваяСтрока = тблДвижений.Добавить();
	НоваяСтрока.ТС = ДокументСсылка.ТранспортноеСредство;
	НоваяСтрока.Период = уатОбщегоНазначения.уатДатаБезСекунд(ДокументСсылка.ДатаВыезда);
	НоваяСтрока.ДатаОкончания = ДокументСсылка.ДатаВозвращения-1;
	НоваяСтрока.Состояние = Справочники.уатСостояниеТС.ВРейсе;
	НоваяСтрока.Контрагент = ДокументСсылка.Контрагент;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаСостояниеТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПланированияРаботыТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка КАК Регистратор,
	|	уатПутевойЛист.Ссылка КАК ДокументПланирования,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаНачала,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(СПРАВОЧНИК.уатСостояниеТС.ВРейсе) КАК Состояние,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.Ссылка.ДатаВыезда,
	|	уатПутевойЛистПрицепы.Ссылка.ДатаВозвращения,
	|	ЗНАЧЕНИЕ(СПРАВОЧНИК.уатСостояниеТС.ВРейсе),
	|	уатПутевойЛистПрицепы.ТС
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПланированияРаботыТС", МассивРезультатов[0].Выгрузить());
КонецПроцедуры // СформироватьТаблицаПланированияРаботыТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетчикиТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("ТипСчетчика");
	тблДвижений.Колонки.Добавить("Значение");
	тблДвижений.Колонки.Добавить("ОстатокВОснБаке");
	тблДвижений.Колонки.Добавить("ОстатокВДопБаке");
	
	Движение = тблДвижений.Добавить();
	Движение.Регистратор = ДокументСсылка;
	Движение.Период = ДокументСсылка.ДатаВозвращения-1;
	Движение.ТС = ДокументСсылка.ТранспортноеСредство;
	Движение.Значение = ДокументСсылка.СпидометрВозвращения;
	Движение.ОстатокВОснБаке = ДокументСсылка.ОстатокТопливаВозврат;
	Движение.ОстатокВДопБаке = ДокументСсылка.ОстатокТопливаВозврат1;
	
	Для Каждого ТекСтрПрицепы из ДокументСсылка.Прицепы Цикл
		Если ТекСтрПрицепы.СчетчикМЧВозвращения <> ТекСтрПрицепы.СчетчикМЧВыезда Тогда
			Движение = тблДвижений.Добавить();
			Движение.Регистратор = ДокументСсылка;
			Движение.Период = ДокументСсылка.ДатаВозвращения-1;
			Движение.ТС = ТекСтрПрицепы.ТС;
			Движение.Значение = ТекСтрПрицепы.СчетчикМЧВозвращения;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетчиковТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаСчетчикиТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыработкаТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	//СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаВыработкаТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыработкаСотрудников(ДокументСсылка, СтруктураДополнительныеСвойства)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатПутевойЛистВыработка.Ссылка.ДатаВозвращения КАК Период,
	|	уатПутевойЛистВыработка.Сотрудник КАК Сотрудник,
	|	уатПутевойЛистВыработка.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПутевойЛистВыработка.Количество КАК Количество,
	|	уатПутевойЛистВыработка.Подразделение КАК Подразделение,
	|	уатПутевойЛистВыработка.Контрагент КАК Контрагент,
	|	уатПутевойЛистВыработка.Ссылка.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатПутевойЛистВыработка.ОбъектСтроительства,
	|	уатПутевойЛистВыработка.Маршрут
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаСотрудников КАК уатПутевойЛистВыработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаВозвращения, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатПутевойЛистВыработка.Ссылка.ТранспортноеСредство = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатПутевойЛистВыработка.Ссылка = &Док";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДокументСсылка.ДатаВозвращения);
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	Если НЕ УчетВыработкиПоКонтрагентам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Контрагент");
	КонецЕсли;
	Если НЕ УчетВыработкиПоПодразделениям Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Подразделение");
	КонецЕсли;
	Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
	КонецЕсли;
	Если НЕ УчетВыработкиПоМаршрутам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Маршрут");
	КонецЕсли;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства) ИЛИ (НЕ УчетВыработкиПоМаршрутам) Тогда
		тблДвижений.Свернуть("Период, Сотрудник, ПараметрВыработки, Подразделение, Контрагент, Организация, ОбъектСтроительства, Маршрут, Колонна", "Количество");
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиСотрудников", тблДвижений);
КонецПроцедуры // СформироватьТаблицаВыработкаСотрудников()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПростоев(ДокументСсылка, СтруктураДополнительныеСвойства)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	уатПутевойЛистПростои.НачалоПростоя КАК Период,
	|	уатПутевойЛистПростои.Ссылка.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛистПростои.Ссылка.Водитель1 КАК Водитель,
	|	уатПутевойЛистПростои.ВидПростоя КАК ВидПростоя,
	|	уатПутевойЛистПростои.ВремяПростоя КАК ВремяПростоя,
	|	0 КАК Время
	|ИЗ
	|	Документ.уатПутевойЛист.Простои КАК уатПутевойЛистПростои
	|ГДЕ
	|	уатПутевойЛистПростои.Ссылка = &Док
	|	И уатПутевойЛистПростои.ВремяПростоя <> &ПустаяДата";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Текстрока Из тблДвижений Цикл
		Текстрока.Время = Текстрока.ВремяПростоя - НачалоДня(Текстрока.ВремяПростоя);
	КонецЦикла;
	тблДвижений.Колонки.Удалить("ВремяПростоя");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПростои", тблДвижений);
КонецПроцедуры // СформироватьТаблицаПростоев()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	Перем мТаблицаПоСписаниюГСМ;
	
	// Подготовим таблицу ГСМ для проведения.
	СтрокаОшибки = "";
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистРасходГСМ.ТС,
	|	уатПутевойЛистРасходГСМ.ГСМ
	|ИЗ
	|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|ГДЕ
	|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГСМнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = мЗапрос.Выполнить();
	Для каждого КолонкаРезультатЗапроса Из ЭлементБлокировки.ИсточникДанных.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	уатОбщегоНазначения_проф.уатПодготовитьТаблицуСписанияГСМ(ДокументСсылка, мТаблицаПоСписаниюГСМ, Истина, , СтрокаОшибки);
	мТаблицаПоСписаниюГСМ.Колонки.Дата.Имя = "Период";
	мТаблицаПоСписаниюГСМ.Колонки.Добавить("ВидДвижения");
	мТаблицаПоСписаниюГСМ.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", мТаблицаПоСписаниюГСМ);
КонецПроцедуры // СформироватьТаблицаГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасходГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Водитель");
	тблДвижений.Колонки.Добавить("ГСМ");
	тблДвижений.Колонки.Добавить("Колонна");
	тблДвижений.Колонки.Добавить("Организация");
	тблДвижений.Колонки.Добавить("РасходПоНорме");
	тблДвижений.Колонки.Добавить("РасходПоФакту");
	
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	
	Для Каждого ТекСтрокаРасходГСМ Из ДокументСсылка.РасходГСМ Цикл
		Если (ТекСтрокаРасходГСМ.РасходПоНорме <> 0 ИЛИ
			ТекСтрокаРасходГСМ.РасходПоФакту <> 0) И ТекСтрокаРасходГСМ.Активен Тогда
			
			ТекКолоннаТС = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТекСтрокаРасходГСМ.ТС, "Колонна", ДокументСсылка.ДатаВозвращения).Колонна;
			
			мОтбор = Новый Структура("ГСМ, ТС", ТекСтрокаРасходГСМ.ГСМ, ТекСтрокаРасходГСМ.ТС);
			мНайденныеСтроки = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ.НайтиСтроки(мОтбор);
			Если мНайденныеСтроки.Количество() > 0 Тогда
				Если мНайденныеСтроки[0].Количество = ТекСтрокаРасходГСМ.РасходПоФакту Тогда
					НоваяСтрока 				= тблДвижений.Добавить();
					НоваяСтрока.Период 			= ДокументСсылка.ДатаВозвращения;
					НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
					НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
					НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
					НоваяСтрока.Колонна = ТекКолоннаТС;
					НоваяСтрока.Организация = ДокументСсылка.Организация;
					НоваяСтрока.РасходПоНорме 	= ТекСтрокаРасходГСМ.РасходПоНорме;
					НоваяСтрока.РасходПоФакту 	= ТекСтрокаРасходГСМ.РасходПоФакту;
					
				Иначе
					мОстатокКСписаниюНорм		= ТекСтрокаРасходГСМ.РасходПоНорме;
					мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
					Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ Цикл
						Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
							мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ГСМ, "Аналог");
							Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ГСМ = ТекСтрокаРасходГСМ.ГСМ Тогда
								НоваяСтрока 				= тблДвижений.Добавить();
								НоваяСтрока.Период 			= ДокументСсылка.ДатаВозвращения;
								НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
								НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
								НоваяСтрока.ГСМ				= ТекСтрокаТаблицыГСМ.ГСМ;
								НоваяСтрока.Колонна = ТекКолоннаТС;
								НоваяСтрока.Организация = ДокументСсылка.Организация;
								Если ТекСтрокаРасходГСМ.РасходПоФакту <> 0 Тогда
									мРН	= ТекСтрокаРасходГСМ.РасходПоНорме * ТекСтрокаТаблицыГСМ.Количество /ТекСтрокаРасходГСМ.РасходПоФакту;
								Иначе
									мРН	= ТекСтрокаРасходГСМ.РасходПоНорме;
								КонецЕсли;	
								НоваяСтрока.РасходПоНорме 	= мРН;
								НоваяСтрока.РасходПоФакту 	= ТекСтрокаТаблицыГСМ.Количество;
								мОстатокКСписаниюНорм		= мОстатокКСписаниюНорм - мРН; 
							КонецЕсли;						
						КонецЕсли;						
					КонецЦикла;	
					
					//последняя копейка
					Если Окр(мОстатокКСписаниюНорм, мТочностьОстатковГСМ) <> 0 Тогда
						НоваяСтрока 				= тблДвижений.Добавить();
						НоваяСтрока.Период 			= ДокументСсылка.ДатаВозвращения;
						НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
						НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
						НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
						НоваяСтрока.Колонна = ТекКолоннаТС;
						НоваяСтрока.Организация = ДокументСсылка.Организация;
						НоваяСтрока.РасходПоНорме 	= мОстатокКСписаниюНорм;
						НоваяСтрока.РасходПоФакту 	= 0;
					КонецЕсли;	
				КонецЕсли;	
				
			Иначе
				мОстатокКСписаниюНорм		= ТекСтрокаРасходГСМ.РасходПоНорме;
				мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
				Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ Цикл
					Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
						//мОтбор = Новый Структура("ГСМ, ТС", ТекСтрокаТаблицыГСМ.ГСМ, ТекСтрокаТаблицыГСМ.ТС);
						//мНайденныеСтроки_рабочая = мТаблицаПоСписаниюГСМ.НайтиСтроки(мОтбор);
						мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ГСМ, "Аналог");
						Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ГСМ = ТекСтрокаРасходГСМ.ГСМ Тогда
							НоваяСтрока 				= тблДвижений.Добавить();
							НоваяСтрока.Период 			= ДокументСсылка.ДатаВозвращения;
							НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
							НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
							НоваяСтрока.ГСМ				= ТекСтрокаТаблицыГСМ.ГСМ;
							НоваяСтрока.Колонна = ТекКолоннаТС;
							НоваяСтрока.Организация = ДокументСсылка.Организация;
							Если ТекСтрокаРасходГСМ.РасходПоФакту <> 0 Тогда
								мРН	= ТекСтрокаРасходГСМ.РасходПоНорме * ТекСтрокаТаблицыГСМ.Количество / ТекСтрокаРасходГСМ.РасходПоФакту;
							Иначе
								мРН	= ТекСтрокаРасходГСМ.РасходПоНорме;
							КонецЕсли;	
							НоваяСтрока.РасходПоНорме 	= мРН;
							НоваяСтрока.РасходПоФакту 	= ТекСтрокаТаблицыГСМ.Количество;
							мОстатокКСписаниюНорм		= мОстатокКСписаниюНорм - мРН; 
						КонецЕсли;						
					КонецЕсли;						
				КонецЦикла;	
				
				//последняя копейка
				Если Окр(мОстатокКСписаниюНорм, мТочностьОстатковГСМ) <> 0 Тогда
					НоваяСтрока 				= тблДвижений.Добавить();
					НоваяСтрока.Период 			= ДокументСсылка.ДатаВозвращения;
					НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
					НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
					НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
					НоваяСтрока.Колонна = ТекКолоннаТС;
					НоваяСтрока.Организация = ДокументСсылка.Организация;
					НоваяСтрока.РасходПоНорме 	= мОстатокКСписаниюНорм;
					НоваяСтрока.РасходПоФакту 	= 0;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	тблДвижений.Свернуть("Период, ТС, Водитель, ГСМ, Колонна, Организация", "РасходПоНорме, РасходПоФакту");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходГСМ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаРасходГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасходТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Водитель");
	тблДвижений.Колонки.Добавить("ГСМ");
	тблДвижений.Колонки.Добавить("Колонна");
	тблДвижений.Колонки.Добавить("Организация");
	тблДвижений.Колонки.Добавить("ВидОперации");
	тблДвижений.Колонки.Добавить("КоличествоПриход");
	тблДвижений.Колонки.Добавить("КоличествоРасход");
	
	мЗапрос = Новый запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатПутевойЛистРасходТехническихЖидкостей.ГСМ,
	|	уатПутевойЛистРасходТехническихЖидкостей.Количество КАК КоличествоРасход,
	|	уатПутевойЛистРасходТехническихЖидкостей.Ссылка КАК Регистратор,
	|	уатПутевойЛистРасходТехническихЖидкостей.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистРасходТехническихЖидкостей.Ссылка.ДатаВозвращения КАК Период,
	|	уатПутевойЛистРасходТехническихЖидкостей.ТС,
	|	НЕОПРЕДЕЛЕНО КАК Колонна,
	|	уатПутевойЛистРасходТехническихЖидкостей.Ссылка.Водитель1 КАК Водитель,
	|	ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийСТехническимиЖидкостями.РасходВРаботе) КАК ВидОперации
	|ИЗ
	|	Документ.уатПутевойЛист.РасходТехническихЖидкостей КАК уатПутевойЛистРасходТехническихЖидкостей
	|ГДЕ
	|	уатПутевойЛистРасходТехническихЖидкостей.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Выгрузка = мЗапрос.Выполнить().Выгрузить();
	Для каждого ТекСтрока ИЗ Выгрузка Цикл
		ТекСтрока.Колонна = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТекСтрока.ТС, "Колонна", ДокументСсылка.ДатаВозвращения).Колонна;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходТЖ", Выгрузка);
КонецПроцедуры // СформироватьТаблицаРасходГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаВозвращения КАК Период,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	уатПутевойЛистВыработкаТС.Количество КАК Пробег,
	|	ВложенныйЗапрос.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатМоделиШин.НормаЗатрат * ВложенныйЗапрос.СерияНоменклатуры.ПервоначальнаяСтоимость / 100 * уатПутевойЛистВыработкаТС.Количество / 1000 КАК Износ
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатАгрегатыТССрезПоследних.Период КАК Период,
	|			уатАгрегатыТССрезПоследних.Регистратор КАК Регистратор,
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|			уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|			уатАгрегатыТССрезПоследних.МестоУстановки КАК МестоУстановки,
	|			уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата
	|		ИЗ
	|			РегистрСведений.уатАгрегатыТС.СрезПоследних(&Дата, ) КАК уатАгрегатыТССрезПоследних
	|		ГДЕ
	|			уатАгрегатыТССрезПоследних.СостояниеАгрегата В(&СостояниеАгрегата)
	|			И уатАгрегатыТССрезПоследних.ТС В(&ВСоставе)
	|			И уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиАгрегатов КАК уатМоделиШин
	|			ПО ВложенныйЗапрос.СерияНоменклатуры.Модель = уатМоделиШин.Ссылка
	|		ПО уатПутевойЛистВыработкаТС.ТС = ВложенныйЗапрос.ТС
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки = &ПараметрВыработки
	|	И уатПутевойЛистВыработкаТС.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Дата", Новый Граница(ДокументСсылка.ДатаВозвращения, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВСоставе", ДокументСсылка.ВыработкаТС.ВыгрузитьКолонку("ТС"));
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьИзносНаЗапаску) Тогда
		СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	КонецЕсли;
	Запрос.УстановитьПараметр("СостояниеАгрегата", СписокСостоянийАгрегата);
	Запрос.УстановитьПараметр("СостояниеСнято", Перечисления.уатСостоянияАгрегатов.Снято);
	Запрос.УстановитьПараметр("ТипАгрегата", Справочники.уатТипыАгрегатов.Шина);
	Запрос.УстановитьПараметр("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегОбщий);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	мТаблицаУстановленныхШин = Запрос.Выполнить().Выгрузить();
	
	//Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
	//	мВалютаВ = СтруктураДополнительныеСвойства.ВалютаУпрУчета;
	//	мКурсВ = СтруктураДополнительныеСвойства.КурсУпр;
	//	мКратностьВ = СтруктураДополнительныеСвойства.КратностьУпр;
	//Иначе
	//	мВалютаВ = СтруктураДополнительныеСвойства.ВалютаРеглУчета;
	//	мКурсВ = СтруктураДополнительныеСвойства.КурсРегл;
	//	мКратностьВ = СтруктураДополнительныеСвойства.КратностьРегл;
	//КонецЕсли;
	//	
	//Для Каждого ТекСтрокаШины Из мТаблицаУстановленныхШин Цикл
	//	Если ТекСтрокаШины.СерияНоменклатуры.Валюта <> мВалютаВ Тогда
	//		уатОбщегоНазначения.
	//	КонецЕсли;
	//КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаИзносаПробегаШин", мТаблицаУстановленныхШин);
КонецПроцедуры // СформироватьТаблицаИзносПробегШин()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОсновныеНачисления(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистЗарплата.Ссылка.ДатаВозвращения КАК ПериодРегистрации,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаВозвращения КАК БазовыйПериодНачало,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаВозвращения КАК БазовыйПериодКонец,
	|	уатПутевойЛистЗарплата.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистЗарплата.Сотрудник КАК Сотрудник,
	|	уатПутевойЛистЗарплата.ВидНачисления КАК ВидРасчета,
	|	СУММА(уатПутевойЛистЗарплата.Сумма) КАК Результат
	|ИЗ
	|	Документ.уатПутевойЛист.Зарплата КАК уатПутевойЛистЗарплата
	|ГДЕ
	|	уатПутевойЛистЗарплата.Ссылка = &Док
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛистЗарплата.Ссылка,
	|	уатПутевойЛистЗарплата.Сотрудник,
	|	уатПутевойЛистЗарплата.ВидНачисления";
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	мТаблица = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОсновныхНачислений", мТаблица);
КонецПроцедуры // СформироватьТаблицаОсновныеНачисления()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРабочееВремяРаботниковОрганизаций(ДокументСсылка, СтруктураДополнительныеСвойства)
	Если Не уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетРабочегоВремени) Тогда
		Возврат;
	КонецЕсли;
	
	мТаблица = Новый ТаблицаЗначений;
	мТаблица.Колонки.Добавить("Период");
	мТаблица.Колонки.Добавить("Сотрудник");
	мТаблица.Колонки.Добавить("Организация");
	мТаблица.Колонки.Добавить("ВидИспользованияРабочегоВремени");
	мТаблица.Колонки.Добавить("ДатаРаботы");
	мТаблица.Колонки.Добавить("Дней");
	мТаблица.Колонки.Добавить("Время");
	
	ФормированиеТаблицыРабочегоВремениДляТабеля(мТаблица, ДокументСсылка, СтруктураДополнительныеСвойства);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРабочегоВремени", мТаблица);
КонецПроцедуры // СформироватьТаблицаРабочееВремяРаботниковОрганизаций()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗатратыПоВидамПеревозок(ДокументСсылка, СтруктураДополнительныеСвойства)
	мТаблица = ДокументСсылка.ЗатратыПоВидамПеревозок.Выгрузить();
	мТаблица.Колонки.Добавить("Период");
	мТаблица.ЗаполнитьЗначения(ДокументСсылка.ДатаВозвращения, "Период");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗатратыПоВидамПеревозок", мТаблица);
КонецПроцедуры // СформироватьТаблицаЗатратыПоВидамПеревозок()


// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Возврат;
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если ДокументСсылка.Рассчитан Тогда
		тблГСМ = ДокументСсылка.РасходГСМ.Выгрузить();
		
		мсвГСМ = Новый Массив;
		Для Каждого ТекСтрока Из тблГСМ Цикл
			мсвГСМ.Добавить(ТекСтрока.ГСМ);
		КонецЦикла;
		
		мсвТС = Новый Массив;
		мсвТС.Добавить(ДокументСсылка.ТранспортноеСредство);
		Для Каждого ТекСтрока Из ДокументСсылка.Прицепы Цикл
			мсвТС.Добавить(ТекСтрока.ТС);
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатОстаткиГСМнаТС.ГСМ КАК ГСМ,
		|	уатОстаткиГСМнаТС.ТС,
		|	ЕСТЬNULL(уатОстаткиГСМнаТС.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(&МоментКонтроля, ГСМ В (&ГСМ) И ТС В (&ТС)) КАК уатОстаткиГСМнаТС
		|ГДЕ
		|	ЕСТЬNULL(уатОстаткиГСМнаТС.КоличествоОстаток, 0) < 0");
		Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(ДокументСсылка.ДатаВозвращения, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ГСМ", мсвГСМ);
		Запрос.УстановитьПараметр("ТС", мсвТС);
		Рез = Запрос.Выполнить().Выбрать();
		
		Пока Рез.Следующий() Цикл
			ТекстСообщения = "ГСМ """ + Рез.ГСМ + """, ТС """ + уатОбщегоНазначения.уатПредставлениеТС(Рез.ТС, ДокументСсылка.Организация) + """ ";
			ТекстСообщения = ТекстСообщения + " - отрицательный остаток ГСМ на ТС.";
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Остаток на ТС: " + Рез.КоличествоОстаток + ".";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА РАБОЧЕГО ВРЕМЕНИ ДЛЯ ТАБЕЛЯ

// Функция создает ПЛ с заданными параметрами из структуры:
//	ТС
//	Водитель
//	ДатаФормирования (ДатаВыезда)
//	Смена
//	ЦехМаршрут
//	МестоОказанияУслуг
//	ВремяВыезда
//	ВремяВозврата
//	Ответственный
Функция СоздатьПутевойЛист(пСтруктура) Экспорт
	Если пСтруктура.Свойство("ПутевойЛист") И ЗначениеЗаполнено(пСтруктура.ПутевойЛист) Тогда
		мОбъектДокументаПЛ = пСтруктура.ПутевойЛист.ПолучитьОбъект();
		Если ЗначениеЗаполнено(мОбъектДокументаПЛ.ТранспортноеСредство) И  мОбъектДокументаПЛ.ТранспортноеСредство <> пСтруктура.ТС Тогда
			Сообщить("Изменено ТС с: " + мОбъектДокументаПЛ.ТранспортноеСредство + " на " + пСтруктура.ТС + " в ПЛ: " + пСтруктура.ПутевойЛист);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВыпискаПЛПоИдентификаторам.ТС,
		|	ВыпискаПЛПоИдентификаторам.ПутевойЛист
		|ИЗ
		|	РегистрСведений.ВыпискаПЛПоИдентификаторам КАК ВыпискаПЛПоИдентификаторам
		|WHERE ВыпискаПЛПоИдентификаторам.ИдентификаторСтрокиЗаявки = &ИдентификаторСтрокиЗаявки И ВыпискаПЛПоИдентификаторам.ДатаВыписки = &ДатаФормирования
		|	И (НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист.ПометкаУдаления)";
		Запрос.УстановитьПараметр("ИдентификаторСтрокиЗаявки", пСтруктура.ИдентификаторСтрокиЗаявки);
		Запрос.УстановитьПараметр("ДатаФормирования", пСтруктура.ДатаФормирования);
		
		мТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		Если мТаблицаРезультата.Количество() > 0 И Не мТаблицаРезультата[0].ПутевойЛист.Пустая() Тогда
			мОбъектДокументаПЛ = мТаблицаРезультата[0].ПутевойЛист.ПолучитьОбъект();
		Иначе
			//поиск по ТС и смене
			мЗапросПоТС = Новый Запрос;
			мЗапросПоТС.Текст = "ВЫБРАТЬ
			|	уатПутевойЛист.ТранспортноеСредство,
			|	уатПутевойЛист.Ссылка,
			|	уатПутевойЛист.ДатаВыезда
			|ИЗ
			|	Документ.уатПутевойЛист КАК уатПутевойЛист
			|WHERE (НЕ уатПутевойЛист.ПометкаУдаления) И ТранспортноеСредство = &ТС и ДатаВыезда >= &НачДт и ДатаВыезда < &КонДт";
			
			мЗапросПоТС.УстановитьПараметр("ТС", пСтруктура.ТС);
			Если Час(пСтруктура.ВремяПодачи) < 16 и Час(пСтруктура.ВремяПодачи) >= 4 Тогда
				мЗапросПоТС.УстановитьПараметр("НачДт", НачалоДня(пСтруктура.ДатаФормирования) + 3600 * 4);
				мЗапросПоТС.УстановитьПараметр("КонДт", НачалоДня(пСтруктура.ДатаФормирования) + 3600 * 16);
			ИНАче
				мЗапросПоТС.УстановитьПараметр("НачДт", НачалоДня(пСтруктура.ДатаФормирования) + 3600 * 16);
				мЗапросПоТС.УстановитьПараметр("КонДт", НачалоДня(пСтруктура.ДатаФормирования) + 3600 * 4.5 + 3600 * 24);
			КонецЕслИ;
			
			мРезультатЗапросаПоТС = мЗапросПоТС.Выполнить().Выгрузить();
			Если мРезультатЗапросаПоТС.Количество() = 0 Тогда
				мОбъектДокументаПЛ = Документы.уатПутевойЛист.СоздатьДокумент();
			Иначе
				мОбъектДокументаПЛ = мРезультатЗапросаПоТС[0].Ссылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	мОбъектДокументаПЛ.ТранспортноеСредство = пСтруктура.ТС;
	мОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	мОбъектДокументаПЛ.Дата = НачалоДня(пСтруктура.ДатаФормирования) + (пСтруктура.ВремяВыезда - НачалоДня(пСтруктура.ВремяВыезда));
	мОбъектДокументаПЛ.ДатаВыписки = пСтруктура.ДатаФормирования;
	Если Не ЗначениеЗаполнено(мОбъектДокументаПЛ.ДатаВыезда) Тогда
		мОбъектДокументаПЛ.ДатаВыезда = уатОбщегоНазначения.уатДатаБезСекунд(мОбъектДокументаПЛ.Дата);
	КонецЕсли;
	мОбъектДокументаПЛ.Организация = мОрганизация;
	
	мОбъектДокументаПЛ.Контрагент = пСтруктура.Контрагент;
	
	//мОбъектДокументаПЛ.РежимРасчетаВыработки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ);
	
	мОбъектДокументаПЛ.ОсмотрелВрач = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВрач); //?(НЕ ЗначениеЗаполнено(ОсмотрелВрач), уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВрач), ОсмотрелВрач);
	мОбъектДокументаПЛ.ВыдалДиспетчер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойДиспетчер);
	мОбъектДокументаПЛ.ВыпустилМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик);
	мОбъектДокументаПЛ.ПринялМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик);
	//мОбъектДокументаПЛ.РасчетФактРасходаГСМПоНормативному = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМПоНормативному);
	
	//мОбъектДокументаПЛ.НачислятьЗПВодителю1 = Ложь;
	//мОбъектДокументаПЛ.НачислятьЗПВодителю2 = Ложь;
	//мОбъектДокументаПЛ.НачислятьЗПСотруднику1 = Ложь;
	//мОбъектДокументаПЛ.НачислятьЗПСотруднику2 = Ложь;
	
	уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(мОбъектДокументаПЛ, глЗначениеПеременной("глТекущийПользователь"));
	
	мОбъектДокументаПЛ.Водитель1  = пСтруктура.Водитель;
	мОбъектДокументаПЛ.Водитель2  = пСтруктура.Водитель2;
	
	мОбъектДокументаПЛ.Температура = РегистрыСведений.Температуры.ПолучитьТемпературу(пСтруктура.ДатаФормирования);
	
	мМаршрутДобавлен = Ложь;
	Если ЗначениеЗаполнено(пСтруктура.ЦехМаршрут) И ТипЗнч(пСтруктура.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты") Тогда
		Если мОбъектДокументаПЛ.Маршруты.Найти(пСтруктура.ЦехМаршрут,"Маршрут") = Неопределено Тогда
			новСтр = мОбъектДокументаПЛ.Маршруты.Добавить();
			НовСтр.Маршрут = пСтруктура.ЦехМаршрут;
			мМаршрутДобавлен = Истина;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(пСтруктура.ЦехМаршрут) Тогда
		мОбъектДокументаПЛ.ЦехКонтрагента = пСтруктура.ЦехМаршрут;
	Иначе
		мОбъектДокументаПЛ.Комментарий = "АдресПрибытия: " + пСтруктура.Ответственный + " " + пСтруктура.ЦехМаршрут + " " + пСтруктура.МестоОказанияУслуг;
	КонецЕсли;
	
	Если мОбъектДокументаПЛ.Маршруты.Количество() > 0 И мМаршрутДобавлен Тогда
		//время выезда и возврата
		мМинНачало = Дата("00010101") + Мин((пСтруктура.ВремяВыезда - НачалоДня(пСтруктура.ВремяВыезда)), (мОбъектДокументаПЛ.ДатаВыезда - НачалоДня(мОбъектДокументаПЛ.ДатаВыезда))); //	Дата("22220101");
		мМаксОкончание = Дата("00010101") + Макс(пСтруктура.ВремяВозврата - НачалоДня(пСтруктура.ВремяВозврата), (мОбъектДокументаПЛ.ДатаВозвращения - НачалоДня(мОбъектДокументаПЛ.ДатаВозвращения))); //	Дата("00010101");
		Для Каждого мМаршрут Из мОбъектДокументаПЛ.Маршруты Цикл
			Если ЗначениеЗаполнено(мМаршрут.Маршрут) Тогда
				//берем по минимуму выезд и по максимуму возврат
				мМинНачало = Мин(мМинНачало, мМаршрут.Маршрут.Начало);
				мМаксОкончание = Макс(мМаксОкончание, ?(мМаршрут.Маршрут.Окончание > мМаршрут.Маршрут.Начало, мМаршрут.Маршрут.Окончание, мМаршрут.Маршрут.Окончание + (24 * 3600)));
			КонецЕсли;
		КонецЦикла;
		
		мОбъектДокументаПЛ.ДатаВыезда = НачалоДня(мОбъектДокументаПЛ.Дата) + (мМинНачало - НачалоДня(мМинНачало));
		мОбъектДокументаПЛ.ДатаВозвращения = ?(ЗначениеЗаполнено(пСтруктура.ДатаВозврата), НачалоДня(пСтруктура.ДатаВозврата), НачалоДня(мОбъектДокументаПЛ.Дата)) + (?(ЗначениеЗаполнено(пСтруктура.ДатаВозврата) И НачалоДня(пСтруктура.ДатаВозврата) > НачалоДня(пСтруктура.ДатаФормирования) И (мМаксОкончание - НачалоДня(мМинНачало) ) > (24 * 3600), мМаксОкончание - (24 * 3600) - НачалоДня(мМинНачало), мМаксОкончание - НачалоДня(мМинНачало))); //возврат с учетом даты возрата
		
		//сортировка маршрутов:
		мКонтрагентОрганизации = Константы.ксНашаОрганизация.Получить();
		мТаблицаМаршрутов = мОбъектДокументаПЛ.Маршруты.Выгрузить( , "Маршрут");
		мКолонкаВремяЛиния = мТаблицаМаршрутов.Колонки.Добавить("ВремяЛиния");
		Для Каждого мСтрока Из мТаблицаМаршрутов Цикл
			мСтрока.ВремяЛиния = ?(мСтрока.Маршрут.Владелец = мКонтрагентОрганизации, -1, (мСтрока.Маршрут.ВремяВПути - НачалоДня(мСтрока.Маршрут.ВремяВПути)) / 3600);
		КонецЦикла;
		мТаблицаМаршрутов.Сортировать("ВремяЛиния УБЫВ");
		мОбъектДокументаПЛ.Маршруты.Загрузить(мТаблицаМаршрутов);
	Иначе
		мОбъектДокументаПЛ.ДатаВыезда = НачалоДня(мОбъектДокументаПЛ.Дата) + (пСтруктура.ВремяВыезда - НачалоДня(пСтруктура.ВремяВыезда));
		мОбъектДокументаПЛ.ДатаВозвращения = ?(ЗначениеЗаполнено(пСтруктура.ДатаВозврата), НачалоДня(пСтруктура.ДатаВозврата), НачалоДня(пСтруктура.ДатаФормирования)) + (пСтруктура.ВремяВозврата - НачалоДня(пСтруктура.ВремяВозврата)) + ?(ЗначениеЗаполнено(пСтруктура.ДатаВозврата) И (НачалоДня(пСтруктура.ДатаВозврата) > НачалоДня(пСтруктура.ДатаФормирования)), 0, ?(Час(пСтруктура.ВремяВозврата) < Час(пСтруктура.ВремяВыезда), (24 * 3600), 0));
	КонецЕсли;
	
	Если пСтруктура.Свойство("Прицеп") И ЗначениеЗаполнено(пСтруктура.Прицеп) Тогда
		Если мОбъектДокументаПЛ.Прицепы.Найти(пСтруктура.Прицеп, "ТС") = Неопределено Тогда
			НоваяСтрокаПрицеп = мОбъектДокументаПЛ.Прицепы.Добавить();
			НоваяСтрокаПрицеп.ТС = пСтруктура.Прицеп;
			НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(пСтруктура.Прицеп, мОбъектДокументаПЛ.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;
	
	// + Алексей: начало копия процедуры ИнициализацияДанныхАвтомобиля модуля объекта путевого листа
	//		пока доступна только на Клиенте (указана директива Препроцессора), а в режиме управляемого приложения
	//		обратиться к объекту с клиента невозможно... скопировано "нужное" из модуля объекта
	Если мОбъектДокументаПЛ.ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мОбъектДокументаПЛ.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(мОбъектДокументаПЛ.ТранспортноеСредство, мОбъектДокументаПЛ.ДатаВыезда);
	Иначе
		мОбъектДокументаПЛ.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(мОбъектДокументаПЛ.ТранспортноеСредство, мОбъектДокументаПЛ.ДатаВыезда);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мОбъектДокументаПЛ.УсловиеРаботы) Тогда
		мОбъектДокументаПЛ.УсловиеРаботы = мОбъектДокументаПЛ.ТранспортноеСредство.ОсновноеУсловиеРаботы;
	КонецЕсли;
	
	мОбъектДокументаПЛ.ВыдатьГорючее = мОбъектДокументаПЛ.ТранспортноеСредство.Модель.ОсновноеТопливо;
	// - Алексей: конец копия процедуры ИнициализацияДанныхАвтомобиля модуля объекта путевого листа
	
	Если пСтруктура.Свойство("ПозицияПП") И ЗначениеЗаполнено(пСтруктура.ПозицияПП) И Метаданные.Справочники.Найти("ПозицияПроизводсвеннойПрограммы") <> Неопределено Тогда
		мОбъектДокументаПЛ.ПозицияПП = Справочники.ПозицияПроизводсвеннойПрограммы.НайтиПоНаименованию(пСтруктура.ПозицияПП); // в НВДС этого нет
	КонецЕсли;
	
	мОбъектДокументаПЛ.Дата = мОбъектДокументаПЛ.ДатаВыезда;
	мОбъектДокументаПЛ.ДатаВозвращения = Мин(мОбъектДокументаПЛ.ДатаВозвращения, мОбъектДокументаПЛ.ДатаВыезда + (31 * 24 * 3600));
	мОбъектДокументаПЛ.ДействителенДо = КонецДня(мОбъектДокументаПЛ.ДатаВозвращения);
	мОбъектДокументаПЛ.ИдентификаторРазнарядки = пСтруктура.ИдентификаторСтрокиЗаявки;
	Попытка
		мОбъектДокументаПЛ.Записать();
		Сообщить("Записан путевой лист " + мОбъектДокументаПЛ);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат мОбъектДокументаПЛ;
КонецФункции

Функция ПолучитьДанныеПредыдущегоПЛ(пДатаФормирования, пТС, пВтораяСмена) Экспорт
	вСтруктура = Новый Структура("мПредыдущийПЛНайден", Ложь);
	//поиск предыдущего ПЛ с учетом смены:
	мЗапросПредыдущегоПЛ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПутевойЛист.Дата КАК Дата,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Контрагент КАК Контрагент,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ЦехКонтрагента КАК Задание
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Дата < &Дата
	|	И (НЕ уатПутевойЛист.ПометкаУдаления)
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС
	|	И ВЫБОР
	|			КОГДА &ВтораяСмена
	|						И ЧАС(уатПутевойЛист.ДатаВыезда) > 16
	|					ИЛИ &ВтораяСмена
	|						И ЧАС(уатПутевойЛист.ДатаВыезда) <= 4
	|				ТОГДА ИСТИНА
	|			КОГДА НЕ &ВтораяСмена
	|					И ЧАС(уатПутевойЛист.ДатаВыезда) <= 16
	|					И (НЕ &ВтораяСмена
	|						И ЧАС(уатПутевойЛист.ДатаВыезда) > 4)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	мЗапросПредыдущегоПЛ.УстановитьПараметр("Дата", НачалоДня(пДатаФормирования));
	мЗапросПредыдущегоПЛ.УстановитьПараметр("ТС", пТС);
	мЗапросПредыдущегоПЛ.УстановитьПараметр("ВтораяСмена", пВтораяСмена);
	мРезультатПредыдущийПЛ = мЗапросПредыдущегоПЛ.Выполнить().Выбрать();
	мПредыдущийПЛНайден = Ложь;
	Если мРезультатПредыдущийПЛ.Следующий() Тогда
		Если мРезультатПредыдущийПЛ.Ссылка.Прицепы.Количество() > 0 Тогда
			вСтруктура.Вставить("Прицеп", мРезультатПредыдущийПЛ.Ссылка.Прицепы[0].ТС);
		КонецЕсли;
		вСтруктура.мПредыдущийПЛНайден = Истина;
		вСтруктура.Вставить("ДатаВыезда", мРезультатПредыдущийПЛ.ДатаВыезда);
		вСтруктура.Вставить("ДатаВозвращения", мРезультатПредыдущийПЛ.ДатаВозвращения);
		вСтруктура.Вставить("Задание", мРезультатПредыдущийПЛ.Задание);
		вСтруктура.Вставить("Контрагент", мРезультатПредыдущийПЛ.Контрагент);
		вСтруктура.Вставить("Водитель", мРезультатПредыдущийПЛ.Водитель);
	КонецЕсли;
	
	Возврат вСтруктура;
КонецФункции