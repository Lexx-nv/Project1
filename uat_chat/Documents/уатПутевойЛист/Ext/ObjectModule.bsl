////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
Перем ДанныеИзменились Экспорт; // Признак изменения данных документа (экспорт сделан для использования формой объекта).
Перем ПакетнаяОбработкаТиповыхДокументов Экспорт; // Признак пакетной обработки типовых документов.
Перем мСрокиДействияПЛ Экспорт; // Сроки действия путевого листа.
//Каждой Организации соответствует свой срок действия, согласно учетной политике.
Перем мВремяВНаряде Экспорт; // Время в наряде (общее время). Используется для расчета по временным параметрам выработки.
Перем мВремяВРаботе Экспорт; // Время в работе (рабочее). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростое Экспорт; // Время в простое (простои). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростоеСВклДвигателем Экспорт; // Время в простое с вкл. двигателем (простои).
Перем мВремяНочь Экспорт; // Время ночное. Используется для доп. начислений за ночную выработку.
Перем мПробегОбщий Экспорт; // Общий пробег
Перем мКоличествоДней Экспорт; // Количество дней по путевому листу

Перем мТаблицаПоСписаниюГСМ;

Перем мКопированиеДокумента Экспорт; //флаг копирования - сбрасывается после открытия формы документа.
Перем мЭтоПривлеченныйТС;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ИТОГОВ ПО ДОКУМЕНТУ

// Функция возвращает все параметры выработки с произвольным расчетом
//
Функция ПолучитьПараметрыВыработкиСПроизвольнымРасчетом ()
	
	//параметры выработки с произвольным расчетом
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаданию)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоШапке)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоТТД)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

//Функция рассчитывает итоги работы по пут. листу
Функция РасчетИтогов(Отказ, ТабличноеПолеВыработкаТС = Неопределено, ТабличноеПолеВыработкаСотрудников = Неопределено, флЗаписывать = Истина) Экспорт 
	Заголовок = "Ошибки при расчете итогов работы по путевому листу №" + Номер + " :";
	
	ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ);
	
	Если Не Отказ Тогда
		
		РасчетВыработкиТС(Отказ);
		РасчетВыработкиСотрудников(Отказ);
		РасчетРасходаГСМ(Заголовок, Отказ);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетНормативногоРасходаТехЖидкостей) тогда
			РасчетРасходаТЖ(Заголовок, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Рассчитан1 = Не Отказ;
	Если НЕ Рассчитан1 Тогда
		Сообщить("Документ <" + ЭтотОбъект + ">: не был рассчитан.", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если флЗаписывать И (НЕ Отказ) Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат Рассчитан1;
КонецФункции //РасчетИтогов()

//Процедура проверяет корретность заполнения ПЛ перед расчетом итогов по документу
Процедура ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ)
	Отказ = Ложь;
	
	СтруктураПолей = Новый Структура("ТранспортноеСредство,  ДатаВыезда, ДатаВозвращения");
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСредство.Модель) Тогда
		Сообщить("Для ТС не указана модель!", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения_проф.уатПроверкаКорректностиПЛ(Организация, ЭтотОбъект, Отказ);
КонецПроцедуры

// РАСЧЕТ ВЫРАБОТКИ ТС и ОБОРУДОВАНИЯ
Процедура ОтразитьПробег(Отказ)
	
	Рег = Движения.уатВыработкаТС;
	Рег.Записывать = Истина;
	
	Зап = Рег.Добавить();
	Зап.Период = Дата;
	Зап.Организация = Организация;
	Зап.ТС = ТранспортноеСредство;
	Зап.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
	пПрб=Макс(0,СпидометрВозвращения-СпидометрВыезда);
	Если пПрб=0 ТОгда
		нс = РасходГСМ.Найти(Справочники.ОборудованиеРаботыГСМ.ДвигательМЧ,"ОБорудованиеРабота");
		Если нс<>Неопределено ТОгда
			пПрб= нс.Пробег;
		КонецЕслИ;
	КонецЕСЛИ;
	Зап.Количество = пПрб;
	Зап.КоличествоЧасовНаЗаказчика = ВсегоЧасов;
	
	Для каждого стр из Прицепы Цикл
		
		пТип = Стр.ТС.ТипТС.Родитель;
		Если ЗначениеЗаполнено(пТип) = Ложь Тогда
			пТип = Стр.ТС.ТипТС;	
		КонецеСЛИ;
		
		Если  пТип <> Справочники.уатТипыТС.Прицепы 
			и пТип <> Справочники.уатТипыТС.ПолуПрицепы Тогда Продолжить; КонецеСЛИ;
		
		Зап = Рег.Добавить();
		Зап.Период = Дата;
		Зап.Организация = Организация;
		Зап.ТС = Стр.ТС;
		Зап.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
		Зап.Количество = Макс(0,СпидометрВозвращения-СпидометрВыезда);
		
	КонецЦикла;
	
		
КонецПроцедуры


Процедура ОтразитьСчетчики(Отказ)
	
	Рег = Движения.уатСчетчикиТС;
	Рег.Очистить();
	
	Если ПометкаУдаления=Ложь 
		и ( СпидометрВозвращения<>0
		или ОстатокТопливаВыезд<>0 
		или ОстатокТопливаВыезд1<>0 
		или ОстатокТопливаВозврат<>0 
		или ОстатокТопливаВозврат1<>0) Тогда
		
		Зап = Рег.Добавить();
		
		Зап.Период = ДатаВыезда;
		Зап.ТС 					   = ТранспортноеСредство;
		Зап.Значение               = СпидометрВозвращения; 
		Зап.ОстатокТопливаВозврат  = ОстатокТопливаВозврат;
		Зап.ОстатокТопливаВозврат1 = ОстатокТопливаВозврат1;
		Зап.ОстатокТопливаВыезд    = ОстатокТопливаВыезд;
		Зап.ОстатокТопливаВыезд1   = ОстатокТопливаВыезд1;
		
	КонецесЛИ;
	
	Рег.Записать();
		
КонецПроцедуры

Процедура ОтразитьРаботу(отказ)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |    уатПЛ.Ссылка.Дата Период,
				   |    &ДтВоз ДатаОкончания,
				   |    Значение(ВидДвиженияНакопления.Приход) ВидДвижения,
	               |	уатПЛ.Ссылка ПутевойЛист,
				   |	уатПЛ.КоличествоЧасов,
				   |	уатПЛ.Ссылка.ТранспортноеСредство ТС,
	               |	уатПЛ.КоличествоКмПорожний Пробег,
				   |    уатПЛ.КоличествоКмГруз * КоличествоЕздок  ПробегСГрузом,
				   |	уатПЛ.Объем,
				   |	уатПЛ.КоличествоТонн Тонны,
				   |	уатПЛ.КоличествоТонн * уатПЛ.КоличествоКмГруз ТнКм,
				   |	уатПЛ.КоличествоЕздок Ездки,
				   |	уатПЛ.ГруппаДорог,
				   |	CASE WHEN уатПЛ.Реестр = Значение(Документ.РеестрНаПеревозку.ПустаяСсылка) THEN уатПЛ.Номенклатура.ГРуз ELSE уатПЛ.Груз END Груз,
				   |	уатПЛ.Реестр,
				   |	уатПЛ.Прейскурант,
				   
				   |    уатПЛ.КоличествоКмСпец5 Как ПробегОбщий,
				   
				   
				   |	Услуга0*Тариф Сумма,
				   |	0 Услуга1,
				   |	0 Сумма1,
				   |	0 Услуга2,
				   |	0 Сумма2,
				   |	0 Услуга3,
				   |	0 Сумма3,
				   |	0 Услуга4,
				   |	0 Сумма4,
 
	               |	уатПЛ.Номенклатура,
	               |	уатПЛ.Подразделение,
	               |	уатПЛ.ОбъектСтроительства Объект,
				   |    Неопределено Контрагент,
				   |    Неопределено ЦехКонтрагента,
				   |    уатПЛ.ИдСтроки,
				   |    0 Талон
				   |    
				   |ИЗ
				   |	Документ.уатПутевойЛист.Работа КАК уатПЛ
				   |ГДЕ
				   |	уатПЛ.Ссылка = &сс
				   |
				   |
				   |";
				   Запрос.УстановитьПараметр("сс",ссылка);
				   Если ДатаВозвращения - ДатаВыезда > 25 * 3600 Тогда
					   Запрос.УстановитьПараметр("ДтВоз",ДатаВозвращения);
				   ИНаче
					   Запрос.УстановитьПараметр("ДтВоз",Дата);
				   КонецЕСЛИ;
				   
				   
				Движения.РаботаТС.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура ОтразитьВыработку(отказ)
	
	Если ЗначениеЗаполнено(ДатаЗакрытия)=Ложь Тогда
		ДатаЗакрытия = КонецДня(Константы.ксПериодЗакрытияРеестров.Получить())+1;
	КонецЕСЛИ;
	
	Рег = Движения.РаботаТС;
	Рег.Записывать = Истина;
	
	ПровестиБезСуммы  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПровестиБезСуммы);
	Услуга2Вуслуга1  = Ложь;//уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.Услуга2Вуслуга1);

	
	Для каждого стр из Задание Цикл
		
		Если Стр.КоличествоЧасов=0 Тогда
			Сообщить("В строке "+(Задание.Индекс(Стр)+1)+" не указано количество часов!");	
			Отказ = Истина;
		КонецеСЛИ;
		
		//Если Стр.Контрагент.БезВыработки ТОгда ПродолжитЬ; КонецеСЛИ;
		еСЛИ Стр.Услуга1=0 и Стр.Услуга2=0 и Стр.Услуга3=0 и Стр.Услуга4=0 и Стр.Услуга5=0 и Стр.Услуга6=0 и Стр.КоличествоЧасов=0 Тогда Продолжить; КонецЕСЛИ;
		
		Зап = Рег.Добавить();
		Зап.Период = Дата;
		Если ДатаВозвращения - ДатаВыезда > 25 * 3600 Тогда
			Зап.ДатаОкончания = ДатаВозвращения;
		ИНаче
			Зап.ДатаОкончания = Дата;
		КонецЕСЛИ;
		
		Зап.Контрагент = Стр.Контрагент;
		Зап.ЦехКонтрагента = Стр.ЦехКонтрагента;
		Зап.ПутевойЛист = Ссылка;
		Зап.Номенклатура = Стр.Номенклатура;
		Зап.ИдСтроки = Стр.ИдСтроки;
		
		Зап.ГруппаДорог = Стр.ГруппаДорог;
		Зап.Груз = Стр.Номенклатура.ГРуз;
		Зап.Реестр = Стр.Реестр;
		Зап.Прейскурант = Стр.Прейскурант;
		Зап.ТС = ТранспортноеСредство;
		Зап.Пробег = Стр.КоличествоКмПорожний;
		
		Зап.ПробегСГрузом = Стр.КоличествоКмГруз * Стр.КоличествоЕздок;
		Зап.Тонны =	Стр.КоличествоТонн;
		Зап.ТнКм  = Стр.КоличествоТонн * Стр.КоличествоКмГруз;
		//Зап.Ездки = Стр.КоличествоЕздок;
		
		Зап.ПробегОбщий = Стр.КоличествоКмСпец5;
		
		Зап.Талон = 1;
		Зап.КоличествоЧасов = Стр.КоличествоЧасов;
		
		Зап.Сумма = Стр.Цена * Стр.КоличествоЧасов + Стр.ЦенаКм * Стр.КоличествоКмПорожний;
		
		ЕстьСумма=Ложь;
		Для а=1 по 6 Цикл
			
			Если  Стр["Услуга"+а]=0 Тогда ПродолжиТЬ; КонецеСли;
			
			Зап["Услуга"+а] = Стр["Услуга"+а];
			Зап["Сумма"+а]  = Стр["Услуга"+а]*Стр["Тариф"+а];
			Если Зап["Сумма"+а]=0 Тогда 
				//Если ПровестиБезСуммы=Ложь Тогда
				//	Сообщить("Нулевая сумма в строке задания - "+(Задание.Индекс(Стр)+1)+" колонка - "+а);
				//	Отказ = Истина;
				//КонецЕСЛИ;
			Иначе
				ЕстьСумма = Истина;
			КонецЕСЛИ;
		КонецЦикла;
		
		Если Зап.Сумма=0 
			и ПровестиБезСуммы=Ложь 
			и ЕстьСумма = Ложь      Тогда
			
			Сообщить("Нулевая сумма в строке задания - "+(Задание.Индекс(Стр)+1)+" Автоуслуги! ");
			Отказ = Истина;
		КонецЕСЛИ;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОтразитьРаботуВодителей(Отказ)
	
	Если мЭтоПривлеченныйТС ТОгда Возврат; КонецеСЛИ;
	
	
	Запрос = Новый Запрос;
	
	// ИНдекс участия 	0 - Все
	//					1 - Разрыв
	//					2 - Сдельная оплата
	//					3 - повременная
	
	
		Запрос.Текст = "ВЫБРАТЬ
					|	уатПутевойЛистЗадание.Контрагент,
					|	уатПутевойЛистЗадание.ЦехКонтрагента,
					|	уатПутевойЛистЗадание.Номенклатура,
					|	CASE WHEN уатПутевойЛистЗадание.Месторождение = Значение(Справочник.Месторождения.ПустаяССылка) 
					|        THEN уатПутевойЛистЗадание.ЦехКонтрагента.Месторождение ELSE уатПутевойЛистЗадание.Месторождение END Месторождение,
					|	уатПутевойЛистЗадание.КоличествоЧасов  КоэфЧс,
					|	уатПутевойЛистЗадание.КоличествоЧасов  КоэфПв,
					|	уатПутевойЛистЗадание.Услуга3 КоэфРз,
					|	уатПутевойЛистЗадание.КоличествоЧасов  КоэфСд
				   |
					|INTO ВРТбл0
					|ИЗ
					|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
					|ГДЕ ССылка = &Сс
					|
				   | ;
				   |
				   |SELECT
				   |  Т1.Контрагент,
				   |  Т1.ЦехКонтрагента,
				   |  Т1.Номенклатура,
				   |  Т1.Месторождение,
				   |  CASE WHEN итЧс=0 THEN 1 ELSE SUM(Т1.коэфЧс)/итЧс END КоэфЧс,
				   |  CASE WHEN итРз=0 THEN 1 ELSE SUM(Т1.КоэфРз)/итРз END КоэфРз,
				   |  CASE WHEN итСд=0 THEN 1 ELSE SUM(Т1.КоэфСд)/итСд END КоэфСд,
				   |  CASE WHEN итПв=0 THEN 1 ELSE SUM(Т1.КоэфПв)/итПв END КоэфПв,
				   |  SUM(Т1.КоэфСд) ФактЧасовПоСделке
				   |  
				   |INTO ВРТбл
				   |FROM ВРТбл0 Т1
				   |INNER JOIN (SELECT SUM(КоэфЧС) итЧс, SUM(КоэфРз) итРз, SUM(КоэфСд) итСд, SUM(КоэфПв) итПв FROM ВРТбл0 Т2) Т3 ON TRUE
				   |GROUP BY
				   |  		Т1.Контрагент,
				   |  		Т1.ЦехКонтрагента,
				   |  		Т1.Номенклатура,
				   |  		Т1.Месторождение,
				   |  		итЧс,
				   |  		итРз,
				   |  		итСд,
				   |  		итПв
				   |  ;
				   | ///////////////////////////////////////////////////////////
				   |
				   //Тарифы
				   | SELECT
				   |  Док.СОтрудник Сотр,
				   |  ISNULL(тбСОтр.ЭтоОклад,Ложь) ЭтоОклад,
				   |  CASE WHEN тбСОтр.Тариф IS NULL и  тбПрц.Линия IS NOT NULL THEN TRUE ELSE FALSE END ЭтоТарифПрицепа,
				   |  ISNULL ( ISNULL ( ISNULL ( ISNULL(
				   |               тбСОтр.Тариф,
				   |               тбПрц.Линия),
				   |               CASE WHEN тбТС.ЛинияПов = 0 THEN тбТС.Линия
				   |               ELSE тбТС.Линия *(1 - ISNULL(тбКадр.Должность.ПовТариф,0))+тбТС.ЛинияПов* ISNULL(тбКадр.Должность.ПовТариф,0) END),
				   |               CASE WHEN тбМод.ЛинияПов = 0 THEN тбМод.Линия
				   |               ELSE тбМод.Линия*(1 - ISNULL(тбКадр.Должность.ПовТариф,0))+тбМод.ЛинияПов*ISNULL(тбКадр.Должность.ПовТариф,0) END),
				   |               0) Линия,
				   |  ISNULL (ISNULL (тбТС.Разрыв,тбМод.Разрыв),0) Разрыв,
				   |  ISNULL (ISNULL (тбТС.Ремонт,тбМод.Ремонт),0) Ремонт
				   | INTO врТрф
				   | FROM (SELECT DISTINCT Сотрудник FROM Документ.уатПутевойЛист.ФактическиОтработанноеВремя Т WHERE Т.Ссылка = &Сс )  Док
				   | LEFT OUTER JOIN РегистрСведений.ТарифыТСнаЗП.СрезПоследних(&Дт,Модель = &ТС) тбТС ON Истина
				   | LEFT OUTER JOIN РегистрСведений.ТарифыТСнаЗП.СрезПоследних(&Дт,Модель = &Мод) тбМод ON Истина
				   | LEFT OUTER JOIN РегистрСведений.ТарифыТСнаЗП.СрезПоследних(&Дт,Модель = &Прц) тбПрц ON тбПрц.Линия <> 0
				   | LEFT OUTER JOIN РегистрСведений.уатТарифыСотрудников.СрезПоследних(&Дт,Сотрудник в (&МасСотр) ) тбСотр ON тбСотр.Сотрудник = Док.Сотрудник и тбСОтр.Тариф <> 0
				   | LEFT OUTER JOIN РегистрСведений.уатСведенияОСотрудниках.СрезПоследних(&Дт,Сотрудник в (&МасСотр) ) тбКадр ON тбКадр.Сотрудник = Док.Сотрудник
				   |
				   | ;
				   |
				   //Повременная
				   //|SELECT
				   //|	Дата,
				   //|    Сотрудник,
				   //|	Период,
				   //|    ВремяДневное Количество,
				   //|	тбВР.Ссылка ВидРасчета,
				   //|	тбВР.КоэфНачисления * тбТрф.Линия Тариф,
				   //|	тбТрф.Линия БазТариф,
				   //|    NULL Месторождение,
				   //|    3 ИндЧасов
				   //|INTO врЗП
				   //|ИЗ
				   //|	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   //|INNER JOIN ВРТрф тбТрф ON  тбТрф.Сотр = уатФОВ.Сотрудник OR тбТрф.Сотр IS NULL
				   //|INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ОплатаПоЧасовомуТарифу)
				   //|WHERE  ВремяДневное <> 0  AND уатФОВ.ССылка = &сс
				   
				   //пропишу гавно для сделки, ради 6 пут.листов  КАТЕГОРИЧЕСКИ НЕЛЬЗЯ использовать дальше. после марта удалить!
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	Период,
				   |    ВремяДневное Количество,
	               |	CASE WHEN уатПутевойЛистЗадание.Номенклатура IS NULL THEN тбВР.Ссылка ELSE  уатПутевойЛистЗадание.Номенклатура.ВидОплаты END ВидРасчета,
	               |	CASE WHEN уатПутевойЛистЗадание.Номенклатура IS NULL THEN тбВР.КоэфНачисления * тбТрф.Линия ELSE уатПутевойЛистЗадание.Номенклатура.ПараметрДляСпособа * Услуга1+Услуга2 END Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    CASE WHEN уатПутевойЛистЗадание.Номенклатура IS NULL THEN 3 ELSE 7 END ИндЧасов
				   |
				   |INTO врЗП
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON  тбТрф.Сотр = уатФОВ.Сотрудник OR тбТрф.Сотр IS NULL
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ОплатаПоЧасовомуТарифу)
				   |LEFT OUTER JOIN  Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание ON уатПутевойЛистЗадание.ССылка = &Сс   
				   |																	  and уатПутевойЛистЗадание.номерстроки = 1
                   |                                                                      and уатПутевойЛистЗадание.Номенклатура.ЭтоСдельнаяРабота = Истина
				   |                                                                      and Услуга1+Услуга2 > 100
				   |WHERE  ВремяДневное <> 0  AND уатФОВ.ССылка = &сс
				   //пропишу гавно для сделки, ради 6 пут.листов  КАТЕГОРИЧЕСКИ НЕЛЬЗЯ использовать дальше. после марта удалить!
				   
				   
				   |
				   |
				   |
				   |
				   |UNION ALL
				   |
				   //Сдельная
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	Период,
				   |    ВремяСделка Количество,
	               |	тбВР.Ссылка ВидРасчета,
	//               |	0 Тариф,
	               |	тбВР.КоэфНачисления * тбТрф.Линия Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.СдельнаяОплата)
				   |WHERE  ВремяСделка <> 0  AND уатФОВ.ССылка = &сс
				   |
				   |UNION ALL
				   |
				   //Доплаты на ТС
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	уатФОВ.Период,
				   |    ВремяСделка+ВремяДневное Количество,
	               |	тбРег.ВидРАсчета ВидРасчета,
	               |	тбТрф.Линия*тбРег.Процент/100 + тбРег.Сумма Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN РегистрСведений.ДоплатыПОТС.СрезПоследних(&Дт,ТС в (&ТС,&прц)) тбРег ON (тбРег.Процент<>0 или тбРег.Сумма<>0)
				   |                                                                          и (тбРег.Номенклатура в (SELECT DISTINCT  
				   |                                                                                                        Номенклатура
				   |                                                                                                     FROM врТбл Т) 
				   |                                                                             OR тбРег.Номенклатура = Значение(Справочник.Номенклатура.ПустаяССылка))
				   |
				   |WHERE  ВремяСделка+ВремяДневное <> 0  AND уатФОВ.ССылка = &сс
				   |
				   |UNION ALL
				   |
				   |
				   //Доплаты на сотрудника от разряда (кадровая история)
				   |SELECT
	               |	уатФОВ.Дата,
				   |    уатФОВ.Сотрудник,
	               |	уатФОВ.Период,
				   |    ВремяСделка+ВремяДневное Количество,
	               |	тбРег.ВидРАсчета ВидРасчета,
	               |	тбТрф.Линия*тбРег.ВидРАсчета.КоэфНачисления Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN РегистрСведений.уатСведенияОСотрудниках.СрезПоследних(&Дт,Сотрудник в (&МасСотр) ) тбРег ON уатФОВ.Сотрудник = тбРег.Сотрудник и тбРег.ВидРАсчета<>Значение(ПланВидовРасчета.уатОсновныеНачисления.ПустаяСсылка)
				   |WHERE  ВремяСделка+ВремяДневное <> 0 AND уатФОВ.ССылка = &сс
				   |
				   |UNION ALL
				   |
				   //ПЗО
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	НачалоПериода(Дата,МЕсяц) Период,
				   |    тбВР.Норма*3600 Количество,
	               |	тбВР.Ссылка ВидРасчета,
	               |	тбВР.КоэфНачисления * тбТрф.Линия Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	(SELECT Сотрудник,CASE WHEN &ПЗОкаждыйДень THEN уатФОВ.Дата ELSE Ссылка.Дата END Дата, SUM(ВремяДневное+ВремяСделка+ВремяРемонт) ВремяСделка 
				   |	 FROM Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ 
				   |	 WHERE  ВремяДневное+ВремяСделка+ВремяРемонт <> 0  AND уатФОВ.ССылка = &сс
				   |     GROUP BY Сотрудник,CASE WHEN &ПЗОкаждыйДень THEN уатФОВ.Дата ELSE Ссылка.Дата END 
				   |	  ) уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ПЗО) и тбВР.Норма<>0
				   |WHERE ВремяСделка > тбВР.Норма*3600
				   |
				   |UNION ALL
				   |
				   //Вахтовые
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	НачалоПериода(Дата,МЕсяц) Период,
				   |    3600 Количество,
	               |	СпрГрф.ВидРасчета,
	               |	CASE WHEN ISNULL(СпрГрфМст.Надбавка,0) = 0 
				   |         THEN СпрГрф.Надбавка
				   |         ELSE СпрГрфМст.Надбавка END  Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    СпрГрфМст.Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	(SELECT Сотрудник,уатФОВ.Дата, SUM(ВремяДневное+ВремяСделка+ВремяРемонт) ВремяСделка 
				   |	 FROM Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ 
				   |	 WHERE  ВремяДневное+ВремяСделка+ВремяРемонт <> 0  AND уатФОВ.ССылка = &сс
				   |     GROUP BY Сотрудник,уатФОВ.Дата 
				   |	  ) уатФОВ
				   |
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |
				   |LEFT OUTER JOIN Документ.уатПутевойЛист.Задание тбЗад  ON тбЗад.Ссылка = &сс 
				   |														и тбЗад.НомерСтроки = &НомОсновнойСтроки 
				   |
				   |LEFT OUTER JOIN РегистрСведений.СведенияОГрафиках.СрезПоследних(&Дт,ФизЛицо в (&ФизЛицо1,&ФизЛицо2)) тбВхт ON тбВхт.Физлицо = уатФОВ.Сотрудник.ФизЛицо
				   |                                                                                                            
				   |INNER JOIN Справочник.уатГрафикиРаботы СпрГрф ON СпрГрф.ССылка = тбВхт.ГрафикРаботы                                                                                                              
				   |                                              OR (тбВхт.ГрафикРаботы IS NULL AND СпрГрф.ССылка = Значение(Справочник.уатГрафикиРаботы.Основной))                      
				   |                                                                     
				   |LEFT OUTER JOIN Справочник.уатГрафикиРаботы.Месторождения СпрГрфМст ON СпрГрф.ССылка = СпрГрфМст.ССылка                                                                                                            
				   |                                                                  и  (СпрГрфМст.Месторождение = тбЗад.МЕсторождение  
				   |                                                                    или
				   |                             										 (СпрГрфМст.Месторождение = тбЗад.ЦехКонтрагента.Месторождение и тбЗад.МЕсторождение = Значение(Справочник.Месторождения.ПустаяСсылка) )  
				   |                                                                     )
				   |WHERE ISNULL(СпрГрфМст.Надбавка,0) + СпрГрф.Надбавка <> 0
				   |
				   |UNION ALL
				   |
				   //От реквизита в ПЛ (буксировка)
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	уатФОВ.Период,
				   |    ВремяСделка+ВремяДневное Количество,
	               |	тбРег.ВидРасчета ВидРасчета,
	               |	тбТрф.Линия*тбРег.Процент Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
	               |INNER JOIN (SELECT 	 
				   |             	тбВР.Ссылка ВидРасчета,
				   |             	тбВР.РеквизитВПЛ,
				   |             	тбВР.КоэфНачисления Процент
				   |
				   |             FROM  (SELECT Ссылка,
				   |            			   SUM(КоличествоКмГруз*КоличествоТонн)  буксировка 
				   |	 		 		FROM Документ.уатПутевойЛист.Задание КАК уатЗад 
				   |	 		 		WHERE  уатЗад.ССылка = &сс
				   |     		 		GROUP BY Ссылка 
				   |	 		 		) тбРекПЛ 
				   |			INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.РеквизитВПЛ <> Значение(Перечисление.РеквизитыВПЛ.ПустаяСсылка) 
				   |			WHERE CASE WHEN тбВР.РеквизитВПЛ = Значение(Перечисление.РеквизитыВПЛ.Буксировка) THEN тбРекПЛ.Буксировка
				   |           				ELSE 0 END <> 0
				   |
				                          //если тариф взят у прицепа, то за буксировку не доплачиваем
				   |           ) тбРег ON CASE WHEN тбРег.РеквизитВПЛ = Значение(Перечисление.РеквизитыВПЛ.Буксировка) THEN  тбТрф.ЭтоТарифПрицепа 
				   |                           ELSE FALSE END = FALSE
				   
				   
				   |LEFT OUTER JOIN РегистрСведений.ДоплатыПОТС.СрезПоследних(&Дт,ТС в (&прц)) тбРегДоп ON  тбРегДоп.ВидРасчета = тбРег.ВидРасчета
				   
				   |
				   
				   |WHERE  уатФОВ.ССылка = &сс
				   |    и ВремяСделка+ВремяДневное <> 0
				   //как-то так не платим за буксировку если уже заплатили за прицеп (переписать)
				   |    и тбРегДоп.ВидРасчета IS NULL 
				   |
				   |UNION ALL
				   |
				   //Разрыв
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	Период,
				   |    ВремяРазрыв Количество,
	               |	тбВР.Ссылка ВидРасчета,
	               |	тбВР.КоэфНачисления * тбТрф.Разрыв Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    1 ИндЧасов
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ОплатаРазрыв)
				   |WHERE  ВремяРазрыв <> 0  AND уатФОВ.ССылка = &сс
				   |
				   |UNION ALL
				   |
				   //Ночные
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	Период,
				   |    ВремяНочное Количество,
	               |	тбВР.Ссылка ВидРасчета,
	               |	тбВР.КоэфНачисления * тбТрф.Линия Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
				   |ИЗ
				   |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ДоплатаЗаНочныеЧасы)
				   |WHERE  ВремяНочное <> 0  AND уатФОВ.ССылка = &сс
				   |
				   |UNION ALL
				   |
				   //ПРаздничные
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	Период,
				   |    ВремяПраздничное Количество,
	               |	тбВР.Ссылка ВидРасчета,
	               |	тбВР.КоэфНачисления * тбТрф.Линия Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ДоплатаЗаПраздничныеИВыходные)
				   |WHERE  ВремяПраздничное <> 0  AND уатФОВ.ССылка = &сс
				   |
				   |UNION ALL
				   |
				   //Ремонт
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	Период,
				   |    ВремяРемонт Количество,
	               |	тбВР.Ссылка ВидРасчета,
	               |	тбВР.КоэфНачисления * тбТрф.Ремонт Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
	               |ИЗ
	               |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт)
				   |WHERE  ВремяРемонт <> 0  AND уатФОВ.ССылка = &сс
				   |
				   |UNION ALL
				   |
				   //Простой
				   |SELECT
	               |	Дата,
				   |    Сотрудник,
	               |	Период,
				   |    ВремяПростой Количество,
	               |	тбВР.Ссылка ВидРасчета,
	               |	тбВР.КоэфНачисления * тбТрф.Линия Тариф,
	               |	тбТрф.Линия БазТариф,
				   |    NULL Месторождение,
				   |    0 ИндЧасов
				   |ИЗ
				   |	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатФОВ
				   |INNER JOIN ВРТрф тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = уатФОВ.Сотрудник
				   |INNER JOIN ПланВидовРасчета.уатОсновныеНачисления тбВР ON тбВР.Ссылка = Значение(ПланВидовРасчета.уатОсновныеНачисления.ОплатаЗаПростой)
				   |WHERE  ВремяПростой <> 0  AND уатФОВ.Ссылка = &сс
				   |
				   |;
				   | SELECT
				   | &Дт Период,
				   | ТблЗП.Сотрудник Водитель,
				   | ТблЗП.ВидРасчета,
				   | НачалоПериода(ТблЗП.Период,МЕсяц) ПериодРаботы,
				   | ТблЗП.Дата ДатаРаботы,
				   | &ТС ТС,
				   | ТБлЗП.Количество/3600 итКол,
				   | CASE WHEN ИндЧасов = 7 THEN ТблЗП.Тариф ELSE
				   | ВЫразить(ТблЗП.Количество/3600 * ТблЗП.Тариф как Число(10,2)) END итСум,
				   | ТблЗП.БазТариф Тариф,
				   |
				   |
				   | CASE WHEN тбТрф.ЭтоОклад=Ложь и тбТрф.Линия=0 ТОгда 1 ELSE 0 END Ошибка,
				   |
				   | ТблКА.Контрагент,
				   | ТблКА.ЦехКонтрагента,
				   | ТблКА.Номенклатура,
				   | ТблКА.Месторождение,
				   
				   | CASE WHEN ТблЗП.ВидРасчета = Значение(ПланВидовРасчета.уатОсновныеНачисления.СдельнаяОплата) THEN
				   |      ВЫразить(ТблКА.ФактЧасовПоСделке как Число(10,3)) ELSE 0 END ФактЧасовПоСделке,
				   
				   | ВЫразить(ТБлЗП.Количество/3600 * ISNULL(CASE  
			   		|										WHEN ИндЧасов = 1 THEN ТблКА.КоэфРз 
					|										WHEN ИндЧасов = 2 THEN ТблКА.КоэфСд
					|										WHEN ИндЧасов = 3 THEN ТблКА.КоэфПв
					|								        ELSE ТблКА.КоэфЧс 
					|								    END ,1) как Число(10,3)) Количество,
				   | ВЫразить(ТблЗП.Количество/3600 * ТблЗП.Тариф *  ISNULL(CASE 
			   		|										WHEN ИндЧасов = 1 THEN ТблКА.КоэфРз 
					|										WHEN ИндЧасов = 2 THEN ТблКА.КоэфСд
					|										WHEN ИндЧасов = 3 THEN ТблКА.КоэфПв
					|								        ELSE ТблКА.КоэфЧс 
				   |								    END ,1) как Число(10,2)) Сумма
				   |
				   |FROM ВРЗП как тблЗП
				   |LEFT OUTER JOIN ВРТбл как тблКА ON 
				   |       						CASE 
			   		|								WHEN ИндЧасов = 1 THEN ТблКА.КоэфРз 
					|								WHEN ИндЧасов = 2 THEN ТблКА.КоэфСд
					|								WHEN ИндЧасов = 3 THEN ТблКА.КоэфПв
					|								ELSE ТблКА.КоэфЧс 
				   |        					END <> 0
				   |                          и (тблЗП.МЕсторождение IS NULL or тблЗП.МЕсторождение = ТблКА.Месторождение)
				   |
				   |
				   |
				   |INNER JOIN ВРТрф как тбТрф ON тбТрф.Сотр IS NULL OR тбТрф.Сотр = ТблЗП.Сотрудник
				   |";
				   
				   Запрос.УстановитьПараметр("сс",Ссылка);
				   Запрос.УстановитьПараметр("ФизЛицо1",Водитель1.ФизЛицо);
				   Запрос.УстановитьПараметр("ФизЛицо2",Водитель2.ФизЛицо);
				   Запрос.УстановитьПараметр("сс",Ссылка);
				   Запрос.УстановитьПараметр("Дт",Дата);
				   Запрос.УстановитьПараметр("ТС",ТранспортноеСредство);
				   Запрос.УстановитьПараметр("Мод",ТранспортноеСредство.Модель);
				   Запрос.УстановитьПараметр("МасСотр",ФактическиОтработанноеВремя.ВыгрузитьКолонку("Сотрудник"));
				   Если Прицепы.Количество()=0 Тогда
					   Запрос.УстановитьПараметр("прц",Справочники.уатТС.ПустаяСсылка());
				   ИНаче
					   Запрос.УстановитьПараметр("прц",Прицепы[0].ТС);
				   КонецЕСлИ;
				   Запрос.УстановитьПараметр("ПЗОкаждыйДень",уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПЗОкаждыйДень)); 

				   //Номер строки макс часами (основная Работа)
				   п = 0;
				   НомСтроки = 1;
				   Для каждого Стр из Задание Цикл
					   Если п<Стр.КоличествоЧасов ТОгда
						   п = Стр.КоличествоЧасов;
						   НомСтроки = Стр.НомерСтроки;
					   КонецесЛИ;
				   КонецЦикла;
				   Запрос.УстановитьПараметр("НомОсновнойСтроки",НомСтроки);
				   //--
				   
				   
				   Тбл = Запрос.Выполнить().Выгрузить();
				   
				   Если ТБл.Итог("ОШибка")<>0 ТОгда
				   	ОТказ=Истина;
				   	пТ = Тбл.Скопировать();
				   	пТ.Свернуть("Водитель","Ошибка");
				   	ДЛя каждого с из пТ Цикл
				    	   Если с.ошибка<>0 ТОгда
				    	   Сообщить("Нет тарифа по "+с.Водитель);
				    	   КонецЕсли;
				   	КонецЦикла;
				   	Возврат;
				   КонецЕСЛИ;
				   
				   
				   Т = Тбл.Скопировать();
				   Т.свернуть("Период,Водитель,ВидРасчета,ПериодРаботы,ДатаРаботы,итсум,итКол","Сумма,Количество");
				   Для каждого с из Т Цикл
				   	Если с.Количество <> с.итКол или с.сумма <> с.итСУм Тогда
				    		Мас = Тбл.НайтиСтроки(Новый Структура("Период,Водитель,ВидРасчета,ПериодРаботы,ДатаРаботы",С.Период,С.Водитель,С.ВидРасчета,С.ПериодРаботы,С.ДатаРаботы));	   
				    		Мас[0].Количество = Мас[0].Количество +  (С.итКол - С.Количество);
				    		Мас[0].Сумма      = Мас[0].Сумма      +  (С.итСум - С.Сумма);
				   	КонецЕСЛИ;
				   КонецЦикла;
				   
				   Рег = Движения.РаботаВодителей;
				   Рег.Записывать = Истина;
				   Рег.Загрузить(Тбл);
			   
	
КонецПроцедуры

//Процедура рассчитывает выработку ТС
//
Процедура РасчетВыработкиТС(Отказ) Экспорт
	
	Если НеПересчитыватьЗадание Тогда Возврат; КонецЕСЛИ;
	
	Тбл = глОбщий.РасчетПРейскуранта(ССылка);	
	
	Рассчитан = Истина;
	Для каждого Стр из Задание Цикл
		
		//	Стр.Услуга4 = Макс(0,Стр.КоличествоКмПорожний - (Стр.Услуга1+Стр.Услуга3-Стр.Услуга2) * 15);
		
		Мас = Тбл.НайтиСтроки(Новый Структура("ИдСтроки,Контрагент",Стр.ИдСтроки,Стр.Контрагент));
		Если Мас.Количество()=0 ТОгда Продолжить; КонецеСЛИ;
		
		Стр.Прейскурант = Мас[0].ПРейскурант;
		Стр.Цена = Мас[0].Тариф;
		Стр.ЦенаКМ = Мас[0].ТарифКм;
		
		пРассчитан = Стр.Цена <> 0;
		Для а=1 по 6 Цикл
			Стр["Тариф"+а] = Мас[0]["Тариф"+а];
			Если  Стр["Тариф"+а]<>0 тогда
				пРассчитан = истина;	
			КонецЕслИ;
		КонецЦикла;
		
		Если пРассчитан = ложь Тогда
			Рассчитан = ЛожЬ;	
		КонецЕСЛИ;
		
	КонецЦикла;
	
		
	
КонецПроцедуры //РасчетВыработкиТС()

//Процедура рассчитывает выработку ТС по ТЧ Задание
//
Процедура РасчетВыработкиТС_ПоЗаданию(Отказ, ТаблицаСобытий = Неопределено, ЗагружатьВремяРаботыДвигателя, ЗагружатьВремяРаботыОборудования)
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если ТекСтрока.ПараметрВыработки.Предопределенный
			ИЛИ НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	////корректируем пробег общий по заданию
	//мПробегОбщийПоЗаданию = НулевойПробегВыезда + НулевойПробегВозвращения;
	//Для Каждого ТекСтрокаЗадания Из Задание Цикл
	//	Если Не ТекСтрокаЗадания.Выполнено Тогда Продолжить; КонецЕсли;
	//	ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрокаЗадания.КоличествоЕздок = 0, 1, ТекСтрокаЗадания.КоличествоЕздок);
	//	мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекСтрокаЗадания.КоличествоКмГруз*ТекСтрокаЗадания_КоличествоЕздок + ТекСтрокаЗадания.КоличествоКмПорожний*ТекСтрокаЗадания_КоличествоЕздок;
	//КонецЦикла;
	//мПробегОбщий = Макс(мПробегОбщий, мПробегОбщийПоЗаданию);
	
	//пробег общий
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
	
	//пробег по GPS
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ПробегПоGPS);
	
	//время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
	
	//время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
	//время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
	//количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
	
	//количество рейсов
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, , Ложь);
	
	//пробег с пассажирами
	Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
	КонецЕсли;	
	
	мКоличествоКмСГрузом = 0;
	мКоличествоЧасов = 0;
	мПробегПорожний = 0;
	мОбщаяНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
	тблПробегПрицепы = Новый ТаблицаЗначений;
	тблПробегПрицепы.Колонки.Добавить("Прицеп");
	тблПробегПрицепы.Колонки.Добавить("ПробегСГрузом");
	тблПробегПрицепы.Колонки.Добавить("ПробегПорожний");
	тблПробегПрицепы.Колонки.Добавить("ПробегОбщий");
	
	//делаем таблицу с номерами этапов
	мЭтапыЗадания = Задание.Выгрузить();
	мЭтапыЗадания.Свернуть("НомерЕздки");
	
	Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
		//выбираем строки для каждого этапа задания
		мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
		мВесГруза = 0;
		мОбъем = 0;
		
		//вес-объем груза для номера этапа <> 0 (учет по этапам ведется)
		//разные строки с одинаковым номером этапа считаем следующим образом:
		//1. если вес груза в строках одинаковый, то вес не суммируем, т.к. считаем что это везут один и тот же груз.
		//2. если вес груза в строках разный, то вес не суммируем, а берем больший вес, т.е. считаем что на этапе была дозагрузка.
		Если ТекЭтапЗадания.НомерЕздки <> 0 Тогда
			мНомСтрМаксВес = Неопределено;
			мНомСтрМаксОбъем = Неопределено;
		
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
				Если мВесГруза < ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок Тогда
					мВесГруза = ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок;
					мНомСтрМаксВес = ТекСтрЗадание.НомерСтроки-1;
				КонецЕсли;
				Если мОбъем < ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок Тогда
					мОбъем = ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок;
					мНомСтрМаксОбъем = ТекСтрЗадание.НомерСтроки-1;
				КонецЕсли;
			КонецЦикла;
			Если мНомСтрМаксВес <> Неопределено Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза, мВесГруза,
					Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
					Задание[мНомСтрМаксВес].Подразделение, Задание[мНомСтрМаксВес].Контрагент, Задание[мНомСтрМаксВес].ОбъектСтроительства, Задание[мНомСтрМаксВес].Маршрут), Ложь);
			КонецЕсли;
			Если мНомСтрМаксОбъем <> Неопределено Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, мОбъем,
					Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
					Задание[мНомСтрМаксОбъем].Подразделение, Задание[мНомСтрМаксОбъем].Контрагент, Задание[мНомСтрМаксОбъем].ОбъектСтроительства, Задание[мНомСтрМаксОбъем].Маршрут), Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
			ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
			
			//время в работе
			Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			Иначе
				//отдельно для порожнего пробега
				//время работы записываем, если общая наработка больше чем уже учтенная до этого
				//(нельзя записать время в работе больше чем разность показаний счетчика в шапке)
				Если мКоличествоЧасов < мОбщаяНаработка Тогда
					ТекНаработка = Мин(мОбщаяНаработка - мКоличествоЧасов, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов));
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекНаработка, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				КонецЕсли;
			КонецЕсли;
			
			//вес-объем груза для номера этапа = 0 (учет по этапам не ведется)
			Если ТекЭтапЗадания.НомерЕздки = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза,	ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок,
					Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
					ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок,
					Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
					ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			КонецЕсли;
			
			//количество ездок
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//количество операций
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//подача
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//пробег спец.
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы, ТекСтрЗадание.КоличествоКмСпец * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2, ТекСтрЗадание.КоличествоКмСпец2 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3, ТекСтрЗадание.КоличествоКмСпец3 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4, ТекСтрЗадание.КоличествоКмСпец4 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//тн*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//объем*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//количество пассажиров
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоПассажиров, ТекСтрЗадание.КоличествоПассажиров, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//время в работе оборудования, у которого есть спидометр, а не счетчик моточасов
			Для Каждого ТекСтрПрицепы из Прицепы Цикл
				Если ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра И ТекСтрЗадание.КоличествоЧасов > 0 Тогда
					Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыОборудования) Тогда
						ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					Иначе
						ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("extrasWork"), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Истина);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			//выработка прицепов и оборудования, указанных в Задании
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1) Тогда
				Если ТекСтрЗадание.Прицеп1.Модель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					
					ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп1, "Прицеп");
					Если ТекСтрокаПрицеп = Неопределено Тогда
						ТекСтрокаПрицеп = тблПробегПрицепы.Добавить();
						ТекСтрокаПрицеп.Прицеп = ТекСтрЗадание.Прицеп1;
						ТекСтрокаПрицеп.ПробегСГрузом = 0;
						ТекСтрокаПрицеп.ПробегПорожний = 0;
						ТекСтрокаПрицеп.ПробегОбщий = 0;
					КонецЕсли;
					ТекСтрокаПрицеп.ПробегСГрузом = ТекСтрокаПрицеп.ПробегСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасовПрицеп1), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2) Тогда
				Если ТекСтрЗадание.Прицеп2.Модель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					
					ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп2, "Прицеп");
					Если ТекСтрокаПрицеп = Неопределено Тогда
						ТекСтрокаПрицеп = тблПробегПрицепы.Добавить();
						ТекСтрокаПрицеп.Прицеп = ТекСтрЗадание.Прицеп2;
						ТекСтрокаПрицеп.ПробегСГрузом = 0;
						ТекСтрокаПрицеп.ПробегПорожний = 0;
						ТекСтрокаПрицеп.ПробегОбщий = 0;
					КонецЕсли;
					ТекСтрокаПрицеп.ПробегСГрузом = ТекСтрокаПрицеп.ПробегСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасовПрицеп2), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				КонецЕсли;
			КонецЕсли;
			
			мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			мКоличествоЧасов = мКоличествоЧасов + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов);
		КонецЦикла;	
	КонецЦикла;	
	
	//отдельно для порожнего пробега
	//порожний пробег записываем, если пробег общий больше пробега с грузом
	//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
	Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
		//выбираем строки для каждого этапа задания
		мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
		
		Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
			ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
			//основное ТС
			Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
				ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
			КонецЕсли;
			//прицеп1
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1) И ТекСтрЗадание.Прицеп1.Модель.НаличиеСпидометра Тогда
				ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп1, "Прицеп");
				мКоличествоКмСГрузомПрицеп = ТекСтрокаПрицеп.ПробегСГрузом;
				мПробегПорожнийПрицеп = ТекСтрокаПрицеп.ПробегПорожний;
				мПробегОбщийПрицеп = ТекСтрокаПрицеп.ПробегОбщий;
				Если мПробегПорожнийПрицеп + мКоличествоКмСГрузомПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожнийПрицеп - мКоличествоКмСГрузомПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					ТекСтрокаПрицеп.ПробегПорожний = ТекСтрокаПрицеп.ПробегПорожний + ТекПробегПорожний;
				КонецЕсли;
				Если мПробегОбщийПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегОбщий = Мин(мПробегОбщий - мПробегОбщийПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, (ТекСтрЗадание.КоличествоКмПорожний+ТекСтрЗадание.КоличествоКмГруз) * ТекСтрокаЗадания_КоличествоЕздок);
					
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					ТекСтрокаПрицеп.ПробегОбщий = ТекСтрокаПрицеп.ПробегОбщий + ТекПробегОбщий;
				КонецЕсли;
			КонецЕсли;
			//прицеп2
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2) И ТекСтрЗадание.Прицеп2.Модель.НаличиеСпидометра Тогда
				ТекСтрокаПрицеп = тблПробегПрицепы.Найти(ТекСтрЗадание.Прицеп2, "Прицеп");
				мКоличествоКмСГрузомПрицеп = ТекСтрокаПрицеп.ПробегСГрузом;
				мПробегПорожнийПрицеп = ТекСтрокаПрицеп.ПробегПорожний;
				мПробегОбщийПрицеп = ТекСтрокаПрицеп.ПробегОбщий;
				Если мПробегПорожнийПрицеп + мКоличествоКмСГрузомПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожнийПрицеп - мКоличествоКмСГрузомПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					ТекСтрокаПрицеп.ПробегПорожний = ТекСтрокаПрицеп.ПробегПорожний + ТекПробегПорожний;
				КонецЕсли;
				Если мПробегОбщийПрицеп + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегОбщий = Мин(мПробегОбщий - мПробегОбщийПрицеп - НулевойПробегВыезда - НулевойПробегВозвращения, (ТекСтрЗадание.КоличествоКмПорожний+ТекСтрЗадание.КоличествоКмГруз) * ТекСтрокаЗадания_КоличествоЕздок);
					
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегОбщий, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					ТекСтрокаПрицеп.ПробегОбщий = ТекСтрокаПрицеп.ПробегОбщий + ТекПробегОбщий;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//пробег порожний, не учитанный по строкам задания
	Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
	КонецЕсли;
	
	//время в работе основного ТС
	Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		Если мКоличествоЧасов = 0 Тогда
			Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыДвигателя) Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе);
			Иначе
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("engineWork"),,Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыДвигателя) Тогда
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
			Если мКоличествоЧасов = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
			ИначеЕсли мНаработка > мКоличествоЧасов Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка - мКоличествоЧасов,,, Ложь);
			КонецЕсли;
		Иначе
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("engineWork"));
		КонецЕсли;
	КонецЕсли;
	
	//теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		Если ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.Тс.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			//пробег общий
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегСГрузом, мКоличествоКмСГрузом);
			
			//пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом);
		КонецЕсли;	
		
		//время в работе
		Если ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра Тогда
			Если мКоличествоЧасов = 0 Тогда
				Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыОборудования) Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе, Новый Структура("Подразделение, Контрагент", Подразделение, Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("extrasWork"), Новый Структура("Подразделение, Контрагент", Подразделение, Контрагент), Истина);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыОборудования) Тогда
				мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
			Иначе
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("extrasWork"),,Истина);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

//Процедура рассчитывает выработку ТС по документам ТТД
//
Процедура РасчетВыработкиТС_ПоТТД(Отказ, ТаблицаСобытий = Неопределено, ЗагружатьВремяРаботыДвигателя, ЗагружатьВремяРаботыОборудования)
	Перем мТаблицаТТД;
	
	мПроверкаТТД = ПроверкаТТД(мТаблицаТТД);
	
	//получим массив непредопределенных произвольных параметров выработки ТТД
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДВыработка.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	уатТТДВыработка.Ссылка В(&мсвТТД)");
	Запрос.УстановитьПараметр("мсвТТД", мТаблицаТТД.ВыгрузитьКолонку("ТТД"));
	мсвПроизвольныеПараметрыВыработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПараметрВыработки");
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		//также надо очистить непредопределенные параметры, которые указаны в произвольном параметре выработке в ТТД
		Если ТекСтрока.ПараметрВыработки.Предопределенный ИЛИ мсвПроизвольныеПараметрыВыработки.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
			ИЛИ НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Если НЕ мПроверкаТТД Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
		
	////корректируем пробег общий по ТТД
	//мПробегОбщийПоТТД = НулевойПробегВыезда + НулевойПробегВозвращения;
	//Для Каждого ТекСтр из мТаблицаТТД Цикл
	//	мТТД = ТекСтр.ТТД;
	//	Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
	//		Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
	//		мПробегОбщийПоТТД = мПробегОбщийПоТТД + ТекСтрЗадание.КоличествоКмГруз*ТекСтрокаЗадания_КоличествоЕздок + ТекСтрЗадание.КоличествоКмПорожний*ТекСтрокаЗадания_КоличествоЕздок;
	//	КонецЦикла;
	//КонецЦикла;
	//мПробегОбщий = Макс(мПробегОбщий, мПробегОбщийПоТТД);
	
	//пробег общий
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
	
	//пробег по GPS
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ПробегПоGPS);

	//время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
	
	//время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
	//время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
	//количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
	
	//количество рейсов
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Ложь);
	
	//выручка
	Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
		мТаблицаВыручка	= Новый ТаблицаЗначений;
		мТаблицаВыручка = Вычислить("уатПолучитьБилетныеЛистыДляПЛ(Ссылка)");
		Для Каждого ТекСтр из мТаблицаВыручка Цикл
			мБилетныйЛист = ТекСтр.Ссылка;
			Для Каждого ТекСтрВыработка из мБилетныйЛист.Билеты Цикл
				Если ТекСтрВыработка.ПутЛист = Ссылка Тогда
					мКоличествоПассажиров= мКоличествоПассажиров + ТекСтрВыработка.Количество;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
		
		//количество пассажиров
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоПассажиров, мКоличествоПассажиров);
		
		//пробег с пассажирами
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
	КонецЕсли;	
	
	мКоличествоКмСГрузом = 0;
	мКоличествоЧасов = 0;
	мПробегПорожний = 0;
	мОбщаяНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
	
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		мТТД = ТекСтр.ТТД;
		Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
			Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
			
			//время в работе
			Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			Иначе
				//отдельно для порожнего пробега
				//время работы записываем, если общая наработка больше чем уже учтенная до этого
				//(нельзя записать время в работе больше чем разность показаний счетчика в шапке)
				Если мКоличествоЧасов < мОбщаяНаработка Тогда
					ТекНаработка = Мин(мОбщаяНаработка - мКоличествоЧасов, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов));
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекНаработка, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				КонецЕсли;
			КонецЕсли;
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//вес груза
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//объем
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//количество ездок
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//количество операций
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//подача
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//количество пассажиров
			Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоПассажиров, ТекСтрЗадание.КоличествоПассажиров, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			КонецЕсли;	
			
			//простой под погрузкой
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ПростойПодПогрузкой), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//простой под разгрузкой
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ПростойПодРазгрузкой), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//погрузочно-разгрузочные работы
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрЗадание.ПогрузочноРазгрузочныеРаботы, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//пробег специальной работы
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы, ТекСтрЗадание.КоличествоКмСпец * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2, ТекСтрЗадание.КоличествоКмСпец2 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3, ТекСтрЗадание.КоличествоКмСпец3 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4, ТекСтрЗадание.КоличествоКмСпец4 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5, ТекСтрЗадание.КоличествоКмСпец5 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//тн*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			
			//объем*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент", Подразделение, мТТД.Контрагент), Ложь);
			
			//ручной произвольный параметр выработки
			Если ЗначениеЗаполнено(ТекСтрЗадание.ПараметрВыработки) И ТекСтрЗадание.Выработка > 0 Тогда
				Если ТекСтрЗадание.ПараметрВыработки.Временный Тогда
					ТекВыработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Выработка);
				Иначе
					ТекВыработка = ТекСтрЗадание.Выработка;
				КонецЕсли;
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.ПараметрВыработки, ТекВыработка, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
			КонецЕсли;
			
			мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			мКоличествоЧасов = мКоличествоЧасов + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов);
		КонецЦикла;	
	КонецЦикла;	
	
	//отдельно для порожнего пробега
	//порожний пробег записываем, если пробег общий больше пробега с грузом
	//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		мТТД = ТекСтр.ТТД;
		Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
			Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
				Продолжить;
			КонецЕсли;
			Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
				ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
				ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//время в работе основного ТС
	Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда //спидометр
		Если мКоличествоЧасов = 0 Тогда
			Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыДвигателя) Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе);
				КонецЕсли;
			Иначе
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("engineWork"), Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент), Истина);
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("engineWork"));	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе //счетчик м/ч
		Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыДвигателя) Тогда
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
			Если мКоличествоЧасов = 0 Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
				КонецЕсли;
			ИначеЕсли мНаработка > мКоличествоЧасов Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка-мКоличествоЧасов, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка-мКоличествоЧасов);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если мТаблицаТТД.Количество() = 1 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("engineWork"), Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
			Иначе
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("engineWork"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		Если ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			//пробег общий
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
			
			//пробег по GPS
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ПробегПоGPS);
			
			//пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегСГрузом, мКоличествоКмСГрузом);
			
			//пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом);
		КонецЕсли;	
		
		Если ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра Тогда
			мНаработка = ?(мКоличествоЧасов = 0, мВремяВРаботе, мКоличествоЧасов);
		Иначе
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
		КонецЕсли;
		
		Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыОборудования) Тогда						
			//время в работе
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
		Иначе
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("extrasWork"),,Истина);
		КонецЕсли;
	КонецЦикла;
	
	//пробег порожний, не учитанный по строкам задания ТТД
	Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
	КонецЕсли;
КонецПроцедуры

//Процедура рассчитывает выработку ТС вручную
//При этом следующие параметры пересчитываются при расчете итогов:
// - Пробег общий,
// - Время в работе,
// - Время в наряде,
// - Время ночное,
// - Время в простое.
//Остальные параметры не пересчитываются.
//
Процедура РасчетВыработкиТС_Ручной(Отказ, ТаблицаСобытий = Неопределено, ЗагружатьВремяРаботыДвигателя, ЗагружатьВремяРаботыОборудования)
	
	//очистка выработки - только параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;	
	
	//пробег
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);

	//пробег по GPS
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ПробегПоGPS,, Истина, Истина);

	//пробег порожний
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий,, Истина, Истина);
	
	//время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде,, Истина, Истина);
	
	//время в работе. Если у ТС спидометр, то время берем из задания, иначе показания спидометра используются
	//как счетчики моточасов
	Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мНаработка = мВремяВРаботе;
	Иначе
		мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения));
	КонецЕсли;	
	Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыДвигателя) Тогда						
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка,, Истина, Истина);
	Иначе
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("engineWork"),, Истина, Истина);
	КонецЕсли;
	
	//время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
	//время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
	//количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней,, Истина, Истина);
	
	//количество рейсов
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Истина, Истина);
	
	// теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		//Если рсТС.Модель.Автотранспорт Тогда
		Если ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда 
			//пробег
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ПробегПоGPS,, Истина, Истина);
			//пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий,, Истина, Истина);
		КонецЕсли;	
		
		Если Не ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра Тогда	//Счетчик моточасов
			Если ТаблицаСобытий = 1 ИЛИ (ТаблицаСобытий.Количество() И НЕ ЗагружатьВремяРаботыОборудования) Тогда						
				мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
				//время в работе
				Если мНаработка <> 0 Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка,, Истина, Истина);
				КонецЕсли;	
			Иначе
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТаблицаСобытий.Итог("extrasWork"),, Истина, Истина);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

//Процедура записывает строку выработки ТС
//ДопАналитика: структура, содержащая ключи Подразделение, Контрагент, ОбъектСтроительства, Маршрут
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ДопАналитика, но также и все остальные строки, для которых
//		значения ТС и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
//
Процедура ЗаписатьСтрокуВыработкиТС(ВыбТС, ПараметрВыработки, КоличествоВыработки, ДопАналитика = Неопределено, Знач флЗамещать = Истина, флУдалитьСтрокиБезДопАналитик = Ложь) Экспорт
	ВыбПодразделение = Неопределено;
	ВыбКонтрагент = Неопределено;
	ВыбОбъектСтроительства = Неопределено;
	ВыбМаршрут = Неопределено;
	
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Подразделение") Тогда
		ВыбПодразделение = ДопАналитика.Подразделение;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Контрагент") Тогда
		ВыбКонтрагент = ДопАналитика.Контрагент;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ОбъектСтроительства") Тогда
		ВыбОбъектСтроительства = ДопАналитика.ОбъектСтроительства;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Маршрут") Тогда
		ВыбМаршрут = ДопАналитика.Маршрут;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТС, ПараметрВыработки", ВыбТС, ПараметрВыработки);
	Если ЗначениеЗаполнено(ВыбПодразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", ВыбПодразделение);
	Иначе
		СтруктураОтбора.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбКонтрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", ВыбКонтрагент);
	Иначе
		СтруктураОтбора.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбОбъектСтроительства) Тогда
		СтруктураОтбора.Вставить("ОбъектСтроительства", ВыбОбъектСтроительства);
	Иначе
		СтруктураОтбора.Вставить("ОбъектСтроительства", Справочники.уатОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбМаршрут) Тогда
		СтруктураОтбора.Вставить("Маршрут", ВыбМаршрут);
	Иначе
		СтруктураОтбора.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	
	мМассивСтрок = ВыработкаТС.НайтиСтроки(СтруктураОтбора);
	Если мМассивСтрок.Количество() = 0 Тогда
		ТекСтрокаВыработки = ВыработкаТС.Добавить();
		ТекСтрокаВыработки.ТС = ВыбТС;
		ТекСтрокаВыработки.ПараметрВыработки = ПараметрВыработки;
		ТекСтрокаВыработки.Подразделение = ВыбПодразделение;
		ТекСтрокаВыработки.Контрагент = ВыбКонтрагент;
		ТекСтрокаВыработки.ОбъектСтроительства = ВыбОбъектСтроительства;
		ТекСтрокаВыработки.Маршрут = ВыбМаршрут;
	Иначе
		ТекСтрокаВыработки = мМассивСтрок[0];
	КонецЕсли;
	Если флЗамещать Тогда
		//очистим все строки с указанным ТС и парам. выработки, кроме найденной строки
		Если флУдалитьСтрокиБезДопАналитик Тогда
			СтруктураОтбора = Новый Структура("ТС, ПараметрВыработки", ВыбТС, ПараметрВыработки);
			мМассивСтрок = ВыработкаТС.НайтиСтроки(СтруктураОтбора);
			Для Каждого ТекСтрока Из мМассивСтрок Цикл
				Если ТекСтрока <> ТекСтрокаВыработки Тогда
					ВыработкаТС.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			//чистим заодно и доп. аналитики
			ТекСтрокаВыработки.Подразделение = Неопределено;
			ТекСтрокаВыработки.Контрагент = Неопределено;
			ТекСтрокаВыработки.ОбъектСтроительства = Неопределено;
			ТекСтрокаВыработки.Маршрут = Неопределено;
		КонецЕсли;
		ТекСтрокаВыработки.Количество = КоличествоВыработки;
	Иначе //приплюсуем к тому что есть уже
		ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + КоличествоВыработки;
	КонецЕсли;
	
	Если ТекСтрокаВыработки.Количество = 0 Тогда
		ВыработкаТС.Удалить(ТекСтрокаВыработки);
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуВыработкиТС()

//Процедура сворачивает выработку ТС по настройкам учета выработки согласно учетной политике
//Перед сверткой, если по аналитике (напр. Подразделение) не ведется учет, то она заполняется пустыми значениями
//
Процедура СвернутьВыработкуТСпоУчетнойПолитике()
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	Для Каждого ТекСтрока Из ВыработкаТС Цикл
		Если НЕ УчетВыработкиПоКонтрагентам Тогда
			ТекСтрока.Контрагент = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			ТекСтрока.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрока.ОбъектСтроительства = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоМаршрутам Тогда
			ТекСтрока.Маршрут = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства) ИЛИ (НЕ УчетВыработкиПоМаршрутам) Тогда
		ВыработкаТС.Свернуть("ТС, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут", "Количество");
	КонецЕсли;
КонецПроцедуры

// РАСЧЕТ ВЫРАБОТКИ СОТРУДНИКОВ

//Процедура рассчитывает выработку сотрудников
//
Процедура РасчетВыработкиСотрудников(Отказ) Экспорт
	Перем мТаблицаТТД;
	
	Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мПробегОбщий = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения);
	Иначе
		мПробегОбщий = 0;
	КонецЕсли;
	
	РасчетВремени();
	
	//составим список задействованных сотрудников
	списСотрудники = Новый СписокЗначений();
	списСотрудники.Добавить(Водитель1);
	Если ЗначениеЗаполнено(Водитель2) Тогда
		списСотрудники.Добавить(Водитель2);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник1) Тогда
		списСотрудники.Добавить(Сотрудник1);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник2) Тогда
		списСотрудники.Добавить(Сотрудник2);
	КонецЕсли;	
	
	РезультатЗапросаПоПараметрамСПроизвольнымРасчетом = ПолучитьПараметрыВыработкиСПроизвольнымРасчетом();
	
	//удалим строки выработки с водителями/сотрудниками, которых нет в ПЛ
	мсвСотрудников = списСотрудники.ВыгрузитьЗначения();
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаВыработка = ВыработкаСотрудников[Сч];
		Если мсвСотрудников.Найти(ТекСтрокаВыработка.Сотрудник) = Неопределено Тогда
			ВыработкаСотрудников.Удалить(ТекСтрокаВыработка);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	//расчет по заданию
	Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
		РасчетВыработкиСотрудников_ПоЗаданию(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
		//расчет выработки по ТТД
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД Тогда
		РасчетВыработкиСотрудников_ПоТТД(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
		//расчет ручной
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.Ручной Тогда
		РасчетВыработкиСотрудников_Ручной(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
	КонецЕсли;
	
	// расчет произвольных параметров выработки
	Если РежимРасчетаВыработки <> Перечисления.уатРежимыРасчетаВыработкиПЛ.НеРассчитывать Тогда
		// произвольные параметры выработки (по шапке)
		ПараметрыСРасчетомПоШапке = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[1].Выгрузить();
		Для сч = 0 По списСотрудники.Количество() - 1 Цикл
			мСотрудник = списСотрудники[сч].Значение;
			Для Каждого Параметр Из ПараметрыСРасчетомПоШапке Цикл
				Если Параметр.ДействуетНаСотрудников Тогда					
					ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр);
					Если НЕ ЗначениеПараметра = "ошибка" Тогда
						ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра);
					КонецЕсли;					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// произвольные параметры выработки (по заданию)
		Если Задание.Количество() Тогда
			ПараметрыСРасчетомПоЗаданию = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[0].Выгрузить();	
			Для сч = 0 По списСотрудники.Количество() - 1 Цикл
				мСотрудник = списСотрудники[сч].Значение;
				мЭтапыЗадания = Задание.Выгрузить();
				мЭтапыЗадания.Свернуть("НомерЕздки");
				Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
					//выбираем строки для каждого этапа задания
					мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
					Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
						Для Каждого Параметр Из ПараметрыСРасчетомПоЗаданию Цикл
							Если Параметр.ДействуетНаСотрудников Тогда
								ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
								Если НЕ ЗначениеПараметра = "ошибка" Тогда
									ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;		
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;	
		
		// произвольные параметры выработки (по ТТД)
		ПараметрыСРасчетомПоТТД = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[2].Выгрузить();	
		Если ПараметрыСРасчетомПоТТД.Количество() И ПроверкаТТД(мТаблицаТТД, 1, "выработки сотрудников") Тогда
			Для Каждого ТекСтр из мТаблицаТТД Цикл
				Для сч = 0 По списСотрудники.Количество() - 1 Цикл
					мСотрудник = списСотрудники[сч].Значение;
					мТТД = ТекСтр.ТТД;
					Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
						Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого Параметр Из ПараметрыСРасчетомПоТТД Цикл
							Если Параметр.ДействуетНаСотрудников Тогда
								ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
								Если НЕ ЗначениеПараметра = "ошибка" Тогда
									ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;						
					КонецЦикла;
				КонецЦикла;	
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;	
	
	СвернутьВыработкуСотрудниковпоУчетнойПолитике();
КонецПроцедуры //РасчетВыработкиСотрудников()

//Процедура рассчитывает выработку сотрудников по ТЧ Задание
//
Процедура РасчетВыработкиСотрудников_ПоЗаданию(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаСотрудников[Сч];
		Если ТекСтрока.ПараметрВыработки.Предопределенный 
			ИЛИ НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаСотрудников.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		мВремяВРаботеСотрудника = 0;
		мВремяНочьСотрудника = 0;
		Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
			Если ТекСтрока.Сотрудник = мСотрудник Тогда
				мВремяВРаботеСотрудника = мВремяВРаботеСотрудника + ТекСтрока.ВремяДневное;
				мВремяНочьСотрудника = мВремяНочьСотрудника + ТекСтрока.ВремяНочное;
			КонецЕсли;
		КонецЦикла;
		
		////корректируем пробег общий по заданию
		//мПробегОбщийПоЗаданию = НулевойПробегВыезда + НулевойПробегВозвращения;
		//Для Каждого ТекСтрокаЗадания Из Задание Цикл
		//	Если Не ТекСтрокаЗадания.Выполнено Тогда Продолжить; КонецЕсли;
		//	ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрокаЗадания.КоличествоЕздок = 0, 1, ТекСтрокаЗадания.КоличествоЕздок);
		//	мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекСтрокаЗадания.КоличествоКмГруз*ТекСтрокаЗадания_КоличествоЕздок + ТекСтрокаЗадания.КоличествоКмПорожний*ТекСтрокаЗадания_КоличествоЕздок;
		//КонецЦикла;
		//мПробегОбщий = Макс(мПробегОбщий, мПробегОбщийПоЗаданию);
		
		//пробег
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
		
		//пробег GPS
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ПробегПоGPS);
		
		//время в наряде
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
		
		//время в работе
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботеСотрудника);
		
		//время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое);
		
		//время ночное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное, мВремяНочьСотрудника);
		
		//количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
		
		//количество рейсов
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Ложь);
		
		//пробег с пассажирами
		Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
		КонецЕсли;
		
		//делаем таблицу с номерами этапов
		мЭтапыЗадания = Задание.Выгрузить();
		мЭтапыЗадания.Свернуть("НомерЕздки");
		
		мКоличествоЧасов = 0;
		мПробегПорожний = 0;
		мКоличествоКмСГрузом = 0;
		Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
			//выбираем строки для каждого этапа задания
			мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
			мВесГруза = 0;
			мОбъем = 0;			
			
			//вес-объем груза для номера этапа <> 0 (учет по этапам ведется)
			//разные строки с одинаковым номером этапа считаем следующим образом:
			//1. если вес груза в строках одинаковый, то вес не суммируем, т.к. считаем что это везут один и тот же груз.
			//2. если вес груза в строках разный, то вес не суммируем, а берем больший вес, т.е. считаем что на этапе была дозагрузка.
			Если ТекЭтапЗадания.НомерЕздки <> 0 Тогда
				мНомСтрМаксВес = Неопределено;
				мНомСтрМаксОбъем = Неопределено;
				
				Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
					ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
					Если мВесГруза < ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок Тогда
						мВесГруза = ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок;
						мНомСтрМаксВес = ТекСтрЗадание.НомерСтроки-1;
					КонецЕсли;
					Если мОбъем < ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок Тогда
						мОбъем = ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок;
						мНомСтрМаксОбъем = ТекСтрЗадание.НомерСтроки-1;
					КонецЕсли;
				КонецЦикла;
				Если мНомСтрМаксВес <> Неопределено Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, мВесГруза,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
						Задание[мНомСтрМаксВес].Подразделение, Задание[мНомСтрМаксВес].Контрагент, Задание[мНомСтрМаксВес].ОбъектСтроительства, Задание[мНомСтрМаксВес].Маршрут), Ложь);
				КонецЕсли;
				Если мНомСтрМаксОбъем <> Неопределено Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, мОбъем,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
						Задание[мНомСтрМаксОбъем].Подразделение, Задание[мНомСтрМаксОбъем].Контрагент, Задание[мНомСтрМаксОбъем].ОбъектСтроительства, Задание[мНомСтрМаксОбъем].Маршрут), Ложь);
				КонецЕсли;
			КонецЕсли;
		
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
				
				//количество пассажиров
				Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоПассажиров, ТекСтрЗадание.КоличествоПассажиров, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				КонецЕсли;
				
				//пробег с грузом
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				
				//пробег спец.
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы, ТекСтрЗадание.КоличествоКмСпец * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2, ТекСтрЗадание.КоличествоКмСпец2 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3, ТекСтрЗадание.КоличествоКмСпец3 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4, ТекСтрЗадание.КоличествоКмСпец4 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5, ТекСтрЗадание.КоличествоКмСпец5 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				
				//тн*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				
				//объем*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);				
				
				//количество ездок
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				
				//количество операций
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				
				//подача
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				
				//вес-объем груза для номера этапа = 0 (учет по этапам не ведется)
				Если ТекЭтапЗадания.НомерЕздки = 0 Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрЗадание.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
						ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем * ТекСтрокаЗадания_КоличествоЕздок,
						Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут",
						ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
				КонецЕсли;
				
				мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			КонецЦикла;	
		КонецЦикла;
		
		//отдельно для порожнего пробега
		//порожний пробег записываем, если пробег общий больше пробега с грузом
		//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
		Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
			//выбираем строки для каждого этапа задания
			мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
			
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
				Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//пробег порожний, не учитанный по строкам задания
		Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура рассчитывает выработку сотрудников по документам ТТД
//
Процедура РасчетВыработкиСотрудников_ПоТТД(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	Перем мТаблицаТТД;
	
	мПроверкаТТД = ПроверкаТТД(мТаблицаТТД, , "выработки сотрудников");
	
	//получим массив непредопределенных произвольных параметров выработки ТТД
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатТТДВыработка.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	уатТТДВыработка.Ссылка В(&мсвТТД)");
	Запрос.УстановитьПараметр("мсвТТД", мТаблицаТТД.ВыгрузитьКолонку("ТТД"));
	мсвПроизвольныеПараметрыВыработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПараметрВыработки");
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаСотрудников[Сч];
		//также надо очистить непредопределенные параметры, которые указаны в произвольном параметре выработке в ТТД
		Если ТекСтрока.ПараметрВыработки.Предопределенный ИЛИ мсвПроизвольныеПараметрыВыработки.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
			ИЛИ НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаСотрудников.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Если НЕ мПроверкаТТД Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
		
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		мВремяВРаботеСотрудника = 0;
		мВремяНочьСотрудника = 0;
		Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
			Если ТекСтрока.Сотрудник = мСотрудник Тогда
				мВремяВРаботеСотрудника = мВремяВРаботеСотрудника + ТекСтрока.ВремяДневное;
				мВремяНочьСотрудника = мВремяНочьСотрудника + ТекСтрока.ВремяНочное;
			КонецЕсли;
		КонецЦикла;
		
		////корректируем пробег общий по ТТД
		//мПробегОбщийПоТТД = НулевойПробегВыезда + НулевойПробегВозвращения;
		//Для Каждого ТекСтр из мТаблицаТТД Цикл
		//	мКоличествоЧасовПоТТД = 0;
		//	мТТД = ТекСтр.ТТД;
		//	Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
		//		Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
		//			Продолжить;
		//		КонецЕсли;
		//		ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
		//		мПробегОбщийПоТТД = мПробегОбщийПоТТД + ТекСтрЗадание.КоличествоКмГруз*ТекСтрокаЗадания_КоличествоЕздок + ТекСтрЗадание.КоличествоКмПорожний*ТекСтрокаЗадания_КоличествоЕздок;
		//	КонецЦикла;
		//КонецЦикла;
		//мПробегОбщий = Макс(мПробегОбщий, мПробегОбщийПоТТД);
		
		//пробег
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ПробегПоGPS);
		
		//время в наряде
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
		
		//время в работе
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботеСотрудника);
		
		//время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое);
		
		//время ночное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное, мВремяНочьСотрудника);
		
		//количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
		
		//количество рейсов
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Ложь);
		
		//выручка
		Если ВидПЛ = Перечисления.уатВидыПЛ._4 Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
			Если уатОбщегоНазначенияТиповые.уатЕстьДокумент("уатБилетныйЛист") Тогда
				мТаблицаВыручка	= Новый ТаблицаЗначений;
				мТаблицаВыручка = Вычислить("уатПолучитьБилетныеЛистыДляПЛ(Ссылка)");
				Для Каждого ТекСтр из мТаблицаВыручка Цикл
					мБилетныйЛист = ТекСтр.Ссылка;
					Для Каждого ТекСтрВыработка из мБилетныйЛист.Билеты Цикл
						Если ТекСтрВыработка.ПутЛист = Ссылка Тогда
							мКоличествоПассажиров= мКоличествоПассажиров + ТекСтрВыработка.Количество;
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
				
				//количество пассажиров
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоПассажиров, мКоличествоПассажиров);
				
				//пробег с пассажирами
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСПассажирами, мПробегОбщий - НулевойПробегВыезда - НулевойПробегВозвращения);
			КонецЕсли;	
		КонецЕсли;
		
		мКоличествоЧасов = 0;
		мПробегПорожний = 0;
		мКоличествоКмСГрузом = 0;
		
		Для Каждого ТекСтр из мТаблицаТТД Цикл
			мТТД = ТекСтр.ТТД;
			Для Каждого ТекСтрВыработка из мТТД.Выработка Цикл
				Если ТекСтрВыработка.ПутЛист <> Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрВыработка.КоличествоЕздок = 0, 1, ТекСтрВыработка.КоличествоЕздок);
				
				//вес груза
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрВыработка.КоличествоТонн * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//объем
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, ТекСтрВыработка.Объем * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//пробег с грузом
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//пробег спец.
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы, ТекСтрВыработка.КоличествоКмСпец * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2, ТекСтрВыработка.КоличествоКмСпец2 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3, ТекСтрВыработка.КоличествоКмСпец3 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4, ТекСтрВыработка.КоличествоКмСпец4 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5, ТекСтрВыработка.КоличествоКмСпец5 * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//тн*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрВыработка.КоличествоТонн * ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//объем*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрВыработка.Объем * ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//количество ездок
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрВыработка.КоличествоЕздок, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//количество операций
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрВыработка.КоличествоОпераций, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//погрузочно-разгрузочные работы
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрВыработка.ПогрузочноРазгрузочныеРаботы, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//простой под погрузкой
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.ПростойПодПогрузкой), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//простой под разгрузкой
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.ПростойПодРазгрузкой), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//подача
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.Подача), Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				
				//ручной произвольный параметр выработки
				Если ЗначениеЗаполнено(ТекСтрВыработка.ПараметрВыработки) И ТекСтрВыработка.Выработка > 0 Тогда
					Если ТекСтрВыработка.ПараметрВыработки.Временный Тогда
						ТекВыработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.Выработка);
					Иначе
						ТекВыработка = ТекСтрВыработка.Выработка;
					КонецЕсли;
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.ПараметрВыработки, ТекВыработка, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут), Ложь);
				КонецЕсли;
				
				мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрВыработка.КоличествоКмГруз * ТекСтрокаЗадания_КоличествоЕздок;
			КонецЦикла;	
		КонецЦикла;
		
		//отдельно для порожнего пробега
		//порожний пробег записываем, если пробег общий больше пробега с грузом
		//(нельзя записать пробег общий больше чем разность показаний спидометра в шапке)
		Для Каждого ТекСтр из мТаблицаТТД Цикл
			мТТД = ТекСтр.ТТД;
			Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
				Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				ТекСтрокаЗадания_КоличествоЕздок = ?(ТекСтрЗадание.КоличествоЕздок = 0, 1, ТекСтрЗадание.КоличествоЕздок);
				Если мПробегПорожний + мКоличествоКмСГрузом + НулевойПробегВыезда + НулевойПробегВозвращения < мПробегОбщий Тогда
					ТекПробегПорожний = Мин(мПробегОбщий - мПробегПорожний - мКоличествоКмСГрузом - НулевойПробегВыезда - НулевойПробегВозвращения, ТекСтрЗадание.КоличествоКмПорожний * ТекСтрокаЗадания_КоличествоЕздок);
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут", Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут), Ложь);
					мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//пробег порожний, не учитанный по строкам задания
		Если мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - НулевойПробегВыезда - НулевойПробегВозвращения,,Ложь);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура рассчитывает выработку сотрудников вручную
//При этом следующие параметры пересчитываются при расчете итогов:
// - Пробег общий,
// - Время в работе,
// - Время в наряде,
// - Время ночное,
// - Время в простое.
//Остальные параметры не пересчитываются.
//
Процедура РасчетВыработкиСотрудников_Ручной(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	
	//очистка выработки - только для предопределенных параметров выработки
	//и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;	
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		мВремяВРаботеСотрудника = 0;
		мВремяНочьСотрудника = 0;
		Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
			Если ТекСтрока.Сотрудник = мСотрудник Тогда
				мВремяВРаботеСотрудника = мВремяВРаботеСотрудника + ТекСтрока.ВремяДневное;
				мВремяНочьСотрудника = мВремяНочьСотрудника + ТекСтрока.ВремяНочное;
			КонецЕсли;
		КонецЦикла;
		
		//пробег
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, мПробегОбщий,, Истина, Истина);
		
		//время в наряде
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде,, Истина, Истина);
		
		//время в работе
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботеСотрудника,, Истина, Истина);
		
		//время ночное
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное, мВремяНочьСотрудника,, Истина, Истина);
		
		//время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое,, Истина, Истина);
		
		//количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней,, Истина, Истина);
		
		//количество рейсов
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Истина, Истина);
	КонецЦикла;
КонецПроцедуры

//Процедура записывает строку выработки Сотрудника
//ДопАналитика: структура, содержащая ключи Подразделение, Контрагент, ОбъектСтроительства, Маршрут
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ДопАналитика, но также и все остальные строки, для которых
//		значения сотрудника и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
Процедура ЗаписатьСтрокуВыработкиСотрудника(ВыбСотрудник, ПараметрВыработки, КоличествоВыработки, ДопАналитика = Неопределено, Знач флЗамещать = Истина, флУдалитьСтрокиБезДопАналитик = Ложь) Экспорт
	ВыбПодразделение = Неопределено;
	ВыбКонтрагент = Неопределено;
	ВыбОбъектСтроительства = Неопределено;
	ВыбМаршрут = Неопределено;
	
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Подразделение") Тогда
		ВыбПодразделение = ДопАналитика.Подразделение;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Контрагент") Тогда
		ВыбКонтрагент = ДопАналитика.Контрагент;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ОбъектСтроительства") Тогда
		ВыбОбъектСтроительства = ДопАналитика.ОбъектСтроительства;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Маршрут") Тогда
		ВыбМаршрут = ДопАналитика.Маршрут;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Сотрудник, ПараметрВыработки", ВыбСотрудник, ПараметрВыработки);
	Если ЗначениеЗаполнено(ВыбПодразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", ВыбПодразделение);
	Иначе
		СтруктураОтбора.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбКонтрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", ВыбКонтрагент);
	Иначе
		СтруктураОтбора.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбОбъектСтроительства) Тогда
		СтруктураОтбора.Вставить("ОбъектСтроительства", ВыбОбъектСтроительства);
	Иначе
		СтруктураОтбора.Вставить("ОбъектСтроительства", Справочники.уатОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбМаршрут) Тогда
		СтруктураОтбора.Вставить("Маршрут", ВыбМаршрут);
	Иначе
		СтруктураОтбора.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	
	мМассивСтрок = ВыработкаСотрудников.НайтиСтроки(СтруктураОтбора);
	Если мМассивСтрок.Количество() = 0 Тогда
		ТекСтрокаВыработки = ВыработкаСотрудников.Добавить();
		ТекСтрокаВыработки.Сотрудник = ВыбСотрудник;
		ТекСтрокаВыработки.ПараметрВыработки = ПараметрВыработки;
		ТекСтрокаВыработки.Подразделение = ВыбПодразделение;
		ТекСтрокаВыработки.Контрагент = ВыбКонтрагент;
		ТекСтрокаВыработки.ОбъектСтроительства = ВыбОбъектСтроительства;
		ТекСтрокаВыработки.Маршрут = ВыбМаршрут;
	Иначе
		ТекСтрокаВыработки = мМассивСтрок[0];
	КонецЕсли;
	Если флЗамещать Тогда
		//очистим все строки с указанным сотрудником и парам. выработки, кроме найденной строки
		Если флУдалитьСтрокиБезДопАналитик Тогда
			СтруктураОтбора = Новый Структура("Сотрудник, ПараметрВыработки", ВыбСотрудник, ПараметрВыработки);
			мМассивСтрок = ВыработкаСотрудников.НайтиСтроки(СтруктураОтбора);
			Для Каждого ТекСтрока Из мМассивСтрок Цикл
				Если ТекСтрока <> ТекСтрокаВыработки Тогда
					ВыработкаСотрудников.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			//чистим заодно и доп. аналитики
			ТекСтрокаВыработки.Подразделение = Неопределено;
			ТекСтрокаВыработки.Контрагент = Неопределено;
			ТекСтрокаВыработки.ОбъектСтроительства = Неопределено;
			ТекСтрокаВыработки.Маршрут = Неопределено;
		КонецЕсли;
		ТекСтрокаВыработки.Количество = КоличествоВыработки;
	Иначе //приплюсуем к тому что есть уже
		ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + КоличествоВыработки;
	КонецЕсли;
	
	Если ТекСтрокаВыработки.Количество = 0 Тогда
		ВыработкаСотрудников.Удалить(ТекСтрокаВыработки);
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуВыработкиСотрудника()


//Процедура сворачивает выработку сотрудников по настройкам учета выработки согласно учетной политике
//Перед сверткой, если по аналитике (напр. Подразделение) не ведется учет, то она заполняется пустыми значениями
//
Процедура СвернутьВыработкуСотрудниковпоУчетнойПолитике()
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	Для Каждого ТекСтрока Из ВыработкаСотрудников Цикл
		Если НЕ УчетВыработкиПоКонтрагентам Тогда
			ТекСтрока.Контрагент = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			ТекСтрока.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрока.ОбъектСтроительства = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоМаршрутам Тогда
			ТекСтрока.Маршрут = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства) ИЛИ (НЕ УчетВыработкиПоМаршрутам) Тогда
		ВыработкаСотрудников.Свернуть("Сотрудник, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут", "Количество");
	КонецЕсли;
КонецПроцедуры
//Процедура рассчитывает расход ГСМ
//
//------------------ Описание алгоритмов-------------------------------------------------
//Для автобусов нормируемое значение расхода топлива рассчитывается по следующему соотношению:
//	Qн = 0,01 x Hs x S x (1 + 0,01 x D) + Нот x Т,             (2)
//где:
//Qн - нормативный расход топлива, литры;
//Hs - транспортная норма расхода топлива на пробег автобуса, л/100 км с учетом нормируемой по классу
//и назначению автобуса загрузкой пассажиров);
//S - пробег автобуса, км;
//Нот - норма расхода топлива при использовании штатных независимых отопителей на работу отопителя
//(отопителей), л/час;
//Т - время работы автомобиля с включенным отопителем, час;
//D - поправочный коэффициент (суммарная относительная надбавка или снижение) к норме в процентах.
//
//======================================================================================================
//
//Для грузовых бортовых автомобилей и автопоездов нормируемое значение расхода топлива рассчитывается
//по следующему соотношению:
//	Qн = 0,01 x (Hsan x S + Hw x W) x (1 + 0,01 x D),          (3)
//где:
//Qн - нормативный расход топлива, литры;
//S - пробег автомобиля или автопоезда, км;
//Hsan - норма расхода топлива на пробег автомобиля или автопоезда в снаряженном состоянии без груза:
//Hsan = Hs + Hg x Gпр, л/100 км, где
//Hs - базовая норма расхода топлива на пробег автомобиля (тягача) в снаряженном состоянии, л/100 км
//(Hsan = Hs, л/100 км, для одиночного автомобиля, тягача);
//Hg - норма расхода топлива на дополнительную массу прицепа или полуприцепа, л/100 т.км;
//Gпр - собственная масса прицепа или полуприцепа, т;
//Hw - норма расхода топлива на транспортную работу, л/100 т.км,
//W - объем транспортной работы, т.км: W = Gгр x Sгр (где Gгр - масса груза, т; Sгр - пробег с грузом, км);
//D - поправочный коэффициент (суммарная относительная надбавка или снижение) к норме в процентах.
//
//======================================================================================================
//
//Для автомобилей-самосвалов и самосвальных автопоездов нормируемое значение расхода топлива рассчитывается
//по следующему соотношению:
//	Qн = 0,01 x Hsanc x S x (1 + 0,01 x D) + Hz x Z,           (4)
//где:
//Qн - нормативный расход топлива, литры;
//S - пробег автомобиля-самосвала или автопоезда, км;
//Hsanc - норма расхода топлива автомобиля-самосвала или самосвального автопоезда:
//Hsanc = Hs + Hw x (Gпр + 0,5 x q), л/100 км, где
//Hs - базовая норма расхода топлива автомобиля-самосвала в снаряженном состоянии без груза или транспортная норма
//с учетом транспортной работы с коэффициентом загрузки 0,5 л/100 км;
//Hw - норма расхода топлива на транспортную работу автомобиля-самосвала (если при расчете Нs не учтен коэффициент 0,5)
//и на дополнительную массу самосвального прицепа или полуприцепа, л/100 т.км;
//Gпр - собственная масса самосвального прицепа, полуприцепа, т;
//q - грузоподъемность прицепа, полуприцепа (0,5 х q - с коэффициентом загрузки 0,5), т;
//Hz - дополнительная норма расхода топлива на каждую ездку с грузом автомобиля-самосвала, автопоезда, л;
//Z - количество ездок с грузом за смену;
//D - поправочный коэффициент (суммарная относительная надбавка или снижение) к норме в процентах.
//
//======================================================================================================
//
//Нормативный расход топлива для спецавтомобилей, выполняющих основную работу в период стоянки, опред. след. образом:
//	Qн = (0,01 x Hsc x S + Нт x Т) x (1 + 0,01 x D), литры     (5)
//где: Hsc - индивидуальная норма расхода топлива на пробег спецавтомобиля, л/100 км (в случаях, когда спецавтомобиль
//предназначен также для перевозки груза, индивидуальная норма рассчитывается с учетом выполнения транспортной работы:
//Hsc' = Hsc + Hw x W);
//S - пробег спецавтомобиля к месту работы и обратно, км;
//Нт - норма расхода топлива на работу специального оборудования, л/час или литры на выполняемую операцию
//(заполнение цистерны и т.п.);
//Т - время работы оборудования, час. или количество выполненных операций;
//D - суммарная относительная надбавка или снижение к норме, в процентах (при работе оборудования применяются только
//надбавки на работу в зимнее время и в горных местностях).
//
//======================================================================================================
//
//Нормативный расход топлива для спецавтомобилей, выполняющих основную работу в процессе передвижения,
//определяется следующим образом:
//	Qн = 0,01 x (Hsc x S' + Hs'' x S'') x (1 + 0,01 x D), литры (6)
//где: Hsc - индивидуальная норма расхода топлива на пробег спецавтомобиля, л/100 км;
//S' - пробег спецавтомобиля к месту работы и обратно, км;
//Hs'' - норма расхода топлива на пробег при выполнении специальной работы во время передвижения, л/100 км;
//S'' - пробег автомобиля при выполнении специальной работы при передвижении, км.
Процедура РасчетРасходаГСМ(Заголовок="", Отказ="",ПроверитьМодифицированность=Ложь) Экспорт 
	
	ТБл = ПОлучитьТблНормГСМ(Температура);
	
	Для каждого Стр из РасходГСМ Цикл
		Если Стр.Пробег=0 Тогда Продолжить; КонецеСЛИ;
		С = Тбл.Найти(Стр.ОБорудованиеРабота,"ОборудованиеРабота");
		Если с=Неопределено ТОгда
			С = тбл.Добавить();
			С.коэф100км = 0;
			С.ОБорудованиеРабота = Стр.ОБорудованиеРабота;
			С.ЕстьБак = Ложь;
		КонецЕСЛИ;
		С.ПРобег = Стр.Пробег;
	КонецЦиклА;
	
	Тбл.Свернуть("ОборудованиеРабота,ЕстьБак","Норма,Пробег,ТКоэф,РасходПоНорме,коэф100км,Огр");
	
	Расход = ОстатокТопливаВыезд - ОстатокТопливаВозврат+ВыданоГСМ;
	Расход1 = ОстатокТопливаВыезд1 - ОстатокТопливаВозврат1+ВыданоГСМ1;
	
	Для каждого Стр из Тбл Цикл
		
		Если (Стр.ЕстьБак и Расход1<>0) или  (Стр.ЕстьБак=Ложь и Расход<>0) Тогда //Нет расхода - нет нормы
			Стр.РасходПоНорме = Стр.Норма * Стр.Пробег;
		КонецЕСЛИ;
		
		если  Стр.Коэф100км<>0 тогда
			Стр.Норма = Стр.Норма/Стр.Коэф100км;
		конецесли;
		
	КонецЦикла;
	
	//Чтобы не происходило модифицированность объекта
	ЕстьИзменения = Истина;
	Если ПроверитьМодифицированность ТОгда
		ЕстьИзменения = Ложь;
		пТБл = Тбл.Скопировать();
		ДЛя каждого Стр из РасходГСМ Цикл
			НовСтр = пТбл.Добавить();
			ЗаполнитьЗначенияСвойств(НовсТр,Стр);
		КонецЦиклА;
		
		пТбл.Колонки.Добавить("Инд",Новый ОписаниеТипов("Число"));
		пТбл.ЗаполнитьЗначения(1,"Инд");
		
		пТбл.свернуть("ОБорудованиеРабота,Пробег,Норма,РасходПоНорме","Инд");
		Для каждого Стр из пТбл Цикл
			Если Стр.Инд = 1 ТОгда
				ЕстьИзменения = Истина;
				прервать;
			КонецесЛИ;
		КонецЦиклА;
	КонецесЛИ;
	
	Если ЕстьИзменения ТОгда
		РасходГСМ.Загрузить(Тбл);
	КонецеСЛИ;
	
КонецПроцедуры //РасчетРасходаГСМ()

Процедура РасчетРасходаТЖ(Заголовок,Отказ) Экспорт
	
	РасходТехническихЖидкостей.Очистить();
	
	//получим нормы расхода тех. жидкостей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатНормыРасходаТехническихЖидкостейСрезПоследних.Норма,
	|	уатНормыРасходаТехническихЖидкостейСрезПоследних.НормаНаМоточас,
	|	уатНормыРасходаТехническихЖидкостейСрезПоследних.МодельТС,
	|	уатНормыРасходаТехническихЖидкостейСрезПоследних.ГСМ
	|ИЗ
	|	РегистрСведений.уатНормыРасходаТехническихЖидкостей.СрезПоследних(&ДатаСреза, МодельТС В (&МоделиТС))
	|		КАК уатНормыРасходаТехническихЖидкостейСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаВозвращения);
	списМоделей = Новый СписокЗначений;
	списМоделей.Добавить(ТранспортноеСредство.Модель);
	списМоделей.Добавить(ТранспортноеСредство);
	Для Каждого ТекСтрока Из Прицепы Цикл
		списМоделей.Добавить(ТекСтрока.ТС.Модель);
		списМоделей.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	Запрос.УстановитьПараметр("МоделиТС", списМоделей);
	тблНормыРасходаТЖ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрокаРасходГСМ Из РасходГСМ Цикл
		Если (НЕ ТекСтрокаРасходГСМ.Активен) ИЛИ
			ТекСтрокаРасходГСМ.РасходПоФакту = 0 ИЛИ
			ТекСтрокаРасходГСМ.ГСМ <> ТекСтрокаРасходГСМ.ТС.Модель.ОсновноеТопливо Тогда
			Продолжить;
		КонецЕсли;
		
		//сначала ищем по конкретному ТС
		мНайденныеСтроки = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС", ТекСтрокаРасходГСМ.ТС));
		Если мНайденныеСтроки.Количество() = 0 Тогда //если по ТС не нашли, ищем по модели
			мНайденныеСтроки = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС", ТекСтрокаРасходГСМ.ТС.Модель));
		КонецЕсли;
		
		флНаличиеСпидометра = ТекСтрокаРасходГСМ.ТС.Модель.НаличиеСпидометра;
		
		Для Каждого ТекСтрокаТЖ Из мНайденныеСтроки Цикл
			НоваяСтрока = РасходТехническихЖидкостей.Добавить();
			НоваяСтрока.ТС         = ТекСтрокаРасходГСМ.ТС;
			НоваяСтрока.ГСМ        = ТекСтрокаТЖ.ГСМ;
			НоваяСтрока.Количество = ТекСтрокаРасходГСМ.РасходПоФакту * ТекСтрокаТЖ.Норма / 100;
			
			Если (НЕ флНаличиеСпидометра) И (ТекСтрокаТЖ.НормаНаМоточас > 0) Тогда //счетчик моточасов
				Если ТекСтрокаРасходГСМ.ТС = ТранспортноеСредство Тогда //ТС в шапке
					мМоточасы = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения);
				Иначе //прицеп или оборудование
					ТекСтрокаПрицепа = Прицепы.Найти(ТекСтрокаРасходГСМ.ТС, "ТС");
					Если ТекСтрокаПрицепа <> Неопределено Тогда
						мМоточасы = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрокаПрицепа.СчетчикМЧВыезда, ТекСтрокаПрицепа.СчетчикМЧВозвращения);
					КонецЕсли;	
				КонецЕсли;
				НоваяСтрока.Количество = НоваяСтрока.Количество + мМоточасы*ТекСтрокаТЖ.НормаНаМоточас;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьРасходГСМ(Отказ)
	
	итРасходПоДокументу =   ОстатокТопливаВыезд1 + ВыданоГСМ1 - ОстатокТопливаВозврат1 +
		 					ОстатокТопливаВыезд  + ВыданоГСМ  - ОстатокТопливаВозврат;
	
	Если итРасходПоДокументу <= 0 или мЭтоПривлеченныйТС Тогда Возврат; КонецЕСЛИ;
	
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "
				   | SELECT
				   |  	 уатПутевойЛистЗадание.Контрагент КАК Контрагент,
				   |  	 уатПутевойЛистЗадание.ЦехКонтрагента КАК Цех,
				   |  	 уатПутевойЛистЗадание.Номенклатура КАК Номенклатура,
				   |     уатПутевойЛистЗадание.КоличествоКмПорожний Пробег,
				   |     Услуга1+Услуга3+КоличествоЧасов Часы,
				   |     0 КоличествоЕздок
				   | INTO ВрТбл
				   | FROM  Документ.уатПутевойЛист.Задание уатПутевойЛистЗадание
				   | WHERE Ссылка = &Ссылка
				   |
				   | UNION ALL 
				   |
				   | SELECT
				   |  	 уатПутевойЛистРабота.Подразделение КАК Контрагент,
				   |  	 уатПутевойЛистРабота.ОбъектСтроительства КАК Цех,
				   |  	 уатПутевойЛистРабота.Номенклатура КАК Номенклатура,
				   |     уатПутевойЛистРабота.КоличествоКмПорожний Пробег,
				   |     КоличествоЧасов Часы,
				   |     КоличествоЕздок КоличествоЕздок
				   |
				   | FROM  Документ.уатПутевойЛист.Работа уатПутевойЛистРабота
				   | WHERE Ссылка = &Ссылка
				   | ;
				   |
				   | ///////////////////////////////////////////////////////////
				   |
				   |
				   |
				   |
				   |
				   |
				   |ВЫБРАТЬ
	               |	уатПутевойЛистЗадание.Контрагент КАК Контрагент,
	               |	уатПутевойЛистЗадание.Цех КАК Цех,
	               |	уатПутевойЛистЗадание.Номенклатура КАК Номенклатура,
	               |	ВЫБОР КОГДА уатПутевойЛистРасходГСМ.ОБорудованиеРабота.ПараметрРасхода = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботеЗаменяетОдометр)  THEN  уатПутевойЛистРасходГСМ.Пробег ELSE 0 END Наработка,
	               |	ISNULL (ВЫБОР
	               |		КОГДА уатПутевойЛистРасходГСМ.ОБорудованиеРабота.ПараметрРасхода = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
				   //|				И уатПутевойЛистЗадание.Пробег <> 0
	               |			ТОГДА уатПутевойЛистЗадание.Пробег
				   |		КОГДА уатПутевойЛистРасходГСМ.ОБорудованиеРабота.ПараметрРасхода = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.КоличествоЕздок)
				   //|				И уатПутевойЛистЗадание.КоличествоОпераций <> 0
				   |			ТОГДА уатПутевойЛистЗадание.КоличествоЕздок
				   //|		КОГДА уатПутевойЛистРасходГСМ.ОБорудованиеРабота.ПараметрРасхода = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ТнКм)
				   //|				И уатПутевойЛистЗадание.КоличествоТонн * уатПутевойЛистЗадание.КоличествоКмГруз <> 0
				   //|			ТОГДА уатПутевойЛистЗадание.КоличествоТонн * уатПутевойЛистЗадание.КоличествоКмГруз
	               |		ИНАЧЕ уатПутевойЛистЗадание.Часы
	               |	КОНЕЦ,0) КАК пробегКА,
				   |    уатПутевойЛистЗадание.Часы КоличествоЧасов,
	               |	уатПутевойЛистРасходГСМ.ОБорудованиеРабота КАК ОБорудованиеРабота,
	               |	уатПутевойЛистРасходГСМ.РасходПоНорме КАК РасходПоНорме,
	               |	итНорма.итКол КАК итРасходПоНорме,
	               |	уатПутевойЛистРасходГСМ.ТКоэф КАК ТКоэф,
	               |	уатПутевойЛистРасходГСМ.Пробег КАК Пробег,
	               |	уатПутевойЛистРасходГСМ.Огр КАК Огр,
	               |	уатПутевойЛистРасходГСМ.ОБорудованиеРабота.ПараметрРасхода КАК ОБорудованиеРаботаПараметрРасхода,
	               |	уатПутевойЛистРасходГСМ.ОБорудованиеРабота.ЕстьБак КАК ЕстьБак
	               |ИЗ
	               |	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВРТбл КАК уатПутевойЛистЗадание
	               |		ПО Истина
				   |        INNER JOIN (Выбрать 
				   |						ОБорудованиеРабота.ЕстьБак как ЕстьБак, 
				   |						SUM(РасходПоНорме) итКол 
				   |					из Документ.уатПутевойЛист.РасходГСМ КАК ТБл 
				   |					WHERE Ссылка = &Ссылка 
				   |					GROUP BY ОБорудованиеРабота.ЕстьБак) как итНорма ON итНорма.ЕстьБак = уатПутевойЛистРасходГСМ.ОБорудованиеРабота.ЕстьБак
	               |ГДЕ
	               |	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
	               |	И уатПутевойЛистРасходГСМ.РасходПоНорме <> 0
	               |ИТОГИ
	               |	СУММА(пробегКА),
	               |	СУММА(Пробег)
	               |ПО
	               |	ЕстьБак,
	               |	ОБорудованиеРабота"; 
				   
	 Запрос.УстановитьПараметр("Ссылка",ССылка);
	 Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	 Если Выборка.Количество() = 0 Тогда
		 Сообщить("Не данных для списания топлива!");
		 Отказ = Истина;
		 Возврат;
	 КонецЕСЛИ;
	 
	Рег = Движения.уатРасходГСМнаТС;
	Рег.Записывать = Истина;
	итНаработка = 0;
	
	 Пока Выборка.Следующий() Цикл
		 
		 Если Выборка.ЕстьБак ТОгда
			 итРсх = ОстатокТопливаВыезд1 + ВыданоГСМ1 - ОстатокТопливаВозврат1;
		 ИНаче
			 итРсх = ОстатокТопливаВыезд  + ВыданоГСМ  - ОстатокТопливаВозврат;
		 КонецЕслИ;
		 Если итРсх = 0 ТОгда Продолжить; КонецеСЛИ;
		 РасходОсн = 0;
		 
		 ВыбРаб = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		 ПОка ВыбРаб.Следующий() Цикл
			 
			 итНорма = 0;
			 итПробег = 0;
			 итОгр = 0;
			 ВыбКА = ВЫбРаб.Выбрать();
			 Пока ВыбКА.Следующий() Цикл
				 
				 итНаработка = итНаработка + ВыбКА.Наработка;
				 
				 Если  ВЫбРаб.ПробегКА = 0 ТОгда
					 пРАсходПоНорме = ОКР(ВЫбКА.РасходПоНорме * (1/ВЫбКА.Количество()),3,1);
				 ИНАче
					 пРАсходПоНорме = ОКР(ВЫбКА.РасходПоНорме * (ВЫбКА.ПробегКА/ВЫбРаб.ПробегКА),3,1);
				 КонецЕСЛИ;
				 Если пРАсходПОнОрме = 0 Тогда ПродолжитЬ; КонецЕСЛИ;
				 
				 Зап = Рег.Добавить();
				 Зап.Период = Дата;
				 Зап.Регистратор = ссылка;
				 Зап.ТС = ТранспортноеСредство;
				 Зап.Оборудование = ВыбКА.ОборудованиеРабота;
				 Зап.Контрагент = ВыбКА.Контрагент;
				 Зап.Цех = ВыбКА.Цех;
				 Зап.Номенклатура = ВыбКА.Номенклатура;
				 Зап.КоличествоЧасов = ВыбКА.КоличествоЧасов;
				 
				 Зап.РАсходПоНорме = пРАсходПоНорме;
				 Зап.РасходПоФакту = ОКР(итРсх * (Зап.РАсходПоНорме/ВыбКа.итРасходПоНорме),3,1);
				 Зап.ПоказательРасчета = ОКР(ВЫбКА.Пробег * (Зап.РАсходПоНорме/ВыбКа.РасходПоНорме),3,1);
				 Зап.ОграничениеРасхода = ОКР(ВЫбКА.Огр * (Зап.РАсходПоНорме/ВыбКа.РасходПоНорме),3,1);
				 
				 Зап.Водитель = Водитель1;
				 Зап.БакОсновной = Не Выборка.ЕстьБак;
				 Зап.Номенклатура = Неопределено;
				 Зап.ТКоэф = ВыбКА.ТКоэф;
				 
				 РасходОсн  = РАсходОСн + Зап.РасходПоФакту;
				 итНОрма    = итНОрма   + Зап.РасходПоНорме;
				 итПробег   = итПробег  + Зап.ПоказательРасчета;
				 итОгр      = итОгр     + Зап.ОграничениеРасхода;
				 
				 ВыбРабРасходПоНорме =  ВЫбКА.РасходПоНорме;
				 ВыбРабПробег =  ВЫбКА.Пробег;
				 ВыбРабОГр =  ВЫбКА.Огр;
				 
			 КонецЦикла;
			 
			 Зап.РасходПоНорме = Зап.РасходПоНорме - (ВыбРабРасходПоНорме - итНОрма);
			 Зап.ПоказательРасчета = Зап.ПоказательРасчета - (ВыбРабПробег - итПробег);
			 Зап.ОграничениеРасхода = Зап.ОграничениеРасхода - (ВыбРабОГр - итОгр);
			 
		 КонецЦикла;
		 
		 Зап.РасходПоФакту = Зап.РасходПоФакту + (итРсх - РасходОСн);
		 
	 КонецЦикла;
	 
	 Если Движения.уатВыработкаТС[0].Количество = 0 Тогда
		Движения.уатВыработкаТС[0].Количество = итНаработка;	 
	 КонецЕСЛИ;
	 
	 
	 Если Рег.Итог("РасходПоФакту") <> итРасходПоДокументу Тогда
		 Сообщить("Ошибка расчета списания топлива!");
		 отказ=Истина;
	 КонецЕСЛИ;
	
 КонецПроцедуры
 
 Процедура ОтразитьВыдачуГСМ(Отказ)
	 
	 Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки["УчетПоЗВ"]) Тогда
		 Возврат;
	 КонецЕСЛИ;
	 
	 Рег = Движения.уатОстаткиГСМнаТС;
	 Рег.Записывать = Истина;
	 
	 ДЛя каждого Стр из Заправки Цикл
		 Если Стр.Азс = Справочники.уатАЗС.Слив Тогда ПродолжитЬ; КонецеСЛИ;
		 
		 Зап = Рег.Добавить();
		 
		 ЗаполнитьЗначенияСвойств(Зап,Стр);
		 Зап.ТС = ТранспортноеСредство;
		 Зап.Партия = Ссылка;
		 Зап.БакОсновной = Не ЗначениеЗаполнено(Стр.ОборудованиеРабота);
		 Зап.ПЛ = ССылка;
		 Зап.Период = Дата;
		 Зап.Водитель = Водитель1;
		 зап.ВидДвижения=ВидДвиженияНакопления.Приход;
		 Зап.Регистратор = ссылка;
		 
	 КонецЦикла;
	 
КонецПроцедуры

// РАСЧЕТ З/П СОТРУДНИКОВ

// Функция рассчитывает доплаты (за ночные и прочие) к з/п по пут. листу
//Функция вызывается из документа "уатПутевойЛист" при выборе действия расчета. 
//
Процедура РасчетДоплатЗП(вхСотрудник, вхТарифыЗП, вхВидДоплаты)
	тблЗарплатаВрем = Зарплата.Выгрузить();
	тблЗарплатаВрем.Очистить();
	тблЗарплатаВрем.Колонки.Добавить("ВесФильтров");
	
	мТарифыДоплата = вхТарифыЗП.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", вхВидДоплаты));
	Для счТарифы = 0 По мТарифыДоплата.Количество() - 1 Цикл
		ТекСтрока = мТарифыДоплата[счТарифы];
		мВидНачисления = ТекСтрока.ВидНачисления;
		ВесФильтровВрем = 0;
		СтруктураОбластьДействия = Новый Структура("ТС, МодельТС", ТранспортноеСредство, ТранспортноеСредство.Модель);
		ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
		Если НЕ уатОбщегоНазначения.уатТарифЗПВОбластиДействия(ТекСтрока.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
			Продолжить;
		КонецЕсли;
		
		мСумма = 0;
		
		Для Каждого ТекСтрокаИсточник Из мВидНачисления.БазовыеВидыРасчета Цикл
			мЗП = Зарплата.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			
			//просуммируем все начисления данного вида
			Для счЗП = 0 По мЗП.Количество() - 1 Цикл
				мСумма = мСумма + мЗП[счЗП].Сумма;
			КонецЦикла;	
		КонецЦикла;	
		
		НоваяСтрока 					= тблЗарплатаВрем.Добавить();
		НоваяСтрока.ВидНачисления 		= мВидНачисления;
		НоваяСтрока.Сотрудник 			= вхСотрудник;
		НоваяСтрока.Сумма 				= Окр(мСумма * ТекСтрока.ТарифЗП.Тариф / 100,2);
		НоваяСтрока.РучнойВвод 			= Ложь;
		НоваяСтрока.ВесФильтров		= ВесФильтровВрем;
		НоваяСтрока.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
	КонецЦикла;
	
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем);
КонецПроцедуры

//Процедура удаляет "лишние" тарифы из блока з/п (лишним считается тариф с меньшим весом совпадения фильтров)
// тблЗарплатаВрем - таблица со структурой аналогичной ТЧ Зарплата, плюс доп. поля сортировки
// СтрокаДопСортировка - строка доп поля таблицы тблЗарплатаВрем, доп. аналитика для отбора "нужных" тарифов
Процедура УдалитьЛишниеТарифыЗП(тблЗарплатаВрем, СтрокаДопСортировка = Неопределено)
	Если тблЗарплатаВрем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//удаляем сначала лишние тарифы с отключенным флагом "Построчно" (общие тарифы).
	//Если вес фильтра найденных построчных тарифов выше, чем вес фильтра общего тарифа,
	//то последний является лишним и будет удален
	Если СтрокаДопСортировка = Неопределено Тогда
		тблЗарплатаВрем.Сортировать("ВесФильтров УБЫВ");
		МаксВесФильтров = тблЗарплатаВрем[0].ВесФильтров;
		Сч = тблЗарплатаВрем.Количество();
		Пока Сч > 0 Цикл
			Сч = Сч - 1;
			Если тблЗарплатаВрем[Сч].ВесФильтров <> МаксВесФильтров И тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов = 0 Тогда
				тблЗарплатаВрем.Удалить(Сч);
			КонецЕсли;
		КонецЦикла;
	Иначе
		тблЗарплатаВрем.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
		мсвНайденныхДопАналитикТарифов = Новый Массив;
		
		ТекАналитикаВрем = "";
		ПострочныйТарифИмеетМаксимальныйВес = Ложь;
		мсвСтрокДляУдаления = Новый Массив;
		Для каждого ТекСтрока Из тблЗарплатаВрем Цикл
			ТекАналитика = ТекСтрока[СтрокаДопСортировка];
			Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
				МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
				ТекАналитикаВрем = ТекАналитика;
				ПострочныйТарифИмеетМаксимальныйВес = (ТекСтрока.НомерСтрокиДляПострочныхТарифов <> 0);
				Продолжить;
			КонецЕсли;
			
			//вес фильтров в тек. строке ниже, значит ее удаляем
			Если ТекСтрока.ВесФильтров <> МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
				
				//ТОНКИЙ МОМЕНТ! вес фильтров в текущей строке равен максимальному,
				//но максимальный вес также соответствует и построчному тарифу
				//значит удаляем общий тариф
			ИначеЕсли ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0
				И ПострочныйТарифИмеетМаксимальныйВес Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла; 
		Для Каждого ТекСтрокаУдаления Из мсвСтрокДляУдаления Цикл
			тблЗарплатаВрем.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	//удаляем лишние тарифы с включенным флагом "Построчно"
	//(для них НомерСтроки во временной таблице ненулевой и соответствует номеру строки Задания)
	тблЗарплатаВремПострочныеТарифы = тблЗарплатаВрем.Скопировать();
	тблЗарплатаВремПострочныеТарифы.Очистить();
	Если тблЗарплатаВремПострочныеТарифы.Колонки.Найти("НомерСтрокиДляПострочныхТарифов") <> Неопределено Тогда
		тблЗарплатаВрем.Сортировать("НомерСтрокиДляПострочныхТарифов УБЫВ");
		МаксНомерСтроки = тблЗарплатаВрем[0].НомерСтрокиДляПострочныхТарифов;
		Для Сч = 1 По МаксНомерСтроки Цикл
			тблЗарплатаВремПоСтроке = тблЗарплатаВрем.Скопировать();
			СчПоСтроке = тблЗарплатаВремПоСтроке.Количество()-1;
			Пока СчПоСтроке >= 0 Цикл
				Если тблЗарплатаВремПоСтроке[СчПоСтроке].НомерСтрокиДляПострочныхТарифов <> Сч Тогда
					тблЗарплатаВремПоСтроке.Удалить(СчПоСтроке);
				КонецЕсли;
				СчПоСтроке = СчПоСтроке - 1;
			КонецЦикла;
			
			//Если тблЗарплатаВремПоСтроке.Количество() < 2 Тогда //если тариф найден один или не найден, то оставляем его как есть
			//	Если тблЗарплатаВремПоСтроке.Количество() = 1 Тогда
			//		НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
			//		ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[0]);
			//	КонецЕсли;
			//	
			//	Продолжить;
			//КонецЕсли;
			
			Если СтрокаДопСортировка = Неопределено Тогда
				МаксВесФильтровДляОбщихТарифов = 0;
				Для Каждого ТекСтрока Из тблЗарплатаВрем Цикл
					Если ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 И ТекСтрока.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
						МаксВесФильтровДляОбщихТарифов = ТекСтрока.ВесФильтров;
					КонецЕсли;
				КонецЦикла;
				
				тблЗарплатаВрем1 = тблЗарплатаВрем.Скопировать();
				тблЗарплатаВрем1.Сортировать("ВесФильтров УБЫВ");
				МаксВесФильтровДляОбщихТарифов = тблЗарплатаВрем1[0].ВесФильтров;
				
				тблЗарплатаВремПоСтроке.Сортировать("ВесФильтров УБЫВ");
				МаксВесФильтров = тблЗарплатаВремПоСтроке[0].ВесФильтров;
				Сч = тблЗарплатаВремПоСтроке.Количество();
				Пока Сч > 0 Цикл
					Сч = Сч - 1;
					Если тблЗарплатаВремПоСтроке[Сч].ВесФильтров = МаксВесФильтров И тблЗарплатаВремПоСтроке[Сч].ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
						НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[Сч]);
					КонецЕсли;
				КонецЦикла;
			Иначе
				тблЗарплатаВремПоСтроке.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
				мсвНайденныхДопАналитикТарифов = Новый Массив;
				
				ТекАналитикаВрем = "";
				мсвСтрокДляУдаления = Новый Массив;
				Для каждого ТекСтрока Из тблЗарплатаВремПоСтроке Цикл
					ТекАналитика = ТекСтрока[СтрокаДопСортировка];
					Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
						МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
						ТекАналитикаВрем = ТекАналитика;
						
						МаксВесФильтровДляОбщихТарифов = 0;
						Для Каждого ТекСтрокаМаксВес Из тблЗарплатаВрем Цикл
							Если ТекСтрокаМаксВес.НомерСтрокиДляПострочныхТарифов = 0 И ТекСтрокаМаксВес[СтрокаДопСортировка] = ТекАналитика
								И ТекСтрокаМаксВес.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
								МаксВесФильтровДляОбщихТарифов = ТекСтрокаМаксВес.ВесФильтров;
							КонецЕсли;
						КонецЦикла;
						//Продолжить;
					КонецЕсли;
					
					Если ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И ТекСтрока.ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
						НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, ТекСтрока);
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
		
		//удаляем все построчные тарифы из входной таблицы тблЗарплатаВрем
		//и дабавляем обработанные (очищенные от лишних) построчные тарифы в туже таблицу тблЗарплатаВрем
		Сч = тблЗарплатаВрем.Количество()-1;
		Пока Сч >= 0 Цикл
			Если тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов <> 0 Тогда
				тблЗарплатаВрем.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		Для Каждого ТекСтрокаПостр Из тблЗарплатаВремПострочныеТарифы Цикл
			НоваяСтрокаВрем = тблЗарплатаВрем.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВрем, ТекСтрокаПостр);
		КонецЦикла;
	КонецЕсли;
	
	//заливаем обработанную временную таблицу тарифов в ТЧ Зарплата
	Для Каждого ТекСтрокаВрем Из тблЗарплатаВрем Цикл
		Если ТекСтрокаВрем.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВрем);
	КонецЦикла;
	
	тблЗарплатаВрем.Очистить();
КонецПроцедуры

Процедура ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия)
	Если Прицепы.Количество() > 0 Тогда
		мсвПрицепы = новый Массив;
		Для Каждого ТекСтрока Из Прицепы Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
				мсвПрицепы.Добавить(ТекСтрока.ТС);
			КонецЕсли;
		КонецЦикла;
		Если мсвПрицепы.Количество() > 0 Тогда
			СтруктураОбластьДействия.Вставить("Прицепы", мсвПрицепы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Обработка изменения реквизитов документа
// Параметры:
//  Имя			- Строка			- Имя реквизита документа с полным путем (например Товары.Номенклатура).
//  ЭтаФорма	- Форма				- Ссылка на форму документа. Если значение неопределено,
// производится программная обработка реквизитов.
//  ТекСтрока	- СтрокаТабличнойЧасти - Ссылка на строку табличной части документа, реквизит которой обрабатывается.
//										 Имеет смысл только для табличных частей документов.
//  ДопПараметры - Структура - Структура, содержащая дополнительные параметры обработки реквизита.
// Возвращаемое значение:
//   Булево   - Результат выполнения обработки.
Функция ОбработкаРеквизита(Имя,ТекСтрока=Неопределено,ЭтаФорма=Неопределено,ДопПараметры=Неопределено) Экспорт
КонецФункции // ОбработкаРеквизита()

// Процедура устанавливает дату "Действителен до" документа.
//
Процедура УстановитьДействителенДоПоУмолчанию() Экспорт
	мСрокДействияПутевогоЛиста = мСрокиДействияПЛ[Организация];
	
	Если мСрокДействияПутевогоЛиста = Неопределено Тогда
		мСрокДействияПутевогоЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста);
		мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
		мСрокиДействияПЛ.Вставить(Организация, мСрокДействияПутевогоЛиста);
	КонецЕсли;
	
	ДействителенДо = КонецДня(Дата + мСрокДействияПутевогоЛиста * 3600 * 24 + 1);
КонецПроцедуры

//Процедура рассчитывает кол-во выданного топлива в таб. части Заправки ГСМ и заносит это
//значение в табл. часть Расход ГСМ в реквизит Выдано
Процедура ПересчетВыданногоГСМ(Надпись=Неопределено) Экспорт
	
	ВыданоГСМ=0;
	ВыданоГСМ1=0;
	
	Для каждого стр из Заправки Цикл
		АЗС = Стр.АЗС;
		Если ЗначениеЗаполнено(Стр.ОборудованиеРабота) ТОгда
			ВыданоГСМ1 = ВыданоГСМ1+ Стр.Количество;
		ИНАче
			ВыданоГСМ  = ВыданоГСМ + Стр.Количество;
		КонецЕсЛИ;
	КонецЦикла;	
	
	Если Надпись<>Неопределено ТОгда
		Надпись.Заголовок = ""+Формат(ВыданоГСМ+ВыданоГСм1,"ЧДЦ=3");	
	КонецеСЛИ;
	
КонецПроцедуры //ПересчетВыданногоГСМ()

// Процедура проверяет корректность заполнения документа.
//
// Параметры:
//	СтруктураШапкиДокумента - структура шапки;
//	Отказ - сюда передается флаг корректности заполнения;
//	Заголовок - представление документа при выполнении проверки.
//
Процедура ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	
	СтруктураОбязательныхПолей = Новый Структура("Организация, ТранспортноеСредство, ДатаВыезда");
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураОбязательныхПолей, Отказ, Заголовок);
	Если Отказ Тогда Возврат КонецЕсли;
	
	//Проверим строку на уникальность!
	Если Задание.Количество()<>0 Тогда
		Т=Задание.Выгрузить(,"ИдСтроки");
		Т.Сортировать("ИдСтроки Desc");
		М=Т[0].ИдСтроки;
		Для каждого Стр из Задание Цикл
			Если Стр.ИдСтроки = 0 Тогда
				М=М+1;
				Стр.ИдСтроки = М;
			КонецЕСЛИ;
		КонецЦикла;
		
		Т = Задание.Выгрузить(,"ИдСтроки");
		Т.Колонки.Добавить("Инд");
		Т.ЗаполнитьЗначения(1,"инд");
		Т.Свернуть("ИдСтроки","инд");
		Для каждого стр из Т Цикл
			Если Стр.Инд<>1 ТОгда
				Сообщить("Ошибка уникальности строки!");
				Отказ = Истина;
				ВозвраТ;
			КонецЕСЛИ;
		КонецЦикла;
	КонецЕСЛИ;
	
	
	
	Если Рассчитан Тогда
		
		ТекстСообщОшибки = "";
		
		ТекстСообщОшибки = "";
		ПроверитьТаблицуФОВ(ТекстСообщОшибки, Отказ);
		Если ЗначениеЗаполнено(ТекстСообщОшибки) Тогда
			Сообщить("Неправильно заполнена таблица фактически отработанного времени:" + ТекстСообщОшибки, СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура проверяет корректность заполнения таблицы ФОВ
//
Процедура ПроверитьТаблицуФОВ(ТекстСообщения = "", Отказ)
	
	
	//проверка на заполненость хотя бы одного из времени дневного или ночного
	Для Каждого ТекСтрокаФОВ Из ФактическиОтработанноеВремя Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрокаФОВ.ВремяДневное) 
			И НЕ ЗначениеЗаполнено(ТекСтрокаФОВ.ВремяСделка)
			И НЕ ЗначениеЗаполнено(ТекСтрокаФОВ.ВремяРазрыв) Тогда
			ТекстСообщения = ТекстСообщения + "
			|	- в строке №" + ТекСтрокаФОВ.НомерСтроки + " не указано время!";
			Отказ = Истина;
		КонецЕсли;
		Если ТеКСтрокаФОВ.Дата < НачалоДня(ДатаВыезда) или ТекСтрокаФОВ.Дата > КонецДня(ДатаВозвращения) ТОгда
			ТекстСообщения = ТекстСообщения + "  - в строке №" + ТекСтрокаФОВ.НомерСтроки + " не верно yказана дата работы!";
		КонецЕСЛИ;
	КонецЦикла;
	
	возврат;
	//РасчетВремени();
	
	//проверка на превышение времени по каждому сотруднику общего времени по путевому листу
	тблФОВ = ФактическиОтработанноеВремя.Выгрузить().Скопировать();
	тблФОВ.Свернуть("Сотрудник", "ВремяДневное, ВремяНочное");
	Для Каждого ТекСтрФОВ Из тблФОВ Цикл
		Если ТекСтрФОВ.ВремяДневное > мВремяВНаряде Тогда
			ТекстСообщения = ТекстСообщения + "
			|	- рабочее время по сотруднику """ + ТекСтрФОВ.Сотрудник + """ ("
			+ Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрФОВ.ВремяДневное), "ЧДЦ=2; ЧРД=:")
			+ ") превышает время в наряде по путевому листу ("
			+ Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(мВремяВНаряде), "ЧДЦ=2; ЧРД=:") + ")!";
		ИначеЕсли ТекСтрФОВ.ВремяНочное > 8*((НачалоДня(ДатаВозвращения) - НачалоДня(ДатаВыезда))/(24*3600)+1)*3600 Тогда
			ТекстСообщения = ТекстСообщения + "
			|	- ночное время по сотруднику """ + ТекСтрФОВ.Сотрудник + """ ("
			+ Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрФОВ.ВремяНочное), "ЧДЦ=2; ЧРД=:")
			+ ") превышает 8 ч/сут!";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Функция проверяет ТТД по данному путевому листу
//Если ТТД нет, или есть непроведенные ТТД, то возвращается Ложь
Функция ПроверкаТТД(мТаблицаТТД, ПроизвольныеПараметрыВыработки = Неопределено, Знач ДопСообщениеРазделУчета = "") Экспорт
	мТаблицаТТД = уатОбщегоНазначения.уатТТДДляПЛ(Ссылка);
	
	ДопСообщениеРазделУчета = ?(ЗначениеЗаполнено(ДопСообщениеРазделУчета), ДопСообщениеРазделУчета, "выработки ТС");
	
	Если мТаблицаТТД.Количество() = 0 Тогда
		Если ПроизвольныеПараметрыВыработки = Неопределено Тогда
			Сообщить("Расчет " + ДопСообщениеРазделУчета + " по путевому листу №" + Номер + " не выполнен:
			|Для путевого листа не введены ТТД", СтатусСообщения.Внимание);
			Возврат Ложь;
		Иначе
			Сообщить("Расчет произвольных параметров выработки ТС по путевому листу №" + Номер + " не выполнен:
			|Для путевого листа не введены ТТД", СтатусСообщения.Внимание);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		Если Не ТекСтр.ТТД.Проведен Тогда
			Если ПроизвольныеПараметрыВыработки = Неопределено Тогда
				Сообщить("Расчет " + ДопСообщениеРазделУчета + " по путевому листу №" + Номер + " не выполнен:
				|Для путевого листа есть непроведенные ТТД", СтатусСообщения.Внимание);
				Возврат Ложь;
			Иначе
				Сообщить("Расчет произвольных параметров выработки ТС по путевому листу №" + Номер + " не выполнен:
				|Для путевого листа есть непроведенные ТТД", СтатусСообщения.Внимание);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ПроверкаТТД()

#Если Клиент Тогда
	
	// Процедура запрашивает данные по ТС.
	// Устанавливаются начальные данные по остаткам ГСМ, данные спидометра/счетчика, экипаж ТС и т.п.
	//
	// Параметры:
	//	ОстатокТопливаВыезд - остаток топлива в баке ТС при выезде, перезаполняется при выполнении процедуры;
	//	СоставТС - состав ТС (прицепы и доп. оборудование со своим баком);
	//	флЗаполнитьВодителейПоУмолчанию - признак перезаполнения водителей при инициализации ТС (можно отключить)
	//
	Процедура ИнициализацияДанныхАвтомобиля(ОстатокТопливаВыезд = 0, СоставТС=Неопределено, флЗаполнитьВодителейПоУмолчанию = ложь) Экспорт
		
		Если СоставТС<>Неопределено Тогда
			Для Каждого ТекСтрока из СоставТС Цикл
				УстановленныйТС = ТекСтрока.ТС;
				Если ЗначениеЗаполнено(УстановленныйТС) Тогда
					НоваяСтрокаПрицеп = Прицепы.Добавить();
					НоваяСтрокаПрицеп.ТС = УстановленныйТС;
					НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(УстановленныйТС, ДатаВыезда);
					
					мМодельПрицепа = УстановленныйТС.Модель;
				КонецЕсли;	
			КонецЦикла;
		КонецЕСЛИ;
			
			Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
				СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТранспортноеСредство, ДатаВыезда);
			Иначе
				СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТранспортноеСредство, ДатаВыезда);
			КонецЕсли;	
			
			//заполняем водителей
			Если флЗаполнитьВодителейПоУмолчанию Тогда
				Сотрудник2 = Неопределено;
				Сотрудник1 = Неопределено;
				Водитель2 = Неопределено;
				Водитель1 = Неопределено;
				
				СтруктураЭкипаж = уатЗащищенныеФункции.уатЭкипажТСсУчетомГрафика(ТранспортноеСредство, ДатаВыезда, Организация);
				Водитель1 = СтруктураЭкипаж.Водитель;
				Водитель2 = СтруктураЭкипаж.Водитель2;
				Сотрудник1 = СтруктураЭкипаж.Сотрудник;
				Сотрудник2 = СтруктураЭкипаж.Сотрудник2;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(УсловиеРаботы) = Истина Тогда
				УсловиеРаботы = ТранспортноеСредство.ОсновноеУсловиеРаботы;
			КонецЕсли;
			
			ВыдатьГорючее = ТранспортноеСредство.Модель.ОсновноеТопливо;
		
	КонецПроцедуры // ИнициализацияДанныхАвтомобиля()
	
#КонецЕсли

// Процедура удаляет строки из документы Заправки ГСМ, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьЗаправку(вхЗаправка, вхТС = Неопределено, вхДата = Неопределено, вхКоличество = Неопределено) Экспорт
	
	Если вхТС = Неопределено Тогда
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
		
	Иначе
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист, ТС, Дата, Количество", Ссылка, вхТС, вхДата, вхКоличество));
		
	КонецЕсли;
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхЗаправка.Заправки.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	//дЗаправкаГСМ.ПакетнаяОбработкаТиповыхДокументов = Ложь;
	Если вхЗаправка.Заправки.Количество() = 0 Тогда
		вхЗаправка.Записать();
		вхЗаправка.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхЗаправка.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхЗаправка.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы ТТД, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьТТД(вхТТД) Экспорт
	
	мСтроки = вхТТД.Выработка.НайтиСтроки(Новый Структура("ПутЛист", Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Выработка.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	мСтроки = вхТТД.Стоимость.НайтиСтроки(Новый Структура("ПутЛист", Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Стоимость.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	//вхТТД.ПакетнаяОбработкаТиповыхДокументов = Ложь;
	Если вхТТД.Выработка.Количество() = 0 Тогда
		вхТТД.Записать();
		вхТТД.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхТТД.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхТТД.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы Билетный Лист, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьБилетныйЛист(вхБилетныйЛист) Экспорт
	
	//Если вхТС = Неопределено Тогда
	
	мСтроки = вхБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
	
	//Иначе
	//	
	//	мСтроки = вхБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист, ТС, Дата, Количество", 
	//	Ссылка, вхТС, вхДата, вхКоличество));
	//	
	//КонецЕсли;
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхБилетныйЛист.Билеты.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхБилетныйЛист.Билеты.Количество() = 0 Тогда
		вхБилетныйЛист.Записать();
		вхБилетныйЛист.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхБилетныйЛист.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхБилетныйЛист.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы Билетный Лист, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьПосадочнуюВедомость(вхПосадочнаяВедомость) Экспорт
	
	мСтроки = вхПосадочнаяВедомость.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхПосадочнаяВедомость.Билеты.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхПосадочнаяВедомость.Билеты.Количество() = 0 Тогда
		вхПосадочнаяВедомость.Записать();
		вхПосадочнаяВедомость.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхПосадочнаяВедомость.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхПосадочнаяВедомость.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет документы Выручка, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьДокументыВыручка(вхВыручка) Экспорт
	
	вхВыручка.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// Установка ответственных лиц согласно учетной политике
//
Процедура УстановитьОтветственныхЛиц() Экспорт
	ОсмотрелВрач    = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВрач);
	ВыдалДиспетчер  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойДиспетчер);
	ВыпустилМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик);
	ПринялМеханик   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик);
КонецПроцедуры

//Процедура рассчитывает время по путевому листу
//
Процедура РасчетВремени() Экспорт
	
	Если НеВыполнятьАвтоРасчетФОВ=Ложь 
	   и ТранспортноеСредство.БезЗП ТОгда
	   ФактическиОтработанноеВремя.Очистить();   
	   НеВыполнятьАвтоРасчетФОВ = Истина;
	КонецеСЛИ;
	
	
	МасСотр = Новый Массив;
	МасСотр.Добавить(Водитель1);
	Если ЗначениеЗаполнено(Водитель2) и МасСотр.Найти(Водитель2) = Неопределено и (Не Водитель2Стажер) Тогда
		МасСотр.Добавить(Водитель2);
	КонецЕСЛИ;
	//Если ЗначениеЗаполнено(Сотрудник1) и МасСотр.Найти(Сотрудник1)=Неопределено Тогда
	//	МасСотр.Добавить(Сотрудник1);
	//КонецЕСЛИ;
	//Если ЗначениеЗаполнено(Сотрудник2) и МасСотр.Найти(Сотрудник2)=Неопределено Тогда
	//	МасСотр.Добавить(Сотрудник2);
	//КонецЕСЛИ;
	
	
	//переводим время из формата Дата в количество секунд
	ПродолжительностьРабочегоДняИзНастроек = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПродолжительностьРабочегоДня);
	мПродолжительностьРабочегоДня		   = (ПродолжительностьРабочегоДняИзНастроек - НачалоДня(ПродолжительностьРабочегоДняИзНастроек))/3600;
	ВремяДоОбедаИзНастроек		           = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяДоОбеда);
	мВремяДоОбеда 						   = ВремяДоОбедаИзНастроек - НачалоДня(ВремяДоОбедаИзНастроек);
	ПродолжительностьОбедаИзНастроек       = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПродолжительностьОбеда);
	мПродолжительностьОбеда 			   = ПродолжительностьОбедаИзНастроек - НачалоДня(ПродолжительностьОбедаИзНастроек);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачалоПериода(уатРегламентированныйПроизводственныйКалендарь.ДатаКалендаря,День) Дн
	               |ИЗ
	               |	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК уатРегламентированныйПроизводственныйКалендарь
				   |ГДЕ ДатаКалендаря >= &Дт и ДатаКалендаря < &Дт1 и ВидДня = Значение(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ";
				   
				   
	Запрос.УстановитьПараметр("Дт",НачалоДня(ДатаВыезда));
	Запрос.УстановитьПараметр("Дт1", КонецДня(ДатаВозвращения)+1);
	тбПрз = Запрос.Выполнить().Выгрузить();
	
	
	Тбл = ФактическиОтработанноеВремя.ВыгрузитьКолонки();
	
	времяНач = ДатаВыезда - НачалоДня(ДатаВыезда);
	времяКон = ДатаВозвращения - НачалоДня(ДатаВозвращения);
	колДней  = МАКС(1,(НачалоДня(ДатаВозвращения)-НачалоДня(датаВыезда))/(3600*24)+ 1 - 1 * ?(ВремяКон<ВРемяНач,1,0)); //пока нет проверки что дата выезда < даты возвращения
	
	итЗкзЧасыСдел = 0;
	итЗкзЧасы   = 0;//Задание.Итог("Услуга1")+Задание.Итог("Услуга3");
	итЗкзЧасыРХ = 0;//Задание.Итог("Услуга3");
	
	//+Lexx по тех.ожиданию
	итЗкзЧасыТехПростоя = 0;
	
	ВремТблЗадание = Неопределено;
	
	ТекПрицеп = Неопределено;
	Если Прицепы.Количество()<>0 Тогда
		ТекПрицеп = ПРицепы[0].ТС;
	КонецЕСЛИ;
	
	ЕстьСделка=Ложь;
	
	//Начинаем перебирать строки из ТЧ "Задание"
	Для каждого стрРаб из Задание Цикл
		
		//+Lexx по тех.ожиданию
		//Здесь что-то можем посчитать относительно "Номенклатуры" выдранной в "Задании"
		
		//Если выбрана "Номенклатура", проверяем, а не является ли она разрывом в часах
		//Если "Да", то основные часы по строке идут на часы разрыва - "итЗкзЧасыРХ"
		//Иначе на основные часы работы на Заказчика - "итЗкзЧасы"
		Если стрРаб.Номенклатура.РазрывныеЧасыОплаты ТОгда
			итЗкзЧасыРХ     = итЗкзЧасыРХ     +  СтрРаб.КоличествоЧасов;
		ИНАче
			итЗкзЧасы       = итЗкзЧасы     +  СтрРаб.КоличествоЧасов;
		КонецеСЛИ;
		
		//Получаем по текущей строке временную таблицу Прейскуранта
		ВремТблЗадание = глОбщий.КэшПрейскурантаЗапрос(ДатаВыезда,стрРаб,ТранспортноеСредство,ТипТС,,ТекПрицеп);
		Если ВремТблЗадание.Количество() = 0 Тогда ПродолжитЬ; КонецЕСЛИ; // Не можем определить вид работы
		ВремСтрЗадание = ВремТблЗадание[0]; //Берем из этой таблицы первую строку
		
		
		Если ЗначениеЗаполнено(СтрРаб.Реестр)= Ложь ТОгда
			//Всего различных услуг прикрепленных по прейскуранту может быть 6  - т.е. межет быть видно 6 дополнительных колонок в ТЧ "Задание"
			//поэтому и начинаем перебор этих возможных 6 услуг по строке "ВремСтрЗадание"
			//для нашей текущей строки "стрРаб" из ТЧ "Задание" колонки доп. услуг могут быть заполнены, а могут и нет
			Для а=1 по 6 Цикл
				
				//Проверяем, если в прейскуранте нет услуги с индексом "а" - продолжаем
				Если ВремСтрЗадание["Услуга"+а] = 0 ТОгда ПродолжитЬ; Конецесли;
				//Проверяем, если в прейскуранте нет тарифа с индексом "а" - продолжаем
				Если ВремСтрЗадание["Тариф"+а] = 0 ТОгда ПродолжитЬ; Конецесли;
				
				
				//Теперь проверяем, для текущей услуги (как для номенклатуры) в прейскуранте
				//время для оплаты водителю   - это основные часы работы или часы разрыва или часы тех. ожидания
				//за это отвечает реквизит номенклатуры "ВидЧасовОплатыВодителю"
				Если ВремСтрЗадание["ОсновныеЧасы"+а] ТОгда
					итЗкзЧасы = итЗкзЧасы + СтрРаб["Услуга"+а];	//если это основные часы - прибавляем их к основным часам работы на Заказчика
				ИНачеЕсли ВремСтрЗадание["РзрЧасы"+а] ТОгда
					итЗкзЧасыРХ = итЗкзЧасыРХ + СтрРаб["Услуга"+а]; //если это часы разрыва - прибавляем к часам разрыва
				ИНачеЕсли ВремСтрЗадание["ТехОжЧасы"+а] ТОгда
					итЗкзЧасыТехПростоя = итЗкзЧасыТехПростоя + СтрРаб["Услуга"+а]; //если это часы тех. ожидания (т.е. оплачиваемого простоя) - прибавляем к часам тех. ожидания
				КонецЕСЛИ;
			КонецЦикла;
			
		ИНАче
			ЕстьСделка = Истина;
		КонецЕСЛИ;
	КонецЦикла;
	
	
	////Заремить - начало
	//
	////!!! Это нам в общем-то не нужно - это работа с ТЧ "Работа" - она не заполняется
	//Для каждого стрРаб из Работа Цикл
	//	Если ЗначениеЗаполнено(СтрРаб.Реестр)= Ложь ТОгда
	//		итЗкзЧасы     = итЗкзЧасы     + СтрРаб.КоличествоЧасов;
	//	ИНАче
	//		ЕстьСделка = Истина;
	//	КонецЕСЛИ;
	//КонецЦикла;
	////!!! Это нам в общем-то не нужно - это работа с ТЧ "Работа" - она не заполняется
	//
	//
	////т.е. таблица пустая (при сделке это нормально)
	//Если ЕстьСделка или итЗкзЧасы=0 ТОгда
	//	ПродолжительностьРабДня = глОбщий.ПолучитьПродолжительностьДняПоГрафику(Водитель1,Дата,Организация);					
	//	итЗкзЧасыСдел = КолДней*ПродолжительностьРабДня;
	//	итЗкзЧасыСдел = Макс(0,итЗкзЧасыСдел - итЗкзЧасы);
	//КонецЕслИ;
	
	
//	ВсегоЧасов = итЗкзЧасы;	
	ВсегоЧасов = итЗкзЧасы + итЗкзЧасыТехПростоя;	
		
	//Рассчитаем план
	итПланСумма = 0;
	итПланЧасы  = 0;
	ПланСтрРаб = Неопределено;
	Если Задание.Количество()>0 ТОгда
		Если СтрРаб.КоличествоЧасов<>0 Тогда
			ПланСтрРаб = СтрРаб;
		КонецЕСЛИ;
	КонецЕСЛИ;
	Если ПланСтрРаб = Неопределено Тогда
		ПланСтрРаб = НайтиСтрокуПоследнегоПЛ();
	КонеЦЕСЛИ;
	Если ВремТблЗадание = Неопределено Тогда
		ВремТблЗадание = глОбщий.КэшПрейскурантаЗапрос(ДатаВыезда,ПланСтрРаб,ТранспортноеСредство,ТипТС,,ТекПрицеп,Контрагент,ЦехКонтрагента);
	КонецЕСЛИ;
	
	Если ВремТблЗадание.Количество() <> 0 Тогда 		
		ВремСтрЗадание = ВремТблЗадание[0];
		ПрейскурантПлан = ВремСтрЗадание.Прейскурант;
		итПланСумма = итПланСумма + ПланСтрРаб.КоличествоЧасов * ВремСтрЗадание.Тариф +  ПланСтрРаб.КоличествоКмПорожний * ВремСтрЗадание.ТарифКм;
		итПланЧасы  = итПланЧасы  + ПланСтрРаб.КоличествоЧасов;
		
		Для а=1 по 6 Цикл
			
			итПланСумма = итПланСумма + ПланСтрРаб["Услуга"+а] * ВремСтрЗадание["Тариф"+а];
			
			Если ВремСтрЗадание["Услуга"+а]=0 ТОгда ПродолжитЬ; Конецесли;
			
			Если ВремСтрЗадание["ОсновныеЧасы"+а] ТОгда
				итПланЧасы    = итПланЧасы    + ПланСтрРаб["Услуга"+а];
			КонецЕСЛИ;
		КонецЦикла;
		
	КонецЕСЛИ;
	
	СуммаДоходаПлан = итПланСумма;
	ВсегоЧасовПлан  = итПланЧасы;
	
	//Заремить - конец
	
	Если НеВыполнятьАвтоРасчетФОВ ТОгда Возврат; КонецеСЛИ;
		
		
	//Каждому водителю платим по кол-ву часов подписанных заказчиком
	ЧасовВДень     =  Мин(мПродолжительностьРабочегоДня,ОКР(итЗкзЧасы/колДней,1,1))*60*60;
	ЧасовВДеньРХ   =  Мин(мПродолжительностьРабочегоДня,ОКР(итЗкзЧасыРХ/колДней,1,1))*60*60;
	ЧасовВДеньСдел =  Мин(мПродолжительностьРабочегоДня,ОКР(итЗкзЧасыСдел/колДней,1,1))*60*60;
	
	итЗкзЧасы    = итЗкзЧасы * 60*60 * МасСотр.Количество();
	итЗкзЧасыРХ  = итЗкзЧасыРХ * 60*60 * МасСотр.Количество();
	//+Lexx по тех.ожиданию
 	//итЗкзЧасыСдел= итЗкзЧасыСдел * 60*60 * МасСотр.Количество();
 	итЗкзЧасыСдел = итЗкзЧасыТехПростоя * 60*60 * МасСотр.Количество();

	

	НачНочь = 60*60*22;
	КонНочь = 60*60*6;
	
	
	пДт = ДатаВыезда;
	пНачЧасДт = ВремяНач;
	Пока пДт<ДатаВозвращения Цикл
		
		Для каждого элСОтр из МасСотр Цикл
			
			Стр = Тбл.Добавить();
			Стр.Сотрудник = элСотр;
			Стр.Дата = НачалоДня(пДт);
			Стр.времяДневное = ЧасовВДень;	
			Стр.ВремяРазрыв  = ЧасовВДеньРХ;
			//+Lexx по тех.ожиданию
			//Вот то, что нам нужно!!!
			Стр.ВремяСделка  = итЗкзЧасыСдел;
			
			Если ВремяНач < ВремяКон Тогда
				Стр.ВремяНочное = Макс(0,ВремяКон - Макс(ВремяНач,22*3600)) + Макс(0,Мин(ВремяКон,6*3600) - ВремяНач);
			ИНАче
				Стр.ВремяНочное =  24*3600 - Макс(ВремяНач,22*3600)+Мин(6*3600,ВремяКон);
			КонецЕСЛИ;
			
			//Обед
			//Если Стр.ВремяДневное > мВремяДоОбеда Тогда
			//	Стр.ВремяДневное = Стр.ВремяДневное - мПродолжительностьОбеда;
			//КонецЕслИ;
			Если Стр.ВремяНочное > мВремяДоОбеда Тогда
				Стр.ВремяНочное = Стр.ВремяНочное - мПродолжительностьОбеда;
			КонецЕслИ;
			
			Стр.ВремяНочное = Мин(Стр.ВремяНочное,Стр.ВремяДневное+Стр.ВремяСделка);
			
		КонецЦикла;
		
		пДт = пДт + 3600*24;
		
		//Контролируем часы по заказчику
		Если Тбл.Итог("ВремяДневное")+Тбл.Итог("ВремяСделка")>= итЗкзЧасы+итЗкзЧасыСдел ТОгда
			пДт = ДатаВозвращения;
		КонецЕслИ;
		
		
	КонецЦиклА;
	
	
	Если Тбл.Итог("ВремяДневное")+Тбл.Итог("ВремяСделка")<> итЗкзЧасы+итЗкзЧасыСдел  ТОгда
		
		отклЧс  = (итЗкзЧасы    - Тбл.Итог("ВремяДневное")) / МасСотр.Количество();
		отклРХ  = (итЗкзЧасыРХ  - Тбл.Итог("ВремяРазрыв"))  / МасСотр.Количество();
		//отклСдел= (итЗкзЧасыСдел- Тбл.Итог("ВремяСделка"))  / МасСотр.Количество();
		Для а=1 по МасСотр.Количество() Цикл
			Стр = Тбл[Тбл.Количество()-а];
			Стр.времяДневное = Стр.времяДневное + отклЧс;
			Стр.ВремяРазрыв  = Стр.ВремяРазрыв  + отклРХ;
			//Стр.ВремяСделка  = Стр.ВремяСделка  + отклСдел;
			Стр.ВремяНочное  = Мин(Стр.ВремяНочное,Стр.ВремяДневное);
		КонецЦикла;
		Стр.времяДневное = Стр.времяДневное + итЗкзЧасы     - Тбл.Итог("ВремяДневное");
		Стр.ВремяРазрыв  = Стр.ВремяРазрыв  + итЗкзЧасыРХ   - Тбл.Итог("ВремяРазрыв");
		//Стр.ВремяСделка  = Стр.ВремяСделка  + итЗкзЧасыСдел - Тбл.Итог("ВремяСделка");
		Стр.ВремяНочное  = Мин(Стр.ВремяНочное,Стр.ВремяДневное);
		
	КонецЕслИ;
	
	
	
	
	Тбл.свернуть("Дата,Сотрудник,Период","ВремяДневное,ВремяСделка,ВремяРазрыв,ВремяНочное,ВремяПраздничное");
	
	Для каждого стр из Тбл Цикл
		Если тбПрз.Найти(Стр.Дата,"Дн")<>Неопределено ТОгда
			Стр.ВремяПраздничное = Стр.ВремяДневное+Стр.ВремяСделка;
		КонецЕСЛИ;
	КонецЦикла;
	
	Тбл.ЗаполнитьЗначения(НачалоМЕсяца(ДатаВыезда),"Период");
	Тбл.Сортировать("Сотрудник,Дата");
	ФактическиОтработанноеВремя.Загрузить(Тбл);
	
КонецПроцедуры //РасчетВремени()

//Функция возвращает адрес строкой для печати
//
Функция ПредставлениеАдреса(ВхАдрес)
	Если ТипЗнч(ВхАдрес) = Тип("Строка") Тогда
		Рез = ВхАдрес;
	ИначеЕсли ТипЗнч(ВхАдрес) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Если ПустаяСтрока(ВхАдрес.Адрес) Тогда
			Рез = ВхАдрес.Наименование;
		Иначе
			Рез = ВхАдрес.Адрес;
		КонецЕсли;
	Иначе
		Рез = "";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

//Функция вычисляет произвольный параметр выработки рассчитанный по шапке
//
Функция ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр)
	СтрокаЗамены = СтрЗаменить(Параметр.АлгоритмРасчетаПараметра, "[", "");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	Попытка 
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		Возврат ЗначениеПараметра;
	Исключение
		Сообщить("При расчете параметра выработки """ + Параметр.Ссылка.Наименование + """ произошла ошибка. Проверьте правильность формулы и введенных данных.");
		Сообщить("Информация об ошибке для специалистов:");
		Сообщить(ОписаниеОшибки());
		Возврат "ошибка";
	КонецПопытки;
КонецФункции

//Функция подготовливает для вычисления произвольный параметр выработки рассчитанный по заданию или по ттд
//
Функция ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание)
	СтрокаЗамены = СтрЗаменить(Параметр.АлгоритмРасчетаПараметра, "[", "ТекСтрЗадание.");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	Попытка 
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		Возврат ЗначениеПараметра;
	Исключение
		Сообщить("При расчете параметра выработки """ + Параметр.Ссылка.Наименование + """ произошла ошибка. Проверьте правильность формулы и введенных данных.");
		Сообщить("Информация об ошибке для специалистов:");
		Сообщить(ОписаниеОшибки());
		Возврат "ошибка";
	КонецПопытки;
КонецФункции

	Функция ПолучитьПараметрПечатиТипаТС()
		ТекстВНазвание="специального";
		Выборка=уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТранспортноеСредство,"Модель");
		Если Выборка<>ТранспортноеСредство Тогда
			Если ЗначениеЗаполнено(Выборка.Модель) Тогда
				Если Выборка.Модель.ТипТС.ВидТС=Перечисления.уатВидыТС.Легковой Тогда
					ТекстВНазвание="легкового";
				ИначеЕсли Выборка.Модель.ТипТС.ВидТС=Перечисления.уатВидыТС.ГрузовойБортовой 
					или Выборка.Модель.ТипТС.ВидТС=Перечисления.уатВидыТС.ГрузовойФургон
					или Выборка.Модель.ТипТС.ВидТС=Перечисления.уатВидыТС.Цистерна
					или Выборка.Модель.ТипТС.ВидТС=Перечисления.уатВидыТС.Самосвал
					или Выборка.Модель.ТипТС.ВидТС=Перечисления.уатВидыТС.СедельныйТягач
					или Выборка.Модель.ТипТС.ВидТС=Перечисления.уатВидыТС.Цистерна Тогда
					ТекстВНазвание="грузового";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат ТекстВНазвание;
	КонецФункции
	
	Функция ПолучитьОтметки()
		
		Запрос =Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ШтампыДляПЛ.ТекстШтампа.ПолнНаименование  ТекстШтампа
		               |ИЗ
		               |	РегистрСведений.ШтампыДляПЛ КАК ШтампыДляПЛ
		               |ГДЕ
		               |	ШтампыДляПЛ.Измерение В(&Мас)";
		Мас = Новый Массив;
		Мас.Добавить(Организация);
		Мас.Добавить(Гараж);
		Мас.Добавить(ТранспортноеСредство);
		Мас.Добавить(ТранспортноеСредство.Модель);
		Мас.Добавить(ТранспортноеСредство.ТипТС);
		Мас.Добавить(ТранспортноеСредство.ТипТС.Родитель);
		Мас.Добавить(Подразделение);
		Запрос.УстановитьПараметр("Мас",Мас);
		Тбл =Запрос.Выполнить().Выгрузить();
		Отметки="";
		Для каждого Стр из Тбл Цикл
			Отметки = Отметки +" "+СокрЛП(Стр.ТекстШтампа);
		КонецЦикла;
		Возврат Отметки;
		
	КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("ПечататьВесьПутевойЛист","Печатать весь путевой лист");
		СтруктураМакетов.Вставить("ПечататьЛицСторону","Печатать лиц. сторону");
		СтруктураМакетов.Вставить("ПечататьОбрСторону","Печатать обр. сторону");
		
		Если ВидПЛ = Перечисления.уатВидыПЛ._ЭСМ1 Или ВидПЛ = Перечисления.уатВидыПЛ._ЭСМ2 Или ВидПЛ = Перечисления.уатВидыПЛ._ЭСМ3 Тогда
			Попытка
				
				Макет = ПолучитьОбщийМакет("уатЭСМ7");
				СтруктураМакетов.Вставить("уатЭСМ7","ЭСМ7");
				
				Макет = ПолучитьМакет("уатАвтокран_стм");
				СтруктураМакетов.Вставить("уатАвтокран","Автокран");
				
			Исключение
			КонецПопытки;
		КонецЕсли;	
		
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Формирует печатную форму путевых листов 3
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_3(ИмяМакета, ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		 СткПарам = Новый Структура;
			ЮрАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
			СткПарам.Вставить("ОрганизацияПЧ", ""+СокРЛП(Организация.НаименованиеПлательщикаПриПеречисленииНалогов)+Символы.ВК
												//+СокрЛП(Организация.ОсновнойБанковскийСчет.Банк)+""
												//+"в "+СокрЛП(Организация.ОсновнойБанковскийСчет.Банк.Город)+Символы.ВК
												//+"р/с "+СокрЛП(Организация.ОсновнойБанковскийСчет.НомерСчета)+" "
												+"ИНН: "+СокРЛП(Организация.ИНН)+"КПП: "+СокРЛП(Организация.КПП)+Символы.ВК
												+ЮрАдрес);
												
			СткПарам.Вставить("отметки",ПолучитьОтметки());     
			Попытка
			СткПарам.Вставить("ШК",глОбщий.ПолучитьШтрихкод(Формат(Число(Номер),"ЧЦ=12; ЧВН=; ЧГ=0")));
		Исключение КонецПопытки;
		
		
		ТБл = глНормыГСМ.ТблНорм(ТранспортноеСредство,ДатаВыезда,ДатаВозвращения,Ссылка);
		НормыДляПечати = Новый Структура("п0,п1,п2,п3,п4,п5",Неопределено,Неопределено,Неопределено,Неопределено,Неопределено,Неопределено);
		Для каждого стТбл из Тбл Цикл
			пИНд =Тбл.индекс(стТбл); 
			СткПарам.Вставить("НормРаб"+пИнд,СокрЛП(стТбл.ОБорудованиеРабота));
			СткПарам.Вставить("НормЕд"+пИнд,СокрЛП(стТбл.едизм));
			СткПарам.Вставить("Норм"+пИнд,ОКР(стТбл.Норма/стТбл.коэф100км,1));
		КонецЦиклА;

		
		мМаксСтрок = 18;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист__3";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			Обл.Параметры.Номер       	= мНомерПЛ;
			ФорматДаты      = "ДФ='дд ММММ гггг'";
			Обл.Параметры.ДатаВыписки 		= Формат(Дата, ФорматДаты);
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
			Обл.Параметры.Организация  		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
			Обл.Параметры.КодПоОКПО = Организация.КодПоОКПО;
			Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТипТС = ТранспортноеСредство.ТипТС;
			Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
			Обл.Параметры.ТранспортноеСредствоГарНомер	= ТранспортноеСредство.ГаражныйНомер;
			
			Обл.Параметры.Водители  	= уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата);
			мРеквизитыВодителя1 		= уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель1, Дата,, Организация);
			Если мРеквизитыВодителя1 <> Неопределено Тогда
				Обл.Параметры.ВодительКод 	= мРеквизитыВодителя1.ТабельныйНомер;
				Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
			КонецЕсли;
			
			уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
			Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
			
			Обл.Параметры.ЛицензионнаяКарточка = ТранспортноеСредство.ЛицензионнаяКарточка;
			Обл.Параметры.НомерЛицензионнойКарточки = ТранспортноеСредство.НомерЛицензионнойКарточки;
			Обл.Параметры.СерияЛицензионнойКарточки = ТранспортноеСредство.СерияЛицензионнойКарточки;
			Обл.Параметры.НомерСерииЛицензионнойКарточки = ТранспортноеСредство.НомерСерииЛицензионнойКарточки;
			
			Обл.Параметры.ВремяВыезда		= Формат(ДатаВыезда,"ДФ=ЧЧ:мм");
			Обл.Параметры.ВремяВозвращения	= Формат(ДатаВозвращения,"ДФ=ЧЧ:мм");
			
			//Обл.Параметры.СпидометрВыезда = СпидометрВыезда;
			
			Для Каждого ТекСтрока из РасходГСМ Цикл
				Если ТекСтрока.ТС = ТранспортноеСредство Тогда
					Если ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ОсновноеТопливо Тогда
						Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
						//Иначе
						//	Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
						//	Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыдалДиспетчер.ФизЛицо);
			Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо);
			Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ПринялМеханик.ФизЛицо);
			Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ОсмотрелВрач	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
			
			Если Задание.Количество() > 0 Тогда
				ТекСтрока = Задание[0]; //Для пут. листа легкового авто
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Обл.Параметры.ВРаспоряжение	= ТекСтрока.Контрагент.НаименованиеПолное;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
					Обл.Параметры.ВРаспоряжение	= ТекСтрока.Подразделение.Наименование;
				КонецЕсли;	
				Обл.Параметры.АдресПрибытия	= ПредставлениеАдреса(ТекСтрока.АдресПрибытия);
			КонецЕсли;
			
			// + Алексей печать из Разнарядки 2020
			Если Найти(Комментарий, "АдресПрибытия:") <> 0 Тогда
				мСтрокаАдреса = СокрЛП(Сред(Комментарий, 15));
				Обл.Параметры.ВРаспоряжение	= мСтрокаАдреса;
			КонецЕсли;
			// - Алексей печать из Разнарядки 2020
			
			 Обл.Параметры.Заполнить(СткПарам);
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			
			 Обл.Параметры.Заполнить(СткПарам);
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // Печать_3()
 
    // Формирует печатную форму путевых листов
    //
    // Параметры:
    //  ИмяМакета - табличный документ
    //  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
    Функция уатПечать_3Спец(ИмяМакета, ФлагПечати="") Экспорт
        Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;    
        
        мМаксСтрок = 5;
        
        ТабДокумент = Новый ТабличныйДокумент;
        ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
        
        ПРефиксМакета = "";
		Если Задание.Количество()>0 Тогда
			Если ЗначениеЗаполнено(Задание[0].Контрагент.ЗаказчикТранзит) ТОгда
				ПРефиксМакета = "ТР";
			КонецЕСЛИ;
		КонецЕСЛИ;
        Макет = ПолучитьМакет(ИмяМакета+ПрефиксМакета);
        
        ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
        
        ТабДокумент.ПолеСверху     = 0;
        ТабДокумент.ПолеСлева     = 0;
        ТабДокумент.ПолеСнизу     = 0;
        ТабДокумент.ПолеСправа     = 0;
        
        //печатаем лицевую сторону п/л
        Если ФлагПечати <> 2 Тогда
            Обл   = Макет.ПолучитьОбласть("Лицевая");
            
            Если ПРефиксМакета = "ТР" ТОгда
                Обл.Параметры.КонтрагентТР =  Контрагент.ЗаказчикТранзит;
            КонецЕСЛи;
            
            мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
            Обл.Параметры.Номер               = мНомерПЛ;
            ФорматДаты                      = "ДФ='дд ММММ гггг'";
            Обл.Параметры.ДатаВыписки         = Формат(Дата, ФорматДаты);
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
            Обл.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
            Обл.Параметры.ОрганизацияКР        = СокрЛП(Организация.Наименование);
            Обл.Параметры.КодПоОКПО = Организация.КодПоОКПО;
            Обл.Параметры.МодельТС          = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
            Обл.Параметры.ТранспортноеСредствоГосНомер    = ТранспортноеСредство.ГосударственныйНомер;
            Обл.Параметры.ТранспортноеСредствоГарНомер    = ТранспортноеСредство.ГаражныйНомер;
            
            Обл.Параметры.ТипТСДляПечати    = ПолучитьПараметрПечатиТипаТС();
            Обл.Параметры.Температура        = Температура;
            Если Задание.Количество() > 0 ТОгда
                Обл.Параметры.Заказчик = Задание[0].Контрагент;
            КонецеСЛи;
            ЮрАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
            Обл.Параметры.ОрганизацияПЧ        = СокрЛП(ЮрАдрес)+Символы.ВК+СокРЛП(Организация.НаименованиеПолное)+Символы.ВК+" ОГРН:"+СокрЛП(Организация.ОГРН)+" ИНН :"+Организация.ИНН;
            
            отметки=ПолучитьОтметки();
            Если СокрЛП(Отметки)<>"" ТОгда
                Обл.Параметры.Отметки = Отметки;
                Лин=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
                обл.Область("Отметки").Обвести(Лин,Лин,Лин,Лин);
            КонецЕСЛИ;
            
            ТБл = глНормыГСМ.ТблНорм(ТранспортноеСредство,ДатаВыезда,ДатаВозвращения,Ссылка,Температура);
            НормыДляПечати = Новый Структура("п0,п1,п2,п3,п4,п5",Неопределено,Неопределено,Неопределено,Неопределено,Неопределено,Неопределено);
            Для каждого стТбл из Тбл Цикл
                НормыДляПечати["п"+Тбл.индекс(стТбл)] = ""+СокрЛП(стТбл.ОБорудованиеРабота)+" - "+ОКР(стТбл.Норма/стТбл.коэф100км,1)+" л.";
            КонецЦиклА;
            Обл.Параметры.Заполнить(НормыДляПечати);
            
            
            Водители = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата);
            Если ЗначениеЗаполнено(Водитель2) Тогда
                Обл.Параметры.Водители = СокрЛП(Водители) +  ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель2.ФизЛицо, Дата);
            Иначе
                Обл.Параметры.Водители = Водители;
            КонецЕсли;    
            мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель1, Дата,, Организация);
            Если мРеквизитыВодителя1 <> Неопределено Тогда
                Обл.Параметры.ВодительКод     = мРеквизитыВодителя1.ТабельныйНомер;
                Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
            КонецЕсли;
            
            уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);    
            Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
            Обл.Параметры.ЛицензионнаяКарточка = ТранспортноеСредство.ЛицензионнаяКарточка;
            Обл.Параметры.НомерЛицензионнойКарточки = ТранспортноеСредство.НомерЛицензионнойКарточки;
            Обл.Параметры.СерияЛицензионнойКарточки = ТранспортноеСредство.СерияЛицензионнойКарточки;
            Обл.Параметры.НомерСерииЛицензионнойКарточки = ТранспортноеСредство.НомерСерииЛицензионнойКарточки;
            
            //выводим прицепы
            мПрицеп = Неопределено;
            Для Каждого ТекСтрокаПрицепы Из Прицепы Цикл
                Если ТекСтрокаПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
                    мПрицеп = ТекСтрокаПрицепы.ТС;
                    Прервать;
                КонецЕсли;    
            КонецЦикла;
            //если не нашли прицепа в ТЧ Прицепы, то берем первый попавшийся прицеп из ТЧ Задание
            Если мПрицеп = Неопределено Тогда
                Для Каждого ТекСтрокаЗадания Из Задание Цикл
                    Если ТекСтрокаЗадания.Выполнено Тогда
                        Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И ТекСтрокаЗадания.Прицеп1.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
                            мПрицеп = ТекСтрокаЗадания.Прицеп1;
                            Прервать;
                        ИначеЕсли ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И ТекСтрокаЗадания.Прицеп2.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
                            мПрицеп = ТекСтрокаЗадания.Прицеп2;
                            Прервать;
                        КонецЕсли;    
                    КонецЕсли;
                КонецЦикла;
            КонецЕсли;
            Если мПрицеп <> Неопределено Тогда
                Обл.Параметры.ПрицепМодель1 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
                Попытка
                    Обл.Параметры.ПрицепГосНомер1 = мПрицеп.ГосударственныйНомер;
                    Обл.Параметры.ПрицепГарНомер1 = мПрицеп.ГаражныйНомер;
                Исключение
                КонецПопытки;
            КонецЕсли;
            
            Обл.Параметры.ВремяВыезда        = Формат(ДатаВыезда,"ДФ=ЧЧ:мм");
            Обл.Параметры.ВремяВозвращения    = Формат(ДатаВозвращения,"ДФ=ЧЧ:мм");
            Если ВыдатьКоличествоГорючего > 0 Тогда
                Обл.Параметры.ВыдатьГорючее                = ВыдатьГорючее;
                Обл.Параметры.ВыдатьКоличествоГорючего  = ВыдатьКоличествоГорючего;
            КонецЕсли;    
            //Обл.Параметры.СпидометрВыезда        = СпидометрВыезда;
            
            Для Каждого ТекСтрока из РасходГСМ Цикл
                Если ТекСтрока.ТС = ТранспортноеСредство Тогда
                    Если ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ОсновноеТопливо Тогда
                        Обл.Параметры.ГСМ1    = ТекСтрока.ГСМ;
                        //Обл.Параметры.ОстатокПриВыезде1    = ТекСтрока.ОстатокПриВыезде;
                    Иначе
                        Обл.Параметры.ГСМ2    = ТекСтрока.ГСМ;
                        //Обл.Параметры.ОстатокПриВыезде2    = ТекСтрока.ОстатокПриВыезде;
                    КонецЕсли;    
                КонецЕсли;    
            КонецЦикла;    
            Обл.Параметры.ВыдалДиспетчер    = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыдалДиспетчер.ФизЛицо);
            Обл.Параметры.ВыпустилМеханик    = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо);
            Обл.Параметры.ПринялМеханик        = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ПринялМеханик.ФизЛицо);
            Обл.Параметры.ВодительСдал        = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
            Обл.Параметры.ВодительПринял    = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
            Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
            
            Для Каждого ТекСтрока Из Задание Цикл
                ТекИндекс = Задание.Индекс(ТекСтрока) + 1;
                
                Если ТекИндекс > мМаксСтрок Тогда
                    Прервать;
                КонецЕсли;
                
                стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
                Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
                    Обл.Область(стрОбласть).Текст    = ТекСтрока.Контрагент.НаименованиеПолное;
                ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
                    Обл.Область(стрОбласть).Текст    = ТекСтрока.Подразделение.Наименование;
                КонецЕсли;
                Обл.Область(стрОбласть).Текст    = Обл.Область(стрОбласть).Текст + ?(ПредставлениеАдреса(ТекСтрока.АдресПрибытия)="","",", " +ПредставлениеАдреса(ТекСтрока.АдресПрибытия));
                стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
                Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
                стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
                Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
            КонецЦикла;
			
			// + Алексей печать из Разнарядки 2020
			Если Найти(Комментарий, "АдресПрибытия:") <> 0 Тогда
				мСтрокаАдреса = СокрЛП(Сред(Комментарий, 15));
				Если Обл.Области.Найти("ВРаспоряжение1") <> Неопределено Тогда
					стрОбласть = "ВРаспоряжение1";
					Обл.Область(стрОбласть).Текст = мСтрокаАдреса;
				КонецЕсли;
			КонецЕсли;
			// - Алексей печать из Разнарядки 2020
			
        ТабДокумент.ФоноваяКартинка = Макет.ФоноваяКартинка;
            
            ТабДокумент.Вывести(Обл);
        КонецЕсли;
        
        Если ФлагПечати = 0 Тогда    //Новая страница для печати полного пут. листа
            ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        
        //печатаем обратную сторону п/л
        Если ФлагПечати <> 1 Тогда
            
            Обл   = Макет.ПолучитьОбласть("Оборотная");
            
            ТабДокумент.Вывести(Обл);
            
        КонецЕсли;
        
        Возврат ТабДокумент;
        
    КонецФункции // ПечатьПлатежногоПоручения()
	
	
	Функция уатПечать_3Спец2(ИмяМакета, ФлагПечати="") Экспорт
		Возврат уатПечать_6С(ИмяМакета, ФлагПечати);
	КонецФункции
	
	// Формирует печатную форму путевых листов
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_6С(ИмяМакета, ФлагПечати="",ТекРис="",НаПринтер=Ложь) Экспорт
		
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		вМассивПечатныхФорм = Новый Массив;
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист_6С";
		
		//+Блок определения макета печатной формы путевого листа
		СтрМакета = ПолучитьСтруктуруМакета(ИмяМакета);
		Макет = СтрМакета.Макет;
		ЭтоВнешняяОбработка = СтрМакета.ЭтоВнешняяОбработка;//Вспомогательная пременная, показывающая откуда берется макет печатной формы: из внешней обработки или из макета конфигурации
		ГенЗаказчикДополнительныйПЛ = СтрМакета.ГенЗаказчикДополнительныйПЛ;
		ВладелецТСДополнительныйПЛ = СтрМакета.ВладелецТСДополнительныйПЛ;
		//-Блок определения макета печатной формы путевого листа
		
		Если СокрЛП(ТекРис)="" Тогда
			ТекРис = ТранспортноеСредство.ТипТС.Рисунок;
		КонецЕСЛИ;
		
		Если СокрЛП(ТекРис)="" и Прицепы.Количество()<>0 Тогда
			ТекРис = Прицепы[0].ТС.ТипТС.Рисунок;
		КонецЕСЛИ;
		
		Если СокрЛП(ТекРис)<>"" Тогда
			ТабДокумент.ФоноваяКартинка = БиблиотекаКартинок["пл"+ТекРис];
		КонецЕСЛИ;
		
		//Механизм контроля документов водителей
		Ошибки = Ложь;
		СткДДД = КонтрольДокументовВодителя(Ошибки);
		//Механизм контроля документов водителей

		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		СткПарам = Новый Структура;
		мМаксСтрок = 5;
		пИНд=0;
		
		//Нормы ГСМ
		//Если Температура < 99 и Температура <> 0 Тогда
		//	пТемп = Температура;	
		//ИНаче
		//	пТемп = РегистрыСведений.Температуры.ПолучитьТемпературу(ДатаВыезда,Подразделение);
		//	Если пТемп = 999 ТОгда
		//		пТемп = РегистрыСведений.Температуры.ПолучитьТемпературу(ДатаВыезда,Гараж);
		//	КонецЕСЛИ;
		//	Если пТемп = 999 ТОгда
		//		пТемп = РегистрыСведений.Температуры.ПолучитьТемпературу(ДатаВыезда);
		//	КонецЕСЛИ;
		//КонецЕсли;
		
		пТемп = 999;
		
		СткПарам.Вставить("Темп",пТемп);
		СткПарам.Вставить("ТКоэф",0);
		СтрНорм = "";
		
		ТБлНормыГСМ = ПОлучитьТблНормГСМ(пТемп);
		Для каждого стТбл из ТБлНормыГСМ Цикл
			Если СткПарам.ТКоэф = 0  ТОгда
				СткПарам.ТКоэф = стТбл.ТКоэф;
			КонецеСЛИ;
		КонецЦиклА;
		ТблНормыГСМ.свернуть("ОсновнаяРабота,ЕдИзм,коэф100км,огр","Норма");
		
		ТочностьОст = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
		НормыДляПечати = Новый Структура("п0,п1,п2,п3,п4,п5",Неопределено,Неопределено,Неопределено,Неопределено,Неопределено,Неопределено);
		Для каждого стТбл из ТБлНормыГСМ Цикл
			пИНд =ТБлНормыГСМ.индекс(стТбл); 
			СткПарам.Вставить("НормРаб"+пИнд,СокрЛП(стТбл.ОсновнаяРабота));
			СткПарам.Вставить("НормЕд"+пИнд,СокрЛП(стТбл.едизм));
			СткПарам.Вставить("Норм"+пИнд,ОКР(стТбл.Норма/стТбл.коэф100км,ТочностьОст));
			СтрНорм = СтрНорм + СокрЛП(стТбл.ОсновнаяРабота) +" "+ ОКР(стТбл.Норма/стТбл.коэф100км,ТочностьОст) + СокрЛП(стТбл.едизм) + Символы.ПС;
		КонецЦиклА;
		Если пТемп < 99 и пТемп <> 0  Тогда
			СтрНорм = "t = "+пТемп+" Пов.коэф. "+СткПарам.ТКоэф +"%"+ Символы.ПС + СтрНорм;
		КонецЕсли;
		СткПарам.Вставить("СтрНорм",СтрНорм);
		Если СокрлП(ТранспортноеСредство.идАТ)<>"" 
			и СокрлП(ТранспортноеСредство.идАТ)<>"0" ТОгда
			СткПарам.Вставить("ЕстьБСМТ","Установлен БСМТ!"+ Символы.ПС);	
		КонецеСЛИ;
		
		//Стропальщики
		ПолучитьСтропальщиков(СткПарам);
		
		//Посчитаем выдано по маршрутам
		Если Маршруты.Количество()>0 тОгда
			п = РассчитатьВыданоПоМаршруту();
			Если п<>0 ТОгда
				ВыдатьКоличествоГорючего =	п;	
			КонецеслИ;
		КонецеСЛИ;
		
		Если (ВыдатьКоличествоГорючего=0 
			и ТранспортноеСредство.ВыданоНаПечатьПЛ <> 0)  
			или ТранспортноеСредство.ВыданоНаПечатьПЛ < 0 ТОгда
			ВыдатьКоличествоГорючего = ТранспортноеСредство.ВыданоНаПечатьПЛ;
		КонецеСЛИ;
		
		Попытка
			СткПарам.Вставить("ШК",глОбщий.ПолучитьШтрихкод(Формат(Число(Номер),"ЧЦ=12; ЧВН=; ЧГ=0")));
		Исключение
			СткПарам.Вставить("ШК","");
		КонецПопытки;
		
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			ТекМодельТС = ТранспортноеСредство.Модель;
			
			Если ТранспортноеСредство.ПриоритетноеТС Тогда	
				глОбщий.ВывестиКУ(Обл);
			КонецЕсли;
			
			Если ДатаВыезда > Дата(2000,1,1) ТОгда
				СткПарам.Вставить("ВремяВыезда", Формат(ДатаВыезда,"ДФ=ЧЧ:мм"));
				СткПарам.Вставить("ВремяВозвращения", Формат(ДатаВозвращения,"ДФ=ЧЧ:мм"));
				
				СткПарам.Вставить("ДатаВыезда_ДД",Формат(ДатаВыезда,"ДФ=дд"));
				СткПарам.Вставить("ДатаВыезда_ММММ",Формат(ДатаВыезда,"ДФ=ММ"));
				СткПарам.Вставить("ВремяВыезда_ЧЧ",Формат(ДатаВыезда,"ДФ=ЧЧ"));
				СткПарам.Вставить("ВремяВыезда_ММ",Формат(ДатаВыезда,"ДФ=мм"));
				
				СткПарам.Вставить("ДатаВозвращения_ДД",Формат(ДатаВозвращения,"ДФ=дд"));
				СткПарам.Вставить("ДатаВозвращения_ММММ",Формат(ДатаВозвращения,"ДФ=ММ"));
				СткПарам.Вставить("ВремяВозвращения_ЧЧ",Формат(ДатаВозвращения,"ДФ=ЧЧ"));
				СткПарам.Вставить("ВремяВозвращения_ММ",Формат(ДатаВозвращения,"ДФ=мм"));
				
				ФорматДаты      						 = "ДФ='дд ММММ гггг'";
				СткПарам.Вставить("ДатаВыписки", 		  Формат(Дата, ФорматДаты));
				СткПарам.Вставить("ДатаВозвращения", 		  Формат(ДатаВозвращения, ФорматДаты));
				СткПарам.Вставить("ТекстДействителенДо",  ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты)));
			КонецЕСЛИ;
			
			мНомерПЛ = СокрЛП(Номер);
			СткПарам.Вставить("Номер",       		  мНомерПЛ);
			СткПарам.Вставить("Организация",  		  ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата), "ПолноеНаименование,ЮридическийАдрес,ОГРН,Телефоны"));
			СткПарам.Вставить("ОрганизацияКР",		  СокрЛП(Организация.Наименование));
			СткПарам.Вставить("КодПоОКПО", 			  Организация.КодПоОКПО);
			СткПарам.Вставить("МодельТС",  			  уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство));
			СткПарам.Вставить("НаименованиеМоделиТС",  СокрЛП(ТранспортноеСредство.Модель.Наименование));
			СткПарам.Вставить("ВладелецТС",  		  ?(ТипЗнч(ТранспортноеСредство.ВладелецТС) = Тип("СправочникСсылка.Контрагенты"),ТранспортноеСредство.ВладелецТС.КонтрагентНаПечать,""));
			СткПарам.Вставить("ГСМ1", 				  ?(ВыдатьКоличествоГорючего < 0,"Не выдавать!",ТекМодельТС.ОсновноеТопливо));
			СткПарам.Вставить("ГрузоПодъемность",     ТекМодельТС.Грузоподъемность);
			СткПарам.Вставить("Температура",          Температура);
			СткПарам.Вставить("ТипТС",          ТранспортноеСредство.ТипТС);
			СткПарам.Вставить("ТипТСКомментарий",          ТранспортноеСредство.ТипТС.Комментарий);
			
			
			СткПарам.Вставить("ТранспортноеСредствоГосНомер",	 ТранспортноеСредство.ГосударственныйНомер);
			СткПарам.Вставить("ТранспортноеСредствоГарНомер",	 ТранспортноеСредство.ГаражныйНомер);
			
			
			сТбл = РегистрыСведений.уатМестонахождениеТС.СрезПоследних(Дата,Новый Структура("ТС",ТранспортноеСредство));
			Если сТбл.Количество()>0 ТОгда
				СткПарам.Вставить("Колонна", сокрлП(сТбл[0].Подразделение));
			КонецЕСЛИ;
			
			ТекЗаказчик = Справочники.Контрагенты.ПустаяСсылка();
			Если ЗначениеЗаполнено(Контрагент) Тогда
				текзаказчик = Контрагент;
			ИНАчеЕсли Задание.Количество() > 0 ТОгда
				текзаказчик = Задание[0].Контрагент;
			КонецеСЛи;
			
			СткПарам.Вставить("Заказчик", ИмяЗаказчика(текзаказчик));
			Если ЗначениеЗаполнено(ЦехКонтрагента.ГенЗаказчик) Тогда
				СткПарам.Вставить("ГенЗаказчик",ИмяЗаказчика(ЦехКонтрагента.ГенЗаказчик));
			ИНаче
				СткПарам.Вставить("ГенЗаказчик",ИмяЗаказчика(ТекЗаказчик.ГоловнойКонтрагент));
			КонецЕСЛИ;
			//Если СокрЛП(ЦехКонтрагента.ИмяНаПечать)="" ТОгда
			СткПарам.Вставить("ЦехКонтрагента", СокрЛП(ЦехКонтрагента));
			//ИНаче
			//	СткПарам.Вставить("ЦехКонтрагента", СокрЛП(ЦехКонтрагента.ИмяНаПечать));
			//КонецЕсли;
			
			Если текзаказчик.ЧасыВТалонеЗаказчика<>0 Тогда
				СткПарам.Вставить("ЧасыТалон", текзаказчик.ЧасыВТалонеЗаказчика);
				СткПарам.Вставить("ЧасыТалонПропись", "Отработано "+СтрЗаменить(ЧислоПрописью(текзаказчик.ЧасыВТалонеЗаказчика,"НД=Ложь","Час,Часа,Часов")," 00",""));
			КонецЕСЛИ;
			
			ЮрАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
			СткПарам.Вставить("ОрганизацияПЧ", ""+СокРЛП(Организация.НаименованиеПлательщикаПриПеречисленииНалогов)+Символы.ВК
			//+СокрЛП(Организация.ОсновнойБанковскийСчет.Банк)+""
			//+"в "+СокрЛП(Организация.ОсновнойБанковскийСчет.Банк.Город)+Символы.ВК
			//+"р/с "+СокрЛП(Организация.ОсновнойБанковскийСчет.НомерСчета)+" "
			+"ИНН: "+СокРЛП(Организация.ИНН)+"КПП: "+СокРЛП(Организация.КПП)+Символы.ВК
			+ЮрАдрес);
			
			юрАдрКА = СокрЛП(УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(текзаказчик,"Юридический"));
			телКА = СокрЛП(УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(текзаказчик));									
			Если СокрлП(телКА)<>"" ТОгда телКА = " тел.:"+телКА; КонецеСЛИ;
			СткПарам.Вставить("ЗаказчикАдрес",юрАдрКА+телка);									
			
			отметки=ПолучитьОтметки();
			Если СокрЛП(Отметки)<>"" ТОгда
				Обл.Параметры.Отметки = Отметки;
				Лин=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
				обл.Область("Отметки").Обвести(Лин,Лин,Лин,Лин);
			КонецЕСЛИ;
			
			Для а=1 по Мин(2,Маршруты.Количество()) Цикл
				мшСтр = Маршруты[а-1];
				СткПарам.Вставить("Маршрут"+а,СокрЛП(мшСтр.Маршрут.Владелец)+" : "+СокрЛП(мшСтр.Маршрут.НаименованиеПолное));
				СткПарам.Вставить("начвр"+а,мшСтр.Маршрут.Начало);
				СткПарам.Вставить("конвр"+а,мшСтр.Маршрут.Окончание);
				СткПарам.Вставить("отв"+а,СокрЛП(мшСтр.Маршрут.ответсвенный));
				
				Если мшСтр.Маршрут.Платформа<>0 Тогда
					СткПарам.Вставить("Платформа", мшСтр.Маршрут.Платформа);
					СткПарам.Вставить("Стоянка",   мшСтр.Маршрут.Стоянка);
				КонецеСЛИ;
				
			КонецЦикла;
			
			Если Маршруты.Количество()=0 Тогда
				СткПарам.Вставить("Маршрут1",СокрЛП(ТекЗаказчик)+Символы.ПС+СокрЛП(ЦехКонтрагента));
				СткПарам.Вставить("начвр1",Формат(ДатаВыезда,"ДФ=ЧЧ:мм"));
				СткПарам.Вставить("конвр1",Формат(ДатаВозвращения,"ДФ=ЧЧ:мм"));
				
			КонецеСЛИ;
			
			// + Алексей печать из Разнарядки 2020
			Если Найти(Комментарий, "АдресПрибытия:") <> 0 Тогда
				мСтрокаАдреса = СокрЛП(Сред(Комментарий, 15));
				Если Обл.Области.Найти("ВРаспоряжение1") <> Неопределено Тогда
					стрОбласть = "ВРаспоряжение1";
					Обл.Область(стрОбласть).Текст = мСтрокаАдреса;
				КонецЕсли;
			КонецЕсли;
			// - Алексей печать из Разнарядки 2020
			
			ДтВыд = "";
			уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория,2-ТекМодельТС.НаличиеСпидометра,ДтВыд);	
			пНомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
			
			Если ПроверитьВодУд(дтВыд,пНомерУдостоверенияВодителя) Тогда
				Возврат ТабДокумент;
			КонецЕСЛИ;
			
			СткПарам.Вставить("ВодВУ", пНомерУдостоверенияВодителя);
			
			СткПарам.Вставить("Водители",СокрЛП(Водитель1));
			СткПарам.Вставить("ВодительКод", Водитель1.Код);
			Если ЗначениеЗаполнено(Водитель2) Тогда
				
				уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория,2-ТекМодельТС.НаличиеСпидометра);	
				пНомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
				СткПарам.Вставить("ВодВУ2", пНомерУдостоверенияВодителя);
				
				Если ПроверитьВодУд(дтВыд,пНомерУдостоверенияВодителя) Тогда
					Возврат ТабДокумент;
				КонецЕСЛИ;
				
				СткПарам.Вставить("Водители2", СокрлП(Водитель2));
				СткПарам.Вставить("Водитель2Код", Водитель2.Код);
				
			КонецЕсли;	
			
			
			
			//выводим прицепы
			мПрицеп = Неопределено;
			Для Каждого ТекСтрокаПрицепы Из Прицепы Цикл
				мПрицеп = ТекСтрокаПрицепы.ТС;
				Прервать;
			КонецЦикла;
			//если не нашли прицепа в ТЧ Прицепы, то берем первый попавшийся прицеп из ТЧ Задание
			Если мПрицеп <> Неопределено Тогда
				СткПарам.Вставить("ПрицепМодель1",уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп));
				СткПарам.Вставить("ПрицепНаименованиеМоделиТС1",СокрЛП(мПрицеп.Модель.Наименование));
				СткПарам.Вставить("ПрицепТипТС1",СокрЛП(мПрицеп.ТипТС.Наименование));
				СткПАрам.Вставить("ЕстьПрицеп"," + прицеп : "+СткПарам.ПрицепНаименованиеМоделиТС1);
				Попытка
					СткПарам.Вставить("ПрицепГосНомер1",мПрицеп.ГосударственныйНомер);
					СткПарам.Вставить("ПрицепГарНомер1",мПрицеп.ГаражныйНомер);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			
			СткПарам.Вставить("ВыдатьКоличествоГорючего","                                     ");
			Если ВыдатьКоличествоГорючего > 0 Тогда
				//vvk
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	уатТемпературныеКоэффициентыГСМ.Процент
				|ИЗ
				|	Справочник.уатТемпературныеКоэффициентыГСМ КАК уатТемпературныеКоэффициентыГСМ
				|ГДЕ
				|	уатТемпературныеКоэффициентыГСМ.ТемператураДо <= &Темп
				|	И уатТемпературныеКоэффициентыГСМ.ТемператураМеньше >= &Темп";
				
				Запрос.УстановитьПараметр("Темп", Температура);
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					
					K_T = ВыборкаДетальныеЗаписи.Процент;
					ВыдатьКоличествоГорючего_ = ОКР(ВыдатьКоличествоГорючего + ВыдатьКоличествоГорючего/100*K_T,0,1);
					СткПарам.Вставить("ВыдатьКоличествоГорючего", ВыдатьКоличествоГорючего_);
				ИНаче
					СткПарам.Вставить("ВыдатьКоличествоГорючего", ВыдатьКоличествоГорючего);
					
				Конецесли;
				
				
				//vvk
				СткПарам.Вставить("ВыдатьГорючее", ВыдатьГорючее);
				
				
				
			ИначеЕсли ВыдатьКоличествоГорючего < 0 Тогда
				СткПарам.Вставить("ВыдатьГорючее", "НЕТ!");
				СткПарам.Вставить("ВыдатьКоличествоГорючего", "");
			ИНаче
				
				пврДопОбр = 0;
				пВрОтп = 0;		
				Если Температура <= -20 Тогда 
					пврДопОбр = 5;
					пВрОтп = 7;		
				ИНачеЕсли Температура <= -10 Тогда
					пВрОтп = 5;		
				ИНачеЕсли Температура <= -1 Тогда
					пВрОтп = 3;		
				Конецесли;
				
				пПрб = 0;
				ВыдГСМ = 0;
				Для каждого стМрш из Маршруты  Цикл
					Если ЗначениеЗаполнено(стМрш.Маршрут) Тогда
						пПрб = пПрб + стМрш.Маршрут.Расстояние;
					КонецЕсли;
				КонецЦиклА;
				Если пПРб>0 ТОгда
					ДЛя каждого стТбл из ТБлНормыГСМ Цикл
						Если стТбл.ОсновнаяРабота = Справочники.ОборудованиеРаботыГСМ.Двигатель ТОгда
							ВыдГсм	= ВыдГСМ + стТбл.Норма * ппрб;
						ИНачеЕсли стТбл.ОсновнаяРабота = Справочники.ОборудованиеРаботыГСМ.Отопитель ТОгда
							ВыдГсм	= ВыдГСМ + стТбл.Норма * пВрОтп;
						ИНачеЕсли стТбл.ОсновнаяРабота.Тип = Справочники.уатТипыАгрегатов.Отопитель ТОгда
							ВыдГсм	= ВыдГСМ + стТбл.Норма * пврДопОбр;
						КонецЕСЛИ;
					КонецЦиклА;
				КонецЕСЛИ;
				Если ВыдГСМ > 0 Тогда
					СткПарам.Вставить("ВыдатьГорючее", ВыдатьГорючее);
					СткПарам.Вставить("ВыдатьКоличествоГорючего", ОКР(ВыдГСМ,0,1));
				КонецесЛИ;
				
			КонецЕсли;	
			
			СткПарам.Вставить("ВыдалДиспетчер",  уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыдалДиспетчер.ФизЛицо));
			СткПарам.Вставить("ВыпустилМеханик", уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо));
			СткПарам.Вставить("ПринялМеханик",   уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ПринялМеханик.ФизЛицо));
			СткПарам.Вставить("ВодительПринял",  уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо));
			СткПарам.Вставить("ОсмотрелВрач",    уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо));
			СткПарам.Вставить("ВодительСдал",    уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо));
			
			
			//Номер договора из прейскуранта
			Попытка 
				п = Обл.Параметры.ДоговорПрейскуранта;
				Надо = Истина;
			Исключение
				Надо = Ложь;
			КонецПопытки;
			
			Если Надо ТОгда	
				Стк = Новый Структура("Контрагент,ЦехКонтрагента,Номенклатура,Месторождение",Контрагент,
				?(ЗначениеЗаполнено(ЦехКонтрагента),ЦехКонтрагента,Справочники.ЦехаКонтрагента.ПустаяСсылка()),
				Справочники.Номенклатура.ПустаяСсылка(),
				Справочники.Месторождения.ПустаяСсылка());
				пТ = глОбщий.КэшПрейскурантаЗапрос(ДатаВыезда,Стк,ТранспортноеСредство,ТипТС,Ложь);
				Если пТ.Количество()<>0 ТОгда
					СткПарам.Вставить("ДоговорПрейскуранта",пТ[0].Договор);
					СткПарам.Вставить("Тариф",пТ[0].Тариф);
					СткПарам.Вставить("ТарифКм",пТ[0].ТарифКм);
				КонецеСЛИ;
			КонецеСЛИ;
			
			//Корневая папка цеха
			Надо = Ложь;
			Попытка 
				п = Обл.Параметры.КореньЦеха;
				Если ЗначениеЗаполнено(ЦехКонтрагента) Тогда
					Надо = Истина;
				КонеЦеСЛИ;
			Исключение
			КонецПопытки;
			Если Надо ТОгда 	
				ТекЦех = ЦехКонтрагента.Родитель;
				Пока ТекЦех.Родитель.Пустая()=Ложь Цикл
					ТекЦех = ТекЦех.Родитель;
				КонецЦикла;
				СткПарам.Вставить("КореньЦеха",ТекЦех);
			КонеЦЕСЛИ;
			
			//Текст ТО
			Попытка 
				п = Обл.Параметры.ТекстТО1;
				ПолучитьТекстТО(СткПарам);
			Исключение
			КонецПопытки;
			
			
			//+Lexx по заявке 4305
			ПолучитьТОнаСледующийДень(СткПарам);
			//-Lexx по заявке 4305
			
			Обл.Параметры.Заполнить(СткПарам);
			
			
			Если ГенЗаказчикДополнительныйПЛ Тогда
				Попытка
					Обл.Область("ТалонЗаказчика").Очистить(Истина,Истина,Истина);
				Исключение КонецПопытки;
			КонецесЛИ;
			
			
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			
			//Добавим незаметную фактическую дату печати путевого листа
			Рисунок = Обл.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			Рисунок.Верх = 1;
			Рисунок.Лево = 75;
			Рисунок.Ширина = 30;
			Рисунок.Высота = 2;
			//Рисунок.ОриентацияТекста = -15; //наклон 15 градусов по часовой стрелке
			Рисунок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			Рисунок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			Рисунок.Шрифт = Новый Шрифт (,6,Ложь); //жирный
			//Рисунок.ЦветТекста = Новый Цвет(0,0,255); //синий
			Рисунок.Текст = "ФДП - " + Строка(ТекущаяДата());
			Рисунок.ГраницаСверху=Ложь;
			Рисунок.ГраницаСнизу=Ложь;
			Рисунок.ГраницаСлева=Ложь;
			Рисунок.ГраницаСправа=Ложь;
			
			
			//+Lexx от 15.12.2017 по заявке 4326 - добавим "Мертвый" запас бака
			Попытка 
				Обл.Параметры.НЗОбъемаБака = ТранспортноеСредство.НЗОбъемаБака;
			Исключение
				ХХХ = Истина;
			КонецПопытки;
			//-Lexx от 15.12.2017 по заявке 4326 - добавим "Мертвый" запас бака
			
			Для а=1 по Мин(3,Маршруты.Количество()) Цикл
				мшСтр = Маршруты[а-1];
				пТхт = СокрЛП(мшСтр.Маршрут.Владелец)+Символы.ВК
				+СокрЛП(мшСтр.Маршрут.НаименованиеПолное);
				Если мшСтр.Маршрут.Платформа<>0 ТОгда
					пТхт = пТхт +Символы.ВК+" Платформа: "+СокрЛП(мшСтр.Маршрут.Платформа)+"   Стоянка: "+СокрлП(мшСтр.Маршрут.Стоянка);
				КонецЕСЛи;
				
				СткПарам.Вставить("ЗкзМарш"+а, пТхт);
				СткПарам.Вставить("отв"+а,СокрЛП(мшСтр.Маршрут.ответсвенный));
			КонецЦикла;
			
			//Вывод на печать QRкода Юралс
			//Вывод на печать QRкода ГазПрома
			Обр = ОБработки.ПечатьQRКода.Создать();
			
			//Для СМА
			строкаQRКода = Обработки.ВыгрузкаСМАГазпром.Создать().ПолучитьСтрокуДанныхСМА(ссылка);
			Если строкаQRКода <> Неопределено Тогда
				ДанныеQRКода = глОбщий.ДанныеQRКода(строкаQRКода,0,190);
				КартинкаQRКодаГПН = Новый Картинка(ДанныеQRКода);
			КонецЕсли;
			
			//"Печать6с" - эта печатная форма - 100% ландшафт
			//Порядок координат: верх, лево
			
			Если (ЭтоВнешняяОбработка = Истина) И ((ИмяМакета.QRКодЮралсВерх + ИмяМакета.QRКодЮралсЛево) > 0) Тогда
				//Координаты верх, лево берем из формы справочника "ВнешниеОбработки"
				//Если координат нет, то ничего на форму ПЛ выводить не будем
				Обр.ВывестиQRКодЮралс(Ссылка.ТранспортноеСредство,Ссылка.Водитель1,Ссылка,Обл,ИмяМакета.QRКодЮралсВерх,ИмяМакета.QRКодЮралсЛево);
				Обр.ВывестиQRКодГазПром(КартинкаQRКодаГПН,Обл,ИмяМакета.QRКодСМАВерх,ИмяМакета.QRКодСМАЛево);
			ИначеЕсли ЭтоВнешняяОбработка = Ложь Тогда //Координаты будем задавать явным образом. НО!!! Тут надо подумать над универсальным механизмом
				//Если СокрЛП(Строка(ИмяМакета)) = "_6С" Тогда  //Заремлено, т.к. пока нет других макетов из конфигурации
				Обр.ВывестиQRКодЮралс(Ссылка.ТранспортноеСредство,Ссылка.Водитель1,Ссылка,Обл,120,10);
				Обр.ВывестиQRКодГазПром(КартинкаQRКодаГПН,Обл,120,222);
				//КонецЕсли;	
			Иначе
			КонецЕсли;	
			
			Обл.Параметры.Заполнить(СткПарам);
			
			//Механизм контроля документов водителей
			Обл.Параметры.Заполнить(СткДДД);
			//Механизм контроля документов водителей

			ТабДокумент.Вывести(Обл);
			
			//Здесь попытаемся вывести данные об ответственных лицах
			Попытка
				ИНН = СокрЛП(Ссылка.Контрагент.ИНН);
				ОблЕОЛ = Макет.ПолучитьОбласть("ЕОЛ_" + ИНН);
				ТабДокумент.Вывести(ОблЕОЛ);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		//Lexx описание
		//Если нам прилетело, что и по владельцу привлеченного ТС надо печатать, то печатаем
		Если ВладелецТСДополнительныйПЛ Тогда
			
			ТабДокумент1 = Новый ТабличныйДокумент;
			ТабДокумент1.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист_6С";
			ТабДокумент1.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			ТабДокумент1.ПолеСверху 	= 0;
			ТабДокумент1.ПолеСлева 	= 0;
			ТабДокумент1.ПолеСнизу 	= 0;
			ТабДокумент1.ПолеСправа 	= 0;
			
			ДвоичныеДанные = ТранспортноеСредство.ВладелецТС.ОсновнойВидПЛ.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
				ДвоичныеДанные.Записать(ИмяФайла);
				Макет = Новый ТабличныйДокумент;
				Макет.Прочитать(ИмяФайла);
				УдалитьФайлы(ИмяФайла);
				
				Обл   = Макет.ПолучитьОбласть("Лицевая");
				Обл.Параметры.Заполнить(СткПарам);
				отметки=ПолучитьОтметки();
				Если СокрЛП(Отметки)<>"" ТОгда
					Обл.Параметры.Отметки = Отметки;
					Лин=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					Обл.Область("Отметки").Обвести(Лин,Лин,Лин,Лин);
				КонецЕСЛИ;
				ТабДокумент1.Вывести(Обл);
				Обл   = Макет.ПолучитьОбласть("Оборотная");
				Обл.Параметры.Заполнить(СткПарам);
				ТабДокумент1.Вывести(Обл);
				
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент1, 1,НаПринтер , уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
			КонецесЛИ;	
		КонецЕсли;	
		
		//Lexx описание
		//Если в карточке Заказчика стоит флаг "Дополнительный ПЛ"
		//то печатаем еще один ПЛ, с формой из карточки контрагента
		//ВНИМАНИЕ!!! Если мы в карточке контрагента устанавливаем флаг "Дополнительный ПЛ",
		//то ОБЯЗАТЕЛЬНО должен быть ЗАПОЛНЕН реквизит "Основной вид пут. листов" 
		Если ГенЗаказчикДополнительныйПЛ Тогда
			
			//Lexx описание
			//Печатаем основной макет ПЛ, а затем формируем данные для печати дополнительного макета ПЛ
			#Если Клиент Тогда
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, 1, НаПринтер,  уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));
			#Иначе
				вМассивПечатныхФорм.Добавить(ТабДокумент);
			#КонецЕсли
			ТабДокумент1 = Новый ТабличныйДокумент;
			ТабДокумент1.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист_6С";
			ТабДокумент1.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			ТабДокумент1.ПолеСверху 	= 0;
			ТабДокумент1.ПолеСлева 	= 0;
			ТабДокумент1.ПолеСнизу 	= 0;
			ТабДокумент1.ПолеСправа 	= 0;
			
			ДвоичныеДанные = Контрагент.ОсновнойВидПЛ.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
				ДвоичныеДанные.Записать(ИмяФайла);
				
				Макет = Новый ТабличныйДокумент;
				Макет.Прочитать(ИмяФайла);
				
				УдалитьФайлы(ИмяФайла);
				
				Обл   = Макет.ПолучитьОбласть("Лицевая");
				Обл.Параметры.Заполнить(СткПарам);
				
				отметки=ПолучитьОтметки();
				Если СокрЛП(Отметки)<>"" ТОгда
					Обл.Параметры.Отметки = Отметки;
					Лин=Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
					Обл.Область("Отметки").Обвести(Лин,Лин,Лин,Лин);
				КонецЕСЛИ;
				
				ТабДокумент1.Вывести(Обл);
				Обл   = Макет.ПолучитьОбласть("Оборотная");
				
				//Добавим незаметную фактическую дату печати путевого листа
				Рисунок = Обл.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
				Рисунок.Верх = 1;
				Рисунок.Лево = 75;
				Рисунок.Ширина = 30;
				Рисунок.Высота = 2;
				//Рисунок.ОриентацияТекста = -15; //наклон 15 градусов по часовой стрелке
				Рисунок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				Рисунок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				Рисунок.Шрифт = Новый Шрифт (,6,Ложь); //жирный
				//Рисунок.ЦветТекста = Новый Цвет(0,0,255); //синий
				Рисунок.Текст = "ФДП - " + Строка(ТекущаяДата());
				Рисунок.ГраницаСверху=Ложь;
				Рисунок.ГраницаСнизу=Ложь;
				Рисунок.ГраницаСлева=Ложь;
				Рисунок.ГраницаСправа=Ложь;
				
				Обл.Параметры.Заполнить(СткПарам);
				ТабДокумент1.Вывести(Обл);
				#Если Клиент Тогда
					Возврат ТабДокумент1;
				#Иначе
					вМассивПечатныхФорм.Добавить(ТабДокумент1);
					Возврат вМассивПечатныхФорм;
				#КонецЕсли
				
				
			ИНаче
				Возврат Неопределено;
			КонецесЛИ;	
		ИНаче
			Возврат ТабДокумент;
		КонеЦЕСЛИ;
		
	КонецФункции // Печать_6С()
	
	// Формирует печатную форму путевых листов 4С
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_4С(ИмяМакета, ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		мМаксСтрок = 5;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			Обл.Параметры.Номер       	= мНомерПЛ;
			ФорматДаты      = "ДФ='дд ММММ гггг'";
			Обл.Параметры.ДатаВыписки 		= Формат(Дата,ФорматДаты);
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
			Обл.Параметры.Организация  		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
			Обл.Параметры.КодПоОКПО = Организация.КодПоОКПО;
			Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТипТС = ТранспортноеСредство.ТипТС;
			Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
			Обл.Параметры.ТранспортноеСредствоГарНомер	= ТранспортноеСредство.ГаражныйНомер;
			Если ТранспортноеСредство.Колонна <> Неопределено Тогда
				Обл.Параметры.Колонна						= ТранспортноеСредство.Колонна.Код;
			КонецЕсли;	
			
			Если ВидПЛ = Перечисления.уатВидыПЛ._4П Тогда
				Обл.Параметры.НомерПЛВТалоне  		= мНомерПЛ;
				Обл.Параметры.ДатаПЛВТалоне	 		= Формат(Дата,ФорматДаты);
			КонецЕсли;	
			
			мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель1, Дата,, Организация);
			Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата);
			Обл.Параметры.Водитель1Расшифровка = Водитель1;
			Обл.Параметры.ВодительКод1 = мРеквизитыВодителя1.ТабельныйНомер;
			Если НЕ Водитель2.Пустая() Тогда
				мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель2, Дата,, Организация);
				Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель2.ФизЛицо, Дата);
				Обл.Параметры.Водитель2Расшифровка = Водитель2;
				Обл.Параметры.ВодительКод2 = мРеквизитыВодителя2.ТабельныйНомер;
			КонецЕсли;	
			
			Если мРеквизитыВодителя1 <> Неопределено Тогда
				Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
			КонецЕсли;
			
			уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
			Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
			
			Обл.Параметры.ЛицензионнаяКарточка = ТранспортноеСредство.ЛицензионнаяКарточка;
			Обл.Параметры.НомерЛицензионнойКарточки = ТранспортноеСредство.НомерЛицензионнойКарточки;
			Обл.Параметры.СерияЛицензионнойКарточки = ТранспортноеСредство.СерияЛицензионнойКарточки;
			Обл.Параметры.НомерСерииЛицензионнойКарточки = ТранспортноеСредство.НомерСерииЛицензионнойКарточки;
			
			//выводим прицепы
			мсвПрицепы = Новый Массив;
			Для Каждого ТекСтрокаПрицепы Из Прицепы Цикл
				Если ТекСтрокаПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					Если мсвПрицепы.Найти(ТекСтрокаПрицепы.ТС) = Неопределено Тогда
						мсвПрицепы.Добавить(ТекСтрокаПрицепы.ТС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			//если не нашли прицепа в ТЧ Прицепы, то берем первый попавшийся прицеп из ТЧ Задание
			Для Каждого ТекСтрокаЗадания Из Задание Цикл
				Если ТекСтрокаЗадания.Выполнено Тогда
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И ТекСтрокаЗадания.Прицеп1.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп1) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп1);
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И ТекСтрокаЗадания.Прицеп2.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп2) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп2);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Если мсвПрицепы.Количество() > 0 Тогда
				Обл.Параметры.ПрицепМодель1 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[0]);
				Попытка
					Обл.Параметры.ПрицепГосНомер1 = мсвПрицепы[0].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер1 = мсвПрицепы[0].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Если мсвПрицепы.Количество() > 1 Тогда
				Обл.Параметры.ПрицепМодель2 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[1]);
				Попытка
					Обл.Параметры.ПрицепГосНомер2 = мсвПрицепы[1].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер2 = мсвПрицепы[1].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Если мсвПрицепы.Количество() > 2 Тогда
				Обл.Параметры.ПрицепМодель3 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[2]);
				Попытка
					Обл.Параметры.ПрицепГосНомер3 = мсвПрицепы[2].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер3 = мсвПрицепы[2].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Если мсвПрицепы.Количество() > 3 Тогда
				Обл.Параметры.ПрицепМодель4 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[3]);
				Попытка
					Обл.Параметры.ПрицепГосНомер4 = мсвПрицепы[3].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер4 = мсвПрицепы[3].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			
			Обл.Параметры.ДатаВыезда_ДД		= Формат(ДатаВыезда,"ДФ=дд");
			Обл.Параметры.ДатаВыезда_ММММ	= Формат(ДатаВыезда,"ДФ=ММ");
			Обл.Параметры.ВремяВыезда_ЧЧ		= Формат(ДатаВыезда,"ДФ=ЧЧ");
			Обл.Параметры.ВремяВыезда_ММ		= Формат(ДатаВыезда,"ДФ=мм");
			
			Обл.Параметры.ДатаВозвращения_ДД		= Формат(ДатаВозвращения,"ДФ=дд");
			Обл.Параметры.ДатаВозвращения_ММММ		= Формат(ДатаВозвращения,"ДФ=ММ");
			Обл.Параметры.ВремяВозвращения_ЧЧ		= Формат(ДатаВозвращения,"ДФ=ЧЧ");
			Обл.Параметры.ВремяВозвращения_ММ		= Формат(ДатаВозвращения,"ДФ=мм");
			
			Если ВыдатьКоличествоГорючего > 0 Тогда
				Обл.Параметры.ВыдатьГорючее				= ВыдатьГорючее;
				Обл.Параметры.ВыдатьКоличествоГорючего  = ВыдатьКоличествоГорючего;
			КонецЕсли;	
			
			Обл.Параметры.СпидометрВыезда		= СпидометрВыезда;
			Обл.Параметры.НулевойПробег			= НулевойПробегВыезда;		
			
			Для Каждого ТекСтрока из РасходГСМ Цикл
				Если ТекСтрока.ТС = ТранспортноеСредство Тогда
					Если ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ОсновноеТопливо Тогда
						Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Иначе
						Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыдалДиспетчер.ФизЛицо);
			Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо);
			Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ПринялМеханик.ФизЛицо);
			Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
			
			Для Каждого ТекСтрока Из Задание Цикл
				ТекИндекс = Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрок Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
					Адрес_ = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекСтрока.Контрагент, ДатаВозвращения).ЮридическийАдрес;
					Если НЕ ПустаяСтрока(Адрес_) Тогда
						Обл.Область(стрОбласть).Текст = Обл.Область(стрОбласть).Текст + " " + Адрес_;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
					Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
					
				КонецЕсли;	
				
				стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=""дд.ММ.гг""", "ДФ=""дд.ММ.гг ЧЧ:мм"""));
				
				стрОбласть = "АдресПогрузки" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресПрибытия);
				
				стрОбласть = "АдресРазгрузки" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресУбытия);
				
				стрОбласть = "Груз" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.Номенклатура;
				
				стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
				
				стрОбласть = "Расстояние" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоКмГруз = 0, "",ТекСтрока.КоличествоКмГруз);
				
				стрОбласть = "Тонны" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоТонн = 0, "",ТекСтрока.КоличествоТонн);
				
			КонецЦикла;
			
			// + Алексей печать из Разнарядки 2020
			Если Найти(Комментарий, "АдресПрибытия:") <> 0 Тогда
				мСтрокаАдреса = СокрЛП(Сред(Комментарий, 15));
				Если Обл.Области.Найти("ВРаспоряжение1") <> Неопределено Тогда
					стрОбласть = "ВРаспоряжение1";
					Обл.Область(стрОбласть).Текст = мСтрокаАдреса;
				КонецЕсли;
			КонецЕсли;
			// - Алексей печать из Разнарядки 2020
			
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // Печать_4С()
	
	// Формирует печатную форму путевых листов
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_4П(ИмяМакета, ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		мМаксСтрок = 2;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			ФорматДаты = "ДФ='дд ММММ гггг'";
			
			Обл.Параметры.Номер               = мНомерПЛ;
			Обл.Параметры.ДатаВыписки         = Формат(Дата,ФорматДаты);
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
			Обл.Параметры.Организация         = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
			Обл.Параметры.КодПоОКПО = Организация.КодПоОКПО;
			Обл.Параметры.МодельТС            = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТипТС = ТранспортноеСредство.ТипТС;
			Обл.Параметры.ТранспортноеСредствоГосНомер = ТранспортноеСредство.ГосударственныйНомер;
			Обл.Параметры.ТранспортноеСредствоГарНомер = ТранспортноеСредство.ГаражныйНомер;
			Если ТранспортноеСредство.Колонна <> Неопределено Тогда
				Обл.Параметры.Колонна                  = ТранспортноеСредство.Колонна.Код;
			КонецЕсли;
			Обл.Параметры.НомерПЛВТалоне      = мНомерПЛ;
			Обл.Параметры.ДатаПЛВТалоне       = Формат(Дата,ФорматДаты);
			
			мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель1, Дата,, Организация);
			Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата);
			Обл.Параметры.Водитель1Расшифровка = Водитель1;
			Обл.Параметры.Водитель1Код 	= мРеквизитыВодителя1.ТабельныйНомер;
			
			Если ЗначениеЗаполнено(Водитель2) Тогда
				мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель2, Дата,, Организация);
				Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель2.ФизЛицо, Дата);
				Обл.Параметры.Водитель2Расшифровка = Водитель2;
				Обл.Параметры.Водитель2Код = мРеквизитыВодителя2.ТабельныйНомер;
			КонецЕсли;
			
			Если мРеквизитыВодителя1 <> Неопределено Тогда
				Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
			КонецЕсли;
			
			уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
			Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
			
			Обл.Параметры.ЛицензионнаяКарточка = ТранспортноеСредство.ЛицензионнаяКарточка;
			Обл.Параметры.НомерЛицензионнойКарточки = ТранспортноеСредство.НомерЛицензионнойКарточки;
			Обл.Параметры.СерияЛицензионнойКарточки = ТранспортноеСредство.СерияЛицензионнойКарточки;
			Обл.Параметры.НомерСерииЛицензионнойКарточки = ТранспортноеСредство.НомерСерииЛицензионнойКарточки;
			
			СопровождающиеЛица  					= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Сотрудник1.ФизЛицо);
			Если Не ЗначениеЗаполнено(Сотрудник2) Тогда
				Обл.Параметры.СопровождающиеЛица  = СопровождающиеЛица;
			Иначе
				Обл.Параметры.СопровождающиеЛица  = СокрЛП(СопровождающиеЛица) +  ", " +уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Сотрудник2.ФизЛицо);
			КонецЕсли;	
			
			//выводим прицепы
			мсвПрицепы = Новый Массив;
			Для Каждого ТекСтрокаПрицепы Из Прицепы Цикл
				Если ТекСтрокаПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					Если мсвПрицепы.Найти(ТекСтрокаПрицепы.ТС) = Неопределено Тогда
						мсвПрицепы.Добавить(ТекСтрокаПрицепы.ТС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			//если не нашли прицепа в ТЧ Прицепы, то берем первый попавшийся прицеп из ТЧ Задание
			Для Каждого ТекСтрокаЗадания Из Задание Цикл
				Если ТекСтрокаЗадания.Выполнено Тогда
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И ТекСтрокаЗадания.Прицеп1.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп1) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп1);
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И ТекСтрокаЗадания.Прицеп2.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп2) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп2);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Если мсвПрицепы.Количество() > 0 Тогда
				Обл.Параметры.ПрицепМодель1 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[0]);
				Попытка
					Обл.Параметры.ПрицепГосНомер1 = мсвПрицепы[0].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер1 = мсвПрицепы[0].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Если мсвПрицепы.Количество() > 1 Тогда
				Обл.Параметры.ПрицепМодель2 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[1]);
				Попытка
					Обл.Параметры.ПрицепГосНомер2 = мсвПрицепы[1].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер2 = мсвПрицепы[1].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			
			Обл.Параметры.ДатаВыезда_ДД		= Формат(ДатаВыезда,"ДФ=дд");
			Обл.Параметры.ДатаВыезда_ММММ	= Формат(ДатаВыезда,"ДФ=ММ");
			Обл.Параметры.ВремяВыезда_ЧЧ		= Формат(ДатаВыезда,"ДФ=ЧЧ");
			Обл.Параметры.ВремяВыезда_ММ		= Формат(ДатаВыезда,"ДФ=мм");
			
			Обл.Параметры.ДатаВозвращения_ДД		= Формат(ДатаВозвращения,"ДФ=дд");
			Обл.Параметры.ДатаВозвращения_ММММ		= Формат(ДатаВозвращения,"ДФ=ММ");
			Обл.Параметры.ВремяВозвращения_ЧЧ		= Формат(ДатаВозвращения,"ДФ=ЧЧ");
			Обл.Параметры.ВремяВозвращения_ММ		= Формат(ДатаВозвращения,"ДФ=мм");
			
			Если ВыдатьКоличествоГорючего > 0 Тогда
				Обл.Параметры.ВыдатьГорючее				= ВыдатьГорючее;
				Обл.Параметры.ВыдатьКоличествоГорючего  = ВыдатьКоличествоГорючего;
			КонецЕсли;	
			Обл.Параметры.СпидометрВыезда		= СпидометрВыезда;
			
			Для Каждого ТекСтрока из РасходГСМ Цикл
				Если ТекСтрока.ТС = ТранспортноеСредство Тогда
					Если ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ОсновноеТопливо Тогда
						Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Иначе
						Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыдалДиспетчер.ФизЛицо);
			Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо);
			Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ПринялМеханик.ФизЛицо);
			Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
			
			Для Каждого ТекСтрока Из Задание Цикл
				ТекИндекс = Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрок Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
					Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
				КонецЕсли;
				Обл.Область(стрОбласть).Текст	= Обл.Область(стрОбласть).Текст + ?(ПредставлениеАдреса(ТекСтрока.АдресПрибытия) = "", "", ", " + ПредставлениеАдреса(ТекСтрока.АдресПрибытия));
				стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
				стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
				
				стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
				стрОбласть = "КоличествоЧасов" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЧасов = 0, "",ТекСтрока.КоличествоЧасов);
				
			КонецЦикла;
			
			// + Алексей печать из Разнарядки 2020
			Если Найти(Комментарий, "АдресПрибытия:") <> 0 Тогда
				мСтрокаАдреса = СокрЛП(Сред(Комментарий, 15));
				Если Обл.Области.Найти("ВРаспоряжение1") <> Неопределено Тогда
					стрОбласть = "ВРаспоряжение1";
					Обл.Область(стрОбласть).Текст = мСтрокаАдреса;
				КонецЕсли;
			КонецЕсли;
			// - Алексей печать из Разнарядки 2020
			
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			
			Обл.Параметры.Организация  		= Организация;
			Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
			
			//выводим прицепы
			мПрицеп = Неопределено;
			Для Каждого ТекСтрокаПрицепы Из Прицепы Цикл
				Если ТекСтрокаПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					мПрицеп = ТекСтрокаПрицепы.ТС;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			//если не нашли прицепа в ТЧ Прицепы, то берем первый попавшийся прицеп из ТЧ Задание
			Если мПрицеп = Неопределено Тогда
				Для Каждого ТекСтрокаЗадания Из Задание Цикл
					Если ТекСтрокаЗадания.Выполнено Тогда
						Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И ТекСтрокаЗадания.Прицеп1.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
							мПрицеп = ТекСтрокаЗадания.Прицеп1;
							Прервать;
						ИначеЕсли ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И ТекСтрокаЗадания.Прицеп2.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
							мПрицеп = ТекСтрокаЗадания.Прицеп2;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если мПрицеп <> Неопределено Тогда
				Обл.Параметры.ПрицепМодель1 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп);
				Попытка
					Обл.Параметры.ПрицепГосНомер1 = мПрицеп.ГосударственныйНомер;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // уатПечать_4П()
	
	// Формирует печатную форму путевых листов
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_4М(ИмяМакета, ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		мМаксСтрок = 5;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			Обл.Параметры.Номер       	= мНомерПЛ;
			ФорматДаты      = "ДФ='дд ММММ гггг'";
			Обл.Параметры.ДатаВыписки 		= Формат(Дата,ФорматДаты);
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
			Обл.Параметры.Организация  		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
			Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТипТС = ТранспортноеСредство.ТипТС;
			Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
			Обл.Параметры.ТранспортноеСредствоГарНомер	= ТранспортноеСредство.ГаражныйНомер;
			Обл.Параметры.РежимРаботы = РежимРаботыТС;			
			Если ТранспортноеСредство.Колонна <> Неопределено Тогда
				Обл.Параметры.Колонна						= ТранспортноеСредство.Колонна.Код;
			КонецЕсли;	
			
			мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель1, Дата,, Организация);
			уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
			Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата) + ", № " + мВодительскоеУдСерия + " " + мВодительскоеУдНомер
			+ ?(мРеквизитыВодителя1 = Неопределено, "", ", кл. " + мРеквизитыВодителя1.Класс);
			Обл.Параметры.Водитель1Расшифровка = Водитель1;
			
			Если мРеквизитыВодителя1 <> Неопределено Тогда
				Обл.Параметры.ВодительКод1 = мРеквизитыВодителя1.ТабельныйНомер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Водитель2) Тогда
				мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель2, Дата,, Организация);
				уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
				Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель2.ФизЛицо, Дата) + ", № " + мВодительскоеУдСерия + " " + мВодительскоеУдНомер
				+ ?(мРеквизитыВодителя2 = Неопределено, "", ", кл. " + мРеквизитыВодителя2.Класс);
				Обл.Параметры.Водитель2Расшифровка = Водитель2;
			КонецЕсли;
			
			Если мРеквизитыВодителя2 <> Неопределено Тогда
				Обл.Параметры.ВодительКод2 = мРеквизитыВодителя2.ТабельныйНомер;
			КонецЕсли;
			
			СопровождающиеЛица = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Сотрудник1.ФизЛицо, Дата);
			Если ЗначениеЗаполнено(Сотрудник2) Тогда
				Обл.Параметры.СопровождающиеЛица = СокрЛП(СопровождающиеЛица) +  ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Сотрудник2.ФизЛицо, Дата);
			Иначе
				Обл.Параметры.СопровождающиеЛица = СопровождающиеЛица;
			КонецЕсли;	
			
			//выводим прицепы
			мсвПрицепы = Новый Массив;
			Для Каждого ТекСтрокаПрицепы Из Прицепы Цикл
				Если ТекСтрокаПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					Если мсвПрицепы.Найти(ТекСтрокаПрицепы.ТС) = Неопределено Тогда
						мсвПрицепы.Добавить(ТекСтрокаПрицепы.ТС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			//если не нашли прицепа в ТЧ Прицепы, то берем первый попавшийся прицеп из ТЧ Задание
			Для Каждого ТекСтрокаЗадания Из Задание Цикл
				Если ТекСтрокаЗадания.Выполнено Тогда
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И ТекСтрокаЗадания.Прицеп1.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп1) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп1);
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И ТекСтрокаЗадания.Прицеп2.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп2) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп2);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Если мсвПрицепы.Количество() > 0 Тогда
				Обл.Параметры.ПрицепМодель1 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[0]);
				Попытка
					Обл.Параметры.ПрицепГосНомер1 = мсвПрицепы[0].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер1 = мсвПрицепы[0].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Если мсвПрицепы.Количество() > 1 Тогда
				Обл.Параметры.ПрицепМодель2 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[1]);
				Попытка
					Обл.Параметры.ПрицепГосНомер2 = мсвПрицепы[1].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер2 = мсвПрицепы[1].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Если мсвПрицепы.Количество() > 2 Тогда
				Обл.Параметры.ПрицепМодель3 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[2]);
				Попытка
					Обл.Параметры.ПрицепГосНомер3 = мсвПрицепы[2].ГосударственныйНомер;
					Обл.Параметры.ПрицепГарНомер3 = мсвПрицепы[2].ГаражныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;	
			
			Обл.Параметры.ДатаВыезда_ДД		= Формат(ДатаВыезда,"ДФ=дд");
			Обл.Параметры.ДатаВыезда_ММММ	= Формат(ДатаВыезда,"ДФ=ММ");
			Обл.Параметры.ВремяВыезда_ЧЧ	= Формат(ДатаВыезда,"ДФ=ЧЧ");
			Обл.Параметры.ВремяВыезда_ММ	= Формат(ДатаВыезда,"ДФ=мм");
			
			Обл.Параметры.ДатаВозвращения_ДД		= Формат(ДатаВозвращения,"ДФ=дд");
			Обл.Параметры.ДатаВозвращения_ММММ	= Формат(ДатаВозвращения,"ДФ=ММ");
			Обл.Параметры.ВремяВозвращения_ЧЧ	= Формат(ДатаВозвращения,"ДФ=ЧЧ");
			Обл.Параметры.ВремяВозвращения_ММ	= Формат(ДатаВозвращения,"ДФ=мм");
			
			Если ВыдатьКоличествоГорючего > 0 Тогда
				Обл.Параметры.ВыдатьГорючее				= ВыдатьГорючее;
				Обл.Параметры.ВыдатьКоличествоГорючего  = ВыдатьКоличествоГорючего;
			КонецЕсли;	
			
			Обл.Параметры.СпидометрВыезда		= СпидометрВыезда;
			Обл.Параметры.НулевойПробег			= НулевойПробегВыезда;
			
			Для Каждого ТекСтрока из РасходГСМ Цикл
				Если ТекСтрока.ТС = ТранспортноеСредство Тогда
					Если ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ОсновноеТопливо Тогда
						Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Иначе
						Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыдалДиспетчер.ФизЛицо);
			Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо);
			Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ПринялМеханик.ФизЛицо);
			Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
			
			Для Каждого ТекСтрока Из Задание Цикл
				ТекИндекс = Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрок Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
					Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
				КонецЕсли;	
				стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
				стрОбласть = "АдресПогрузки" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресПрибытия);
				стрОбласть = "АдресРазгрузки" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ПредставлениеАдреса(ТекСтрока.АдресУбытия);
				стрОбласть = "Груз" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.Номенклатура;
				стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
				стрОбласть = "Расстояние" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоКмГруз = 0, "",ТекСтрока.КоличествоКмГруз);
				стрОбласть = "Тонны" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоТонн = 0, "",ТекСтрока.КоличествоТонн);
				
			КонецЦикла;
			
			// + Алексей печать из Разнарядки 2020
			Если Найти(Комментарий, "АдресПрибытия:") <> 0 Тогда
				мСтрокаАдреса = СокрЛП(Сред(Комментарий, 15));
				Если Обл.Области.Найти("ВРаспоряжение1") <> Неопределено Тогда
					стрОбласть = "ВРаспоряжение1";
					Обл.Область(стрОбласть).Текст = мСтрокаАдреса;
				КонецЕсли;
			КонецЕсли;
			// - Алексей печать из Разнарядки 2020
			
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПлатежногоПоручения()
	
	// Формирует печатную форму путевых листов
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_6С1(ИмяМакета, ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		мМаксСтрок = 5;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			ФорматДаты      = "ДФ='дд ММММ гггг'";
			Обл.Параметры.Номер       		= мНомерПЛ;
			Обл.Параметры.ДатаВыписки 		= Формат(Дата,ФорматДаты);
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
			Обл.Параметры.Организация  		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
			Обл.Параметры.КодПоОКПО = Организация.КодПоОКПО;
			Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТипТС = ТранспортноеСредство.ТипТС;
			Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
			Обл.Параметры.ТранспортноеСредствоГарНомер	= ТранспортноеСредство.ГаражныйНомер;
			Если ТранспортноеСредство.Колонна <> Неопределено Тогда
				Обл.Параметры.Колонна						= ТранспортноеСредство.Колонна.Код;
			КонецЕсли;	
			Если ВидПЛ = Перечисления.уатВидыПЛ._4П Тогда
				Обл.Параметры.НомерПЛВТалоне  		= мНомерПЛ;
				Обл.Параметры.ДатаПЛВТалоне	 		= Формат(Дата,ФорматДаты);
			КонецЕсли;	
			
			Водители = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата);
			Если ЗначениеЗаполнено(Водитель2) Тогда
				Обл.Параметры.Водители  = СокрЛП(Водители) +  ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель2.ФизЛицо, Дата);
			Иначе
				Обл.Параметры.Водители  = Водители;
			КонецЕсли;	
			мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель1, Дата,, Организация);
			
			Если мРеквизитыВодителя1 <> Неопределено Тогда
				Обл.Параметры.ВодительКод 	= мРеквизитыВодителя1.ТабельныйНомер;
				Обл.Параметры.КлассВодителя = мРеквизитыВодителя1.Класс;
			КонецЕсли;
			
			уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
			Обл.Параметры.НомерУдостоверенияВодителя = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
			
			Если ЗначениеЗаполнено(Водитель2) Тогда
				уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
				Обл.Параметры.НомерУдостоверенияВодителя  = СокрЛП(Обл.Параметры.НомерУдостоверенияВодителя) + ", "
				+ ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
			КонецЕсли;
			
			Обл.Параметры.ЛицензионнаяКарточка = ТранспортноеСредство.ЛицензионнаяКарточка;
			Обл.Параметры.НомерЛицензионнойКарточки = ТранспортноеСредство.НомерЛицензионнойКарточки;
			Обл.Параметры.СерияЛицензионнойКарточки = ТранспортноеСредство.СерияЛицензионнойКарточки;
			Обл.Параметры.НомерСерииЛицензионнойКарточки = ТранспортноеСредство.НомерСерииЛицензионнойКарточки;
			
			Обл.Параметры.ВремяВыезда		= Формат(ДатаВыезда,"ДФ=ЧЧ:мм");
			Обл.Параметры.ВремяВозвращения	= Формат(ДатаВозвращения,"ДФ=ЧЧ:мм");
			Если ВыдатьКоличествоГорючего > 0 Тогда
				Обл.Параметры.ВыдатьГорючее				= ВыдатьГорючее;
				Обл.Параметры.ВыдатьКоличествоГорючего  = ВыдатьКоличествоГорючего;
			КонецЕсли;	
			
			Обл.Параметры.СпидометрВыезда		= СпидометрВыезда;
			Обл.Параметры.СпидометрВозвращения	= СпидометрВозвращения;
			Обл.Параметры.НулевойПробегВыезда	= НулевойПробегВыезда;
			Обл.Параметры.НулевойПробегВозвращения = НулевойПробегВозвращения;
			
			Для Каждого ТекСтрока из РасходГСМ Цикл
				Если ТекСтрока.ТС = ТранспортноеСредство Тогда
					Если ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ОсновноеТопливо Тогда
						Обл.Параметры.ГСМ1	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде1	= ТекСтрока.ОстатокПриВыезде;
					Иначе
						Обл.Параметры.ГСМ2	= ТекСтрока.ГСМ;
						Обл.Параметры.ОстатокПриВыезде2	= ТекСтрока.ОстатокПриВыезде;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			Обл.Параметры.ВыдалДиспетчер	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыдалДиспетчер.ФизЛицо);
			Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо);
			Обл.Параметры.ПринялМеханик		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ПринялМеханик.ФизЛицо);
			Обл.Параметры.ВодительСдал		= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ВодительПринял	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1.ФизЛицо);
			Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
			
			Обл.Параметры.СтрПутевойЛист  = "№" + Номер + " от " + Формат(Дата, "ДЛФ=D");
			
			Для Каждого ТекСтрока Из Задание Цикл
				ТекИндекс = Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрок Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
					Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
				КонецЕсли;	
				стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "", Формат(ТекСтрока.ВремяПрибытия, "ДФ=ЧЧ:мм"));
				стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "", Формат(ТекСтрока.ВремяУбытия, "ДФ=ЧЧ:мм"));
				стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
				стрОбласть = "КоличествоЧасов" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЧасов = 0, "",ТекСтрока.КоличествоЧасов);
				
			КонецЦикла;
			
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			
			Обл.Параметры.Организация  		= Организация;
			Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
			
			Обл.Параметры.СтрПутевойЛист  = "№" + Номер + " от " + Формат(Дата, "ДЛФ=D");
			
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПлатежногоПоручения()
	
	// Формирует печатную форму путевых листов
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_ЭСМ2(ИмяМакета, ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		мМаксСтрок = 6;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
			Обл.Параметры.Номер       	= мНомерПЛ;
			ФорматДаты      = "ДЛФ='Д'";
			Обл.Параметры.ДатаВыписки 		= Формат(Дата, ФорматДаты);
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
			Обл.Параметры.Организация  		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
			Обл.Параметры.КодПоОКПО = Организация.КодПоОКПО;
			Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
			Обл.Параметры.ТипТС = ТранспортноеСредство.ТипТС;
			Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
			Обл.Параметры.ТранспортноеСредствоГарНомер	= ТранспортноеСредство.ГаражныйНомер;
			Если ТранспортноеСредство.Колонна <> Неопределено Тогда
				Обл.Параметры.Колонна						= ТранспортноеСредство.Колонна.Код;
			КонецЕсли;	
			
			Водители = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата);
			Если ЗначениеЗаполнено(Водитель2) Тогда
				Обл.Параметры.Водители = СокрЛП(Водители) + ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель2.ФизЛицо, Дата);
			Иначе
				Обл.Параметры.Водители = Водители;
			КонецЕсли;	
			мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(Водитель1, Дата,, Организация);
			Если мРеквизитыВодителя1 <> Неопределено Тогда
				Обл.Параметры.ВодительКод = мРеквизитыВодителя1.ТабельныйНомер;
			КонецЕсли;
			
			Обл.Параметры.ОсмотрелВрач = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
			
			Обл.Параметры.НачалоРаботы = Формат(ДатаВыезда, ФорматДаты);
			Обл.Параметры.КонецРаботы = Формат(ДатаВозвращения, ФорматДаты);
			
			Для Каждого ТекСтрока Из Задание Цикл
				ТекИндекс = Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрок Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "Дата" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = День(ТекСтрока.ВремяПрибытия);
				стрОбласть = "Объект" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.ОбъектСтроительства;
				стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "", Формат(ТекСтрока.ВремяПрибытия, "ДФ=ЧЧ:мм"));
				стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "", Формат(ТекСтрока.ВремяУбытия, "ДФ=ЧЧ:мм"));
				
				Если ТекИндекс = 1 Тогда
					
					Обл.Параметры.Заказчик  		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекСтрока.Контрагент, ДатаВозвращения), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
					Обл.Область("СпидометрВыезда1").Текст = СпидометрВыезда;
					
					Для Каждого ТекСтрокаГСМ из РасходГСМ Цикл
						Если ТекСтрокаГСМ.ТС = ТранспортноеСредство Тогда
							Если ТекСтрокаГСМ.ГСМ = ТекСтрокаГСМ.ТС.Модель.ОсновноеТопливо Тогда
								Обл.Область("ГСМ1").Текст = ТекСтрокаГСМ.ГСМ;
								Обл.Область("ОстатокПриВыезде1").Текст = ТекСтрокаГСМ.ОстатокПриВыезде;
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
					
				КонецЕсли;	
				
			КонецЦикла;
			
			ТабДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			
			ТабДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПлатежногоПоручения()
	
	// Формирует печатную форму путевых листов ПЛ-1
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_ПЛ1(ИмяМакета, ФлагПечати="") Экспорт
		Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;	
		
		мМаксСтрок = 2;
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ФорматДаты      = "ДЛФ='Д'";
		
		ТабДокумент.ПолеСверху 	= 0;
		ТабДокумент.ПолеСлева 	= 0;
		ТабДокумент.ПолеСнизу 	= 0;
		ТабДокумент.ПолеСправа 	= 0;
		
		//печатаем лицевую сторону п/л
		Если ФлагПечати = 2 Тогда
			Возврат ТабДокумент;
		КонецЕсли;
		
		мСведенияОПредпринимателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаВозвращения);
		
		Обл = Макет.ПолучитьОбласть("ОбластьШапка");
		
		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ЭтотОбъект);
		Обл.Параметры.Номер = мНомерПЛ;
		Обл.Параметры.ДатаНач = Формат(ДатаВыезда, "ДФ=дд.ММ.гггг,ЧЧ:мм");
		Обл.Параметры.ДатаКон = Формат(ДатаВозвращения, "ДФ='дд.ММ.гггг,ЧЧ:мм'");
		
			Обл.Параметры.ТекстДействителенДо = ?(ДатаВозвращения = '00010101' или НачалоДня(ДатаВозвращения)=НачалоДня(ДатаВыезда), "", "- " + Формат(ДатаВозвращения, ФорматДаты));
		
		ФорматДаты = "ДФ='дд ММММ гггг, ЧЧ:мм'";
		
		ФИОФизЛица = уатОбщегоНазначения.уатФИОФизЛица(Организация, КонецДня(ДатаВыезда));
		Если ФИОФизЛица <> Неопределено Тогда
			Обл.Параметры.ФИО = уатОбщегоНазначенияТиповые.ПолучитьФамилиюИмяОтчество(ФИОФизЛица.Фамилия, ФИОФизЛица.Имя, ФИОФизЛица.Отчество, Ложь);
		Иначе
			Обл.Параметры.ФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Организация);
		КонецЕсли;
		
		Обл.Параметры.Адрес = мСведенияОПредпринимателе.ЮридическийАдрес;
		Обл.Параметры.Телефон = мСведенияОПредпринимателе.Телефоны;
		
		Обл.Параметры.ЛицензионнаяКарточка = ТранспортноеСредство.ЛицензионнаяКарточка;
		Обл.Параметры.НомерЛицензионнойКарточки = ТранспортноеСредство.НомерЛицензионнойКарточки;
		//Обл.Параметры.СерияЛицензионнойКарточки = ТранспортноеСредство.СерияЛицензионнойКарточки;
		
		Обл.Параметры.МодельТС  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство);
		Обл.Параметры.ТранспортноеСредствоГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
		Обл.Параметры.ТипТС = ТранспортноеСредство.ТипТС;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
		Обл.Параметры.Водитель1 = Водитель1;
		Обл.Параметры.Водитель1Представление = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель1.ФизЛицо, Дата);
		Обл.Параметры.НомерУдостоверенияВодителя1 = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		
		уатОбщегоНазначения.уатУдостоверениеВодителя(Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
		Обл.Параметры.Водитель2 = Водитель2;
		Обл.Параметры.Водитель2Представление = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(Водитель2.ФизЛицо, Дата);
		Обл.Параметры.НомерУдостоверенияВодителя2 = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
		
		//выводим прицепы
		Если ИмяМакета <> "_ПА1" Тогда //для автобуса прицепы некорректны
			мсвПрицепы = Новый Массив;
			Для Каждого ТекСтрокаПрицепы Из Прицепы Цикл
				Если ТекСтрокаПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					Если мсвПрицепы.Найти(ТекСтрокаПрицепы.ТС) = Неопределено Тогда
						мсвПрицепы.Добавить(ТекСтрокаПрицепы.ТС);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			//если не нашли прицепа в ТЧ Прицепы, то берем первый попавшийся прицеп из ТЧ Задание
			Для Каждого ТекСтрокаЗадания Из Задание Цикл
				Если ТекСтрокаЗадания.Выполнено Тогда
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И ТекСтрокаЗадания.Прицеп1.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп1) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп1);
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И ТекСтрокаЗадания.Прицеп2.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						Если мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп2) = Неопределено Тогда
							мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп2);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Если мсвПрицепы.Количество() > 0 Тогда
				Обл.Параметры.ПрицепМодель1 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[0]);
				Попытка
					Обл.Параметры.ПрицепГосНомер1 = мсвПрицепы[0].ГосударственныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Если мсвПрицепы.Количество() > 1 Тогда
				Обл.Параметры.ПрицепМодель2 = уатОбщегоНазначения.уатПредставлениеМоделиТС(мсвПрицепы[1]);
				Попытка
					Обл.Параметры.ПрицепГосНомер2 = мсвПрицепы[1].ГосударственныйНомер;
				Исключение
				КонецПопытки;	
			КонецЕсли;
		КонецЕсли;
		
		Обл.Параметры.ВыпустилМеханик	= уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыпустилМеханик.ФизЛицо);
		Обл.Параметры.ОсмотрелВрач  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ОсмотрелВрач.ФизЛицо);
		
		Обл.Параметры.ДатаВыезда = Формат(ДатаВыезда, ФорматДаты); //+время
		//Обл.Параметры.ДатаВозвращения = Формат(ДатаВозвращения, ФорматДаты);
		
		Обл.Параметры.СпидометрВыезда = СпидометрВыезда;
		//Обл.Параметры.СпидометрВозвращения = СпидометрВозвращения;
		
		ТабДокумент.Вывести(Обл);
		
		Обл = Макет.ПолучитьОбласть("ОбластьСтрока");
		Для Каждого ТекЗадание Из Задание Цикл
			Обл.Параметры.Заказчик = ТекЗадание.Контрагент;
			Обл.Параметры.ЗаказчикПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекЗадание.Контрагент, ДатаВозвращения), "ПолноеНаименование, ЮридическийАдрес");
			Если ИмяМакета = "_ПГ1" Тогда
				Обл.Параметры.Номенклатура = ТекЗадание.Номенклатура;
			КонецЕсли;
			Если ИмяМакета = "_ПА1" ИЛИ ИмяМакета = "_ПГ1" Тогда
				Обл.Параметры.АдресУбытия = ПредставлениеАдреса(ТекЗадание.АдресУбытия);
				Обл.Параметры.АдресПрибытия = ПредставлениеАдреса(ТекЗадание.АдресПрибытия);
			КонецЕсли;
			
			ТабДокумент.Вывести(Обл);
		КонецЦикла;
		
		Обл = Макет.ПолучитьОбласть("ОбластьПодвал");
		ТабДокумент.Вывести(Обл);
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПлатежногоПоручения()
	
	// Формирует печатную форму путевых листов ПГ-1
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_ПГ1(ИмяМакета, ФлагПечати="") Экспорт
		
		Возврат уатПечать_ПЛ1(ИмяМакета, ФлагПечати="");
		
	КонецФункции
	
	// Формирует печатную форму путевых листов ПА-1
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция уатПечать_ПА1(ИмяМакета, ФлагПечати="") Экспорт
		
		Возврат уатПечать_ПЛ1(ИмяМакета, ФлагПечати="");
		
	КонецФункции
	
	// Формирует печатную форму путевых листов
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция ПечатьМаршрутногоЛистаПоЗаданию(ИмяМакета = "") Экспорт
		ТабДок = Новый ТабличныйДокумент;
		Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
			ИмяМакета = "уатМаршрутныйЛист";
		КонецЕсли;	
		Макет = ПолучитьОбщийМакет(ИмяМакета);
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.Вывести(Область);
		// Шапка
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.Номер = Номер;
		Область.Параметры.Дата = ДатаВозвращения;
		Область.Параметры.Организация = Организация;
		Область.Параметры.ВидЗаказа = Справочники.уатВидыПеревозок.Грузовая;
		Область.Параметры.ТС = уатОбщегоНазначения.уатПредставлениеТС(ТранспортноеСредство, Организация);
		Водитель1Представление = уатОбщегоНазначения.уатФИОФизЛица(Водитель1, НачалоДня(ДатаВозвращения));
		Область.Параметры.Водитель = Водитель1;
		Область.Параметры.ПредставлениеВодителя = ?(Водитель1Представление = Неопределено, Водитель1, 
		Водитель1Представление.Фамилия + " " + Водитель1Представление.Имя + " " + Водитель1Представление.Отчество);
		Область.Параметры.Ответственный = Ответственный;
		ТабДок.Вывести(Область);
		// Задания
		Область = Макет.ПолучитьОбласть("ЗаданияШапка");
		ТабДок.Вывести(Область);
		Для Каждого ТекСтрокаЗадания Из Задание Цикл
			Область = Макет.ПолучитьОбласть("Задания");
			Если Не ЗначениеЗаполнено(ТекСтрокаЗадания.Контрагент) Тогда
				Область.Параметры.Заказчик = ТекСтрокаЗадания.Подразделение;
			Иначе	
				Область.Параметры.Заказчик = ТекСтрокаЗадания.Контрагент;
			КонецЕсли;	
			Область.Параметры.Маршрут = ТекСтрокаЗадания.Маршрут.НаименованиеПолное;
			Область.Параметры.ПунктЗагрузки = ПредставлениеАдреса(ТекСтрокаЗадания.АдресПрибытия);
			Область.Параметры.ВремяЗагрузки =  ТекСтрокаЗадания.ВремяПрибытия;
			Область.Параметры.ВремяЗагрузки = Формат(ТекСтрокаЗадания.ВремяПрибытия, 
			?(ТекСтрокаЗадания.ВремяПрибытия - НачалоДня(ТекСтрокаЗадания.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			Область.Параметры.ПунктРазгрузки = ПредставлениеАдреса(ТекСтрокаЗадания.АдресУбытия);
			Область.Параметры.ВремяЗагрузки = Формат(ТекСтрокаЗадания.ВремяУбытия, 
			?(ТекСтрокаЗадания.ВремяУбытия - НачалоДня(ТекСтрокаЗадания.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			Область.Параметры.Расстояние = ТекСтрокаЗадания.КоличествоКмГруз + ТекСтрокаЗадания.КоличествоКмПорожний;
			Область.Параметры.Груз = ТекСтрокаЗадания.Номенклатура;
			Область.Параметры.ВесГруза = ТекСтрокаЗадания.КоличествоТонн;
			Область.Параметры.КоличествоЕздок = ТекСтрокаЗадания.КоличествоЕздок;
			ТабДок.Вывести(Область);
		КонецЦикла;
		
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Защита = Истина;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Ложь;
		
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДок, 1, Ложь, "Маршрутный лист", Права);
		
	КонецФункции // ПечатьПлатежногоПоручения()
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь, ФлагПечати = 0,ТекРисунок="", пТабличныйДокумент = Неопределено) Экспорт
		
		Если ЕстьНезакрытыйРЛ() Тогда Возврат; КонецесЛИ;
		
		//+Lexx от 20.09.2019
		//Контроль просрочки документов водителей
		мЭтоПривлеченныйТС = глОбщий.ЭтоПривлеченноеТС(ТранспортноеСредство,Дата);
		Если (Не мЭтоПривлеченныйТС) И (уатОбработчикиПодписокНаСобытия.КонтрольДокументовТСИВодителя(ТранспортноеСредство,Водитель1,Контрагент,Дата)) Тогда Возврат; КонецесЛИ;
		//-Lexx от 20.09.2019
		
		Если ЭтоНовый() Тогда
			#Если Клиент Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			#КонецЕсли
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			#Если Клиент Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		//+Lexx от 07.12.2017        !!!!!
		//Если уатОбработчикиПодписокНаСобытия.НайтиРемонтныйЛист(Ссылка) Тогда Возврат; КонецесЛИ;
		//-Lexx от 07.12.2017
		
		
		Если НЕ ПравоДоступа("Изменение", Метаданные()) Тогда
			#Если Клиент Тогда
			Предупреждение("Недостаточно прав для печати документа!");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
		Если ДанныеИзменились И Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект)  Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Попытка
				Обработка.СсылкаНаОбъект = Ссылка;
				ТабДокумент = Обработка.Печать();
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			Исключение
				Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
			КонецПопытки;
		Иначе
			Если НазваниеМакета = "ПечататьМаршрутныйЛистПоЗаданию" Тогда
				ПечатьМаршрутногоЛистаПоЗаданию();	
			ИначеЕсли НазваниеМакета = "_ПЛ1" ИЛИ НазваниеМакета = "_ПГ1" ИЛИ НазваниеМакета = "_ПА1" Тогда
				ИмяМакета = НазваниеМакета;
				ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ИмяМакета, 0)";
				ТабДокумент = Вычислить(ИмяФункцииПечати);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
			ИначеЕсли НазваниеМакета = "уатЭСМ7" Тогда
				Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства) Тогда
					ИмяМакета = НазваниеМакета;
					ИмяФункцииПечати = "уатЗащищенныеФункции.уатПечать_" + ИмяМакета + "(ЭтотОбъект,ИмяМакета, 0)";
					ТабДокумент = Вычислить(ИмяФункцииПечати);
					уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);     
				Иначе
					Сообщить("По организации """ + Организация + """ не ведётся учет вырабтки по объектам строительства.", СтатусСообщения.Важное);
				КонецЕсли
			ИначеЕсли НазваниеМакета = "уатАвтокран" Тогда
				ИмяМакета = НазваниеМакета;
				ИмяФункцииПечати = "уатЗащищенныеФункции.уатПечать_" + ИмяМакета + "(ЭтотОбъект,ИмяМакета, 0)";
				ТабДокумент = Вычислить(ИмяФункцииПечати);
				уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);	
			Иначе
				Если  НазваниеМакета = "ПечататьЛицСторону" Тогда
					ИндПеч = "1";
				ИначеЕсли   НазваниеМакета = "ПечататьОбрСторону" Тогда
					ИндПеч = "2";
				Иначе   //НазваниеМакета = "ПечататьВесьПутевойЛист" Тогда
					ИндПеч = "0";
				КонецЕСЛИ;
				
				Если ТипЗнч(ВидПЛ) = Тип("СправочникСсылка.ВнешниеОбработки") ТОгда
					ИмяМакета =  "_6С";
					ИмяМакетаПЕч =  ВидПЛ;
				ИНаче	
					ИмяМакета = ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ВидПЛ)].Имя;
					ИмяМакетаПеч =  ИмяМакета;
				КонецеСЛИ;
				
				Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
					ИмяФункцииПечати = "уатЗащищенныеФункции.уатПечать" + ИмяМакета + "(ЭтотОбъект,""уат""+сред(ИмяМакета,2,4), 0)";
				ИначеЕсли (ИмяМакета = "_4")  Или (ИмяМакета = "_6") Тогда
					ИмяФункцииПечати = "уатЗащищенныеФункции.уатПечать" + ИмяМакета + "(ЭтотОбъект,ИмяМакета + """", 0)";
				ИначеЕсли ИмяМакета = "_6С"  Тогда
					ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ИмяМакетаПеч, "+ИндПеч+", """+ТекРисунок+""",НаПринтер )";
				Иначе	
					ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ИмяМакетаПеч, "+ИндПеч+")";
				КонецЕсли;	
				ТабДокумент = Вычислить(ИмяФункцииПечати);
				#Если Клиент Тогда
					уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
				#Иначе
					пТабличныйДокумент = ТабДокумент;
				#КонецЕсли
				
			КонецЕсли;
		КонецЕсли;    		
	КонецПроцедуры // Печать
	
	Функция ПолучитьСтруктуруМакета(ИмяМакета)
		Стр = Новый Структура("Макет,ЭтоВнешняяОбработка,ГенЗаказчикДополнительныйПЛ,ВладелецТСДополнительныйПЛ");
		
		//Lexx описание
		//Блок определения макета печати ПЛ в зависимоти от карточки ЗАКАЗЧИКА
		//На выходе имеем:
		//Если значение "ОсновнойВидПЛ" - ЗАПОЛНЕНО и НЕТ ФЛАГА "ДополнительныйПЛ" - меняем макет из ПЛ на макет из карточки Заказчика
		//Если значение "ОсновнойВидПЛ" - ЗАПОЛНЕНО и ЕСТЬ ФЛАГ "ДополнительныйПЛ" - печатаем как основной ПЛ - макет из ПЛ, а дополнительный ПЛ  - из карточки Заказчика
		Стр.ГенЗаказчикДополнительныйПЛ = Ложь;
		Стр.ВладелецТСДополнительныйПЛ = Ложь;
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Если ЗначениеЗаполнено(Контрагент.ОсновнойВидПЛ) ТОгда
				Если Контрагент.ДополнительныйПЛ Тогда
					Стр.ГенЗаказчикДополнительныйПЛ = Истина;
				Иначе
					ИмяМакета = Контрагент.ОсновнойВидПЛ;
				КонецесЛИ;
			КонецЕСЛИ;
		КонецеСЛИ;

		Если ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ВнешниеОбработки") ТОгда
			Стр.ЭтоВнешняяОбработка = Неопределено;
			ДвоичныеДанные = ИмяМакета.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
				ДвоичныеДанные.Записать(ИмяФайла);
				
				Макет = Новый ТабличныйДокумент;
				Макет.Прочитать(ИмяФайла);
				Стр.Макет = Макет;
				
				УдалитьФайлы(ИмяФайла);
				Стр.ЭтоВнешняяОбработка = Истина;
			КонецесЛИ;		
		ИНАче
			Стр.Макет = ПолучитьМакет(ИмяМакета);
			Стр.ЭтоВнешняяОбработка = Ложь;
		КонецеСЛИ;
		
		//Lexx описание
		//А теперь проверим, если ТС - ПРИВЛЕЧЕННОЕ, то проверим карточку владельца
		//И если в карточке владельца ТС заполнены реквизит "ОсновнойВидПЛ" и стоит ФЛАГ "ДополнительныйПЛ"
		//то будем печатать форму ПЛ из карточки Владельца
		Если мЭтоПривлеченныйТС Тогда
			Если ЗначениеЗаполнено(ТранспортноеСредство.ВладелецТС.ОсновнойВидПЛ) И ТранспортноеСредство.ВладелецТС.ДополнительныйПЛ ТОгда
				Стр.ВладелецТСДополнительныйПЛ = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		Возврат Стр;
	КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	//РазностьДатВыздаВозврата = ОбъектКопирования.ДатаВозвращения - ОбъектКопирования.ДатаВыезда;
	
	Дата = ТекущаяДата();
	//ДатаВыезда = ТекущаяДата();
	//ДатаВозвращения = ДатаВыезда
	ДатаВыезда = Неопределено;
	ДатаВозвращения = Неопределено;
	
	//уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	Прицепы.Очистить();
	РасходГСМ.Очистить();
	ВыработкаСотрудников.Очистить();
	ВыработкаТС.Очистить();
	Зарплата.Очистить();
	Простои.Очистить();
	СпидометрВозвращения = 0;
	ВыдатьГорючее = Неопределено;
	ВыдатьКоличествоГорючего = 0;
	ВремяРаботыОтопителя = 0;
	ИдентификаторРазнарядки = "";
	мКопированиеДокумента = Истина;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
КонецПроцедуры                                                                         

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// + Lexx, 03.02.2021 - Если у нас стоит галка "УчетЗатратПоДаннымБСМТС" и в путевом стоит флаг "ФлагИспользоватьДанныеБСМТС"
	//проверяем чтобы обязательно был пробег по БСМТС
	Если ФлагИспользоватьДанныеБСМТС И ТранспортноеСредство.Модель.НаличиеСпидометра И ПробегПоGPS = 0 Тогда
		Сообщить("Нулевой пробег по данным БСМТС. Проведение документа невозможно!");
		Отказ = Истина;
	КонецЕсли;	
	
	мЭтоПривлеченныйТС = глОбщий.ЭтоПривлеченноеТС(ТранспортноеСредство,Дата);
	
	ОтразитьПробег(Отказ);
	ОтразитьРасходГСМ(Отказ);
	ОтразитьВыдачуГСМ(Отказ);
	ОтразитьРаботу(Отказ);
	ОтразитьВыработку(Отказ);
	ОтразитьРаботуВодителей(Отказ);
	ОтразитьСчетчики(Отказ);
	
	Если ЗначениеЗаполнено(ПринялДиспетчер)=Ложь ТОгда
		ПринялДиспетчер = ПараметрыСеанса.ТекущийПользователь;
	КонецЕСЛИ;
	
	
	Если отказ ТОгда
		Рассчитан = Ложь;
	КонецЕСЛИ;
	
	
КонецПроцедуры

Процедура РаспределитьЧасы(Отказ)
	
	Если ОстатокТопливаВозврат=0 и СпидометрВозвращения=0  ТОгда  //Путевой лист необработан
		Возврат;
	КонецЕсли;
	
	ПробегПоЗаказчикуАвто =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗаданиеПробегАвто);
	
	ТБл = Новый ТаблицаЗначений;
	Тбл.Колонки.Добавить("СтрДок");
	Тбл.Колонки.Добавить("КоличествоЧасов",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("ПробегСдел",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("ПробегЗкз",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("КоличествоКмПорожний",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("КоличествоКмСпец4",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("КоличествоКмСпец5",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("ЧасыПоЗкз",Новый ОписаниеТипов("Число"));
	
	//Соберем таблицы
	Для каждого стрДок из Задание Цикл
		Стр = тбл.Добавить();
		Стр.СтрДок = СтрДок;
		Если ЗначениеЗаполнено(СтрДок.Реестр) ТОгда
			Стр.ПробегСдел = СтрДок.КоличествоЕздок * СтрДок.КоличествоКмГруз;
		ИНАче
			Стр.КоличествоЧасов = СтрДок.КоличествоЧасов;
		КонецЕСЛИ;
		Если ПробегПоЗаказчикуАвто = Ложь ТОгда
			Стр.ПробегЗкз = СтрДок.КоличествоКмПорожний;
		ИначеЕсли СтрДок.КоличествоКмСпец4<>0 Тогда
			Стр.ПробегЗкз = СтрДок.КоличествоКмСпец4;
			Стр.ЧасыПоЗкз = Стр.КоличествоЧасов; //Уберем из пропорции 
		КонецЕСЛИ;
	КонецЦикла;
	
	Для каждого стрДок из Работа Цикл
		Стр = тбл.Добавить();
		Стр.СтрДок = СтрДок;
		Если ЗначениеЗаполнено(СтрДок.Реестр) ТОгда
			Стр.ПробегСдел = СтрДок.КоличествоЕздок * СтрДок.КоличествоКмГруз;
		ИНАче
			Стр.КоличествоЧасов = СтрДок.КоличествоЧасов;
		КонецЕСЛИ;
	КонецЦикла;
	
	Если Тбл.Количество()=0 ТОгда Возврат; КонецЕСЛИ; //Таблицы пустые уходим
	
	
	//Распределим часы по сделке
	Если Тбл.Итог("ПробегСдел")<>0 Тогда
		ВсегоЧасовПоПЛ = (ДатаВозвращения - ДатаВыезда) / 3600;
		Если ВсегоЧасовПоПЛ> 4 ТОгда
			ВсегоЧасовПоПЛ = ВсегоЧасовПоПЛ - 1; // Уберем обед
		КонецеСЛИ;
		
		итЧс = ВсегоЧасовПоПЛ - Тбл.Итог("КоличествоЧасов");
		итПРб = Тбл.Итог("ПробегСдел");
		
		Для каждого стр из Тбл Цикл
			Если Стр.ПробегСдел=0 ТОгда Продолжить; КонецЕСЛИ;
			Стр.КоличествоЧасов = итЧс * Стр.ПробегСдел/итПРб;
			Стр.СтрДок.КоличествоЧасов = Стр.КоличествоЧасов;
			послСтр = Стр;
		КонецЦикла;
		послСтр.КоличествоЧасов = послСтр.КоличествоЧасов + ВсегоЧасовПоПЛ - Тбл.Итог("КоличествоЧасов");
		послСтр.СтрДок.КоличествоЧасов = послСтр.КоличествоЧасов;
		
	КонецеСЛИ;
	
	// + Алексей
	// Закомментировано 21.01.2020 в связи с использованием новой функции на форме документа
	//Распределим пробег
	//итПрб = СпидометрВозвращения - СпидометрВыезда  - Тбл.Итог("ПробегСдел")*2 - Тбл.Итог("ПробегЗкз");
	//итЧс  = Тбл.Итог("КоличествоЧасов") - Тбл.Итог("ЧасыПоЗкз");
	//
	//Для каждого стр из Тбл Цикл
	//	Стр.КоличествоКмПорожний = Стр.КоличествоКмПорожний + Стр.ПробегЗкз;
	//	Стр.КоличествоКмПорожний = Стр.КоличествоКмПорожний + Стр.ПробегСдел*2;
	//	Если Стр.ПробегЗкз <> 0 тОгда 
	//		//Стр.КоличествоКмСпец5 = ОКР(итПрб*Стр.КоличествоЧасов/итЧс,0); //отнесем на неоплачиваемый пробег
	//		Стр.КоличествоКмПорожний = Стр.ПробегЗкз;
	//	ИНаче	
	//		Стр.КоличествоКмПорожний = Стр.КоличествоКмПорожний + ОКР(итПрб*Стр.КоличествоЧасов/итЧс,2);
	//	КонецеСЛИ;
	//КонецЦикла;
	//Если Стр.ПробегЗкз <> 0 тОгда 
	//	Стр.КоличествоКмСпец5 = Стр.КоличествоКмСпец5 + (СпидометрВозвращения - СпидометрВыезда) - (Тбл.Итог("КоличествоКмПорожний")+Тбл.Итог("КоличествоКмСпец5"));
	//ИНаче
	//	Стр.КоличествоКмПорожний = Стр.КоличествоКмПорожний + (СпидометрВозвращения - СпидометрВыезда) - Тбл.Итог("КоличествоКмПорожний");
	//КонецЕСЛИ;
	
	
	////Нераспределеный пробег
	//итПрб = (СпидометрВозвращения - СпидометрВыезда) - Тбл.Итог("КоличествоКмПорожний");
	//итЧс  = Тбл.Итог("КоличествоЧасов");
	//итП = 0;
	//Если итПрб <> 0 и итЧс <> 0 Тогда
	//	Для каждого Стр из Тбл Цикл
	//		п = ОКР(итПрб*(Стр.КоличествоЧасов/итЧс),2);
	//		
	//		Если итП+п >= итПрб Тогда
	//			п = итПрб - итП;
	//		КонецЕслИ;
	//		
	//		Если Стр.ПробегЗкз <> 0 тОгда
	//			Стр.КоличествоКмСпец5 = п; //отнесем на неоплачиваемый пробег
	//		Иначе
	//			Стр.КоличествоКмПорожний = Стр.КоличествоКмПорожний + п;
	//		КонецеСЛИ;
	//		
	//		итП = итП+ п;
	//		Если итП = итПрб Тогда ПРерватЬ; КонецеслИ;
	//		
	//	КонецЦикла;
	//КонецесЛИ;
	
	////Запишем новые значения в строки
	//Для каждого Стр из Тбл Цикл
	//	СтрДок = Стр.СтрДок;
	//	СтрДок.КоличествоКмПорожний = Стр.КоличествоКмПорожний;
	//	СтрДок.КоличествоКмСпец4 = Стр.ПробегЗкз;
	//	СтрДок.КоличествоКмСпец5 = Стр.КоличествоКмСпец5;
	//КонецЦикла;
	
	// Алексей - здесь изменил итоги по Тбл на итоги по ТЧ Задание - т.к. в Тбл теперь пробег не распределяется, общий пробег всегда в КоличествоКмСпец5
	Если Задание.Итог("КоличествоКмСпец5") <> (СпидометрВозвращения - СпидометрВыезда) Тогда
		Сообщить("Не сходится пробег по путевому листу и по объектам! " + Ссылка);
	КонецЕсли;
	// + Алексей
КонецПроцедуры

Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(ВидПЛ) ТОгда
		Если ЗначениеЗаполнено(ТранспортноеСредство.ОсновнойВидПЛ) Тогда
			ВидПЛ = ТранспортноеСредство.ОсновнойВидПЛ;
		Иначе
			ВидПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ); 
		КонецЕсли;	
	КонецЕсли;	
	
	
	Если ЭтоНовый() ТОгда
		Если ЗначениеЗаполнено(ТранспортноеСредство.Маршурт) ТОгда
			Стр = Маршруты.Добавить();
			Стр.Маршрут = ТранспортноеСредство.Маршурт;
		КонецЕСЛИ;
	КонецеСЛИ;
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если глОбщий.ЕстьРасходГСМзаМесяц(Дата) ТОгда
		Отказ = Истина;
		ВозвраТ;
	КонецЕСЛИ;
	
	Если ДатаВыезда > ДатаВозвращения Тогда
		Сообщить("Дата выезда больше даты возвращения!");
		Отказ = Истина;
		Возврат;
	КонецеСЛИ;
	
	Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения и ПометкаУдаления=Ложь ТОгда
		Если глОбщий.ПроверкаРазрешенияНаВыпискуПЛ(Организация,ДатаВыезда,ТранспортноеСредство,Отказ)=Истина ТОгда
			Возврат;
		КонецЕсли;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		//+Lexx по заявке 6569 от Михралиевой Г.Х. от 07.05.2021 
		ПравоОперГРуппы = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.уатПраваИНастройки.ДоступОпергруппы);
        фРеестр = (ПолучитьРеестрУслуг().Количество() <> 0);
		Если фРеестр И Не ПравоОперГРуппы Тогда
			Предупреждение("Вы не имеете права отмениять проведение 
							|путевого листа, входящего в реестр!",,"ВНИМАНИЕ!");
			Возврат;
		КонецЕсли;	
		//-Lexx по заявке 6569 от Михралиевой Г.Х. от 07.05.2021 
	КонецЕсЛИ;
	
	Если Найти(ПользователиИнформационнойБазы.ТекущийПользователь().Имя, "Мотычко") = 0 Тогда
		мПодразделениеТС = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТранспортноеСредство, "Подразделение", ДатаВыезда).Подразделение;
		Если ЭтоНовый() И ЗначениеЗаполнено(мПодразделениеТС) И мПодразделениеТС.ВыпискаПлТолькоПоРазнарядке <> Дата("00010101") И мПодразделениеТС.ВыпискаПлТолькоПоРазнарядке < ДатаВыезда И ИдентификаторРазнарядки = "" Тогда
			Сообщить("Выписка разрешена только по заявке из разнарядки. Запись ПЛ прервана.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ДатаВыписки = Дата;
	
	
	Если ЗначениеЗаполнено(ВыдалДиспетчер)=Ложь ТОгда
		С = уатОбщегоНазначенияТиповые.ДанныеФизЛица(Организация,ПараметрыСеанса.ТекущийПользователь.ФизЛицо,Дата);
		ВыдалДиспетчер =  С.Сотрудник;
	КонецЕСЛИ;
	
	Если ЗначениеЗаполнено(ПринялДиспетчер)=Ложь ТОгда
		Если ОстатокТопливаВозврат1<>0 
		 или ОстатокТопливаВозврат <>0 Тогда
		  ПринялДиспетчер = ПараметрыСеанса.ТекущийПользователь;
		КонецеслИ;
	КонецЕСЛИ;
	
	
	
	Если ПометкаУдаления Тогда
		
		Т = ПолучитьРеестрУслуг();
		Если Т.Количество()>0 Тогда
			Сообщить(""+Ссылка+" участвует в реестрах услуг:");
			ДЛя каждого с из Т Цикл
				Сообщить("           - "+С.Док);
			КонецЦикла;
			
			Отказ = Истина;
			Возврат;
		КонецеСли;
		
	КонецЕсли;	
	
	//Сброс флага Рассчитан
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения и рассчитан Тогда
		Рассчитан = Ложь;
	КонецЕсли;
	
	
	Для каждого стр из Работа Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.Реестр) и Стр.КоличествоЧасов = 0 ТОгда
			Сообщить("На закладке <Обработка-На Объекте> не указано количество часов! В строке "+(Работа.Индекс(Стр)+1));
			Отказ=Истина;
			Возврат;
		КонецеСЛи;
		
	КонецЦикла;
	
	РаспределитьЧасы(Отказ);
	
	
	
	
	//Если ВсегоЧасов = 0 Тогда //чтобы не нагружать систему
	//	Маршрут = ПолучитьГлавныйМаршрут();
	//КонецЕСЛИ;
	
	//Удалим Строки с пустыми значениями
	
	
	//Если ЗначениеЗаполнено(Контрагент)=Ложь Тогда
		Если Задание.Количество()<>0 
			и ЗначениеЗаполнено(Задание[0].Контрагент) ТОгда
			Контрагент = Задание[0].Контрагент;
			ЦехКонтрагента = Задание[0].ЦехКонтрагента;
			
			Если ЗначениеЗаполнено(Задание[0].Месторождение) ТОгда
				МЕсторождение = Задание[0].Месторождение;
			ИНАче
				Месторождение = ЦехКонтрагента.Месторождение;
			КонецеСЛИ;
			
		ИНачеЕсли Работа.Количество()<>0
			и ЗначениеЗаполнено(Работа[0].Подразделение) ТОгда
			Контрагент = Работа[0].Подразделение;
			ЦехКонтрагента = Работа[0].ОбъектСтроительства;
		ИНачеЕсли Маршруты.Количество()<>0 
			и ЗначениеЗаполнено(Маршруты[0].Маршрут.Владелец) ТОгда
			Контрагент = Маршруты[0].Маршрут.Владелец;
			ЦехКонтрагента = Маршруты[0].Маршрут.ЦехКонтрагента;
		ИНаче
			//Контрагент = Неопределено;
			//ЦехКонтрагента = Неопределено;
		КонецЕСЛИ;
	//КонецЕСЛИ;
	
	
	//+Lexx по тех.ожиданию
	//ЧасыДиспа = ФактическиОтработанноеВремя.Итог("ВремяДневное")/3600;
	ЧасыДиспа = ФактическиОтработанноеВремя.Итог("ВремяДневное")/3600 + ФактическиОтработанноеВремя.Итог("ВремяСделка")/3600;
	
	
	
	ПересчетВыданногоГСМ();
	РасчетРасходаГСМ();
	РасходФакт =  ОстатокТОпливаВыезд + ВыданоГСМ - ОстатокТопливаВозврат + ОстатокТОпливаВыезд1 + ВыданоГСМ1 - ОстатокТопливаВозврат1;
	РасходНорма= РасходГСМ.Итог("РасходПоНорме");
	
	РасчетВремени();
	
	//Заполним инфо. поле по часам работы
	п = ФактическиОтработанноеВремя.Выгрузить();
	
	//+Lexx по тех.ожиданию
	//п.Свернуть("Сотрудник","ВремяДневное,ВремяРазрыв");
	п.Свернуть("Сотрудник","ВремяДневное,ВремяСделка,ВремяРазрыв");
	
	пСтр = "";
	Для каждого с из п Цикл
		Если пСтр<>"" Тогда пСТр=пСтр+Символы.ПС; КонецЕсли;
		
		//+Lexx по тех.ожиданию
		//пСтр = пСтр+""+Формат(С.ВремяДневное/3600,"ЧДЦ=1");
		пСтр = пСтр+""+Формат((С.ВремяДневное/3600+С.ВремяСделка/3600),"ЧДЦ=1");
		
		Если С.ВремяРазрыв<>0 Тогда
			пСтр = пСтр+" ("+ОКР(С.ВремяРазрыв/3600,1,1)+")";
		КонецЕСлИ;
	КонецЦикла;
	ИнфоЧасыВод = пСтр;	
	

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ОстатокТОпливаВыезд + ВыданоГСМ - ОстатокТопливаВозврат < 0 Тогда
			Сообщить("Отрицательный расход топлива по основному баку!");
			Отказ = Истина;
		КонецЕсЛИ;
		
		Если ОстатокТОпливаВыезд1 + ВыданоГСМ1 - ОстатокТопливаВозврат1 < 0 Тогда
			Сообщить("Отрицательный расход топлива по дополнительному баку!");
			Отказ = Истина;
		КонецЕсЛИ;
		
		Если Задание.Количество()=0 и Работа.Количество()=0 
			и уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПродолжительностьРабДняПриСделке)=0 Тогда
			Сообщить("Не указа работа на объекте или на заказчика!");
			Отказ = Истина;
		КонецеСЛИ;
		
		Для каждого Стр из Задание Цикл
			Если Стр.КоличествоЧасов + Стр.Услуга1 + Стр.Услуга2 + Стр.Услуга3 = 0 тогда
				Сообщить("В строке "+(Задание.Индекс(Стр)+1)+" не указано количество отработанных часов");
				Отказ = Истина;
			КонецеСли;
		КонецЦикла;
			
		Если СпидометрВозвращения - СпидометрВыезда <> 0 
		   и  ОстатокТОпливаВыезд + ВыданоГСМ - ОстатокТопливаВозврат + ОстатокТОпливаВыезд1 + ВыданоГСМ1 - ОстатокТопливаВозврат1 = 0 
		   и уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретитьПробегБезГСМ) Тогда
		   Сообщить("Ошибка! Указан пробег без расхода ГСМ!");
		   Отказ = Истина;
		КонецеСЛИ;
	
		
		// Проверка заполнения документа
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
		СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
		ПроверитьЗаполнениеДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Записать();
		РасчетВыработкиТС(Отказ);	
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьСчетчики(Отказ);

	//Посчитаем пробег по показаниям одометра
	Если ЗначениеЗаполнено(СпидометрВозвращения) тогда
		мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения);
	Иначе
		мПробегПоОдометру = 0;
	КонецЕсли;
	
	//+Lexx от 25.09.2020 пробег одометр/БСМТС
	//Учет по БСМТС
	//Теперь определимся по каким показаниям - одометр или БСМТС - будем брать "Пробег" для учета ГСМ
	Если ФлагИспользоватьДанныеБСМТС Тогда
		мПробегДляУчетаГСМ = ПробегПоGPS;
	Иначе
		мПробегДляУчетаГСМ = мПробегПоОдометру;
	КонецЕсли;	
	//Учет по БСМТС
	
	//Посчитаем ТнКм
	итТнКм=0;
	Для каждого стр из Задание Цикл
		итТнКм = итТнКм + Стр.КоличествоТонн * Стр.КоличествоКмГруз;	
	КонецЦиклА;
	
	ОбрТнКм = Справочники.ОборудованиеРаботыГСМ.ТнКм;
	для каждого стр из РасходГСМ Цикл
		Если Стр.ОБорудованиеРабота.ДанныеСОдометра ТОгда
			//Учет по БСМТС
			//Стр.Пробег = мПробегПоОдометру; //Это как было
			Стр.Пробег = мПробегДляУчетаГСМ;
			//Учет по БСМТС
		ИначеЕсли Стр.ОБорудованиеРабота = ОбрТнКм ТОгда
			Стр.Пробег = итТнКм;
		КонецеСЛИ;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
	
		Если ОстатокТопливаВыезд1<>0 или ОстатокТопливаВозврат1<>0 или выданоГСМ1<>0 Тогда
			Ошибка=Истина;
			Для каждого стр из РасходГСМ Цикл
				Если Стр.ОБорудованиеРабота.ЕстьБак ТОгда
					Ошибка=Ложь;
					Прервать;
				КонецЕслИ;
			КонецЦиклА;
			
			Если Ошибка Тогда
				Сообщить("Нет оборудования с дополнительным баком! Уберите движения по дополнительному баку!");
				Отказ = Истина;
			КонецеСЛИ;
			
		КонецЕСЛИ;
		
		
		
		//Нет надобности в проверке
		Возврат;
		
		//Проверим , чтобы параметры расчета ГСМ сходились с заданием
		Стк = Новый Структура("Одометр,Операций,ТнКм",0,0,0);
		
		Для каждого стр из РасходГСМ Цикл
			Если Стр.ОБорудованиеРабота.ДанныеСОдометра Тогда
				Стк.Одометр = Стк.Одометр + Стр.Пробег;
			ИНАчеЕсли Стр.ОБорудованиеРабота.ПараметрРасхода = Справочники.уатПараметрыВыработки.КоличествоОпераций Тогда
				Стк.Операций = стк.Операций + Стр.Пробег;
			ИНАчеЕсли Стр.ОБорудованиеРабота.ПараметрРасхода = Справочники.уатПараметрыВыработки.ТнКм Тогда
				Стк.ТнКм = стк.ТнКм + Стр.Пробег;
			КонецеСЛИ;
		КонецЦикла;
		
		Если Стк.Одометр <> СпидометрВозвращения-СпидометрВыезда и Стк.Одометр <> 0 ТОгда
			Сообщить("Не совпадает пробег по таблице <Расход ГСМ> и спидометру(мотосчетчику)");
			Отказ = Истина;
		КонецЕСЛИ;
		//Если Стк.Операций <> Задание.Итог("КоличествоОпераций") ТОгда
		//	Сообщить("Не совпадает количество операций по таблице <Расход ГСМ> и по таблице <Задания>");
		//	Отказ = Истина;
		//КонецеСЛИ;
		
		итТнКм=0;
		Если Стк.ТнКм<>0 Тогда
			Для каждого стр из Задание Цикл
				итТнКм = итТнКм + Стр.КоличествоТонн * Стр.КоличествоКмГруз;	
			КонецЦиклА;
			Если Стк.ТнКм > итТнКм ТОгда
				Сообщить("Не совпадает количество Тн/км по таблице <Расход ГСМ> и по таблице <Задания>");
				Отказ = Истина;
			КонецеСЛИ;
		КонецеСЛИ;
		
КонецПроцедуры

Функция ПолучитьРеестрУслуг() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаботаТС.Регистратор КАК Док,
	               |	РаботаТС.Контрагент,
	               |	РаботаТС.ЦехКонтрагента,
	               |	СУММА(РаботаТС.Пробег) КАК Пробег,
	               |	РаботаТС.ИдСтроки
	               |ИЗ
	               |	РегистрНакопления.РаботаТС КАК РаботаТС
	               |ГДЕ
	               |	РаботаТС.ПутевойЛист = &Док
	               |	И РаботаТС.ВидДвижения = &ВД
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаботаТС.Регистратор,
	               |	РаботаТС.Контрагент,
	               |	РаботаТС.ЦехКонтрагента,
	               |	РаботаТС.ИдСтроки";
				   Запрос.УстановитьПараметр("Док",Ссылка);
				   Запрос.УстановитьПараметр("ВД",ВидДвиженияНакопления.Расход);
	        Возврат  Запрос.Выполнить().Выгрузить();
	
		КонецФункции
		
Функция ПолучитьГлавныйМаршрут()

	Если Маршруты.Количество()=0 ТОгда Возврат Неопределено; КонецеСЛИ;
	Если Маршруты.Количество()=1 ТОгда Возврат Маршруты[0].Маршрут; КонецЕСЛИ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМаршруты.Ссылка,
	               |	уатМаршруты.ВремяВПути
	               |ИЗ
	               |	Справочник.уатМаршруты КАК уатМаршруты
				   |WHERE Ссылка в (&Мас)
				   |ORDER BY ВремяВПути DESC";
				   Запрос.УстановитьПараметр("Мас",Маршруты.ВыгрузитьКолонку("Маршрут"));
				   ТБл =Запрос.Выполнить().Выгрузить();
	Возврат Тбл[0].Ссылка;

КонецФункции

// РАСЧЕТ РАСХОДА ГСМ
Функция ПОлучитьТблНормГСМ(пТемп=99)
	
	ТБл = глНормыГСМ.ТблНорм(ТранспортноеСредство,ДатаВыезда,ДатаВозвращения,Ссылка,пТемп);
	
	Если Прицепы.Количество() > 0 ТОгда
		Для каждого стрПрц из Прицепы Цикл
			
			Мас = новый Массив;
			Мас.Добавить(Справочники.ОборудованиеРаботыГСМ.НаПрицеп);
			Мас.Добавить(Справочники.ОборудованиеРаботыГСМ.НаПрицепМЧ);
			
			тбПрц = глНормыГСМ.ТблНорм(стрПрц.ТС,ДатаВыезда,ДатаВозвращения,Ссылка,пТемп,Мас);
			Для каждого стПрц из тбПрц Цикл
				Если Тбл.Найти(стПрц.ОБорудованиеРабота,"ОБорудованиеРабота")<>Неопределено Тогда
					Сообщить("Ошибка определения нормы на прицеп по "+стПрц.ОБорудованиеРабота);
					Продолжить;
				КонецеСЛИ;
				С = Тбл.Добавить();
				ЗаполнитьЗначенияСвойств(С,стПрц);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕСЛИ;
	
	Возврат Тбл;
	
КонецФункции

Функция НайтиСтрокуПоследнегоПЛ()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РаботаТС.Услуга1,
	               |	РаботаТС.Услуга2,
	               |	РаботаТС.Услуга3,
	               |	РаботаТС.Услуга4,
	               |	РаботаТС.Услуга5,
	               |	РаботаТС.Услуга6,
	               |	РаботаТС.КоличествоЧасов,
	               |	РаботаТС.Пробег КоличествоКмПорожний,
	               |	РаботаТС.ТС,
	               |	РаботаТС.Контрагент,
	               |	РаботаТС.Номенклатура,
	               |	РаботаТС.ЦехКонтрагента,
	               |	РаботаТС.ЦехКонтрагента.Месторождение Месторождение,
	               |	РаботаТС.ПутевойЛист
	               |ИЗ
	               |	РегистрНакопления.РаботаТС КАК РаботаТС
	               |ГДЕ
	               |	(РаботаТС.Контрагент = &Контрагент или &Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
	               |	И (РаботаТС.ЦехКонтрагента = &ЦехКонтрагента или &ЦехКонтрагента = Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка))
	               |	И РаботаТС.ТС = &ТС
	               |	И РаботаТС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |
				   |УПОРЯДОЧИТЬ ПО
				   |	РаботаТС.Период УБЫВ
				   |
				   |
				   |";
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ЦехКонтрагента",ЦехКонтрагента);
	Запрос.УстановитьПараметр("ТС",ТранспортноеСредство);
	ТБл = Запрос.Выполнить().Выгрузить();
	
	Если Тбл.Количество()=0 Тогда
		Запрос.УстановитьПараметр("ЦехКонтрагента",Справочники.ЦехаКонтрагента.ПустаяСсылка());
		ТБл = Запрос.Выполнить().Выгрузить();
	КонецеСлИ;
	
	Если Тбл.Количество()=0 Тогда
		Запрос.УстановитьПараметр("Контрагент",Справочники.Контрагенты.ПустаяСсылка());
		ТБл = Запрос.Выполнить().Выгрузить();
	КонецеСлИ;
	
	Если Тбл.Количество()=0 Тогда
		Запрос.Текст =" SELECT
				   |    0 Услуга1,
				   |    0 Услуга2,
				   |    0 Услуга3,
				   |    0 Услуга4,
				   |    0 Услуга5,
				   |    0 Услуга6,
				   |    0 КоличествоЧасов,
				   |    0 КоличествоКмПорожний,
				   |    &ТС ТС,
				   |    &Контрагент Контрагент,
				   |    Значение(Справочник.Номенклатура.Пустаяссылка) Номенклатура,
				   |    &ЦехКонтрагента ЦехКонтрагента,
				   |    Значение(Справочник.Месторождения.Пустаяссылка) Месторождение,
				   |    Значение(Документ.уатПутевойЛист.Пустаяссылка) ПутевойЛист
				   |
				   |
				   |";

		ТБл = Запрос.Выполнить().Выгрузить();

	КонецЕСЛИ;
	
	Возврат Тбл[0];
	
КонецФункции
	
	Процедура ПолучитьСтропальщиков(Стк)
		
		Если ЗначениеЗаполнено(БригадаСтропальщиков) ТОгда
			Брг = БригадаСтропальщиков;
		ИНаче
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|
			| ВЫБРАТЬ TOP 1
			|	БригадаСтропальщиков.Ссылка
			|
			|ИЗ
			|	Справочник.БригадаСтропальщиков КАК БригадаСтропальщиков
			|		LEFT OUTER JOIN Справочник.ЦехаКонтрагента.Стропальщики. КАК ЦехаКонтрагентаСтропальщики
			|		    ПО  ЦехаКонтрагентаСтропальщики.Бригада = БригадаСтропальщиков.Ссылка
			|             И (ЦехаКонтрагентаСтропальщики.ТипТС = &ТипТС или ЦехаКонтрагентаСтропальщики.ТипТС = &ТипТСРод)
			|             и  ЦехаКонтрагентаСтропальщики.ССылка = &Цех
			|
			|		LEFT OUTER JOIN Справочник.Контрагенты.Стропальщики КАК КонтрагентыСтропальщики
			|			ПО  КонтрагентыСтропальщики.Бригада = БригадаСтропальщиков.Ссылка
			|             И (КонтрагентыСтропальщики.ТипТС = &ТипТС или КонтрагентыСтропальщики.ТипТС = &ТипТСРод)
			|             и  КонтрагентыСтропальщики.Бригада IS NULL
			|             и  КонтрагентыСтропальщики.ССылка = &Ка
			|
			|WHERE ЦехаКонтрагентаСтропальщики.Бригада IS NOT NULL
			|   OR КонтрагентыСтропальщики.Бригада IS NOT NULL
			|
			|";
			Запрос.УстановитьПараметр("Ка",Контрагент);
			Запрос.УстановитьПараметр("Цех",ЦехКонтрагента);
			Запрос.УстановитьПараметр("ТипТС",ТранспортноеСредство.ТипТС);
			Запрос.УстановитьПараметр("ТипТСРод",ТранспортноеСредство.ТипТС.Родитель);
			
			ТБл = Запрос.Выполнить().Выгрузить();
			
			Если Тбл.Количество()=0 Тогда Возврат; КонецесЛИ;
			Брг = Тбл[0].ссылка;
		КонецЕСЛИ;	
		
		
		Ном=0;
		Для каждого Стр из Брг.Ответсвенные Цикл
			Ном=Ном+1;
			Стк.Вставить("ОтвФИО"+Ном,Стр.ФИО);
			Стк.Вставить("ОтвУд"+Ном,Стр.Удостоверение);
		КонецЦикла;
		
		Ном=0;
		Для каждого Стр из Брг.Стропальщики Цикл
			Ном=Ном+1;
			Стк.Вставить("СтропФИО"+Ном,Стр.ФИО);
			Стк.Вставить("СтропУд"+Ном,Стр.Удостоверение);
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ИмяЗаказчика(СтрЗакОбк)	
		
		Если СокрлП(СтрЗакОбк.КонтрагентНаПечать)<>"" Тогда
			СтрЗак =СокрлП(СтрЗакОбк.КонтрагентНаПечать);
		Иначе	
			СтрЗак =СокрлП(СтрЗакОбк.НаименованиеПолное);
		КонецЕСЛИ;
		
		
		СтрЗак = СтрЗаменить(СтрЗак,"Общество с ограниченной ответственностью","ООО");
		СтрЗак = СтрЗаменить(СтрЗак,"Муниципальное бюджетное общеобразовательное учреждение","МБОУ");
		СтрЗак = СтрЗаменить(СтрЗак,"Открытое акционерное общество","ОАО");
		СтрЗак = СтрЗаменить(СтрЗак,"Закрытое акционерное общество","ЗАО");
		
		Возврат СтрЗак;
		
	КонецФункции
	
	Функция ПроверитьВодУд(дтВыд,мВодительскоеУдНомер)
		
		Результат = Ложь;
		Попытка
			ЕСли СокрЛП(мВодительскоеУдНомер)<>"" Тогда
				Если ДобавитьМЕсяц(дтВыд,120)< ДатаВыезда ТОгда
					Сообщить("Просроченно Водительское удостоверение!");
					мВодительскоеУдНомер = мВодительскоеУдНомер+"!!!";
					Если  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.КонтрольОкончанияДействияДокументовВодителей) = Истина Тогда
						Результат = Истина;
					КонецесЛи;
				КонецесЛИ;
			КонецЕСЛИ;
		Исключение КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция РассчитатьВыданоПоМаршруту()
		
				пврДопОбр = 0;
				пВрОтп = 0;		
				Если Температура <= -20 Тогда 
					пврДопОбр = 5;
					пВрОтп = 7;		
				ИНачеЕсли Температура <= -10 Тогда
					пВрОтп = 5;		
				ИНачеЕсли Температура <= -1 Тогда
					пВрОтп = 3;		
				Конецесли;
				
				пПрб = 0;
				ВыдГСМ = 0;
				Для каждого стМрш из Маршруты  Цикл
					пПрб = пПрб + стМрш.Маршрут.Расстояние;
				КонецЦиклА;
				
				
				папкаОтопители = Справочники.ОборудованиеРаботыГСМ.Отопители;
				Если пПРб>0 ТОгда
					Тбл = глНормыГСМ.ТблНорм(ТранспортноеСредство,ДатаВыезда,ДатаВозвращения,Ссылка,Температура);
					ДЛя каждого стТбл из Тбл Цикл
						Если стТбл.ОБорудованиеРабота = Справочники.ОборудованиеРаботыГСМ.Двигатель ТОгда
							ВыдГсм	= ВыдГСМ + стТбл.Норма * ппрб;
						ИНачеЕсли стТбл.ОБорудованиеРаботаРодитель = папкаОтопители ТОгда
							ВыдГсм	= ВыдГСМ + стТбл.Норма * пВрОтп;
						//ИНачеЕсли стТбл.ОБорудованиеРабота.Тип = Справочники.уатТипыАгрегатов.Отопитель ТОгда
						//	ВыдГсм	= ВыдГСМ + стТбл.Норма * пврДопОбр;
						КонецЕСЛИ;
					КонецЦиклА;
				КонецЕСЛИ;
				
				Возврат ВыдГСМ;
				
		
	КонецФункции
	
	//+Lexx по заявке 4305
	Процедура ПолучитьТОнаСледующийДень(Стк)
		ДатаТОНачало = НачалоДня(Ссылка.Дата); // + 24*60*60
		ДатаТООкончание = КонецДня(Ссылка.Дата + 4*24*60*60);
		//Если ДеньНедели(Ссылка.Дата) >= 5 Тогда // Если это пятница, то смотрим вперед аж на 3,2 или 1  день
		//	ДатаТООкончание = КонецДня(Ссылка.Дата + (8 - ДеньНедели(Ссылка.Дата))*24*60*60);
		//Иначе	
		//	ДатаТООкончание = КонецДня(Ссылка.Дата + 24*60*60);
		//КонецЕсли;	
		
		//ДатаПЛ = НачалоДня(Ссылка.Дата);
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НарядНаТОТО.ВидОбслуживания КАК Осн,
			|	"""" КАК Доп,
			|	НарядНаТОТО.Ссылка.Дата КАК ТОДата
			|ИЗ
			|	Документ.НарядНаТО.ТО КАК НарядНаТОТО
			|ГДЕ
			|	НарядНаТОТО.ТС = &ТС
			|	И НарядНаТОТО.Ссылка.Дата МЕЖДУ &ДатаТОНачало И &ДатаТООкончание
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	"""",
			|	НарядНаТОАвтомобили.Работа,
			|	НарядНаТОАвтомобили.Ссылка.Дата
			|ИЗ
			|	Документ.НарядНаТО.Автомобили КАК НарядНаТОАвтомобили
			|ГДЕ
			|	НарядНаТОАвтомобили.ТС = &ТС
			|	И НарядНаТОАвтомобили.Ссылка.Дата МЕЖДУ &ДатаТОНачало И &ДатаТООкончание";
		
		Запрос.УстановитьПараметр("ДатаТОНачало", ДатаТОНачало);
		Запрос.УстановитьПараметр("ДатаТООкончание", ДатаТООкончание);
		Запрос.УстановитьПараметр("ТС", Ссылка.ТранспортноеСредство);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Осн) Тогда
				Если Найти(Строка(Выборка.Осн), "ТО-1") Тогда
				   Стк.Вставить("ТО","ТО-1");
				   Стк.Вставить("ТОДата","ТО-1");
				ИначеЕсли Найти(Строка(Выборка.Осн), "ТО-2") Тогда
				   Стк.Вставить("ТО","ТО-2");
			   	Иначе
				   Стк.Вставить("ТО","");
				КонецЕсли;	
			Иначе //тут имеет место предположение, что в один день нет ТО и доп. работ (диагностики или помывки)
				Если Найти(Строка(Выборка.Доп), "Мойка салона") Тогда
				   Стк.Вставить("ТО","Мойка");
				ИначеЕсли Найти(НРег(Строка(Выборка.Доп)), "диагностика") Тогда
				   Стк.Вставить("ТО","Диагн.");
			   	Иначе
				   Стк.Вставить("ТО","");
				КонецЕсли;	
			КонецЕсли;
			Если (Стк.ТО) = "" Тогда
				Стк.Вставить("ТОДата","");
			Иначе	
				Стк.Вставить("ТОДата",Выборка.ТОДата);
			КонецЕсли;	
			
		Иначе
			Стк.Вставить("ТОнаСледДень","");
			Стк.Вставить("ТОДата","");
		КонецЕсли;
		
		
	КонецПроцедуры
	//-Lexx по заявке 4305
	
	Процедура ПолучитьТекстТО(Стк)
		
		Если ЗначениеЗаполнено(ТранспортноеСредство)=Ложь ТОгда Возврат; КонецЕСЛИ;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ TOP 1
		               |	НарядНаТОТО.ТС,
		               |	НарядНаТОТО.ВидОбслуживания,
		               |	НарядНаТОТО.Начало
		               |ИЗ
		               |	Документ.НарядНаТО.ТО КАК НарядНаТОТО
					   |LEFT OUTER JOIN	РегистрСведений.уатПрохождениеТО.СрезПоследних(&КонДата,ТС = &ТС) КАК уатПрохождениеТОСрезПоследних ON уатПрохождениеТОСрезПоследних.ВидТО = НарядНаТОТО.ВидОбслуживания
					   |                                                                                                           
					   |
					   |
		               |ГДЕ
		               |	НарядНаТОТО.Ссылка.Дата >= &НачДата
		               |	И НарядНаТОТО.Ссылка.Дата < &КонДата
		               |	И НарядНаТОТО.Ссылка.ПометкаУдаления = ложь
		               |	И НарядНаТОТО.ТС = &ТС
		               |	И (НарядНаТОТО.Выполнено = ложь и ДОБАВИТЬКДАТЕ(НарядНаТОТО.Начало,День,-5) > ISNULL(уатПрохождениеТОСрезПоследних.Период,ДатаВремя(1,1,1,0,0,0))  )
		               |	И НарядНаТОТО.Начало < &Начало";
					   Запрос.УстановитьПараметр("НачДата",ДОбавитьМесяц(ДатаВыезда,-2));
					   Запрос.УстановитьПараметр("КонДата",ДОбавитьМесяц(ДатаВыезда,2));
					   Запрос.УстановитьПараметр("ТС",ТранспортноеСредство);
					   
					   Если ЗначениеЗаполнено(ДатаВозвращения) ТОгда
						   пДт = ДатаВозвращения;
					   ИНачеЕсли ЗначениеЗаполнено(ДатаВыезда) Тогда
						   пДт = ДатаВыезда;
					   ИНАче
						   пДт = Дата;
					   КонецеСЛИ;
						   
					   Запрос.УстановитьПараметр("Начало",пДт + 3600*24*2);
					   
					   ТБл = Запрос.Выполнить().Выгрузить();
					   Если Тбл.Количество()>0 Тогда
						   Стк.Вставить("ТекстТО1",Тбл[0].ВидОбслуживания);
						   Стк.Вставить("ТекстТО2",Тбл[0].Начало);
						   Если Тбл[0].Начало<= ДатаВыезда Тогда
							   Стк.Вставить("ТекстТО3","Просрочен ТО!");
						   КонецесЛИ;
					   КонецЕСЛИ;
					   
		
КонецПроцедуры

Функция ЕстьНезакрытыйРЛ()
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) = ложь Тогда Возврат Ложь; КонецеСЛИ;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретитьВыписыватьПЛПриОткрытомРемЛисте)=Ложь Тогда Возврат Ложь; КонецЕСЛИ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
|	ВЫБРАТЬ
|	уатРемонтныйЛист.Ссылка
|ИЗ
|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
|ГДЕ
|	уатРемонтныйЛист.Проведен = ложь
|	И уатРемонтныйЛист.Выполнен = ложь
|	И уатРемонтныйЛист.ВидОбслуживания.БлокироватьВыпискуПЛ = Истина
|	И уатРемонтныйЛист.ТС = &ТС
|   и Дата <= &дт
|	";

    Запрос.УстановитьПараметр("ТС",ТранспортноеСредство);
    Запрос.УстановитьПараметр("Дт",КонецДня(ДатаВыезда));
	
	ТБл = Запрос.Выполнить().Выгрузить();
	Если Тбл.Количество()=0 ТОгда
		Возврат Ложь;
	ИНаче
		Для каждого Стр из Тбл Цикл
			Сообщить(""+ссылка+". Есть незакрытый документ "+Стр.ссылка);
		Конеццикла;
		Возврат Истина;
	КонецЕСЛИ;

	
	
КонецФункции

//Механизм контроля документов водителей
Функция КонтрольДокументовВодителя(Ошибки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА уатДокументыВодителей.ВидДокумента ЕСТЬ NULL
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Контроль,
	               |	СпрДДД.Наименование КАК ВидДокумента,
	               |	уатДокументыВодителей.Серия КАК Серия,
	               |	уатДокументыВодителей.Номер КАК Номер,
	               |	уатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	               |	уатДокументыВодителей.ДатаОкончания КАК ДатаОкончания,
	               |	ЕСТЬNULL(РАЗНОСТЬДАТ(&Дт, уатДокументыВодителей.ДатаОкончания, ДЕНЬ), 0) КАК Дн
	               |ИЗ
	               |	Справочник.уатВидыДДД КАК СпрДДД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
	               |		ПО (уатДокументыВодителей.ВидДокумента = СпрДДД.Ссылка)
	               |			И (уатДокументыВодителей.ДатаВыдачи <= &Дт)
	               |			И (уатДокументыВодителей.ДатаОкончания >= &Дт)
	               |			И (уатДокументыВодителей.Сотрудник = &Сотр)
	               |ГДЕ
	               |	СпрДДД.КонтрольВПЛ = ИСТИНА";
	
	Запрос.УстановитьПараметр("Сотр",Водитель1);
	Запрос.УстановитьПараметр("Дт",НачалоДня(ДатаВыезда));
	ТБл = Запрос.Выполнить().Выгрузить();
	Стк = Новый Структура();
	Для а=1 по Тбл.Количество() Цикл
		Стр = ТБл[а-1];
		Если Стр.Дн < 20 Тогда
			Стк.Вставить("ВидДок"+а,"ВНИМАНИЕ! "+СокрлП(Стр.ВидДокумента));
		ИНаче
			Стк.Вставить("ВидДок"+а,СокрлП(Стр.ВидДокумента));
		КонецЕслИ;
		Стк.Вставить("Дней"+а,СокрлП(Стр.Дн));
		Стк.Вставить("Нач"+а,Стр.ДатаВыдачи);
		Стк.Вставить("Кон"+а,Стр.ДатаОкончания);
	КонецЦикла;
	Ошибки = Тбл.Итог("Контроль")<>0;
	Возврат Стк;
КонецФункции
//Механизм контроля документов водителей

Функция ЗаписьВРазнарядкеОтсутствует(пДатаВыезда, пТС)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	Разнарядка.ИдентификаторСтрокиЗаявки КАК ИдентификаторСтрокиЗаявки
	|ИЗ
	|	РегистрСведений.Разнарядка КАК Разнарядка
	|ГДЕ
	|	Разнарядка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И Разнарядка.ТС = &ТС");
	мЗапрос.УстановитьПараметр("Дата", пДатаВыезда);
	мЗапрос.УстановитьПараметр("ТС", пТС);
	
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Если мРезультат.Следующий() Тогда
		Если ЗначениеЗаполнено(мРезультат.ИдентификаторСтрокиЗаявки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

// инициализируем переменную
ДанныеИзменились = Ложь;

// сохранение ссылки на коллекцию прав, настроек и окружения
Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
// + Алексей, для совместимости с печатью ПЛ из тонкого клиента (право ПечатьНепроведенных)
#Иначе
	Права = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.ТекущийПользователь);
#КонецЕсли

мСрокиДействияПЛ = Новый Соответствие;
мКопированиеДокумента = Ложь;