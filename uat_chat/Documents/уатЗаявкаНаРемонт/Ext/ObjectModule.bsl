////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБЪЕКТА

Перем Права Экспорт; // Переменная объекта - ссылка на коллекцию прав, настроек и переменных окружения.
                     //полученное из константы.

#Если Клиент Тогда
	
		
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	//Функция ПолучитьСписокПечатныхФорм() Экспорт
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		СтруктураМакетов = Новый Структура;
		
		СтруктураМакетов.Вставить("ЗаявкаНаРемонт","Заявка на ремонт");
		СтруктураМакетов.Вставить("Лимитно_ЗаборнаяКарта","Лимитно-заборная карта");
		
		Возврат СтруктураМакетов ;
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
	// Формирует печатную форму путевых листов
	//
	// Параметры:
	//  ИмяМакета - табличный документ
	//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
	Функция ПечатьЗаказаНаРемонт(ИмяМакета) Экспорт
		
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказаНаРемонт";
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		рсТС = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТС);
		
		//печатаем шапку
		Обл   = Макет.ПолучитьОбласть("Шапка");
		Обл.Параметры.Номер       		= Номер;
		ФорматДаты      = "ДФ='дд ММММ гггг'";
		Обл.Параметры.Дата 		= Формат(Дата,ФорматДаты);
		Обл.Параметры.Организация  		= Организация;
		Обл.Параметры.ТСМодель  		= уатОбщегоНазначения.уатПредставлениеМоделиТС(ТС);
		Обл.Параметры.ТСГосНомер		= рсТС.ГосударственныйНомер;
		Обл.Параметры.ТСVIN				= рсТС.VIN;
		Обл.Параметры.ВидОбслуживания	= ВидОбслуживания;
		Обл.Параметры.ДатаНачала		= ДатаНачала;
		Обл.Параметры.ДатаОкончания		= ДатаОкончания;
		Обл.Параметры.ПричинаОбращения	= ПричинаОбращения;
		ТабДокумент.Вывести(Обл);
		
		//печатаем шапку работ
		Обл   = Макет.ПолучитьОбласть("ШапкаРабот");
		Обл.Параметры.Номер       		= Номер;
		ФорматДаты      = "ДФ='дд ММММ гггг'";
		Обл.Параметры.Дата 		= Формат(Дата,ФорматДаты);
		ТабДокумент.Вывести(Обл);
		
		//печатаем таблицу работ
		Обл   = Макет.ПолучитьОбласть("СтрокаРабот");
		Для Каждого ТекСтрока из Работы Цикл
			Обл.Параметры.НомСтр	= ТекСтрока.НомерСтроки;
			Обл.Параметры.НомерПоКаталогу	= ТекСтрока.Работа.Артикул;
			Обл.Параметры.НаименованиеРаботы	= ТекСтрока.Работа.Наименование;
			Обл.Параметры.НаименованиеНеисправности	= ТекСтрока.Неисправность;
			Обл.Параметры.Количество	= ТекСтрока.Количество;
			ТабДокумент.Вывести(Обл);
		КонецЦикла;	
		
		//печатаем шапку материалов
		Обл   = Макет.ПолучитьОбласть("Детали");
		Обл.Параметры.Номер       		= Номер;
		ФорматДаты      = "ДФ='дд ММММ гггг'";
		Обл.Параметры.Дата 		= Формат(Дата,ФорматДаты);
		ТабДокумент.Вывести(Обл);
		
		//печатаем таблицу материалов
		Обл   = Макет.ПолучитьОбласть("СтрокаДеталей");
		Для Каждого ТекСтрока из Материалы Цикл
			Обл.Параметры.НомСтр	= ТекСтрока.НомерСтроки;
			Попытка
				Обл.Параметры.НомерПоКаталогу	= ТекСтрока.Номенклатура.Артикул;
			Исключение
			КонецПопытки;	
			Обл.Параметры.Наименование	= ТекСтрока.Номенклатура.Наименование;
			Обл.Параметры.Единица	= ТекСтрока.ЕдиницаИзмерения;
			Обл.Параметры.Количество	= ТекСтрока.Количество;
			ТабДокумент.Вывести(Обл);
		КонецЦикла;	
		
		Возврат ТабДокумент;
		
	КонецФункции // ПечатьПлатежногоПоручения()
	
	// Функция формирует печатную форму документа
//
	Функция ПечатьЛимитноЗаборнаяКарта(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЛимитноЗаборнаяКарта";
	
	Макет = ПолучитьОбщийМакет("уатМ8");

	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	//ОбластьМакетаШапка.Параметры.Номер = Номер;
	
	ОбластьМакетаЗаголовок 	= Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаПодвал 	= Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета 			= Макет.ПолучитьОбласть("Строка");
	
	// массив с двумя строками - для разбиения на страницы
    ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	
	ШапкаВыведена = Ложь;
	
	ВысотаЗаголовка = ТабДокумент.ВысотаТаблицы;
	Если ВысотаЗаголовка <> 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата);
	
	ВыведеноСтрок = 0;
	ВсегоСтрокДокумента = Материалы.Количество();
	Для Каждого ТекСтрока Из Материалы Цикл
		ОбластьМакетаШапка.Параметры.Заполнить(ЭтотОбъект);
		ОбластьМакетаШапка.Параметры.Заполнить(ТекСтрока);
		ОбластьМакетаШапка.Параметры.НоменклатурныйНомер = ТекСтрока.Номенклатура.Код;
		ОбластьМакетаШапка.Параметры.ЕдиницаИзмеренияКод = ТекСтрока.ЕдиницаИзмерения.Код;
		ОбластьМакетаШапка.Параметры.Лимит = ТекСтрока.Количество;
		ОбластьМакетаШапка.Параметры.ДатаСоставления = Дата;
		ОбластьМакетаШапка.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
		ОбластьМакетаШапка.Параметры.КодОКПО = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО");
		ОбластьМакетаШапка.Параметры.ТекстЦена  = "Цена";
		ОбластьМакетаШапка.Параметры.ТекстСумма = "Сумма";
			
		ОбластьМакетаШапка.Параметры.МатериалНаименование = СокрЛП(ТекСтрока.Номенклатура);// + ФормированиеПечатныхФорм.ПредставлениеСерий(ТекСтрока);
			
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		ВывестиПодвалЛиста = Ложь;
		Пока НЕ ВывестиПодвалЛиста Цикл
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			Попытка
				флПроверитьВыводТабличногоДокумента = ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
			Исключение
				флПроверитьВыводТабличногоДокумента = Истина;
			КонецПопытки;
			
			ВывестиПодвалЛиста = Не флПроверитьВыводТабличногоДокумента;
			Если ВывестиПодвалЛиста Тогда
				ТабДокумент.Вывести(ОбластьМакетаПодвал);
			Иначе
				ОбластьСтрока = ТабДокумент.Вывести(ОбластьМакета);
				
				ТабДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				ТабДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			КонецЕсли;
		КонецЦикла;
		
		Если ВыведеноСтрок<ВсегоСтрокДокумента Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабДокумент;
КонецФункции // ПечатьЛимитноЗаборнаяКарта()


	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(НазваниеМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		
		Если ЭтоНовый() Тогда
			Предупреждение("Документ можно распечатать только после его записи");
			Возврат;
		ИначеЕсли Не ?(Права = Неопределено, Ложь, уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
			Возврат;
		КонецЕсли;

		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;

		Если ТипЗнч(НазваниеМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
				
				ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
				ОбъектВнешнейФормы = НазваниеМакета.ПолучитьОбъект();
				Если ОбъектВнешнейФормы = Неопределено Тогда
					Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
					Возврат;
				КонецЕсли;			
				ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
				ДвоичныеДанные.Записать(ИмяФайла);
				Обработка = ВнешниеОбработки.Создать(ИмяФайла);
				Попытка
					Обработка.СсылкаНаОбъект = Ссылка;
					ТабДокумент = Обработка.Печать();
					уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
				Исключение
					Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для печати.", СтатусСообщения.Важное);
				КонецПопытки;
				
		ИначеЕсли НазваниеМакета = "Лимитно_ЗаборнаяКарта" Тогда
			ИмяМакета = "уатМ8";
			ТабДокумент = ПечатьЛимитноЗаборнаяКарта(ИмяМакета);
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
				
		Иначе
			ИмяМакета = "Макет";
			ТабДокумент = ПечатьЗаказаНаРемонт(ИмяМакета);
			уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Права);
				
		КонецЕсли;
		
	КонецПроцедуры // Печать
	
	
#КонецЕсли

Процедура ОтразитьДвиженияПоПланированиюТС()
	
	НаборЗаписей = Движения.уатПланированиеРаботыТС;
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.Регистратор = Ссылка;
	НовЗапись.ТС = ТС;
	НовЗапись.ДокументПланирования = Ссылка;
	НовЗапись.ДатаНачала = ДатаНачала;
	НовЗапись.ДатаОкончания = ДатаОкончания;
	Если ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.КапитальныйРемонт тогда
		НовЗапись.Состояние = Справочники.уатСостояниеТС.НаКапитальномРемонте;
	ИначеЕсли ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.СреднийРемонт тогда
		НовЗапись.Состояние = Справочники.уатСостояниеТС.НаСреднемРемонте;
	Иначе
		НовЗапись.Состояние = Справочники.уатСостояниеТС.НаТекущемРемонте;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоПланированиюРемонтов()
	
	НаборЗаписей = Движения.уатГрафикРаботыРесурсов;
	
	ТекДатаРемонта = ДатаНачала;
	
	Если НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала) = 0 Тогда
		// Начало окончание в одном дне
		СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
		СтрокаГрафикаРаботыРесурсов.Ресурс1 = Цех;
		СтрокаГрафикаРаботыРесурсов.Ресурс2 = Мастер;
		СтрокаГрафикаРаботыРесурсов.Дата = ДатаНачала;
		СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
		СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
		СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
	Иначе
		Разница = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/60/60/24;
		ТекущийДень = НачалоДня(ДатаНачала);
		Пока Разница >= 0 Цикл
			СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
			СтрокаГрафикаРаботыРесурсов.Ресурс1 = Цех;
			СтрокаГрафикаРаботыРесурсов.Ресурс2 = Мастер;
			СтрокаГрафикаРаботыРесурсов.Дата = ТекущийДень;
			// Установим НачалоРабочегоВремени 
			Если ТекущийДень = НачалоДня(ДатаНачала) Тогда
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
			Иначе
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101';
			КонецЕсли;
			// Установим КонецРабочегоВремени
			Если ТекущийДень = НачалоДня(ДатаОкончания) Тогда
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
			Иначе
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101235959';
			КонецЕсли;
			// Посчитаем Продолжительность
			СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
			
			ТекущийДень = ТекущийДень + 3600*24;
			Разница = Разница - 1;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
КонецПроцедуры

Функция ПроверитьКорректностьДвижений(Отказ)
	Рез = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатГрафикРаботыРесурсов.Регистратор КАК Документ,
	|	уатГрафикРаботыРесурсов.Дата КАК Дата,
	|	уатГрафикРаботыРесурсов.НачалоРабочегоВремени КАК НачалоРабочегоВремени,
	|	уатГрафикРаботыРесурсов.КонецРабочегоВремени КАК КонецРабочегоВремени
	|ИЗ
	|	РегистрСведений.уатГрафикРаботыРесурсов КАК уатГрафикРаботыРесурсов
	|ГДЕ
	|	уатГрафикРаботыРесурсов.Регистратор <> &Регистратор
	|	И уатГрафикРаботыРесурсов.Ресурс1 = &Ресурс1
	|	И уатГрафикРаботыРесурсов.Ресурс2 = &Ресурс2
	|	И уатГрафикРаботыРесурсов.Дата МЕЖДУ &ДатаНач И &ДатаКон");
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Ресурс1", Цех);
	Запрос.УстановитьПараметр("Ресурс2", Мастер);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОкончания));
	
	тблПересечений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрокаПересечение Из тблПересечений Цикл
		Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда // Начало окончание в одном дне
			НачалоРабочегоВремени_ = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
			КонецРабочегоВремени_ = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
			Если НачалоРабочегоВремени_ <= ТекСтрокаПересечение.КонецРабочегоВремени И КонецРабочегоВремени_ >= ТекСтрокаПересечение.НачалоРабочегоВремени Тогда
				Рез = Ложь;
				ОбщегоНазначения.СообщитьОбОшибке("Обнаружены пересечения в графике работы ресурсов: начало """ + Формат(ДатаНачала, "ДФ='дд.ММ.гггг ЧЧ:мм'")
					+ """, окончание """ + Формат(ДатаОкончания, "ДФ='дд.ММ.гггг ЧЧ:мм'") + """, мастер """ + Мастер + """, цех """ + Цех + """, документ """
					+ ТекСтрокаПересечение.Документ + """", Отказ);
				Прервать;
			КонецЕсли;
			
		Иначе
			Разница = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/60/60/24;
			ТекущийДень = НачалоДня(ДатаНачала);
			Пока Разница >= 0 Цикл
				Дата_ = ТекущийДень;
				
				// Установим НачалоРабочегоВремени 
				Если ТекущийДень = НачалоДня(ДатаНачала) Тогда
					НачалоРабочегоВремени_ = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
				Иначе
					НачалоРабочегоВремени_ = '00010101';
				КонецЕсли;
				// Установим КонецРабочегоВремени
				Если ТекущийДень = НачалоДня(ДатаОкончания) Тогда
					КонецРабочегоВремени_ = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
				Иначе
					КонецРабочегоВремени_ = '00010101235959';
				КонецЕсли;
				
				Если Дата_ = ТекСтрокаПересечение.Дата И НачалоРабочегоВремени_ <= ТекСтрокаПересечение.КонецРабочегоВремени И КонецРабочегоВремени_ >= ТекСтрокаПересечение.НачалоРабочегоВремени Тогда
					Рез = Ложь;
					ОбщегоНазначения.СообщитьОбОшибке("Обнаружены пересечения в графике работы ресурсов: начало """
						+ Формат(Дата_ + (НачалоРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'") + """, окончание """
						+ Формат(Дата_ + (КонецРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'")
						+ """, мастер """ + Мастер + """, цех """ + Цех + """, документ """
						+ ТекСтрокаПересечение.Документ + """", Отказ);
					Прервать;
				КонецЕсли;
				
				ТекущийДень = ТекущийДень + 3600*24;
				Разница = Разница - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ,РежимЗаписи , РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения.уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, Права);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатЗаявкаНаРемонт.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьЗаявкиНаРемонт(ДополнительныеСвойства, Движения, Отказ);
	
	Если ЗначениеЗаполнено(ТС) И ПроверитьКорректностьДвижений(Отказ) Тогда
		ОтразитьДвиженияПоПланированиюТС();
		ОтразитьДвиженияПоПланированиюРемонтов();
	КонецЕсли;
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатЗаявкаНаРемонт.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	СтруктураПолей = Новый Структура("Работа, Количество");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Работы", СтруктураПолей, Отказ, Заголовок);
	
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИСПОЛНЯЕМАЯ ЧАСТЬ МОДУЛЯ

Права = Неопределено;
#Если Клиент Тогда
	Права = глПраваУАТ;
#КонецЕсли
