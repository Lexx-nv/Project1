Перем мДокументУАТ Экспорт; //Документ УАТ

Перем мТиповойДокумент Экспорт; //Типовой документ. Если это значение не заполнено, то документ создается здесь.
//Если значение заполнено, то этот документ дозаполняется

Перем РезультатЗапросаПоДокументамУАТ Экспорт; //Выборка табличной части или таблица значений

Перем мМетаданныеТиповогоДокумента;
Перем мМетаданныеДокументаУАТ;

Перем мСтруктураПараметров;

//Перем ВалютаУправленческогоУчета;
Перем ВалютаРегламентированногоУчета;

Перем ВсеОК;

Перем тблСозданныеДокументы Экспорт; //временная таблица созданных документов
Перем мИспользоватьДатуВыпискиПЛ Экспорт; //признак использования даты выписки (а не даты закрытия)


// Процедура помечает на удаление типовой документ и удаляет
// 
Процедура УдалитьТиповойДокумент() Экспорт
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(мДокументУАТ) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.уатТиповыеДокументы.СоздатьМенеджерЗаписи();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТиповыеДокументы.ТиповойДокумент,
	|	уатТиповыеДокументы.ДокументУАТ
	|ИЗ
	|	РегистрСведений.уатТиповыеДокументы КАК уатТиповыеДокументы
	|ГДЕ
	|	уатТиповыеДокументы.ДокументУАТ = &ДокументУАТ");
	Запрос.УстановитьПараметр("ДокументУАТ", мДокументУАТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ТиповойДокумент.ПометкаУдаления Тогда
			Попытка
				Выборка.ТиповойДокумент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				Сообщить(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;	
		КонецЕсли;
		
		МенеджерЗаписи.ДокументУАТ = Выборка.ДокументУАТ;
		МенеджерЗаписи.ТиповойДокумент = Выборка.ТиповойДокумент;
		Попытка
			МенеджерЗаписи.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	МенеджерЗаписи = Неопределено;
	
КонецПроцедуры

// Процедура помечает на удаление типовые документы и удаляет соотв. записи регистра
// 
Процедура УдалитьТиповыеДокументы(мсвДокументы, ЭлементПрогрессБар = Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.уатТиповыеДокументы.СоздатьМенеджерЗаписи();
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.ЗагрузитьЗначения(мсвДокументы);
	
	Если ЭлементПрогрессБар = Неопределено Тогда
		ЭлементПрогрессБар = Новый Структура("Значение, МаксимальноеЗначение", 0, 0);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТиповыеДокументы.ТиповойДокумент,
	|	уатТиповыеДокументы.ДокументУАТ
	|ИЗ
	|	РегистрСведений.уатТиповыеДокументы КАК уатТиповыеДокументы
	|ГДЕ
	|	уатТиповыеДокументы.ДокументУАТ В(&мсвДокументыУАТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатТиповыеДокументы.ТиповойДокумент,
	|	уатТиповыеДокументы.ДокументУАТ");
	Запрос.УстановитьПараметр("мсвДокументыУАТ", СписокДокументов);
	
	ДеревоДокументов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ТекСтрокаТиповойДокумент Из ДеревоДокументов Цикл
		ТекТиповойДокумент = ТекСтрокаТиповойДокумент.ТиповойДокумент;
		Если НЕ ТекТиповойДокумент.ПометкаУдаления Тогда
			Попытка
				ТекТиповойДокументОбъект = ТекТиповойДокумент.ПолучитьОбъект();
				ТекТиповойДокументОбъект.УстановитьПометкуУдаления(Истина);
			Исключение
				Сообщить("Документ <" + ТекТиповойДокументОбъект + ">: не удалось установить пометку удаления! " + ИнформацияОбОшибке().Описание, СтатусСообщения.Внимание);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Для Каждого ТекСтрокаДокументУАТ Из ТекСтрокаДокументУАТ.Строки Цикл
			ТекДокументУАТ = ТекСтрокаДокументУАТ.ДокументУАТ;
			МенеджерЗаписи.ДокументУАТ = ТекДокументУАТ;
			МенеджерЗаписи.ТиповойДокумент = ТекТиповойДокумент;
			Попытка
				МенеджерЗаписи.Удалить();
			Исключение
				Сообщить("Не удалось удалить запись регистра <" + ТекДокументУАТ + ">, <" + ТекТиповойДокумент + ">: " + ИнформацияОбОшибке().Описание, СтатусСообщения.Внимание);
			КонецПопытки;
			
			ЭлементПрогрессБар.Значение = ЭлементПрогрессБар.Значение + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того, что конфигурация является объединенной с БП
//
Функция ЭтоБухгалтерияПредприятия()
	ЭтоБухгалтерияПредприятия = (Найти(Метаданные.Имя, "БухгалтерияПредприятия") <> 0);
	Возврат ЭтоБухгалтерияПредприятия;
КонецФункции // ЭтоБухгалтерияПредприятия()


#Если Клиент Тогда
	
	Процедура ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента = Ложь)
		
		мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
		мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
		
		Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
			Если мМетаданныеДокументаУАТ.Имя = "уатПутевойЛист" Тогда
				Если мИспользоватьДатуВыпискиПЛ = Истина Тогда
					мТиповойДокумент.Дата = мДокументУАТ.Дата;
				Иначе
					мТиповойДокумент.Дата = мДокументУАТ.ДатаВозвращения;
				КонецЕсли;
			Иначе
				мТиповойДокумент.Дата = мДокументУАТ.Дата;
			КонецЕсли;
			
			уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(мТиповойДокумент.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) 
				И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеДокументаУАТ) Тогда
				мТиповойДокумент.Организация 		= мДокументУАТ.Организация;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Подразделение", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Подразделение", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Подразделение 		= мДокументУАТ.Подразделение;
		КонецЕсли;	
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ПодразделениеОрганизации", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ПодразделениеОрганизации", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.ПодразделениеОрганизации 	= мДокументУАТ.ПодразделениеОрганизации;
		КонецЕсли;	
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.СуммаВключаетНДС 	= мДокументУАТ.СуммаВключаетНДС;
		КонецЕсли;	
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.ОтражатьВНалоговомУчете = мДокументУАТ.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.ОтражатьВУправленческомУчете = мДокументУАТ.ОтражатьВУправленческомУчете;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.ОтражатьВБухгалтерскомУчете = мДокументУАТ.ОтражатьВБухгалтерскомУчете;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДоговорКонтрагента", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.ДоговорКонтрагента = мДокументУАТ.ДоговорКонтрагента;
			мТиповойДокумент.ВалютаДокумента    = мТиповойДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата);
			
			// В некоторых документах курс и кратность документа отсутствуют.
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КурсДокумента", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КратностьДокумента", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КурсВзаиморасчетов", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", мМетаданныеТиповогоДокумента)Тогда
				мТиповойДокумент.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Склад 				= мДокументУАТ.Склад;
		КонецЕсли;
		
		//в некоторых документах УПП вместо реквизита "Склад" - реквизит "СкладОрдер" составного типа
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СкладОрдер", мМетаданныеТиповогоДокумента)
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.ВидПоступления				= Перечисления.ВидыПоступленияТоваров.НаСклад;
			мТиповойДокумент.СкладОрдер 				= мДокументУАТ.Склад;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Комментарий", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Комментарий", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Комментарий = мДокументУАТ.Комментарий;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Ответственный", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Ответственный", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.Ответственный = мДокументУАТ.Ответственный;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("НомерВходящегоДокумента", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("НомерВходящегоДокумента", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.НомерВходящегоДокумента = мДокументУАТ.НомерВходящегоДокумента;
		КонецЕсли;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДатаВходящегоДокумента", мМетаданныеТиповогоДокумента) 
			И уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ДатаВходящегоДокумента", мМетаданныеДокументаУАТ) Тогда
			мТиповойДокумент.ДатаВходящегоДокумента = мДокументУАТ.ДатаВходящегоДокумента;
		КонецЕсли;
		
	КонецПроцедуры	
	
	// Процедура обработки заправочных ведомостей
	// 
	Процедура ОбработкаЗаправокГСМ(СтруктураПараметров)
		
		Если ((мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад) 
			ИЛИ (мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны)) 
			И СтруктураПараметров.ФормироватьПеремещТов Тогда
			
			мТиповойДокумент 				= Документы.ПеремещениеТоваров.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.СкладОтправитель	= мДокументУАТ.АЗС.Контрагент_Склад;
			мТиповойДокумент.СкладПолучатель	= уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			
			Запрос = Новый Запрос;
			
			ТекстЗапроса=
			"ВЫБРАТЬ
			|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ,
			|	ВЫБОР
			|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
			|				ИЛИ уатЗаправкаГСМЗаправки.Плотность = 0
			|			ТОГДА уатЗаправкаГСМЗаправки.Количество
			|		ИНАЧЕ уатЗаправкаГСМЗаправки.Количество * уатЗаправкаГСМЗаправки.Плотность
			|	КОНЕЦ КАК Количество
			|ИЗ
			|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
			|ГДЕ
			|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Ссылка", мДокументУАТ.Ссылка);
			Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
			
			тзЗаправки 	= Запрос.Выполнить().Выгрузить();
			тзЗаправки.Свернуть("ГСМ", "Количество");
			
			Для Каждого ТекСтрока из тзЗаправки Цикл
				
				НоваяСтрока 					= мТиповойДокумент.Товары.Добавить();
				НоваяСтрока.Номенклатура		= ТекСтрока.ГСМ;
				
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ЕдиницаХраненияОстатков", ТекСтрока.ГСМ) Тогда
					НоваяСтрока.ЕдиницаИзмерения	= ТекСтрока.ГСМ.ЕдиницаХраненияОстатков;
					НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрока.ГСМ.ЕдиницаХраненияОстатков;
					НоваяСтрока.Коэффициент      	= ТекСтрока.ГСМ.ЕдиницаХраненияОстатков.Коэффициент;
				Иначе
					НоваяСтрока.ЕдиницаИзмерения	= ТекСтрока.ГСМ.БазоваяЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      	= 1;
				КонецЕсли;;	
				
				НоваяСтрока.Количество			= ТекСтрока.Количество;
				
				Попытка
					Если ЭтоБухгалтерияПредприятия() Тогда
						мТиповойДокумент.ЭтотОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина);
					Иначе
						мТиповойДокумент.ЭтотОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина);
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
				
			КонецЦикла;
			мТиповойДокумент.Записать();
			
			ДобавитьНовуюЗапись();
			
		ИначеЕсли мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда	
			//авансовые отчеты
			тзЗаправки = мДокументУАТ.Заправки.Выгрузить();
			тзЗаправки.Свернуть("Водитель, Валюта");
			
			Для Каждого ТекСтрока1 из тзЗаправки Цикл
				//выбрали строки с заправками данного водителя
				мМассивЗаправок = мДокументУАТ.Заправки.НайтиСтроки(Новый Структура("Водитель, Валюта", ТекСтрока1.Водитель, ТекСтрока1.Валюта)); 
				мТиповойДокумент = Документы.АвансовыйОтчет.СоздатьДокумент();
				
				ЗаполнитьОбщиеРеквизиты();
				
				мТиповойДокумент.ФизЛицо			= ТекСтрока1.Водитель.ФизЛицо;
				мТиповойДокумент.НазначениеАванса	= "Заправка автомобиля ГСМ";
				
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.Склад          =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
				ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СкладОрдер", мМетаданныеТиповогоДокумента) Тогда	
					мТиповойДокумент.СкладОрдер     =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
				КонецЕсли;
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВидПоступления", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
				КонецЕсли;
				
				мТиповойДокумент.СуммаВключаетНДС 	= Истина;
				//мТиповойДокумент.НДСВключенССтоимость = Истина;
				
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеТиповогоДокумента) Тогда
					мТиповойДокумент.ВалютаДокумента    = ТекСтрока1.Валюта;
					СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата);
					
					// В некоторых документах курс и кратность документа отсутствуют.
					Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КурсДокумента", мМетаданныеТиповогоДокумента) Тогда
						мТиповойДокумент.КурсДокумента = СтруктураКурсаДокумента.Курс;
					КонецЕсли;
					Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КратностьДокумента", мМетаданныеТиповогоДокумента) Тогда
						мТиповойДокумент.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
					КонецЕсли;
				КонецЕсли;
				
				Для сч = 0 По мМассивЗаправок.Количество() - 1 Цикл
					НоваяСтрока 					= мТиповойДокумент.Товары.Добавить();
					НоваяСтрока.Номенклатура		= мМассивЗаправок[сч].ГСМ;
					Если уатОбщегоНазначенияТиповые.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", Метаданные.Документы.АвансовыйОтчет, "Товары") Тогда
						Попытка
							НоваяСтрока.ЕдиницаИзмерения	= мМассивЗаправок[сч].ГСМ.ЕдиницаХраненияОстатков;
							НоваяСтрока.ЕдиницаИзмеренияМест = мМассивЗаправок[сч].ГСМ.ЕдиницаХраненияОстатков;
							НоваяСтрока.Коэффициент      	= мМассивЗаправок[сч].ГСМ.ЕдиницаХраненияОстатков.Коэффициент;
						Исключение
							НоваяСтрока.ЕдиницаИзмерения	= мМассивЗаправок[сч].ГСМ.БазоваяЕдиницаИзмерения;
							НоваяСтрока.Коэффициент      	= 1;
						КонецПопытки;	
					КонецЕсли;
					НоваяСтрока.Количество				= мМассивЗаправок[сч].Количество;
					НоваяСтрока.Сумма					= мМассивЗаправок[сч].Сумма;
					НоваяСтрока.СтавкаНДС				= мМассивЗаправок[сч].СтавкаНДС;
					НоваяСтрока.СуммаНДС				= мМассивЗаправок[сч].СуммаНДС;
					
					НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мТиповойДокумент);
					
					// Заполняем реквизиты табличной части.
					Попытка
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", мДокументУАТ.ОтражатьВБухгалтерскомУчете, мДокументУАТ.ОтражатьВНалоговомУчете);
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;
				мТиповойДокумент.Записать();
				
				ДобавитьНовуюЗапись();
				
			КонецЦикла;
		ИначеЕсли мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Или 
			мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта Тогда	
			//по карте
			
			мТиповойДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.Контрагент 		= мДокументУАТ.АЗС.Контрагент_Склад;
			мТиповойДокумент.ДоговорКонтрагента = мДокументУАТ.ДоговорКонтрагента;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.Склад          =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			ИначеЕсли уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СкладОрдер", мМетаданныеТиповогоДокумента) Тогда	
				мТиповойДокумент.СкладОрдер     =  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			КонецЕсли;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВидОперации", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.ВидОперации    =  Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
			КонецЕсли;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВидПоступления", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
			КонецЕсли;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СпособЗачетаАвансов", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;

			Попытка
				СчетаУчета = Вычислить("БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(мТиповойДокумент.Организация, мТиповойДокумент.Контрагент, мТиповойДокумент.ДоговорКонтрагента)");
				
				Если мТиповойДокумент.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				Иначе
					мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				КонецЕсли;
			Исключение
			КонецПопытки;
			мТиповойДокумент.ТипЦен = мТиповойДокумент.ДоговорКонтрагента.ТипЦен;
			
			тзЗаправки = мДокументУАТ.Заправки.Выгрузить();
			тзЗаправки.Свернуть("ГСМ, Валюта, СтавкаНДС", "СуммаНДС, Сумма, Количество");
			
			Для Каждого ТекСтрока из тзЗаправки Цикл
				
				НоваяСтрока 					= мТиповойДокумент.Товары.Добавить();
				НоваяСтрока.Номенклатура		= ТекСтрока.ГСМ;
				
				Попытка
					НоваяСтрока.ЕдиницаИзмерения	= ТекСтрока.ГСМ.ЕдиницаХраненияОстатков;
					НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрока.ГСМ.ЕдиницаХраненияОстатков;
					НоваяСтрока.Коэффициент      	= ТекСтрока.ГСМ.ЕдиницаХраненияОстатков.Коэффициент;
				Исключение
					НоваяСтрока.ЕдиницаИзмерения	= ТекСтрока.ГСМ.БазоваяЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      	= 1;
				КонецПопытки;	
				
				НоваяСтрока.Количество			= ТекСтрока.Количество;
				
				Если Не ЗначениеЗаполнено(мТиповойДокумент.ВалютаДокумента) Тогда
					НоваяСтрока.Сумма 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ТекСтрока.Валюта, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Цена 	= ?(ТекСтрока.Количество = 0, 0, НоваяСтрока.Сумма / ТекСтрока.Количество);
				Иначе
					НоваяСтрока.Сумма 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ТекСтрока.Валюта, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Цена 	= ?(ТекСтрока.Количество = 0, 0, НоваяСтрока.Сумма / ТекСтрока.Количество);
				КонецЕсли;	
				
				НоваяСтрока.СтавкаНДС 	= ТекСтрока.СтавкаНДС;
				НоваяСтрока.СуммаНДС 	= ТекСтрока.СуммаНДС;
				
				// Заполняем реквизиты табличной части.
				Попытка
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,"Товары", мДокументУАТ.ОтражатьВБухгалтерскомУчете, мДокументУАТ.ОтражатьВНалоговомУчете);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
				
			КонецЦикла;
			
			мТиповойДокумент.Услуги.Свернуть("Номенклатура, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС");
			мТиповойДокумент.Записать();
			
			ДобавитьНовуюЗапись();
			
		ИначеЕсли ((мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад)
			ИЛИ (мДокументУАТ.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны))
			И СтруктураПараметров.ФормироватьТребНакл Тогда
			
			мТиповойДокумент 				= Документы.ТребованиеНакладная.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.Склад = мДокументУАТ.АЗС.Контрагент_Склад;
			
			Запрос = Новый Запрос;
			
			ТекстЗапроса=
			"ВЫБРАТЬ
			|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ,
			|	ВЫБОР
			|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
			|				ИЛИ уатЗаправкаГСМЗаправки.Плотность = 0
			|			ТОГДА уатЗаправкаГСМЗаправки.Количество
			|		ИНАЧЕ уатЗаправкаГСМЗаправки.Количество * уатЗаправкаГСМЗаправки.Плотность
			|	КОНЕЦ КАК Количество
			|ИЗ
			|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
			|ГДЕ
			|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Ссылка", мДокументУАТ.Ссылка);
			Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
			
			тзЗаправки 	= Запрос.Выполнить().Выгрузить();
			тзЗаправки.Свернуть("ГСМ", "Количество");
			
			Для Каждого ТекСтрока из тзЗаправки Цикл
				
				НоваяСтрока 					= мТиповойДокумент.Материалы.Добавить();
				НоваяСтрока.Номенклатура		= ТекСтрока.ГСМ;
				
				Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ЕдиницаХраненияОстатков", ТекСтрока.ГСМ) Тогда
					НоваяСтрока.ЕдиницаИзмерения	 = ТекСтрока.ГСМ.ЕдиницаХраненияОстатков;
					НоваяСтрока.ЕдиницаИзмеренияМест = ТекСтрока.ГСМ.ЕдиницаХраненияОстатков;
					НоваяСтрока.Коэффициент      	 = ТекСтрока.ГСМ.ЕдиницаХраненияОстатков.Коэффициент;
				Иначе
					НоваяСтрока.ЕдиницаИзмерения	 = ТекСтрока.ГСМ.БазоваяЕдиницаИзмерения;
					НоваяСтрока.Коэффициент      	 = 1;
				КонецЕсли;;	
				
				НоваяСтрока.Количество			= ТекСтрока.Количество;
				
				Попытка
					Если ЭтоБухгалтерияПредприятия() Тогда
						мТиповойДокумент.ЭтотОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина);
					Иначе
						мТиповойДокумент.ЭтотОбъект.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина);
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
				
			КонецЦикла;
			мТиповойДокумент.Записать();
			
			ДобавитьНовуюЗапись();			
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обработки ТТД
	// 
	Процедура ОбработкаТТД(СтруктураПараметров)
		
		Если НЕ СтруктураПараметров.ФормироватьАктУслуг Тогда
			
			Если Не СтруктураПараметров.ФормироватьОбщийТД Тогда
				
				мТиповойДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
				мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
				
				мТиповойДокумент.Дата 			= мДокументУАТ.Дата;
				
				уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(мТиповойДокумент.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
				Попытка
					Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) Тогда
						мТиповойДокумент.Организация = мДокументУАТ.Организация;
					КонецЕсли;
				Исключение
				КонецПопытки; 
				
			КонецЕсли;
			
		Иначе
			
			Если Не СтруктураПараметров.ФормироватьОбщийТД Тогда
				
				мТиповойДокумент = Документы.АктОбОказанииПроизводственныхУслуг.СоздатьДокумент();
				мМетаданныеТиповогоДокумента 	= мТиповойДокумент.Метаданные();
				мМетаданныеДокументаУАТ 		= мДокументУАТ.Метаданные();
				
				мТиповойДокумент.Дата 			= мДокументУАТ.Дата;
				
				уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(мТиповойДокумент.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
				Попытка
					Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Организация", мМетаданныеТиповогоДокумента) Тогда
						мТиповойДокумент.Организация = мДокументУАТ.Организация;
					КонецЕсли;
				Исключение
				КонецПопытки; 
				
			КонецЕсли;			
			
		КонецЕсли;
		
		мТиповойДокумент.Контрагент 	= мДокументУАТ.Контрагент;
		мТиповойДокумент.АдресДоставки 	= мДокументУАТ.АдресДоставки;
		мТиповойДокумент.Грузополучатель= мДокументУАТ.Грузополучатель;
		
		ЗаполнитьОбщиеРеквизиты(СтруктураПараметров.ФормироватьОбщийТД);
		
		Попытка
			СчетаУчета = Вычислить("БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(мТиповойДокумент.Организация, мТиповойДокумент.Контрагент, мТиповойДокумент.ДоговорКонтрагента)");
			
			Если мТиповойДокумент.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Иначе
				мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
		Исключение
		КонецПопытки;	
		
		Для Каждого ТекСтрока Из мДокументУАТ.Стоимость Цикл
			НоваяСтрока					= мТиповойДокумент.Услуги.Добавить();
			НоваяСтрока.Номенклатура 	= ТекСтрока.НоменклатураУслуги;
			НоваяСтрока.Содержание 		= "Перевозка по пут. лист №" + 
			ТекСтрока.ПутЛист.Номер + " от " + ТекСтрока.ПутЛист.Дата + ", ТТД №"+ мДокументУАТ.Номер + " от " + мДокументУАТ.Дата; 
			НоваяСтрока.Количество 		= ТекСтрока.Количество;
			//НоваяСтрока.СтавкаНДС 		= ТекСтрока.СтавкаНДС;
			//НоваяСтрока.СуммаНДС 		= ТекСтрока.СуммаНДС;
			
			Если ЗначениеЗаполнено(мТиповойДокумент.ВалютаДокумента) Тогда
				НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
			Иначе
				НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, мДокументУАТ.ВалютаДокумента, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, мДокументУАТ.ВалютаДокумента, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
			КонецЕсли;
			
			// Заполняем реквизиты табличной части.
			Попытка
				Если ЭтоБухгалтерияПредприятия() Тогда
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(НоваяСтрока, мДокументУАТ.ОтражатьВБухгалтерскомУчете);
				Иначе
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", мДокументУАТ.ОтражатьВБухгалтерскомУчете, мДокументУАТ.ОтражатьВНалоговомУчете);
				КонецЕсли;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
			
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, мТиповойДокумент);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, мТиповойДокумент);
		КонецЦикла;
				
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
		
	КонецПроцедуры
	
	// Процедура обработки путевых листов
	// 
	Процедура ОбработкаПЛ(ПризнакФормированияОбщегоТиповогоДокумента)
		
		Если мСтруктураПараметров.ФормироватьВырабОС Тогда
			Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
				мТиповойДокумент = Документы.ВыработкаОС.СоздатьДокумент();
			КонецЕсли;
			
			ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
			
			Для Каждого ТекСтрока Из мДокументУАТ.ВыработкаТС Цикл
				мПараметрВыработкиОС = ТекСтрока.ПараметрВыработки.ПараметрВыработкиОС;
				Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(мПараметрВыработкиОС) Тогда
					Сообщить("Документ <" + мДокументУАТ + ">. Не указан параметр выработки ОС для <" + ТекСтрока.ПараметрВыработки + ">!", СтатусСообщения.Внимание);
					Продолжить;
				КонецЕсли;
				Если ТекСтрока.ПараметрВыработки.Коэффициент = 0 Тогда
					Сообщить("Документ <" + мДокументУАТ + ">. Не указан коэффициент пересчета для <" + ТекСтрока.ПараметрВыработки + ">!", СтатусСообщения.Внимание);
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.Количество <> 0 Тогда
					НоваяСтрока = мТиповойДокумент.ОС.Добавить();
					НоваяСтрока.ОсновноеСредство = ТекСтрока.ТС.ОсновноеСредство;
					НоваяСтрока.ПараметрВыработки 	= мПараметрВыработкиОС;
					НоваяСтрока.Количество = ТекСтрока.Количество * ТекСтрока.ПараметрВыработки.Коэффициент;
					Если ТекСтрока.ПараметрВыработки.Временный Тогда
						НоваяСтрока.Количество = НоваяСтрока.Количество / 3600;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если мТиповойДокумент.ОС.Количество() > 0 Тогда
				//Если НЕ ПризнакФормированияОбщегоТиповогоДокумента Тогда
					мТиповойДокумент.Записать();
				//КонецЕсли;
				ДобавитьНовуюЗапись();
			КонецЕсли;
 			
		ИначеЕсли мСтруктураПараметров.ФормироватьТребНакл Тогда
			Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
				мТиповойДокумент = Документы.ТребованиеНакладная.СоздатьДокумент();
			КонецЕсли;
			
			ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
			мТиповойДокумент.Склад = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			
			Для Каждого ТекСтрока Из мДокументУАТ.РасходГСМ Цикл
				Если НЕ ТекСтрока.Активен Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.РасходПоФакту <> 0 Тогда
					НоваяСтрока					= мТиповойДокумент.Материалы.Добавить();
					НоваяСтрока.Номенклатура	= ТекСтрока.ГСМ;
					НоваяСтрока.ЕдиницаИзмерения= НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
					НоваяСтрока.Коэффициент    	= 1;
					НоваяСтрока.Количество		= ТекСтрока.РасходПоФакту;
				КонецЕсли;
				
				Попытка
					Если ЭтоБухгалтерияПредприятия() Тогда
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина);
					Иначе
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
					КонецЕсли;
				Исключение
					Попытка
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
					Исключение
					КонецПопытки;	
				КонецПопытки;	
			КонецЦикла;
			Если мТиповойДокумент.Материалы.Количество() > 0 Тогда
				//Если НЕ ПризнакФормированияОбщегоТиповогоДокумента Тогда
					мТиповойДокумент.Записать();
				//КонецЕсли;
				ДобавитьНовуюЗапись();
			КонецЕсли;
			
		ИначеЕсли мСтруктураПараметров.ФормироватьСписание Тогда
			Если Не ПризнакФормированияОбщегоТиповогоДокумента Тогда
				мТиповойДокумент = Документы.СписаниеТоваров.СоздатьДокумент();
			КонецЕсли;
			
			ЗаполнитьОбщиеРеквизиты(ПризнакФормированияОбщегоТиповогоДокумента);
			мТиповойДокумент.Склад = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);
			
			Для Каждого ТекСтрока Из мДокументУАТ.РасходГСМ Цикл
				Если НЕ ТекСтрока.Активен Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.РасходПоФакту <> 0 Тогда
					НоваяСтрока					= мТиповойДокумент.Товары.Добавить();
					НоваяСтрока.Номенклатура	= ТекСтрока.ГСМ;
					НоваяСтрока.ЕдиницаИзмерения= НоваяСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
					НоваяСтрока.Коэффициент    	= 1;
					НоваяСтрока.Количество		= ТекСтрока.РасходПоФакту;
				КонецЕсли;
				
				Попытка
					Если ЭтоБухгалтерияПредприятия() Тогда
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Истина);
					Иначе
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
					КонецЕсли;
				Исключение
					Попытка
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
					Исключение
					КонецПопытки;	
				КонецПопытки;	
			КонецЦикла;
			Если мТиповойДокумент.Товары.Количество() > 0 Тогда
				//Если НЕ ПризнакФормированияОбщегоТиповогоДокумента Тогда
					мТиповойДокумент.Записать();
				//КонецЕсли;
				ДобавитьНовуюЗапись();
			КонецЕсли;
			
		Иначе
			Возврат;
			
		КонецЕсли;
	КонецПроцедуры
	
	// Процедура обработки ремонтных листов
	// 
	Процедура ОбработкаРемЛистов()
		
		Если мДокументУАТ.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			
			//Для ремонта в автосервисе 
			Если Не мСтруктураПараметров.ФормироватьПоступТовУслуг Тогда
				Возврат;
			КонецЕсли;	
			
			мТиповойДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.Контрагент 		= мДокументУАТ.Контрагент;
			мТиповойДокумент.ДоговорКонтрагента = мДокументУАТ.ДоговорКонтрагента;
			
			Попытка
				
				СчетаУчета = Вычислить("БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(мТиповойДокумент.Организация, мТиповойДокумент.Контрагент, мТиповойДокумент.ДоговорКонтрагента)");
				
				Если мТиповойДокумент.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				Иначе
					мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				КонецЕсли;
				
			Исключение
			КонецПопытки;	
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СпособЗачетаАвансов", мМетаданныеТиповогоДокумента) Тогда
				мТиповойДокумент.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли;
			
			Для Каждого ТекСтрока Из мДокументУАТ.Работы Цикл
				НоваяСтрока					= мТиповойДокумент.Услуги.Добавить();
				НоваяСтрока.Номенклатура 	= ТекСтрока.Работа.Номенклатура;
				НоваяСтрока.Содержание 		= ТекСтрока.Работа.Наименование; 
				НоваяСтрока.Количество 		= ТекСтрока.Количество;
				
				Если Не ЗначениеЗаполнено(мТиповойДокумент.ВалютаДокумента) Тогда
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, ВалютаРегламентированногоУчета, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ВалютаРегламентированногоУчета, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				Иначе
					НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, ВалютаРегламентированногоУчета, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
					НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ВалютаРегламентированногоУчета, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				КонецЕсли;	
				
				НоваяСтрока.СтавкаНДС 		= ТекСтрока.СтавкаНДС;
				НоваяСтрока.СуммаНДС 		= ТекСтрока.СуммаНДС;
				
				// Заполняем реквизиты табличной части.
				Попытка
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,"Услуги", Истина, мДокументУАТ.ОтражатьВНалоговомУчете);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
				
			КонецЦикла;
			
			мТиповойДокумент.Услуги.Свернуть("Номенклатура, Содержание, Цена, СтавкаНДС", "Количество, Сумма, СуммаНДС");
			
		Иначе
			
			//Для ремонта на собственной рем. зоне
			
			Если Не мСтруктураПараметров.ФормироватьТребНакл Тогда
				Возврат;
			КонецЕсли;	
			
			мТиповойДокумент = Документы.ТребованиеНакладная.СоздатьДокумент();
			
			ЗаполнитьОбщиеРеквизиты();
			
			мТиповойДокумент.Склад 			= мДокументУАТ.Контрагент;
			мТиповойДокумент.ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
			
			Для Каждого ТекСтрока Из мДокументУАТ.Материалы Цикл
				
				НоваяСтрока					= мТиповойДокумент.Материалы.Добавить();
				НоваяСтрока.Номенклатура	= ТекСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения= ТекСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Количество		= ТекСтрока.Количество;
				
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, мТиповойДокумент);
				Попытка
					Если ЭтоБухгалтерияПредприятия() Тогда
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина);
					Иначе
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
					КонецЕсли;
				Исключение
					Попытка
						мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
					Исключение
					КонецПопытки;	
				КонецПопытки;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		мТиповойДокумент.Записать();
		ДобавитьНовуюЗапись();
		
	КонецПроцедуры
	
	// Процедура обработки поступления товаров и услуг
	// 
	Процедура ОбработкаПоступленияТоваровУслуг()
		
		Если Не мСтруктураПараметров.ФормироватьПоступТовУслуг Тогда
			Возврат;
		КонецЕсли;	
		
		мТиповойДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.Контрагент 		= мДокументУАТ.Контрагент;
		
		Попытка
			
			СчетаУчета = Вычислить("БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(мТиповойДокумент.Организация, мТиповойДокумент.Контрагент, мТиповойДокумент.ДоговорКонтрагента)");
			
			Если мТиповойДокумент.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Иначе
				мТиповойДокумент.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				мТиповойДокумент.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				мТиповойДокумент.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СпособЗачетаАвансов", мМетаданныеТиповогоДокумента) Тогда
			мТиповойДокумент.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из мДокументУАТ.Товары Цикл
			НоваяСтрока					= мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрока.Количество 		= ТекСтрока.Количество;
			
			НоваяСтрока.ЕдиницаИзмерения 		= ТекСтрока.ЕдиницаИзмерения;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КоличествоМест", мМетаданныеТиповогоДокумента) Тогда
				НоваяСтрока.КоличествоМест 		= ТекСтрока.КоличествоМест;
			КонецЕсли;
			
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ЕдиницаИзмеренияМест", мМетаданныеТиповогоДокумента) Тогда
				НоваяСтрока.ЕдиницаИзмеренияМест 		= ТекСтрока.ЕдиницаИзмеренияМест;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(мТиповойДокумент.ВалютаДокумента) Тогда
				НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, ВалютаРегламентированногоУчета, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ВалютаРегламентированногоУчета, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
			Иначе
				НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, ВалютаРегламентированногоУчета, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ВалютаРегламентированногоУчета, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
			КонецЕсли;	
			
			НоваяСтрока.СтавкаНДС 		= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 		= ТекСтрока.СуммаНДС;
			
			Попытка
				// Заполняем реквизиты табличной части.
				мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,"Товары", Истина, мДокументУАТ.ОтражатьВНалоговомУчете);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
			
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мДокументУАТ.Услуги Цикл
			НоваяСтрока					= мТиповойДокумент.Услуги.Добавить();
			НоваяСтрока.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрока.Содержание 		= ТекСтрока.Содержание; 
			НоваяСтрока.Количество 		= ТекСтрока.Количество;
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(мТиповойДокумент.ВалютаДокумента) Тогда
				НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, ВалютаРегламентированногоУчета, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ВалютаРегламентированногоУчета, ВалютаРегламентированногоУчета, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
			Иначе
				НоваяСтрока.Цена 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена, ВалютаРегламентированногоУчета, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
				НоваяСтрока.Сумма 		= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, ВалютаРегламентированногоУчета, мТиповойДокумент.ВалютаДокумента, мТиповойДокумент.Дата, мТиповойДокумент.Дата);
			КонецЕсли;	
			
			НоваяСтрока.СтавкаНДС 		= ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 		= ТекСтрока.СуммаНДС;
			
			Попытка
				// Заполняем реквизиты табличной части.
				мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,"Услуги", Истина, мДокументУАТ.ОтражатьВНалоговомУчете);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
			
		КонецЦикла;
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
		
	КонецПроцедуры
	
	// Процедура обработки поступления товаров и услуг
	// 
	Процедура ОбработкаПоступленияШинАккумуляторов()
		
		
	КонецПроцедуры
	
	// Процедура обработки перемещения товаров
	// 
	Процедура ОбработкаПеремещениеТоваров()
		
		Если Не мСтруктураПараметров.ФормироватьПеремещение Тогда
			Возврат;
		КонецЕсли;	
		
		мТиповойДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.СкладОтправитель = мДокументУАТ.СкладОтправитель;
		мТиповойДокумент.СкладПолучатель = мДокументУАТ.СкладПолучатель;
		
		Для Каждого ТекСтрока Из мДокументУАТ.Товары Цикл
			НоваяСтрока					= мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрока.Количество 		= ТекСтрока.Количество;
			НоваяСтрока.ЕдиницаИзмерения 		= ТекСтрока.ЕдиницаИзмерения;
			Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КоличествоМест", мМетаданныеТиповогоДокумента) Тогда
				НоваяСтрока.КоличествоМест 		= ТекСтрока.КоличествоМест;
			КонецЕсли;
		КонецЦикла;
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
		
	КонецПроцедуры
	
	// Процедура обработки списание товаров
	// 
	Процедура ОбработкаСписаниеТоваров()
		
		Если Не мСтруктураПараметров.ФормироватьСписание Тогда
			Возврат;
		КонецЕсли;	
		
		мТиповойДокумент = Документы.СписаниеТоваров.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		//мТиповойДокумент.Склад = мДокументУАТ.Склад;  - лишний код, это Общий реквизит,
		//	который устанавливается функцией  "ЗаполнитьОбщиеРеквизиты"
		
		мОбъектДокументУАТ 	= мДокументУАТ.ПолучитьОбъект();
		мОбъектДокументУАТ.Движения.уатПартииТоваровНаСкладах.Прочитать();
		ТабДвижений 		= мОбъектДокументУАТ.Движения.уатПартииТоваровНаСкладах.Выгрузить();
		
		Для Каждого ТекСтрока Из мДокументУАТ.Товары Цикл
			НоваяСтрока					= мТиповойДокумент.Товары.Добавить();
			НоваяСтрока.Номенклатура 	= ТекСтрока.Номенклатура;
			НоваяСтрока.Количество 		= ТекСтрока.Количество;
			НоваяСтрока.ЕдиницаИзмерения= ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Сумма 			= мОбъектДокументУАТ.РассчитатьСуммуСписания(ТекСтрока, ТабДвижений);
			НоваяСтрока.Цена  			= Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2, 1);
			
			Попытка
				Если ЭтоБухгалтерияПредприятия() Тогда
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Истина);
				Иначе
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Товары", Истина, мДокументУАТ.ОтражатьВНалоговомУчете);
				КонецЕсли;
			Исключение
				Попытка
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока,"Товары", Истина, мДокументУАТ.ОтражатьВНалоговомУчете);
				Исключение
				КонецПопытки;	
			КонецПопытки;	
			
		КонецЦикла;
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
		
	КонецПроцедуры
	
	// Процедура обработки начисления зарплаты
	// 
	Процедура ОбработкаНачислениеЗарплаты()
		
		мТиповойДокумент = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.Дата = мДокументУАТ.Дата;
		мТиповойДокумент.Организация = мДокументУАТ.Организация;
		мТиповойДокумент.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		мТиповойДокумент.Комментарий = "Сформирован на основании " + мДокументУАТ;
		мТиповойДокумент.ПериодРегистрации = НачалоМесяца(мДокументУАТ.Дата);
		Попытка  // в УПП
			мТиповойДокумент.ПериодНачисления	= Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;
			мТиповойДокумент.ВидОперации	= Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
			мТиповойДокумент.ПериодНачисленияДатаНачала	= мДокументУАТ.ПериодНачисленияДатаНачала;
			мТиповойДокумент.ПериодНачисленияДатаОкончания	= мДокументУАТ.ПериодНачисленияДатаОкончания;
		Исключение
		КонецПопытки;  					
		
		Для Каждого ТекСтрока Из мДокументУАТ.Начисления Цикл
			мСотрудник = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("ФизЛицо",ТекСтрока.Сотрудник.Физлицо);
			Если мСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка() Тогда
				Сообщить("Водитель " + ТекСтрока.Сотрудник.Физлицо + " не оформлен приказом о приеме на работу!");
			Иначе
				Если ТекСтрока.Результат <> 0 Тогда
					НоваяСтрока					= мТиповойДокумент.Начисления.Добавить();
					НоваяСтрока.Физлицо			= мСотрудник.Физлицо;
					НоваяСтрока.Сотрудник 		= мСотрудник;
					НоваяСтрока.ПодразделениеОрганизации		= ТекСтрока.ПодразделениеОрганизации;
					НоваяСтрока.Результат    	= ТекСтрока.Результат;
					
					Если ЗначениеЗаполнено(ТекСтрока.ВидРасчета.КодВидаНачисленияДляВыгрузки) Тогда
						НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду(ТекСтрока.ВидРасчета.КодВидаНачисленияДляВыгрузки);
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидРасчета) Тогда  // в УПП
							НоваяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию(ТекСтрока.ВидРасчета.КодВидаНачисленияДляВыгрузки);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидРасчета) Тогда
							Сообщить("Не найден соответствующий вид расчета для """ + ТекСтрока.ВидРасчета + """, код для выгрузки """ + ТекСтрока.ВидРасчета.КодВидаНачисленияДляВыгрузки + """!", СтатусСообщения.Внимание);
						КонецЕсли;
					Иначе
						Сообщить("Не указан код для выгрузки у вида начисления """ + ТекСтрока.ВидРасчета + """!", СтатусСообщения.Внимание);
					КонецЕсли;
					
					Попытка     // в Бухгалтерии 8
						НоваяСтрока.КодДоходаНДФЛ 	= Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию;
					Исключение
					КонецПопытки;  					
					Попытка     // в УПП
						НоваяСтрока.ДатаНачала 	= мДокументУАТ.ПериодНачисленияДатаНачала;
						НоваяСтрока.ДатаОкончания 	= мДокументУАТ.ПериодНачисленияДатаОкончания;
						НоваяСтрока.ДатаНачалаСобытия 	= мДокументУАТ.ПериодНачисленияДатаНачала;
						НоваяСтрока.ОтработаноДней 	=  ТекСтрока.ОтработаноДней;
						НоваяСтрока.ОтработаноЧасов 	=  ТекСтрока.ОтработаноЧасов;
					Исключение
					КонецПопытки; 
					
					
					НоваяСтрока1				= мТиповойДокумент.НДФЛ.Добавить();
					НоваяСтрока1.Физлицо        = мСотрудник.Физлицо;
					Попытка   // в УПП
						НоваяСтрока1.МесяцНалоговогоПериода 	= НачалоМесяца(мДокументУАТ.ПериодНачисления);
					Исключение
					КонецПопытки; 
					
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;	
		мТиповойДокумент.Записать();
		мТиповойДокумент.РассчитатьНДФЛ();
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
		
	КонецПроцедуры
	
	// Процедура обработки выдачи расходных материалов
	// 
	Процедура ОбработкаВыдачиРасхМатериалов()
		Если Не мСтруктураПараметров.ФормироватьТребНакл Тогда
			Возврат;
		КонецЕсли;	
		
		мТиповойДокумент = Документы.ТребованиеНакладная.СоздатьДокумент();
		
		ЗаполнитьОбщиеРеквизиты();
		
		мТиповойДокумент.Склад = мДокументУАТ.Склад;
		мТиповойДокумент.ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
		
		Для Каждого ТекСтрока Из мДокументУАТ.Материалы Цикл
			
			НоваяСтрока					= мТиповойДокумент.Материалы.Добавить();
			НоваяСтрока.Номенклатура	= ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения= ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество		= ТекСтрока.Количество;
			
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрока, мТиповойДокумент);
			Попытка
				Если ЭтоБухгалтерияПредприятия() Тогда
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
				Иначе
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
				КонецЕсли;
			Исключение
				Попытка
					мТиповойДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Материалы", Истина, Истина); //мДокументУАТ.ОтражатьВНалоговомУчете);
				Исключение
				КонецПопытки;	
			КонецПопытки;	
			
		КонецЦикла;	
		
		мТиповойДокумент.Записать();
		
		ДобавитьНовуюЗапись();
	КонецПроцедуры
	
// Формирует движения по регистру 
//
// Параметры:
//  СтруктураПараметров - Структура передаваемых параметров
//
// Возвращаемое значение: 
//  Истина       - Выполнение функции завершено успешно 
//  Ложь         - при выполнении функции возникли ошибки
//
	Функция ФормированиеТД(СтруктураПараметров) Экспорт
		
		Перем мФормироватьОбщийТД;
		
		тблСозданныеДокументы = Новый ТаблицаЗначений;
		тблСозданныеДокументы.Колонки.Добавить("ДокументУАТ");
		тблСозданныеДокументы.Колонки.Добавить("ТиповойДокумент");
		
		ВсеОК=Истина;
		мСтруктураПараметров = СтруктураПараметров;
		
		Если Не СтруктураПараметров.Свойство("ФормироватьОбщийТД", мФормироватьОбщийТД) Тогда
			мФормироватьОбщийТД = Ложь;
		КонецЕсли;	
		
		Если СтруктураПараметров.ФормироватьТолькоНовые И Не мФормироватьОбщийТД Тогда
			
			//ранее сформированные типовые документы удаляем только тогда, когда формируем ТД для все документов УАТ,
			//т.е. могут быть ранее сформированные.
			//Флаг "мФормироватьОбщийТД" означает, что ТД должны были быть все предварительно удалены перед вызовом этого режима.
			УдалитьТиповойДокумент();
			
		КонецЕсли;
		
		Если СтруктураПараметров.ДокументУАТ  = Документы.уатЗаправкаГСМ Тогда
			
			ОбработкаЗаправокГСМ(СтруктураПараметров);
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатПутевойЛист Тогда
			
			ОбработкаПЛ(СтруктураПараметров.ФормироватьОбщийТД);
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатТТД Тогда
			
			ОбработкаТТД(СтруктураПараметров);
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатРемонтныйЛист Тогда
			
			ОбработкаРемЛистов();
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатВыдачаРасходныхМатериалов Тогда
			
			ОбработкаВыдачиРасхМатериалов();
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатПоступлениеТоваровУслуг Тогда
			
			ОбработкаПоступленияТоваровУслуг();
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатПоступлениеАгрегатов Тогда
			
			ОбработкаПоступленияШинАккумуляторов();
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатПеремещениеТоваров Тогда
			
			ОбработкаПеремещениеТоваров();
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатСписаниеТоваров Тогда
			
			ОбработкаСписаниеТоваров();
			
		ИначеЕсли СтруктураПараметров.ДокументУАТ  = Документы.уатНачислениеЗарплаты Тогда
			
			ОбработкаНачислениеЗарплаты();
		КонецЕсли;	
		
		ОбновитьРегистрТиповыеДокументы();
		
		Возврат ВсеОК;
	КонецФункции
		
	
#КонецЕсли

//Добавляет новую запись в таблицу со значениями измерений мТиповойДокумент и мДокументУАТ
Процедура ДобавитьНовуюЗапись()
	НоваяСтрока = тблСозданныеДокументы.Добавить();
	НоваяСтрока.ДокументУАТ = мДокументУАТ;
	НоваяСтрока.ТиповойДокумент = мТиповойДокумент.Ссылка;
КонецПроцедуры

Процедура ОбновитьРегистрТиповыеДокументы()
	// запись движений
	мМенеджерЗаписи = РегистрыСведений.уатТиповыеДокументы.СоздатьМенеджерЗаписи();
	Для Каждого ТекСтрока Из тблСозданныеДокументы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТиповойДокумент) И ЗначениеЗаполнено(ТекСтрока.ДокументУАТ) Тогда
			мМенеджерЗаписи.ТиповойДокумент = ТекСтрока.ТиповойДокумент;
			мМенеджерЗаписи.ДокументУАТ = ТекСтрока.ДокументУАТ;
			Попытка
				мМенеджерЗаписи.Записать();
			Исключение
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


//ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
