
&НаСервере
Функция ПолучитьПолноеИмяФормы(НовоеИмяФормы)
	
	Возврат Лев(ИмяФормы, СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца))+НовоеИмяФормы;
	
КонецФункции

&НаСервере
Функция ПериодСтрокой(ФорматнаяСтрока="'MMMM yyyy'")
	
	Возврат нрег(Формат(Планировщик.НачалоПериодаОтображения, "ДФ="+ФорматнаяСтрока+""));
	
КонецФункции

&НаСервере
Функция ЗаПеридСтрокойГода()
	Возврат " за "+ПериодСтрокой()+ " года";
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПустаяСтрока(КаталогПоУмолчанию) Тогда
		КаталогПоУмолчанию = "\\192.168.20.225\1C\CalAnal\";
	КонецЕсли;
	
	ПорогКолвоДней = 5;
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
	ЕстьПолныеПрава = РольДоступна(Метаданные.Роли.ItobПолныеПрава);
	
	Элементы.ФормаЗагрузитьИзФайла.Доступность = ЕстьПолныеПрава;
	Элементы.ФормаОтправитьНаПочту.Доступность = ЕстьПолныеПрава;
	Элементы.ФормаВыбратьКолвоДнейРемонта.Доступность = ЕстьПолныеПрава;
	
	Попытка
		Элементы.ФормаОтправитьНаПочту.Картинка = БиблиотекаКартинок.ОтправитьEmail;
	Исключение КонецПопытки;
	
	Планировщик.НачалоПериодаОтображения = НачалоМесяца(ТекущаяДата()+7);
	Планировщик.КонецПериодаОтображения = КонецМесяца(Планировщик.НачалоПериодаОтображения);
	
	ОбновитьНадписьПериода();
	ОбновитьДанныеПланировщика();
	ОбновитьДанныеТаблицыПоломок();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуМакета(Имя)
	
	Файл = Новый Файл(КаталогПоУмолчанию+Имя+".mxl");
	Если Файл.Существует() Тогда 
		Таблица = Новый ТабличныйДокумент;
		Таблица.Прочитать(Файл.ПолноеИмя);
	Иначе
		Таблица = РегистрыСведений.АналитикаРемонтовТС.ПолучитьМакет(Имя);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКолонкуТаблицыМакета(Таблица, Наименование)
	
	Для НомерКолонки = 1 По Таблица.ШиринаТаблицы Цикл
		Если нрег(СокрЛП(Таблица.Область(1, НомерКолонки).Текст)) = нрег(Наименование) Тогда
			Возврат НомерКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОрганизацииТаблицыМакета(ОрганизацияИНН, Таблица, Ключ)
	
	КолонкаИНН  = ПолучитьКолонкуТаблицыМакета(Таблица, "ИНН");
	КолонкаКлюч = ПолучитьКолонкуТаблицыМакета(Таблица, Ключ );
	
	Если КолонкаИНН = 0 Или КолонкаКлюч = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСтрокиОрганизации = 0;
	Для НомерСтроки = 2 По Таблица.ВысотаТаблицы Цикл
		Значение = Таблица.Область(НомерСтроки, КолонкаИНН).Текст;
		Если Значение = ОрганизацияИНН Тогда
			НомерСтрокиОрганизации = НомерСтроки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НомерСтрокиОрганизации = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Таблица.Область(НомерСтрокиОрганизации, КолонкаКлюч).Текст;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляДиалогаВыбораФайла()
	
	ТаблицаСоответствий = ПолучитьТаблицуМакета("Соответствие");
	
	ПолныйПуть = КаталогПоУмолчанию;
	
	//-= добавляем ГОД-МЕСЯЦ к полному пути
	ДопКаталог = ПериодСтрокой("yyyy-MM");
	ФС = Новый Файл(ПолныйПуть+ДопКаталог);
	Если ФС.Существует() И ФС.ЭтоКаталог() Тогда
		ПолныйПуть = ПолныйПуть+ДопКаталог+"\";
	КонецЕсли;
	
	//-= добавляем каталог организации
	ДопКаталог = ПолучитьЗначениеОрганизацииТаблицыМакета(Организация.ИНН, ТаблицаСоответствий, "Каталог");
	Если ДопКаталог <> Неопределено Тогда
		ПолныйПуть = ПолныйПуть+ДопКаталог+"\";
	КонецЕсли;
	
	Фильтр = "Веб-документ (*.html)|*.html";
	
	ИмяФайла = ПолучитьЗначениеОрганизацииТаблицыМакета(Организация.ИНН, ТаблицаСоответствий, "Файл");
	Если ИмяФайла <> Неопределено Тогда 
		Фильтр = Организация.Наименование+"|"+ИмяФайла+"|"+Фильтр;
	КонецЕсли;
	
	Возврат Новый Структура("Каталог, ИмяФайла, Фильтр", ПолныйПуть, ИмяФайла, Фильтр);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект), НСтр("ru= 'Загрузить из файла веб-документа?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
		ВыборФайла();
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла()
	
	ПараметрыДиалога = ПолучитьПараметрыДляДиалогаВыбораФайла();
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = ПараметрыДиалога.Каталог;
	Диалог.Фильтр  = ПараметрыДиалога.Фильтр;
	Диалог.ПолноеИмяФайла = ПараметрыДиалога.ИмяФайла;
	
	Если Диалог.Выбрать() Тогда
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект),, Диалог.ПолноеИмяФайла, Ложь, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
	Если Результат Тогда
		Файл = Новый Файл(ВыбранноеИмяФайла);
		ПараметрыДляТаблицы = Новый Структура;
		ПараметрыДляТаблицы.Вставить("Адрес", Адрес);
		ПараметрыДляТаблицы.Вставить("ИмяФайла", Файл.ПолноеИмя);
		ПараметрыДляТаблицы.Вставить("ДатаФайла", Файл.ПолучитьВремяИзменения());
		ЗаписатьДанныеИзФайлаНаСервере(ПараметрыДляТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеИзФайлаНаСервере(ПараметрыДляТаблицы)
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(ПараметрыДляТаблицы.Адрес).Записать(ИмяФайла);
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.ОткрытьФайл(ИмяФайла, "windows-1251");
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	ЧтениеHTML.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	СписокТаблиц = ПолучитьТаблицыИзHTML(ДокументHTML.ЭлементДокумента);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	КлючевыеКолонки = Новый Структура;
	
	Если СписокТаблиц.Свойство("thead") Тогда //-= если есть описание колонок
		
		Номер = 0;
		Для Каждого Массив Из СписокТаблиц.thead Цикл
			Для Каждого Имя Из Массив Цикл
				
				ТаблицаДанных.Колонки.Добавить("к"+XMLСтрока(Номер)+"_"+СтрЗаменить(Имя, " ", "_"),, Имя);
				
				Название = нрег(СтрЗаменить(Имя, " ", ""));
				Если СтрНайти(Название, "гарном") > 0 Тогда
					КлючевыеКолонки.Вставить("ГарНомер", Номер);
					
				ИначеЕсли СтрНайти(Название, "класс") > 0 Тогда
					КлючевыеКолонки.Вставить("Класс", Номер);
					
				ИначеЕсли СтрНайти(Название, "прогноз") > 0 Тогда
					Если Не КлючевыеКолонки.Свойство("Прогноз") Тогда
						КлючевыеКолонки.Вставить("Прогноз", Новый Массив);
						КлючевыеКолонки.Вставить("Дней", Новый Массив);
					КонецЕсли;
					КлючевыеКолонки.Прогноз.Добавить(Номер);
					КлючевыеКолонки.Дней.Добавить(Номер+Массив.Количество());
					
				КонецЕсли;
				
				Номер = Номер+1;
				
			КонецЦикла;
		КонецЦикла;
		
		ВысотаДанных = СписокТаблиц.thead.Количество();
		
		Если СписокТаблиц.Свойство("tbody") Тогда //-= если есть данные
			
			МассивДанных = СписокТаблиц.tbody;
			Для й=0 По МассивДанных.ВГраница() Цикл
				
				Если й%ВысотаДанных = 0 Тогда
					СтрокаТаблицы = ТаблицаДанных.Добавить();
					Номер = 0;
				КонецЕсли;
				
				Для Каждого Значение Из МассивДанных[й] Цикл
					СтрокаТаблицы[Номер] = Значение;
					Номер = Номер+1;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Дата" , Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ТаблицаСобытий.Колонки.Добавить("Класс", Новый ОписаниеТипов("Число"));
	ТаблицаСобытий.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ТаблицаСобытий.Колонки.Добавить("Дней" , Новый ОписаниеТипов("Число"));
	ТаблицаСобытий.Колонки.Добавить("Сорт" , Новый ОписаниеТипов("Строка"));
	
	Колво = КлючевыеКолонки.Прогноз.ВГраница();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Для й=0 По Колво Цикл
			
			ДатаПрогноза  = СтрокаТаблицы[КлючевыеКолонки.Прогноз[й]];
			ГаражныйНомер = СтрокаТаблицы[КлючевыеКолонки.ГарНомер];
			ДнейРемонта   = СтрокаТаблицы[КлючевыеКолонки.Дней[й]];
			КлассТС       = СтрокаТаблицы[КлючевыеКолонки.Класс];
			
			Попытка
				ДатаПрогноза = Дата(СтрЗаменить(ДатаПрогноза, "-", ""));
			Исключение
				Продолжить;
			КонецПопытки;
			
			Попытка
				ДнейРемонта = Число(ДнейРемонта);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Представление = СтрШаблон("%1 / %2 д. / %3 кл.", ГаражныйНомер, ДнейРемонта, КлассТС);
		
		    Запись = ТаблицаСобытий.Добавить();
			Запись.Дата  = ДатаПрогноза;
			Запись.Текст = Представление;
			Запись.Класс = КлассТС;
			Запись.Номер = ГаражныйНомер;
			Запись.Дней  = ДнейРемонта;
			Запись.Сорт  = Прав("0000000000"+ГаражныйНомер, 10);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаСобытий.Сортировать("Дата, Сорт");
	
	ДатаЗагрузки = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.АналитикаРемонтовТС.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить(, "Период, ТС");
	
	ДобавилиГаражный = "";
	
	Для Каждого Событие Из ТаблицаСобытий Цикл 
		Если Событие.Номер <> ДобавилиГаражный Тогда
			
			ТС = РегистрыСведений.АналитикаРемонтовТС.ПолучитьТС(Событие.Номер);
			
			Если ТС.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("Период, ТС", Событие.Дата, ТС); 
			
			Если ТаблицаНабораЗаписей.НайтиСтроки(Отбор).Количество()=0 Тогда
				
				Запись = НаборЗаписей.Добавить();
				Запись.Период = Событие.Дата;
				Запись.ТС = ТС;
				Запись.ГаражныйНомер = Событие.Номер;
				Запись.ДнейРемонта   = Событие.Дней;
				Запись.КлассТС       = Событие.Класс;
				Запись.ИмяФайла      = ПараметрыДляТаблицы.ИмяФайла;
				Запись.ДатаФайла     = ПараметрыДляТаблицы.ДатаФайла;
				Запись.ДатаЗагрузки  = ДатаЗагрузки;
				
				ДобавилиГаражный = Событие.Номер;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ОбновитьДанныеПланировщика();
	ОбновитьДанныеТаблицыПоломок();
	
КонецФункции

&НаСервере
Процедура ОбновитьНадписьПериода()
	
	Элементы.ВыборПериода.Заголовок = "Период"+ЗаПеридСтрокойГода();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПланировщика()
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоНедели(Планировщик.НачалоПериодаОтображения), КонецНедели(Планировщик.КонецПериодаОтображения));
	
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	
	МассивЦветов = РегистрыСведений.АналитикаРемонтовТС.ПолучитьМассивЦветовФона(); 
	
	Выборка = РегистрыСведений.АналитикаРемонтовТС.Выбрать(Планировщик.НачалоПериодаОтображения, Планировщик.КонецПериодаОтображения);
	
	Пока Выборка.Следующий() Цикл 
		
		НовыйЭлемент = ЭлементыПланировщика.Добавить(НачалоДня(Выборка.Период), КонецДня(Выборка.Период));
		НовыйЭлемент.Текст = СтрШаблон("%1 / %2 д. / %3 кл.", Выборка.ГаражныйНомер, Выборка.ДнейРемонта, Выборка.КлассТС);
		Попытка
			НовыйЭлемент.ЦветФона = МассивЦветов[Выборка.КлассТС-1];
		Исключение КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблицыПоломок()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АналитикаРемонтовТС.Период КАК ДатаПоломки,
	|	АналитикаРемонтовТС.ТС КАК ТС,
	|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
	|	АналитикаРемонтовТС.ТС.ГаражныйНомер КАК ГаражныйНомер,
	|	АналитикаРемонтовТС.ТС.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.АналитикаРемонтовТС КАК АналитикаРемонтовТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(КОНЕЦПЕРИОДА(&конДата, ДЕНЬ), ) КАК уатМестонахождениеТССрезПоследних
	|		ПО АналитикаРемонтовТС.ТС = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	АналитикаРемонтовТС.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ)
	|	И АналитикаРемонтовТС.ДнейРемонта >= &ДнейРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатМестонахождениеТССрезПоследних.Подразделение.Наименование,
	|	АналитикаРемонтовТС.ГаражныйНомер
	|ИТОГИ ПО
	|	Подразделение");
	
	Запрос.УстановитьПараметр("НачДата", Планировщик.НачалоПериодаОтображения);
	Запрос.УстановитьПараметр("КонДата", Планировщик.КонецПериодаОтображения );
	Запрос.УстановитьПараметр("ДнейРемонта", ПорогКолвоДней);
	
	Результат = Запрос.Выполнить();
	
	//ТаблицаПоломок.Загрузить(Результат.Выгрузить());
	
	ТабличныйДокумент.Очистить();
	
	Макет = РегистрыСведений.АналитикаРемонтовТС.ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = "Прогнозируемые "+нрег(Элементы.СтраницаТаблицыПоломок.Заголовок)+ЗаПеридСтрокойГода();
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПодразделения = Макет.ПолучитьОбласть("Подразделение");
	ОбластьСтрокаЗаписи  = Макет.ПолучитьОбласть("СтрокаЗаписи" );
	
	ВыборкаПодразделения = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока ВыборкаПодразделения.Следующий() Цикл
		
		ОбластьПодразделения.Параметры.Заполнить(ВыборкаПодразделения);
		ТабличныйДокумент.Вывести(ОбластьПодразделения);
		
		ТабличныйДокумент.НачатьГруппуСтрок("Подразделение");
		
		Выборка = ВыборкаПодразделения.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьСтрокаЗаписи.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьСтрокаЗаписи);
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицыИзHTML(Источник, СписокТаблиц=Неопределено)
	
	Если СписокТаблиц = Неопределено Тогда 
		СписокТаблиц = Новый Структура;
	КонецЕсли;
	
	Для Каждого Элемент Из Источник.ДочерниеУзлы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ЭлементТаблицаHTML") И Элемент.ЕстьДочерниеУзлы() Тогда
			
			Для Каждого ЭлементТаблица Из Элемент.ДочерниеУзлы Цикл
				
				МассивСток = Новый Массив;
				
				Если ТипЗнч(ЭлементТаблица) = Тип("ЭлементHTML") И ЭлементТаблица.ЕстьДочерниеУзлы() Тогда
					
					Для Каждого СтрокаТаблицы Из ЭлементТаблица.ДочерниеУзлы Цикл
						
						ДанныеСтроки = Новый Массив;
						
						Для Каждого Ячейка Из СтрокаТаблицы.ДочерниеУзлы Цикл
							Если ТипЗнч(Ячейка) <> Тип("ТекстDOM") Тогда
								ДанныеСтроки.Добавить(Ячейка.ТекстовоеСодержимое);
							КонецЕсли;
						КонецЦикла;
						
						МассивСток.Добавить(ДанныеСтроки);
						
					КонецЦикла;
				КонецЕсли;
				
				СписокТаблиц.Вставить(ЭлементТаблица.ИмяЭлемента, МассивСток);
				
			КонецЦикла;
			
		ИначеЕсли Элемент.ЕстьДочерниеУзлы() Тогда //-= если не таблица, может есть вложенная
			ПолучитьТаблицыИзHTML(Элемент, СписокТаблиц);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокТаблиц;
	
КонецФункции

#Область ВместоТолькоПросмотр

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличныйДокументДляПочты

&НаСервереБезКонтекста
Процедура ВывестиЗаголовокНедели(Таблица, НомерСтроки, НачалоНедели, ФорматнаяСтрока)
	
	ЛинияСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для ДниНедели = 1 По 7 Цикл
		
		ОбластьТаблицы = Таблица.Область(НомерСтроки, ДниНедели);
		ОбластьТаблицы.ГраницаСверху = ЛинияСплошная;
		ОбластьТаблицы.ГраницаСлева  = ЛинияСплошная;
		ОбластьТаблицы.ГраницаСнизу  = ЛинияСплошная;
		ОбластьТаблицы.ГраницаСправа = ЛинияСплошная;
		
		ОбластьТаблицы.Текст = Формат(НачалоНедели+(ДниНедели-1)*86400, ФорматнаяСтрока);
		ОбластьТаблицы.Шрифт = Новый Шрифт(,, Истина);
		ОбластьТаблицы.ШиринаКолонки = 20;
		ОбластьТаблицы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиЛинииТаблицы(Таблица, НачалоСтрок, Количество)
	
	ЛинияСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияТочечная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная);
	
	Для НомерСтроки = 1 По Количество Цикл
		Для ДниНедели = 1 По 7 Цикл
			ОбластьТаблицы = Таблица.Область(НачалоСтрок+НомерСтроки, ДниНедели);
			ОбластьТаблицы.ГраницаСверху = ?(НомерСтроки=1, ЛинияСплошная, ЛинияТочечная);
			ОбластьТаблицы.ГраницаСлева  = ЛинияСплошная;
			ОбластьТаблицы.ГраницаСнизу  = ?(НомерСтроки=Количество, ЛинияСплошная, ЛинияТочечная);
			ОбластьТаблицы.ГраницаСправа = ЛинияСплошная;
		КонецЦикла;
	КонецЦикла;
	
	Если Количество > 0 Тогда
		ОбластьТаблицы = Таблица.Область(НачалоСтрок+Количество+1, 1);
		ОбластьТаблицы.ВысотаСтроки = 5;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиЗаписьТаблица(Таблица, НомерСтроки, НомерКолонки, Элемент)
	
	ОбластьТаблицы = Таблица.Область(НомерСтроки, НомерКолонки);
	
	ОбластьТаблицы.Текст = Элемент.Текст;
	ОбластьТаблицы.ЦветФона = Элемент.ЦветФона;
	ОбластьТаблицы.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПланировщика()
	
	ОдинДень = 24*60*60;
	
	НачДата = НачалоМесяца(Планировщик.НачалоПериодаОтображения);
	ТекДата = НачДата;
	КонДата = ДобавитьМесяц(НачДата, 1);
	                       
	НомерСтрокиЗаголовка = 3;
	НомерСтроки = 0;
	НомерКолонки = 8;
	ВысотаДанных = -1;
	
	ФорматнаяСтрока = Планировщик.ШкалаВремени.Элементы[0].Формат;
	
	Таблица = Новый ТабличныйДокумент;
	Таблица.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Таблица.АвтоМасштаб = Истина;
	
	ПланировщикЭлементы = Планировщик.Элементы;
	Индекс = 0;
	
	ОбластьЗаголовка = Таблица.Область(1, 1);
	ОбластьЗаголовка.Текст = Элементы.СтраницаПланировщика.Заголовок+" транспортных средств "+Организация.Наименование+ЗаПеридСтрокойГода();
	ОбластьЗаголовка.Шрифт = Новый Шрифт(, 10, Истина);
	ОбластьЗаголовка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьЗаголовка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Таблица.Область(1, 1, 1, 7).ПоВыделеннымКолонкам = Истина;
	
	Пока ТекДата < КонДата Цикл
		
		Если Индекс = ПланировщикЭлементы.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		Если НомерКолонки >= 8 Тогда		// если вышли за пределы недели
			ВывестиЛинииТаблицы(Таблица, НомерСтрокиЗаголовка, ВысотаДанных-1);
			НомерСтрокиЗаголовка = НомерСтрокиЗаголовка+ВысотаДанных+1;
			ВывестиЗаголовокНедели(Таблица, НомерСтрокиЗаголовка, НачалоНедели(ТекДата), ФорматнаяСтрока);
			ВысотаДанных = 0;
			НомерКолонки = ДеньНедели(ТекДата);
		КонецЕсли;
		
		Элемент = ПланировщикЭлементы.Получить(Индекс);
		Если Элемент.Начало = ТекДата Тогда			// выводим вниз
			НомерСтроки = НомерСтроки+1;
			ВывестиЗаписьТаблица(Таблица, НомерСтрокиЗаголовка+НомерСтроки, НомерКолонки, Новый Структура("Текст, ЦветФона", Элемент.Текст, Элемент.ЦветФона));
			Индекс = Индекс+1;
		ИначеЕсли Элемент.Начало >= КонДата Тогда	// попали элементы из другого периода
			Прервать;
		Иначе										// если другая дата - сдвигаемся вправо
			НомерКолонки = НомерКолонки+1;
			ВысотаДанных = Макс(ВысотаДанных, НомерСтроки+1);
			НомерСтроки  = 0;
			ТекДата = ТекДата+ОдинДень;
		КонецЕсли;
		
	КонецЦикла;
	
	ВывестиЛинииТаблицы(Таблица, НомерСтрокиЗаголовка, ВысотаДанных);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область СменаПериода
&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПараметрыПериода = Новый Структура("Значение", Планировщик.НачалоПериодаОтображения);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ВыборПериода"), ПараметрыПериода, ТекущийЭлемент,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> Планировщик.НачалоПериодаОтображения Тогда
		Планировщик.НачалоПериодаОтображения = ВыбранноеЗначение;
		Планировщик.КонецПериодаОтображения  = КонецМесяца(ВыбранноеЗначение);
		ОбновитьНадписьПериода();
		ОбновитьДанныеПланировщика();
		ОбновитьДанныеТаблицыПоломок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПочты

&НаСервереБезКонтекста
Функция ДвоичныеДанные(Таблица)
	
	Поток = Новый ПотокВПамяти();
	Таблица.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

&НаСервере
Функция ПолучитьСписокПолучателей()
	
	ТаблицаСоответствий = ПолучитьТаблицуМакета("Соответствие");
	ТаблицаПолучатели   = ПолучитьТаблицуМакета("Получатели"  );
	
	ТаблицаСоответствий = ПолучитьТаблицуМакета("Соответствие");
	ТаблицаПолучатели   = ПолучитьТаблицуМакета("Получатели"  );
	
	СтрокаПоиска = ПолучитьЗначениеОрганизацииТаблицыМакета(Организация.ИНН, ТаблицаСоответствий, "Организация");
	Если СтрокаПоиска = Неопределено Тогда
		Сообщить("Не найдена организация по ИНН в соответствии");
		Возврат Неопределено;
	Иначе
		СтрокаПоиска = нрег(СокрЛП(СтрокаПоиска));
	КонецЕсли;
	
	Адреса = Новый СписокЗначений;
	
	ПолучитьАдрес = Ложь;
	ПроверитьКлюч = Истина;
	
	Для НомерСтроки = 1 По ТаблицаПолучатели.ВысотаТаблицы Цикл
		
		Ключ = нрег(СокрЛП(ТаблицаПолучатели.Область(НомерСтроки, 1).Текст));
		
		Если ПустаяСтрока(Ключ) Тогда
			
			ПолучитьАдрес = Ложь;
			ПроверитьКлюч = Истина;
			
		ИначеЕсли ПолучитьАдрес Тогда
			
			ПочтовыйАдрес = СокрЛП(ТаблицаПолучатели.Область(НомерСтроки, 3).Текст);
			Если Не ПустаяСтрока(ПочтовыйАдрес) И СтрНайти(ПочтовыйАдрес, "@") > 0 Тогда
			 	Адреса.Добавить(ПочтовыйАдрес, СокрЛП(ТаблицаПолучатели.Область(НомерСтроки, 2).Текст)+" <"+ПочтовыйАдрес+">", Истина);
			КонецЕсли;
			
		ИначеЕсли ПроверитьКлюч Тогда
			
			ПроверитьКлюч = Ложь;
			Если Ключ = СтрокаПоиска Тогда
				ПолучитьАдрес = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Процедура ОтправитьНаПочтуНаСервере(Адреса)
	
	Соединение = Новый HTTPСоединение("azure1c.westeurope.cloudapp.azure.com", 80, , , , Неопределено);
	Запрос = Новый HTTPЗапрос("/ServiceMP/hs/ksAPI/SendMail");
	
	Таблицы = Новый Соответствие;
	Таблицы.Вставить("Календарь_"+СтрЗаменить(ПериодСтрокой(), " ", "_")+".pdf", ДвоичныеДанные(ПолучитьТаблицуПланировщика()));
	Таблицы.Вставить(СтрЗаменить(Элементы.СтраницаТаблицыПоломок.Заголовок, " ", "_")+".pdf", ДвоичныеДанные(ТабличныйДокумент));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("емайл", Адреса);
	СтруктураПараметров.Вставить("Заголовок", Элементы.СтраницаПланировщика.Заголовок+ЗаПеридСтрокойГода());
	СтруктураПараметров.Вставить("Текст", Элементы.СтраницаПланировщика.Заголовок+" транспортных средств "+Организация.Наименование+ЗаПеридСтрокойГода());
	СтруктураПараметров.Вставить("ДвоичныеДанныеФайла", Таблицы);
	
	Хранилище = Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(5));
	Запрос.УстановитьТелоИзСтроки(XMLСтрока(Хранилище));
	
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	Если ТипЗнч(Результат) = Тип("HTTPОтвет") Тогда
		Если Результат.КодСостояния = 200 Тогда
			Сообщить("Успешно отправлено на адреса:"+Символы.ПС+СтрСоединить(Адреса, Символы.ПС));
		Иначе
			Сообщить("Ошибка отправки почты: "+Результат.ПолучитьТелоКакСтроку());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПочту(Команда)
	
	Список = ПолучитьСписокПолучателей();
	Оповещение = Новый ОписаниеОповещения("УстановитьОтметкуЭлементовСпискаЗавершение", ЭтотОбъект);
	Список.ПоказатьОтметкуЭлементов(Оповещение, "Получатели "+Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуЭлементовСпискаЗавершение(СписокАдресов, ДополнительныеПараметры) Экспорт 
	
	Если СписокАдресов <> Неопределено Тогда
		
		Адреса = Новый Массив;
		
		Для Каждого Адрес Из СписокАдресов Цикл 
			Если Адрес.Пометка Тогда
				Адреса.Добавить(Адрес.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если Адреса.Количество() > 0 Тогда
			ОтправитьНаПочтуНаСервере(Адреса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьСтраниц

&НаСервере
Функция ПолучитьТаблицуТабличногоДокумента()
	
	Таблица = Новый ТабличныйДокумент;
	Таблица.Вывести(ТабличныйДокумент);
	
	Возврат Таблица;
	
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаПланировщика Тогда
		Таблица = ПолучитьТаблицуПланировщика();
		ЗаголовокТаблицы = Элементы.СтраницаПланировщика.Заголовок+ЗаПеридСтрокойГода();
	Иначе
		Таблица = ПолучитьТаблицуТабличногоДокумента();
		ЗаголовокТаблицы = Элементы.СтраницаТаблицыПоломок.Заголовок+ЗаПеридСтрокойГода();
	КонецЕсли;
	
	Таблица.ОтображатьСетку = Ложь;
	Таблица.ОтображатьЗаголовки = Ложь;
	Таблица.Показать(ЗаголовокТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область СменаПорогаКоличестваДнейРемонтов
&НаКлиенте
Процедура ВыбратьКолвоДнейРемонта(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьКолвоДнейРемонтаЗавершение", ЭтотОбъект);
	ПоказатьВводЧисла(Оповещение, ПорогКолвоДней, "Ремнты от скольки дней показывать?", 2, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКолвоДнейРемонтаЗавершение(Колво, ДополнительныеПараметры) Экспорт 
	
	Если Колво <> Неопределено Тогда
		Если ПорогКолвоДней <> Колво И Колво > 0 Тогда
			ПорогКолвоДней = Колво;
			Элементы.СтраницаТаблицыПоломок.Заголовок = "Ремонты от "+ПорогКолвоДней+" дней";
			ОбновитьДанныеТаблицыПоломок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

