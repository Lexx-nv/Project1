Функция Печать(ВариантОтчета, фДата, фМестоРаботы, ТЗРезультат, МасКолонн, фРежимНачальникАвтоколонны, ВремяС, ВремяПо, Платформа) Экспорт
	
	ТЗРезультат.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
    ТабДокумент.АвтоМасштаб = Истина;
	
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

	Макет = РегистрыСведений.Разнарядка.ПолучитьМакет(ВариантОтчета);
	
	Если ВариантОтчета = "ТиповаяРазнорядка" Тогда
		//Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		ТабДокумент.Вывести(Область);
		
		//Место
		Если ЗначениеЗаполнено(фМестоРаботы) Тогда
			Область = Макет.ПолучитьОбласть("Место");
			Область.Параметры["Место"] = фМестоРаботы;
			ТабДокумент.Вывести(Область);		
		КонецЕсли;
		
		//Колонна
		Область = Макет.ПолучитьОбласть("Колонна");
		Если МасКолонн.Количество() = 0 Тогда
			ТЗКолонн = ТЗРезультат.Скопировать();
			ТЗКолонн.Свернуть("Колонна");
			ТЗКолонн.Сортировать("Колонна Возр");
			МасКолонн = ТЗКолонн.ВыгрузитьКолонку("Колонна");
		КонецЕсли;	
		Для каждого Колонна Из МасКолонн Цикл
			Если НЕ ЗначениеЗаполнено(Колонна) Тогда Продолжить; КонецЕсли; 
			Область.Параметры.Колонна = ?(Область.Параметры.Колонна = Неопределено, "" + Колонна, Область.Параметры.Колонна + "; " + Колонна);
		КонецЦикла;
		ТабДокумент.Вывести(Область);
		
		//Шапка
		Область = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(Область);
		
		//Основная ТЧ
		ТЗТипТС = ТЗРезультат.Скопировать();
		ТЗТипТС.Свернуть("ТипТС");
		Сч = 1;
		Для каждого СтрокаТипТС Из ТЗТипТС Цикл
			Область = Макет.ПолучитьОбласть("ТипТС");
			Область.Параметры["ТипТСПредставление"] = СтрокаТипТС.ТипТС;
			ТабДокумент.Вывести(Область);
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТипТС", СтрокаТипТС.ТипТС);
			СтрокиПоТипу = ТЗРезультат.НайтиСтроки(Отбор);
			
			Для каждого СтрокаТип Из СтрокиПоТипу Цикл
				Если Не СтрокаТип.ВтораяСмена Тогда
					
					Если ЗначениеЗаполнено(СтрокаТип.СтатусыОтказа) Тогда
						Если фРежимНачальникАвтоколонны Тогда
							Область.Параметры.Ном = Сч;
							Область = Макет.ПолучитьОбласть("Строка");
							Область.Параметры.ГарНомерТС = СтрокаТип.ГарНомерТС;
							Область.Параметры.ТСПредставление = СтрокаТип.ТСПредставление;
							Область.Параметры.ГосНомерТС = СтрокаТип.ГосНомерТС;
							ТабДокумент.Вывести(Область);
							Сч = Сч + 1;
						КонецЕсли;		
						Продолжить;	
					КонецЕсли;
					
					Область = Макет.ПолучитьОбласть("Строка");
					Область.Параметры.Заполнить(СтрокаТип);
					Область.Параметры.Ном = Сч;
					Область.Параметры.Дата = Формат(фДата, "ДЛФ=Д");
					Область.Параметры.ВремяПодачи = Формат(СтрокаТип.ВремяПодачи, "ДФ=ЧЧ:мм");
					
					//Ищем вторую смена
					Отбор = Новый Структура();
					Отбор.Вставить("ТС", СтрокаТип.ТС);
					Отбор.Вставить("ВтораяСмена", Истина);
					СтрокиПоТипуВтораяСмена = ТЗРезультат.НайтиСтроки(Отбор);
					Если СтрокиПоТипуВтораяСмена.Количество() > 0 Тогда
						Если СтрокаТип.ЦехМаршрут <> СтрокиПоТипуВтораяСмена[0].ЦехМаршрут 
							И СтрокаТип.МестоОказанияУслуг <> СтрокиПоТипуВтораяСмена[0].МестоОказанияУслуг Тогда
							Область.Параметры.ЦехМаршрут2 = СтрокиПоТипуВтораяСмена[0].ЦехМаршрут;
							Область.Параметры.МестоОказанияУслуг2 = СтрокиПоТипуВтораяСмена[0].МестоОказанияУслуг;
						КонецЕсли;		
						Если СтрокаТип.Ответственный <> СтрокиПоТипуВтораяСмена[0].Ответственный 
							И СтрокаТип.Комментарий <> СтрокиПоТипуВтораяСмена[0].Комментарий Тогда
							Область.Параметры.Ответственный2 = СтрокиПоТипуВтораяСмена[0].Ответственный;
							Область.Параметры.Комментарий2 = СтрокиПоТипуВтораяСмена[0].Комментарий;
						КонецЕсли;		
						Область.Параметры.ТабНомерВодителя2 = СтрокиПоТипуВтораяСмена[0].ТабНомерВодителя;
						Область.Параметры.Водитель2Представление = СтрокиПоТипуВтораяСмена[0].ВодительПредставление;
						Область.Параметры.ВремяПодачи2 = Формат(СтрокиПоТипуВтораяСмена[0].ВремяПодачи, "ДФ=ЧЧ:мм");
					КонецЕсли; 				
					
					ТабДокумент.Вывести(Область);
					Сч = Сч + 1;
				КонецЕсли;			
			КонецЦикла;
		КонецЦикла;                        	
	ИначеЕсли ВариантОтчета = "СменныйСуточныйПлан" Тогда
		
		//Заголовок
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.НазваниеОрганизации = СокрлП(Организация.НаименованиеПолное);
		Область.Параметры.ДатаДок = Формат(фДата, "ДЛФ=Д");
		
		//Колонна
		Если МасКолонн.Количество() = 0 Тогда
			ТЗКолонн = ТЗРезультат.Скопировать();
			ТЗКолонн.Свернуть("Колонна");
			ТЗКолонн.Сортировать("Колонна Возр");
			МасКолонн = ТЗКолонн.ВыгрузитьКолонку("Колонна");
		КонецЕсли;	
		Для каждого Колонна Из МасКолонн Цикл
			Если НЕ ЗначениеЗаполнено(Колонна) Тогда Продолжить; КонецЕсли; 
			Область.Параметры.Колонна = ?(Область.Параметры.Колонна = Неопределено, "" + Колонна, Область.Параметры.Колонна + "; " + Колонна);
		КонецЦикла;
		ТабДокумент.Вывести(Область);
		
		ТЗРезультат.Сортировать("ЦехМаршрутЗаполнен Убыв, ГарНомерТС Возр, ВремяПодачи Возр");	//сортировка по ГарНомеру для заполненных и незаполненных раздельно
				
		Ном = 1;
		пТС = Неопределено;
		пВодитель = Неопределено;
		ВысТаб = 0;
		ВысТабВодитель = 0;
		мШрифтВодитель = Новый Шрифт("Arial", 16);
		мВодительФИО = "";
		НольДата = Дата(1,1,1);
		Для каждого СтрокаТЗ Из ТЗРезультат Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТС) Тогда
				Продолжить;
			КонецЕсли;	
			
			Область = Макет.ПолучитьОбласть("Строка0");
			Область.Параметры.Ном = Ном;
			Область.Параметры.Заполнить(СтрокаТЗ);
			Область.Параметры.Начало = Формат(СтрокаТЗ.ВремяПодачи, "ДФ=ЧЧ:мм");
			Область.Параметры.Водитель = ?(ЗначениеЗаполнено(СтрокаТЗ.Водитель), уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СтрокаТЗ.Водитель), "");
			
			Если СтрокаТЗ.ЧасыР = НольДата И СтрокаТЗ.ЧасыРВод <> НольДата Тогда
				Область.Параметры.ЧасыР = Формат(СтрокаТЗ.ЧасыРВод, "ДФ=Ч") + " В";
			ИначеЕсли СтрокаТЗ.ЧасыР <> НольДата И СтрокаТЗ.ЧасыР <> null Тогда
				Область.Параметры.ЧасыР = Формат(СтрокаТЗ.ЧасыР, "ДФ=Ч") + " р";
			КонецЕсли;
			ТабДокумент.Вывести(Область);
			
			Если (пТС = СтрокаТЗ.ТС И СтрокаТЗ.ТС <> Справочники.уатТС.ПустаяСсылка()) Тогда
				ТабДокумент.Область(высТаб, 1, ТабДокумент.ВысотаТаблицы, 1).Объединить();
				ТабДокумент.Область(высТаб, 7, ТабДокумент.ВысотаТаблицы, 7).Объединить();
				ТабДокумент.Область(высТаб, 8, ТабДокумент.ВысотаТаблицы, 8).Объединить();
			Иначе
				пТс = СтрокаТЗ.ТС;
				Ном = Ном + 1;
				ВысТаб = ТабДокумент.ВысотаТаблицы;
			КонецЕсли;
			
			Если (пВодитель = СтрокаТЗ.Водитель И СтрокаТЗ.Водитель <> Справочники.уатСотрудники.ПустаяСсылка()) Тогда
				мОбластьПримечание = ТабДокумент.Область(ВысТабВодитель, 14, ТабДокумент.ВысотаТаблицы, 16);
				мОбластьПримечание.Объединить();
				мОбластьПримечание.Текст = мВодительФИО;
				мОбластьПримечание.Шрифт = мШрифтВодитель;
			Иначе
				пВодитель = СтрокаТЗ.Водитель;
				мВодительФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СтрокаТЗ.Водитель);
				ВысТабВодитель = ТабДокумент.ВысотаТаблицы;
			КонецЕсли;
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Область);
		
		ТабДокумент.ПовторятьПриПечатиСтроки = ТабДокумент.Область(6,,7,);
		
	ИначеЕсли ВариантОтчета = "РазнярядкаПоЗаказчикам" Тогда
		
		//Заголовок
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.НазваниеОрганизации = СокрлП(Организация.НаименованиеПолное);
		Область.Параметры.ДатаДок = Формат(фДата, "ДЛФ=Д");
		Область.Параметры.ВремяС = Формат(ВремяС, "ДФ=ЧЧ:мм");
		Область.Параметры.ВремяПо = Формат(ВремяПо, "ДФ=ЧЧ:мм");
		ТабДокумент.Вывести(Область);
		
		//ТЗРезультат.Сортировать("ЦехМаршрутРодитель Убыв, ЦехМаршрутНаименование Возр, ГарНомерТС Возр, ВремяПодачи Возр");
		ТЗРезультат.Сортировать("Контрагент, ЦехМаршрутРодитель, Платформа, Стоянка, ЦехМаршрутНаименование, ГарНомерТС Возр, ВремяПодачи Возр");
		
		ТЗКопия = ТЗРезультат.Скопировать();
		ТЗКопия.Очистить();
		
		Для каждого СтрокаТЗ Из ТЗРезультат Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТС) Тогда
				Продолжить;
			КонецЕсли;
			Если Платформа И (НЕ ЗначениеЗаполнено(СтрокаТЗ.Платформа) ИЛИ СтрокаТЗ.Платформа = "0") Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТЗ.ВремяПодачи = Null Тогда
				НоваяСтрока = ТЗКопия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			ИначеЕсли Час(СтрокаТЗ.ВремяПодачи) >= Час(ВремяС) И Час(СтрокаТЗ.ВремяПодачи) <= Час(ВремяПо) И ЗначениеЗаполнено(СтрокаТЗ.ТС) Тогда
				НоваяСтрока = ТЗКопия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			КонецЕсли;	
		КонецЦикла;
		
		ТЗКонтрагент = ТЗКопия.Скопировать();
		ТЗКонтрагент.Свернуть("Контрагент");
		
		Для каждого СтрокаКонтрагент Из ТЗКонтрагент Цикл
			// + Алексей 30.03.2020, просьба Евгении Владимировны Солодовой
			Если Не ЗначениеЗаполнено(СтрокаКонтрагент.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			// - Алексей
			
			Отбор = Новый Структура();
			Отбор.Вставить("Контрагент", СтрокаКонтрагент.Контрагент);
			СтрокиПоКонтрагент = ТЗКопия.НайтиСтроки(Отбор);
			
			
			Область = Макет.ПолучитьОбласть("Зкз");
			Область.Параметры.Заполнить(СтрокаКонтрагент);
			ТабДокумент.Вывести(Область);
			
			Ном = 1;
			Для каждого СтрокаТЗ Из СтрокиПоКонтрагент Цикл
				
				// + Алексей, вынесено в другой цикл
				//Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТС) Тогда
				//	Продолжить;
				//КонецЕсли;
				//
				//Если Платформа И (НЕ ЗначениеЗаполнено(СтрокаТЗ.Платформа) ИЛИ СтрокаТЗ.Платформа = "0") Тогда
				//	Продолжить;
				//КонецЕсли;
				
				Область = Макет.ПолучитьОбласть("Строка");
				Область.Параметры.Ном = Ном;
				Область.Параметры.Заполнить(СтрокаТЗ);
				Область.Параметры.Начало = Формат(СтрокаТЗ.ВремяПодачи, "ДФ=ЧЧ:мм");

				ТабДокумент.Вывести(Область);
				Ном = Ном + 1;
			КонецЦикла;	
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Область);
	ИначеЕсли ВариантОтчета = "ПоВсемКонтрагентам" Тогда
		// + Алексей - то же самое только без фильтра по времени
		//Заголовок
		Область = Макет.ПолучитьОбласть("Шапка");
		Область.Параметры.НазваниеОрганизации = СокрлП(Организация.НаименованиеПолное);
		Область.Параметры.ДатаДок = Формат(фДата, "ДЛФ=Д");
		ТабДокумент.Вывести(Область);
		
		ТЗРезультат.Сортировать("Контрагент, ЦехМаршрутРодитель, Платформа, Стоянка, ГарНомерТС Возр, ВремяПодачи Возр");
		//ТЗРезультат.Сортировать("Контрагент Убыв, ЦехМаршрутРодитель Убыв, ЦехМаршрутНаименование Возр, ГарНомерТС Возр, ВремяПодачи Возр");
		
		ТЗКопия = ТЗРезультат.Скопировать();
		ТЗКопия.Очистить();
		
		Для каждого СтрокаТЗ Из ТЗРезультат Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТС) Тогда
				Продолжить;
			КонецЕсли;
			Если Платформа И (НЕ ЗначениеЗаполнено(СтрокаТЗ.Платформа) ИЛИ СтрокаТЗ.Платформа = "0") Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТЗКопия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		
		
		ТЗКонтрагент = ТЗКопия.Скопировать();
		ТЗКонтрагент.Свернуть("Контрагент");
		
		Для каждого СтрокаКонтрагент Из ТЗКонтрагент Цикл
			// + Алексей 30.03.2020, просьба Евгении Владимировны Солодовой
			Если Не ЗначениеЗаполнено(СтрокаКонтрагент.Контрагент) Тогда
				Продолжить;
			КонецЕсли;
			// - Алексей
			
			Отбор = Новый Структура();
			Отбор.Вставить("Контрагент", СтрокаКонтрагент.Контрагент);
			СтрокиПоКонтрагент = ТЗКопия.НайтиСтроки(Отбор);
			
			Область = Макет.ПолучитьОбласть("Зкз");
			Область.Параметры.Заполнить(СтрокаКонтрагент);
			ТабДокумент.Вывести(Область);
			
			Ном = 1;
			Для каждого СтрокаТЗ Из СтрокиПоКонтрагент Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ТС) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Платформа И (НЕ ЗначениеЗаполнено(СтрокаТЗ.Платформа) ИЛИ СтрокаТЗ.Платформа = "0") Тогда
					Продолжить;
				КонецЕсли;
				
				Область = Макет.ПолучитьОбласть("Строка");
				Область.Параметры.Ном = Ном;
				Область.Параметры.Заполнить(СтрокаТЗ);
				Область.Параметры.Начало = Формат(СтрокаТЗ.ВремяПодачи, "ДФ=ЧЧ:мм");

				ТабДокумент.Вывести(Область);
				Ном = Ном + 1;
			КонецЦикла;	
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(Область);
	КонецЕсли;	
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	Возврат ТабДокумент;
	
КонецФункции	

Функция ПолучитьТекстЗапросаРазнарядка(пИмяВременнойТаблицы = "") Экспорт
	// если Не пПолныйЗапрос - этого блока не будет
	мТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМестонахождениеТС.ТС КАК ТС,	// 0 - Временная таблица, тоже считается
	|	уатМестонахождениеТС.Подразделение КАК Колонна
	|ПОМЕСТИТЬ ТипыТСИКолонны
	|ИЗ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаРазнарядки) КАК уатМестонахождениеТС
	|	ГДЕ уатМестонахождениеТС.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		И уатМестонахождениеТС.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		И НЕ уатМестонахождениеТС.Состояние.ЗапретитьВыпискуПЛ
	|		//И уатМестонахождениеТС.Состояние <> Значение(Справочник.уатСостояниеТС.Привлеченный)
	|		И (НЕ уатМестонахождениеТС.ТС.ТипТС.НеВыводитьВТабельТС)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ	// 1 ТС и Колонны, ограниченный списком колонн из МестаРаботы - для вывода Свободных ТС
	|	ТипыТСИКолонны.ТС,
	|	ТипыТСИКолонны.Колонна
	|ПОМЕСТИТЬ ТСПоМестуРаботы
	|ИЗ ТипыТСИКолонны КАК ТипыТСИКолонны
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.юкМестаРаботы.СписокПодразделений КАК МестаРаботы
	|	ПО МестаРаботы.Подразделение = ТипыТСИКолонны.Колонна И МестаРаботы.Ссылка = &МестоРаботы
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ	// 2 - СоответствиеТСКолоннам
	|	ТипыТСИКолонны.ТС КАК ТС,
	|	ТипыТСИКолонны.Колонна КАК Колонна
	|ИЗ ТипыТСИКолонны КАК ТипыТСИКолонны
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ	// 3 - Колонны различные
	|	ТипыТСИКолонны.Колонна КАК Колонна
	|ИЗ ТипыТСИКолонны КАК ТипыТСИКолонны
	|;
	|ВЫБРАТЬ // 4 - Отсторнированные лоты, движения которых не должны попадать как детальные строки регистра ДополнительныеСведенияЗаявок
	|ДополнительныеСведенияЗаявок.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота,
	|ДополнительныеСведенияЗаявок.ДокументЛота КАК ДокументЛота
	|ПОМЕСТИТЬ ОтсторнированныеДокументы
	|ИЗ РегистрНакопления.ДополнительныеСведенияЗаявок КАК ДополнительныеСведенияЗаявок
	|ГДЕ ДополнительныеСведенияЗаявок.ДокументЛота <> ЗНАЧЕНИЕ(Документ.юкЛот.ПустаяСсылка) И ДополнительныеСведенияЗаявок.ДокументЛота <> ДополнительныеСведенияЗаявок.Регистратор
	|;
	|ВЫБРАТЬ // 5 - Подзапрос 'предыдущих' дат данных (0 - если запрос 'не полный');с 28.04.20 в тестовом режиме только ОДНА дата по календарю, без ID - копирование строго с предыдущего дня в соответствии с правилом копирования (&КопироватьПоПризнакуВыходнойПраздник - выходные и праздники копируются с предыдущих выходных и празников если Истина; если Ложь - копируется предыдущий заполненный день разнарядки, даже если там только 1 запись)
	|	НАЧАЛОПЕРИОДА(МАКСИМУМ(Разнарядка.Дата), ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ КрайниеДатыПредыдущихДанныхРазнарядки
	|ИЗ РегистрСведений.Разнарядка КАК Разнарядка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК ДанныеКалендаряТекущегоДня
	|		ПО ДанныеКалендаряТекущегоДня.ДатаКалендаря = &ДатаРазнарядки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК Календарь
	|		ПО Календарь.ДатаКалендаря < &ДатаРазнарядки И Разнарядка.Дата = Календарь.ДатаКалендаря И ВЫБОР КОГДА (&НеКопироватьПоПризнакуВыходнойПраздник) ТОГДА ИСТИНА КОГДА ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) ИЛИ ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ИЛИ ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИНАЧЕ (Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Рабочий) ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Предпраздничный)) КОНЕЦ
	|ГДЕ Разнарядка.Дата < НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ)
	|;
	|ВЫБРАТЬ // 6 - Разнарядка (1 - если запрос 'не полный')
	|	ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.Контрагент ИНАЧЕ ЕСТЬNULL(СведенияРасширенные.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(РазнарядкаТекущая.ИзмененоПослеСогласования, ЛОЖЬ) КАК ИзмененоПослеСогласования,
	|	ЕСТЬNULL(СведенияРасширенные.ТипТС, ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)) КАК ТипТС,
	|	ЕСТЬNULL(СведенияРасширенные.ПозицияПП, """") КАК ПозицияПП,
	|	ВЫБОР	КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты)
	|			КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.ЦехаКонтрагента
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.ЦехаКонтрагента) ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦехаКонтрагента.ПустаяСсылка) КОНЕЦ КАК ЦехМаршрут,
	|	ВЫБОР	КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).ДополнительныйМаршрут
	|			ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ДопМаршрут,
	|	ВЫБОР	КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).ЦехКонтрагента
	|			КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.ЦехаКонтрагента
	|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.ЦехаКонтрагента) ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦехаКонтрагента.ПустаяСсылка) КОНЕЦ КАК Цех,
	|	ЕСТЬNULL(РазнарядкаТекущая.МестоОказанияУслуг, ЕСТЬNULL(РазнарядкаВчерашняя.МестоОказанияУслуг, """")) КАК МестоОказанияУслуг,
	|	СведенияРасширенные.ИсходныеДанные КАК ДанныеЗагрузки,
	|	ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") КАК ИдентификаторСтрокиЗаявки,
	|	ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, ЕСТЬNULL(РазнарядкаВчерашняя.ВремяПодачи, СведенияРасширенные.ВремяПодачи)) КОНЕЦ КАК ВремяПодачи,
	|	ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВозвращения КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВозвращения КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Окончание ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяВозврата, ЕСТЬNULL(РазнарядкаВчерашняя.ВремяВозврата, СведенияРасширенные.ВремяВозврата)) КОНЕЦ КАК ВремяВозврата,
	|	ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВозвращения КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА НАЧАЛОПЕРИОДА(ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВозвращения, ДЕНЬ) ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1) КОНЕЦ КАК ДатаВозврата,
	|	ВЫБОР КОГДА НЕ РазнарядкаТекущая.ЦехМаршрут ЕСТЬ NULL И РазнарядкаТекущая.ЦехМаршрут ССЫЛКА Справочник.уатМаршруты И РазнарядкаТекущая.ЦехМаршрут.Ответсвенный <> """" ТОГДА РазнарядкаТекущая.ЦехМаршрут.Ответсвенный КОГДА НЕ СведенияРасширенные.ЦехМаршрут ЕСТЬ NULL И СведенияРасширенные.ЦехМаршрут ССЫЛКА Справочник.уатМаршруты И СведенияРасширенные.ЦехМаршрут.Ответсвенный <> """" ТОГДА СведенияРасширенные.ЦехМаршрут.Ответсвенный ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Ответственный, ЕСТЬNULL(РазнарядкаВчерашняя.Ответственный, СведенияРасширенные.Ответственный)) КОНЕЦ КАК Ответственный,
	|	ЧАС(ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, ЕСТЬNULL(РазнарядкаВчерашняя.ВремяПодачи, СведенияРасширенные.ВремяПодачи)) КОНЕЦ) < 4 Или ЧАС(ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, ЕСТЬNULL(РазнарядкаВчерашняя.ВремяПодачи, СведенияРасширенные.ВремяПодачи)) КОНЕЦ) >= 16 КАК ВтораяСмена,
	|	ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.Смена, 0) = 0 ТОГДА ВЫБОР КОГДА ЧАС(ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, ЕСТЬNULL(РазнарядкаВчерашняя.ВремяПодачи, СведенияРасширенные.ВремяПодачи)) КОНЕЦ) < 4 Или ЧАС(ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, ЕСТЬNULL(РазнарядкаВчерашняя.ВремяПодачи, СведенияРасширенные.ВремяПодачи)) КОНЕЦ) >= 16 ТОГДА 2 ИНАЧЕ 1 КОНЕЦ ИНАЧЕ РазнарядкаТекущая.Смена КОНЕЦ КАК Смена,
	|	ПОДСТРОКА(ЕСТЬNULL(РазнарядкаТекущая.Комментарий, СведенияРасширенные.Комментарий), 1, 255) КАК Комментарий,
	|	ВЫБОР КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ (РазнарядкаТекущая.ТС ЕСТЬ NULL) ИЛИ РазнарядкаТекущая.ТС = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) КОНЕЦ КАК НеСогласованоВодительТС,
	|	ВЫБОР КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ИЛИ (ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) И (ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) КОНЕЦ КАК СтрокаНеЗаполнена,
	|	ВЫБОР	КОГДА НЕ ПечатьПЛ.ПутевойЛист ЕСТЬ NULL ТОГДА 3
	|			КОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL И ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ИЛИ (ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) И (ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) ТОГДА 0
	|			КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ИЛИ (ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) И (ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ИЛИ (ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)))) ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК ИндексКартинкиСтрокаЗаполнена,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ТОГДА ТСПоМестуРаботы.Колонна КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ИЛИ НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА (ТСИКолонны.Колонна) КОГДА ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)) ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЕСТЬNULL(РазнарядкаВчерашняя.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка))) КОНЕЦ КАК Колонна,
	|	ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.Водитель1 КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель1 КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) И ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) КОГДА ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, РазнарядкаВчерашняя.СтатусыОтказа.ПризнакНевыходаВодителя) ИНАЧЕ ЛОЖЬ КОНЕЦ ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЕСТЬNULL(РазнарядкаВчерашняя.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка))) КОНЕЦ КАК Водитель,
	|	ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL ТОГДА ПутевыеПоСвободнымТС.Ссылка.Водитель2 КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель2 КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) И ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) КОГДА ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя2, РазнарядкаВчерашняя.СтатусыОтказа.ПризнакНевыходаВодителя2) ИНАЧЕ ЛОЖЬ КОНЕЦ ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЕСТЬNULL(РазнарядкаВчерашняя.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка))) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЕСТЬNULL(РазнарядкаВчерашняя.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка))) КОНЕЦ КАК Водитель2,
	|	ВЫБОР КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель2.Код КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА """" КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) И ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА """" КОГДА ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя2, РазнарядкаВчерашняя.СтатусыОтказа.ПризнакНевыходаВодителя2) ИНАЧЕ ЛОЖЬ КОНЕЦ ТОГДА """" КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА """" ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель2.Код, ЕСТЬNULL(РазнарядкаВчерашняя.Водитель2, """")) КОНЕЦ КАК ТабНомерВодителя2,
	|	ВЫБОР КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель1.Код КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА """" КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) И ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА """" КОГДА ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, РазнарядкаВчерашняя.СтатусыОтказа.ПризнакНевыходаВодителя) ИНАЧЕ ЛОЖЬ КОНЕЦ ТОГДА """" КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.Водитель.Код, """") ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель.Код, ЕСТЬNULL(РазнарядкаВчерашняя.Водитель, """")) КОНЕЦ КАК ТабНомерВодителя,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ТОГДА ТСПоМестуРаботы.ТС.ГаражныйНомер КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ТранспортноеСредство.ГаражныйНомер КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА """" КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.ТС.ГаражныйНомер, """") ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС.ГаражныйНомер, """") КОНЕЦ КАК ГарНомерТС,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ТОГДА ТСПоМестуРаботы.ТС.ГосударственныйНомер КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА  """" КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.ТС.ГосударственныйНомер, """") ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС.ГосударственныйНомер, ЕСТЬNULL(РазнарядкаВчерашняя.ТС.ГосударственныйНомер, """")) КОНЕЦ КАК ГосНомерТС,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ТОГДА ТСПоМестуРаботы.ТС КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ТранспортноеСредство КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЕСТЬNULL(РазнарядкаВчерашняя.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))) КОНЕЦ КАК ТС,
	|	ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.Прицеп, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.Прицеп, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Прицеп, ЕСТЬNULL(РазнарядкаВчерашняя.Прицеп, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))) КОНЕЦ КАК Прицеп,
	|	(ЕСТЬNULL(РазнарядкаВчерашняя.МестоОказанияУслуг, """") <> """") И (ЕСТЬNULL(РазнарядкаТекущая.МестоОказанияУслуг, 0) = 0) КАК НеСогласованоМестоОказанияУслуг,
	|	ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, РазнарядкаВчерашняя.СтатусыОтказа.ПризнакНевыходаВодителя) ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СтатусыОтказаВодитель,
	|	ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка) ТОГДА НЕ ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, РазнарядкаВчерашняя.СтатусыОтказа.ПризнакНевыходаВодителя) ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СтатусыОтказаТС,
	|	ВЫБОР КОГДА РазнарядкаТекущая.СтатусыОтказа ЕСТЬ NULL ТОГДА ВЫБОР КОГДА РазнарядкаВчерашняя.СтатусыОтказа ЕСТЬ NULL ТОГДА """" ИНАЧЕ РазнарядкаВчерашняя.СтатусыОтказа.Наименование КОНЕЦ ИНАЧЕ РазнарядкаТекущая.СтатусыОтказа.Наименование КОНЕЦ КАК СтатусыОтказаНаименование,
	|	ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) КАК СтатусыОтказа,
	|	ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) КАК ТСПринудительноСтерто,
	|	0 КАК Модифицированность,
	|	ЛОЖЬ КАК ЗаписьУточнения,
	|	0 КАК ИндексКартинкиПутевойЛистНапечатан, //закомментировано, картинка статуса теперь в ИндексКартинкиСтрокаЗаполнена, ...
	|	0 КАК ИндексКартинки, //закомментировано, картинка статуса теперь в ИндексКартинкиСтрокаЗаполнена, здесь постоянная картинка как кнопка: ВЫБОР КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЕСТЬNULL(РазнарядкаВчерашняя.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка) ТОГДА 0 ИНАЧЕ -1 КОНЕЦ КАК ИндексКартинки
	|	ЛОЖЬ КАК Выбрано,
	|	"""" КАК ВодительСтрокой,	//поля для 'поиска' через условное оформление
	|	"""" КАК ТССтрокой,
	|	"""" КАК КонтрагентСтрокой,
	|	"""" КАК ЦехМаршрутСтрокой,
	|	ЕСТЬNULL(ПутевыеПоСвободнымТС.Ссылка, ВыпискаПЛПоИдентификаторам.ПутевойЛист) КАК ПутевойЛист
	|//МЕСТОВСТАВКИИМЕНИВРЕМЕННОЙТАБЛИЦЫ
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок.Обороты(НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ), КОНЕЦПЕРИОДА(&ДатаРазнарядки, ДЕНЬ), День) КАК ДополнительныеСведенияЗаявокОбороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДополнительныеСведенияЗаявок КАК СведенияРасширенные
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = СведенияРасширенные.ИдентификаторСтрокиЗаявки И ДополнительныеСведенияЗаявокОбороты.Период = СведенияРасширенные.Период И ВЫБОР КОГДА СведенияРасширенные.ИдентификаторСтрокиЛота В(ВЫБРАТЬ ОтсторнированныеДокументы.ИдентификаторСтрокиЛота ИЗ ОтсторнированныеДокументы КАК ОтсторнированныеДокументы) ТОГДА НЕ СведенияРасширенные.ДокументЛота В(ВЫБРАТЬ ОтсторнированныеДокументы.ДокументЛота ИЗ ОтсторнированныеДокументы КАК ОтсторнированныеДокументы) ИНАЧЕ ИСТИНА КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.Разнарядка КАК РазнарядкаТекущая
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = РазнарядкаТекущая.ИдентификаторСтрокиЗаявки И ДополнительныеСведенияЗаявокОбороты.Период = РазнарядкаТекущая.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ КрайниеДатыПредыдущихДанныхРазнарядки КАК КрайниеДатыПредыдущихДанныхРазнарядки
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.Разнарядка КАК РазнарядкаВчерашняя
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = РазнарядкаВчерашняя.ИдентификаторСтрокиЗаявки И РазнарядкаВчерашняя.Дата = КрайниеДатыПредыдущихДанныхРазнарядки.Дата
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыпискаПЛПоИдентификаторам КАК ВыпискаПЛПоИдентификаторам
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = ВыпискаПЛПоИдентификаторам.ИдентификаторСтрокиЗаявки И НАЧАЛОПЕРИОДА(ВыпискаПЛПоИдентификаторам.ДатаВыписки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ)  И (НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист.ПометкаУдаления) И ВыпискаПЛПоИдентификаторам.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПечатьПЛ КАК ПечатьПЛ
	|		ПО ВыпискаПЛПоИдентификаторам.ПутевойЛист = ПечатьПЛ.ПутевойЛист И НЕ ПечатьПЛ.ПутевойЛист.ПометкаУдаления
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТипыТСИКолонны КАК ТСИКолонны	//чтобы указать истинную колонну для ТС из ПЛ или в текущей разнарядке
	|		ПО ВЫБОР КОГДА НЕ ПечатьПЛ.ПутевойЛист ЕСТЬ NULL ТОГДА ПечатьПЛ.ПутевойЛист.ТранспортноеСредство ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) КОНЕЦ = ТСИКолонны.ТС
	|	ПОЛНОЕ СОЕДИНЕНИЕ ТСПоМестуРаботы КАК ТСПоМестуРаботы
	|		ПО ТСПоМестуРаботы.ТС = ВЫБОР КОГДА НЕ ПечатьПЛ.ПутевойЛист ЕСТЬ NULL ТОГДА ПечатьПЛ.ПутевойЛист.ТранспортноеСредство КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЕСТЬNULL(РазнарядкаВчерашняя.ТСПринудительноСтерто, ЛОЖЬ)) ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЛ.Ссылка, ПЛ.ТранспортноеСредство, ПЛ.Водитель1 КАК Водитель, ПЛ.Водитель2 КАК Водитель2, ПЛ.ДатаВыезда, ПЛ.ДатаВозвращения ИЗ Документ.уатПутевойЛист КАК ПЛ ГДЕ ПЛ.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаРазнарядки, ДЕНЬ) И (НЕ ПЛ.ПометкаУдаления)) Как ПутевыеПоСвободнымТС
	|		ПО ВЫБОР КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ТОГДА ТСПоМестуРаботы.ТС = ПутевыеПоСвободнымТС.ТранспортноеСредство ИНАЧЕ ЛОЖЬ КОНЕЦ
	|ГДЕ ((ДополнительныеСведенияЗаявокОбороты.КоличествоТСОборот > 0
	|		И СведенияРасширенные.МестоРаботы = &МестоРаботы) ИЛИ ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """")
	|		//УСЛОВИЕКОЛОННА И ВЫБОР КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ТОГДА ТСПоМестуРаботы.Колонна КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ИЛИ НЕ ПечатьПЛ.ПутевойЛист ЕСТЬ NULL ТОГДА (ТСИКолонны.Колонна) КОГДА ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка) ТОГДА ЕСТЬNULL(РазнарядкаВчерашняя.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)) ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЕСТЬNULL(РазнарядкаВчерашняя.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка))) КОНЕЦ В ИЕРАРХИИ (&Колонна)
	|		//УСЛОВИЕОБНОВЛЕНИЕСТРОК И ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки В(&МассивИдентификаторов)
	|//УПОРЯДОЧИВАНИЕ1УПОРЯДОЧИТЬ ПО ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ВОЗР, Контрагент.Наименование ВОЗР, РазнарядкаТекущая.ЦехМаршрут.Родитель УБЫВ, РазнарядкаТекущая.ЦехМаршрут ВОЗР, СведенияРасширенные.ТипТС.Родитель.Наименование ВОЗР, СведенияРасширенные.ТипТС.Наименование ВОЗР, ПозицияПП, ГосНомерТС, ГарНомерТС, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|//УПОРЯДОЧИВАНИЕ2УПОРЯДОЧИТЬ ПО ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ВОЗР, ГарНомерТС, РазнарядкаТекущая.ЦехМаршрут.ВремяВПути УБЫВ, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|//УПОРЯДОЧИВАНИЕ3УПОРЯДОЧИТЬ ПО ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ВОЗР, ГосНомерТС, РазнарядкаТекущая.ЦехМаршрут.ВремяВПути УБЫВ, ГарНомерТС, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|//УПОРЯДОЧИВАНИЕ4УПОРЯДОЧИТЬ ПО ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ВОЗР, СведенияРасширенные.ТипТС.Родитель.Наименование ВОЗР, СведенияРасширенные.ТипТС.Наименование ВОЗР, ПозицияПП, ГосНомерТС, ГарНомерТС, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ	// 7 - Соответствие водителей и ТС, по сменам
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КАК ГарНомерТС,
	|	МАКСИМУМ(уатПутевойЛист.Дата) КАК Дата,
	|	ВЫБОР КОГДА ЧАС(уатПутевойЛист.ДатаВыезда) < 4 Или ЧАС(уатПутевойЛист.ДатаВыезда) >= 16 ТОГДА "" 2"" ИНАЧЕ "" 1"" КОНЕЦ КАК ВтораяСмена,
	|	уатПутевойЛист.Водитель1 КАК Сотрудник,
	|	уатПутевойЛист.Водитель2 КАК Сотрудник2
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления И уатПутевойЛист.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаРазнарядки, ДЕНЬ, -20)  И &ДатаРазнарядки
	|СГРУППИРОВАТЬ ПО уатПутевойЛист.ТранспортноеСредство, уатПутевойЛист.Водитель1, уатПутевойЛист.Водитель2, ВЫБОР КОГДА ЧАС(уатПутевойЛист.ДатаВыезда) < 4 Или ЧАС(уатПутевойЛист.ДатаВыезда) >= 16 ТОГДА "" 2"" ИНАЧЕ "" 1"" КОНЕЦ
	|УПОРЯДОЧИТЬ ПО уатПутевойЛист.ТранспортноеСредство, Дата УБЫВ, Сотрудник";
	
	Возврат ?(пИмяВременнойТаблицы = "", мТекстЗапроса, СтрЗаменить(мТекстЗапроса, "//МЕСТОВСТАВКИИМЕНИВРЕМЕННОЙТАБЛИЦЫ", пИмяВременнойТаблицы));
КонецФункции

// функция обязана вернуть структуру с полями:
//	Успешно - Булево - результат выполнения, Истина - все записано, Ложь - записано частично или ничего
//	МассивЗаписанныхИдентификаторов - Массив строк - содержит элеенты со значениями поля ИдентификаторСтрокиЗаявки тех записей, которые небыли записаны в базу
//	ЗаписьУточнения - число (0/1/2), где 0 - запись полей разнарядки (ТС и Водители), 1 - запись прочих полей, 2 - запись всех полей
Функция ЗаписатьСтрокиРазнарядкиНаСервере(пДата, пСтруктурыСтрок) Экспорт
	мИменаПолейУточнения = "Колонна, ТипТС, ЦехМаршрут, МестоОказанияУслуг, Ответственный, ВремяПодачи, ВремяВозврата, Комментарий, СтатусыОтказа, ТСПринудительноСтерто, Прицеп, ИзмененоПослеСогласования, Смена";
	мИменаПолейРазнарядка = "ТС, Водитель, Водитель2";
	мМассивЗаписанных = Новый Массив();
	вРезультат = Новый Структура("Успешно", Истина);
	Если пСтруктурыСтрок.Количество() > 0 Тогда
		мПервыйЭлементМассива = пСтруктурыСтрок[0];
		
		Если мПервыйЭлементМассива.Свойство("ИдентификаторСтрокиЗаявки") Тогда
			мРаздельныйРежимЗаписи = мПервыйЭлементМассива.Свойство("ЗаписьУточнения");
			//если Не ЗаписьУточнения - совмещаем поля в одну строку
			мИменаПолейРазнарядка = мИменаПолейРазнарядка + ", " + мИменаПолейУточнения;
			Для Каждого мЭлемент Из пСтруктурыСтрок Цикл
				
				мЗаписьРегистраРазнарядка = РегистрыСведений.Разнарядка.СоздатьМенеджерЗаписи();
				//после чтения необходимо переустановить, т.к. если записи нет - поля будут пустыми...
				ЗаполнитьЗначенияСвойств(мЗаписьРегистраРазнарядка, мЭлемент, "ИдентификаторСтрокиЗаявки");
				мЗаписьРегистраРазнарядка.Дата = пДата;
				Если мРаздельныйРежимЗаписи и мЭлемент.ЗаписьУточнения Тогда
					мЗаписьРегистраРазнарядка.Прочитать();
					
					//после чтения необходимо переустановить, т.к. если записи нет - поля будут пустыми...
					ЗаполнитьЗначенияСвойств(мЗаписьРегистраРазнарядка, мЭлемент, "ИдентификаторСтрокиЗаявки");
					мЗаписьРегистраРазнарядка.Дата = пДата;
					ЗаполнитьЗначенияСвойств(мЗаписьРегистраРазнарядка, мЭлемент, мИменаПолейУточнения);
					мЗаписьРегистраРазнарядка.ЛогИзмененияНачальникЭксплуатации = "Изменено: " + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
					вРезультат.Вставить("ЗаписьУточнения", 1);
				Иначе
					//закомментировано 13.02.2020 в связи с обстоятельствами =)
					//Если мЭлемент.КолоннаИсходноеЗначение <> мЭлемент.Колонна И Не (мЭлемент.КолоннаИсходноеЗначение.Пустая() И ЗначениеЗаполнено(мЭлемент.ТС))Тогда
					//	//при изменении колонны, необходимо "обнулить"  ТС и Водителя в регистре!
					//	//	кроме случая заполнения колонны
					//	// далее при обновлении строк будут либо подставлены "вчерашние" значения, либо пустые...
					//	мЗаписьРегистраРазнарядка.Водитель = Справочники.уатСотрудники.ПустаяСсылка();
					//	мЗаписьРегистраРазнарядка.Водитель2 = Справочники.уатСотрудники.ПустаяСсылка();
					//	мЗаписьРегистраРазнарядка.ТС = Справочники.уатТС.ПустаяСсылка();
					//	
					//	//TODO: менять на пусто если не совпадает КолоннаТС(мЭлемент.ТС) = мЭлемент.Колонна? или записывать ТС в колонну? Задать вопрос?
					//КонецЕсли;
					ЗаполнитьЗначенияСвойств(мЗаписьРегистраРазнарядка, мЭлемент, мИменаПолейРазнарядка);	//см. мИменаПолейРазнарядка = ?(мРаздельныйРежимЗаписи, ...
					мЗаписьРегистраРазнарядка.ЛогИзмененияНачальникАвтоколонны = "Изменено: " + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
					вРезультат.Вставить("ЗаписьУточнения", ?(мРаздельныйРежимЗаписи, 0, 2));
				КонецЕсли;
				мЗаписьРегистраРазнарядка.Записать(Истина);
				мМассивЗаписанных.Добавить(мЭлемент.ИдентификаторСтрокиЗаявки);
				
				Если мЭлемент.ТСПринудительноСтерто И ЗначениеЗаполнено(мЭлемент.ПутевойЛист) Тогда
					РегистрыСведений.ВыпискаПЛПоИдентификаторам.ЗафиксироватьФактВыписки(НачалоДня(пДата), Документы.уатПутевойЛист.ПустаяСсылка(), мЭлемент);
				КонецЕсли;
			КонецЦикла;
		Иначе
			вРезультат.Успешно = Ложь;
		КонецЕсли;
		вРезультат.Успешно = Ложь;
	КонецЕсли;
	
	вРезультат.Вставить("МассивЗаписанныхИдентификаторов", мМассивЗаписанных);
	Возврат вРезультат;
КонецФункции


//новая версия записи регистра, без совмещенного режима (которые уже и не работал)
Функция ЗаписатьСтрокиРазнарядки(пДата, пСтруктурыСтрок) Экспорт
	мМассивЗаписанных = Новый Массив();
	вРезультат = Новый Структура("Успешно", Истина);
	Если пСтруктурыСтрок.Количество() > 0 Тогда
		Для Каждого мЭлемент Из пСтруктурыСтрок Цикл
			мЗаписьРегистраРазнарядка = РегистрыСведений.Разнарядка.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(мЗаписьРегистраРазнарядка, мЭлемент);
			мЗаписьРегистраРазнарядка.Дата = пДата;
			мЗаписьРегистраРазнарядка.ЛогИзмененияНачальникАвтоколонны = "Изменено: " + ИмяКомпьютера() + " (" + ИмяПользователя() + ") " + ТекущаяДата();
			мЗаписьРегистраРазнарядка.Записать(Истина);
			мМассивЗаписанных.Добавить(мЭлемент.ИдентификаторСтрокиЗаявки);
			// если принудительно стираем - нужно стереть факт выписки ПЛ по идентификатору (если поле ПутевойЛист заполнено)
			Если мЭлемент.ТСПринудительноСтерто И ЗначениеЗаполнено(мЭлемент.ПутевойЛист) Тогда
				РегистрыСведений.ВыпискаПЛПоИдентификаторам.ЗафиксироватьФактВыписки(НачалоДня(пДата), Документы.уатПутевойЛист.ПустаяСсылка(), мЭлемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	вРезультат.Вставить("МассивЗаписанныхИдентификаторов", мМассивЗаписанных);
	Возврат вРезультат;
КонецФункции

Функция ОчиститьСтрокиРазнарядкиНаСервере(пДата, пМассивИдентификаторов) Экспорт
	вРезультат = Новый Структура();
	мМассивЗаписанныхИдентификаторов = Новый Массив;
	Для Каждого мЭлемент Из пМассивИдентификаторов Цикл
		Если СокрЛП(мЭлемент) <> "" Тогда
			мМассивЗаписанныхИдентификаторов.Добавить(мЭлемент);
			мНаборЗаписей = РегистрыСведений.Разнарядка.СоздатьНаборЗаписей();
			мНаборЗаписей.Отбор.Дата.Установить(пДата);
			мНаборЗаписей.Отбор.ИдентификаторСтрокиЗаявки.Установить(мЭлемент);
			мНаборЗаписей.Прочитать();
			мНаборЗаписей.Очистить();
			мНаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	вРезультат.Вставить("МассивЗаписанныхИдентификаторов", мМассивЗаписанныхИдентификаторов);
	Возврат вРезультат;
КонецФункции

Функция ПолучитьТекстЗапросаРазнарядкаДеревом() Экспорт
	мТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ											////		0
	|	уатМестонахождениеТС.ТС КАК ТС,
	|	уатМестонахождениеТС.Подразделение КАК Колонна
	|ПОМЕСТИТЬ ТипыТСИКолонны
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаРазнарядки, ) КАК уатМестонахождениеТС
	|ГДЕ
	|	уатМестонахождениеТС.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И уатМестонахождениеТС.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|	И НЕ уатМестонахождениеТС.Состояние.ЗапретитьВыпискуПЛ
	|	И ВЫБОР КОГДА уатМестонахождениеТС.ТС.ТипТС <> ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка) ТОГДА НЕ уатМестонахождениеТС.ТС.ТипТС.НеВыводитьВТабельТС ИНАЧЕ ИСТИНА КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////		1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипыТСИКолонны.ТС КАК ТС,
	|	ТипыТСИКолонны.Колонна КАК Колонна,
	|	ЕСТЬNULL(ТаблицаГруппы.Ссылка, ЗНАЧЕНИЕ(Справочник.юкГруппыТС.ПустаяСсылка)) КАК Группа,
	|	ЕСТЬNULL(ТаблицаГруппы.НомерСтроки, 0) КАК НомерВГруппе
	|ПОМЕСТИТЬ ТСПоМестуРаботы
	|ИЗ
	|	ТипыТСИКолонны КАК ТипыТСИКолонны
	|	левое соединение Справочник.юкГруппыТС.ТаблицаТС КАК ТаблицаГруппы
	|	ПО ТаблицаГруппы.ТС = ТипыТСИКолонны.ТС
	|ГДЕ ВЫБОР КОГДА &Группа <> ЗНАЧЕНИЕ(Справочник.юкГруппыТС.ПустаяСсылка) ТОГДА ЕСТЬNULL(ТаблицаГруппы.Ссылка, ЗНАЧЕНИЕ(Справочник.юкГруппыТС.ПустаяСсылка)) = &Группа ИНАЧЕ &Колонна = ТипыТСИКолонны.Колонна КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////		2
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипыТСИКолонны.ТС КАК ТС,
	|	ТипыТСИКолонны.Колонна КАК Колонна
	|ИЗ
	|	ТипыТСИКолонны КАК ТипыТСИКолонны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////		3
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипыТСИКолонны.Колонна КАК Колонна
	|ИЗ
	|	ТипыТСИКолонны КАК ТипыТСИКолонны
	|;
	|ВЫБРАТЬ // 4 - Отсторнированные лоты, движения которых не должны попадать как детальные строки регистра ДополнительныеСведенияЗаявок
	|ДополнительныеСведенияЗаявок.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота,
	|ДополнительныеСведенияЗаявок.ДокументЛота КАК ДокументЛота
	|ПОМЕСТИТЬ ОтсторнированныеДокументы
	|ИЗ РегистрНакопления.ДополнительныеСведенияЗаявок КАК ДополнительныеСведенияЗаявок
	|ГДЕ ДополнительныеСведенияЗаявок.ДокументЛота <> ЗНАЧЕНИЕ(Документ.юкЛот.ПустаяСсылка) И ДополнительныеСведенияЗаявок.ДокументЛота <> ДополнительныеСведенияЗаявок.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////		5
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.Контрагент
	|		ИНАЧЕ ЕСТЬNULL(СведенияРасширенные.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.Контрагент
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Контрагент
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК КонтрагентПЛ,
	|	ЕСТЬNULL(РазнарядкаТекущая.ИзмененоПослеСогласования, ЛОЖЬ) КАК ИзмененоПослеСогласования,
	|	ЕСТЬNULL(СведенияРасширенные.ТипТС, ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)) КАК ТипТС,
	|	ЕСТЬNULL(СведенияРасширенные.ПозицияПП, """") КАК ПозицияПП,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ЦехКонтрагента
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты)
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.ЦехаКонтрагента
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.ЦехаКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦехаКонтрагента.ПустаяСсылка)
	|	КОНЕЦ КАК ЦехМаршрут,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).ДополнительныйМаршрут
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДопМаршрут,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).ЦехКонтрагента
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.ЦехаКонтрагента
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.ЦехаКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦехаКонтрагента.ПустаяСсылка)
	|	КОНЕЦ КАК Цех,
	|	ВЫБОР КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА """"
	|			ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.МестоОказанияУслуг, """")
	|	КОНЕЦ КАК МестоОказанияУслуг,
	|	СведенияРасширенные.ИсходныеДанные КАК ДанныеЗагрузки,
	|	ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") КАК ИдентификаторСтрокиЗаявки,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, СведенияРасширенные.ВремяПодачи)
	|	КОНЕЦ КАК ВремяПодачи,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяПодачиПЛ,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВозвращения
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Окончание
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяВозврата, СведенияРасширенные.ВремяПодачи)
	|	КОНЕЦ КАК ВремяВозврата,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВозвращения
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВозвращения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяВозвратаПЛ,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВозвращения
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА НАЧАЛОПЕРИОДА(ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВозвращения, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаВозврата,
	|	ВЫБОР
	|		КОГДА НЕ РазнарядкаТекущая.ЦехМаршрут ЕСТЬ NULL
	|				И РазнарядкаТекущая.ЦехМаршрут ССЫЛКА Справочник.уатМаршруты
	|				И РазнарядкаТекущая.ЦехМаршрут.Ответсвенный <> """"
	|			ТОГДА РазнарядкаТекущая.ЦехМаршрут.Ответсвенный
	|		КОГДА НЕ СведенияРасширенные.ЦехМаршрут ЕСТЬ NULL
	|				И СведенияРасширенные.ЦехМаршрут ССЫЛКА Справочник.уатМаршруты
	|				И СведенияРасширенные.ЦехМаршрут.Ответсвенный <> """"
	|			ТОГДА СведенияРасширенные.ЦехМаршрут.Ответсвенный
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Ответственный, """")
	|	КОНЕЦ КАК Ответственный,
	|	ЧАС(ВЫБОР
	|				КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|					ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|				КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|					ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда
	|				КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|					ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало
	|				ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, СведенияРасширенные.ВремяПодачи)
	|			КОНЕЦ) < 4
	|		ИЛИ ЧАС(ВЫБОР
	|				КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|					ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|				КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|					ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда
	|				КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|					ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало
	|				ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, СведенияРасширенные.ВремяПодачи)
	|			КОНЕЦ) >= 16 КАК ВтораяСмена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Смена, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЧАС(ВЫБОР
	|									КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|										ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|									КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|										ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда
	|									КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|										ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало
	|									ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, СведенияРасширенные.ВремяПодачи)
	|								КОНЕЦ) < 4
	|							ИЛИ ЧАС(ВЫБОР
	|									КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|										ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|									КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|										ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда
	|									КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|										ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало
	|									ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, СведенияРасширенные.ВремяПодачи)
	|								КОНЕЦ) >= 16
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ РазнарядкаТекущая.Смена
	|	КОНЕЦ КАК Смена,
	|	ПОДСТРОКА(ЕСТЬNULL(РазнарядкаТекущая.Комментарий, СведенияРасширенные.Комментарий), 1, 255) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РазнарядкаТекущая.ТС ЕСТЬ NULL
	|				ИЛИ РазнарядкаТекущая.ТС = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|	КОНЕЦ КАК НеСогласованоВодительТС,
	|	ВЫБОР
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				ИЛИ ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|					И ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|	КОНЕЦ КАК СтрокаНеЗаполнена,
	|	ВЫБОР
	|		КОГДА НЕ ПечатьПЛ.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА 3
	|		КОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|					И ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				ИЛИ ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|					И ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|				ИЛИ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|					И (ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|						ИЛИ ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ИндексКартинкиСтрокаЗаполнена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				ИЛИ (НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL) ИЛИ (НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL)
	|			ТОГДА ТСИКолонны.Колонна
	|		КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """"
	|			ТОГДА ТСПоМестуРаботы.Колонна
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка))
	|	КОНЕЦ КАК Колонна,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.Водитель1
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель1
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				И ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|					ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка))
	|	КОНЕЦ КАК Водитель,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.Водитель2
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель2
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				И ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|					ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя2, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка))
	|	КОНЕЦ КАК Водитель2,
	|	ВЫБОР
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель2.Код
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|			ТОГДА """"
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				И ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|					ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя2, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА """"
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель2, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель2.Код, """")
	|	КОНЕЦ КАК ТабНомерВодителя2,
	|	ВЫБОР
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.Водитель1.Код
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|			ТОГДА """"
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				И ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|					ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, ЛОЖЬ)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА """"
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Водитель, ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатСотрудники.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Водитель.Код, """")
	|	КОНЕЦ КАК ТабНомерВодителя,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ТранспортноеСредство.ГаражныйНомер
	|		КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """"
	|			ТОГДА ТСПоМестуРаботы.ТС.ГаражныйНомер
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ТранспортноеСредство.ГаражныйНомер
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|			ТОГДА """"
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС.ГаражныйНомер, """")
	|	КОНЕЦ КАК ГарНомерТС,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ТранспортноеСредство.ГосударственныйНомер
	|		КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """"
	|			ТОГДА ТСПоМестуРаботы.ТС.ГосударственныйНомер
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ТранспортноеСредство.ГосударственныйНомер
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|			ТОГДА """"
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС.ГосударственныйНомер, """")
	|	КОНЕЦ КАК ГосНомерТС,
	|	ВЫБОР
	|		КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПутевыеПоСвободнымТС.Ссылка.ТранспортноеСредство
	|		КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """"
	|			ТОГДА ТСПоМестуРаботы.ТС
	|		КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|			ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ТранспортноеСредство
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))
	|	КОНЕЦ КАК ТС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Прицеп, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Прицеп, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))
	|	КОНЕЦ КАК Прицеп,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Прицеп, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		ИНАЧЕ РазнарядкаТекущая.Прицеп.ГаражныйНомер
	|	КОНЕЦ КАК ПрицепГарНомер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Прицеп, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		ИНАЧЕ РазнарядкаТекущая.Прицеп.ГосударственныйНомер
	|	КОНЕЦ КАК ПрицепГосНомер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусыОтказаВодитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)
	|			ТОГДА НЕ ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа.ПризнакНевыходаВодителя, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусыОтказаТС,
	|	ВЫБОР
	|		КОГДА РазнарядкаТекущая.СтатусыОтказа ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ РазнарядкаТекущая.СтатусыОтказа.Наименование
	|	КОНЕЦ КАК СтатусыОтказаНаименование,
	|	ЕСТЬNULL(РазнарядкаТекущая.СтатусыОтказа, ЗНАЧЕНИЕ(Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка)) КАК СтатусыОтказа,
	|	ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ) КАК ТСПринудительноСтерто,
	|	0 КАК Модифицированность,
	|	ЛОЖЬ КАК ЗаписьУточнения,
	|	0 КАК ИндексКартинкиПутевойЛистНапечатан,
	|	0 КАК ИндексКартинки,
	|	ЛОЖЬ КАК Выбрано,
	|	"""" КАК ВодительСтрокой,
	|	"""" КАК ТССтрокой,
	|	"""" КАК КонтрагентСтрокой,
	|	"""" КАК ЦехМаршрутСтрокой,
	|	ЕСТЬNULL(ПутевыеПоСвободнымТС.Ссылка, ВыпискаПЛПоИдентификаторам.ПутевойЛист) КАК ПутевойЛист
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок.Обороты(НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ), КОНЕЦПЕРИОДА(&ДатаРазнарядки, ДЕНЬ), День, ) КАК ДополнительныеСведенияЗаявокОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДополнительныеСведенияЗаявок КАК СведенияРасширенные
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = СведенияРасширенные.ИдентификаторСтрокиЗаявки
	|			И ДополнительныеСведенияЗаявокОбороты.Период = СведенияРасширенные.Период И ВЫБОР КОГДА СведенияРасширенные.ИдентификаторСтрокиЛота В(ВЫБРАТЬ ОтсторнированныеДокументы.ИдентификаторСтрокиЛота ИЗ ОтсторнированныеДокументы КАК ОтсторнированныеДокументы) ТОГДА НЕ СведенияРасширенные.ДокументЛота В(ВЫБРАТЬ ОтсторнированныеДокументы.ДокументЛота ИЗ ОтсторнированныеДокументы КАК ОтсторнированныеДокументы) ИНАЧЕ ИСТИНА КОНЕЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Разнарядка КАК РазнарядкаТекущая
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = РазнарядкаТекущая.ИдентификаторСтрокиЗаявки
	|			И ДополнительныеСведенияЗаявокОбороты.Период = РазнарядкаТекущая.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыпискаПЛПоИдентификаторам КАК ВыпискаПЛПоИдентификаторам
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = ВыпискаПЛПоИдентификаторам.ИдентификаторСтрокиЗаявки
	|			И (НАЧАЛОПЕРИОДА(ВыпискаПЛПоИдентификаторам.ДатаВыписки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ))
	|			И (НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист.ПометкаУдаления)
	|			И (ВыпискаПЛПоИдентификаторам.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПечатьПЛ КАК ПечатьПЛ
	|		ПО (ВыпискаПЛПоИдентификаторам.ПутевойЛист = ПечатьПЛ.ПутевойЛист)
	|			И (НЕ ПечатьПЛ.ПутевойЛист.ПометкаУдаления)
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТСПоМестуРаботы КАК ТСПоМестуРаботы
	|		ПО (ТСПоМестуРаботы.ТС = ВЫБОР
	|				КОГДА НЕ ПечатьПЛ.ПутевойЛист ЕСТЬ NULL
	|					ТОГДА ПечатьПЛ.ПутевойЛист.ТранспортноеСредство
	|				КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТСПринудительноСтерто, ЛОЖЬ)
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПЛ.Ссылка КАК Ссылка,
	|			ПЛ.ТранспортноеСредство КАК ТранспортноеСредство,
	|			ПЛ.Водитель1 КАК Водитель,
	|			ПЛ.Водитель2 КАК Водитель2,
	|			ПЛ.ДатаВыезда КАК ДатаВыезда,
	|			ПЛ.ДатаВозвращения КАК ДатаВозвращения
	|		ИЗ
	|			Документ.уатПутевойЛист КАК ПЛ
	|		ГДЕ
	|			ПЛ.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаРазнарядки, ДЕНЬ)
	|			И НЕ ПЛ.ПометкаУдаления
	|			И НЕ ПЛ.Ссылка В (ВЫБРАТЬ ВыпискаПЛПоИдентификаторам.ПутевойЛист ИЗ РегистрСведений.ВыпискаПЛПоИдентификаторам КАК ВыпискаПЛПоИдентификаторам ГДЕ НАЧАЛОПЕРИОДА(ВыпискаПЛПоИдентификаторам.ДатаВыписки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ))) КАК ПутевыеПоСвободнымТС
	|		ПО (ВЫБОР КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """" ТОГДА ТСПоМестуРаботы.ТС = ПутевыеПоСвободнымТС.ТранспортноеСредство ИНАЧЕ ЛОЖЬ КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТипыТСИКолонны КАК ТСИКолонны
	|		ПО (ВЫБОР
	|				КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|					ТОГДА ПутевыеПоСвободнымТС.ТранспортноеСредство
	|				КОГДА НЕ ПечатьПЛ.ПутевойЛист ЕСТЬ NULL
	|					ТОГДА ПечатьПЛ.ПутевойЛист.ТранспортноеСредство
	|				ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка))
	|			КОНЕЦ = ТСИКолонны.ТС)
	|ГДЕ
	|	(ДополнительныеСведенияЗаявокОбороты.КоличествоТСОборот > 0 ИЛИ ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """")
	|	И ВЫБОР КОГДА &Группа <> ЗНАЧЕНИЕ(Справочник.юкГруппыТС.ПустаяСсылка) ТОГДА ТСПоМестуРаботы.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка) ИНАЧЕ ИСТИНА КОНЕЦ
	|	И ВЫБОР КОГДА &Колонна <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) ТОГДА &Колонна = ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.ТС, ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|				ИЛИ (НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL) ИЛИ (НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL)
	|			ТОГДА ТСИКолонны.Колонна
	|		КОГДА ЕСТЬNULL(ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки, """") = """"
	|			ТОГДА ТСПоМестуРаботы.Колонна
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.Колонна, ЗНАЧЕНИЕ(Справочник.уатКолонны.ПустаяСсылка))
	|	КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ
	|	И ВЫБОР КОГДА &Смена <> 0 ТОГДА &Смена = ВЫБОР
	|		КОГДА ЕСТЬNULL(РазнарядкаТекущая.Смена, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЧАС(ВЫБОР
	|									КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|										ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|									КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|										ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда
	|									КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|										ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало
	|									ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, СведенияРасширенные.ВремяПодачи)
	|								КОНЕЦ) < 4
	|							ИЛИ ЧАС(ВЫБОР
	|									КОГДА НЕ ПутевыеПоСвободнымТС.Ссылка ЕСТЬ NULL
	|										ТОГДА ПутевыеПоСвободнымТС.Ссылка.ДатаВыезда
	|									КОГДА НЕ ВыпискаПЛПоИдентификаторам.ПутевойЛист ЕСТЬ NULL
	|										ТОГДА ВыпискаПЛПоИдентификаторам.ПутевойЛист.ДатаВыезда
	|									КОГДА ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) ССЫЛКА Справочник.уатМаршруты
	|										ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РазнарядкаТекущая.ЦехМаршрут, СведенияРасширенные.ЦехМаршрут) КАК Справочник.уатМаршруты).Начало
	|									ИНАЧЕ ЕСТЬNULL(РазнарядкаТекущая.ВремяПодачи, СведенияРасширенные.ВремяПодачи)
	|								КОНЕЦ) >= 16
	|						ТОГДА 2
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ РазнарядкаТекущая.Смена
	|	КОНЕЦ ИНАЧЕ ИСТИНА КОНЕЦ
	|		//УСЛОВИЕОБНОВЛЕНИЕСТРОК И ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки В(&МассивИдентификаторов)
	|//УПОРЯДОЧИВАНИЕ1УПОРЯДОЧИТЬ ПО Контрагент.Наименование ВОЗР, Смена, РазнарядкаТекущая.ЦехМаршрут.Родитель УБЫВ, РазнарядкаТекущая.ЦехМаршрут ВОЗР, СведенияРасширенные.ТипТС.Родитель.Наименование ВОЗР, СведенияРасширенные.ТипТС.Наименование ВОЗР, ПозицияПП, ГосНомерТС, ГарНомерТС, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|//УПОРЯДОЧИВАНИЕ2УПОРЯДОЧИТЬ ПО ГарНомерТС, Смена, РазнарядкаТекущая.ЦехМаршрут.ВремяВПути УБЫВ, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|//УПОРЯДОЧИВАНИЕ3УПОРЯДОЧИТЬ ПО ГосНомерТС, Смена, РазнарядкаТекущая.ЦехМаршрут.ВремяВПути УБЫВ, ГарНомерТС, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|//УПОРЯДОЧИВАНИЕ4УПОРЯДОЧИТЬ ПО СведенияРасширенные.ТипТС.Родитель.Наименование ВОЗР,  Смена,СведенияРасширенные.ТипТС.Наименование ВОЗР, ПозицияПП, ГосНомерТС, ГарНомерТС, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|//УПОРЯДОЧИВАНИЕ5УПОРЯДОЧИТЬ ПО ВЫБОР КОГДА &Группа <> ЗНАЧЕНИЕ(Справочник.юкГруппыТС.ПустаяСсылка) ТОГДА ТСПоМестуРаботы.НомерВГруппе ИНАЧЕ 0 КОНЕЦ ВОЗР, ГарНомерТС, Смена, РазнарядкаТекущая.ЦехМаршрут.ВремяВПути УБЫВ, ВремяПодачи ВОЗР, ИдентификаторСтрокиЗаявки
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ																	//	6 - Соответствие водителей и ТС, по сменам
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КАК ГарНомерТС,
	|	МАКСИМУМ(уатПутевойЛист.Дата) КАК Дата,
	|	ВЫБОР КОГДА ЧАС(уатПутевойЛист.ДатаВыезда) < 4 Или ЧАС(уатПутевойЛист.ДатаВыезда) >= 16 ТОГДА "" 2"" ИНАЧЕ "" 1"" КОНЕЦ КАК ВтораяСмена,
	|	уатПутевойЛист.Водитель1 КАК Сотрудник,
	|	уатПутевойЛист.Водитель2 КАК Сотрудник2
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления И уатПутевойЛист.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаРазнарядки, ДЕНЬ, -20)  И &ДатаРазнарядки
	|СГРУППИРОВАТЬ ПО уатПутевойЛист.ТранспортноеСредство, уатПутевойЛист.Водитель1, уатПутевойЛист.Водитель2, ВЫБОР КОГДА ЧАС(уатПутевойЛист.ДатаВыезда) < 4 Или ЧАС(уатПутевойЛист.ДатаВыезда) >= 16 ТОГДА "" 2"" ИНАЧЕ "" 1"" КОНЕЦ
	|УПОРЯДОЧИТЬ ПО уатПутевойЛист.ТранспортноеСредство, Дата УБЫВ, Сотрудник";
	
	Возврат мТекстЗапроса;
КонецФункции