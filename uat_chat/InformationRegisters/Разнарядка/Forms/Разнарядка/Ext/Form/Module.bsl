&НаСервереБезКонтекста
Функция ПолучитьДанныеРазнарядки(пДата, пКонтрагент, пКолонна = Неопределено, пМассивИдентификаторов = Неопределено, пМестоРаботы, пНастройкаУпорядочивания, пНеКопироватьПоПризнакуВыходнойПраздник)
	вСтруктураВозврата = Новый Структура();
	мТекстЗапроса = РегистрыСведений.Разнарядка.ПолучитьТекстЗапросаРазнарядка();
	мТекстЗапроса = СтрЗаменить(мТекстЗапроса, "//УПОРЯДОЧИВАНИЕ" + Формат(пНастройкаУпорядочивания, "ЧГ="), "");
	мЗапрос = Новый Запрос(мТекстЗапроса);
	мЗапрос.УстановитьПараметр("ДатаРазнарядки", пДата);
	мЗапрос.УстановитьПараметр("МестоРаботы", пМестоРаботы);
	мЗапрос.УстановитьПараметр("НеКопироватьПоПризнакуВыходнойПраздник", пНеКопироватьПоПризнакуВыходнойПраздник);
	Если пКолонна <> Неопределено И Не пКолонна.Пустая()Тогда
		//параметр колонна передается только для начальника автоколонны - чтобы Согласовать он мог только свою технику
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "//УСЛОВИЕКОЛОННА ", "");
		мЗапрос.УстановитьПараметр("Колонна", пКолонна);
	КонецЕсли;
	Если пМассивИдентификаторов <> Неопределено Тогда	//при вызове для обновления, выгружаются только отдельные идентификаторы
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "//УСЛОВИЕОБНОВЛЕНИЕСТРОК ", "");
		мЗапрос.УстановитьПараметр("МассивИдентификаторов", пМассивИдентификаторов);
	КонецЕсли;
	
	мРезультаты = мЗапрос.ВыполнитьПакет();
	
	Если пМассивИдентификаторов <> Неопределено Тогда
		//индексы различаются, т.к. кол-во таблиц в пакете разное
		вСтруктураВозврата.Вставить("МассивСтрок", ПреобразоватьТаблицуВМассивСтруктур(мРезультаты[6].Выгрузить()));
	Иначе
		мСоответствиеТСКолоннам = СформироватьСоответствиеТСКолоннам(мРезультаты[2].Выгрузить());	//фиксированное соответствие ТС - Колонна для передачи на клиент, обычное не передается... mutable
		мСоответствияТСВодителям = СформироватьСоответствиеТСВодителям(мРезультаты[7].Выгрузить());
		мСоответствиеТСВодителям = мСоответствияТСВодителям.Соответствие;
		мСоответствиеТСВодителям2 = мСоответствияТСВодителям.Соответствие2;
		вСтруктураВозврата.Вставить("МассивКолонн", ПреобразоватьТаблицуВМассивСтруктур(мРезультаты[3].Выгрузить(), Истина));
		вСтруктураВозврата.Вставить("МассивСтрок", ПреобразоватьТаблицуВМассивСтруктур(мРезультаты[6].Выгрузить()));
		вСтруктураВозврата.Вставить("СоответствиеТСКолоннам", мСоответствиеТСКолоннам);
		вСтруктураВозврата.Вставить("СоответствиеТСВодителям", мСоответствиеТСВодителям);
		вСтруктураВозврата.Вставить("СоответствиеТСВодителям2", мСоответствиеТСВодителям2);
	КонецЕсли;
	
	Возврат вСтруктураВозврата;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруФильтров()
	вСтруктура = Новый Структура();
	Если ЗначениеЗаполнено(фКонтрагент) Тогда
		вСтруктура.Вставить("Контрагент", фКонтрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(фКолонна) Тогда
		вСтруктура.Вставить("Колонна", фКолонна);
	КонецЕсли;
	Если ЗначениеЗаполнено(фТипТС) Тогда
		вСтруктура.Вставить("ТипТС", фТипТС);
	КонецЕсли;
	Если ЗначениеЗаполнено(фТС) Тогда
		вСтруктура.Вставить("ТС", фТС);
	КонецЕсли;
	Если ЗначениеЗаполнено(фЦех) Тогда
		вСтруктура.Вставить("Цех", фЦех);
	КонецЕсли;
	Если фВтораяСмена <> 0 Тогда
		вСтруктура.Вставить("ВтораяСмена", фВтораяСмена = 2);
	КонецЕсли;
	Если фТолькоНеЗаполненные Тогда
		вСтруктура.Вставить("СтрокаНеЗаполнена", Истина);
	КонецЕсли;
	Если фДоп > 0 Тогда
		вСтруктура.Вставить("ДопМаршрут", фДоп = 1);
	КонецЕсли;
	
	//TODO: Переделать, вернуть фОтказы Видимость на форме
	//Если фОтказы Тогда
	//	вСтруктура.Вставить("ОтказКолонны", 1);
	//КонецЕсли;
	
	Элементы.фКонтрагент.ЦветРамки = ?(вСтруктура.Свойство("Контрагент"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	Элементы.фКолонна.ЦветРамки = ?(вСтруктура.Свойство("Колонна"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	Элементы.фЦех.ЦветРамки = ?(вСтруктура.Свойство("Цех"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	Элементы.фВтораяСмена.ЦветРамки = ?(вСтруктура.Свойство("ВтораяСмена"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	Элементы.фТипТС.ЦветРамки = ?(вСтруктура.Свойство("ТипТС"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	Элементы.фТС.ЦветРамки = ?(вСтруктура.Свойство("ТС"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	Элементы.фДоп.ЦветРамки = ?(вСтруктура.Свойство("ДопМаршрут"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	//TODO: Переделать, вернуть фОтказы Видимость на форме
	//Элементы.фОтказы.ЦветРамки = ?(вСтруктура.Свойство("ОтказКолонны"), WebЦвета.Пурпурный, WebЦвета.ХакиТемный);
	
	Возврат Новый ФиксированнаяСтруктура(вСтруктура);
КонецФункции

&НаКлиенте
Процедура ОбновитьСтроки(пМассивИдентификаторов, пПризнакСоставаОбновляемыхПолей = Неопределено)
	Если пМассивИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//TODO: Переделать на одну полную запись и один полный возврат, отказаться от схемы раздельной записи
	пИменаЗаполняемыхПолей = "";
	пИменаПолейУточнений = "ЗаписьУточнения, СтатусыОтказа, СтатусыОтказаНаименование, СтатусыОтказаТС, НеСогласованоМестоОказанияУслуг, СтатусыОтказаВодитель, ИндексКартинки, Цех, ПозицияПП, ТипТС, Контрагент, Комментарий, ВтораяСмена, Колонна, ЦехМаршрут, ДопМаршрут, МестоОказанияУслуг, Ответственный, ВремяПодачи, ВремяВозврата, КонтрагентСтрокой, ЦехМаршрутСтрокой, ПутевойЛист, ДатаВозврата, ДанныеЗагрузки";
	пИменаПолейРазнарядки = "Выбрано, ИндексКартинкиСтрокаЗаполнена, ТабНомерВодителя2, Водитель2, НеСогласованоВодительТС, СтрокаНеЗаполнена, ТабНомерВодителя, ГосНомерТС, ГарНомерТС, Модифицированность, Водитель, ТС, Прицеп, ВодительСтрокой, ТССтрокой, ТСПринудительноСтерто, Смена, ИзмененоПослеСогласования";
	Если пПризнакСоставаОбновляемыхПолей <> Неопределено Тогда
		Если пПризнакСоставаОбновляемыхПолей = 0 Тогда
			пИменаЗаполняемыхПолей = пИменаПолейРазнарядки;
		ИначеЕсли пПризнакСоставаОбновляемыхПолей = 1 Тогда
			пИменаЗаполняемыхПолей = пИменаПолейУточнений;
		Иначе
			пИменаЗаполняемыхПолей = пИменаПолейУточнений + ", " + пИменаПолейРазнарядки;
		КонецЕсли;
	КонецЕсли;
	//отбор по колонне - только для Начальника Автоколонны, для начальника эксплуатации это лишь фильтр
	мДанныеРазнарядки = ПолучитьДанныеРазнарядки(фДата, фКонтрагент, ?(фРежимНачальникАвтоколонны, фКолонна, Неопределено), пМассивИдентификаторов, фМестоРаботы, фНастройкаУпорядочивания, фНеКопироватьПоПризнакуВыходнойПраздник);
	мМассивДанныхРазнарядки = мДанныеРазнарядки.МассивСтрок;
	ЗаполнитьТаблицуИзМассива(фТаблицаРазнарядки, мМассивДанныхРазнарядки, Ложь, пИменаЗаполняемыхПолей);
	мМассивУдаляемых = Новый Массив;
	//при обновлении необходимо учитывать, что некоторые строки уже не будут возвращены - например когда начальник А/к проводит
	// отмену, ему вернется пустой массив
	Если мМассивДанныхРазнарядки.Количество() < пМассивИдентификаторов.Количество() Тогда
		Если мМассивДанныхРазнарядки.Количество() = 0 Тогда
			мМассивУдаляемых = пМассивИдентификаторов;	//удаляем все строки, т.к. возвращен пустой массив
		Иначе
			//нужно удалить только некоторые
			Для Каждого тЭлемент Из пМассивИдентификаторов Цикл
				Если мМассивДанныхРазнарядки.Найти(тЭлемент) = Неопределено Тогда
					мМассивУдаляемых.Добавить(тЭлемент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если мМассивУдаляемых.Количество() > 0 Тогда
		Для Каждого мЭлемент Из мМассивУдаляемых Цикл
			мОтборПоИдентификатору = Новый Структура("ИдентификаторСтрокиЗаявки", СокрЛП(мЭлемент));
			Если СокрЛП(мЭлемент) <> "" И мОтборПоИдентификатору.Количество() > 0 Тогда
				мСтроки = фТаблицаРазнарядки.НайтиСтроки(мОтборПоИдентификатору);
				мСтрока = мСтроки[0];
				фТаблицаРазнарядки.Удалить(мСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОбновитьЭлементы();
КонецПроцедуры

&НаКлиенте
Процедура фДатаПриИзменении(Элемент)
	//отбор по колонне - только для Начальника Автоколонны, для начальника эксплуатации это лишь фильтр
	Если фДата = Дата("00010101") Тогда
		ПоказатьПредупреждение( , "Не указана дата");
		Возврат;
	КонецЕсли;
	
	мДанныеРазнарядки = ПолучитьДанныеРазнарядки(фДата, фКонтрагент, ?(фРежимНачальникАвтоколонны, фКолонна, Неопределено), Неопределено, фМестоРаботы, фНастройкаУпорядочивания, фНеКопироватьПоПризнакуВыходнойПраздник);
	фСоответствиеТСКолоннам = мДанныеРазнарядки.СоответствиеТСКолоннам;
	фСоответствиеТСВодителям = мДанныеРазнарядки.СоответствиеТСВодителям;
	фСоответствиеТСВодителям2 = мДанныеРазнарядки.СоответствиеТСВодителям2;
	
	Элементы.фТаблицаРазнарядкиКолонна.РежимВыбораИзСписка = Истина;
	Если Не фРежимНачальникАвтоколонны Тогда
		//начальник автоколонны видит только свои данные ?Ограничить доступ к фильтру фКолонна?
		мМассивКолонн = мДанныеРазнарядки.МассивКолонн;
		Если ЗначениеЗаполнено(фКолонна) И мМассивКолонн.Найти(фКолонна) = Неопределено Тогда
			фКолонна = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
		Элементы.фКолонна.РежимВыбораИзСписка = Истина;
		Элементы.фКолонна.СписокВыбора.ЗагрузитьЗначения(мМассивКолонн);
		Элементы.фКолонна.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		Элементы.фТаблицаРазнарядкиКолонна.СписокВыбора.ЗагрузитьЗначения(мМассивКолонн);
		Элементы.фТаблицаРазнарядкиКолонна.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	Иначе
		Элементы.фТаблицаРазнарядкиКолонна.СписокВыбора.Добавить(фКолонна);	//только одна =Р
	КонецЕсли;
	
	мМассивДанныхРазнарядки = мДанныеРазнарядки.МассивСтрок;
	ЗаполнитьТаблицуИзМассива(фТаблицаРазнарядки, мМассивДанныхРазнарядки, Истина);
	ОбновитьЭлементы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуИзМассива(пТаблицаЗначенийФормы, пМассивСтруктур, пОчищать = Истина, пИменаЗаполняемыхПолей = "")
	Если пОчищать Тогда
		пТаблицаЗначенийФормы.Очистить();
	КонецЕсли;
	мСтрока = Неопределено;
	
	Если пМассивСтруктур.Количество() > 0 Тогда
		Для Каждого мЭлемент Из пМассивСтруктур Цикл
			Если пОчищать Тогда
				мСтрока = пТаблицаЗначенийФормы.Добавить();
			Иначе
				//обновление строк
				мОтборПоИдентификатору = Новый Структура("ИдентификаторСтрокиЗаявки", СокрЛП(мЭлемент.ИдентификаторСтрокиЗаявки));
				мСтрокиРазнарядки = пТаблицаЗначенийФормы.НайтиСтроки(мОтборПоИдентификатору);
				Если мСтрокиРазнарядки <> Неопределено И мСтрокиРазнарядки.Количество() > 0 Тогда 
					мСтрока = мСтрокиРазнарядки[0];
				Иначе
					мСтрока = пТаблицаЗначенийФормы.Добавить();
				КонецЕсли;
			КонецЕсли;
			
			Если СокрЛП(мСтрока.ИдентификаторСтрокиЗаявки) = "" Тогда
				ЗаполнитьЗначенияСвойств(мСтрока, мЭлемент);
			Иначе
				ЗаполнитьЗначенияСвойств(мСтрока, мЭлемент, пИменаЗаполняемыхПолей);
			КонецЕсли;
			мСтрока.КолоннаИсходноеЗначение = мЭлемент.Колонна;
			мСтрока.ТСИсходноеЗначение = мЭлемент.ТС;
			мСтрока.ВодительИсходноеЗначение = мЭлемент.Водитель;
			мСтрока.Водитель2ИсходноеЗначение = мЭлемент.Водитель2;
			
			мСтрока.КонтрагентСтрокой = мСтрока.Контрагент;
			мСтрока.ЦехМаршрутСтрокой = мСтрока.ЦехМаршрут;
			мСтрока.ВодительСтрокой = мСтрока.Водитель;
			мСтрока.ТССтрокой = мСтрока.ТС;
			
			Если ЗначениеЗаполнено(мСтрока.МестоОказанияУслуг) И фМассивСтрокМест.НайтиПоЗначению(НРег(мСтрока.МестоОказанияУслуг)) = Неопределено Тогда
				фМассивСтрокМест.Добавить(НРег(мСтрока.МестоОказанияУслуг), мСтрока.МестоОказанияУслуг);
			КонецЕсли;
			Если ЗначениеЗаполнено(мСтрока.Ответственный) И фМассивСтрокОтветственных.НайтиПоЗначению(НРег(мСтрока.Ответственный)) = Неопределено Тогда
				фМассивСтрокОтветственных.Добавить(НРег(мСтрока.Ответственный), мСтрока.Ответственный);
			КонецЕсли;
		КонецЦикла;
		фМассивСтрокОтветственных.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		фМассивСтрокМест.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСоответствиеТСВодителям(пТаблица)
	вСоответствие = Новый Соответствие;
	вСоответствие2 = Новый Соответствие;
	
	Для Каждого тЭлемент Из пТаблица Цикл
		Если Не ЗначениеЗаполнено(тЭлемент.ТС) Тогда
			Продолжить;
		КонецЕсли;
		мЗначение = "" + СокрЛП(тЭлемент.ГарНомерТС) + тЭлемент.ВтораяСмена;
		мСоответствующийМассивСотрудников = вСоответствие.Получить(мЗначение);
		мСоответствующийМассивСотрудников2 = вСоответствие2.Получить(мЗначение);
		Если ЗначениеЗаполнено(тЭлемент["Сотрудник"]) Тогда
			Если мСоответствующийМассивСотрудников = Неопределено Тогда
				мСоответствующийМассивСотрудников = Новый Массив;
				мСоответствующийМассивСотрудников.Добавить(тЭлемент["Сотрудник"]);
				вСоответствие.Вставить(мЗначение, мСоответствующийМассивСотрудников);
			ИначеЕсли мСоответствующийМассивСотрудников.Найти(тЭлемент["Сотрудник"]) = Неопределено Тогда
				мСоответствующийМассивСотрудников.Добавить(тЭлемент["Сотрудник"]);
				вСоответствие.Вставить(мЗначение, мСоответствующийМассивСотрудников);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(тЭлемент["Сотрудник2"]) Тогда
			Если мСоответствующийМассивСотрудников2 = Неопределено Тогда
				мСоответствующийМассивСотрудников2 = Новый Массив;
				мСоответствующийМассивСотрудников2.Добавить(тЭлемент["Сотрудник2"]);
				вСоответствие2.Вставить(мЗначение, мСоответствующийМассивСотрудников2);
			ИначеЕсли мСоответствующийМассивСотрудников2.Найти(тЭлемент["Сотрудник2"]) = Неопределено Тогда
				мСоответствующийМассивСотрудников2.Добавить(тЭлемент["Сотрудник2"]);
				вСоответствие2.Вставить(мЗначение, мСоответствующийМассивСотрудников2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	вСтруктураСоответствий = Новый Структура("Соответствие, Соответствие2", Новый ФиксированноеСоответствие(вСоответствие), Новый ФиксированноеСоответствие(вСоответствие2));
	Возврат вСтруктураСоответствий;
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСоответствиеТСКолоннам(пМассив)
	вСоответствие = Новый Соответствие;
	
	Для Каждого тЭлемент Из пМассив Цикл
		вСоответствие.Вставить(тЭлемент.ТС, тЭлемент.Колонна);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(вСоответствие);
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуВМассивСтруктур(пТаблица, пЧистыйМассив = Ложь)
	вМассив = Новый Массив;
	мСтрокаИменКолонок = "";
	Для Каждого мКолонка Из пТаблица.Колонки Цикл
		мСтрокаИменКолонок = мСтрокаИменКолонок + "," + мКолонка.Имя;
	КонецЦикла;
	мСтрокаИменКолонок = Сред(мСтрокаИменКолонок, 2);
	мЧистыйМассив = пЧистыйМассив И Найти(мСтрокаИменКолонок, ",") = 0;
	
	Для Каждого мСтрока Из пТаблица Цикл
		Если Не мЧистыйМассив Тогда
			мСтруктура = Новый Структура(мСтрокаИменКолонок);
			ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
			вМассив.Добавить(мСтруктура);
		Иначе
			вМассив.Добавить(мСтрока[мСтрокаИменКолонок]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ПрименитьФильтры(Элемент = Неопределено)
	Элементы.фТаблицаРазнарядки.ОтборСтрок = ПолучитьСтруктуруФильтров();
КонецПроцедуры

&НаКлиенте
Процедура РегулировкаОтображения(Команда)
	ПереключитьПризнакВидимости(ЭтаФорма.ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПризнакВидимости(пКнопка, пПринудительноОтметить = Ложь, пПризнак = Ложь)
	пКнопка.Пометка = ?(пПринудительноОтметить, пПризнак, Не пКнопка.Пометка);
	мЗаголовок = СтрЗаменить(пКнопка.Заголовок, " ", "");
	//пКнопка.Картинка = ?(пКнопка.Пометка, БиблиотекаКартинок.Очистить, БиблиотекаКартинок.УстановитьФлажки);
	//ЭтаФорма["фОтображение" + мЗаголовок] = пКнопка.Пометка;	//сохраняемый реквизит формы
	Элементы["фТаблицаРазнарядки" + мЗаголовок].Видимость = Не ЭтаФорма["фОтображение" + мЗаголовок];
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//восстанавливаем по сохраненным реквизитам формы
	РежимМаршрутов(Неопределено, фРежимМаршрутов);
	фЗаписьПриИзменении = Истина;
	ОбновитьЭлементы();
	ПрименитьФильтры();
	//TODO: Засунуть в фикс.соответствие или сделать динам/фильтры
	//ПереключитьПризнакВидимости(Элементы.РегулировкаОтображенияКолонна, Истина, фОтображениеКолонна);
	//ПереключитьПризнакВидимости(Элементы.РегулировкаОтображенияКомментарий, Истина, фОтображениеКомментарий);
	//ПереключитьПризнакВидимости(Элементы.РегулировкаОтображенияКонтрагент, Истина, фОтображениеКонтрагент);
	//ПереключитьПризнакВидимости(Элементы.РегулировкаОтображенияТипТС, Истина, фОтображениеТипТС);
	//ПереключитьПризнакВидимости(Элементы.РегулировкаОтображенияПозицияПП, Истина, фОтображениеПозицияПП);
	//ОбновитьОтображениеНаправленияЗаполнения();
	фТекущаяСтрокаИдентификаторДляВозобновления = 9999999;
	фТекущийИдентификаторСтрокиЗаявки = "";
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАвтоколоннуТекущегоПользователя(пФизическоеЛицо)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацииСрезПоследних.СтруктурнаяЕдиница КАК Колонна,
	|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&Дата) КАК ОтветственныеЛицаОрганизацииСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ уатМестонахождениеТС.Подразделение КАК Колонна ИЗ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС) КАК Колонны
	|	ПО Колонны.Колонна = ОтветственныеЛицаОрганизацииСрезПоследних.СтруктурнаяЕдиница
	|	И ФизическоеЛицо = &ФизическоеЛицо И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизации.Руководитель)");
	мЗапрос.УстановитьПараметр("Дата", ТекущаяДата());
	мЗапрос.УстановитьПараметр("ФизическоеЛицо", пФизическоеЛицо);
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Если мРезультат.Следующий() Тогда
		Возврат мРезультат.Колонна;
	КонецЕсли;
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	фОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(мТекущийПользователь, "ОсновнаяОрганизация");
	фКолонна = ПолучитьАвтоколоннуТекущегоПользователя(мТекущийПользователь.ФизЛицо);
	
	//мРеквизитыФормы = ПолучитьРеквизиты();ИзменитьРеквизиты(,);	TODO: Не убирать! Изучить методы... искал ведь вчера... а Изменить использовал даже, но не смог найти 03.02.2020
	// можно использовать для динамических фильтров, создается только несколько реквизитов на форме или перебираются колонки таблицы а реквизиты и поля - динамически...
//	Элементы.НадписьКоличествоМодифицированныхЗаписей.Видимость = Истина;
	//Элементы.ОчиститьРегистрРазнарядкиНаДату.Видимость = РольДоступна("уатАдминистратор");
	
	//на всякий случай ограничим ролью ?
	фРежимНачальникАвтоколонны = РольДоступна("НачальникАвтоколонны") И ЗначениеЗаполнено(фКолонна);
	фАдминистратор = РольДоступна("уатАдминистратор");
	
	Если фРежимНачальникАвтоколонны Или фАдминистратор Тогда
		Элементы.фКолонна.ТолькоПросмотр = Не фАдминистратор;
		Элементы.фКолонна.КнопкаОчистки = Не Элементы.фКолонна.ТолькоПросмотр;
		Элементы.фКолонна.РежимВыбораИзСписка = Ложь Или фАдминистратор;
	КонецЕсли;
	
	фМассивСтрокМест = Новый СписокЗначений;
	фМассивСтрокОтветственных = Новый СписокЗначений;
	ОбновитьСписокСтатусыОтказа(фСписокДействийСтатусыОтказа);
	
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ?(фАдминистратор, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСписокСтатусыОтказа(пСписокДействийСтатусыОтказа)
	мВыборкаСтатусыОтказа = Справочники.юкСтатусыОтказаЗаявки.Выбрать();
	пСписокДействийСтатусыОтказа = Новый СписокЗначений;
	Пока мВыборкаСтатусыОтказа.Следующий() Цикл
		Если Не мВыборкаСтатусыОтказа.ПометкаУдаления Тогда
			пСписокДействийСтатусыОтказа.Добавить(мВыборкаСтатусыОтказа.Ссылка);
		КонецЕсли;
	КонецЦикла;
	пСписокДействийСтатусыОтказа.Добавить(Справочники.юкСтатусыОтказаЗаявки.ПустаяСсылка(), "Убрать отказ");
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаполненияКолонны(Команда)
	мОписаниеОповещенияОбработкаВыбораПараметровЗаполненияКолонны = Новый ОписаниеОповещения("ОбработкаВыбораПараметровЗаполненияКолонны", ЭтаФорма);
	мПараметрыФормыПараметровЗаполненияКолонны = Новый Структура("ПараметрыЗаполнения", фПараметрыЗаполненияКолонны);
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаПараметровЗаполненияКолонны", мПараметрыФормыПараметровЗаполненияКолонны, ЭтаФорма, , , , мОписаниеОповещенияОбработкаВыбораПараметровЗаполненияКолонны, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПараметровЗаполненияКолонны(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		фПараметрыЗаполненияКолонны = пРезультат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляСтруктурыЗаполнения(пПараметрыЗаполнения, пСтрокаТаблицы)
	пПараметрыЗаполненияУсловияПрочихПолей = пПараметрыЗаполнения.УсловияПрочихПолей;
	пПараметрыЗаполненияУсловияЭталонногоПоля = пПараметрыЗаполнения.УсловияЭталонногоПоля;
	Для Каждого тПараКлючЗначение Из пПараметрыЗаполненияУсловияПрочихПолей Цикл
		Если тПараКлючЗначение.Значение.Использовать Тогда
			тПараКлючЗначение.Значение.ЗначениеСравнения = пСтрокаТаблицы[тПараКлючЗначение.Ключ]; 
		КонецЕсли;
	КонецЦикла;
	Для Каждого тПараКлючЗначение Из пПараметрыЗаполненияУсловияЭталонногоПоля Цикл
		Если тПараКлючЗначение.Значение.Использовать Тогда
			тПараКлючЗначение.Значение.ЗначениеСравнения = пСтрокаТаблицы["Колонна"];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ВыполняютсяУсловияПараметров(пСтрока, пПараметры, пЭталонноеПоле = "Колонна")
	мУсловияПрочихПолей = пПараметры.УсловияПрочихПолей;
	мУсловияЭталонногоПоля = пПараметры.УсловияЭталонногоПоля;
	
	мЭлементУсловийЭталонногоПоля = Неопределено;
	Для Каждого мПараКлючЗначение Из мУсловияЭталонногоПоля Цикл
		//Ничего другого пока не придумал [='( ] кроме как ВидСравнения в мегаусловии использовать... научите меня, если знаете способ быстрее/лаконичнее/короче
		Если мПараКлючЗначение.Значение.Использовать Тогда
			//непосредственно проверка
			мЭлементУсловийЭталонногоПоля = Неопределено;
			мСовпадаетСЭталоннымЗначением = пСтрока[пЭталонноеПоле] = мПараКлючЗначение.Значение.ЗначениеСравнения;
			мЭталонноеПолеЗаполнено = ЗначениеЗаполнено(пСтрока[пЭталонноеПоле]);
			Для Каждого тЭлементУсловия Из мПараКлючЗначение.Значение.МассивУсловий Цикл
				мЭлементУсловийЭталонногоПоля = тЭлементУсловия;
				Если тЭлементУсловия.ВидСравнения = "НеПустоИНеРавно" И (мЭталонноеПолеЗаполнено И Не мСовпадаетСЭталоннымЗначением) Тогда
					Прервать;	//остальные условия проверять нет смысла
				ИначеЕсли тЭлементУсловия.ВидСравнения = "НеПусто" И мЭталонноеПолеЗаполнено Тогда 
					Прервать;
				ИначеЕсли тЭлементУсловия.ВидСравнения = "Пусто" И Не мЭталонноеПолеЗаполнено Тогда
					Прервать;
				ИначеЕсли тЭлементУсловия.ВидСравнения = "НеРавно" И Не мСовпадаетСЭталоннымЗначением Тогда
					Прервать;
				ИначеЕсли тЭлементУсловия.ВидСравнения = "Равно" И мСовпадаетСЭталоннымЗначением Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мОкончательныйВидДействия = мЭлементУсловийЭталонногоПоля.ВидДействия;
	Если Найти("ПрерватьПропустить", мОкончательныйВидДействия) > 0 Тогда
		Возврат мОкончательныйВидДействия;	//прерывание и пропуск не требуют совпадения прочих полей, проверки эталонного было достаточно
	Иначе	//Если мЭлементУсловийЭталонногоПоля.ВидДействия = "Заполнить" Тогда
		//нужно еще проверить УсловияПрочихПолей
		Для Каждого мПараКлючЗначение Из мУсловияПрочихПолей Цикл
			Если мПараКлючЗначение.Значение.Использовать И пСтрока[мПараКлючЗначение.Ключ] <> мПараКлючЗначение.Значение.ЗначениеСравнения Тогда
				мОкончательныйВидДействия = мЭлементУсловийЭталонногоПоля.АльтернативноеДействие;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат мОкончательныйВидДействия;
КонецФункции

&НаКлиенте
Процедура фТаблицаРазнарядкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Элемент <> Неопределено Тогда	//исключаем случаи явного вызова при установке ОтказКолонны
		мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
		
		Если фИзменитьПутевойЛист Тогда
			мОтборПоПутевомуЛисту = Новый Структура("ПутевойЛист", мСтрокаТекущихДанных.ПутевойЛист);
			мСтрокиПутевогоЛиста = фТаблицаРазнарядки.НайтиСтроки(мОтборПоПутевомуЛисту);
			мМассивЗаписанныхИдентификаторов = Новый Массив();
			Для Каждого мСтрокаПЛ Из мСтрокиПутевогоЛиста Цикл
				мМассивЗаписанныхИдентификаторов.Добавить(СокрЛП(мСтрокаПЛ.ИдентификаторСтрокиЗаявки));
			КонецЦикла;
			
			ИзменитьПутевойЛист(мСтрокаТекущихДанных.ПутевойЛист, фДата, мСтрокаТекущихДанных.ВремяПодачи, мСтрокаТекущихДанных.ВремяВозврата, мСтрокаТекущихДанных.ДатаВозврата, мСтрокаТекущихДанных.ТС, мСтрокаТекущихДанных.Водитель, мСтрокаТекущихДанных.Водитель2, мСтрокаТекущихДанных.Прицеп, фДатаВозвратаСтарая, мМассивЗаписанныхИдентификаторов, ?(ЗначениеЗаполнено(мСтрокаТекущихДанных.ТипТСПЛ), мСтрокаТекущихДанных.ТипТСПЛ, Неопределено));
			фИзменитьПутевойЛист = Ложь;
			
			Если СокрЛП(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки) = "" Тогда
				Возврат;	//без обновления
			КонецЕсли;
			мОтборПоИдентификатору = Новый Структура("ИдентификаторСтрокиЗаявки", мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки);
			ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборПоИдентификатору, "ЗаписьУточнения");
		ИначеЕсли СокрЛП(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки) = "" Тогда
			Возврат;	//без записи и обновления
		КонецЕсли;
		
		
		//мИмяКолонки = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "фТаблицаРазнарядки", ""), "ГарНомер", ""), "ГосНомер", ""), "ТабНомер", "");
		
		//мСтрокаИменКлючевыхКолонок = "ТС,Водитель,Водитель2";	//список Ключевых реквизитов, изменение которых на те же самые не приводит к записи
		//мМультиСтрока = СтрЗаменить(мСтрокаИменКлючевыхКолонок, ",", Символы.ПС);
		//мИзменилисьЗначенияКлючевыхДанных = Ложь;
		//Для Итр = 1 По СтрЧислоСтрок(мМультиСтрока) Цикл
		//	мИмяКолонки = СтрПолучитьСтроку(мМультиСтрока, Итр);
		//	мИзменилисьЗначенияКлючевыхДанных = мИзменилисьЗначенияКлючевыхДанных Или (Элементы.фТаблицаРазнарядки.ТекущиеДанные[мИмяКолонки] <> Элементы.фТаблицаРазнарядки.ТекущиеДанные[мИмяКолонки + "ИсходноеЗначение"]);
		//КонецЦикла;
		
		Если Не ОтменаРедактирования И мСтрокаТекущихДанных <> Неопределено И (мСтрокаТекущихДанных.Модифицированность > 0 Или мСтрокаТекущихДанных.ЗаписьУточнения) Тогда
			Если фЗаписьПриИзменении Тогда
				мЗаписьРазнарядки = мСтрокаТекущихДанных.Модифицированность = 1;
				мСтрокаТекущихДанных.ЗаписьУточнения = мСтрокаТекущихДанных.ЗаписьУточнения Или мЗаписьРазнарядки;
				мЗаписьУточнения = мСтрокаТекущихДанных.ЗаписьУточнения;
				мОтборСтрок = Новый Структура("ИдентификаторСтрокиЗаявки", мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки);
				ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборСтрок, ?(мЗаписьРазнарядки И мЗаписьУточнения, "ЗаписьУточнения", ""));	//двойная запись, изменились поля сразу 2 "разделов"
			Иначе
				мСтрокаТекущихДанных.Модифицированность = 1;
				мСтрокаТекущихДанных.ЗаписьУточнения = Истина;
				мСтрокаТекущихДанных.СтрокаНеЗаполнена = Не (ЗначениеЗаполнено(мСтрокаТекущихДанных.ТС) И ЗначениеЗаполнено(мСтрокаТекущихДанных.Водитель));
				ОбновитьЭлементы();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементы()
	ОбновитьНадписьМодифицированность();
	ОбновитьЭлементыСогласования();
	ИзменитьРежим();
	ВосстановитьТекущуюСтрокуТаблицы();
	Элементы.фТаблицаРазнарядкиПозицияПП.Видимость = фОтображениеПозицияПП;
	Элементы.фТаблицаРазнарядкиКолонна.Видимость = фОтображениеКолонна;
	Элементы.фТаблицаРазнарядкиДатаВозврата.Видимость = фОтображениеДат;
	Элементы.фТаблицаРазнарядкиДанныеЗагрузки.Видимость = фОтображатьДанныеЗагрузки;
	Элементы.фТаблицаРазнарядкиГруппа1.Видимость = Не фОтображатьДанныеЗагрузки;
	Элементы.фТаблицаРазнарядкиГруппа2.Видимость = Не фОтображатьДанныеЗагрузки;
	Элементы.фТаблицаРазнарядкиПрицеп.Видимость = фОтображениеПрицеп;
	Элементы.фТаблицаРазнарядкиВодитель2.Видимость = (Не фРежимМаршрутов) Или фОтображатьВодитель2ВРежимеМаршрутов;
	Элементы.фТаблицаРазнарядкиТабНомерВодителя2.Видимость = (Не фРежимМаршрутов) Или фОтображатьВодитель2ВРежимеМаршрутов;
	Элементы.фТаблицаРазнарядкиГруппа19.Видимость = (НЕ фРежимМаршрутов) Или фДатаВозвратаВРежимеМаршрутов;
	Элементы.фТаблицаРазнарядкиТипТСПЛ.Видимость = фОтображатьТипТСПЛ;
	Элементы.фТаблицаРазнарядкиКолонна.Видимость = Не фОтображатьТипТСПЛ;
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьТекущуюСтрокуТаблицы()
	мСтрокиПоИдентификаторуСтрокиЗаявки = Неопределено;
	Если фТаблицаРазнарядки.Количество() > 0 Тогда
		//была активна какая-то строка
		Если СокрЛП(фТекущийИдентификаторСтрокиЗаявки) <> "" Тогда
			мОтборПоИдентификатору = Новый Структура("ИдентификаторСтрокиЗаявки", фТекущийИдентификаторСтрокиЗаявки);
			мСтрокиПоИдентификаторуСтрокиЗаявки = фТаблицаРазнарядки.НайтиСтроки(мОтборПоИдентификатору);
			Если мСтрокиПоИдентификаторуСтрокиЗаявки.Количество() > 0 Тогда
				Элементы.фТаблицаРазнарядки.ТекущаяСтрока = мСтрокиПоИдентификаторуСтрокиЗаявки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		Если фТекущаяСтрокаИдентификаторДляВозобновления <> 9999999 Тогда
			Если фТаблицаРазнарядки.НайтиПоИдентификатору(фТекущаяСтрокаИдентификаторДляВозобновления) <> Неопределено Тогда
				Элементы.фТаблицаРазнарядки.ТекущаяСтрока = фТекущаяСтрокаИдентификаторДляВозобновления;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыСогласования()
	мНеСогласованоТС = фТаблицаРазнарядки.Итог("НеСогласованоВодительТС");
	мНеСогласованоМест = фТаблицаРазнарядки.Итог("НеСогласованоМестоОказанияУслуг");
	мЕстьНесогласованныеЗаписи = Макс(мНеСогласованоТС, мНеСогласованоМест);
	//Элементы.НадписьКоличествоНесогласованныхЗаписей.Видимость = мЕстьНесогласованныеЗаписи;
	//Элементы.НадписьКоличествоНесогласованныхЗаписей.Заголовок = "Не согласовано: " + ?(фРежимНачальникАвтоколонны, мНеСогласованоТС, Макс(мНеСогласованоТС, мНеСогласованоМест));
	//Элементы.Согласовать.Видимость = мЕстьНесогласованныеЗаписи;	// место оказания услуг, только начальник отдела Эксплуатации
	Элементы.СогласоватьВодителиТС.Видимость = мНеСогласованоТС > 0;	//водители тс и колонны
	Элементы.Перезаполнить.Видимость = фТаблицаРазнарядки.Количество() > 0;
	//Элементы.фТаблицаРазнарядкиМестоОказанияУслуг.Доступность = Не фРежимНачальникАвтоколонны;
	//Элементы.фТаблицаРазнарядкиВремяПодачи.Доступность = Не фРежимНачальникАвтоколонны;
	Элементы.фТаблицаРазнарядкиКолонна.Видимость = Не фРежимНачальникАвтоколонны;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьМодифицированность()
	мЕстьМодифицированныеЗаписи = фТаблицаРазнарядки.Итог("Модифицированность") > 0;
//	Элементы.НадписьКоличествоМодифицированныхЗаписей.Видимость = мЕстьМодифицированныеЗаписи;
//	Элементы.НадписьКоличествоМодифицированныхЗаписей.Заголовок = "Изменено записей: " + фТаблицаРазнарядки.Итог("Модифицированность") + " из " + фТаблицаРазнарядки.Количество();
	Элементы.ОтменитьИзменения.Доступность = мЕстьМодифицированныеЗаписи;
	Элементы.ЗаписатьИзменения.Доступность = мЕстьМодифицированныеЗаписи;
	Элементы.ОтменитьИзменения.Видимость = мЕстьМодифицированныеЗаписи;
	Элементы.ЗаписатьИзменения.Видимость = мЕстьМодифицированныеЗаписи;
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьМестаОказанияУслуг(пОтборСтрок)
	мСтрокиРазнарядкиСУточнениями = фТаблицаРазнарядки.НайтиСтроки(пОтборСтрок);
	Для Каждого мСтрокаРазнарядки Из мСтрокиРазнарядкиСУточнениями Цикл
		мСтрокаРазнарядки.ЗаписьУточнения = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(пОтборСтрок, пУдаляемоеИмя = "")
	мИменаКолонок = "ИдентификаторСтрокиЗаявки, ТС, ТСИсходноеЗначение, Водитель, ВодительИсходноеЗначение, Водитель2, Водитель2ИсходноеЗначение, ВремяПодачи, ВремяВозврата, ЦехМаршрут, Колонна, МестоОказанияУслуг, Ответственный, Комментарий, СтатусыОтказа, ТипТС, КолоннаИсходноеЗначение, ОтказКолонны, ЗаписьУточнения, ТСПринудительноСтерто, Смена, ПутевойЛист, Прицеп, ИзмененоПослеСогласования";
	Если пУдаляемоеИмя <> "" Тогда
		мИменаКолонок = СтрЗаменить(мИменаКолонок, ", " + пУдаляемоеИмя, "");
	КонецЕсли;
	мСтруктурыСтрок = ПолучитьМассивСтрок(мИменаКолонок, пОтборСтрок);
	Если мСтруктурыСтрок.Количество() > 0 Тогда
		мРезультатЗаписи = ЗаписатьСтрокиРазнарядкиНаСервере(фДата, мСтруктурыСтрок);
		ОбновитьСтроки(мРезультатЗаписи.МассивЗаписанныхИдентификаторов, мРезультатЗаписи.ЗаписьУточнения);
	КонецЕсли;
КонецПроцедуры

// функция обязана вернуть структуру в полями:
//	Успешно - Булево - результат выполнения, Истина - все записано, Ложь - записано частично или ничего
//	МассивЗаписанныхИдентификаторов - Массив строк - содержит элеенты со значениями поля ИдентификаторСтрокиЗаявки тех записей, которые небыли записаны в базу
//	ЗаписьУточнения - число (0/1/2), где 0 - запись полей разнарядки (ТС и Водители), 1 - запись прочих полей, 2 - запись всех полей
&НаСервереБезКонтекста
Функция ЗаписатьСтрокиРазнарядкиНаСервере(пДата, пСтруктурыСтрок)
	Возврат РегистрыСведений.Разнарядка.ЗаписатьСтрокиРазнарядкиНаСервере(пДата, пСтруктурыСтрок);
КонецФункции

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	Если фТаблицаРазнарядки.Итог("Модифицированность") > 0 Тогда
		мОписаниеОповещенияОтветНаВопросОтменаИзменений = Новый ОписаниеОповещения("ОбработкаОтветаВопросОтменитьИзменения", ЭтаФорма);
		ПоказатьВопрос(мОписаниеОповещенияОтветНаВопросОтменаИзменений, "Все несохраненные изменения будут потеряны. Данные будут обновлены. Желаете продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаВопросОтменитьИзменения(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И пРезультат = КодВозвратаДиалога.Да Тогда
		мОтборМодифицированность = Новый Структура("Модифицированность", 1);
		ОбновитьСтроки(ПолучитьМассивСтрок("ИдентификаторСтрокиЗаявки", мОтборМодифицированность));
		мОтборМодифицированность = Новый Структура("ЗаписьУточнения", Истина);
		ОбновитьСтроки(ПолучитьМассивСтрок("ИдентификаторСтрокиЗаявки", мОтборМодифицированность));
	КонецЕсли;
КонецПроцедуры

//функция возвращает необходимые колонки из ТЧ с опциональным отбором
//если необходимая колонка - только одна, будет возвращен массив значений
//если колонок несколько - будет возвращен массив структур
&НаКлиенте
Функция ПолучитьМассивСтрок(пСтрокаИменКолонок, пОтбор = Неопределено)
	вМассив = Новый Массив;
	
	мОтобранныеСтроки = ?(пОтбор <> Неопределено, фТаблицаРазнарядки.НайтиСтроки(пОтбор), фТаблицаРазнарядки);
	мЧистыйМассив = Найти(пСтрокаИменКолонок, ",") = 0;	//только одно значение
	Для Каждого мСтрока Из мОтобранныеСтроки Цикл
		Если мЧистыйМассив Тогда
			//не заворачиваем в структуру
			вМассив.Добавить(мСтрока[пСтрокаИменКолонок]);
		Иначе
			мСтруктура = Новый Структура(пСтрокаИменКолонок);
			ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
			вМассив.Добавить(мСтруктура);
		КонецЕсли;
	КонецЦикла;
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	Если фТаблицаРазнарядки.Итог("Модифицированность") > 0 Тогда
		мОтборМодифицированныхСтрок = Новый Структура("Модифицированность", 1);
		ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборМодифицированныхСтрок, "ЗаписьУточнения");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьДанныеРазнарядки(Команда)
	Если фТаблицаРазнарядки.Итог("НеСогласованоМестоОказанияУслуг") > 0 Тогда
		мОтборНеСогласованныхСтрок = Новый Структура("НеСогласованоМестоОказанияУслуг", 1);
		ПодтвердитьМестаОказанияУслуг(мОтборНеСогласованныхСтрок);
		ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборНеСогласованныхСтрок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРегистрРазнарядкиНаДату(Команда)
	//вызываем функцию очистки регистра
	ОчиститьРегистрРазнарадякиНаДатуНаСервере(фДата);
	фДатаПриИзменении(Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчиститьРегистрРазнарадякиНаДатуНаСервере(пДата)
	мНаборЗаписей = РегистрыСведений.Разнарядка.СоздатьНаборЗаписей();
	мНаборЗаписей.Отбор.Дата.Установить(пДата);
	мНаборЗаписей.Прочитать();
	мНаборЗаписей.Очистить();
	мНаборЗаписей.Записать(Истина);
КонецФункции

&НаКлиенте
Процедура фКолоннаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если фРежимНачальникАвтоколонны И (Не фАдминистратор) И Элемент.СписокВыбора.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение( , "Вы начальник колонны. Чтобы убрать фильтр, сотрите его (кнопка Х в поле колонны) а затем снова выберите дату разнарядки");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фКолоннаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Не фРежимНачальникАвтоколонны И Элемент.РежимВыбораИзСписка И Элемент.СписокВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ЯвныйМассив = Новый Массив;
		ПодобныйМассив = Новый Массив;
		мВведеноЧисло = СтрокаПоМаске(Текст, "1234567890") = Текст;
		Для Каждого мЭлемент Из Элемент.СписокВыбора Цикл
			//список выбора небольшой, будем действовать "в лоб"
			мРеквизитыКолонны = ПолучитьРеквизитыОбъекта(мЭлемент.Значение, "Наименование, Код");
			Если мВведеноЧисло И (СтрокаПоМаске(мРеквизитыКолонны.Наименование, "1234567890") = Текст Или СтрокаПоМаске(мРеквизитыКолонны.Код, "1234567890") = Текст) Тогда
				ЯвныйМассив.Добавить(мЭлемент.Значение);
			ИначеЕсли Найти(мРеквизитыКолонны.Наименование, Текст) <> 0 Или Найти(мРеквизитыКолонны.Код, Текст) <> 0 Тогда
				ПодобныйМассив.Добавить(мЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если ЯвныйМассив.Количество() = 1 Тогда
			ДанныеВыбора.Добавить(ЯвныйМассив[0]);
		Иначе
			Для Каждого мЭлемент Из ЯвныйМассив Цикл
				ДанныеВыбора.Добавить(мЭлемент);
			КонецЦикла;
			Для Каждого мЭлемент Из ПодобныйМассив Цикл
				ДанныеВыбора.Добавить(мЭлемент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоМаске(пСтрока, пМаска, пМаксимумСимволов = -1)
	вРезультат = "";
	пСтрока = СокрЛП(пСтрока);
	мДлинаИсходнойСтроки = СтрДлина(пСтрока);
	Для мИтр = 1 По мДлинаИсходнойСтроки Цикл
		мСимвол = Сред(пСтрока, мИтр, 1);
		Если Найти(пМаска, мСимвол) > 0 Тогда
			Если пМаксимумСимволов > 0 и мДлинаИсходнойСтроки > пМаксимумСимволов Тогда
				Если СтрДлина(вРезультат) = пМаксимумСимволов Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			вРезультат = вРезультат + мСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат вРезультат;
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	мЗначениеПараметровЗаполненияИзНастроек = Настройки["фПараметрыЗаполненияКолонны"];
	мСтруктураЗначенияУсловияПрочихПолей = Новый Структура("Использовать, ЗначениеСравнения", Истина, Неопределено);
	
	мТекущаяВерсияПараметров = "0.5b";
	
	Если Настройки = Неопределено Или Настройки["фНастройкаУпорядочивания"] = Неопределено Или Настройки["фНастройкаУпорядочивания"] = 0 Тогда
		фНастройкаУпорядочивания = 1;
		фНеКопироватьПоПризнакуВыходнойПраздник = Истина;
	КонецЕсли;
	Если мЗначениеПараметровЗаполненияИзНастроек = Неопределено Или Не мЗначениеПараметровЗаполненияИзНастроек.Свойство("Версия") Или мЗначениеПараметровЗаполненияИзНастроек.Версия <> мТекущаяВерсияПараметров Тогда
		//если состав или еще что-то изменится, старые сохраненные настройки должны быть переопределены под новую версию...
		фПараметрыЗаполненияКолонны = Новый Структура();
		
		мСтруктураУсловияПрочихПолей = Новый Структура();
		мСтруктураУсловияПрочихПолей.Вставить("Контрагент", мСтруктураЗначенияУсловияПрочихПолей);
		мСтруктураУсловияПрочихПолей.Вставить("Цех", мСтруктураЗначенияУсловияПрочихПолей);
		мСтруктураУсловияПрочихПолей.Вставить("ТипТС", мСтруктураЗначенияУсловияПрочихПолей);
		мСтруктураУсловияПрочихПолей.Вставить("ВремяПодачи", мСтруктураЗначенияУсловияПрочихПолей);
		
		мМассивУсловий = Новый Массив();
		мСтруктураМассиваУсловийУсловияЭталонногоПоля = Новый Структура("ВидСравнения, ВидДействия, АльтернативноеДействие");
		мСтруктураМассиваУсловийУсловияЭталонногоПоля.Вставить("ВидСравнения", "НеПусто");//1
		мСтруктураМассиваУсловийУсловияЭталонногоПоля.Вставить("ВидДействия", "Прервать");
		мСтруктураМассиваУсловийУсловияЭталонногоПоля.Вставить("АльтернативноеДействие", "Прервать");
		мМассивУсловий.Добавить(мСтруктураМассиваУсловийУсловияЭталонногоПоля);
		
		мСтруктураМассиваУсловийУсловияЭталонногоПоля2 = Новый Структура("ВидСравнения, ВидДействия, АльтернативноеДействие");
		мСтруктураМассиваУсловийУсловияЭталонногоПоля2.Вставить("ВидСравнения", "Пусто");//2
		мСтруктураМассиваУсловийУсловияЭталонногоПоля2.Вставить("ВидДействия", "Заполнить");
		мСтруктураМассиваУсловийУсловияЭталонногоПоля2.Вставить("АльтернативноеДействие", "Прервать");
		мМассивУсловий.Добавить(мСтруктураМассиваУсловийУсловияЭталонногоПоля2);
		
		мСтруктураЗначенияУсловияЭталонногоПоля = Новый Структура("Использовать, ЗначениеСравнения, МассивУсловий", Истина, Неопределено, мМассивУсловий);
		
		мСтруктураУсловияЭталонногоПоля = Новый Структура;
		мСтруктураУсловияЭталонногоПоля.Вставить("ОстановитьсяНаЗаполненном", мСтруктураЗначенияУсловияЭталонногоПоля);
		
		//мСтруктураУсловияЭталонногоПоля.Вставить("ВсеНезаполненные", мСтруктураЗначенияУсловияЭталонногоПоля);
		//мСтруктураУсловияЭталонногоПоля.Вставить("ОстановкаПриНесовпадении", мСтруктураЗначенияУсловияЭталонногоПоля);
		
		фПараметрыЗаполненияКолонны.Вставить("УсловияПрочихПолей", мСтруктураУсловияПрочихПолей);
		фПараметрыЗаполненияКолонны.Вставить("УсловияЭталонногоПоля", мСтруктураУсловияЭталонногоПоля);
		фПараметрыЗаполненияКолонны.Вставить("Версия", мТекущаяВерсияПараметров);
	Иначе
		фПараметрыЗаполненияКолонны = мЗначениеПараметровЗаполненияИзНастроек;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТекущемуЗначению(Команда)
	//небольшое извращение
	мИмяФильтра = СтрЗаменить(СтрЗаменить(Элементы.фТаблицаРазнарядки.ТекущийЭлемент.Имя, "фТаблицаРазнарядки", ""), "Маршрут", "");
	Если Найти("КонтрагентЦехКолоннаТипТС", мИмяФильтра) > 0 Тогда
		ЭтаФорма["ф" + СтрЗаменить(СтрЗаменить(Элементы.фТаблицаРазнарядки.ТекущийЭлемент.Имя, "фТаблицаРазнарядки", ""), "Маршрут", "")] = Элементы.фТаблицаРазнарядки.ТекущиеДанные[СтрЗаменить(Элементы.фТаблицаРазнарядки.ТекущийЭлемент.Имя, "фТаблицаРазнарядки", "")];
		ПрименитьФильтры(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиКолоннаПриИзменении(Элемент)
	Если Элементы.фТаблицаРазнарядки.ТекущиеДанные <> Неопределено И Элементы.фТаблицаРазнарядки.ТекущиеДанные.Колонна.Пустая() Тогда
		Элементы.фТаблицаРазнарядкиКолонна.РежимВыбораИзСписка = Не Элементы.фТаблицаРазнарядкиКолонна.РежимВыбораИзСписка;
	КонецЕсли;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.Модифицированность = 1;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.ЗаписьУточнения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиПриАктивизацииСтроки(Элемент)
	Если Элементы.фТаблицаРазнарядки.ТекущиеДанные <> Неопределено Тогда
		фТекущаяСтрокаИдентификаторДляВозобновления = Элементы.фТаблицаРазнарядки.ТекущаяСтрока;
		фТекущийИдентификаторСтрокиЗаявки = Элементы.фТаблицаРазнарядки.ТекущиеДанные.ИдентификаторСтрокиЗаявки;
		//Если фТекущаяСтрокаИдентификаторДляВозобновления <> Элементы.фТаблицаРазнарядки.ТекущаяСтрока И Элементы.фТаблицаРазнарядкиКолонна.РежимВыбораИзСписка И Элементы.фТаблицаРазнарядкиКолонна.СписокВыбора.Количество() = 0 Тогда
		//	фТекущаяСтрокаИдентификаторДляВозобновления = Элементы.фТаблицаРазнарядки.ТекущаяСтрока;
		//	//TODO: протестировать формирование списка выбора колонки после активации, в интерфейсе ТАКСИ - проверить будет ли перескакивать или нет...
		//	мКолонныПоТипу = ?(фСоответствияКолоннТипам <> Неопределено, фСоответствияКолоннТипам.Получить(Элементы.фТаблицаРазнарядки.ТекущиеДанные.ТипТС), Неопределено);
		//	Если мКолонныПоТипу <> Неопределено Тогда
		//		Элементы.фТаблицаРазнарядкиКолонна.СписокВыбора.ЗагрузитьЗначения(мКолонныПоТипу);
		//	Иначе
		//		Элементы.фТаблицаРазнарядкиКолонна.РежимВыбораИзСписка = Ложь;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиГарНомерТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = НайтиТС(Текст, фДата, фМестоРаботы);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиТС(пТекст, пДатаРазнарядки, пМестоРаботы)
	//TODO: прикрутить отбор по колонне если нужно?
	вСписок = Новый СписокЗначений;
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатТС.Ссылка,
	|	уатТС.Наименование,
	|	уатТС.ГосударственныйНомер,
	|	уатТС.ГаражныйНомер,
	|	уатМестонахождениеТС.Подразделение КАК ПодразделениеТС,
	|	ВЫБОР КОГДА уатТС.ГосударственныйНомер ПОДОБНО ""%"" + &СтрПск + ""%"" ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК КатегорияПорядка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаРазнарядки) КАК уатМестонахождениеТС
	|	ПО уатМестонахождениеТС.ТС = уатТС.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.юкМестаРаботы.СписокПодразделений КАК МестаРаботы
	|	ПО МестаРаботы.Подразделение = уатМестонахождениеТС.Подразделение
	| ГДЕ 	уатТС.ГаражныйНомер = """" + &СтрПск + """" ИЛИ уатТС.ГосударственныйНомер ПОДОБНО ""%"" + &СтрПск + ""%""
	| 		И уатМестонахождениеТС.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|		И (НЕ уатМестонахождениеТС.Состояние.ЗапретитьВыпискуПЛ)
	|		И Выбор Когда &ФильтрПоМестуРаботы ТОГДА НЕ МестаРаботы.Подразделение ЕСТЬ NULL ИНАЧЕ ИСТИНА КОНЕЦ
	|УПОРЯДОЧИТЬ ПО КатегорияПорядка ВОЗР";
	
	Запрос.УстановитьПараметр("СтрПск", "" + пТекст);	
	Запрос.УстановитьПараметр("ДатаРазнарядки", пДатаРазнарядки);
	Запрос.УстановитьПараметр("ФильтрПоМестуРаботы", ЗначениеЗаполнено(пМестоРаботы) И пМестоРаботы.СписокПодразделений.Количество() > 0);
	Запрос.УстановитьПараметр("МестоРаботы", пМестоРаботы);
	мТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если мТаблицаРезультата.Количество() > 0 ТОгда
		Для Каждого мСтрокаТаблицы Из мТаблицаРезультата Цикл
			вСписок.Добавить(мСтрокаТаблицы.Ссылка, СокрЛП(мСтрокаТаблицы.ГаражныйНомер) + " " + СокрЛП(мСтрокаТаблицы.Наименование) + " <" + СокрЛП(мСтрокаТаблицы.ГосударственныйНомер) + ">");
		КонецЦикла;
	КонецЕсли;
	
	Возврат вСписок;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиВодителя(пТекст)
	
	вСписок = Новый СписокЗначений;
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатСотрудники.Ссылка,
	|	уатСотрудники.Наименование,
	|	уатСотрудники.Код
	|ИЗ
	|	Справочник.уатСотрудники КАК уатСотрудники
	| ГДЕ (уатСотрудники.Наименование ПОДОБНО ""%"" + &СтрПск + ""%""
	|	ИЛИ уатСотрудники.Код ПОДОБНО &СтрПск + ""%"")
	|	И уатСотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|	И уатСотрудники.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
	|	И уатСотрудники.Родитель <> ЗНАЧЕНИЕ(Справочник.уатСотрудники.Сторонние)
	|УПОРЯДОЧИТЬ ПО уатСотрудники.Наименование ВОЗР";
	
	Запрос.УстановитьПараметр("СтрПск", "" + пТекст);	
	мТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если мТаблицаРезультата.Количество() > 0 ТОгда
		Для Каждого мСтрокаТаблицы Из мТаблицаРезультата Цикл
			вСписок.Добавить(мСтрокаТаблицы.Ссылка, СокрЛП(мСтрокаТаблицы.Код) + " " + СокрЛП(мСтрокаТаблицы.Наименование));
		КонецЦикла;
	КонецЕсли;
	
	Возврат вСписок;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыОбъекта(пОбъект, пСтрокаРеквизитов);
	вСтруктура = Новый Структура();
	мСтрокаРеквизитов = СтрЗаменить(пСтрокаРеквизитов, ",", Символы.ПС);
	Если СтрДлина(мСтрокаРеквизитов) > 0 Тогда
		Для Итр = 1 По СтрЧислоСтрок(мСтрокаРеквизитов) Цикл
			мПоле = СокрЛП(СтрПолучитьСтроку(мСтрокаРеквизитов, Итр));
			вСтруктура.Вставить(мПоле, пОбъект[мПоле]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат вСтруктура;
КонецФункции

&НаКлиенте
Процедура фТаблицаРазнарядкиТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.ТС = ВыбранноеЗначение;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.Модифицированность = 1;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.ЗаписьУточнения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиТабНомерВодителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = НайтиВодителя(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиТабНомерВодителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.Водитель = ВыбранноеЗначение;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.Модифицированность = 1;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.ЗаписьУточнения = Истина;
КонецПроцедуры

#Область Печать

&НаКлиенте
Процедура Печать(Команда)
	СтрДанные = Новый Структура;
	СтрДанные.Вставить("ФДата", ФДата);
	СтрДанные.Вставить("ФКонтрагент", ФКонтрагент);
	СтрДанные.Вставить("фКолонна", фКолонна);
	СтрДанные.Вставить("фТипТС", фТипТС);
	СтрДанные.Вставить("фЦех", фЦех);
	СтрДанные.Вставить("фРежимНачальникАвтоколонны", фРежимНачальникАвтоколонны);
	СтрДанные.Вставить("фМестоРаботы", фМестоРаботы);
	
	П = Новый Структура;
	П.Вставить("СтрДанные", СтрДанные);
	
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаПечатьРазнарядки", П, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка, пПринудительно = Неопределено)
	Если фТаблицаРазнарядки.Итог("Модифицированность") > 0 И ?(пПринудительно = Неопределено, Ложь, Не пПринудительно) Тогда
		СтандартнаяОбработка = Ложь;
		мОписаниеОповещенияОтветЗаписатьМодифицированныеСтроки = Новый ОписаниеОповещения("ОбработкаОтветаЗаписатьМодифицированныеСтроки", ЭтаФорма);
		ПоказатьВопрос(мОписаниеОповещенияОтветЗаписатьМодифицированныеСтроки, "В разнарядке остались незаписанные данные. Выход без сохранения приведет к потере указанных Вами данных. Сохранить данные?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаЗаписатьМодифицированныеСтроки(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И пРезультат = КодВозвратаДиалога.Да Тогда
		мОтборМодифицированныхСтрок = Новый Структура("Модифицированность", 1);
		ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборМодифицированныхСтрок, "ЗаписьУточнения");
		мОтборМодифицированныхСтрок = Новый Структура("ЗаписьУточнения", Истина);
		ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборМодифицированныхСтрок);
	КонецЕсли;
	ПередЗакрытием(Ложь, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура фКолоннаОчистка(Элемент, СтандартнаяОбработка)
	фРежимНачальникАвтоколонны = Ложь;
	ОбновитьЭлементы();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежим()
	Если фРежимНачальникАвтоколонны Тогда
		Элементы.фКолонна.РежимВыбораИзСписка = Ложь;
		//Элементы.фКолонна.КнопкаСпискаВыбора = Ложь;
		//Элементы.фКолонна.КнопкаВыбора = Ложь;
	Иначе
		Элементы.фКолонна.РежимВыбораИзСписка = Истина;
		//Элементы.фКолонна.КнопкаСпискаВыбора = Истина;
		//Элементы.фКолонна.КнопкаВыбора = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиТСПриИзменении(Элемент)
	//после записи строки обновятся
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мСтрокаТекущихДанных.ИзмененоПослеСогласования = Истина;
		мСтрокаТекущихДанных.Модифицированность = Истина;
		Если ЗначениеЗаполнено(мСтрокаТекущихДанных.ТС) Тогда
			мРеквизитыТС = ПолучитьРеквизитыОбъекта(мСтрокаТекущихДанных.ТС, "ГаражныйНомер, ГосударственныйНомер");
			мСтрокаТекущихДанных.ГосНомерТС = мРеквизитыТС.ГосударственныйНомер;
			мСтрокаТекущихДанных.ТСПринудительноСтерто = Ложь;
			мСтрокаТекущихДанных.ГарНомерТС = мРеквизитыТС.ГаражныйНомер;
			мСтрокаТекущихДанных.Колонна = фСоответствиеТСКолоннам.Получить(мСтрокаТекущихДанных.ТС);
			Если мСтрокаТекущихДанных.Колонна <> мСтрокаТекущихДанных.КолоннаИсходноеЗначение Тогда
				мСтрокаТекущихДанных.КолоннаИсходноеЗначение = мСтрокаТекущихДанных.Колонна;	//предотвращает затирание ТС и водителя в случае смены колонны
				мСтрокаТекущихДанных.ЗаписьУточнения = Истина;
			КонецЕсли;
			мМассивСотрудников = фСоответствиеТСВодителям.Получить("" + СокрЛП(мСтрокаТекущихДанных.ГарНомерТС) + ?(мСтрокаТекущихДанных.ВтораяСмена, " 2", " 1"));
			Если мМассивСотрудников <> Неопределено И мМассивСотрудников.Количество() > 0 Тогда
				мСтрокаТекущихДанных.Водитель = мМассивСотрудников[0];
			КонецЕсли;
			Если ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) Тогда
				фИзменитьПутевойЛист = Истина;
			КонецЕсли;
		Иначе
			//мСтрокаТекущихДанных.ГосНомерТС = "";
			//мСтрокаТекущихДанных.ГарНомерТС = "";
			мСтрокаТекущихДанных.Водитель = ПредопределенноеЗначение("Справочник.уатСотрудники.ПустаяСсылка");
		КонецЕсли;
		Элементы.фТаблицаРазнарядки.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиВодительПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мСтрокаТекущихДанных.Модифицированность = 1;
		мСтрокаТекущихДанных.ЗаписьУточнения = Истина;
		Если Элементы.фТаблицаРазнарядки.ТекущийЭлемент = Элементы.фТаблицаРазнарядкиВодитель Тогда
			Если ЗначениеЗаполнено(мСтрокаТекущихДанных.Водитель) Тогда
				мРеквизитыВодителя = ПолучитьРеквизитыОбъекта(мСтрокаТекущихДанных.Водитель, "Код");
				мСтрокаТекущихДанных.ТабНомерВодителя = мРеквизитыВодителя.Код;
				Если ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) Тогда
					фИзменитьПутевойЛист = Истина;
				КонецЕсли;
			Иначе
				мСтрокаТекущихДанных.ТабНомерВодителя = "";
			КонецЕсли;
			// пользователи отказались сами
			//Элементы.фТаблицаРазнарядки.ТекущийЭлемент = Элементы.фТаблицаРазнарядкиВодитель2;
		Иначе
			Если ЗначениеЗаполнено(мСтрокаТекущихДанных.Водитель2) Тогда
				мРеквизитыВодителя = ПолучитьРеквизитыОбъекта(мСтрокаТекущихДанных.Водитель2, "Код");
				мСтрокаТекущихДанных.ТабНомерВодителя2 = мРеквизитыВодителя.Код;
			Иначе
				мСтрокаТекущихДанных.ТабНомерВодителя2 = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) Тогда
				фИзменитьПутевойЛист = Истина;
			КонецЕсли;
			
			// пользователи отказались сами
			//сменим текущую строку:
			//мСтрокаТаблицы = фТаблицаРазнарядки.НайтиПоИдентификатору(Элементы.фТаблицаРазнарядки.ТекущаяСтрока);
			//Если мСтрокаТаблицы <> Неопределено Тогда
			//	мНачальныйИндекс = фТаблицаРазнарядки.Индекс(мСтрокаТаблицы) + 1;
			//	Если мНачальныйИндекс <> фТаблицаРазнарядки.Количество() Тогда
			//		Для Итр = мНачальныйИндекс По фТаблицаРазнарядки.Количество() - 1 Цикл
			//			мИдентификаторТекущейСтрокиТаблицы = фТаблицаРазнарядки[Итр].ПолучитьИдентификатор();
			//			Если Элементы.фТаблицаРазнарядки.ПроверитьСтроку(мИдентификаторТекущейСтрокиТаблицы) Тогда
			//				Элементы.фТаблицаРазнарядки.ТекущаяСтрока = мИдентификаторТекущейСтрокиТаблицы;
			//				фТекущаяСтрокаИдентификаторДляВозобновления = мИдентификаторТекущейСтрокиТаблицы;
			//				фТекущийИдентификаторСтрокиЗаявки = фТаблицаРазнарядки[Итр].ИдентификаторСтрокиЗаявки;
			//				Прервать;
			//			КонецЕсли;
			//		КонецЦикла;
			//	КонецЕсли;
			//КонецЕсли;
			//Элементы.фТаблицаРазнарядки.ТекущийЭлемент = Элементы.фТаблицаРазнарядкиМестоОказанияУслуг;
		КонецЕсли;
		Элементы.фТаблицаРазнарядки.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ДанныеВыбора = НайтиТС(Текст);
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = НайтиВодителя(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиКолоннаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//TODO: попробовать СтандартнаяОбработка = Ложь И ДанныеВыбора = ... как в выборе ТС и Водителя, по отбору ТипТС. Первая попытка вышла боком
	//	динамический список выбора не использовать, провести тест в интерфейсе ТАКСИ
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	фДатаПриИзменении(Неопределено);
	ПрименитьФильтры();
КонецПроцедуры

&НаКлиенте
Процедура НадписьКоличествоОтказовНажатие(Элемент)
	фОтказы = Не фОтказы;
	ПрименитьФильтры();
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиПриИзмененииПоляУточнения(Элемент)
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мЦехМаршрутИзСправочникаМаршрутов = (ТипЗнч(мСтрокаТекущихДанных.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты"));
		Если Элемент.Имя <> "фТаблицаРазнарядкиДатаВозврата" Тогда
			Если (Не ЗначениеЗаполнено(мСтрокаТекущихДанных.ЦехМаршрут)) Или ((ЗначениеЗаполнено(мСтрокаТекущихДанных.ЦехМаршрут) И (Не мЦехМаршрутИзСправочникаМаршрутов)) Или Элемент.Имя <> "фТаблицаРазнарядкиВремяВозврата" И Элемент.Имя <> "фТаблицаРазнарядкиВремяПодачи") Тогда
				//поле отсутствует "фТаблицаРазнарядкиДатаВозврата" в разнарядке и не должно вызывать запись, но последующие строки данной процедуры приведут к записи ПЛ и
				// обновлению строки (только если ПЛ уже выписан)
				// поля фТаблицаРазнарядкиВремяВозврата И фТаблицаРазнарядкиВремяВозврата не должны вызывать запись, если поле ЦехМаршрут заполнено значением из справочника Маршруты
				мСтрокаТекущихДанных.ЗаписьУточнения = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) И (Элемент.Имя = "фТаблицаРазнарядкиТипТСПЛ" ИЛИ Элемент.Имя = "фТаблицаРазнарядкиДатаВозврата" Или Элемент.Имя = "фТаблицаРазнарядкиВремяПодачи" Или Элемент.Имя = "фТаблицаРазнарядкиВремяВозврата") Тогда
			фИзменитьПутевойЛист = Истина;
		ИначеЕсли (Элемент = Элементы.фТаблицаРазнарядкиЦехМаршрут) И  (Не мСтрокаТекущихДанных.ЦехМаршрут.Пустая()) И мЦехМаршрутИзСправочникаМаршрутов Тогда
			//обновляем при изменении поля маршрута
			//TODO: ничег делать не нужно, просто остановиться на минуту и посозерцать реквизит "Ответсвенный", размышляя о грамматике
			мРеквизитыМаршрута = ПолучитьРеквизитыОбъекта(мСтрокаТекущихДанных.ЦехМаршрут, "Начало, Окончание, Ответсвенный");
			мСтрокаТекущихДанных.ВремяПодачи = мРеквизитыМаршрута.Начало;
			мСтрокаТекущихДанных.ВремяВозврата = мРеквизитыМаршрута.Окончание;
			мСтрокаТекущихДанных.Ответственный = мРеквизитыМаршрута.Ответсвенный;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	Если Поле.Имя = "фТаблицаРазнарядкиОтказ" Тогда
		СтандартнаяОбработка = Ложь;
		мДополнительныеПараметры = Новый Структура("СтрокаТекущихДанных", мСтрокаТекущихДанных);
		мОписаниеОповещенияВыборСтатусыОтказа = Новый ОписаниеОповещения("ОбработкаОповещенияВыборСтатусыОтказа", ЭтаФорма, мДополнительныеПараметры);
		ПоказатьВыборИзСписка(мОписаниеОповещенияВыборСтатусыОтказа, фСписокДействийСтатусыОтказа, Элементы.фТаблицаРазнарядкиОтказ);
	ИначеЕсли Поле.Имя = "фТаблицаРазнарядкиИндексКартинкиСтрокаЗаполнена" Тогда
		мЗаявка = ПолучитьЗаявку(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки, фДата);
		Если Не мЗаявка.Пустая() Тогда
			мПараметры = Новый Структура("Ключ, ИдентификаторСтрокиЗаявки", мЗаявка, СокрЛП(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки));
			мОписаниеОповещенияЗаявкаЗакрыта = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЗаявки", ЭтаФорма);
			ОткрытьФорму("Документ.Заявка.Форма.ФормаДокумента", мПараметры, ЭтаФорма, , , , мОписаниеОповещенияЗаявкаЗакрыта, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьПредупреждение( , "Заявка не найдена, обновите форму и повторите попытку");
		КонецЕсли;
	ИначеЕсли Поле.Имя = "фТаблицаРазнарядкиПутевойЛист" И мСтрокаТекущихДанных <> Неопределено Тогда
		Если ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) Тогда
			мПараметры = Новый Структура("Ключ", мСтрокаТекущихДанных.ПутевойЛист);
			//ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаДокументаУпр", мПараметры , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаявку(пИдентификаторСтрокиЗаявки, пДата)
	мЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеСведенияЗаявокОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок.Обороты(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Регистратор, ) КАК ДополнительныеСведенияЗаявокОбороты
	|ГДЕ ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = &Идентификатор");
	мЗапрос.УстановитьПараметр("Дата", пДата);
	мЗапрос.УстановитьПараметр("Идентификатор", пИдентификаторСтрокиЗаявки);
	
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Если мРезультат.Следующий() Тогда
		Возврат мРезультат.Регистратор;
	Иначе
		Возврат Документы.Заявка.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЗаявки(пРезультатЗакрытия, пДополнительныеПараметры) Экспорт
	//ЗАКОММЕНТИРОВАНО: только замедляет работу
	//фДатаПриИзменении(Неопределено)
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияВыборСтатусыОтказа(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И пДополнительныеПараметры.Свойство("СтрокаТекущихДанных") Тогда
		мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
		мСтрокаТекущихДанных.ЗаписьУточнения = Истина;
		мСтрокаТекущихДанных.СтатусыОтказа = пРезультат.Значение;
		мОтборПоИдентификатору = Новый Структура("ИдентификаторСтрокиЗаявки", СокрЛП(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки));
		ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборПоИдентификатору);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьВодителиТС(Команда)
	мОтборНеСогласованныхСтрок = Новый Структура("НеСогласованоВодительТС", 1);
	ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборНеСогласованныхСтрок, "ЗаписьУточнения");
	мОтборСогласованныхСтрок = Новый Структура("НеСогласованоВодительТС", 0);
	ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборСогласованныхСтрок, "ЗаписьУточнения");
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиВодитель2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.Водитель2 = ВыбранноеЗначение;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.Модифицированность = 1;
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.ЗаписьУточнения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПринудительнаяЗапись(Команда)
	мОтборМодифицированныхСтрок = Новый Структура("Модифицированность", 0);
	ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборМодифицированныхСтрок, "ЗаписьУточнения");
	мОтборМодифицированныхСтрок = Новый Структура("Модифицированность", 1);
	ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборМодифицированныхСтрок, "ЗаписьУточнения");
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиМестоОказанияУслугАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		мПерваяБукваТекста = НРег(Сред(Текст, 1, 1));
		Если фМассивСтрокМест.Количество() > 0 Тогда
			Для Каждого мПара из фМассивСтрокМест Цикл
				Если СтрНачинаетсяС(мПара.Значение, НРег(Текст)) Тогда
					ДанныеВыбора.Добавить(мПара.Представление);
				КонецЕсли;
				Если НРег(Сред(мПара.Значение, 1, 1)) > мПерваяБукваТекста Тогда
					Прервать;	//следующая буква
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли фМассивСтрокОтветственных.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		Для Каждого мПара из фМассивСтрокМест Цикл
			ДанныеВыбора.Добавить(мПара.Представление);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланировкаЦехМесто(Команда)
	Если Элементы.фТаблицаРазнарядки.ТекущиеДанные <> Неопределено Тогда
		мТекущаяСтрокаДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
		мОписаниеОповещенияВводЧислаДляПланированияТС = Новый ОписаниеОповещения("ОбработкаВводаЧислаДляПланированияТС", ЭтаФорма);
		ПоказатьВводЧисла(мОписаниеОповещенияВводЧислаДляПланированияТС, 1, "Укажите общее количество ТС типа " + мТекущаяСтрокаДанных.ТипТС + " для планирования на: " + мТекущаяСтрокаДанных.ЦехМаршрут + " " + мТекущаяСтрокаДанных.МестоОказанияУслуг, 7, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаЧислаДляПланированияТС(пРезультат, пДополнительныеПараметры) Экспорт
	
	Если пРезультат <> Неопределено И пРезультат > 1 Тогда
		мТекущаяСтрокаДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
		мИскомаяСмена = мТекущаяСтрокаДанных.ВтораяСмена;
		мИскомыйТипТС = мТекущаяСтрокаДанных.ТипТС;
		мИсковыйКонтрагент = мТекущаяСтрокаДанных.Контрагент;
		мЦелевойЦехМаршрут = мТекущаяСтрокаДанных.ЦехМаршрут;
		мЦелевоеМестоОказанияУслуг = мТекущаяСтрокаДанных.МестоОказанияУслуг;
		мЦелевойОтветственный = мТекущаяСтрокаДанных.Ответственный;
		мИндексТекущейСтроки = фТаблицаРазнарядки.Индекс(фТаблицаРазнарядки.НайтиПоИдентификатору(Элементы.фТаблицаРазнарядки.ТекущаяСтрока));
		мИзмененоСтрок = 1;	//текущая считается, введено общее число строк включая текущую
		мКрайнийИдентификатор = Элементы.фТаблицаРазнарядки.ТекущаяСтрока;
		Для Итр = мИндексТекущейСтроки + 1 По фТаблицаРазнарядки.Количество() - 1 Цикл
			мСтрокаТаблицы = фТаблицаРазнарядки[Итр];
			мИдентификаторСтроки = мСтрокаТаблицы.ПолучитьИдентификатор();
			Если Элементы.фТаблицаРазнарядки.ПроверитьСтроку(мИдентификаторСтроки) И СоответствуетУсловномуОформлению(мСтрокаТаблицы) И (мСтрокаТаблицы.ТипТС = мИскомыйТипТС) И (мСтрокаТаблицы.ВтораяСмена = мИскомаяСмена) И (мСтрокаТаблицы.Контрагент = мИсковыйКонтрагент) Тогда
				мКрайнийИдентификатор = мИдентификаторСтроки;
				мСтрокаТаблицы.ЦехМаршрут = мЦелевойЦехМаршрут;
				мСтрокаТаблицы.МестоОказанияУслуг = мЦелевоеМестоОказанияУслуг;
				мСтрокаТаблицы.Ответственный = мЦелевойОтветственный;
				мСтрокаТаблицы.ЗаписьУточнения = Истина;
				мИзмененоСтрок = мИзмененоСтрок + 1;
			КонецЕсли;
			Если мИзмененоСтрок = пРезультат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если мИзмененоСтрок <> пРезультат Тогда
			ПоказатьПредупреждение(, "Изменено строк: " + Формат(мИзмененоСтрок, "ЧГ=") + " вместо " + Формат(пРезультат, "ЧГ="));
		КонецЕсли;
		Элементы.фТаблицаРазнарядки.ТекущаяСтрока = мКрайнийИдентификатор;
		мОтборМодифицированныхСтрок = Новый Структура("ЗаписьУточнения", Истина);
		ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборМодифицированныхСтрок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фМестоРаботыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(фМестоРаботы) И ЗначениеЗаполнено(фДата) Тогда
		фДатаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиПриАктивизацииЯчейки(Элемент)
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		Если Элемент.ТекущийЭлемент = Элементы.фТаблицаРазнарядкиВодитель Тогда
			мМассивСотрудников = фСоответствиеТСВодителям.Получить("" + СокрЛП(мСтрокаТекущихДанных.ГарНомерТС) + ?(мСтрокаТекущихДанных.ВтораяСмена, " 2", " 1"));
			Элементы.фТаблицаРазнарядкиВодитель.СписокВыбора.Очистить();
			Если мМассивСотрудников <> Неопределено Тогда
				Элементы.фТаблицаРазнарядкиВодитель.СписокВыбора.ЗагрузитьЗначения(мМассивСотрудников);
			КонецЕсли;
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.фТаблицаРазнарядкиВодитель2 Тогда
			мМассивСотрудников2 = фСоответствиеТСВодителям2.Получить("" + СокрЛП(мСтрокаТекущихДанных.ГарНомерТС) + ?(мСтрокаТекущихДанных.ВтораяСмена, " 2", " 1"));
			Элементы.фТаблицаРазнарядкиВодитель2.СписокВыбора.Очистить();
			Если мМассивСотрудников2 <> Неопределено Тогда
				Элементы.фТаблицаРазнарядкиВодитель2.СписокВыбора.ЗагрузитьЗначения(мМассивСотрудников2);
			КонецЕсли;
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.фТаблицаРазнарядкиКонтрагент Тогда
			Элементы.фТаблицаРазнарядкиКонтрагент.ТолькоПросмотр = ЗначениеЗаполнено(СокрЛП(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПечатьПутевыхЛистовНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПутевыхЛистов(Команда)
	ВызовПечати(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиОтветственныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		мПерваяБукваТекста = НРег(Сред(Текст, 1, 1));
		Если фМассивСтрокОтветственных.Количество() > 0 Тогда
			Для Каждого мПара из фМассивСтрокОтветственных Цикл
				Если СтрНачинаетсяС(мПара.Значение, НРег(Текст)) Тогда
					ДанныеВыбора.Добавить(мПара.Представление);
				КонецЕсли;
				Если Сред(мПара.Значение, 1, 1) > мПерваяБукваТекста Тогда
					Прервать;	//следующая буква
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли фМассивСтрокОтветственных.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		Для Каждого мПара из фМассивСтрокОтветственных Цикл
			ДанныеВыбора.Добавить(мПара.Представление);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапечататьПутевыеЛисты(пМассивИдентификаторов, пТолькоЗапись = Ложь)
	мРезультат = СоздатьНапечататьПутевыеЛистыНаСервере(пМассивИдентификаторов, пТолькоЗапись, фКопироватьВремяСПредыдущегоПЛ);
	Если Не пТолькоЗапись Тогда
		Для Каждого мТабличныйДокумент Из мРезультат.ПечатныеФормы Цикл
			Если фПечатьСразуНаПринтер Тогда
				мТабличныйДокумент.Напечатать();
			Иначе
				мТабличныйДокумент.Показать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если мРезультат.СозданныеПЛ.Количество() > 0 Тогда
		Для Каждого мСтрокаРазнарядки Из мРезультат.СозданныеПЛ Цикл
			мОтборПоИдентификатору = Новый Структура("ИдентификаторСтрокиЗаявки", СокрЛП(мСтрокаРазнарядки.ИдентификаторСтрокиЗаявки));
			мНайденныеСтроки = фТаблицаРазнарядки.НайтиСтроки(мОтборПоИдентификатору);
			Если мНайденныеСтроки.Количество() > 0 Тогда
				мНайденныеСтроки[0].ВремяПодачи = мСтрокаРазнарядки.ВремяПодачи;
				мНайденныеСтроки[0].Модифицированность = 1;
			КонецЕсли;
		КонецЦикла;
		мОтборМодифицированныхСтрок = Новый Структура("Модифицированность", 1);
		ЗаписатьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборМодифицированныхСтрок, "ЗаписьУточнения");
	КонецЕсли;
	УстановитьВыбор(Ложь, Ложь);
КонецПроцедуры

//возвращает Структура с двумя ключами:
//	"СозданныеПЛ" - массив идентификаторов, по которым были созданы ПЛ
//	"ПечатнаяФорма" - табличный документ для запрошенных идентификаторов (если не был передан параметр пТолькоЗапись = Истина)
&НаСервереБезКонтекста
Функция СоздатьНапечататьПутевыеЛистыНаСервере(пМассив, пТолькоЗапись = Ложь, пКопироватьВремяСПредыдущегоПЛ)
	вСтруктура = Новый Структура();
	мСоответствиеОбъектовПутевыхЛистов = Новый Соответствие;
	мТаблицаПутевыхЛистов = Новый ТаблицаЗначений;
	мТаблицаПутевыхЛистов.Колонки.Добавить("ГаражныйНомер");
	мТаблицаПутевыхЛистов.Колонки.Добавить("ПутевойЛист");
	вМассивИдентификаторов = Новый Массив;
	
	Если пМассив <> Неопределено И пМассив.Количество() > 0 Тогда
		Для Каждого мЭлемент Из пМассив Цикл
			//Если ЗначениеЗаполнено(мЭлемент.ИдентификаторСтрокиЗаявки) Тогда
				мГаражныйНомер = мЭлемент.ТС.ГаражныйНомер;
				мДанныеПредыдущегоПЛ = Неопределено;
				Если Не ЗначениеЗаполнено(мЭлемент.ПутевойЛист) И пКопироватьВремяСПредыдущегоПЛ Тогда
					мДанныеПредыдущегоПЛ = Документы.уатПутевойЛист.ПолучитьДанныеПредыдущегоПЛ(мЭлемент.ДатаФормирования, мЭлемент.ТС, мЭлемент.ВтораяСмена);
				КонецЕсли;
				Если мДанныеПредыдущегоПЛ <> Неопределено И мДанныеПредыдущегоПЛ.мПредыдущийПЛНайден Тогда
					мЭлемент.ВремяВыезда = мДанныеПредыдущегоПЛ.ДатаВыезда;
					мЭлемент.ВремяВозврата = мДанныеПредыдущегоПЛ.ДатаВозвращения;
					мЭлемент.ВремяПодачи = мДанныеПредыдущегоПЛ.ДатаВыезда;
					мЭлемент.Прицеп = ?(мДанныеПредыдущегоПЛ.Свойство("Прицеп"), мДанныеПредыдущегоПЛ.Прицеп, мЭлемент.Прицеп);
				Иначе
					мЭлемент.ВремяВыезда = мЭлемент.ВремяПодачи;
				КонецЕсли;
				
				мПутевойЛист = Документы.уатПутевойЛист.СоздатьПутевойЛист(мЭлемент);
				Если мПутевойЛист <> Неопределено И Не мПутевойЛист.Ссылка.Пустая() Тогда
					вМассивИдентификаторов.Добавить(мЭлемент);
					мСоответствиеОбъектовПутевыхЛистов.Вставить(мПутевойЛист.Ссылка, мПутевойЛист);
					Если мТаблицаПутевыхЛистов.Найти(мПутевойЛист.Ссылка, "ПутевойЛист") = Неопределено Тогда
						мНоваяСтрока = мТаблицаПутевыхЛистов.Добавить();
						мНоваяСтрока.ГаражныйНомер = мГаражныйНомер;
						мНоваяСтрока.ПутевойЛист = мПутевойЛист.Ссылка;
					КонецЕсли;
					Если ЗначениеЗаполнено(СокрЛП(мЭлемент.ИдентификаторСтрокиЗаявки)) Тогда
						РегистрыСведений.ВыпискаПЛПоИдентификаторам.ЗафиксироватьФактВыписки(мЭлемент.ДатаФормирования, мПутевойЛист.Ссылка, Новый Структура("ИдентификаторСтрокиЗаявки, Водитель", СокрЛП(мЭлемент.ИдентификаторСтрокиЗаявки), мЭлемент.ТС, мЭлемент.Водитель));
					КонецЕсли;
				КонецЕсли;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	вМассивТД = Новый Массив;
	Если пТолькоЗапись Тогда
		вТабличныйДокумент = Неопределено;	// Документы.уатПутевойЛист.Печать(мМассивПутевыхЛистов);
	Иначе
		мТаблицаПутевыхЛистов.Сортировать("ГаражныйНомер ВОЗР");
		вТабличныйДокумент = Новый ТабличныйДокумент;
		мПервыйДокумент = Истина;
		Для Каждого мСтрока Из мТаблицаПутевыхЛистов Цикл
			//TODO: Переписать на функцию печати по массиву
			мТабличныйДокумент = Новый ТабличныйДокумент;
			мОбъектПутевогоЛиста = мСоответствиеОбъектовПутевыхЛистов.Получить(мСтрока.ПутевойЛист);
			мОбъектПутевогоЛиста.Печать("ПечататьВесьПутевойЛист", , Истина, , , мТабличныйДокумент);
			Если ТипЗнч(мТабличныйДокумент) = Тип("Массив") Тогда
				Для Каждого мЭлементМассиваТД Из мТабличныйДокумент Цикл
					вМассивТД.Добавить(мЭлементМассиваТД);
				КонецЦикла;
			Иначе
				вМассивТД.Добавить(мТабличныйДокумент);
			КонецЕсли;
			РегистрыСведений.ПечатьПЛ.ЗафиксироватьФактПечати(мСтрока.ПутевойЛист, ТекущаяДата());
		КонецЦикла;
	КонецЕсли;
	вСтруктура.Вставить("СозданныеПЛ", вМассивИдентификаторов);
	вСтруктура.Вставить("ПечатныеФормы", вМассивТД);
	Возврат вСтруктура;
КонецФункции

&НаКлиенте
Процедура ЗаписьПутевыхЛистов(Команда)
	ВызовПечати(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВызовПечати(пТолькоЗапись = Ложь)
	мОтборВыбранных = Новый Структура("Выбрано", Истина);
	мСтрокиКПечати = фТаблицаРазнарядки.НайтиСтроки(мОтборВыбранных);
	мМассивИдентификаторов = Новый Массив;
	Для Каждого мСтрокаКПечати Из мСтрокиКПечати Цикл
		Если Не ЗначениеЗаполнено(мСтрокаКПечати.ТС) Тогда
			Сообщить("Строка: " + (фТаблицаРазнарядки.Индекс(мСтрокаКПечати) + 1) + " - пропущена: пустое ТС. " + мСтрокаКПечати.ЦехМаршрут + ";" +  мСтрокаКПечати.МестоОказанияУслуг);
			Продолжить;
		КонецЕсли;
		мСтруктураСтроки = Новый Структура("ИдентификаторСтрокиЗаявки, Контрагент, Комментарий, ЦехМаршрут, МестоОказанияУслуг, ВремяВыезда, ВремяВозврата, ВремяПодачи, ВтораяСмена, Ответственный, ТС, Водитель, Водитель2, ПутевойЛист, ПозицияПП, ДатаВозврата, Прицеп, ИзмененоПослеСогласования");
		ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мСтрокаКПечати);
		мСтруктураСтроки.Вставить("ДатаФормирования", фДата + (мСтрокаКПечати.ВремяПодачи - НачалоДня(мСтрокаКПечати.ВремяПодачи)));
		мМассивИдентификаторов.Добавить(мСтруктураСтроки);
	КонецЦикла;
	СоздатьНапечататьПутевыеЛисты(мМассивИдентификаторов, пТолькоЗапись);
КонецПроцедуры

&НаКлиенте
Процедура РежимМаршрутов(Команда, пПринудительноеЗначение = Неопределено)
	фРежимМаршрутов = ?(пПринудительноеЗначение = Неопределено, Не фРежимМаршрутов, пПринудительноеЗначение);
	//Элементы.фТаблицаРазнарядкиКонтрагент.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядки.ЧередованиеЦветовСтрок = фРежимМаршрутов;
	//Элементы.фТаблицаРазнарядкиКомментарий.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиМестоОказанияУслуг.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиКолонна.Видимость = Не фРежимМаршрутов;
	//Элементы.фТаблицаРазнарядкиТипТС.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиПозицияПП.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиЦехМаршрут.АвтоВысотаЯчейки = фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиЦехМаршрут.Заголовок = ?(фРежимМаршрутов, "Маршрут", "Цех Маршрут");
	Элементы.фТаблицаРазнарядкиЦехМаршрут.Ширина = ?(фРежимМаршрутов, 40, 17);
	Элементы.фТаблицаРазнарядкиГруппа1.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиГруппа8.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиТипТС.Видимость = Не фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиГруппа19.Видимость = (НЕ фРежимМаршрутов) Или фДатаВозвратаВРежимеМаршрутов;
	Элементы.фТаблицаРазнарядкиГруппа14.Видимость = НЕ фРежимМаршрутов;
	Элементы.фТаблицаРазнарядкиГарНомерТС.Шрифт = Новый Шрифт(Элементы.фТаблицаРазнарядкиГарНомерТС.Шрифт, , 10, фРежимМаршрутов, , , , );
	Элементы.фТаблицаРазнарядкиГосНомерТС.Шрифт = Новый Шрифт(Элементы.фТаблицаРазнарядкиГосНомерТС.Шрифт, , 10, фРежимМаршрутов, , , , );
	Элементы.фТаблицаРазнарядкиКонтрагент.Шрифт = Новый Шрифт(Элементы.фТаблицаРазнарядкиГосНомерТС.Шрифт, , 10, фРежимМаршрутов, , , , );
	Элементы.фВтораяСмена.Видимость = фРежимМаршрутов;
	Элементы.фДоп.Видимость = фРежимМаршрутов;
	фВтораяСмена = ?(фРежимМаршрутов, 1, 0);
	фДоп = ?(фРежимМаршрутов, 2, 0);
	Если пПринудительноеЗначение = Неопределено Тогда	//избегаем двойного вызова в ПриОткрытии
		ПрименитьФильтры();
	КонецЕсли;
	ОбновитьЭлементы();
	РежимМаршрутовНаСервере();
КонецПроцедуры

&НаСервере
Процедура РежимМаршрутовНаСервере()
	//двигаем колонки как в "канонической" разнарядке
	Если фРежимМаршрутов Тогда
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиОтказ, Элементы.фТаблицаРазнарядкиГруппа18);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГарНомерТС,  Элементы.фТаблицаРазнарядкиГруппа7, Элементы.фТаблицаРазнарядкиТС);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГосНомерТС,  Элементы.фТаблицаРазнарядкиГруппа7);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГруппа6, Элементы.фТаблицаРазнарядки, Элементы.фТаблицаРазнарядкиГруппа19);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГруппа5, Элементы.фТаблицаРазнарядкиГруппа13);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиВодитель2, Элементы.фТаблицаРазнарядкиГруппа5);
	Иначе
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиОтказ, Элементы.фТаблицаРазнарядкиГруппа11);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГруппа5, Элементы.фТаблицаРазнарядкиГруппа1, Элементы.фТаблицаРазнарядкиГруппа14);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГарНомерТС,  Элементы.фТаблицаРазнарядкиГруппа13);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГосНомерТС,  Элементы.фТаблицаРазнарядкиГруппа13);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиГруппа6, Элементы.фТаблицаРазнарядки, Элементы.фТаблицаРазнарядкиГруппа2);
		Элементы.Переместить(Элементы.фТаблицаРазнарядкиВодитель2, Элементы.фТаблицаРазнарядкиГруппа14);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЭлементСправочникаПП(пИмяПозиции)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ПозицияПП.Ссылка
	|ИЗ
	|	Справочник.ПозицияПроизводсвеннойПрограммы КАК ПозицияПП
	|ГДЕ ПозицияПП.Наименование = &ИмяПП И НЕ ПозицияПП.ПометкаУдаления");
	мЗапрос.УстановитьПараметр("ИмяПП", пИмяПозиции);
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Если мРезультат.Следующий() Тогда
		Возврат мРезультат.Ссылка;
	Иначе
		Возврат Справочники["ПозицияПроизводсвеннойПрограммы"].ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура фДата1ПриИзменении(Элемент)
	СформироватьИнтерфейсНОЭ();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИнтерфейсНОЭ()
	Если фДата = Дата("00010101") Или фМестоРаботы.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	мДанныеДеревьев = ПолучитьДанныеДеревьев(фДата, фМестоРаботы);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИнтерфейсНАК()
	Если фДата = Дата("00010101") Или фМестоРаботы.Пустая() Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтарыйИнтерфейс Тогда
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ИнтерфейсНачальникаЭксплуатации Тогда
		СформироватьИнтерфейсНОЭ();
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ИнтерфейсНачальникаАвтоколонны Тогда
		СформироватьИнтерфейсНАК();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйИнтерфейсОбновить(Команда)
	СформироватьИнтерфейсНОЭ();
КонецПроцедуры

&НаКлиенте
Процедура фМестоРаботы1ПриИзменении(Элемент)
	СформироватьИнтерфейсНОЭ();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДеревьев(пДата, пМестоРаботы)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	""1"" КАК Раздел,
	|	ДополнительныеСведенияЗаявок.Контрагент КАК Контрагент,
	|	ДополнительныеСведенияЗаявок.ТипТС КАК ТипТС,
	|	1 КАК Колво,
	|	ВЫБОР
	|		КОГДА Разнарядка.ТС ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Закрыто
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок.Обороты(&Дата, КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), День, ) КАК ОборотыЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДополнительныеСведенияЗаявок КАК ДополнительныеСведенияЗаявок
	|		ПО (ДополнительныеСведенияЗаявок.Период = ОборотыЗаявок.Период)
	|			И (ДополнительныеСведенияЗаявок.ИдентификаторСтрокиЗаявки = ОборотыЗаявок.ИдентификаторСтрокиЗаявки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Разнарядка КАК Разнарядка
	|		ПО (Разнарядка.Дата = ОборотыЗаявок.Период)
	|			И (ДополнительныеСведенияЗаявок.ИдентификаторСтрокиЗаявки = Разнарядка.ИдентификаторСтрокиЗаявки)
	|ГДЕ
	|	ОборотыЗаявок.КоличествоТСОборот > 0
	|	И ДополнительныеСведенияЗаявок.МестоРаботы = &МестоРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""2"",
	|	уатМестонахождениеТС.Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка),
	|	1,
	|	ВЫБОР
	|		КОГДА Разнарядка.ТС ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок.Обороты(&Дата, КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), День, ) КАК ОборотыЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Разнарядка КАК Разнарядка
	|		ПО (Разнарядка.Дата = ОборотыЗаявок.Период)
	|			И (ОборотыЗаявок.ИдентификаторСтрокиЗаявки = Разнарядка.ИдентификаторСтрокиЗаявки)
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), ) КАК уатМестонахождениеТС
	|		ПО (Разнарядка.ТС = уатМестонахождениеТС.ТС)
	|ГДЕ
	|	(ОборотыЗаявок.Период ЕСТЬ NULL Или ОборотыЗаявок.КоличествоТСОборот > 0)
	|	И (НЕ уатМестонахождениеТС.Состояние.ЗапретитьВыпискуПЛ)
	|	И уатМестонахождениеТС.Состояние <> ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.Привлеченный)
	|	И (НЕ уатМестонахождениеТС.ТС.ТипТС.НеВыводитьВТабельТС)
	|ИТОГИ
	|	СУММА(Колво),
	|	СУММА(Закрыто)
	|ПО
	|	Раздел,
	|	Контрагент,
	|	ТипТС");
	
	мЗапрос.УстановитьПараметр("Дата", пДата);
	мЗапрос.УстановитьПараметр("МестоРаботы", пМестоРаботы);
	
	вМассив = Новый Массив;
	мРезультат = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока мРезультат.Следующий() Цикл		//"раздел"
		мВыборкаПоКонтрагентамКолоннам = мРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока мВыборкаПоКонтрагентамКолоннам.Следующий() Цикл		//"контрагент/колонна"
			мВыборкаДетальная = мВыборкаПоКонтрагентамКолоннам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока мВыборкаДетальная.Следующий() Цикл
				мСтруктураСтроки = Новый Структура("Раздел, Контрагент, ТипТС, Колво, Закрыто");
				ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мВыборкаДетальная);
				Если мВыборкаДетальная.Раздел = "1" И мВыборкаДетальная.Свободно > 0 Тогда
					мСвободно = мВыборкаДетальная.Свободно / мВыборкаДетальная.Колво;
				Иначе
					мСвободно = мВыборкаДетальная.Свободно;
				КонецЕсли;
				мСтруктураСтроки.Вставить("СВободно", мСвободно);
				вМассив.Добавить(мСтруктураСтроки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ВыбратьВсеАктуальные(Команда)
	УстановитьВыбор(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	УстановитьВыбор(Истина, Истина);	//первый параметр не является значимым, если второй указан в Истина
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбор(Команда)
	УстановитьВыбор(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Функция СоответствуетУсловномуОформлению(пСтрока)
	// пока так о_О. Кажется есть способ поменять на программное исполнение СКД из условного оформления
	Возврат фСтрокаПоиска = "" Или (фСтрокаПоиска <> "" И (
		(СокрЛП(пСтрока.ГарНомерТС) = СокрЛП(фСтрокаПоиска)) ИЛИ
		Найти(пСтрока.ГосНомерТС, фСтрокаПоиска) <> 0 ИЛИ
		Найти(пСтрока.ТабНомерВодителя, фСтрокаПоиска) = 1 ИЛИ
		Найти(НРЕГ(пСтрока.МестоОказанияУслуг), фСтрокаПоиска) <> 0 ИЛИ
		Найти(НРЕГ(пСтрока.Ответственный), фСтрокаПоиска) <> 0 ИЛИ
		Найти(НРЕГ(пСтрока.ВодительСтрокой), фСтрокаПоиска) <> 0 ИЛИ
		Найти(НРЕГ(пСтрока.КонтрагентСтрокой), фСтрокаПоиска) <> 0 ИЛИ
		Найти(НРЕГ(пСтрока.ЦехМаршрутСтрокой), фСтрокаПоиска) <> 0));
КонецФункции

&НаКлиенте
Процедура УстановитьВыбор(пЗначение, пИнверсия = Ложь)
	//параллельно собираем массив ТС со сменой и признаком выбора
	мМассивДляОбработки = Новый Массив;
	Для Каждого мСтрока Из фТаблицаРазнарядки Цикл
		мИдентификаторСтроки = мСтрока.ПолучитьИдентификатор();
		Если ЗначениеЗаполнено(СокрЛП(мСтрока.ИдентификаторСтрокиЗаявки)) И Элементы.фТаблицаРазнарядки.ПроверитьСтроку(мИдентификаторСтроки) И СоответствуетУсловномуОформлению(мСтрока) Тогда
			мСтрока.Выбрано = ?(пИнверсия, Не мСтрока.Выбрано, пЗначение);
			Если ЗначениеЗаполнено(мСтрока.ТС) И (фСтрокаПоиска <> "") Тогда
				//если поиск не задан - при выборе или снятии ВСЕХ галочек, последующая обработка не нужна...
				мМассивДляОбработки.Добавить(Новый Структура("ТС, ВтораяСмена, Выбрано, НеСогласованоВодительТС", мСтрока.ТС, мСтрока.ВтораяСмена, мСтрока.Выбрано, мСтрока.СтатусыОтказа, мСтрока.НеСогласованоВодительТС));
			КонецЕсли;
		ИначеЕсли мСтрока.Выбрано Тогда
			мСтрока.Выбрано = Ложь;	// безусловно не выбрано то, чего не видно
			Если ЗначениеЗаполнено(мСтрока.ТС) И (фСтрокаПоиска <> "" Или пИнверсия) Тогда
				мМассивДляОбработки.Добавить(Новый Структура("ТС, ВтораяСмена, Выбрано, НеСогласованоВодительТС", мСтрока.ТС, мСтрока.ВтораяСмена, мСтрока.Выбрано, мСтрока.СтатусыОтказа, мСтрока.НеСогласованоВодительТС));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если мМассивДляОбработки.Количество() > 0 Тогда
		ПродублироватьВыборНаСтрокиСТакимЖеТС(мМассивДляОбработки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фПолеПоискаПриИзменении(Элемент)
	Если фСтрокаПоиска <> "" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.фТаблицаРазнарядки;
		Для Каждого мСтрока Из фТаблицаРазнарядки Цикл
			мИдентификаторСтроки = мСтрока.ПолучитьИдентификатор();
			//активизация первой попавшейся строки, 
			Если Элементы.фТаблицаРазнарядки.ПроверитьСтроку(мИдентификаторСтроки) И СоответствуетУсловномуОформлению(мСтрока) Тогда
				Элементы.фТаблицаРазнарядки.ТекущаяСтрока = мИдентификаторСтроки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПЛЗаПериод(Команда)
	мОтборВыбранных = Новый Структура("Выбрано", Истина);
	мСтрокиКПечати = фТаблицаРазнарядки.НайтиСтроки(мОтборВыбранных);
	мМассивИдентификаторов = Новый Массив;
	пМассивСтрокКПечати = Новый Массив;
	Для Каждого мСтрокаКПечати Из мСтрокиКПечати Цикл
		Если Не ЗначениеЗаполнено(мСтрокаКПечати.ТС) Тогда
			Продолжить;
		КонецЕсли;
		//Если мСтрокаКПечати.Модифицированность > 0 Или мСтрокаКПечати.ЗаписьУточнения или ЗначениеЗаполнено(мСтрокаКПечати.СтатусыОтказа) Тогда
		//	Сообщить("Строка: " + (фТаблицаРазнарядки.Индекс(мСтрокаКПечати) + 1) + " - указан статус отказа или не записаны изменения:" + мСтрокаКПечати.ТС + " " + мСтрокаКПечати.ГарНомерТС);
		//КонецЕсли;
		мСтруктураСтроки = Новый Структура("ИдентификаторСтрокиЗаявки, Контрагент, Комментарий, ЦехМаршрут, МестоОказанияУслуг, ВтораяСмена, Ответственный, ТС, Водитель, Водитель2, Колонна, ТипТС, ПозицияПП, ГарНомерТС, ГосНомерТС, ТабНомерВодителя, ПутевойЛист, ВремяПодачи, ВремяВозврата, ДатаВозврата, Прицеп, ТСПринудительноСтерто, ИзмененоПослеСогласования, Смена");
		ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мСтрокаКПечати);
		пМассивСтрокКПечати.Добавить(мСтруктураСтроки);
		мМассивИдентификаторов.Добавить(СокрЛП(мСтрокаКПечати.ИдентификаторСтрокиЗаявки));
	КонецЦикла;
	УстановитьВыбор(Ложь, Ложь);
	пДополнительныеПараметры = Новый Структура("МассивИдентификаторов", мМассивИдентификаторов);
	мОписаниеОповещенияОЗакрытииФормыПечатиЗаПериод = Новый ОписаниеОповещения("ОбработкаОповещенияЗакрытияФормыПечатиЗаПериод", ЭтаФорма, пДополнительныеПараметры);
	пПараметрыФормы = Новый Структура("МассивСтрокКПечати, ДатаНачала", пМассивСтрокКПечати, фДата);
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаПечатиПлЗаПериод", пПараметрыФормы, ЭтаФорма, , , , мОписаниеОповещенияОЗакрытииФормыПечатиЗаПериод, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗакрытияФормыПечатиЗаПериод(пРезультат, пДополнительныеПараметры) Экспорт
	Если пДополнительныеПараметры.Свойство("МассивИдентификаторов") И ЗначениеЗаполнено(пДополнительныеПараметры.МассивИдентификаторов) Тогда
		ОбновитьСтроки(пДополнительныеПараметры.МассивИдентификаторов, 2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиВыбраноПриИзменении(Элемент)
	//При изменении выбора строки на печать, если ТС строки заполнено - необходимо так же изменить выбор во всех строках, в которых
	//	указано текущее ТС, с учетом смены
	// при этом не учитывается соответствие условному оформлению видимости или фильтрам
	// таким образом достигается целостность создания ПЛ по маршрутам
	
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И ЗначениеЗаполнено(мСтрокаТекущихДанных.ТС) Тогда
		мМассивОбертка = Новый Массив;
		мМассивОбертка.Добавить(мСтрокаТекущихДанных);
		ПродублироватьВыборНаСтрокиСТакимЖеТС(мМассивОбертка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродублироватьВыборНаСтрокиСТакимЖеТС(пМассивСтрок)
	// дублирование срабатывает только для ЦехМаршрут с типом СправочникСсылка.уатМаршруты
	Для Каждого мСтрока Из пМассивСтрок Цикл
		мОтборПоТранспортномуСредствуИСмене = Новый Структура("ТС, ВтораяСмена, СтатусыОтказа, НеСогласованоВодительТС", мСтрока.ТС, мСтрока.ВтораяСмена, ПредопределенноеЗначение("Справочник.юкСтатусыОтказаЗаявки.ПустаяСсылка"), мСтрока.НеСогласованоВодительТС);
		мСтрокиТранспортногоСредства = фТаблицаРазнарядки.НайтиСтроки(мОтборПоТранспортномуСредствуИСмене);
		Если мСтрокиТранспортногоСредства.Количество() > 1 Тогда
			Для Каждого мНайденнаяСтрока Из мСтрокиТранспортногоСредства Цикл
				Если ТипЗнч(мНайденнаяСтрока.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты") И ЗначениеЗаполнено(СокрЛП(мНайденнаяСтрока.ИдентификаторСтрокиЗаявки)) И мНайденнаяСтрока.Выбрано <> мСтрока.Выбрано Тогда
					мНайденнаяСтрока.Выбрано = мСтрока.Выбрано;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	мНастройки = ПолучитьСтруктуруНастроек();
	мОписаниеОповещенияЗакрытиеФормыНастроек = Новый ОписаниеОповещения("ПрочитатьНастройки", ЭтаФорма);
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаНастроекФормыРазнарядки", мНастройки, , , , , мОписаниеОповещенияЗакрытиеФормыНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройки(пСтруктураНастроек, пДополнительныеПараметры) Экспорт
	Если пСтруктураНастроек <> Неопределено Тогда
		Для Каждого мПараКлючЗначение Из пСтруктураНастроек Цикл
			ЭтаФорма[мПараКлючЗначение.Ключ] = мПараКлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	ОбновитьЭлементы();	//применить изменившиеся настройки видимости элементов формы
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруНастроек()
	вСтруктура = Новый Структура("фПечатьСразуНаПринтер, фОтображениеКолонна, фОтображениеПозицияПП, фНастройкаУпорядочивания, фОтображениеДат, фОтображениеПрицеп, фОтображатьДанныеЗагрузки, фКопироватьВремяСПредыдущегоПЛ, фОтображатьВодитель2ВРежимеМаршрутов, фДатаВозвратаВРежимеМаршрутов, фНеКопироватьПоПризнакуВыходнойПраздник, фОтображатьТипТСПЛ", фПечатьСразуНаПринтер, Элементы.фТаблицаРазнарядкиКолонна.Видимость, Элементы.фТаблицаРазнарядкиПозицияПП.Видимость, фНастройкаУпорядочивания, Элементы.фТаблицаРазнарядкиДатаВозврата.Видимость, Элементы.фТаблицаРазнарядкиПрицеп.Видимость, Элементы.фТаблицаРазнарядкиДанныеЗагрузки.Видимость, фКопироватьВремяСПредыдущегоПЛ, фОтображатьВодитель2ВРежимеМаршрутов, фДатаВозвратаВРежимеМаршрутов, фНеКопироватьПоПризнакуВыходнойПраздник, фОтображатьТипТСПЛ);
	Возврат вСтруктура;
КонецФункции

&НаКлиенте
Процедура фТаблицаРазнарядкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	фИзменитьПутевойЛист = Ложь;
	фСтрокаПоиска = "";
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		фДатаВозвратаСтарая = мСтрокаТекущихДанных.ДатаВозврата;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПутевойЛист(пПутевойЛистСсылка, пДатаФормирования, пВремяПодачи, пВремяВозврата, пДатаВозврата, пТС, пВодитель, пВодитель2, пПрицеп, пДатаВозвратаСтарая, пМассивИдентификаторов, пНовыйТипТС = Неопределено)
	Если ЗначениеЗаполнено(пПутевойЛистСсылка) И Не пПутевойЛистСсылка.Проведен Тогда
		мВтораяСмена = Час(пВремяВозврата) < Час(пВремяПодачи);
		мОбъектПутевогоЛиста = пПутевойЛистСсылка.ПолучитьОбъект();
		Если мОбъектПутевогоЛиста.ДатаВыезда = Дата("00010101") Тогда
			мОбъектПутевогоЛиста.ДатаВыезда = пДатаФормирования + (пВремяПодачи - НачалоДня(пВремяПодачи));
		Иначе
			мОбъектПутевогоЛиста.ДатаВыезда = мОбъектПутевогоЛиста.ДатаВыезда + (пВремяПодачи - НачалоДня(пВремяПодачи));
		КонецЕсли;
		мОбъектПутевогоЛиста.Дата = мОбъектПутевогоЛиста.ДатаВыезда;
		мОбъектПутевогоЛиста.ДатаВозвращения = ?(ЗначениеЗаполнено(пДатаВозврата), пДатаВозврата, пДатаФормирования) + (пВремяВозврата - НачалоДня(пВремяВозврата)) + ?(ЗначениеЗаполнено(пДатаВозврата) И ((НачалоДня(пДатаВозврата) > НачалоДня(пДатаФормирования)) Или (НачалоДня(пДатаВозврата) <= НачалоДня(пДатаФормирования) И Час(пВремяВозврата) > Час(пВремяПодачи))), 0, ?(Час(пВремяВозврата) > Час(пВремяПодачи), 0, 24 * 3600));
		мОбъектПутевогоЛиста.ТранспортноеСредство = пТС;
		Если пНовыйТипТС <> Неопределено Тогда
			мОбъектПутевогоЛиста.ТипТС = пНовыйТипТС;
		КонецЕсли;
		мОбъектПутевогоЛиста.Водитель1 = пВодитель;
		мОбъектПутевогоЛиста.Водитель2 = пВодитель2;
		
		мОбъектПутевогоЛиста.Прицепы.Очистить();
		Если ЗначениеЗаполнено(пПрицеп) Тогда
			Если мОбъектПутевогоЛиста.Прицепы.Найти(пПрицеп, "ТС") = Неопределено Тогда
				мНоваяСтрока = мОбъектПутевогоЛиста.Прицепы.Добавить();
				мНоваяСтрока.ТС = пПрицеп;
				мНоваяСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(пПрицеп, мОбъектПутевогоЛиста.ДатаВыезда);
			КонецЕсли;
		Иначе
			мОбъектПутевогоЛиста.Прицепы.Очистить();
		КонецЕсли;
		
		// + Алексей: начало копия процедуры ИнициализацияДанныхАвтомобиля модуля объекта путевого листа
		//		пока доступна только на Клиенте (указана директива Препроцессора), а в режиме управляемого приложения
		//		обратиться к объекту с клиента невозможно... скопировано "нужное" из модуля объекта
		Если мОбъектПутевогоЛиста.ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
			мОбъектПутевогоЛиста.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(мОбъектПутевогоЛиста.ТранспортноеСредство, мОбъектПутевогоЛиста.ДатаВыезда);
		Иначе
			мОбъектПутевогоЛиста.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(мОбъектПутевогоЛиста.ТранспортноеСредство, мОбъектПутевогоЛиста.ДатаВыезда);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(мОбъектПутевогоЛиста.УсловиеРаботы) Тогда
			мОбъектПутевогоЛиста.УсловиеРаботы = мОбъектПутевогоЛиста.ТранспортноеСредство.ОсновноеУсловиеРаботы;
		КонецЕсли;
		
		мОбъектПутевогоЛиста.ВыдатьГорючее = мОбъектПутевогоЛиста.ТранспортноеСредство.Модель.ОсновноеТопливо;
		// - Алексей: конец копия процедуры ИнициализацияДанныхАвтомобиля модуля объекта путевого листа
		мОбъектПутевогоЛиста.ДействителенДо = КонецДня(мОбъектПутевогоЛиста.ДатаВозвращения);
		
		мОбъектПутевогоЛиста.Записать(РежимЗаписиДокумента.Запись);
		
		//Удаляем ненужное, если оно есть
		Если пДатаВозвратаСтарая <> Дата("00010101") И НачалоДня(пДатаВозвратаСтарая) > НачалоДня(мОбъектПутевогоЛиста.ДатаВозвращения - ?(мВтораяСмена, (24 * 3600), 0)) Тогда
			мДнейУдалить = ((НачалоДня(пДатаВозвратаСтарая) - НачалоДня(мОбъектПутевогоЛиста.ДатаВозвращения)) / (24 * 3600)) + ?(мВтораяСмена, 1, 0);
			Если мДнейУдалить > 0 И пМассивИдентификаторов.Количество() > 0 Тогда
				Для Каждого мИдентификатор Из пМассивИдентификаторов Цикл
					Для Итр = 1 По мДнейУдалить Цикл
						мСтруктураПолейЗаписи = Новый Структура("ИдентификаторСтрокиЗаявки", мИдентификатор);
						мДатаКУдалению = НачалоДня(мОбъектПутевогоЛиста.ДатаВозвращения - ?(мВтораяСмена, (24 * 3600), 0)) + (Итр * (24 * 3600));
						РегистрыСведений.ВыпискаПЛПоИдентификаторам.ЗафиксироватьФактВыписки(НачалоДня(мДатаКУдалению), Документы.уатПутевойЛист.ПустаяСсылка(), мСтруктураПолейЗаписи);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//пишем нужное
		мДнейЗафиксировать = ((НачалоДня(мОбъектПутевогоЛиста.ДатаВозвращения - ?(мВтораяСмена, (24 * 3600), 0))) - (НачалоДня(мОбъектПутевогоЛиста.ДатаВыезда))) / (24 * 3600);
		Если мДнейЗафиксировать > 0 И пМассивИдентификаторов.Количество() > 0 Тогда
			Для Каждого мИдентификатор Из пМассивИдентификаторов Цикл
				Для Итр = 1 По мДнейЗафиксировать Цикл
					мДатаФиксацииПечати = НачалоДня(мОбъектПутевогоЛиста.ДатаВыезда) + (Итр * (24 * 3600));
					мСтруктураПолейЗаписи = Новый Структура("ИдентификаторСтрокиЗаявки", мИдентификатор);
					РегистрыСведений.ВыпискаПЛПоИдентификаторам.ЗафиксироватьФактВыписки(НачалоДня(мДатаФиксацииПечати), мОбъектПутевогоЛиста.Ссылка, мСтруктураПолейЗаписи);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиПрицепПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.фТаблицаРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мСтрокаТекущихДанных.Модифицированность = Истина;
		Если ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) Тогда
			фИзменитьПутевойЛист = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаРазнарядкиТСОчистка(Элемент, СтандартнаяОбработка)
	Элементы.фТаблицаРазнарядки.ТекущиеДанные.ТСПринудительноСтерто = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)
	мОписаниеОповещенияОтветНаВопросПерезаполнить = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросПерезаполнить", ЭтаФорма);
	ПоказатьВопрос(мОписаниеОповещенияОтветНаВопросПерезаполнить, "Неизмененные строки будут перезаполнены с предыдущего дня. Вы уверены, что хотите перезаполнить разнарядку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Перезаполнить разнарядку");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросПерезаполнить(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат = КодВозвратаДиалога.Да Тогда
		мОтборСтрок = Новый Структура("ИзмененоПослеСогласования", Ложь);
		Если Не фКолонна.Пустая() Тогда
			мОтборСтрок.Вставить("Колонна", фКолонна);
		КонецЕсли;
		ОчиститьСтрокиРазнарядкиПоСтрокамТаблицы(мОтборСтрок);
		СогласоватьВодителиТС(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтрокиРазнарядкиПоСтрокамТаблицы(пОтборСтрок)
	мМассивИдентификаторов = ПолучитьМассивСтрок("ИдентификаторСтрокиЗаявки", пОтборСтрок);
	Если мМассивИдентификаторов.Количество() > 0 Тогда
		мРезультатЗаписи = ОчиститьСтрокиРазнарядкиНаСервере(фДата, мМассивИдентификаторов);
		ОбновитьСтроки(мРезультатЗаписи.МассивЗаписанныхИдентификаторов, "2");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчиститьСтрокиРазнарядкиНаСервере(пДата, пМассивИдентификаторов)
	Возврат РегистрыСведений.Разнарядка.ОчиститьСтрокиРазнарядкиНаСервере(пДата, пМассивИдентификаторов);
КонецФункции

&НаКлиенте
Процедура ВыгрузкаВСМА(Команда)
	мМассивПутевыхЛистов = Новый Массив;
	мОтборВыбранных = Новый Структура("Выбрано", Истина);
	мСтрокиКПечати = фТаблицаРазнарядки.НайтиСтроки(мОтборВыбранных);
	Если мСтрокиКПечати.Количество() > 0 Тогда
		Для Каждого мСтрока Из мСтрокиКПечати Цикл
			Если ЗначениеЗаполнено(мСтрока.ПутевойЛист) Тогда
				мМассивПутевыхЛистов.Добавить(мСтрока.ПутевойЛист);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	мСтруктураПараметровДляФормыВыгрузки = Новый Структура("МассивПутевыхЛистов", мМассивПутевыхЛистов);
	ОткрытьФорму("Обработка.ВыгрузкаСМАГазпром.Форма.ФормаУпр", мСтруктураПараметровДляФормыВыгрузки, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВызываюДерево(Команда)
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ДеревоРазнарядки", , ЭтаФорма, , , , , );
	ЭтаФорма.Закрыть();
КонецПроцедуры
