&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуВМассивСтруктур(пТаблица, пЧистыйМассив = Ложь, пВычисляемыеКолонки = Неопределено)
	вМассив = Новый Массив;
	мСтрокаИменКолонок = "";
	Для Каждого мКолонка Из пТаблица.Колонки Цикл
		мСтрокаИменКолонок = мСтрокаИменКолонок + "," + мКолонка.Имя;
	КонецЦикла;
	
	//если нужны еще колонки
	Если пВычисляемыеКолонки <> Неопределено Тогда
		Для Каждого мВычисляемаяКолонка Из пВычисляемыеКолонки Цикл
			мСтрокаИменКолонок = мСтрокаИменКолонок + "," + мВычисляемаяКолонка.Имя;
		КонецЦикла;
	КонецЕсли;
	
	мСтрокаИменКолонок = Сред(мСтрокаИменКолонок, 2);
	мЧистыйМассив = пЧистыйМассив И Найти(мСтрокаИменКолонок, ",") = 0;
	
	
	Для Каждого мСтрока Из пТаблица Цикл
		Если Не мЧистыйМассив Тогда
			мСтруктура = Новый Структура(мСтрокаИменКолонок);
			ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
			Если пВычисляемыеКолонки <> Неопределено Тогда
				Для Каждого мВычисляемаяКолонка Из пВычисляемыеКолонки Цикл
					мСтруктура.Вставить(мВычисляемаяКолонка.Имя, мСтрока[мВычисляемаяКолонка.Источник]);
				КонецЦикла;
			КонецЕсли;
			вМассив.Добавить(мСтруктура);
		Иначе
			вМассив.Добавить(мСтрока[мСтрокаИменКолонок]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ДобавитьВТаблицуПоиска(пТС, пИдентификаторСтрокиДерева)
	мНоваяСтрокаТаблицыПоиска = фТаблицаПоискаТС.Добавить();
	мНоваяСтрокаТаблицыПоиска.ТС = пТС;
	мНоваяСтрокаТаблицыПоиска.ИдентификаторСтрокиДерева = пИдентификаторСтрокиДерева;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТСВДереве(пТС)
	мОтборПоТС = Новый Структура("ТС", пТС);
	мСтрокиПоТС = фТаблицаПоискаТС.НайтиСтроки(мОтборПоТС);
	Если мСтрокиПоТС.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат мСтрокиПоТС[0].ИдентификаторСтрокиДерева;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КомандаСформировать(Команда)
	мМассивКолонн = Новый Массив;
	фСписокВыбранныхСтрок.Очистить();
	мДанныеРазнарядки = ПолучитьДанныеРазнарядки(фДата, Неопределено, фНастройкаУпорядочивания, фНеКопироватьПоПризнакуВыходнойПраздник, фКолонна, фСмена, фГруппа);
	фСоответствиеТСВодителям = мДанныеРазнарядки.СоответствиеТСВодителям;
	фТаблицаПоискаТС.Очистить();
	фТаблицаМаршрутов.Очистить();
	фДеревоРазнарядки.ПолучитьЭлементы().Очистить();
	//обработка структуры
	Для Каждого мСтрокаРазнарядки Из мДанныеРазнарядки.МассивСтрок Цикл
		Если мСтрокаРазнарядки.ТС.Пустая() Тогда
			Если Не ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист) Тогда
				//помещаем цех / задание в пул
				мНовыйЭлементПула = фТаблицаМаршрутов.Добавить();
				ЗаполнитьЗначенияСвойств(мНовыйЭлементПула, мСтрокаРазнарядки);
				мНовыйЭлементПула.ЦехМаршрутСтрокой = СокрЛП(мНовыйЭлементПула.ЦехМаршрут);
				мНовыйЭлементПула.КонтрагентСтрокой = СокрЛП(мНовыйЭлементПула.Контрагент);
			КонецЕсли;
		Иначе
			//помещаем в дерево
			мОтборТС = Новый Структура("ТС", мСтрокаРазнарядки.ТС);
			мОтборСмена = Новый Структура("Смена", мСтрокаРазнарядки.Смена);
			мИдентификаторСтрокиДереваПоТС = ПолучитьСтрокуТСВДереве(мСтрокаРазнарядки.ТС);
			Если мИдентификаторСтрокиДереваПоТС <> Неопределено Тогда
				мЭлементДереваТС = фДеревоРазнарядки.НайтиПоИдентификатору(мИдентификаторСтрокиДереваПоТС);
			Иначе
				мЭлементДереваТС = Неопределено;
			КонецЕсли;
			Если мЭлементДереваТС <> Неопределено Тогда 
				//имели место быть случаи, когда попадается дважды машина без ПЛ и без строки разнарядки
				//	100% случаев связаны с ошибочным двойным внесением в список ТС Группы)
				Если ((Не ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист))
					И (Не ЗначениеЗаполнено(мСтрокаРазнарядки.ЦехМаршрут))
					И (Не ЗначениеЗаполнено(мСтрокаРазнарядки.МестоОказанияУслуг))
					И (Не ЗначениеЗаполнено(мСтрокаРазнарядки.ИдентификаторСтрокиЗаявки))) Тогда
					Если ЗначениеЗаполнено(фГруппа) Тогда
						Сообщить("ТС: " + мСтрокаРазнарядки.ГарНомерТС + " встречается дважды, проверьте состав группы");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(фГруппа) Тогда
					Продолжить;	//по группам - постобработка
				КонецЕсли;
				мКоллекцияЭлементовСмен = мЭлементДереваТС.ПолучитьЭлементы();
				мНайденнаяСтрокаСмены = Неопределено;
				Для Каждого мСтрокаСмены Из мКоллекцияЭлементовСмен Цикл
					Если мСтрокаСмены.Смена = мСтрокаРазнарядки.Смена И ((Истина И Не ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист)) Или (ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист) И (мСтрокаРазнарядки.ПутевойЛист = мСтрокаСмены.ПутевойЛист))) Тогда
						мНайденнаяСтрокаСмены = мСтрокаСмены.ПолучитьИдентификатор();
						мЭлементыСмены = мСтрокаСмены.ПолучитьЭлементы();
						мНоваяСтрокаМаршрута = мЭлементыСмены.Добавить();
						ЗаполнитьЗначенияСвойств(мНоваяСтрокаМаршрута, мСтрокаРазнарядки);
						мНоваяСтрокаМаршрута.сУровеньДерева = 2;
						мСтрокаСмены.ВремяПодачиОбщее = Мин(мСтрокаСмены.ВремяПодачи, ?(ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист), Дата("00010101") + (мСтрокаРазнарядки.ВремяПодачиПЛ - НачалоДня(мСтрокаРазнарядки.ВремяПодачиПЛ)), ?(мСтрокаРазнарядки.ВремяПодачи = null, Дата("00010101"), мСтрокаРазнарядки.ВремяПодачи)), ?(мСтрокаСмены.ВремяПодачиОбщее <> Дата("00010101"), мСтрокаСмены.ВремяПодачиОбщее, ?(мСтрокаРазнарядки.ВремяПодачи = null, Дата("00010101"), мСтрокаРазнарядки.ВремяПодачи)));
						мСтрокаСмены.ВремяВозвратаОбщее = Макс(мСтрокаСмены.ВремяВозврата, ?(ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист), Дата("00010101") + (мСтрокаРазнарядки.ВремяВозвратаПЛ - НачалоДня(мСтрокаРазнарядки.ВремяВозвратаПЛ)), мСтрокаРазнарядки.ВремяВозврата), ?(мСтрокаСмены.ВремяВозвратаОбщее <> Дата("00010101"), мСтрокаСмены.ВремяВозвратаОбщее, мСтрокаРазнарядки.ВремяВозврата + ?(мСтрокаРазнарядки.ВремяПодачи > мСтрокаРазнарядки.ВремяВозврата, 24 * 3600, 0)));
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// нет такой смены
				Если мНайденнаяСтрокаСмены = Неопределено Тогда
					//добавляем смену и маршрут
					мЭлементДереваТС.ЕстьЗадание = Истина;
					мСтрокаСмены = мКоллекцияЭлементовСмен.Добавить();
					ЗаполнитьЗначенияСвойств(мСтрокаСмены, мСтрокаРазнарядки);
					мСтрокаСмены.сУровеньДерева = 1;
					мНоваяСтрокаМаршрута = мСтрокаСмены.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(мНоваяСтрокаМаршрута, мСтрокаРазнарядки);
					мНоваяСтрокаМаршрута.сУровеньДерева = 2;
					Элементы.фДеревоРазнарядки.Развернуть(мИдентификаторСтрокиДереваПоТС);
					мНайденнаяСтрокаСмены = мСтрокаСмены.ПолучитьИдентификатор();
					мСтрокаСмены.ВремяПодачиОбщее = Мин(мСтрокаСмены.ВремяПодачи, ?(ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист), Дата("00010101") + (мСтрокаРазнарядки.ВремяПодачиПЛ - НачалоДня(мСтрокаРазнарядки.ВремяПодачиПЛ)), ?(мСтрокаРазнарядки.ВремяПодачи = null, Дата("00010101"), мСтрокаРазнарядки.ВремяПодачи)), ?(мСтрокаСмены.ВремяПодачиОбщее <> Дата("00010101"), мСтрокаСмены.ВремяПодачиОбщее, ?(мСтрокаРазнарядки.ВремяПодачи = null, Дата("00010101"), мСтрокаРазнарядки.ВремяПодачи)));
					мСтрокаСмены.ВремяВозвратаОбщее = Макс(мСтрокаСмены.ВремяВозврата, ?(ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист), Дата("00010101") + (мСтрокаРазнарядки.ВремяВозвратаПЛ - НачалоДня(мСтрокаРазнарядки.ВремяВозвратаПЛ)), ?(мСтрокаРазнарядки.ВремяВозврата = null, Дата("00010101"), мСтрокаРазнарядки.ВремяВозврата)), ?(мСтрокаСмены.ВремяВозвратаОбщее <> Дата("00010101"), мСтрокаСмены.ВремяВозвратаОбщее, ?(мСтрокаРазнарядки.ВремяВозврата = null, Дата("00010101"), мСтрокаРазнарядки.ВремяВозврата) + ?(?(мСтрокаРазнарядки.ВремяПодачи = null, Дата("00010101"), мСтрокаРазнарядки.ВремяПодачи) > ?(мСтрокаРазнарядки.ВремяВозврата = null, Дата("00010101"), мСтрокаРазнарядки.ВремяВозврата), 24 * 3600, 0)));
				КонецЕсли;
				Элементы.фДеревоРазнарядки.Развернуть(мНайденнаяСтрокаСмены);
			Иначе
				//новая строка ТС, Заполняем
				мЭлементыКорня = фДеревоРазнарядки.ПолучитьЭлементы();
				мНоваяСтрокаТС = мЭлементыКорня.Добавить();
				мИдентификаторСтрокиТС = мНоваяСтрокаТС.ПолучитьИдентификатор();
				ДобавитьВТаблицуПоиска(мСтрокаРазнарядки.ТС, мИдентификаторСтрокиТС);
				ЗаполнитьЗначенияСвойств(мНоваяСтрокаТС, мСтрокаРазнарядки);
				Если мМассивКолонн.Найти(мНоваяСтрокаТС.Колонна) = Неопределено Тогда
					мМассивКолонн.Добавить(мНоваяСтрокаТС.Колонна);
				КонецЕсли;
				мНоваяСтрокаТС.сУровеньДерева = 0;
				мНоваяСтрокаТС.ИдентификаторСтрокиЗаявки = "";
				
				Если ЗначениеЗаполнено(мСтрокаРазнарядки.ПутевойЛист) Или ЗначениеЗаполнено(мСтрокаРазнарядки.ЦехМаршрут) Или ЗначениеЗаполнено(мСтрокаРазнарядки.МестоОказанияУслуг) Или ЗначениеЗаполнено(мСтрокаРазнарядки.ВремяПодачи) Тогда
					мНоваяСтрокаСмены = мНоваяСтрокаТС.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(мНоваяСтрокаСмены, мСтрокаРазнарядки);
					мНоваяСтрокаСмены.сУровеньДерева = 1;
					мНоваяСтрокаСмены.ИдентификаторСтрокиЗаявки = "";
					
					мНоваяСтрокаТС.ЕстьЗадание = Истина;
					мНоваяСтрокаМаршрута = мНоваяСтрокаСмены.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(мНоваяСтрокаМаршрута, мСтрокаРазнарядки);
					мНоваяСтрокаМаршрута.сУровеньДерева = 2;
					
					Элементы.фДеревоРазнарядки.Развернуть(мИдентификаторСтрокиТС);
					Элементы.фДеревоРазнарядки.Развернуть(мНоваяСтрокаСмены.ПолучитьИдентификатор());
					мНоваяСтрокаСмены.ВремяПодачиОбщее = Мин(?(ЗначениеЗаполнено(мНоваяСтрокаСмены.ПутевойЛист), Дата("00010101") + (мНоваяСтрокаСмены.ВремяПодачиПЛ - НачалоДня(мНоваяСтрокаСмены.ВремяПодачиПЛ)), мСтрокаРазнарядки.ВремяПодачи));
					мНоваяСтрокаСмены.ВремяВозвратаОбщее = Макс(мНоваяСтрокаСмены.ВремяВозврата, ?(ЗначениеЗаполнено(мНоваяСтрокаСмены.ПутевойЛист), Дата("00010101") + (мНоваяСтрокаСмены.ВремяВозвратаПЛ - НачалоДня(мНоваяСтрокаСмены.ВремяВозвратаПЛ)), мСтрокаРазнарядки.ВремяВозврата + ?(мСтрокаРазнарядки.ВремяПодачи > мСтрокаРазнарядки.ВремяВозврата, 24 * 3600, 0)));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если фКолонна.Пустая() И Не фГруппа.Пустая() Тогда
		ЗаполнитьПоПредыдущимДанным(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеРазнарядки(пДата, пМассивИдентификаторов = Неопределено, пНастройкаУпорядочивания = Неопределено, пНеКопироватьПоПризнакуВыходнойПраздник = Ложь, пКолонна, пСмена, пГруппа)
	вСтруктураВозврата = Новый Структура();
	мЗапрос = Новый Запрос(РегистрыСведений.Разнарядка.ПолучитьТекстЗапросаРазнарядкаДеревом());
	мЗапрос.УстановитьПараметр("ДатаРазнарядки", пДата);
	мЗапрос.УстановитьПараметр("Колонна", пКолонна);
	мЗапрос.УстановитьПараметр("Смена", пСмена);
	мЗапрос.УстановитьПараметр("Группа", пГруппа);
	Если пНастройкаУпорядочивания = Неопределено Или пНастройкаУпорядочивания = 0 Тогда
		мНастройкаУпорядочивания = 1;
	Иначе
		мНастройкаУпорядочивания = пНастройкаУпорядочивания;
	КонецЕсли;
	мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "//УПОРЯДОЧИВАНИЕ" + мНастройкаУпорядочивания, "");
	
	Если пМассивИдентификаторов <> Неопределено Тогда	//при вызове для обновления, выгружаются только отдельные идентификаторы
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "//УСЛОВИЕОБНОВЛЕНИЕСТРОК ", "");
		мЗапрос.УстановитьПараметр("МассивИдентификаторов", пМассивИдентификаторов);
	КонецЕсли;
	
	мКвалификаторСтроки = Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная);
	
	мРезультаты = мЗапрос.ВыполнитьПакет();
	мМассивДополнительныхДанных = Новый Массив;
	мСтруктураДополнительныхДанных = Новый Структура("Имя, Источник, ОписаниеТипов", "ГарНомерТСКопия", "ГарНомерТС", Новый ОписаниеТипов( , , , , мКвалификаторСтроки));
	мМассивДополнительныхДанных.Добавить(мСтруктураДополнительныхДанных);
	мСтруктураСоответствий = СформироватьСоответствиеТСВодителям(мРезультаты[6].Выгрузить());
	мСоответствиеТСВодителям = мСтруктураСоответствий.Соответствие;
	вСтруктураВозврата.Вставить("МассивСтрок", ПреобразоватьТаблицуВМассивСтруктур(мРезультаты[5].Выгрузить(), Ложь, мМассивДополнительныхДанных));
	вСтруктураВозврата.Вставить("СоответствиеТСВодителям", мСоответствиеТСВодителям);
	Возврат вСтруктураВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСоответствиеТСВодителям(пТаблица)
	вСоответствие = Новый Соответствие;
	вСоответствие2 = Новый Соответствие;
	
	Для Каждого тЭлемент Из пТаблица Цикл
		Если Не ЗначениеЗаполнено(тЭлемент.ТС) Тогда
			Продолжить;
		КонецЕсли;
		мЗначение = "" + СокрЛП(тЭлемент.ГарНомерТС) + тЭлемент.ВтораяСмена;
		мСоответствующийМассивСотрудников = вСоответствие.Получить(мЗначение);
		мСоответствующийМассивСотрудников2 = вСоответствие2.Получить(мЗначение);
		Если ЗначениеЗаполнено(тЭлемент["Сотрудник"]) Тогда
			Если мСоответствующийМассивСотрудников = Неопределено Тогда
				мСоответствующийМассивСотрудников = Новый Массив;
				мСоответствующийМассивСотрудников.Добавить(тЭлемент["Сотрудник"]);
				вСоответствие.Вставить(мЗначение, мСоответствующийМассивСотрудников);
			ИначеЕсли мСоответствующийМассивСотрудников.Найти(тЭлемент["Сотрудник"]) = Неопределено Тогда
				мСоответствующийМассивСотрудников.Добавить(тЭлемент["Сотрудник"]);
				вСоответствие.Вставить(мЗначение, мСоответствующийМассивСотрудников);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(тЭлемент["Сотрудник2"]) Тогда
			Если мСоответствующийМассивСотрудников2 = Неопределено Тогда
				мСоответствующийМассивСотрудников2 = Новый Массив;
				мСоответствующийМассивСотрудников2.Добавить(тЭлемент["Сотрудник2"]);
				вСоответствие2.Вставить(мЗначение, мСоответствующийМассивСотрудников2);
			ИначеЕсли мСоответствующийМассивСотрудников2.Найти(тЭлемент["Сотрудник2"]) = Неопределено Тогда
				мСоответствующийМассивСотрудников2.Добавить(тЭлемент["Сотрудник2"]);
				вСоответствие2.Вставить(мЗначение, мСоответствующийМассивСотрудников2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	вСтруктураСоответствий = Новый Структура("Соответствие, Соответствие2", Новый ФиксированноеСоответствие(вСоответствие), Новый ФиксированноеСоответствие(вСоответствие2));
	Возврат вСтруктураСоответствий;
КонецФункции

&НаКлиенте
Процедура КомандаПоказатьСкрытьЗадания(Команда)
	Элементы.ГруппаСписокМаршрутов.Видимость = Не Элементы.ГруппаСписокМаршрутов.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ГруппаСписокМаршрутов.Видимость = Ложь;
	фКонтрагентОрганизации = ПолучитьКонтрагентаОсновнойОрганизации();
	ОбновитьЭлементыФормы();
	Если фНастройкаУпорядочивания = 0 Тогда
		фНастройкаУпорядочивания = 2;
		фПечатьСразуНаПринтер = Истина;
		ПоказатьНастройки(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаОсновнойОрганизации()
	мОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	мКонтр = Справочники.Контрагенты.ПустаяСсылка();
	Если ЗначениеЗаполнено(мОрганизация) И ЗначениеЗаполнено(мОрганизация.ИНН) Тогда
		мКонтр = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", мОрганизация.ИНН);
	КонецЕсли;
	//Сообщить("" + мКонтр);	//отладочное сообщение
	Возврат мКонтр;
КонецФункции

&НаКлиенте
Процедура фДеревоРазнарядкиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	мМассивСтрокСменКОбновлению = Новый Массив;
	мМассивНовыхСтрокТаблицыМаршрутов = Новый Массив;
	//	мМассивПутевыхЛистовКОбновлению = Новый Массив;
	Если Элемент = Элементы.фДеревоРазнарядки Тогда
		мСтрокаНазначения = фДеревоРазнарядки.НайтиПоИдентификатору(Строка);
		Если фИсточникПеретаскивания = 0 Тогда
			мПеретаскиваемаяСтрока = фДеревоРазнарядки.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
			//отказ при перетаскивании в самого себя и другие недопустимые перетаскивания
			Если мПеретаскиваемаяСтрока.сУровеньДерева = 0 Или (мПеретаскиваемаяСтрока = мСтрокаНазначения) Или мПеретаскиваемаяСтрока.ПолучитьРодителя() = мСтрокаНазначения Или (мСтрокаНазначения.сУровеньДерева > 0 И мСтрокаНазначения.ПолучитьРодителя() = мПеретаскиваемаяСтрока) Или (мСтрокаНазначения.сУровеньДерева = 0 И ((мСтрокаНазначения = мПеретаскиваемаяСтрока.ПолучитьРодителя()) Или (мПеретаскиваемаяСтрока.сУровеньДерева = 2 И мСтрокаНазначения = мПеретаскиваемаяСтрока.ПолучитьРодителя().ПолучитьРодителя()))) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если мСтрокаНазначения.сУровеньДерева = 2 Тогда
			мСтрокаНазначения = мСтрокаНазначения.ПолучитьРодителя();
		КонецЕсли;
		//Если ЗначениеЗаполнено(мСтрокаНазначения.ПутевойЛист) И мМассивПутевыхЛистовКОбновлению.Найти(мСтрокаНазначения.ПутевойЛист) = Неопределено Тогда
		//	мМассивПутевыхЛистовКОбновлению.Добавить(мСтрокаНазначения.ПутевойЛист);
		//КонецЕсли;
	Иначе
		Если фИсточникПеретаскивания = 1 Тогда
			Возврат;
		КонецЕсли;
		мСтрокаНазначения = 0;
	КонецЕсли;
	
	Если мСтрокаНазначения <> Неопределено Тогда
		мЧистыйМассивПереносимыхСтрок = Новый Массив;
		мМассивУдаляемого = Новый Массив;
		
		Для Каждого мИдентификаторПеретаскиваемого Из ПараметрыПеретаскивания.Значение Цикл
			//смотрим что тащится
			Если фИсточникПеретаскивания = 1 Тогда
				мЧистыйМассивПереносимыхСтрок.Добавить(мИдентификаторПеретаскиваемого);
			Иначе
				Если Элемент = Элементы.фТаблицаМаршрутов Тогда
					мПеретаскиваемаяСтрока = мИдентификаторПеретаскиваемого;
				Иначе
					мПеретаскиваемаяСтрока = фДеревоРазнарядки.НайтиПоИдентификатору(мИдентификаторПеретаскиваемого);
				КонецЕсли;
				
				Если мПеретаскиваемаяСтрока.сУровеньДерева = 0 Тогда
					Продолжить; //если тащится ТС целиком - ничего не делаем, поведение не регламентировано
				ИначеЕсли мПеретаскиваемаяСтрока.сУровеньДерева = 1 Тогда
					//тащится смена, возможно у нее есть подчиненные строки - переносим их все
					мЭлементыСмены = мПеретаскиваемаяСтрока.ПолучитьЭлементы();
					мНеУдалятьСмену = Ложь;
					Для Каждого мЭлемент Из мЭлементыСмены Цикл
						Если СокрЛП(мЭлемент.ИдентификаторСтрокиЗаявки) <> "" Тогда
							мЧистыйМассивПереносимыхСтрок.Добавить(мЭлемент.ПолучитьИдентификатор());
						Иначе
							мНеУдалятьСмену = Истина;
						КонецЕсли;
					КонецЦикла;
					Если (Не мНеУдалятьСмену) И (Не ЗначениеЗаполнено(мПеретаскиваемаяСтрока.ПутевойЛист)) Тогда
						мМассивУдаляемого.Добавить(мИдентификаторПеретаскиваемого);
					Иначе
						мМассивСтрокСменКОбновлению.Добавить(мПеретаскиваемаяСтрока.ПолучитьИдентификатор());
					КонецЕсли;
				ИначеЕсли мПеретаскиваемаяСтрока.сУровеньДерева = 2 Тогда
					//тащится 1 строка задания - переносим ее
					
					Если СокрЛП(мПеретаскиваемаяСтрока.ИдентификаторСтрокиЗаявки) <> "" Тогда
						мЧистыйМассивПереносимыхСтрок.Добавить(мИдентификаторПеретаскиваемого);
						мРодительСтроки = мПеретаскиваемаяСтрока.ПолучитьРодителя();
						Если мРодительСтроки.ПолучитьЭлементы().Количество() = 1 Тогда
							Если Не ЗначениеЗаполнено(мРодительСтроки.ПутевойЛист) Тогда
								мМассивУдаляемого.Добавить(мРодительСтроки.ПолучитьИдентификатор());
							Иначе
								мРодительСтроки.ИдентификаторСтрокиЗаявки = "";
								мМассивСтрокСменКОбновлению.Добавить(мРодительСтроки.ПолучитьИдентификатор());
							КонецЕсли;
						ИначеЕсли ЗначениеЗаполнено(мРодительСтроки.ПутевойЛист) Тогда
							//если есть ПЛ - обновляем его в любом случае, куда бы из него
							//	не переносили  - в другой ПЛ/строку смены или в пул заданий
							мМассивСтрокСменКОбновлению.Добавить(мРодительСтроки.ПолучитьИдентификатор());
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//Если ЗначениеЗаполнено(мПеретаскиваемаяСтрока.ПутевойЛист) И мМассивПутевыхЛистовКОбновлению.Найти(мПеретаскиваемаяСтрока.ПутевойЛист) = Неопределено Тогда
				//	мМассивПутевыхЛистовКОбновлению.Добавить(мПеретаскиваемаяСтрока.ПутевойЛист);
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если мЧистыйМассивПереносимыхСтрок.Количество() > 0 Тогда
			//определяем состав изменяемых реквизитов в зависимости от Источника
			мСтрокаСмены = Неопределено;
			мСтрокаИзменяемыхРеквизитов = Неопределено;		//реквизиты, которые в новых строках смены будут скопированы из мСтрокаНазначения
			мСтрокаИсключаемыхРеквизитов = Неопределено;	//реквизиты, которые в новых строках смены будут заполнены из перетаскиваемого элемента
			Если Элемент = Элементы.фДеревоРазнарядки Тогда
				Если мСтрокаНазначения.сУровеньДерева = 1 Тогда
					// берем из старой строки все за исключеним ТС, Водителя и смены
					мСтрокаИзменяемыхРеквизитов = "ТС, Водитель, Водитель2, ДатаВозврата, Смена";
					мСтрокаСмены = мСтрокаНазначения;
				Иначе
					// берем все данные из старой строки, меняем только машину. Смену ищем по "старой" строке
					//	ПЛ тоже нужно игнорировать, иначе встанет старый ПЛ
					мСтрокаИзменяемыхРеквизитов = "ТС, ПутевойЛист, ГарНомерТС, ГосНомерТС, Колонна";
				КонецЕсли;
			Иначе
				мСтрокаИсключаемыхРеквизитов = "ИдентификаторСтрокиЗаявки, ЦехМаршрут, МестоОказанияУслуг, Смена, ВремяПодачи, ВремяВозврата, ТипТС, Ответственный";
			КонецЕсли;
			
			Для Каждого мПереносимыйИдентификатор из мЧистыйМассивПереносимыхСтрок Цикл
				Если ТипЗнч(мПереносимыйИдентификатор) = Тип("ДанныеФормыЭлементДерева") Или ТипЗнч(мПереносимыйИдентификатор) = Тип("ДанныеФормыЭлементКоллекции") Тогда
					//строка таблицы заданий
					мПереносимыйЭлемент = мПереносимыйИдентификатор;
				Иначе
					// переносится строка дерева
					мПереносимыйЭлемент = фДеревоРазнарядки.НайтиПоИдентификатору(мПереносимыйИдентификатор);
				КонецЕсли;
				
				Если Элемент = Элементы.фДеревоРазнарядки Тогда
					Если мСтрокаСмены = Неопределено Тогда
						//ищем строку смены внутри мСтрокаНазначения
						мПодчиненныеСтроки = мСтрокаНазначения.ПолучитьЭлементы();
						Для Каждого мСтрокаСменыНазначения Из мПодчиненныеСтроки Цикл
							Если мСтрокаСменыНазначения.Смена = мПереносимыйЭлемент.Смена Тогда
								мСтрокаСмены = мСтрокаСменыНазначения;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если мСтрокаСмены = Неопределено Тогда
							мСтрокаСмены = мПодчиненныеСтроки.Добавить();	//нужной смены нет
							ЗаполнитьЗначенияСвойств(мСтрокаСмены, мПереносимыйЭлемент, мСтрокаИсключаемыхРеквизитов, ?(фИсточникПеретаскивания = 0, мСтрокаИзменяемыхРеквизитов, ""));
							ЗаполнитьЗначенияСвойств(мСтрокаСмены, мСтрокаНазначения, мСтрокаИзменяемыхРеквизитов, мСтрокаИсключаемыхРеквизитов);
							мСтрокаСмены.сУровеньДерева = 1;
							//если переносится строка из таблицы Маршрутов в строку ТС - водитель будет пустой. подставить?...
						КонецЕсли;
					КонецЕсли;
					мСтрокиЗаданий = мСтрокаСмены.ПолучитьЭлементы();
					//теперь добавляем непосредственно строки с заданием
					мНоваяСтрокаЗадания = мСтрокаСмены.ПолучитьЭлементы().Добавить();
					мМассивСтрокСменКОбновлению.Добавить(мСтрокаСмены.ПолучитьИдентификатор());
					ЗаполнитьЗначенияСвойств(мНоваяСтрокаЗадания, мПереносимыйЭлемент, мСтрокаИсключаемыхРеквизитов, ?(фИсточникПеретаскивания = 0, мСтрокаИзменяемыхРеквизитов, ""));
					//	поменять мСтрокаНазначения на мСтрокаСмены ? ТЕСТ В ОТЛАДЧИКЕ, Дерево в Дерево, Задание в Дерево
					ЗаполнитьЗначенияСвойств(мНоваяСтрокаЗадания, мСтрокаСмены, мСтрокаИзменяемыхРеквизитов, мСтрокаИсключаемыхРеквизитов);
					
					мСтрокаСмены.ВремяПодачиОбщее = Мин(мПереносимыйЭлемент.ВремяПодачи, ?(мСтрокиЗаданий.Количество() = 1, мПереносимыйЭлемент.ВремяПодачи, мСтрокаСмены.ВремяПодачиОбщее));
					//// старая строка, даже не знаю что и откуда, все как в тумане =)) должно быть как сейчас, намного проще
					//тмпПервоеСлагаемое = мСтрокаСмены.ВремяПодачи;
					//тмпВтороеСлагаемое = ?(фИсточникПеретаскивания = 0, ?(ЗначениеЗаполнено(мПереносимыйЭлемент.ПутевойЛист), Дата("00010101") + (мПереносимыйЭлемент.ВремяПодачиПЛ - НачалоДня(мПереносимыйЭлемент.ВремяПодачиПЛ)), ?(мПереносимыйЭлемент.ВремяПодачиОбщее <> Дата("00010101"), мСтрокаСмены.ВремяПодачиОбщее, мПереносимыйЭлемент.ВремяПодачи)), мПереносимыйЭлемент.ВремяПодачи);
					//тмпПромежуточное1 = ?(ЗначениеЗаполнено(мПереносимыйЭлемент.ПутевойЛист), Дата("00010101") + (мПереносимыйЭлемент.ВремяПодачиПЛ - НачалоДня(мПереносимыйЭлемент.ВремяПодачиПЛ)), ?(мПереносимыйЭлемент.ВремяПодачиОбщее <> Дата("00010101"), мСтрокаСмены.ВремяПодачиОбщее, мПереносимыйЭлемент.ВремяПодачи));
					//тмпПромежуточное2 = ?(мПереносимыйЭлемент.ВремяПодачиОбщее <> Дата("00010101"), мСтрокаСмены.ВремяПодачиОбщее, мПереносимыйЭлемент.ВремяПодачи);
					
					
					мСтрокаСмены.ВремяВозвратаОбщее = Макс(мПереносимыйЭлемент.ВремяВозврата + ?(мПереносимыйЭлемент.ВремяПодачи > мПереносимыйЭлемент.ВремяВозврата, 24 * 3600, 0), мСтрокаСмены.ВремяВозвратаОбщее + ?(мСтрокаСмены.ВремяПодачиОбщее > мСтрокаСмены.ВремяВозвратаОбщее, 24 * 3600, 0));
					//// старая строка, даже не знаю что и откуда, все как в тумане =)) должно быть как сейчас, намного проще
					// Макс(мСтрокаСмены.ВремяВозврата, ?(фИсточникПеретаскивания = 0, ?(ЗначениеЗаполнено(мПереносимыйЭлемент.ПутевойЛист), Дата("00010101") + (мПереносимыйЭлемент.ВремяВозвратаПЛ - НачалоДня(мПереносимыйЭлемент.ВремяВозвратаПЛ)), мПереносимыйЭлемент.ВремяВозврата), мПереносимыйЭлемент.ВремяВозврата), ?(фИсточникПеретаскивания = 0, ?(мПереносимыйЭлемент.ВремяВозвратаОбщее <> Дата("00010101"), мСтрокаСмены.ВремяВозвратаОбщее, мПереносимыйЭлемент.ВремяВозврата), мПереносимыйЭлемент.ВремяВозврата));	// мПереносимыйЭлемент.ВремяВозврата
					
					мНоваяСтрокаЗадания.сУровеньДерева = 2;
					мИдентификаторСтрокиСмены = мСтрокаСмены.ПолучитьИдентификатор();
					Элементы.фДеревоРазнарядки.Развернуть(мИдентификаторСтрокиСмены);
				Иначе
					мСтрокаНазначения = фТаблицаМаршрутов.Добавить();
					ЗаполнитьЗначенияСвойств(мСтрокаНазначения, мПереносимыйЭлемент);
					мСтрокаНазначения.ЦехМаршрутСтрокой = СокрЛП(мСтрокаНазначения.ЦехМаршрут);
					мСтрокаНазначения.КонтрагентСтрокой = СокрЛП(мСтрокаНазначения.Контрагент);
					//смену задания возвращаем ту, которая "должна" стоять
					мСтрокаНазначения.Смена = ?(Час(мСтрокаНазначения.ВремяПодачи) > 4 И Час(мСтрокаНазначения.ВремяПодачи) < 16, 1, 2);
					мМассивНовыхСтрокТаблицыМаршрутов.Добавить(мСтрокаНазначения);
				КонецЕсли;
			КонецЦикла;
			
			//теперь удаляем старые ненужные строки, оттуда откуда они были перетащены
			//	Объединим массивы
			
			ОбъединитьМассивы(мЧистыйМассивПереносимыхСтрок, мМассивУдаляемого);

			Если фИсточникПеретаскивания = 0 Тогда
				Для Каждого мПереносимыйИдентификатор из мЧистыйМассивПереносимыхСтрок Цикл
					Если ТипЗнч(мПереносимыйИдентификатор) = Тип("ДанныеФормыЭлементДерева") Или ТипЗнч(мПереносимыйИдентификатор) = Тип("ДанныеФормыЭлементКоллекции") Тогда
						мПереносимыйЭлемент = мПереносимыйИдентификатор;
					Иначе
						мПереносимыйЭлемент = фДеревоРазнарядки.НайтиПоИдентификатору(мПереносимыйИдентификатор);
					КонецЕсли;
					мРодительПереносимого = мПереносимыйЭлемент.ПолучитьРодителя();
					мКоллекцияСоседейПереносимого = мРодительПереносимого.ПолучитьЭлементы();
					мКоллекцияСоседейПереносимого.Удалить(мКоллекцияСоседейПереносимого.Индекс(мПереносимыйЭлемент));
				КонецЦикла;
			Иначе
				Для Каждого мПереносимыйИдентификатор из мЧистыйМассивПереносимыхСтрок Цикл
					фТаблицаМаршрутов.Удалить(фТаблицаМаршрутов.Индекс(мПереносимыйИдентификатор));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если мМассивСтрокСменКОбновлению.Количество() > 0 Тогда
			мСтрокаИдентификаторов = "";
			Для Каждого мЭлемент Из мМассивСтрокСменКОбновлению Цикл
				
				//1. обновляем соответствие выписки по ИД заявок
				//	проверяем какие ИД в дереве сейчас
				//	сверяем с регистром, лишее удаляем, новое пишем
				мОчиститьСмену = Ложь;
				мСтрокаДереваСмены = фДеревоРазнарядки.НайтиПоИдентификатору(мЭлемент);
				мЭлементыСтрокиСмены = мСтрокаДереваСмены.ПолучитьЭлементы();
				Если ЗначениеЗаполнено(мСтрокаДереваСмены.ПутевойЛист) Тогда
					мТекущиеИдентификаторы = ПолучитьМассивИдентификаторовПутевогоЛиста(мСтрокаДереваСмены.ПутевойЛист);
					Для Каждого мСтрокаРазнарядки Из мЭлементыСтрокиСмены Цикл
						мИдентификатор = мСтрокаРазнарядки.ИдентификаторСтрокиЗаявки;
						Если ЗначениеЗаполнено(мИдентификатор) Тогда
							мПозицияВМассиве = мТекущиеИдентификаторы.Найти(мИдентификатор);
							
							//записать новый
							мСтруктураСтроки = Новый Структура("ИдентификаторСтрокиЗаявки, ТС, Водитель, Водитель2");
							ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мСтрокаРазнарядки);
							ЗафиксироватьФактВыписки(НачалоДня(фДата), мСтрокаДереваСмены.ПутевойЛист, мСтруктураСтроки);
							Если мПозицияВМассиве <> Неопределено Тогда
								мТекущиеИдентификаторы.Удалить(мПозицияВМассиве);	//удаляем чтобы остались только лишние элементы, которые нужно удалить
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					//осталось только лишнее
					Если мТекущиеИдентификаторы.Количество() > 0 Тогда
						Для Каждого мЛишнийИдентификатор Из мТекущиеИдентификаторы Цикл
							//удалить соответствие
							ЗафиксироватьФактВыписки(НачалоДня(фДата), ПредопределенноеЗначение("Документ.уатПутевойЛист.ПустаяСсылка"), Новый структура("ИдентификаторСтрокиЗаявки", мЛишнийИдентификатор));
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				мМассивЗаданий = Новый Массив;
				//2. вызываем запись разнарядки всех измененных строк
				Для Каждого мСтрокаРазнарядки Из мЭлементыСтрокиСмены Цикл
					мСтруктураСтроки = ПодготовитьСтрокуРазнарядкиКЗаписи(мСтрокаРазнарядки);
					ЗаписатьСтрокуРазнарядки(НачалоДня(фДата), мСтруктураСтроки);
					Если ЗначениеЗаполнено(мСтрокаДереваСмены.ПутевойЛист) Тогда
						мМассивЗаданий.Добавить(мСтруктураСтроки);
					КонецЕсли;
				КонецЦикла;
				
				//3. обновляем данные ПЛ, если выписаны
				Если ЗначениеЗаполнено(мСтрокаДереваСмены.ПутевойЛист) Тогда
					мСтруктураОбщихДанныхПЛ = Новый Структура("ТС, ВремяПодачиОбщее, ВремяВозвратаОбщее, Водитель, Водитель2, КонтрагентПЛ, Контрагент, ДатаВозврата, Прицеп");
					ЗаполнитьЗначенияСвойств(мСтруктураОбщихДанныхПЛ, мСтрокаДереваСмены);
					ОбновитьПутевойЛист(мСтрокаДереваСмены.ПутевойЛист, фДата, мСтруктураОбщихДанныхПЛ, мМассивЗаданий);
				КонецЕсли;
				
				//4. обновляем дерево:
				//	удаляем старые строки
				//	выполняем запрос по строкам, читаем данные в дерево
			КонецЦикла;
			//Сообщить("Обновляем ТС: " + мСтрокаИдентификаторов);
		КонецЕсли;
		
		Для Каждого мЭлемент Из мМассивНовыхСтрокТаблицыМаршрутов Цикл
			//по этим строкам вызываем запись с пустым полями [ТС, Водитель, Водитель2, Прицеп, СтатусыОтказа] + ставим признак ТСПринудительноСтерто
			мСтруктураСтроки = Новый Структура("ИдентификаторСтрокиЗаявки, ЦехМаршрут, МестоОказанияУслуг, Колонна, Смена, ВремяПодачи, ВремяВозврата, ТипТС, Ответственный, ПутевойЛист");
			ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мЭлемент);
			мСтруктураСтроки.Вставить("ТСПринудительноСтерто", Истина);
			ЗаписатьСтрокуРазнарядки(НачалоДня(фДата), мСтруктураСтроки);
		КонецЦикла;
	Иначе
		Сообщить("Ошибка перетаскивания");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьМассивы(пПервыйМассив, пВторойМассив)
	Для Каждого мЭлементВторого Из пВторойМассив Цикл
		пПервыйМассив.Добавить(мЭлементВторого);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиПриАктивизацииСтроки(Элемент)
	// Меняем видимость элементов контекстного меню в зависимости от уровня и/или данных строки
	//мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	//Если мСтрокаТекущихДанных <> Неопределено Тогда
	//Элементы.фДеревоРазнарядки.КонтекстноеМеню.ПодчиненныеЭлементы.фДеревоРазнарядкиКонтекстноеМенюОтдельнаяСмена.Видимость = мСтрокаТекущихДанных.сУровеньДерева = 2;
	//Элементы.фДеревоРазнарядки.КонтекстноеМеню.ПодчиненныеЭлементы.фДеревоРазнарядкиКонтекстноеМенюСоздатьЗаписьИПривязатьКЛоту.Видимость = (мСтрокаТекущихДанных.сУровеньДерева = 2) И Не ЗначениеЗаполнено(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки);
	//КонецЕсли;
	//Элементы.фДеревоРазнарядкиГруппа7РасширеннаяПодсказка.Заголовок = "Проверка";
	//Элементы.фДеревоРазнарядкиЦехМаршрутРасширеннаяПодсказка.Заголовок = "Проверка2";
	//Элементы.фДеревоРазнарядкиМестоОказанияУслугРасширеннаяПодсказка.Заголовок = "Проверка3";
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаМаршрутовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	фИсточникПеретаскивания = 0;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаМаршрутовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	фИсточникПеретаскивания = 1;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивИдентификаторовПутевогоЛиста(пПутевойЛист)
	вМассив = Новый Массив;
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ВыпискаПЛПоИдентификаторам.ИдентификаторСтрокиЗаявки КАК ИдентификаторСтрокиЗаявки,
	|	ВыпискаПЛПоИдентификаторам.ПутевойЛист КАК ПутевойЛист
	|ИЗ
	|	РегистрСведений.ВыпискаПЛПоИдентификаторам КАК ВыпискаПЛПоИдентификаторам
	|ГДЕ
	|	ВыпискаПЛПоИдентификаторам.ПутевойЛист В(&ПутевойЛист)");
	мЗапрос.УстановитьПараметр("ПутевойЛист", пПутевойЛист);
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Пока мРезультат.Следующий() Цикл
		вМассив.Добавить(мРезультат.ИдентификаторСтрокиЗаявки);
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗафиксироватьФактВыписки(пДата, пПутевойЛист, пСтруктура)
	РегистрыСведений.ВыпискаПЛПоИдентификаторам.ЗафиксироватьФактВыписки(пДата, пПутевойЛист, пСтруктура);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСтрокуРазнарядки(пДата, пСтруктураСтроки)
	пМассивСтруктур = Новый Массив;
	пМассивСтруктур.Добавить(пСтруктураСтроки);
	РегистрыСведений.Разнарядка.ЗаписатьСтрокиРазнарядки(пДата, пМассивСтруктур);
КонецПроцедуры

&НаКлиенте
Процедура ОтдельнаяСмена(Команда)
	Если Элементы.фДеревоРазнарядки.ТекущиеДанные <> Неопределено И Элементы.фДеревоРазнарядки.ТекущиеДанные.сУровеньДерева = 2 Тогда
		мТекущаяСтрока = Элементы.фДеревоРазнарядки.ТекущиеДанные;
		//текущую строку задания перемещаем в новую смену
		// 1. ищем макс смену и добавляем новую + 1 в родителя
		мСтрокаСмены = мТекущаяСтрока.ПолучитьРодителя();
		мСтрокаТС = мСтрокаСмены.ПолучитьРодителя();
		мСтрокиСмен = мСтрокаТС.ПолучитьЭлементы();
		мМаксСмена = 0;
		Для Каждого мЭлемент Из мСтрокиСмен Цикл
			мМаксСмена = Макс(мЭлемент.Смена, мМаксСмена);
		КонецЦикла;
		
		// 2. добавляем строку в новую смену
		мНоваяСтрокаСмены = мСтрокиСмен.Добавить();
		ЗаполнитьЗначенияСвойств(мНоваяСтрокаСмены, мСтрокаТС);
		мНоваяСтрокаСмены.сУровеньДерева = 1;
		мНоваяСтрокаСмены.Смена = мМаксСмена + 1;
		мНоваяСтрокаСмены.ПутевойЛист = Неопределено;
		мНоваяСтрокаСмены.ВремяПодачиОбщее = мТекущаяСтрока.ВремяПодачи;
		мНоваяСтрокаСмены.ВремяВозвратаОбщее = мТекущаяСтрока.ВремяВозврата;
		мСтрокиНовойСтрокиСмены = мНоваяСтрокаСмены.ПолучитьЭлементы();
		
		// 3. заполняем по старой строке
		мНоваяСтрокаЗадания = мСтрокиНовойСтрокиСмены.Добавить();
		ЗаполнитьЗначенияСвойств(мНоваяСтрокаЗадания, мТекущаяСтрока);
		мНоваяСтрокаЗадания.Смена = мНоваяСтрокаСмены.Смена;
		мНоваяСтрокаЗадания.сУровеньДерева = 2;
		мНоваяСтрокаЗадания.ПутевойЛист = Неопределено;
		мИдентификаторНовойСтроки = мНоваяСтрокаЗадания.ПолучитьИдентификатор();
		
		мМассивСотрудников = фСоответствиеТСВодителям.Получить("" + СокрЛП(мСтрокаТС.ГарНомерТС) + ("" + СокрЛП(мНоваяСтрокаСмены.Смена)));
		Если мМассивСотрудников <> Неопределено И мМассивСотрудников.Количество() > 0 Тогда
			мНоваяСтрокаСмены.Водитель = мМассивСотрудников[0];
		КонецЕсли;
		
		// 4. удаляем старую строку
		мСтрокиЗаданийСтаройСмены = мСтрокаСмены.ПолучитьЭлементы();
		мСтрокиЗаданийСтаройСмены.Удалить(мТекущаяСтрока);
		мСтараяСменаУдалена = Ложь;
		Если мСтрокаСмены.ПолучитьЭлементы().Количество() = 0 И Не ЗначениеЗаполнено(мСтрокаСмены.ПутевойЛист) Тогда
			мСтрокиСмен.Удалить(мСтрокаСмены);
			мСтараяСменаУдалена = Истина;
		Иначе
			// старая строка осталась, обновляем ПЛ и записываем строку
			Элементы.фДеревоРазнарядки.ТекущаяСтрока = мСтрокаСмены.ПолучитьИдентификатор();
			Элементы.фДеревоРазнарядки.ТекущийЭлемент = Элементы.фДеревоРазнарядкиСмена;
			ОбработкаЗаписиСтрокиСмены();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(мНоваяСтрокаЗадания.ИдентификаторСтрокиЗаявки) И (Не мСтараяСменаУдалена) И ЗначениеЗаполнено(мСтрокаСмены.ПутевойЛист) Тогда
			//если была привязка - нужно отвязать от ПЛ
			мСтруктураСтроки = Новый Структура("ТС, ИдентификаторСтрокиЗаявки, Смена, ВремяПодачи, ВремяВозврата, Водитель, МестоОказанияУслуг, ЦехМаршрут, Колонна, ТипТС, ВтораяСмена, Контрагент, Водитель2, ПутевойЛист, ДатаВозврата, Прицеп, ПутевойЛист");
			ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мНоваяСтрокаЗадания);
			ЗафиксироватьФактВыписки(НачалоДня(фДата), ПредопределенноеЗначение("Документ.уатПутевойЛист.ПустаяСсылка"), мСтруктураСтроки);
		КонецЕсли;
		
		//// похоже ошибочное решение, ПЛ не формируем сразу автоматом; ждем отзывов от пользователей
		//// новая строка, формируем ПЛ
		//мМассивСтрок = Новый Массив;
		//мСтруктураОбщихДанныхПЛ = Новый Структура("ТС, ГарНомерТС, ВремяПодачиОбщее, ВремяВозвратаОбщее, Водитель, Водитель2, КонтрагентПЛ, Контрагент, ДатаВозврата, Прицеп, ПутевойЛист");
		//ЗаполнитьЗначенияСвойств(мСтруктураОбщихДанныхПЛ, мНоваяСтрокаСмены);
		//мСтруктураОбщихДанныхПЛ.Вставить("ДатаФормирования", фДата);
		//мСтруктураОбщихДанныхПЛ.Вставить("ИдентификаторСтрокиДерева", мНоваяСтрокаСмены.ПолучитьИдентификатор());
		//
		//мМассивЗаданий = Новый Массив;
		//мСтруктураСтроки = Новый Структура("ТС, ИдентификаторСтрокиЗаявки, Смена, ВремяПодачи, ВремяВозврата, Водитель, МестоОказанияУслуг, ЦехМаршрут, Колонна, ТипТС, ВтораяСмена, Контрагент, Водитель2, ПутевойЛист, ДатаВозврата, Прицеп, ПутевойЛист");
		//ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мНоваяСтрокаЗадания);
		//мСтруктураСтроки.Вставить("ТСПринудительноСтерто", Ложь);
		//мМассивЗаданий.Добавить(мСтруктураСтроки);
		//
		//мМассивСтрок.Добавить(Новый Структура("ОбщиеДанныеСтроки, МассивЗаданий", мСтруктураОбщихДанныхПЛ, мМассивЗаданий));
		//мРезультат = СоздатьНапечататьПутевыеЛистыНаСервере(мМассивСтрок, Ложь);
		//
		//Для Каждого мСтрокаСоответствия Из мРезультат.СоответствиеСтрокДереваПутевымЛистам Цикл
		//	мСтрокаДерева = фДеревоРазнарядки.НайтиПоИдентификатору(мСтрокаСоответствия.Ключ);
		//	Если мСтрокаДерева <> Неопределено Тогда
		//		мСтрокаДерева.ПутевойЛист = мСтрокаСоответствия.Значение;
		//	КонецЕсли;
		//КонецЦикла;
		
		// запись новой строки
		Элементы.фДеревоРазнарядки.ТекущаяСтрока = мНоваяСтрокаСмены.ПолучитьИдентификатор();
		Элементы.фДеревоРазнарядки.ТекущийЭлемент = Элементы.фДеревоРазнарядкиСмена;
		ОбработкаЗаписиСтрокиСмены();
		Элементы.фДеревоРазнарядки.Развернуть(мНоваяСтрокаСмены.ПолучитьИдентификатор());
		Элементы.фДеревоРазнарядки.ТекущаяСтрока = мСтрокаТС.ПолучитьИдентификатор();
		Элементы.фДеревоРазнарядки.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фТаблицаМаршрутовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормы()
	Элементы.фДеревоРазнарядкиКолонна.Видимость = фОтображениеКолонна;
	Элементы.фДеревоРазнарядкиПозицияПП.Видимость = фОтображениеПозицияПП;
	Если ЗначениеЗаполнено(фКолонна) И ЗначениеЗаполнено(фДата) Тогда
		мДатаНачалаВыпискиСтрогоПоРазнарядке = ПолучитьРеквизит(фКолонна, "ВыпискаПлТолькоПоРазнарядке");
		Элементы.ЗаполнитьПоПредыдущимДанным.Видимость = мДатаНачалаВыпискиСтрогоПоРазнарядке = Дата("00010101") Или НачалоДня(мДатаНачалаВыпискиСтрогоПоРазнарядке) > НачалоДня(фДата);
	Иначе
		Элементы.ЗаполнитьПоПредыдущимДанным.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	мНастройки = ПолучитьСтруктуруНастроек();
	мОписаниеОповещенияЗакрытиеФормыНастроек = Новый ОписаниеОповещения("ПрочитатьНастройки", ЭтаФорма);
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаНастроекФормыРазнарядки", мНастройки, , , , , мОписаниеОповещенияЗакрытиеФормыНастроек, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройки(пСтруктураНастроек, пДополнительныеПараметры) Экспорт
	Если пСтруктураНастроек <> Неопределено Тогда
		Для Каждого мПараКлючЗначение Из пСтруктураНастроек Цикл
			ЭтаФорма[мПараКлючЗначение.Ключ] = мПараКлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	ОбновитьЭлементыФормы();	//применить изменившиеся настройки видимости элементов формы
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруНастроек()
	вСтруктура = Новый Структура("фПечатьСразуНаПринтер, фОтображениеКолонна, фОтображениеПозицияПП, фНастройкаУпорядочивания, фОтображениеДат, фОтображениеПрицеп, фОтображатьДанныеЗагрузки, фКопироватьВремяСПредыдущегоПЛ, фОтображатьВодитель2ВРежимеМаршрутов, фДатаВозвратаВРежимеМаршрутов, фНеКопироватьПоПризнакуВыходнойПраздник, фОтображатьТипТСПЛ", фПечатьСразуНаПринтер, Элементы.фДеревоРазнарядкиКолонна.Видимость, Элементы.фДеревоРазнарядкиПозицияПП.Видимость, фНастройкаУпорядочивания, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, Неопределено, фНеКопироватьПоПризнакуВыходнойПраздник, Неопределено);
	Возврат вСтруктура;
КонецФункции

&НаКлиенте
Процедура фДеревоРазнарядкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "фДеревоРазнарядкиПолеКнопка" Тогда
		фСтрокаПоиска = "";
		СтандартнаяОбработка = Ложь;
		мСтрокаТС = фДеревоРазнарядки.НайтиПоИдентификатору(Элементы.фДеревоРазнарядки.ТекущаяСтрока);
		мНоваяСтрокаСмены = мСтрокаТС.ПолучитьЭлементы().Добавить();
		мНоваяСтрокаСмены.сУровеньДерева = 1;
		мНеПерваяСтрока = мСтрокаТС.ПолучитьЭлементы().Количество() > 1;
		мСтруктураДанныхКрайнийПЛТС = ПолучитьДанныеПредыдущегоПЛ(фДата, мСтрокаТС.ТС, мНеПерваяСтрока);
		мИдентификаторСтрокиЗаявкиИзПредыдущегоПЛ = "";
		мСтруктураДанныхКрайнийПЛТС.Свойство("ИдентификаторРазнарядки", мНоваяСтрокаСмены.ИдентификаторСтрокиЗаявки);
		
		мНоваяСтрокаСмены.Водитель = ?(мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден, мСтруктураДанныхКрайнийПЛТС.Водитель, ПредопределенноеЗначение("Справочник.уатСотрудники.ПустаяСсылка"));
		мНоваяСтрокаСмены.ВремяПодачиОбщее = ?(мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден, Дата("00010101") + (мСтруктураДанныхКрайнийПЛТС.ДатаВыезда - НачалоДня(мСтруктураДанныхКрайнийПЛТС.ДатаВыезда)), ?(мНеПерваяСтрока, Дата("00010101190000"), Дата("00010101070000")));
		мНоваяСтрокаСмены.ВремяВозвратаОбщее = ?(мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден, Дата("00010101") + (мСтруктураДанныхКрайнийПЛТС.ДатаВозвращения - НачалоДня(мСтруктураДанныхКрайнийПЛТС.ДатаВозвращения)), ?(мНеПерваяСтрока,  Дата("00010101070000"),Дата("00010101190000")));
		мНоваяСтрокаСмены.ДатаВозврата = ?(мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден, ?(НачалоДня(мСтруктураДанныхКрайнийПЛТС.ДатаВозвращения) = НачалоДня(мСтруктураДанныхКрайнийПЛТС.ДатаВыезда), фДата, фДата + (24 * 3600)), фДата);
		мНоваяСтрокаСмены.Смена = мСтрокаТС.ПолучитьЭлементы().Количество();
		мНоваяСтрокаСмены.Выбрано = Истина;
		мНоваяСтрокаСмены.ТС = мСтрокаТС.ТС;
		мНоваяСтрокаСмены.Колонна = мСтрокаТС.Колонна;
		мНоваяСтрокаСмены.КонтрагентПЛ = ?(мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден, мСтруктураДанныхКрайнийПЛТС.Контрагент, фКонтрагентОрганизации);
		фСписокВыбранныхСтрок.Добавить(мНоваяСтрокаСмены.ПолучитьИдентификатор());
		
		мСтрокиСмены = мНоваяСтрокаСмены.ПолучитьЭлементы();
		мНоваяСтрокаЗадание = мСтрокиСмены.Добавить();
		мНоваяСтрокаЗадание.сУровеньДерева = 2;
		мНоваяСтрокаЗадание.ИдентификаторСтрокиЗаявки = мНоваяСтрокаСмены.ИдентификаторСтрокиЗаявки;
		Если мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден И ЗначениеЗаполнено(мСтруктураДанныхКрайнийПЛТС.Задание) И ТипЗнч(мСтруктураДанныхКрайнийПЛТС.Задание) = Тип("СправочникСсылка.ЦехаКонтрагента") Тогда
			мНоваяСтрокаЗадание.ЦехМаршрут = мСтруктураДанныхКрайнийПЛТС.Задание;
		Иначе
			мНоваяСтрокаЗадание.МестоОказанияУслуг = ?(мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден И ЗначениеЗаполнено(мСтруктураДанныхКрайнийПЛТС.Задание), мСтруктураДанныхКрайнийПЛТС.Задание, "-=Без задания=-");
		КонецЕсли;
		мНоваяСтрокаЗадание.Контрагент = ?(мСтруктураДанныхКрайнийПЛТС.мПредыдущийПЛНайден, мСтруктураДанныхКрайнийПЛТС.Контрагент, фКонтрагентОрганизации);
		мНоваяСтрокаЗадание.ВремяПодачи = мНоваяСтрокаСмены.ВремяПодачиОбщее;
		мНоваяСтрокаЗадание.ВремяВозврата = мНоваяСтрокаСмены.ВремяВозвратаОбщее;
		мНоваяСтрокаЗадание.Колонна = мСтрокаТС.Колонна;
		
		Если Не Элементы.фДеревоРазнарядки.Развернут(мСтрокаТС.ПолучитьИдентификатор()) Тогда
			Элементы.фДеревоРазнарядки.Развернуть(мСтрокаТС.ПолучитьИдентификатор());
		КонецЕсли;
		Если Не Элементы.фДеревоРазнарядки.Развернут(мНоваяСтрокаСмены.ПолучитьИдентификатор()) Тогда
			Элементы.фДеревоРазнарядки.Развернуть(мНоваяСтрокаСмены.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПредыдущегоПЛ(пДата, пТС, пВтораяСмена)
	Возврат Документы.уатПутевойЛист.ПолучитьДанныеПредыдущегоПЛ(пДата, пТС, пВтораяСмена);
КонецФункции

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	УстановитьВыбор(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	УстановитьВыбор(Истина, Истина);	//первый параметр не является значимым, если второй указан в Истина
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбор(Команда)
	УстановитьВыбор(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбор(пЗначение, пИнверсия = Ложь)
	Для Каждого мСтрокаТС Из фДеревоРазнарядки.ПолучитьЭлементы() Цикл
		Для Каждого мСмена Из мСтрокаТС.ПолучитьЭлементы() Цикл
			мИдентификаторСтроки = мСмена.ПолучитьИдентификатор();
			Если СоответствуетУсловномуОформлению(мСмена) Тогда
				мСмена.Выбрано = ?(пИнверсия, Не мСмена.Выбрано, пЗначение);
			ИначеЕсли мСмена.Выбрано Тогда
				мСмена.Выбрано = Ложь;	// безусловно не выбрано то, чего не видно			
			КонецЕсли;
			мЭлементСписка = фСписокВыбранныхСтрок.НайтиПоЗначению(мИдентификаторСтроки);
			Если мСмена.Выбрано Тогда
				Если мЭлементСписка = Неопределено Тогда
					фСписокВыбранныхСтрок.Добавить(мИдентификаторСтроки);
				КонецЕсли;
			Иначе
				Если мЭлементСписка <> Неопределено Тогда
					фСписокВыбранныхСтрок.Удалить(фСписокВыбранныхСтрок.Индекс(мЭлементСписка));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СоответствуетУсловномуОформлению(пСтрока)
	// пока так о_О. Кажется есть способ поменять на программное исполнение СКД из условного оформления
	Возврат (фСтрокаПоиска = "") Или ((фСтрокаПоиска <> "" И ((СокрЛП(пСтрока.ГарНомерТС) = СокрЛП(фСтрокаПоиска)) ИЛИ Найти(пСтрока.ГосНомерТС, фСтрокаПоиска) <> 0)));
	//Возврат (фСтрокаПоиска = "" И фКолонна = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка")) Или ((фСтрокаПоиска <> "" И ((СокрЛП(пСтрока.ГарНомерТС) = СокрЛП(фСтрокаПоиска)) ИЛИ Найти(пСтрока.ГосНомерТС, фСтрокаПоиска) <> 0)) Или ((фКолонна <> ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка")) И (пСтрока.Колонна = фКолонна)));
	//Найти(пСтрока.ТабНомерВодителя, фСтрокаПоиска) = 1 ИЛИ
	//Найти(НРЕГ(пСтрока.МестоОказанияУслуг), фСтрокаПоиска) <> 0 ИЛИ
	//Найти(НРЕГ(пСтрока.Ответственный), фСтрокаПоиска) <> 0 ИЛИ
	//Найти(НРЕГ(пСтрока.ВодительСтрокой), фСтрокаПоиска) <> 0 ИЛИ
	//Найти(НРЕГ(пСтрока.КонтрагентСтрокой), фСтрокаПоиска) <> 0 ИЛИ
	//Найти(НРЕГ(пСтрока.ЦехМаршрутСтрокой), фСтрокаПоиска) <> 0)
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьПутевойЛист(пСсылкаДокументаПЛ, пДата, пОбщиеДанные, пМассивЗаданий);
	Если пСсылкаДокументаПЛ = Неопределено Или пСсылкаДокументаПЛ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	мОбъектПЛ = пСсылкаДокументаПЛ.ПолучитьОбъект();
	
	мОбъектПЛ.ТранспортноеСредство = пОбщиеДанные.ТС;
	
	Если мОбъектПЛ.ДатаВыезда = Дата("00010101") Тогда
		мОбъектПЛ.ДатаВыезда = НачалоДня(пДата) + (пОбщиеДанные.ВремяПодачиОбщее - НачалоДня(пОбщиеДанные.ВремяПодачиОбщее));
	Иначе
		мОбъектПЛ.ДатаВыезда = НачалоДня(мОбъектПЛ.ДатаВыезда) + (пОбщиеДанные.ВремяПодачиОбщее - НачалоДня(пОбщиеДанные.ВремяПодачиОбщее));
	КонецЕсли;
	мОбъектПЛ.ДатаВозвращения = ?(ЗначениеЗаполнено(пОбщиеДанные.ДатаВозврата), НачалоДня(пОбщиеДанные.ДатаВозврата), НачалоДня(мОбъектПЛ.ДатаВыезда)) + (пОбщиеДанные.ВремяВозвратаОбщее - НачалоДня(пОбщиеДанные.ВремяВозвратаОбщее)) + ?(ЗначениеЗаполнено(пОбщиеДанные.ДатаВозврата) И (НачалоДня(пОбщиеДанные.ДатаВозврата) > НачалоДня(мОбъектПЛ.ДатаВыезда)), 0, ?(Час(пОбщиеДанные.ВремяВозвратаОбщее) < Час(пОбщиеДанные.ВремяПодачиОбщее), (24 * 3600), 0));
	мОбъектПЛ.Дата = мОбъектПЛ.ДатаВыезда;
	
	мОбъектПЛ.Водитель1 = пОбщиеДанные.Водитель;
	мОбъектПЛ.Водитель2 = пОбщиеДанные.Водитель2;
	мОбъектПЛ.Контрагент = ?(ЗначениеЗаполнено(пОбщиеДанные.КонтрагентПЛ), пОбщиеДанные.КонтрагентПЛ, пОбщиеДанные.Контрагент);
	
	мОбъектПЛ.Прицепы.Очистить();
	Если ЗначениеЗаполнено(пОбщиеДанные.Прицеп) Тогда
		мНоваяСтрокаПрицепы = мОбъектПЛ.Прицепы.Добавить();
		мНоваяСтрокаПрицепы.ТС = пОбщиеДанные.Прицеп;
		мНоваяСтрокаПрицепы.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(пОбщиеДанные.Прицеп, мОбъектПЛ.ДатаВыезда);
	КонецЕсли;
	
	мМассивТекущихМаршрутов = мОбъектПЛ.Маршруты.ВыгрузитьКолонку("Маршрут");
	//разбираемся с маршрутами/заданиями
	Если пМассивЗаданий <> Неопределено И пМассивЗаданий.Количество() > 0 Тогда
		Для Каждого мЭлементМассива Из пМассивЗаданий Цикл
			Если ЗначениеЗаполнено(мЭлементМассива.ЦехМаршрут) И ТипЗнч(мЭлементМассива.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты") Тогда
				Если мМассивТекущихМаршрутов.Найти(мЭлементМассива.ЦехМаршрут) = Неопределено Тогда
					//новый маршрут
					мНоваяСтрокаМаршрутов = мОбъектПЛ.Маршруты.Добавить();
					мНоваяСтрокаМаршрутов.Маршрут = мЭлементМассива.ЦехМаршрут;
				Иначе
					//был и остается, удалем только из массива
					мМассивТекущихМаршрутов.Удалить(мМассивТекущихМаршрутов.Найти(мЭлементМассива.ЦехМаршрут));
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(мЭлементМассива.ЦехМаршрут) И ТипЗнч(мЭлементМассива.ЦехМаршрут) = Тип("СправочникСсылка.ЦехаКонтрагента") Тогда
				мОбъектПЛ.ЦехКонтрагента = мЭлементМассива.ЦехМаршрут;
				мОбъектПЛ.Контрагент = мОбъектПЛ.ЦехКонтрагента.Владелец;
			ИначеЕсли ЗначениеЗаполнено(мЭлементМассива.МестоОказанияУслуг) Тогда
				мЦех = Справочники.ЦехаКонтрагента.НайтиПоНаименованию(мЭлементМассива.МестоОказанияУслуг);
				Если Не мЦех.Пустая() Тогда
					мОбъектПЛ.ЦехКонтрагента = мЦех;
					мОбъектПЛ.Контрагент = мОбъектПЛ.ЦехКонтрагента.Владелец;
				Иначе
					мОбъектПЛ.Комментарий = мОбъектПЛ.Комментарий + ?(Найти(мОбъектПЛ.Комментарий, мЭлементМассива.МестоОказанияУслуг) > 0, "", ", " + мЭлементМассива.МестоОказанияУслуг);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если мМассивТекущихМаршрутов.Количество() > 0 Тогда	//старые маршруты, удаляем
		Для Каждого мСтарыйМаршрут Из мМассивТекущихМаршрутов Цикл
			мСтрокаСтарогоМаршрута = мОбъектПЛ.Маршруты.Найти(мСтарыйМаршрут, "Маршрут");
			мОбъектПЛ.Маршруты.Удалить(мСтрокаСтарогоМаршрута);
		КонецЦикла;
	КонецЕсли;
	мОбъектПЛ.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПутевыеЛисты(Команда)
	СоздатьНапечататьПутевыеЛисты(Ложь);
КонецПроцедуры

&НаКлиенте
Функция СоздатьНапечататьПутевыеЛисты(пПечать = Ложь)
	мМассивСтрок = Новый Массив;
	Для Каждого мИдентификаторСтрокиСмены Из фСписокВыбранныхСтрок Цикл
		мСтрокаСменыДерева = фДеревоРазнарядки.НайтиПоИдентификатору(мИдентификаторСтрокиСмены.Значение);
		Если мСтрокаСменыДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мСтрокаТС = мСтрокаСменыДерева.ПолучитьРодителя();
		мСтруктураОбщихДанныхПЛ = Новый Структура("ТС, ГарНомерТС, ВремяПодачиОбщее, ВремяВозвратаОбщее, Водитель, Водитель2, КонтрагентПЛ, Контрагент, ДатаВозврата, ПутевойЛист");
		ЗаполнитьЗначенияСвойств(мСтруктураОбщихДанныхПЛ, мСтрокаСменыДерева);
		мСтруктураОбщихДанныхПЛ.Вставить("Прицеп", мСтрокаТС.Прицеп);
		мСтруктураОбщихДанныхПЛ.Вставить("ДатаФормирования", фДата);
		мСтруктураОбщихДанныхПЛ.Вставить("ИдентификаторСтрокиДерева", мИдентификаторСтрокиСмены.Значение);
		
		мМассивЗаданий = Новый Массив;
		мСтрокиЗаданий = мСтрокаСменыДерева.ПолучитьЭлементы();
		Для Каждого мСтрокаЗадания Из мСтрокиЗаданий Цикл
			мСтруктураСтроки = Новый Структура("ТС, ИдентификаторСтрокиЗаявки, Смена, ВремяПодачи, ВремяВозврата, Водитель, МестоОказанияУслуг, ЦехМаршрут, Колонна, ТипТС, ВтораяСмена, Контрагент, Водитель2, ПутевойЛист, ДатаВозврата, Прицеп, ПутевойЛист");
			ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мСтрокаЗадания);
			мСтруктураСтроки.Вставить("ТСПринудительноСтерто", Ложь);
			мМассивЗаданий.Добавить(мСтруктураСтроки);
		КонецЦикла;
		мМассивСтрок.Добавить(Новый Структура("ОбщиеДанныеСтроки, МассивЗаданий", мСтруктураОбщихДанныхПЛ, мМассивЗаданий));
	КонецЦикла;
	//мСтруктураМассиваСтрок = Новый Структура("МассивСтрок", мМассивСтрок);
	мРезультат = СоздатьНапечататьПутевыеЛистыНаСервере(мМассивСтрок, пПечать, фНастройкаУпорядочивания);
	
	//обработка вставки ссылок путевых листов в строки дерева, для минимизации обновлений:
	Для Каждого мСтрокаСоответствия Из мРезультат.СоответствиеСтрокДереваПутевымЛистам Цикл
		мСтрокаДерева = фДеревоРазнарядки.НайтиПоИдентификатору(мСтрокаСоответствия.Ключ);
		Если мСтрокаДерева <> Неопределено Тогда
			мСтрокаДерева.ПутевойЛист = мСтрокаСоответствия.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если пПечать Тогда
		Для Каждого мПечатнаяФорма Из мРезультат.МассивПечатныхФорм Цикл
			мПечатнаяФорма.АвтоМасштаб = Истина;
			Если фПечатьСразуНаПринтер Тогда
				мПечатнаяФорма.Напечатать();
			Иначе
				мПечатнаяФорма.Показать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНапечататьПутевыеЛистыНаСервере(пСтруктураМассиваСтрок, пПечать = Ложь, пНастройкаУпорядочивания)
	//возвращаем структуру:
	//	СоответствиеСтрокДереваПутевымЛистам - фиксированное соответствие, из него заполняем ПЛ в строках смен
	//	МассивПечатныхФорм - непустой, если пПечать передано Истина
	вСтруктура = Новый Структура;
	мСоответствиеСтрокДереваПутевымЛистам = Новый Соответствие;
	мСоответствиеОбъектовПутевыхЛистов = Новый Соответствие;
	мТаблицаПутевыхЛистов = Новый ТаблицаЗначений;
	мТаблицаПутевыхЛистов.Колонки.Добавить("ГаражныйНомер");
	мТаблицаПутевыхЛистов.Колонки.Добавить("ПутевойЛистОбъект");
	
	Для Каждого пЭлементСтрока Из пСтруктураМассиваСтрок Цикл
		
		мСтруктураОбщихДанныхПЛ = пЭлементСтрока.ОбщиеДанныеСтроки;
		мМассивЗаданий = пЭлементСтрока.МассивЗаданий;
		мОбъектПутевогоЛиста = СоздатьПутевойЛист(мСтруктураОбщихДанныхПЛ, мМассивЗаданий);
		Если мОбъектПутевогоЛиста <> Неопределено И Не мОбъектПутевогоЛиста.Ссылка.Пустая() Тогда
			Для Каждого мЭлемент Из мМассивЗаданий Цикл
				Если ЗначениеЗаполнено(мЭлемент.ИдентификаторСтрокиЗаявки) Тогда
					мСтруктураСтрокиДляЗаписи = ПодготовитьСтрокуРазнарядкиКЗаписи(мЭлемент);
					ЗаписатьСтрокуРазнарядки(НачалоДня(мСтруктураОбщихДанныхПЛ.ДатаФормирования), мСтруктураСтрокиДляЗаписи);
					ЗафиксироватьФактВыписки(НачалоДня(мСтруктураОбщихДанныхПЛ.ДатаФормирования), мОбъектПутевогоЛиста.Ссылка, мЭлемент);
				КонецЕсли;
			КонецЦикла;
			мСоответствиеОбъектовПутевыхЛистов.Вставить(мОбъектПутевогоЛиста.Ссылка, мОбъектПутевогоЛиста);
			мСоответствиеСтрокДереваПутевымЛистам.Вставить(мСтруктураОбщихДанныхПЛ.ИдентификаторСтрокиДерева , мОбъектПутевогоЛиста.Ссылка);
			Если мТаблицаПутевыхЛистов.Найти(мОбъектПутевогоЛиста, "ПутевойЛистОбъект") = Неопределено Тогда
				мНоваяСтрока = мТаблицаПутевыхЛистов.Добавить();
				мНоваяСтрока.ГаражныйНомер = мСтруктураОбщихДанныхПЛ.ГарНомерТС;
				мНоваяСтрока.ПутевойЛистОбъект = мОбъектПутевогоЛиста;
			КонецЕсли;
		Иначе
			//привязка к пустому ПЛ
			Для Каждого мЭлемент Из мМассивЗаданий Цикл
				Если ЗначениеЗаполнено(мЭлемент.ИдентификаторСтрокиЗаявки) Тогда
					мСтруктураСтрокиДляЗаписи = ПодготовитьСтрокуРазнарядкиКЗаписи(мЭлемент);
					ЗаписатьСтрокуРазнарядки(НачалоДня(мСтруктураОбщихДанныхПЛ.ДатаФормирования), мСтруктураСтрокиДляЗаписи);
					ЗафиксироватьФактВыписки(НачалоДня(пСтруктураМассиваСтрок.ДатаФормирования), ПредопределенноеЗначение("Документ.уатПутевойЛист.ПустаяСсылка"), Новый структура("ИдентификаторСтрокиЗаявки", мЭлемент.ИдентификаторСтрокиЗаявки));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	вМассивТД = Новый Массив;
	Если НЕ пПечать Тогда
		вТабличныйДокумент = Неопределено;	// Документы.уатПутевойЛист.Печать(мМассивПутевыхЛистов);
	Иначе
		Если пНастройкаУпорядочивания = 2 Или пНастройкаУпорядочивания = 3 Тогда
			мТаблицаПутевыхЛистов.Сортировать("ГаражныйНомер ВОЗР");
		КонецЕсли;
		вТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для Каждого мСтрока Из мТаблицаПутевыхЛистов Цикл
			//TODO: Переписать на функцию печати по массиву
			мТабличныйДокумент = Новый ТабличныйДокумент;
			мОбъектПутевогоЛиста = мСтрока.ПутевойЛистОбъект;
			мОбъектПутевогоЛиста.Печать("ПечататьВесьПутевойЛист", , Истина, , , мТабличныйДокумент);
			Если ТипЗнч(мТабличныйДокумент) = Тип("Массив") Тогда
				Для Каждого мЭлементМассиваТД Из мТабличныйДокумент Цикл
					вМассивТД.Добавить(мЭлементМассиваТД);
				КонецЦикла;
			Иначе
				вМассивТД.Добавить(мТабличныйДокумент);
			КонецЕсли;
			РегистрыСведений.ПечатьПЛ.ЗафиксироватьФактПечати(мСтрока.ПутевойЛистОбъект.Ссылка, ТекущаяДата());
		КонецЦикла;
	КонецЕсли;
	вСтруктура.Вставить("МассивПечатныхФорм", вМассивТД);
	
	мФиксированноеСоответствиеСтрокДереваПутевымЛистам = Новый ФиксированноеСоответствие(мСоответствиеСтрокДереваПутевымЛистам);
	вСтруктура.Вставить("СоответствиеСтрокДереваПутевымЛистам", мФиксированноеСоответствиеСтрокДереваПутевымЛистам);
	Возврат вСтруктура;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПутевойЛист(пСтруктураОбщихРеквизитов, пМассивЗаданий)
	Если ЗначениеЗаполнено(пСтруктураОбщихРеквизитов.ПутевойЛист) Тогда
		мОбъектДокументаПЛ = пСтруктураОбщихРеквизитов.ПутевойЛист.ПолучитьОбъект();
	Иначе
		мОбъектДокументаПЛ = Документы.уатПутевойЛист.СоздатьДокумент();
	КонецЕсли;
	
	мОбъектДокументаПЛ.ТранспортноеСредство = пСтруктураОбщихРеквизитов.ТС;
	мОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
	мОбъектДокументаПЛ.Дата = НачалоДня(пСтруктураОбщихРеквизитов.ДатаФормирования) + (пСтруктураОбщихРеквизитов.ВремяПодачиОбщее - НачалоДня(пСтруктураОбщихРеквизитов.ВремяПодачиОбщее));
	мОбъектДокументаПЛ.ДатаВыписки = пСтруктураОбщихРеквизитов.ДатаФормирования;
	Если Не ЗначениеЗаполнено(мОбъектДокументаПЛ.ДатаВыезда) Тогда
		мОбъектДокументаПЛ.ДатаВыезда = уатОбщегоНазначения.уатДатаБезСекунд(мОбъектДокументаПЛ.Дата);
	КонецЕсли;
	мОбъектДокументаПЛ.Организация = мОрганизация;
	
	мОбъектДокументаПЛ.Контрагент = ?(ЗначениеЗаполнено(пСтруктураОбщихРеквизитов.КонтрагентПЛ), пСтруктураОбщихРеквизитов.КонтрагентПЛ, пСтруктураОбщихРеквизитов.Контрагент);
	
	мОбъектДокументаПЛ.ОсмотрелВрач = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВрач); //?(НЕ ЗначениеЗаполнено(ОсмотрелВрач), уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВрач), ОсмотрелВрач);
	мОбъектДокументаПЛ.ВыдалДиспетчер = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойДиспетчер);
	мОбъектДокументаПЛ.ВыпустилМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик);
	мОбъектДокументаПЛ.ПринялМеханик = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(мОрганизация, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойМеханик);
	
	уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(мОбъектДокументаПЛ, глЗначениеПеременной("глТекущийПользователь"));
	
	мОбъектДокументаПЛ.Водитель1  = пСтруктураОбщихРеквизитов.Водитель;
	мОбъектДокументаПЛ.Водитель2  = пСтруктураОбщихРеквизитов.Водитель2;
	
	мОбъектДокументаПЛ.Температура = РегистрыСведений.Температуры.ПолучитьТемпературу(пСтруктураОбщихРеквизитов.ДатаФормирования, мОрганизация);
	
	мОбъектДокументаПЛ.ДатаВыезда = НачалоДня(мОбъектДокументаПЛ.Дата) + (пСтруктураОбщихРеквизитов.ВремяПодачиОбщее - НачалоДня(пСтруктураОбщихРеквизитов.ВремяПодачиОбщее));
	мОбъектДокументаПЛ.ДатаВозвращения = ?(ЗначениеЗаполнено(пСтруктураОбщихРеквизитов.ДатаВозврата), НачалоДня(пСтруктураОбщихРеквизитов.ДатаВозврата), НачалоДня(пСтруктураОбщихРеквизитов.ДатаФормирования)) + (пСтруктураОбщихРеквизитов.ВремяВозвратаОбщее - НачалоДня(пСтруктураОбщихРеквизитов.ВремяВозвратаОбщее)) + ?(ЗначениеЗаполнено(пСтруктураОбщихРеквизитов.ДатаВозврата) И (НачалоДня(пСтруктураОбщихРеквизитов.ДатаВозврата) > НачалоДня(пСтруктураОбщихРеквизитов.ДатаФормирования)), 0, ?(Час(пСтруктураОбщихРеквизитов.ВремяВозвратаОбщее) < Час(пСтруктураОбщихРеквизитов.ВремяПодачиОбщее), (24 * 3600), 0));
	
	// + заполнение маршрутов
	мМассивТекущихМаршрутов = мОбъектДокументаПЛ.Маршруты.Выгрузить( , "Маршрут");
	
	//разбираемся с маршрутами/заданиями
	Если пМассивЗаданий <> Неопределено И пМассивЗаданий.Количество() > 0 Тогда
		мОбъектДокументаПЛ.ИдентификаторРазнарядки = пМассивЗаданий[0].ИдентификаторСтрокиЗаявки;
		Для Каждого мЭлементМассива Из пМассивЗаданий Цикл
			Если ЗначениеЗаполнено(мЭлементМассива.ЦехМаршрут) И ТипЗнч(мЭлементМассива.ЦехМаршрут) = Тип("СправочникСсылка.уатМаршруты") Тогда
				мСтрокаМаршрута = мМассивТекущихМаршрутов.Найти(мЭлементМассива.ЦехМаршрут);
				Если мСтрокаМаршрута = Неопределено Тогда
					//новый маршрут
					мНоваяСтрокаМаршрутов = мОбъектДокументаПЛ.Маршруты.Добавить();
					мНоваяСтрокаМаршрутов.Маршрут = мЭлементМассива.ЦехМаршрут;
					мНоваяСтрокаМаршрутов.ИдентификаторРазнарядки = мЭлементМассива.ИдентификаторСтрокиЗаявки;
					мОбъектДокументаПЛ.Комментарий = "";
				Иначе
					//был и остается, удаляем только из массива
					мСтрокаТабличнойЧасти = мОбъектДокументаПЛ.Маршруты.Найти(мЭлементМассива.ЦехМаршрут);
					мСтрокаТабличнойЧасти.ИдентификаторРазнарядки = мЭлементМассива.ИдентификаторСтрокиЗаявки;
					мМассивТекущихМаршрутов.Удалить(мСтрокаМаршрута);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(мЭлементМассива.ЦехМаршрут) И ТипЗнч(мЭлементМассива.ЦехМаршрут) = Тип("СправочникСсылка.ЦехаКонтрагента") Тогда
				мОбъектДокументаПЛ.ЦехКонтрагента = мЭлементМассива.ЦехМаршрут;
				мОбъектДокументаПЛ.Контрагент = мОбъектДокументаПЛ.ЦехКонтрагента.Владелец;
				мОбъектДокументаПЛ.Комментарий = "";
			ИначеЕсли ЗначениеЗаполнено(мЭлементМассива.МестоОказанияУслуг) Тогда
				мЦех = Справочники.ЦехаКонтрагента.НайтиПоНаименованию(мЭлементМассива.МестоОказанияУслуг, , , мОбъектДокументаПЛ.Контрагент);
				Если Не мЦех.Пустая() Тогда
					мОбъектДокументаПЛ.ЦехКонтрагента = мЦех;
					мОбъектДокументаПЛ.Контрагент = мОбъектДокументаПЛ.ЦехКонтрагента.Владелец;
				Иначе
					мОбъектДокументаПЛ.Комментарий = мОбъектДокументаПЛ.Комментарий + ?(Найти(мОбъектДокументаПЛ.Комментарий, мЭлементМассива.МестоОказанияУслуг) > 0, "", ", " + мЭлементМассива.МестоОказанияУслуг);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если мМассивТекущихМаршрутов.Количество() > 0 Тогда	//старые маршруты, удаляем
		Для Каждого мСтарыйМаршрут Из мМассивТекущихМаршрутов Цикл
			мСтрокаСтарогоМаршрута = мОбъектДокументаПЛ.Маршруты.Найти(мСтарыйМаршрут, "Маршрут");
			Если мСтрокаСтарогоМаршрута <> Неопределено Тогда
				мОбъектДокументаПЛ.Маршруты.Удалить(мСтрокаСтарогоМаршрута);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// - заполнение маршрутов
	
	Если пСтруктураОбщихРеквизитов.Свойство("Прицеп") И ЗначениеЗаполнено(пСтруктураОбщихРеквизитов.Прицеп) Тогда
		Если мОбъектДокументаПЛ.Прицепы.Найти(пСтруктураОбщихРеквизитов.Прицеп, "ТС") = Неопределено Тогда
			НоваяСтрокаПрицеп = мОбъектДокументаПЛ.Прицепы.Добавить();
			НоваяСтрокаПрицеп.ТС = пСтруктураОбщихРеквизитов.Прицеп;
			НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(пСтруктураОбщихРеквизитов.Прицеп, мОбъектДокументаПЛ.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;
	
	// + Алексей: начало копия процедуры ИнициализацияДанныхАвтомобиля модуля объекта путевого листа
	//		пока доступна только на Клиенте (указана директива Препроцессора), а в режиме управляемого приложения
	//		обратиться к объекту с клиента невозможно... скопировано "нужное" из модуля объекта
	Если мОбъектДокументаПЛ.ЭтоНовый() Тогда
		Если мОбъектДокументаПЛ.ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
			мОбъектДокументаПЛ.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(мОбъектДокументаПЛ.ТранспортноеСредство, мОбъектДокументаПЛ.ДатаВыезда);
		Иначе
			мОбъектДокументаПЛ.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(мОбъектДокументаПЛ.ТранспортноеСредство, мОбъектДокументаПЛ.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(мОбъектДокументаПЛ.УсловиеРаботы) Тогда
		мОбъектДокументаПЛ.УсловиеРаботы = мОбъектДокументаПЛ.ТранспортноеСредство.ОсновноеУсловиеРаботы;
	КонецЕсли;
	
	мОбъектДокументаПЛ.ВыдатьГорючее = мОбъектДокументаПЛ.ТранспортноеСредство.Модель.ОсновноеТопливо;
	// - Алексей: конец копия процедуры ИнициализацияДанныхАвтомобиля модуля объекта путевого листа
	
	Если пСтруктураОбщихРеквизитов.Свойство("ПозицияПП") И ЗначениеЗаполнено(пСтруктураОбщихРеквизитов.ПозицияПП) И Метаданные.Справочники.Найти("ПозицияПроизводсвеннойПрограммы") <> Неопределено Тогда
		мОбъектДокументаПЛ.ПозицияПП = Справочники.ПозицияПроизводсвеннойПрограммы.НайтиПоНаименованию(пСтруктураОбщихРеквизитов.ПозицияПП); // в НВДС этого нет
	КонецЕсли;
	
	мОбъектДокументаПЛ.Дата = мОбъектДокументаПЛ.ДатаВыезда;
	мОбъектДокументаПЛ.ДатаВозвращения = Мин(мОбъектДокументаПЛ.ДатаВозвращения, мОбъектДокументаПЛ.ДатаВыезда + (31 * 24 * 3600));
	мОбъектДокументаПЛ.ДействителенДо = КонецДня(мОбъектДокументаПЛ.ДатаВозвращения);
	
	Попытка
		мОбъектДокументаПЛ.Записать();
		//Сообщить("Записан путевой лист " + мОбъектДокументаПЛ);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат мОбъектДокументаПЛ;
КонецФункции

&НаКлиенте
Процедура НапечататьПутевыеЛисты(Команда)
	//собираем строки смен, которые нужно (записать в ПЛ) и напечатать
	СоздатьНапечататьПутевыеЛисты(Истина);
	УстановитьВыбор(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиВыбраноПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мИдентификаторТекущейСтроки = мСтрокаТекущихДанных.ПолучитьИдентификатор();
		Если мСтрокаТекущихДанных.Выбрано Тогда
			фСписокВыбранныхСтрок.Добавить(мИдентификаторТекущейСтроки);
		Иначе
			мЭлементСписка = фСписокВыбранныхСтрок.НайтиПоЗначению(мИдентификаторТекущейСтроки);
			Если мЭлементСписка <> Неопределено Тогда
				фСписокВыбранныхСтрок.Удалить(фСписокВыбранныхСтрок.Индекс(мЭлементСписка));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиВодительПриИзменении(Элемент)
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиСтрокиСмены(пНеОбновлятьПЛ = Ложь)
	
	// пишем в регистр, если заполнено поле ИдентификаторСтрокиЗаявки
	мСтрокаСмены = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаСмены.сУровеньДерева = 2 Тогда
		мСтрокаСмены = мСтрокаСмены.ПолучитьРодителя();
	КонецЕсли;
	мЭлементыСтрокиСмены = мСтрокаСмены.ПолучитьЭлементы();
	
	мМассивЗаданий = Новый Массив;
	Для Каждого мСтрокаРазнарядки Из мЭлементыСтрокиСмены Цикл
		мСтруктураСтроки = ПодготовитьСтрокуРазнарядкиКЗаписи(мСтрокаРазнарядки);
		Если ЗначениеЗаполнено(мСтрокаРазнарядки.ИдентификаторСтрокиЗаявки) Тогда
			ЗаписатьСтрокуРазнарядки(НачалоДня(фДата), мСтруктураСтроки);
		КонецЕсли;
		Если ЗначениеЗаполнено(мСтрокаСмены.ПутевойЛист) Тогда
			мМассивЗаданий.Добавить(мСтруктураСтроки);
		КонецЕсли;
	КонецЦикла;
	
	//обновляем ПЛ если заполнено поле ПутевойЛист
	Если ЗначениеЗаполнено(мСтрокаСмены.ПутевойЛист) И Не пНеОбновлятьПЛ Тогда
		мСтруктураОбщихДанныхПЛ = Новый Структура("ТС, ВремяПодачиОбщее, ВремяВозвратаОбщее, Водитель, Водитель2, КонтрагентПЛ, Контрагент, ДатаВозврата, Прицеп");
		ЗаполнитьЗначенияСвойств(мСтруктураОбщихДанныхПЛ, мСтрокаСмены);
		ОбновитьПутевойЛист(мСтрокаСмены.ПутевойЛист, фДата, мСтруктураОбщихДанныхПЛ, мМассивЗаданий);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьСтрокуРазнарядкиКЗаписи(пСтрокаРазнарядки)
	мСтруктураСтроки = Новый Структура("ТС, ИдентификаторСтрокиЗаявки, Смена, ВремяПодачи, ВремяВозврата, Водитель, МестоОказанияУслуг, ЦехМаршрут, Колонна, ТипТС, ВтораяСмена, Контрагент, Водитель2, ПутевойЛист, ДатаВозврата, Прицеп, ПутевойЛист");
	ЗаполнитьЗначенияСвойств(мСтруктураСтроки, пСтрокаРазнарядки);
	мСтруктураСтроки.Вставить("ТСПринудительноСтерто", Ложь);
	Возврат мСтруктураСтроки;
КонецФункции

&НаКлиенте
Процедура фДеревоРазнарядкиВремяПодачиОбщееПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И Не ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) Тогда
		мСтрокаТекущихДанных.ДатаВозврата = ?(Час(мСтрокаТекущихДанных.ВремяПодачиОбщее) > Час(мСтрокаТекущихДанных.ВремяВозвратаОбщее), фДата + (24 * 3600), фДата);
	КонецЕсли;
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиВремяВозвратаОбщееПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И Не ЗначениеЗаполнено(мСтрокаТекущихДанных.ПутевойЛист) Тогда
		мСтрокаТекущихДанных.ДатаВозврата = ?(Час(мСтрокаТекущихДанных.ВремяПодачиОбщее) > Час(мСтрокаТекущихДанных.ВремяВозвратаОбщее), фДата + (24 * 3600), фДата);
	КонецЕсли;
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиДатаВозвратаПриИзменении(Элемент)
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиПозицияПППриИзменении(Элемент)
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиВодитель2ПриИзменении(Элемент)
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиКонтрагентПЛПриИзменении(Элемент)
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиПередНачаломИзменения(Элемент, Отказ)
	фСтрокаПоиска = "";
	Если Элемент.ТекущийЭлемент = Элементы.фДеревоРазнарядкиМестоОказанияУслуг Тогда
		мСтрокаТекущихДанных = Элемент.ТекущиеДанные;
		Отказ = мСтрокаТекущихДанных <> Неопределено И ЗначениеЗаполнено(мСтрокаТекущихДанных.ЦехМаршрут) И ЗначениеЗаполнено(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = НайтиВодителя(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиВодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элементы.фДеревоРазнарядки.ТекущиеДанные.Водитель = ВыбранноеЗначение;
	Элементы.фДеревоРазнарядки.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиВодителя(пТекст)
	
	вСписок = Новый СписокЗначений;
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатСотрудники.Ссылка,
	|	уатСотрудники.Наименование,
	|	уатСотрудники.Код
	|ИЗ
	|	Справочник.уатСотрудники КАК уатСотрудники
	| ГДЕ (уатСотрудники.Наименование ПОДОБНО ""%"" + &СтрПск + ""%""
	|	ИЛИ уатСотрудники.Код ПОДОБНО &СтрПск + ""%"")
	|	И уатСотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|	И уатСотрудники.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
	|УПОРЯДОЧИТЬ ПО уатСотрудники.Наименование ВОЗР, (уатСотрудники.Родитель <> ЗНАЧЕНИЕ(Справочник.уатСотрудники.Сторонние)) ВОЗР";
	
	Запрос.УстановитьПараметр("СтрПск", "" + пТекст);	
	мТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если мТаблицаРезультата.Количество() > 0 ТОгда
		Для Каждого мСтрокаТаблицы Из мТаблицаРезультата Цикл
			вСписок.Добавить(мСтрокаТаблицы.Ссылка, СокрЛП(мСтрокаТаблицы.Код) + " " + СокрЛП(мСтрокаТаблицы.Наименование));
		КонецЦикла;
	КонецЕсли;
	
	Возврат вСписок;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗадание(пТекст, пКонтрагент)
	
	вСписок = Новый СписокЗначений;
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатМаршруты.Ссылка КАК Наименование,
	|	уатМаршруты.Наименование КАК Наименование2,
	|	"""" КАК Код,
	|	ИСТИНА КАК ЭтоМаршрут
	|ИЗ
	|	Справочник.уатМаршруты КАК уатМаршруты
	| ГДЕ (уатМаршруты.Наименование ПОДОБНО ""%"" + &СтрПск + ""%"")
	|	И (НЕ уатМаршруты.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦехаКонтрагента.Ссылка,
	|	ЦехаКонтрагента.Наименование,
	|	ЦехаКонтрагента.КодПоиска КАК Код,
	|	ЛОЖЬ КАК ЭтоМаршрут
	|	
	|ИЗ
	|	Справочник.ЦехаКонтрагента КАК ЦехаКонтрагента
	| ГДЕ (ЦехаКонтрагента.Наименование ПОДОБНО ""%"" + &СтрПск + ""%""
	|	ИЛИ ЦехаКонтрагента.КодПоиска ПОДОБНО &СтрПск + ""%""
	|	ИЛИ ЦехаКонтрагента.Код ПОДОБНО &СтрПск + ""%"")
	|	И ЦехаКонтрагента.Владелец = &Контрагент
	|	И (НЕ ЦехаКонтрагента.ПометкаУдаления)
	|УПОРЯДОЧИТЬ ПО ЭтоМаршрут ВОЗР, Наименование2 ВОЗР
	|
	|
	|";
	
	Запрос.УстановитьПараметр("СтрПск", "" + пТекст);	
	Запрос.УстановитьПараметр("Контрагент", пКонтрагент);
	мТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если мТаблицаРезультата.Количество() > 0 ТОгда
		Для Каждого мСтрокаТаблицы Из мТаблицаРезультата Цикл
			вСписок.Добавить(мСтрокаТаблицы.Наименование, "" + мСтрокаТаблицы.Код + " " + мСтрокаТаблицы.Наименование);
		КонецЦикла;
	КонецЕсли;
	вСписок.Вставить(0, пТекст);
	Возврат вСписок;
КонецФункции

&НаКлиенте
Процедура фДеревоРазнарядкиМестоОказанияУслугОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = НайтиЗадание(СокрЛП(Текст), Элементы.фДеревоРазнарядки.ТекущиеДанные.Контрагент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиВодитель2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элементы.фДеревоРазнарядки.ТекущиеДанные.Водитель2 = ВыбранноеЗначение;
	Элементы.фДеревоРазнарядки.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиМестоОказанияУслугОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатМаршруты") Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЦехаКонтрагента") Тогда
		Элементы.фДеревоРазнарядки.ТекущиеДанные.МестоОказанияУслуг = "";
		Элементы.фДеревоРазнарядки.ТекущиеДанные.ЦехМаршрут = ВыбранноеЗначение;
		Элементы.фДеревоРазнарядки.ТекущиеДанные.Контрагент = ПолучитьРеквизит(ВыбранноеЗначение, "Владелец");
	Иначе
		Элементы.фДеревоРазнарядки.ТекущиеДанные.МестоОказанияУслуг = ВыбранноеЗначение;
		Элементы.фДеревоРазнарядки.ТекущиеДанные.ЦехМаршрут = ПредопределенноеЗначение("Справочник.уатМаршруты.ПустаяСсылка");
	КонецЕсли;
	Элементы.фДеревоРазнарядки.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Элемент.ТекущийЭлемент = Элементы.фДеревоРазнарядкиВыбрано Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ОтменаРедактирования Тогда
		ОбработкаЗаписиСтрокиСмены();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивТС()
	вМассив = Новый Массив;
	Для Каждого мСтрока Из фТаблицаПоискаТС Цикл
		вМассив.Добавить(мСТрока.ТС);
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоПредыдущимДанным(Команда)
	мМассивТС = ПолучитьМассивТС();
	мМассивДанных = ЗаполнитьПоПредыдущимДаннымНаСервере(фДата, мМассивТС, фНеКопироватьПоПризнакуВыходнойПраздник);
	Если ЗначениеЗаполнено(мМассивДанных) Тогда
		
		//Для Каждого мЭлементДерева Из фДеревоРазнарядки.ПолучитьЭлементы() Цикл
		//	//очистка смен:
		//	мСтрокиСмен = мЭлементДерева.ПолучитьЭлементы();
		//	Если мСтрокиСмен.Количество() > 0 Тогда
		//		мСтрокиСмен.Очистить();
		//	КонецЕсли;
		//КонецЦикла;
		
		Для Каждого мЭлемент Из мМассивДанных Цикл
			//ищем по таблице ТС строки ТС:
			мИскомоеТС = мЭлемент.ТС;
			Если ЗначениеЗаполнено(мИскомоеТС) Тогда
				мСтруктураПоискаТС = Новый Структура("ТС", мИскомоеТС);
				мСтрокиТаблицы = фТаблицаПоискаТС.НайтиСтроки(мСтруктураПоискаТС);
				Если мСтрокиТаблицы.Количество() > 0 Тогда
					мСтрокаДерева = фДеревоРазнарядки.НайтиПоИдентификатору(мСтрокиТаблицы[0].ИдентификаторСтрокиДерева);
					Если мСтрокаДерева.ТС = мИскомоеТС Тогда
						мСтрокиСмен = мСтрокаДерева.ПолучитьЭлементы();
						мСтрокаСмены = Неопределено;
						Если мСтрокаСмены = 0 Тогда
							Продолжить;
						ИначеЕсли мСтрокаСмены = Неопределено Тогда
							мСтрокаСмены = мСтрокиСмен.Добавить();
							мСтрокаСмены.сУровеньДерева = 1;
						КонецЕсли;
						мСтрокаСмены.ПутевойЛист = мЭлемент.ПутевойЛист;
						мСтрокаСмены.Колонна = мСтрокаДерева.Колонна;
						мСтрокаСмены.ТС = мЭлемент.ТС;
						мСтрокаСмены.ГарНомерТС = мЭлемент.ГарНомерТС;
						мСтрокаСмены.ГосНомерТС = мЭлемент.ГосНомерТС;
						мСтрокаСмены.Смена = мЭлемент.Смена;
						мСтрокаСмены.Водитель = мЭлемент.Водитель;
						мСтрокаСмены.Водитель2 = мЭлемент.Водитель2;
						мСтрокаСмены.КонтрагентПЛ = мЭлемент.Контрагент;
						мСтрокаСмены.ВремяПодачиОбщее = Дата("00010101") + (мЭлемент.ДатаВыезда - НачалоДня(мЭлемент.ДатаВыезда));
						мСтрокаСмены.ВремяВозвратаОбщее = Дата("00010101") + (мЭлемент.ДатаВозвращения - НачалоДня(мЭлемент.ДатаВозвращения));
						мСтрокаСмены.ДатаВозврата = ?(НачалоДня(мЭлемент.ДатаВозвращения) > НачалоДня(мЭлемент.ДатаВыезда), фДата + (24 * 3600), фДата);
						
						//в строках смен ищем полностью идентичное по времени и контрагенту
						мСтрокаЗадания = мСтрокаСмены.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(мСтрокаЗадания, мСтрокаСмены);
						мСтрокаЗадания.сУровеньДерева = 2;
						мСтрокаЗадания.ВремяПодачи = мСтрокаСмены.ВремяПодачиОбщее;
						мСтрокаЗадания.ВремяВозврата = мСтрокаСмены.ВремяВозвратаОбщее;
						мСтрокаЗадания.ЦехМаршрут = мЭлемент.ЦехМаршрут;
						мСтрокаЗадания.Контрагент = мЭлемент.Контрагент;
						Элементы.фДеревоРазнарядки.Развернуть(мСтрокаСмены.ПолучитьИдентификатор(), Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПоПредыдущимДаннымНаСервере(пДата, пМассивТС, пНеКопироватьПоПризнакуВыходнойПраздник)
	мЗапросПредыдущих = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(ПутевойЛист.ДатаВыезда) КАК ДатаВыезда,
	|	ВЫБОР
	|		КОГДА ЧАС(ПутевойЛист.ДатаВыезда) < 4
	|				ИЛИ ЧАС(ПутевойЛист.ДатаВыезда) >= 16
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Смена,
	|	ПутевойЛист.ТранспортноеСредство КАК ТС
	|ПОМЕСТИТЬ ВыборкаПоДатам
	|ИЗ
	|	Документ.уатПутевойЛист КАК ПутевойЛист
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК ДанныеКалендаряТекущегоДня
	|		ПО НАЧАЛОПЕРИОДА(ДанныеКалендаряТекущегоДня.ДатаКалендаря, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК Календарь
	|		ПО НАЧАЛОПЕРИОДА(ПутевойЛист.ДатаВыезда, ДЕНЬ) = НАЧАЛОПЕРИОДА(Календарь.ДатаКалендаря, ДЕНЬ) И ВЫБОР КОГДА (&НеКопироватьПоПризнакуВыходнойПраздник) ТОГДА ИСТИНА КОГДА ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) ИЛИ ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ИЛИ ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье) ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота) ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник) ИНАЧЕ (Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Рабочий) ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Предпраздничный)) КОНЕЦ
	|ГДЕ
	|	ПутевойЛист.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаРазнарядки, ДЕНЬ, -8), ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаРазнарядки, ДЕНЬ)
	|	И ПутевойЛист.ТранспортноеСредство В(&МассивТС) И НЕ ПутевойЛист.ПометкаУдаления
	|СГРУППИРОВАТЬ ПО
	|	ПутевойЛист.ТранспортноеСредство,
	|	ВЫБОР
	|		КОГДА ЧАС(ПутевойЛист.ДатаВыезда) < 4
	|				ИЛИ ЧАС(ПутевойЛист.ДатаВыезда) >= 16
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ПЛ.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаРазнарядки, ДЕНЬ) ТОГДА ПЛ.Ссылка ИНАЧЕ ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка) КОНЕЦ КАК ПутевойЛист,
	|	ПЛ.ТранспортноеСредство КАК ТС,
	|	ПЛ.ТранспортноеСредство.ГаражныйНомер КАК ГарНомерТС,
	|	ПЛ.ТранспортноеСредство.ГосударственныйНомер КАК ГосНомерТС,
	|	ПЛ.Контрагент КАК Контрагент,
	|	ПЛ.Водитель1 КАК Водитель,
	|	ПЛ.Водитель2 КАК Водитель2,
	|	ПЛ.ЦехКонтрагента КАК ЦехМаршрут,
	|	ПЛ.ИдентификаторРазнарядки КАК ИдентификаторСтрокиЗаявки,
	|	ПЛ.ДатаВыезда КАК ДатаВыезда,
	|	ВЫБОР
	|		КОГДА ЧАС(ПЛ.ДатаВыезда) < 4
	|				ИЛИ ЧАС(ПЛ.ДатаВыезда) >= 16
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Смена,
	|	ПЛ.ДатаВозвращения КАК ДатаВозвращения,
	|	ПЛ.Прицепы.(
	|		ТС.Ссылка КАК ТССсылка
	|	) КАК Прицеп
	|ИЗ
	|	Документ.уатПутевойЛист КАК ПЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыборкаПоДатам КАК ВыборкаПоДатам
	|		ПО (ВыборкаПоДатам.ТС = ПЛ.ТранспортноеСредство)
	|			И НАЧАЛОПЕРИОДА(ПЛ.ДатаВыезда, ДЕНЬ) = НАЧАЛОПЕРИОДА(ВыборкаПоДатам.ДатаВыезда, ДЕНЬ)
	|			И (ВыборкаПоДатам.Смена = ВЫБОР
	|				КОГДА ЧАС(ПЛ.ДатаВыезда) < 4
	|						ИЛИ ЧАС(ПЛ.ДатаВыезда) >= 16
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ)
	|ГДЕ
	|	ПЛ.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаРазнарядки, ДЕНЬ, -8), ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаРазнарядки, ДЕНЬ)
	|	//И ПЛ.Проведен
	|	И (НЕ ПЛ.ПометкаУдаления)
	|	//И (НЕ ПЛ.Ссылка В
	|	//			(ВЫБРАТЬ
	|	//				ВыпискаПЛПоИдентификаторам.ПутевойЛист
	|	//			ИЗ
	|	//				РегистрСведений.ВыпискаПЛПоИдентификаторам КАК ВыпискаПЛПоИдентификаторам
	|	//			ГДЕ
	|	//				НАЧАЛОПЕРИОДА(ВыпискаПЛПоИдентификаторам.ДатаВыписки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаРазнарядки, ДЕНЬ)))");
	
	мЗапросПредыдущих.УстановитьПараметр("ДатаРазнарядки", пДата);
	мЗапросПредыдущих.УстановитьПараметр("МассивТС", пМассивТС);
	мЗапросПредыдущих.УстановитьПараметр("НеКопироватьПоПризнакуВыходнойПраздник", пНеКопироватьПоПризнакуВыходнойПраздник);
	мРезультат = мЗапросПредыдущих.Выполнить().Выгрузить();
	вМассивВозврата = Новый Массив;
	Для Каждого мСтрока Из мРезультат Цикл
		мСтруктура = Новый Структура("ИдентификаторСтрокиЗаявки, ПутевойЛист, ТС, ГарНомерТС, ГосНомерТС, Контрагент, Водитель, Водитель2, ЦехМаршрут, ДатаВыезда, Смена, ДатаВозвращения");
		ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
		вМассивВозврата.Добавить(мСтруктура);
	КонецЦикла;
	
	Возврат вМассивВозврата;
КонецФункции

#Область Печать
&НаКлиенте
Процедура ПечатьРазнарядки(Команда)
	мСтруктура = Новый Структура;
	мСтруктура.Вставить("ФДата", ФДата);
	//мСтруктура.Вставить("фМестоРаботы", фМестоРаботы);
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("СтрДанные", мСтруктура);
	
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаПечатьРазнарядки", мПараметры, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура фДатаПриИзменении(Элемент)
	Если (ЗначениеЗаполнено(фКолонна) Или ЗначениеЗаполнено(фГруппа)) И ЗначениеЗаполнено(фДата) Тогда
		КомандаСформировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура фМестоРаботыПриИзменении(Элемент)
//	Если ЗначениеЗаполнено(фДата) Тогда
//		КомандаСформировать(Неопределено);
//	КонецЕсли;
//КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура фКолоннаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(фКолонна) И ЗначениеЗаполнено(фДата) Тогда
		Если ЗначениеЗаполнено(фКолонна) Тогда
			мДатаНачалаВыпискиСтрогоПоРазнарядке = ПолучитьРеквизит(фКолонна, "ВыпискаПлТолькоПоРазнарядке");
			Элементы.ЗаполнитьПоПредыдущимДанным.Видимость = мДатаНачалаВыпискиСтрогоПоРазнарядке = Дата("00010101") Или НачалоДня(мДатаНачалаВыпискиСтрогоПоРазнарядке) > НачалоДня(фДата);
		Иначе
			Элементы.ЗаполнитьПоПредыдущимДанным.Видимость = Истина;
		КонецЕсли;
		КомандаСформировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фСменаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(фКолонна) И ЗначениеЗаполнено(фДата) Тогда
		КомандаСформировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиПриАктивизацииЯчейки(Элемент)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И мСтрокаТекущихДанных.сУровеньДерева = 1 Тогда
		Если Элементы.фДеревоРазнарядки.ТекущийЭлемент = Элементы.фДеревоРазнарядкиВодитель Тогда
			мМассивСотрудников = фСоответствиеТСВодителям.Получить("" + СокрЛП(мСтрокаТекущихДанных.ГарНомерТС) + ?(мСтрокаТекущихДанных.Смена = 2, " 2", " 1"));
			Элементы.фДеревоРазнарядкиВодитель.СписокВыбора.Очистить();
			Если мМассивСотрудников <> Неопределено Тогда
				Элементы.фДеревоРазнарядкиВодитель.СписокВыбора.ЗагрузитьЗначения(мМассивСотрудников);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПланирования(Команда)
	ОткрытьФорму("РегистрСведений.Разнарядка.Форма.Разнарядка");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизит(пОбъект, пРеквизит)
	Возврат пОбъект[пРеквизит];
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЦехПоКодуПоиска(пТекст)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ЦехаКонтрагента.КодПоиска КАК КодПоиска,
	|	ЦехаКонтрагента.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЦехаКонтрагента КАК ЦехаКонтрагента
	|ГДЕ
	|	ЦехаКонтрагента.Код = &КодПоиска");//8010183
	мЗапрос.УстановитьПараметр("КодПоиска", пТекст);
	мРезультат = мЗапрос.Выполнить().Выбрать();
	вМассив = Новый Массив;
	Пока мРезультат.Следующий() Цикл
		вМассив.Добавить(мРезультат.Ссылка);
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаКлиенте
Процедура ГруппаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(фГруппа) И ЗначениеЗаполнено(фДата) Тогда
		КомандаСформировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиКонтрагентПриИзменении(Элемент)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мКонтрагент = мСтрокаТекущихДанных.Контрагент;
		мСтрокаРодителя = мСтрокаТекущихДанных.ПолучитьРодителя();
		мСтрокиЗаданий = мСтрокаРодителя.ПолучитьЭлементы();
		Если мСтрокиЗаданий.Количество() = 1 Тогда
			мСтрокаРодителя.КонтрагентПЛ = мКонтрагент;
		Иначе
			мМассивКонтрагентов = Новый Массив;
			Для Каждого мСтрокаЗадания Из мСтрокиЗаданий Цикл
				Если ЗначениеЗаполнено(мСтрокаЗадания.Контрагент) И мМассивКонтрагентов.Найти(мСтрокаЗадания.Контрагент) = Неопределено Тогда
					мМассивКонтрагентов.Добавить(мСтрокаЗадания.Контрагент);
				КонецЕсли;
			КонецЦикла;
			Если мМассивКонтрагентов.Количество() > 0 Тогда
				Если мМассивКонтрагентов.Найти(мСтрокаРодителя.КонтрагентПЛ) = Неопределено Тогда
					мСтрокаРодителя.КонтрагентПЛ = мКонтрагент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.фДеревоРазнарядки.ЗакончитьРедактированиеСтроки(Ложь);
	ОбработкаЗаписиСтрокиСмены();
КонецПроцедуры

&НаКлиенте
Процедура фДеревоРазнарядкиКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И СтрокаПоМаске(Текст, "1234567890") = Текст Тогда
		СтандартнаяОбработка = Ложь;
		мЦеха = НайтиЦехПоКодуПоиска(Текст);
		Если мЦеха.Количество() = 0 Тогда
			Элементы.фДеревоРазнарядки.ЗакончитьРедактированиеСтроки(Истина);
		ИначеЕсли мЦеха.Количество() = 1 Тогда
			мЦех = мЦеха[0];
			мСтрокаТекущихДанных.Контрагент = ПолучитьРеквизит(мЦех, "Владелец");
			мСтрокаТекущихДанных.МестоОказанияУслуг = "";
			мСтрокаТекущихДанных.ЦехМаршрут = мЦех;
			мСтрокаРодителя = мСтрокаТекущихДанных.ПолучитьРодителя();
			мСтрокиЗаданий = мСтрокаРодителя.ПолучитьЭлементы();
			Если мСтрокиЗаданий.Количество() = 1 Тогда
				мСтрокаРодителя.КонтрагентПЛ = мСтрокаТекущихДанных.Контрагент;
			КонецЕсли;
			Элементы.фДеревоРазнарядки.ЗакончитьРедактированиеСтроки(Истина);
			ОбработкаЗаписиСтрокиСмены();
		Иначе
			Элементы.фДеревоРазнарядки.ЗакончитьРедактированиеСтроки(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоМаске(пСтрока, пМаска, пМаксимумСимволов = -1)
	вРезультат = "";
	пСтрока = СокрЛП(пСтрока);
	мДлинаИсходнойСтроки = СтрДлина(пСтрока);
	Для мИтр = 1 По мДлинаИсходнойСтроки Цикл
		мСимвол = Сред(пСтрока, мИтр, 1);
		Если Найти(пМаска, мСимвол) > 0 Тогда
			Если пМаксимумСимволов > 0 и мДлинаИсходнойСтроки > пМаксимумСимволов Тогда
				Если СтрДлина(вРезультат) = пМаксимумСимволов Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			вРезультат = вРезультат + мСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат вРезультат;
КонецФункции
////параметры формы 
//фДатаВозвратаВРежимеМаршрутов				- только для обратной совместимости с обычной формой
//фКопироватьВремяСПредыдущегоПЛ	:		- только для обратной совместимости с обычной формой
//+фНастройкаУпорядочивания	:	используется для упорядочивания дерева на 0 уровне, параметр Запроса
//фНеКопироватьПоПризнакуВыходнойПраздник : - только для обратной совместимости с обычной формой
//фОтображатьВодитель2ВРежимеМаршрутов		- только для обратной совместимости с обычной формой
//фОтображатьДанныеЗагрузки					- только для обратной совместимости с обычной формой
//фОтображениеДат							- только для обратной совместимости с обычной формой
//фОтображениеКолонна	:	влияет на видимость колонок дерева
//фОтображениеПозицияПП	:	влияет на видимость колонок дерева
//фОтображениеПрицеп						- только для обратной совместимости с обычной формой
//фПечатьСразуНаПринтер	: влияет на поведение кнопки Печать - если Да - выводит на принтер, если Нет - на экран

&НаСервереБезКонтекста
Функция ВспомнитьВыборТС(пСтруктураДат, пНастройкаУпорядочивания)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ЧАС(уатПутевойЛист.ДатаВыезда) * 3600 + МИНУТА(уатПутевойЛист.ДатаВыезда) * 60 + СЕКУНДА(уатПутевойЛист.ДатаВыезда) КАК Начало,
	|	ЧАС(уатПутевойЛист.ДатаВозвращения) * 3600 + МИНУТА(уатПутевойЛист.ДатаВозвращения) * 60 + СЕКУНДА(уатПутевойЛист.ДатаВозвращения) КАК Окончание,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТранспортноеСредство,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ уатПутевойЛист.Ссылка) КАК Доков
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.юкГруппыТС.ТаблицаТС КАК ГруппыТС
	|		ПО ГруппыТС.ТС = уатПутевойЛист.ТранспортноеСредство
	|ГДЕ
	|	уатПутевойЛист.ДатаВыезда МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ уатПутевойЛист.ПометкаУдаления
	|СГРУППИРОВАТЬ ПО
	|	ЧАС(уатПутевойЛист.ДатаВыезда) * 3600 + МИНУТА(уатПутевойЛист.ДатаВыезда) * 60 + СЕКУНДА(уатПутевойЛист.ДатаВыезда),
	|	ЧАС(уатПутевойЛист.ДатаВозвращения) * 3600 + МИНУТА(уатПутевойЛист.ДатаВозвращения) * 60 + СЕКУНДА(уатПутевойЛист.ДатаВозвращения),
	|	уатПутевойЛист.ТранспортноеСредство,
	|	ВЫБОР КОГДА &НастройкаУпорядочивания = 5 ТОГДА ГруппыТС.НомерСтроки КОГДА &НастройкаУпорядочивания = 3 ТОГДА уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер ИНАЧЕ уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ уатПутевойЛист.Ссылка) > 1
	|	упорядочить по ВЫБОР КОГДА &НастройкаУпорядочивания = 5 ТОГДА ГруппыТС.НомерСтроки КОГДА &НастройкаУпорядочивания = 3 ТОГДА уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер ИНАЧЕ уатПутевойЛист.ТранспортноеСредство.ГаражныйНомер КОНЕЦ ВОЗР");
	мЗапрос.УстановитьПараметр("ДатаНачала", пСтруктураДат.МинДата);
	мЗапрос.УстановитьПараметр("ДатаОкончания", пСтруктураДат.МаксДата);
	мЗапрос.УстановитьПараметр("НастройкаУпорядочивания", пНастройкаУпорядочивания);
	мРезультат = мЗапрос.Выполнить().Выгрузить();
	
	вМассив = Новый Массив;
	Для Каждого мСтрока Из мРезультат Цикл
		мСтруктура = Новый Структура("ТС, ГарНомер, Начало, Окончание", мСтрока.ТранспортноеСредство, мСтрока.ТранспортноеСредство.ГаражныйНомер, мСтрока.Начало, мСтрока.Окончание);
		вМассив.Добавить(мСтруктура);
	КонецЦикла;
	
	Возврат вМассив;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредыдущиеДаты(пДата)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ДанныеКалендаряТекущегоДня.ДатаКалендаря КАК ДатаКалендаря,
	|	РАЗНОСТЬДАТ(Календарь.ДатаКалендаря, ДанныеКалендаряТекущегоДня.ДатаКалендаря, ДЕНЬ) КАК Дней,
	|	МАКСИМУМ(Календарь.ДатаКалендаря) КАК МаксДата
	|ПОМЕСТИТЬ ПредВыборка
	|ИЗ
	|	РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК ДанныеКалендаряТекущегоДня
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатРегламентированныйПроизводственныйКалендарь КАК Календарь
	|		ПО (НАЧАЛОПЕРИОДА(ДанныеКалендаряТекущегоДня.ДатаКалендаря, ДЕНЬ) > НАЧАЛОПЕРИОДА(Календарь.ДатаКалендаря, ДЕНЬ))
	|			И (ВЫБОР
	|				КОГДА ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье)
	|						ИЛИ ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота)
	|						ИЛИ ДанныеКалендаряТекущегоДня.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник)
	|					ТОГДА Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Воскресенье)
	|							ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Суббота)
	|							ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Праздник)
	|				ИНАЧЕ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ИЛИ Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.уатВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			КОНЕЦ)
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДанныеКалендаряТекущегоДня.ДатаКалендаря, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|	И РАЗНОСТЬДАТ(Календарь.ДатаКалендаря, ДанныеКалендаряТекущегоДня.ДатаКалендаря, ДЕНЬ) <= 5
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКалендаряТекущегоДня.ДатаКалендаря,
	|	РАЗНОСТЬДАТ(Календарь.ДатаКалендаря, ДанныеКалендаряТекущегоДня.ДатаКалендаря, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредВыборка.ДатаКалендаря КАК ДатаКалендаря,
	|	МИНИМУМ(ПредВыборка.МаксДата) КАК МинДата,
	|	МАКСИМУМ(ПредВыборка.МаксДата) КАК МаксДата
	|ИЗ
	|	ПредВыборка КАК ПредВыборка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредВыборка.ДатаКалендаря");
	
	мЗапрос.УстановитьПараметр("ТекущаяДата", пДата);
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Если мРезультат.Следующий() Тогда
		вСтруктура = Новый Структура("МинДата, МаксДата", мРезультат.МинДата, мРезультат.МаксДата);
		Возврат вСтруктура;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ВспомнитьВыбор(Команда)
	фСписокВыбранныхСтрок.Очистить();
	УстановитьВыбор(Ложь, Ложь);
	мМассивВыбранныхВПрошлыйРаз = ВспомнитьВыборТС(ПолучитьПредыдущиеДаты(фДата), фНастройкаУпорядочивания);
	Если мМассивВыбранныхВПрошлыйРаз.Количество() > 0 Тогда
		Для Каждого мЭлемент Из мМассивВыбранныхВПрошлыйРаз Цикл
			мОтборПоТС = Новый Структура("ТС", мЭлемент.ТС);
			мСтрокиПоТС = фТаблицаПоискаТС.НайтиСтроки(мОтборПоТС);
			мСтрокаТС = Неопределено;
			Если мСтрокиПоТС.Количество() > 0 Тогда
				мСтрокаТС = фДеревоРазнарядки.НайтиПоИдентификатору(мСтрокиПоТС[0].ИдентификаторСтрокиДерева);
			Иначе
				Продолжить;
			КонецЕсли;
			мСтрокиСмен = мСтрокаТС.ПолучитьЭлементы();
			Для Каждого мСтрокаСмены Из мСтрокиСмен Цикл
				Если (мСтрокаСмены.ВремяПодачиОбщее - НачалоДня(мСтрокаСмены.ВремяПодачиОбщее)) = мЭлемент.Начало
					И (мСтрокаСмены.ВремяВозвратаОбщее - НачалоДня(мСтрокаСмены.ВремяВозвратаОбщее)) = мЭлемент.Окончание Тогда
					мИдентификаторТекущейСтроки = мСтрокаСмены.ПолучитьИдентификатор();
					фСписокВыбранныхСтрок.Добавить(мИдентификаторТекущейСтроки);
					мСтрокаСмены.Выбрано = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПЛЗаПериод(Команда)
	мМассивСтрок = Новый Массив;
	Для Каждого мИдентификаторСтрокиСмены Из фСписокВыбранныхСтрок Цикл
		мСтрокаСменыДерева = фДеревоРазнарядки.НайтиПоИдентификатору(мИдентификаторСтрокиСмены.Значение);
		Если мСтрокаСменыДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		мСтруктураОбщихДанныхПЛ = Новый Структура("ТС, ГарНомерТС, ВремяПодачиОбщее, ВремяВозвратаОбщее, Водитель, Водитель2, КонтрагентПЛ, Контрагент, ДатаВозврата, Прицеп, ПутевойЛист");
		ЗаполнитьЗначенияСвойств(мСтруктураОбщихДанныхПЛ, мСтрокаСменыДерева);
		мСтруктураОбщихДанныхПЛ.Вставить("ДатаФормирования", фДата);
		мСтруктураОбщихДанныхПЛ.Вставить("ИдентификаторСтрокиДерева", мИдентификаторСтрокиСмены.Значение);
		
		мМассивЗаданий = Новый Массив;
		мСтрокиЗаданий = мСтрокаСменыДерева.ПолучитьЭлементы();
		Для Каждого мСтрокаЗадания Из мСтрокиЗаданий Цикл
			мСтруктураСтроки = Новый Структура("ТС, ИдентификаторСтрокиЗаявки, Смена, ВремяПодачи, ВремяВозврата, Водитель, МестоОказанияУслуг, ЦехМаршрут, Колонна, ТипТС, ВтораяСмена, Контрагент, Водитель2, ПутевойЛист, ДатаВозврата, Прицеп, ПутевойЛист, ПозицияПП");
			ЗаполнитьЗначенияСвойств(мСтруктураСтроки, мСтрокаЗадания);
			мСтруктураСтроки.Вставить("ТСПринудительноСтерто", Ложь);
			мМассивЗаданий.Добавить(мСтруктураСтроки);
			Прервать;
		КонецЦикла;
		
		мМассивСтрок.Добавить(Новый Структура("ОбщиеДанныеСтроки, МассивЗаданий", мСтруктураОбщихДанныхПЛ, мМассивЗаданий));
		Прервать;	//обрабатывается только первая строка!!!
	КонецЦикла;
	Если мМассивСтрок.Количество() > 0 Тогда
		УстановитьВыбор(Ложь, Ложь);
		//пДополнительныеПараметры = Новый Структура("мМассивСтрок", мМассивСтрок);
		мОписаниеОповещенияОЗакрытииФормыПечатиЗаПериод = Новый ОписаниеОповещения("ОбработкаОповещенияЗакрытияФормыПечатиЗаПериод", ЭтаФорма);
		пПараметрыФормы = Новый Структура("МассивСтрокКПечати, ДатаНачала", мМассивСтрок, фДата);
		ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаПечатиПлЗаПериод2", пПараметрыФормы, ЭтаФорма, , , , мОписаниеОповещенияОЗакрытииФормыПечатиЗаПериод, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗакрытияФормыПечатиЗаПериод(пРезультат, пДополнительныеПараметры) Экспорт
	////попытка минимизировать обновления
	//Для Каждого мСтрокаСоответствия Из пРезультат.СоответствиеСтрокДереваПутевымЛистам Цикл
	//	мСтрокаДерева = фДеревоРазнарядки.НайтиПоИдентификатору(мСтрокаСоответствия.Ключ);
	//	Если мСтрокаДерева <> Неопределено Тогда
	//		мСтрокаДерева.ПутевойЛист = мСтрокаСоответствия.Значение;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьИПривязатьКЛоту(Команда)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И мСтрокаТекущихДанных.сУровеньДерева = 2 И Не ЗначениеЗаполнено(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки) Тогда
		мРодитель = мСтрокаТекущихДанных.ПолучитьРодителя();
		мПараметрыНовойЗаписи = Новый Структура("Дата, ТС, ИдентификаторСтрокиЗаявки, ВремяПодачи, Смена, ВремяВозврата, Водитель, ЦехМаршрут, Контрагент, Водитель2, ПозицияПП");
		ЗаполнитьЗначенияСвойств(мПараметрыНовойЗаписи, Элементы.фДеревоРазнарядки.ТекущиеДанные);
		ЗаполнитьЗначенияСвойств(мПараметрыНовойЗаписи, мРодитель, "ТС, Водитель, Водитель2, Смена");
		мПараметрыНовойЗаписи.ИдентификаторСтрокиЗаявки = Новый УникальныйИдентификатор;
		мПараметрыНовойЗаписи.Дата = фДата;
		ОткрытьФорму("РегистрСведений.Разнарядка.ФормаЗаписи", мПараметрыНовойЗаписи, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СходСЛинии(Команда)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено Тогда
		мПутевойЛист = мСтрокаТекущихДанных.ПутевойЛист;
		мИдентификаторСтрокиЗаявки = мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки;
		Если ЗначениеЗаполнено(мПутевойЛист) И ЗначениеЗаполнено(мИдентификаторСтрокиЗаявки) Тогда
			мДополнительныеПараметры = Новый Структура("ПутевойЛист", );
			мОписаниеОповещенияОбработкаОтветаСходСЛинии = Новый ОписаниеОповещения("ОбработкаОтветаСходСЛинии", ЭтаФорма, мДополнительныеПараметры);
			мПараметры = Новый Структура;
			мПараметры.Вставить("СтрокаВариантов", "Новый ПЛ;Замена ТС в старом ПЛ;Отмена");
			ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаВыбораИзМассиваВариантов", мПараметры, ЭтаФорма, , , , мОписаниеОповещенияОбработкаОтветаСходСЛинии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаСходСЛинии(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено Тогда
		Если пРезультат.ВыбранныйИндекс = 1 Тогда
			мОписаниеОповещенияОбработкаНастройкиСходаСЛинии = Новый ОписаниеОповещения("ОбработкаНастройкиСходаСЛинии", ЭтаФорма);
			мПараметрыНовыйПЛ = Новый Структура("ПутевойЛист", пДополнительныеПараметры.ПутевойЛист);
			ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаНастройкиСходаСЛинии", мПараметрыНовыйПЛ, ЭтаФорма, , , , мОписаниеОповещенияОбработкаНастройкиСходаСЛинии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли пРезультат.ВыбранныйИндекс = 2 Тогда
			мОписаниеОповещенияОбработкаЗаменыТСВодителя = Новый ОписаниеОповещения("ОбработкаЗаменыТСВодителя", ЭтаФорма);
			мПараметрыЗаменаТСВодителя = Новый Структура("ПутевойЛист", пДополнительныеПараметры.ПутевойЛист);
			ОткрытьФорму("РегистрСведений.Разнарядка.Форма.ФормаЗаменыТСВодителяВПл", мПараметрыЗаменаТСВодителя, ЭтаФорма, , , , мОписаниеОповещенияОбработкаЗаменыТСВодителя, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		//Иначе - Отмена
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаНастройкиСходаСЛинии(пРезультат, пДополнительныеПараметры) Экспорт
	//производим изменения в строках, для минимизации обновлений
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаменыТСВодителя(пРезультат, пДополнительныеПараметры) Экспорт
	//поменять тс и водителя в строке дерева на новых! (для минимизации обновлений)
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьЗаявкуКЛоту(Команда)
	мСтрокаТекущихДанных = Элементы.фДеревоРазнарядки.ТекущиеДанные;
	Если мСтрокаТекущихДанных <> Неопределено И ЗначениеЗаполнено(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки) Тогда
		мСвойстваРазбивки = Новый Структура("ИдентификаторСтрокиЗаявки, ТС, ЦехМаршрут, ВремяПодачи, ВремяВозврата, ПозицияПП, МестоРаботы");
		ЗаполнитьЗначенияСвойств(мСвойстваРазбивки, Элементы.фДеревоРазнарядки.ТекущиеДанные);
		мСтруктураРегистратора = ПолучитьРегистраторПоИдентификаторуСтрокиЗаявки(мСвойстваРазбивки.ИдентификаторСтрокиЗаявки, фДата);
		Если мСтруктураРегистратора.ИдентификаторСтрокиЛота = "" И ТипЗнч(мСтруктураРегистратора.Регистратор) = Тип("ДокументСсылка.Заявка") Тогда
			мСвойстваРазбивки.Вставить("РежимВыбораИдентификатора", Истина);
			мОписаниеОповещенияВыборСтрокиЛота = Новый ОписаниеОповещения("ОбработкаВыбораСтрокиЛота", ЭтаФорма, мСтруктураРегистратора);
			ОткрытьФорму("Документ.юкЛот.Форма.ФормаПодбораЛота", мСвойстваРазбивки, , , , , мОписаниеОповещенияВыборСтрокиЛота, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьПредупреждение( , "Эта строка введена не по заявке, либо уже привязана к лоту", 3, "Привязка к лоту не может быть осуществлена");
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(мСтрокаТекущихДанных.ИдентификаторСтрокиЗаявки) Тогда
		ПоказатьПредупреждение( , "Эта строка введена вручную, привязывать нечего", 3, "Привязка к лоту не может быть осуществлена");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСтрокиЛота(пРезультат, пДополнительныеПараметры) Экспорт
	Если пРезультат <> Неопределено И Не пРезультат = "" Тогда
		ЗаполнитьИдентификаторСтрокиЛотаВЗаявке(пДополнительныеПараметры, пРезультат);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИдентификаторСтрокиЛотаВЗаявке(пСтруктураДанныхДокумента, пИдентификаторСтрокиЛота)
	мОбъект = пСтруктураДанныхДокумента.Регистратор.ПолучитьОбъект();
	Для Каждого мСтрока Из мОбъект.Состав Цикл
		Если мСтрока.КоличествоТС < 1 Тогда
			Продолжить;
		КонецЕсли;
		мМассивИдентификаторов = мСтрока.ХранилищеИдентификаторов.Получить();
		Для Каждого мЭлемент из мМассивИдентификаторов Цикл
			Если Строка(мЭлемент) = пСтруктураДанныхДокумента.ИдентификаторСтрокиЗаявки Тогда
				фИскомаяСтрока = мСтрока;
				Прервать;	//прерываем вложенный цикл по id в строке
			КонецЕсли;
		КонецЦикла;
		Если фИскомаяСтрока <> Неопределено Тогда
			Прервать;	//прерываем внешний цикл по строкам заявки
		КонецЕсли;
	КонецЦикла;
	
	фИдентификаторИзменен = Ложь;
	Если фИскомаяСтрока <> Неопределено Тогда
		фИскомаяСтрока.ИдентификаторСтрокиЛота = пИдентификаторСтрокиЛота;
		фИдентификаторИзменен = Истина;
	КонецЕсли;
	
	Если фИдентификаторИзменен Тогда
		мОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегистраторПоИдентификаторуСтрокиЗаявки(пИдентификаторСтрокиЗаявки, пДата)
	вСтруктураВозврата = Новый Структура("Регистратор, ИдентификаторСтрокиЛота, ИдентификаторСтрокиЗаявки", Неопределено, "", пИдентификаторСтрокиЗаявки);
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ДополнительныеСведенияЗаявок.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота,
	|	ДополнительныеСведенияЗаявок.ДокументЛота КАК ДокументЛота
	|ПОМЕСТИТЬ ОтсторнированныеДокументы
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок КАК ДополнительныеСведенияЗаявок
	|ГДЕ
	|	ДополнительныеСведенияЗаявок.ДокументЛота <> ЗНАЧЕНИЕ(Документ.юкЛот.ПустаяСсылка)
	|	И ДополнительныеСведенияЗаявок.ДокументЛота <> ДополнительныеСведенияЗаявок.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки КАК ИдентификаторСтрокиЗаявки,
	|	СведенияРасширенные.Регистратор КАК Регистратор,
	|	СведенияРасширенные.ИдентификаторСтрокиЛота КАК ИдентификаторСтрокиЛота
	|ИЗ
	|	РегистрНакопления.ДополнительныеСведенияЗаявок.Обороты(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Период, ИдентификаторСтрокиЗаявки = &Идентификатор) КАК ДополнительныеСведенияЗаявокОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДополнительныеСведенияЗаявок КАК СведенияРасширенные
	|		ПО ДополнительныеСведенияЗаявокОбороты.ИдентификаторСтрокиЗаявки = СведенияРасширенные.ИдентификаторСтрокиЗаявки
	|			И (НАЧАЛОПЕРИОДА(СведенияРасширенные.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ))
	|			И (ВЫБОР
	|				КОГДА СведенияРасширенные.ИдентификаторСтрокиЛота В
	|						(ВЫБРАТЬ
	|							ОтсторнированныеДокументы.ИдентификаторСтрокиЛота
	|						ИЗ
	|							ОтсторнированныеДокументы КАК ОтсторнированныеДокументы)
	|					ТОГДА НЕ СведенияРасширенные.ДокументЛота В
	|								(ВЫБРАТЬ
	|									ОтсторнированныеДокументы.ДокументЛота
	|								ИЗ
	|									ОтсторнированныеДокументы КАК ОтсторнированныеДокументы)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)");
	мЗапрос.УстановитьПараметр("Дата", пДата);
	мЗапрос.УстановитьПараметр("Идентификатор", пИдентификаторСтрокиЗаявки);
	
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Если мРезультат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(вСтруктураВозврата, мРезультат);
	КонецЕсли;
	Возврат вСтруктураВозврата;
КонецФункции