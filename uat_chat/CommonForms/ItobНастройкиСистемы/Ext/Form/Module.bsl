
// Процедура - обработчик команды "ОткрытьМастерНастройкиСлужбыCsmSvc"
//
&НаКлиенте
Процедура ОткрытьМастерНастройкиСлужбыCsmSvc(Команда)
	
	Форма = ПолучитьФорму("Обработка.ItobМастерНастройкиСервисаCsmSvc.Форма");
	РезультатФормы = Форма.ОткрытьМодально();
	
	Если РезультатФормы = Истина Тогда
		ЭтаФорма.НаборКонстант.ItobАдресСервисаCsmSvc = Форма.ПолныйАдресСервиса;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАдминистрированияИБ(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыАдминистрированияСервернойИБ");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаголовокИзменен = Ложь;
	Если Константы.уатИспользуемаяСистемаGPS.Получить() <> Перечисления.уатСистемаGPS._1СЦСМ тогда
		#Если Клиент тогда
			ТекстСообщения = "Открытие возможно только тогда, когда используемая система GPS - 1C:Центр спутникового мониторинга.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ItobОбщегоНазначенияСервер.ИнформационнаяБазаФайловая() Тогда
		Элементы.ПараметрыАдминистрированияИБ.Видимость = Ложь;
		Элементы.Репликация.Видимость = Ложь;		
	КонецЕсли;
	
	СтруктураПараметрыРепликации = Константы.ItobПараметрыРепликации.Получить().Получить();
	Если ТипЗнч(СтруктураПараметрыРепликации) = Тип("Структура") Тогда
		
		СтруктураПараметрыРепликации.Свойство("ИспользоватьРепликацию", ИспользоватьРепликацию);
		СтруктураПараметрыРепликации.Свойство("Сервер"                , СерверРепликации);
		СтруктураПараметрыРепликации.Свойство("Порт"                  , ПортРепликации);
		СтруктураПараметрыРепликации.Свойство("Интервал"              , Интервал);		
				
	КонецЕсли;
	
	СтруктураПараметрыРепликацииРезерв = Константы.ItobПараметрыРепликацииРезервныйСервер.Получить().Получить();
	Если ТипЗнч(СтруктураПараметрыРепликацииРезерв) = Тип("Структура") Тогда
		
		СтруктураПараметрыРепликацииРезерв.Свойство("ИспользоватьРепликацию", ИспользоватьРезервныйСерверРепликации);
		СтруктураПараметрыРепликацииРезерв.Свойство("Сервер"                , СерверРепликацииРезерв);
		СтруктураПараметрыРепликацииРезерв.Свойство("Порт"                  , ПортРепликацииРезерв);
		СтруктураПараметрыРепликацииРезерв.Свойство("Логин"                 , ЛогинРепликацииРезерв);
		СтруктураПараметрыРепликацииРезерв.Свойство("Пароль"                , ПарольРепликацииРезерв);		
		СтруктураПараметрыРепликацииРезерв.Свойство("Интервал"              , ИнтервалРезерв);		
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ЗаголовокИзменен Тогда
		//ОбщегоНазначенияКлиент.УстановитьПроизвольныйЗаголовокПриложения();
		ЗаголовокИзменен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокСистемыПриИзменении(Элемент)
	
	ЗаголовокИзменен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
			
	Если НЕ ItobОбщегоНазначенияСервер.ИнформационнаяБазаФайловая() Тогда
	
		Если ИспользоватьРепликацию И (Интервал=0) Тогда
			Сообщить("Не задан интервал репликации!");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ИспользоватьРезервныйСерверРепликации И (ИнтервалРезерв=0) Тогда
			Сообщить("Не задан интервал репликации с резервным сервером!");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ИспользоватьРепликацию И ИспользоватьРезервныйСерверРепликации И СерверРепликации=СерверРепликацииРезерв Тогда
			Сообщить("Основной сервер репликации не может совпадать с резервным!");
			Отказ = Истина;
			Возврат;			
		
		КонецЕсли;		
		
		Если НЕ ОбновитьСостояниеРегламентногоЗадания() Тогда	
			Отказ = Истина;
			Возврат;	
			
		КонецЕсли;
		
		СтруктураПараметрыРепликации = Новый Структура;
		СтруктураПараметрыРепликации.Вставить("ИспользоватьРепликацию", ИспользоватьРепликацию);
		СтруктураПараметрыРепликации.Вставить("Сервер"                , СерверРепликации);
		СтруктураПараметрыРепликации.Вставить("Порт"                  , ПортРепликации);
		СтруктураПараметрыРепликации.Вставить("Интервал"              , Интервал);	
		Константы.ItobПараметрыРепликации.Установить(Новый ХранилищеЗначения(СтруктураПараметрыРепликации));
		
		СтруктураПараметрыРепликацииРезерв = Новый Структура;
		СтруктураПараметрыРепликацииРезерв.Вставить("ИспользоватьРепликацию", ИспользоватьРезервныйСерверРепликации);
		СтруктураПараметрыРепликацииРезерв.Вставить("Сервер"                , СерверРепликацииРезерв);
		СтруктураПараметрыРепликацииРезерв.Вставить("Порт"                  , ПортРепликацииРезерв);
		СтруктураПараметрыРепликацииРезерв.Вставить("Логин"                 , ЛогинРепликацииРезерв);
		СтруктураПараметрыРепликацииРезерв.Вставить("Пароль"                , ПарольРепликацииРезерв);
		СтруктураПараметрыРепликацииРезерв.Вставить("Интервал"              , ИнтервалРезерв);	
		Константы.ItobПараметрыРепликацииРезервныйСервер.Установить(Новый ХранилищеЗначения(СтруктураПараметрыРепликацииРезерв));	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСостояниеРегламентногоЗадания()

	Результат = Ложь;
	
	Попытка
	
		Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
		
		НайденноеЗадание = Неопределено;
		НайденноеЗаданиеРезерв = Неопределено;
		НайденноеМетаданные = Неопределено;
		
		Для Каждого Регламентное из Регламентные Цикл
			
			Если НЕ Регламентное.Метаданные = Метаданные.РегламентныеЗадания.ItobРепликация	Тогда
				Продолжить;
			
			КонецЕсли;
			
			Если Регламентное.Наименование = "Репликация с сервера сбора данных IMCS" Тогда
				НайденноеЗадание = Регламентное;
			
			ИначеЕсли Регламентное.Наименование = "Репликация с резервным сервером сбора данных" Тогда
				НайденноеЗаданиеРезерв = Регламентное;
			
			Иначе
				НайденноеМетаданные = Регламентное;	
				
			КонецЕсли;
									
		КонецЦикла;
		
		Если НайденноеЗадание = Неопределено И НайденноеМетаданные <> Неопределено Тогда
			НайденноеЗадание = НайденноеМетаданные;
		
		КонецЕсли;
		
		Если НайденноеЗадание = Неопределено Тогда
			НайденноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ItobРепликация);				
		
		КонецЕсли;
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить("Основной");
		
		НайденноеЗадание.Наименование = "Репликация с сервера сбора данных IMCS";
		НайденноеЗадание.Ключ = "КлючРепликации";
		НайденноеЗадание.Использование = ИспользоватьРепликацию;
		НайденноеЗадание.ИмяПользователя = "ReplicationBot";
		НайденноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
		НайденноеЗадание.ИнтервалПовтораПриАварийномЗавершении = 10;
		НайденноеЗадание.Параметры = ПараметрыЗадания;
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораДней = 1;                    
		Расписание.ПериодПовтораВТечениеДня = 60*?(Интервал=0,1,Интервал);		
		
		НайденноеЗадание.Расписание = Расписание;
		НайденноеЗадание.Записать();
		
		// Резервное задание
		Если НайденноеЗаданиеРезерв = Неопределено Тогда
			НайденноеЗаданиеРезерв = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ItobРепликация);				
		
		КонецЕсли;
		
		ПараметрыЗаданияРезерв = Новый Массив;
		ПараметрыЗаданияРезерв.Добавить("Резервный");
		
		НайденноеЗаданиеРезерв.Наименование = "Репликация с резервным сервером сбора данных";
		НайденноеЗаданиеРезерв.Ключ = "КлючРепликацииРезерв";
		НайденноеЗаданиеРезерв.Использование = ИспользоватьРезервныйСерверРепликации;
		НайденноеЗаданиеРезерв.ИмяПользователя = "ReplicationBot";
		НайденноеЗаданиеРезерв.КоличествоПовторовПриАварийномЗавершении = 3;
		НайденноеЗаданиеРезерв.ИнтервалПовтораПриАварийномЗавершении = 10;
		НайденноеЗаданиеРезерв.Параметры = ПараметрыЗаданияРезерв;
		
		РасписаниеРезерв = Новый РасписаниеРегламентногоЗадания;
		РасписаниеРезерв.ПериодПовтораДней = 1;                    
		РасписаниеРезерв.ПериодПовтораВТечениеДня = 60*?(ИнтервалРезерв=0,1,ИнтервалРезерв)+7;		
		
		НайденноеЗаданиеРезерв.Расписание = РасписаниеРезерв;
		НайденноеЗаданиеРезерв.Записать();
		
		Результат = Истина;
		
	Исключение
	 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПроверитьСоединениеССерверомРепликации(Сервер, Порт, Логин, Пароль)

	ТекстОшибки = "";
	Если ПустаяСтрока(Сервер) Тогда
		ТекстОшибки = "Не указан сервер";
		
	ИначеЕсли Порт = 0 Тогда
		ТекстОшибки = "Не указан порт";
		
	ИначеЕсли ПустаяСтрока(Логин) Тогда	
		ТекстОшибки = "Не указан логин";
		
	ИначеЕсли ПустаяСтрока(Пароль) Тогда	
		ТекстОшибки = "Не указан пароль";		
	
	КонецЕсли;	
	
	Если ТекстОшибки <> "" Тогда
		Предупреждение(ТекстОшибки);
		Возврат;
	
	КонецЕсли;
	
	ТекстОшибки = "";
	Результат = ItobReplicationProcs.ТестСоединенияССервером(
		Сервер, Порт, Логин, Пароль, ТекстОшибки);
	Если НЕ Результат Тогда
		Предупреждение(ТекстОшибки);
		
	Иначе
		Предупреждение("Соединение успешно установлено!");		
	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ТестРепликация(Команда)
	
	ПроверитьСоединениеССерверомРепликации(
		СерверРепликации, ПортРепликации, НаборКонстант.ItobЛогинРепликации, НаборКонстант.ItobПарольРепликации);
		
КонецПроцедуры

&НаКлиенте
Процедура ТестРепликацияРезервныйСервер(Команда)
	
	ПроверитьСоединениеССерверомРепликации(
		СерверРепликацииРезерв, ПортРепликацииРезерв, ЛогинРепликацииРезерв, ПарольРепликацииРезерв);	
	
КонецПроцедуры
