&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НомерТекСтрокиНаЛинии = 0;
	НомерТекСтрокиПодразделения = 0;
	СистемаМониторинга = Справочники.СистемыМониторинга.НайтиПоКоду("06");
	
	//Таблица значений "ПереченьПодразделений" необходима для смены текущего подразделения
	ЗаполнитьПереченьПодразделений();
	Подразделение = ЭтаФорма.Элементы.Подразделение.СписокВыбора.НайтиПоИдентификатору(НомерТекСтрокиПодразделения).Значение;
	
	//Заполним все наши таблички с отбором по подразделению
	ЗаполнитьПереченьТСВРемонте(Подразделение);
	ЗаполнитьТаблицы(ЭтаФорма.Подразделение);
	
	//Организуем раскраску строк в зависимости от цвета гаража
	Выборка = Справочники.уатГаражи.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЦветГаража = Выборка.ЦветГаража.Получить();
		Если ЦветГаража <> Неопределено тогда
			Оформление  = УсловноеОформление.Элементы.Добавить();
			Оформление.Использование = Истина;
			Поле1 = Оформление.Поля.Элементы.Добавить();
			Поле1.Поле = Новый ПолеКомпоновкиДанных("ПереченьТСВРемонтеГаражныйНомер");
			Поле2 = Оформление.Поля.Элементы.Добавить();
			Поле2.Поле = Новый ПолеКомпоновкиДанных("ПереченьТСВРемонтеГосударственныйНомер");
			Поле3 = Оформление.Поля.Элементы.Добавить();
			Поле3.Поле = Новый ПолеКомпоновкиДанных("ПереченьТСВРемонтеДатаНачалаРемонта");
			Поле4 = Оформление.Поля.Элементы.Добавить();
			Поле4.Поле = Новый ПолеКомпоновкиДанных("ПереченьТСВРемонтеТС");
			Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПереченьТСВРемонте.Гараж");
			Отбор.ПравоеЗначение = Выборка.Ссылка; 
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.Использование = Истина;
			Оформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветГаража);	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбработчикСменаТекущейСтроки", 1, Ложь);
	ПодключитьОбработчикОжидания("ОбработчикСменаПодразделения", 15, Ложь);
	ВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСменаТекущейСтроки()
	Если ПереченьТСНаЛинии.Количество() > 0 Тогда
		Если НомерТекСтрокиНаЛинии > (ПереченьТСНаЛинии.Количество() - 2) Тогда
			НомерТекСтрокиНаЛинии = 0;
		Иначе
			НомерТекСтрокиНаЛинии = НомерТекСтрокиНаЛинии + 1;
		КонецЕсли;	
		СтрокаТЗ = ПереченьТСНаЛинии[НомерТекСтрокиНаЛинии]; 
		ИдентификаторСтроки = СтрокаТЗ.ПолучитьИдентификатор();
		Элементы.ПереченьТСНаЛинии.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСменаПодразделения()
	НомерТекСтрокиНаЛинии = 0;
	Если НомерТекСтрокиПодразделения > (Элементы.Подразделение.СписокВыбора.Количество() - 2) Тогда
		НомерТекСтрокиПодразделения = 0;
	Иначе
		НомерТекСтрокиПодразделения = НомерТекСтрокиПодразделения+ 1;
	КонецЕсли;	
	Подразделение = Элементы.Подразделение.СписокВыбора.НайтиПоИдентификатору(НомерТекСтрокиПодразделения).Значение;
	ПодразделениеПриИзменении();
	//Элементы.ПереченьТСНаЛинии.ТекущаяСтрока = Неопределено;
	//Элементы.ПереченьТСВГараже.ТекущаяСтрока = Неопределено;
	//Элементы.ПереченьТСНетДанных.ТекущаяСтрока = Неопределено;
	//Элементы.ПереченьТСВРемонте.ТекущаяСтрока = Неопределено;
КонецПроцедуры

&НаСервере
Процедура  ЗаполнитьПереченьТСВРемонте(Подразделение)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатРемонтныйЛист.ТС КАК ТС,
		|	уатРемонтныйЛист.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
		|	уатРемонтныйЛист.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	уатРемонтныйЛист.ДатаНачала КАК ДатаНачалаРемонта,
		|	уатРемонтныйЛист.Гараж КАК Гараж
		|ИЗ
		|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаЗапроса, ) КАК уатМестонахождениеТССрезПоследних
		|		ПО уатРемонтныйЛист.ТС = уатМестонахождениеТССрезПоследних.ТС
		|			И (уатМестонахождениеТССрезПоследних.Подразделение = &Подразделение)
		|ГДЕ
		|	уатРемонтныйЛист.ПометкаУдаления = ЛОЖЬ
		|	И уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И уатРемонтныйЛист.Дата >= ДАТАВРЕМЯ(2020, 1, 1, 0, 0, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачалаРемонта
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяДата());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	ПереченьТСВРемонте.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПереченьПодразделений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
		|	СУММА(1) КАК Количество
		|ИЗ
		|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаЗапроса, ) КАК уатМестонахождениеТССрезПоследних
		|ГДЕ
		|	уатМестонахождениеТССрезПоследних.Состояние.ЗапретитьВыпискуПЛ = ЛОЖЬ
		|	И уатМестонахождениеТССрезПоследних.Состояние <> ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.Привлеченный)
		|	И уатМестонахождениеТССрезПоследних.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	уатМестонахождениеТССрезПоследних.Подразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элементы.Подразделение.СписокВыбора.Добавить(Выборка.Подразделение);
	КонецЦикла;
	
	ПереченьПодразделений.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПереченьТСВЭксплуатации(Подразделение)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатМестонахождениеТССрезПоследних.ТС КАК ТС,
		|	уатМестонахождениеТССрезПоследних.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	уатМестонахождениеТССрезПоследних.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	уатМестонахождениеТССрезПоследних.ТС.СистемаМониторинга КАК СистемаМониторинга,
		|	уатМестонахождениеТССрезПоследних.ТС.ИДвСистемеНавигации КАК ИДвСистемеНавигации,
		|	уатМестонахождениеТССрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаЗапроса, ) КАК уатМестонахождениеТССрезПоследних
		|ГДЕ
		|	уатМестонахождениеТССрезПоследних.Подразделение = &Подразделение
		|	И уатМестонахождениеТССрезПоследних.Состояние.ЗапретитьВыпискуПЛ = ЛОЖЬ
		|	И уатМестонахождениеТССрезПоследних.Состояние <> ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.Привлеченный)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГаражныйНомер
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяДата());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицы(Подразделение)
	
	//Очистим все наши таблицы
	ПереченьТСНетДанных.Очистить();
	ПереченьТСВГараже.Очистить();
	ПереченьТСНаЛинии.Очистить();
	
	ДатаСравнения = ТекущаяДата() - 3 * 24 * 60 * 60;
	
	
	// 1 вариант - чтение из файла
	
	Ф = Новый Файл("D:\Temp\out.txt");
	
	Если Не Ф.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВремяБСМТС = Ф.ПолучитьВремяИзменения();

	Текст = Новый ЧтениеТекста("E:\Work\out.txt");
	ResponseText = Текст.Прочитать();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ResponseText);
	ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	// 2 вариант - прямое получение с сервера Автограф
	//ТекстОшибки			 = "";
	//ДанныеЗапроса = Неопределено;
	//КодВозврата = АвтоГРАФ5_GetOnlineInfoAll(СистемаМониторинга, ДанныеЗапроса, ТекстОшибки);
	//Если КодВозврата <> 0 Или ТекстОшибки <> "" Тогда
		//Возврат
	//КонецЕсли;
	
	ТЗ = ЗаполнитьПереченьТСВЭксплуатации(Подразделение);
	
	Для Каждого ХХХ Из ТЗ Цикл
		
		//Сначала проверим, а нет ли этой машинки в ремонте
		
		НайдСтроки = ПереченьТСВРемонте.НайтиСтроки(Новый Структура("ГаражныйНомер", ХХХ.ГаражныйНомер));
		Если НайдСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли; 
   		
		
		//НайденнаяСтрока = ПереченьТСВРемонте.НайтиСтроки(.Найти(ХХХ.ГаражныйНомер, "ГаражныйНомер");
		//Если НайденнаяСтрока <> Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;    		
		
		
		Если ХХХ.СистемаМониторинга = СистемаМониторинга Тогда
			ИДвСистемеНавигации = ХХХ.ИДвСистемеНавигации;
			ТекОбъект = ДанныеЗапроса.Получить(ИДвСистемеНавигации);
			Если ТипЗнч(ТекОбъект) = Тип("Соответствие") Тогда //Данные есть
				ТекущееПоложение = ТекОбъект.Получить("Address");
				ТекущееПоложениеДата = (ПрочитатьДатуJSON(ТекОбъект.Получить("LastData"), ФорматДатыJSON.ISO)) + 60*60*СистемаМониторинга.СдвигЧасовогоПояса;
				Если СтрНайти(ТекущееПоложение,"Индустриальная, 81") > 0 Тогда //ТС на территории гаража
					нСтрока = ПереченьТСВГараже.Добавить();
				Иначе //ТС на выезде
					нСтрока = ПереченьТСНаЛинии.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(нСтрока,ХХХ);
				нСтрока.ТекущееПоложение = ТекущееПоложение;
				нСтрока.ТекущееПоложениеДата = ТекущееПоложениеДата;
			Иначе //Данных нет
				нСтрока = ПереченьТСНетДанных.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока,ХХХ);
			КонецЕсли;	
		Иначе //У ТС нет привязки к БСМТС "Автограф" - ее сразу в таблицу "Нет данных БСМТС"
			нСтрока = ПереченьТСНетДанных.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока,ХХХ);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция АвтоГРАФ5_GetOnlineInfoAll(Знач УчетнаяЗапись, ДанныеЗапроса, ТекстОшибки = "") Экспорт
	
	Token = УчетнаяЗапись.ТокенАвторизации;
	Адрес = УчетнаяЗапись.АдресСервера;
	chemaID = УчетнаяЗапись.Ресурс;

	Если Прав(Адрес, 1) = "/" Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(Адрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(Адрес, 8)) = "https://") Тогда
			Адрес = "http://" + Адрес;
		КонецЕсли;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);

	HTTPОтвет = глСистемыМониторингаСервер.ВыполнитьHTTPЗапрос(Адрес + "/GetOnlineInfoAll?schemaID=" + chemaID + "&finalParams=*", "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		ДанныеЗапроса = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		Возврат 0;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПодразделениеПриИзменении() //Элемент
	ЗаполнитьПереченьТСВРемонте(ЭтаФорма.Подразделение);
	ЗаполнитьТаблицы(ЭтаФорма.Подразделение);
	ЭтаФорма.Элементы.НадписьТСВРемонтеКол.Заголовок = Строка(ПереченьТСВРемонте.Количество());
	ВидимостьЭлементовФормы();
	
	//Элементы.ПереченьТСНаЛинии.ТекущаяСтрока = 0; 
	НомерТекСтрокиНаЛинии = 0;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьЭлементовФормы()
	Для х = 0 По 4 Цикл
		ЭтаФорма.Элементы[Строка("Группа" + х)].Видимость = ( ЭтаФорма.Элементы[Строка("Группа" + х)].Имя = ("Группа" + ПереключательРазделы));
	КонецЦикла;	
	
	ЭтаФорма.Элементы.НадписьТСНаЛинииКол.Заголовок = Строка(ПереченьТСНаЛинии.Количество());
	ЭтаФорма.Элементы.НадписьТСВГаражеСтрКол.Заголовок = Строка(ПереченьТСВГараже.Количество());
	ЭтаФорма.Элементы.НадписьТСВРемонтеКол.Заголовок = Строка(ПереченьТСВРемонте.Количество());
	ЭтаФорма.Элементы.НадписьТСБезДанныхКол.Заголовок = Строка(ПереченьТСНетДанных.Количество());
	
	
	ЭтаФорма.Элементы.НадписьИтогоНаЛинииКол.Заголовок = Строка(ПереченьТСНаЛинии.Количество());
	ЭтаФорма.Элементы.НадписьИтогоВГаражеКол.Заголовок = Строка(ПереченьТСВГараже.Количество());
	ЭтаФорма.Элементы.НадписьИтогоВРемонтеКол.Заголовок = Строка(ПереченьТСВРемонте.Количество());
	ЭтаФорма.Элементы.НадписьИтогоБезБСМТСКол.Заголовок = Строка(ПереченьТСНетДанных.Количество());
	
	
	//Элементы.ПереченьТСНаЛинии.ТекущаяСтрока = Неопределено;
	//Элементы.ПереченьТСВГараже.ТекущаяСтрока = Неопределено;
	//Элементы.ПереченьТСНетДанных.ТекущаяСтрока = Неопределено;
	//Элементы.ПереченьТСВРемонте.ТекущаяСтрока = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРазделыПриИзменении(Элемент)
	ВидимостьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПереченьТСНаЛинииПриАктивизацииСтроки(Элемент)
	//Элементы.ПереченьТСНаЛинии.ВыделенныеСтроки.Очистить();
КонецПроцедуры




