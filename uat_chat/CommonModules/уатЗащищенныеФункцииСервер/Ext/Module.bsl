






Функция ПолучитьДанныеПоТСOmnicomm(ДатаС, ДатаПо, ТС, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	Соединение = Новый COMОбъект("ADODB.Connection");
	СтрокаСоединения = "DRIVER=" + Константы.уатДрайверВСистемеOmnicomm.Получить() + ";Database=" + Константы.уатИмяБДВСистемеOmnicomm.Получить() + ";DataSource=" + Константы.уатСерверВСистемеOmnicomm.Получить() + ";UID=" + Константы.уатЛогинВСистемеOmnicomm.Получить() + ";PWD=" + Константы.уатПарольВСистемеOmnicomm.Получить() + ";";


	Соединение.ConnectionString = СтрокаСоединения;

	Попытка
		Соединение.Open();
	Исключение
		ТекстОшибки = "Невозможно подключиться к базе данных Omnicomm. Проверьте настройки параметров подключения.";
		Возврат 1;
	КонецПопытки;

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("vehicleID");
	ТаблицаСобытий.Колонки.Добавить("eventDate");
	ТаблицаСобытий.Колонки.Добавить("mileage");
	ТаблицаСобытий.Колонки.Добавить("fuelRate");
	ТаблицаСобытий.Колонки.Добавить("engineWork");
	ТаблицаСобытий.Колонки.Добавить("extrasWork");

	Если Соединение.state Тогда
		НаборЗаписей = Новый COMОбъект("ADODB.Recordset");
		НаборЗаписей.CursorType = 3;

		НаборЗаписей.ActiveConnection = Соединение;
		ТекстЗапроса = "SELECT * FROM hourquarters WHERE vehicleID = " + ТС[0].ИдВСистемеНавигации;

		ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);
		ДатаПоЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаПо);

		Попытка
			НаборЗаписей.Open(ТекстЗапроса + " AND eventDate BETWEEN " + ДатаСЗапрос + " AND " + ДатаПоЗапрос);
		Исключение
			ТекстОшибки = "Невозможно рассчитать данные. Проверьте правильность выбранного ТС.";
			Возврат 1;
		КонецПопытки;

		Если НаборЗаписей.BOF И НаборЗаписей.EOF Тогда
			ТекстОшибки = "Невозможно рассчитать данные. Проверьте правильность выбранного ТС и период получения данных.";
			Возврат 1;
		Иначе
			НаборЗаписей.MoveFirst();
			Пока НаборЗаписей.EOF() = 0 Цикл
				НоваяСтрока = ТаблицаСобытий.Добавить();
				НоваяСтрока.vehicleId = НаборЗаписей.Fields("vehicleID").Value;
				НоваяСтрока.eventDate = НаборЗаписей.Fields("eventDate").Value;
				НоваяСтрока.mileage = НаборЗаписей.Fields("mileage").Value / 10;
				Если НаборЗаписей.Fields("fuelRate").Value > 0 Тогда
					НоваяСтрока.fuelRate = НаборЗаписей.Fields("fuelRate").Value / 10;
				КонецЕсли;
				НоваяСтрока.engineWork = НаборЗаписей.Fields("engineWork").Value;
				НоваяСтрока.extrasWork = НаборЗаписей.Fields("extrasWork").Value;

				НаборЗаписей.MoveNext();
			КонецЦикла;
		КонецЕсли;

		НаборЗаписей.Close();
		Соединение.Close();
	КонецЕсли;

	Возврат ТаблицаСобытий;
КонецФункции





Функция ПеревестиДату1СВДатуOmnicomm(Дата) Экспорт
	мДата = Дата - Дата('19700101000000');
	мДата = (мДата * 1000 - 1230768000000) / 1000;
	мДата = Формат(мДата, "ЧГ=0");

	Возврат мДата;
КонецФункции















Функция ДатаВСтроку(СтруктураДаты)
	Если ТипЗнч(СтруктураДаты) = Тип("Структура") Тогда
		Дата1С = СтруктураДаты.Дата;
		Миллисекунда1С = СтруктураДаты.Миллисекунда;
	Иначе
		Дата1С = СтруктураДаты;
		Миллисекунда1С = 0;
	КонецЕсли;

	Если Дата1С = Дата('00010101000000') Тогда
		Результат = "";
	Иначе
		Результат = Формат(Год(Дата1С), "ЧГ=0") + ?(СтрДлина(Строка(Месяц(Дата1С))) < 2, "0" + Строка(Месяц(Дата1С)), Строка(Месяц(Дата1С))) + ?(СтрДлина(Строка(День(Дата1С))) < 2, "0" + Строка(День(Дата1С)), Строка(День(Дата1С))) + " " + ?(СтрДлина(Строка(Час(Дата1С))) < 2, "0" + Строка(Час(Дата1С)), Строка(Час(Дата1С))) + ":" + ?(СтрДлина(Строка(Минута(Дата1С))) < 2, "0" + Строка(Минута(Дата1С)), Строка(Минута(Дата1С))) + ":" + ?(СтрДлина(Строка(Секунда(Дата1С))) < 2, "0" + Строка(Секунда(Дата1С)), Строка(Секунда(Дата1С))) + "." + Строка(Миллисекунда1С);






	КонецЕсли;
	Возврат Результат;
КонецФункции





















































Функция ОтправитьСообщенияSMS4B(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию = "", _ДатаОтправки, _Актуальность = '00010101000000', НачалоПериодаЗапрета = '00010101000000', КонецПериодаЗапрета = '00010101000000', РавномернаяРассылка = Ложь) Экспорт
	КодОшибки = 1;

	КодГруппы = 0;

	КолвоСообщений = СписокСообщений.Количество();

	РазмерПакета = 100;

	ЕстьНеОтправленныеСообщения = Ложь;

	СтруктураДаты = Новый Структура;
	СтруктураДаты.Вставить("Дата", Дата('00010101000000'));
	СтруктураДаты.Вставить("Миллисекунда", 0);


	ДатаОтправкиUTC = _ДатаОтправки;
	АктуальностьUTC = _Актуальность;


	СтруктураДаты.Дата = ДатаОтправкиUTC;
	ДатаОтправки = ДатаВСтроку(СтруктураДаты);

	СтруктураДаты.Дата = АктуальностьUTC;
	Актуальность = ДатаВСтроку(СтруктураДаты);











	СчетчикПакетаСообщений = 0;


	ВебСервис = уатSMS.ПодключитьВебСервисSMS4B();
	Если Не (ВебСервис = Неопределено) Тогда

		Фабрика = ВебСервис.ФабрикаXDTO;
		МассивСообщений = Фабрика.Создать(Фабрика.Тип("SMS client", "ArrayOfGroupSMSList"));
	Иначе
		КодОшибки = - 9;
		Возврат КодОшибки;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(уатSMS.ПолучитьНомерСессии()) Тогда
		уатSMS.Подключиться();
	КонецЕсли;

	КолвоОтправок = 2;
	Для Индекс = 1 По КолвоОтправок Цикл

		ТекущийИндекс = - 1;
		Для каждого Сообщение Из СписокСообщений Цикл
			ТекущийИндекс = ТекущийИндекс + 1;


			Если Сообщение.КодОшибки = 1 Тогда
				Продолжить;
			КонецЕсли;
			СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;


			Кодировка = уатSMS.Использовать7БитСообщение(Сообщение.ТекстСообщения);


			СтрокаМассива = Фабрика.Создать(Фабрика.Тип("SMS client", "GroupSMSList"));
			СтрокаМассива.Установить("B", ?(ЗначениеЗаполнено(Сообщение.ТекстСообщения), уатSMS.СтрокуВШестнадцатеричноеПредставление(Сообщение.ТекстСообщения, Кодировка), ""));
			СтрокаМассива.Установить("D", Сообщение.НомерПолучателя);
			СтрокаМассива.Установить("E", Кодировка);
			СтрокаМассива.Установить("G", Сообщение.GUID);
			МассивСообщений.GroupSMSList.Добавить(СтрокаМассива);


			Если СчетчикПакетаСообщений = РазмерПакета Или СчетчикПакетаСообщений = КолвоСообщений Тогда
				КолвоСообщений = КолвоСообщений - РазмерПакета;

				Если ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию) Тогда
					КодировкаСообщенияШапки = уатSMS.Использовать7БитСообщение(ТекстСообщенияПоУмолчанию);
				Иначе
					КодировкаСообщенияШапки = 0;
				КонецЕсли;


				Попытка
					Cod = ?(КодГруппы = 0, ?(РавномернаяРассылка, - 2, - 1), КодГруппы);


					Bdy = ?(ЗначениеЗаполнено(ТекстСообщенияПоУмолчанию), уатSMS.СтрокуВШестнадцатеричноеПредставление(ТекстСообщенияПоУмолчанию, КодировкаСообщенияШапки), "");




					РезультатОтправки = ВебСервис.GroupSMS(уатSMS.ПолучитьНомерСессии(), Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, , МассивСообщений);
				Исключение


					РезультатОтправки = Неопределено;
				КонецПопытки;

				Если Не (РезультатОтправки = Неопределено) Тогда

					КодОшибки = РезультатОтправки.Result;

					Если КодОшибки >= - 19 И КодОшибки <= - 1 Тогда


						КодОшибкиПодкл = 0;
						Если уатSMS.ПоменятьСерверSMS4B(КодОшибкиПодкл) Тогда
							Возврат - 100000 + КодОшибки;
						КонецЕсли;


						Если КодОшибкиПодкл < 1 Тогда
							Возврат КодОшибкиПодкл;
						Иначе



							Попытка
								РезультатОтправки = ВебСервис.GroupSMS(уатSMS.ПолучитьНомерСессии(), Cod, Строка(НомерОтправителя), КодировкаСообщенияШапки, Bdy, Актуальность, ДатаОтправки, , МассивСообщений);
							Исключение

								РезультатОтправки = Неопределено;
							КонецПопытки;


							Если Не (РезультатОтправки = Неопределено) Тогда
								КодОшибки = РезультатОтправки.Result;
								Если КодОшибки >= - 19 И КодОшибки <= - 1 Тогда
									Если уатSMS.ПоменятьСерверSMS4B(КодОшибкиПодкл) Тогда
										Возврат - 100000 + КодОшибки;
									КонецЕсли;
									Возврат КодОшибки;
								КонецЕсли;
							Иначе
								уатSMS.Подключиться();
								КодОшибки = - 199999;
								Возврат КодОшибки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;


					Если КодОшибки < 0 Тогда

						Для Счетчик = ТекущийИндекс - СчетчикПакетаСообщений + 1 По ТекущийИндекс Цикл
							СписокСообщений[Счетчик].КодОшибки = КодОшибки;
						КонецЦикла;
						Возврат КодОшибки;
					КонецЕсли;


					КодГруппы = РезультатОтправки.Group;


					КолвоОтправленных = РезультатОтправки.List.CheckSMSList.Количество();
					Для Счетчик = 1 По КолвоОтправленных Цикл
						ТекСообщение = СписокСообщений.Получить(ТекущийИндекс - КолвоОтправленных + Счетчик);
						ОтпрСообщение = РезультатОтправки.List.CheckSMSList.Получить(Счетчик - 1);
						Если ТекСообщение.GUID = ОтпрСообщение.G Тогда
							ТекСообщение.КодОшибки = ОтпрСообщение.R;
						КонецЕсли;

						Если ТекСообщение.КодОшибки < 0 Тогда
							ЕстьНеОтправленныеСообщения = Истина;
						КонецЕсли;
					КонецЦикла;


					СчетчикПакетаСообщений = 0;
					МассивСообщений.GroupSMSList.Очистить();
				Иначе

					уатSMS.Подключиться();
					КодОшибки = - 199999;
					Возврат КодОшибки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;


		Если Не ЕстьНеОтправленныеСообщения Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;


	Если КодОшибки > 1 Тогда
		КодОшибки = 1;
	КонецЕсли;

	Возврат КодОшибки;

КонецФункции




















































Функция ОтправитьСообщенияDevinotele(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию = "", _ДатаОтправки, _Актуальность = '00010101000000', НачалоПериодаЗапрета = '00010101000000', КонецПериодаЗапрета = '00010101000000', РавномернаяРассылка = Ложь) Экспорт
	КодОшибки = 1;


	ВебСервис = уатSMS.ПолучитьВебСервисDevinotele();


	СчетчикПакетаСообщений = 0;

	Фабрика = ВебСервис.ФабрикаXDTO;

	SMS_Flash = 0;
	Если Не (ВебСервис = Неопределено) Тогда
		SMSusr = Константы.уатSMSИмяПользователя.Получить();
		SMSpwd = Константы.уатSMSПарольПользователя.Получить();

		Для каждого ТекСообщение Из СписокСообщений Цикл

			Если ЗначениеЗаполнено(ТекСообщение.ТекстСообщения) Тогда
				мТекстСообщения = ТекСообщение.ТекстСообщения;
			Иначе
				мТекстСообщения = ТекстСообщенияПоУмолчанию;
			КонецЕсли;
			ОтправитьОдноСообщениеDevinotele(ВебСервис, SMSusr, SMSpwd, ТекСообщение.НомерПолучателя, НомерОтправителя, SMS_Flash, мТекстСообщения);
		КонецЦикла;
	Иначе

		КодОшибки = - 9;
		Возврат КодОшибки;
	КонецЕсли;


	Если КодОшибки > 1 Тогда
		КодОшибки = 1;
	КонецЕсли;

	Возврат КодОшибки;

КонецФункции


Функция ОтправитьОдноСообщениеDevinotele(SMS_Sys, SMS_User, SMS_Pass, SMS_To, SMS_From, SMS_Flash, SMS_Text)
	Вернуть = "-1";


	Report = 1;
	Time = 10;


	Result = "Err";
	SMS_ID = "-1";


	Попытка
		SMS_Sys.SendTextMessage(SMS_User, SMS_Pass, SMS_To, SMS_Text, SMS_From, Report, SMS_Flash, Time, Result, SMS_ID);
	Исключение

		Возврат Вернуть;
	КонецПопытки;


	Если Result = "OK_Operation_Completed" Тогда

		Вернуть = SMS_ID.ПолучитьСписок("string").Получить(0);



	КонецЕсли;

	Возврат Вернуть;
КонецФункции




















































Функция ОтправитьСообщенияZanzara(СписокСообщений, НомерОтправителя, ТекстСообщенияПоУмолчанию = "", _ДатаОтправки, _Актуальность = '00010101000000', НачалоПериодаЗапрета = '00010101000000', КонецПериодаЗапрета = '00010101000000', РавномернаяРассылка = Ложь) Экспорт
	КодОшибки = 1;

	КодГруппы = 0;

	КолвоСообщений = СписокСообщений.Количество();

	РазмерПакета = 100;

	ЕстьНеОтправленныеСообщения = Ложь;

	СтруктураДаты = Новый Структура;
	СтруктураДаты.Вставить("Дата", Дата('00010101000000'));
	СтруктураДаты.Вставить("Миллисекунда", 0);


	ДатаОтправкиUTC = _ДатаОтправки;
	АктуальностьUTC = _Актуальность;


	СтруктураДаты.Дата = ДатаОтправкиUTC;
	ДатаОтправки = ДатаВСтроку(СтруктураДаты);

	СтруктураДаты.Дата = АктуальностьUTC;
	Актуальность = ДатаВСтроку(СтруктураДаты);


	ВебСервис = уатSMS.ПолучитьВебСервисZanzara();


	СчетчикПакетаСообщений = 0;

	Фабрика = ВебСервис.ФабрикаXDTO;

	Если Не (ВебСервис = Неопределено) Тогда

		smssendtype = Фабрика.Тип("http://www.zanzara.ru/", "sms_send");
		МассивСообщений = Фабрика.Создать(smssendtype);
		Фабрика = ВебСервис.ФабрикаXDTO;
		userinfoType = Фабрика.Тип("http://www.zanzara.ru/", "Z_UserInfo");
		userinfo = Фабрика.Создать(userinfoType);
		userinfo.usr = Константы.уатSMSИмяПользователя.Получить();
		userinfo.pwd = Константы.уатSMSПарольПользователя.Получить();
		МассивСообщений.userinfo = userinfo;
	Иначе
		КодОшибки = - 9;
		Возврат КодОшибки;
	КонецЕсли;


	КолвоОтправок = 2;
	Для Индекс = 1 По КолвоОтправок Цикл

		ТекущийИндекс = - 1;
		Для каждого Сообщение Из СписокСообщений Цикл
			ТекущийИндекс = ТекущийИндекс + 1;


			Если Сообщение.КодОшибки = 1 Тогда
				Продолжить;
			КонецЕсли;
			СчетчикПакетаСообщений = СчетчикПакетаСообщений + 1;

			smstype = Фабрика.Тип("http://www.zanzara.ru/", "Z_sendSms");
			СтрокаМассива = Фабрика.Создать(smstype);
			СтрокаМассива.sms_id = Сообщение.GUID;
			СтрокаМассива.number = Сообщение.НомерПолучателя;
			СтрокаМассива.source_number = Строка(НомерОтправителя);

			СтрокаМассива.message = Сообщение.ТекстСообщения;

			МассивСообщений.sms.add(СтрокаМассива);


			Если СчетчикПакетаСообщений = РазмерПакета Или СчетчикПакетаСообщений = КолвоСообщений Тогда
				КолвоСообщений = КолвоСообщений - РазмерПакета;
				Попытка
					РезультатОтправки = ВебСервис.sms_send(МассивСообщений);
				Исключение
					РезультатОтправки = Неопределено;
				КонецПопытки;

				Если Не (РезультатОтправки = Неопределено) Тогда

					СчетчикПакетаСообщений = 0;
					МассивСообщений.sms.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;


		Если Не ЕстьНеОтправленныеСообщения Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;


	Если КодОшибки > 1 Тогда
		КодОшибки = 1;
	КонецЕсли;

	Возврат КодОшибки;

КонецФункции














Функция ЗагрузитьМестоположениеТСDynafleet(Логин, Пароль, Период, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	ОтветСервера = "";


	Попытка
		xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
	Исключение
		ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
	КонецПопытки;

	АдресСервисаDynafleet = Константы.уатАдресСервисаDynafleet.Получить();

	xmlhttp.open("POST", АдресСервисаDynafleet + "/ports/Login", 0);
	xmlhttp.setRequestHeader("Content-Type", "text/xml");

	СодержимоеЗапроса = "
	|	<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <typ:login>
	|         <Api_LoginLoginTO_1>
	|            <gmtOffset>
	|               <value>2</value>
	|            </gmtOffset>
	|            <password>" + Пароль + "</password>
	|            <username>" + Логин + "</username>
	|         </Api_LoginLoginTO_1>
	|      </typ:login>
	|   </soapenv:Body>
	|</soapenv:Envelope>";

	Попытка
		xmlhttp.send(СодержимоеЗапроса);
	Исключение
		ОтветСервера = ОписаниеОшибки();
	КонецПопытки;

	Если xmlhttp.status = 200 Тогда

		НоваяСтрока = Новый ЧтениеXML;
		НоваяСтрока.УстановитьСтроку(xmlhttp.responseText);
		Пока НоваяСтрока.Прочитать() Цикл
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "id" Тогда
				НоваяСтрока.Прочитать();
				ИдентификаторСессии = НоваяСтрока.Значение;
			КонецЕсли;
		КонецЦикла;


		Попытка
			xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
		Исключение
			ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
		КонецПопытки;

		xmlhttp.open("POST", АдресСервисаDynafleet + "/ports/Notification", 0);
		xmlhttp.setRequestHeader("Content-Type", "text/xml");

		СодержимоеЗапроса = "
		|		<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
		|   <soapenv:Header/>
		|  <soapenv:Body>
		|      <typ:checkNotificationFlags>
		|    <Api_SessionId_1>
		|        <id>" + ИдентификаторСессии + "</id>
		|      </Api_SessionId_1>
		|    </typ:checkNotificationFlags>
		|  </soapenv:Body>
		|</soapenv:Envelope>";

		Попытка
			xmlhttp.send(СодержимоеЗапроса);
		Исключение
			ОтветСервера = ОписаниеОшибки();
		КонецПопытки;

		Если xmlhttp.status = 200 Тогда

			НоваяСтрока = Новый ЧтениеXML;
			НоваяСтрока.УстановитьСтроку(xmlhttp.responseText);

			Пока НоваяСтрока.Прочитать() Цикл
				Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "newTrackingData" Тогда
					НоваяСтрока.Прочитать();
					ЕстьНовыеДанные = НоваяСтрока.Значение;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

		Если ЕстьНовыеДанные = "true" Тогда


			Попытка
				xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
			Исключение
				ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
			КонецПопытки;

			xmlhttp.open("POST", АдресСервисаDynafleet + "/ports/Tracking", 0);
			xmlhttp.setRequestHeader("Content-Type", "text/xml");

			СодержимоеЗапроса = "
			|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
			|<soapenv:Header/>
			|<soapenv:Body>
			|<typ:getNewTrackingDataV2>
			|<Api_SessionId_1>
			|<id>" + ИдентификаторСессии + "</id>
			|</Api_SessionId_1>
			|</typ:getNewTrackingDataV2>
			|</soapenv:Body>
			|</soapenv:Envelope>";

			Попытка
				xmlhttp.send(СодержимоеЗапроса);
			Исключение
				ОтветСервера = ОписаниеОшибки();
			КонецПопытки;

			Если xmlhttp.status = 200 Тогда

				ТЗ = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей().Выгрузить();
				ТЗ.Очистить();

				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Строка"));
				ПараметрыСтроки = Новый КвалификаторыСтроки(100);

				ДопустимыйТип = Новый ОписаниеТипов(МассивТипов, Неопределено, ПараметрыСтроки);

				ТЗ.Колонки.Добавить("ТСид", ДопустимыйТип);

				НоваяСтрока = Новый ЧтениеXML;
				НоваяСтрока.УстановитьСтроку(xmlhttp.responseText);

				Пока НоваяСтрока.Прочитать() Цикл
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "accumulatedFuelConsumption" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение = ТЗ.Добавить();
						СтрокаМестоположение.ЗначениеДатчика3 = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "currentFuelLevel" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.ЗначениеДатчика2 = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "latitude" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.Лат = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "longitude" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.Лон = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "momentaneousVehicleSpeed" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.Скорость = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "odometer" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.ЗначениеДатчика1 = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "vehicleId" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.ТСид = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "timestamp" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						сДата = НоваяСтрока.Значение;
						СтрокаМестоположение.Период = ИзСтрокиW3CВДату(сДата);
					КонецЕсли;

				КонецЦикла;

				Если ТЗ.Количество() Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ТЗ.ТСид КАК ТСид,
					|	ТЗ.Период,
					|	ТЗ.Лат,
					|	ТЗ.Лон,
					|	ТЗ.Скорость,
					|	ТЗ.ЗначениеДатчика1,
					|	ТЗ.ЗначениеДатчика2,
					|	ТЗ.ЗначениеДатчика3
					|ПОМЕСТИТЬ ТЗн
					|ИЗ
					|	&ТЗ КАК ТЗ
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	уатТС.Ссылка
					|ИЗ
					|	ТЗн КАК ТЗн
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
					|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
					|ГДЕ
					|	уатТС.Ссылка ЕСТЬ NULL 
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТЗн.Период КАК Период,
					|	ТЗн.Лат,
					|	ТЗн.Лон,
					|	ТЗн.Скорость,
					|	ТЗн.ЗначениеДатчика1,
					|	ТЗн.ЗначениеДатчика2,
					|	ТЗн.ЗначениеДатчика3,
					|	уатТС.Ссылка КАК ТС
					|ИЗ
					|	ТЗн КАК ТЗн
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
					|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
					|
					|УПОРЯДОЧИТЬ ПО
					|	Период
					|ИТОГИ ПО
					|	ТС";

					Запрос.УстановитьПараметр("ТЗ", ТЗ);

					ВремТЗ = Запрос.ВыполнитьПакет()[1].Выгрузить();
					Если ВремТЗ.Количество() > 0 Тогда
						СтрокаДаты = Строка(ТекущаяДата());
						СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
						СтрокаДаты = СтрЗаменить(СтрокаДаты, ":", "");
						СтрокаДаты = СтрЗаменить(СтрокаДаты, ".", "");
						ВременныйКаталог = КаталогВременныхФайлов() + "DynafleetData" + СтрокаДаты + Строка(Новый УникальныйИдентификатор) + ".xml";

						XMLФайл = Новый ТекстовыйДокумент;
						XMLФайл.УстановитьТекст(xmlhttp.responseText);
						XMLФайл.Записать(ВременныйКаталог);

						ТекстСообщения = "В ходе загрузки получены данные для ТС, идентификатор которых не совпадает ни с одним из имеющихся в справочнике ""ТС"".
						|Эта информация не будет загружена в систему.
						|Файл с данными для последующей загрузки сохранен в " + ВременныйКаталог;

						ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
					КонецЕсли;

					ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ВыборкаТС.Следующий() Цикл
						НаборЗаписей = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей();
						ПредДата = 0;
						Выборка = ВыборкаТС.Выбрать();
						Пока Выборка.Следующий() Цикл
							Если ПредДата = 0 Или Выборка.Период - (ПредДата + Период * 60) > 0 Тогда

								Запись = НаборЗаписей.Добавить();
								Запись.Период = Выборка.Период;
								Запись.ТС = Выборка.ТС;
								Запись.Лат = Выборка.Лат;
								Запись.Лон = Выборка.Лон;
								Запись.Скорость = Выборка.Скорость;
								Запись.ЗначениеДатчика1 = Выборка.ЗначениеДатчика1;
								Запись.ЗначениеДатчика2 = Выборка.ЗначениеДатчика2;
								Запись.ЗначениеДатчика3 = Выборка.ЗначениеДатчика3;

								ПредДата = Выборка.Период;
							Иначе
								Продолжить;
							КонецЕсли;

						КонецЦикла;

						Попытка
							НаборЗаписей.Записать(Ложь);
						Исключение

						КонецПопытки;

					КонецЦикла;
				Иначе

					ТекстОшибки = "Нет новых данных.";
					Возврат 1;
				КонецЕсли;

			КонецЕсли;
		Иначе

			ТекстОшибки = "С момента последнего вызова не появилось новых данных.";
			Возврат 1;
		КонецЕсли;


		Попытка
			xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
		Исключение
			ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
		КонецПопытки;

		xmlhttp.open("POST", АдресСервисаDynafleet + "/ports/Login", 0);
		xmlhttp.setRequestHeader("Content-Type", "text/xml");

		СодержимоеЗапроса = "
		|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <typ:logout>
		|         <Api_SessionId_1>
		|            <id>" + ИдентификаторСессии + "</id>
		|         </Api_SessionId_1>
		|      </typ:logout>
		|   </soapenv:Body>
		|</soapenv:Envelope>";

		Попытка
			xmlhttp.send(СодержимоеЗапроса);
		Исключение
			ОтветСервера = ОписаниеОшибки();
		КонецПопытки;

		Если Не (xmlhttp.status = 200) Тогда
			ТекстОшибки = "На сервере произошла ошибка. Возможно передан неправильный идентификатор сессии";
			Возврат 1;
		КонецЕсли;
	Иначе

		ТекстОшибки = "На сервере произошла ошибка авторизации. Возможно неправильно введен логин и пароль";
		Возврат 1;
	КонецЕсли;

	Возврат 0;
КонецФункции






Функция ИзСтрокиW3CВДату(Дата)
	мГод = Лев(Дата, 4);
	мМесяц = Сред(Дата, 6, 2);
	мДень = Сред(Дата, 9, 2);
	мЧас = Сред(Дата, 12, 2);
	мМинута = Сред(Дата, 15, 2);
	мСекунда = Сред(Дата, 18, 2);

	мДата = Дата(мГод, мМесяц, мДень, мЧас, мМинута, мСекунда);

	Возврат мДата;

КонецФункции








Функция ЗагрузитьМестоположениеТСизФайла(Период, ПутьФайла, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	Перем ТЗ;
	ТЗ = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей().Выгрузить();
	ТЗ.Очистить();

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(100);

	ДопустимыйТип = Новый ОписаниеТипов(МассивТипов, Неопределено, ПараметрыСтроки);

	ТЗ.Колонки.Добавить("ТСид", ДопустимыйТип);

	Попытка
		НоваяСтрока = Новый ЧтениеXML;
		НоваяСтрока.ОткрытьФайл(ПутьФайла);

		Пока НоваяСтрока.Прочитать() Цикл
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "accumulatedFuelConsumption" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение = ТЗ.Добавить();
				СтрокаМестоположение.ЗначениеДатчика3 = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "currentFuelLevel" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.ЗначениеДатчика2 = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "latitude" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.Лат = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "longitude" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.Лон = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "momentaneousVehicleSpeed" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.Скорость = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "odometer" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.ЗначениеДатчика1 = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "vehicleId" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.ТСид = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "timestamp" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				сДата = НоваяСтрока.Значение;
				СтрокаМестоположение.Период = ИзСтрокиW3CВДату(сДата);
			КонецЕсли;

		КонецЦикла;

		Если ТЗ.Количество() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ТЗ.ТСид КАК ТСид,
			|	ТЗ.Период,
			|	ТЗ.Лат,
			|	ТЗ.Лон,
			|	ТЗ.Скорость,
			|	ТЗ.ЗначениеДатчика1,
			|	ТЗ.ЗначениеДатчика2,
			|	ТЗ.ЗначениеДатчика3
			|ПОМЕСТИТЬ ТЗн
			|ИЗ
			|	&ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	уатТС.Ссылка
			|ИЗ
			|	ТЗн КАК ТЗн
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
			|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
			|ГДЕ
			|	уатТС.Ссылка ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТЗн.Период КАК Период,
			|	ТЗн.Лат,
			|	ТЗн.Лон,
			|	ТЗн.Скорость,
			|	ТЗн.ЗначениеДатчика1,
			|	ТЗн.ЗначениеДатчика2,
			|	ТЗн.ЗначениеДатчика3,
			|	уатТС.Ссылка КАК ТС
			|ИЗ
			|	ТЗн КАК ТЗн
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
			|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ ПО
			|	ТС";

			Запрос.УстановитьПараметр("ТЗ", ТЗ);

			ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаТС.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей();
				ПредДата = 0;
				Выборка = ВыборкаТС.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ПредДата = 0 Или Выборка.Период - (ПредДата + Период * 60) > 0 Тогда

						Запись = НаборЗаписей.Добавить();
						Запись.Период = Выборка.Период;
						Запись.ТС = Выборка.ТС;
						Запись.Лат = Выборка.Лат;
						Запись.Лон = Выборка.Лон;
						Запись.Скорость = Выборка.Скорость;
						Запись.ЗначениеДатчика1 = Выборка.ЗначениеДатчика1;
						Запись.ЗначениеДатчика2 = Выборка.ЗначениеДатчика2;
						Запись.ЗначениеДатчика3 = Выборка.ЗначениеДатчика3;

						ПредДата = Выборка.Период;
					Иначе
						Продолжить;
					КонецЕсли;

				КонецЦикла;

				Попытка
					НаборЗаписей.Записать(Ложь);
				Исключение

				КонецПопытки;

			КонецЦикла;
		Иначе

			ТекстОшибки = "Нет новых данных.";
			Возврат 1;
		КонецЕсли;
	Исключение
		ТекстОшибки = "Загружен некорректный файл.";
		Возврат 1;
	КонецПопытки;

	Возврат 0;
КонецФункции





Функция ПеревестиДатуOmnicommВДату1С(Дата) Экспорт
	мДата = (Дата * 1000 + 1230768000000) / 1000;
	мДата = Дата('19700101000000') + мДата;

	Возврат мДата;
КонецФункции













Функция ЗагрузитьМестоположениеТСOmnicommВРегистр(Логин, Пароль, Сервер, ИмяБД, Драйвер, ИмяPIPE, ИмяDSN, СпособПодключения, ДатаС, ДатаПо, ТС, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	Соединение = Новый COMОбъект("ADODB.Connection");

	Если СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.СтандартноеПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Database=" + ИмяБД + ";DataSource=" + Сервер + ";UID=" + Логин + ";PWD=" + Пароль + ";";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.PIPEПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Server=" + Сервер + ";Socket=" + ИмяPIPE + ";Database=" + ИмяБД + ";UID=" + Логин + ";PWD=" + Пароль + ";OPTION=3;";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.DSNПодключение Тогда
		СтрокаСоединения = "DSN=" + ИмяDSN;
	Иначе
		ТекстОшибки = "Необходимо указать способ подключения к системе Omnicomm.";
		Возврат 1;
	КонецЕсли;

	Соединение.ConnectionString = СтрокаСоединения;

	Попытка
		Соединение.Open();
	Исключение
		ТекстОшибки = "Невозможно подключиться к базе. Проверьте корректность параметров подключения.";
		Возврат 1;
	КонецПопытки;

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("vehicleID");
	ТаблицаСобытий.Колонки.Добавить("eventDate");
	ТаблицаСобытий.Колонки.Добавить("mileage");
	ТаблицаСобытий.Колонки.Добавить("fuelRate");
	ТаблицаСобытий.Колонки.Добавить("engineWork");
	ТаблицаСобытий.Колонки.Добавить("extrasWork");
	ТаблицаСобытий.Колонки.Добавить("fuelVolume");

	Если Соединение.state Тогда
		НаборЗаписей = Новый COMОбъект("ADODB.Recordset");
		НаборЗаписей.CursorType = 3;

		НаборЗаписей.ActiveConnection = Соединение;
		ТекстЗапроса = "SELECT * FROM hourquarters";

		Если ТС.Количество() = 1 Тогда
			ТСВЗапрос = " WHERE vehicleID = " + ТС[0].ИдВСистемеНавигации;
		Иначе

			ТСМассив = ТС.ВыгрузитьКолонку("ИдВСистемеНавигации");
			СтрокаТС = "";
			Для каждого ЭлементМассива Из ТСМассив Цикл
				СтрокаТС = СтрокаТС + ЭлементМассива + ", ";
			КонецЦикла;
			СтрокаТС = Лев(СтрокаТС, СтрДлина(СтрокаТС) - 2);

			ТСВЗапрос = " WHERE vehicleID IN (" + СтрокаТС + ")";

		КонецЕсли;

		Если ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);
			ДатаПоЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаПо);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + " AND eventDate BETWEEN " + ДатаСЗапрос + " AND " + ДатаПоЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли ЗначениеЗаполнено(ДатаС) И Не ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + " AND eventDate >= " + ДатаСЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли Не ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + " AND eventDate <= " + ДатаСЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;
		Иначе


			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		КонецЕсли;

		Если НаборЗаписей.BOF И НаборЗаписей.EOF Тогда
			ТекстОшибки = "Невозможно рассчитать данные. Проверьте правильность выбранного ТС и период получения данных.";
			Возврат 1;
		Иначе
			НаборЗаписей.MoveFirst();
			Пока НаборЗаписей.EOF() = 0 Цикл
				НоваяСтрока = ТаблицаСобытий.Добавить();
				НоваяСтрока.vehicleId = НаборЗаписей.Fields("vehicleID").Value;
				НоваяСтрока.eventDate = НаборЗаписей.Fields("eventDate").Value;
				НоваяСтрока.mileage = НаборЗаписей.Fields("mileage").Value;
				НоваяСтрока.fuelRate = НаборЗаписей.Fields("fuelRate").Value;
				НоваяСтрока.engineWork = НаборЗаписей.Fields("engineWork").Value;
				НоваяСтрока.extrasWork = НаборЗаписей.Fields("extrasWork").Value;
				НоваяСтрока.fuelVolume = НаборЗаписей.Fields("fuelVolume").Value;

				НаборЗаписей.MoveNext();
			КонецЦикла;
		КонецЕсли;

		НаборЗаписей.Close();
		Соединение.Close();
	КонецЕсли;

	Если Не ТаблицаСобытий.Количество() Тогда
		ТекстОшибки = "Нет новых данных.";
		Возврат 1;
	Иначе

		Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

			МенеджерЗаписи = РегистрыСведений.уатМестоположениеGPS.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ПеревестиДатуOmnicommВДату1С(СтрокаТаблицы.eventDate);
			НайденноеТС = Справочники.уатТС.НайтиПоРеквизиту("ИДвСистемеНавигации", Формат(СтрокаТаблицы.vehicleID, "ЧГ=0"));
			МенеджерЗаписи.ТС = НайденноеТС;
			МенеджерЗаписи.ЗначениеДатчика1 = СтрокаТаблицы.mileage / 10;
			Если СтрокаТаблицы.fuelRate <> - 1 И СтрокаТаблицы.fuelRate <> 0 Тогда
				МенеджерЗаписи.ЗначениеДатчика3 = СтрокаТаблицы.fuelRate / 10;
			КонецЕсли;
			Если СтрокаТаблицы.fuelVolume <> - 1 И СтрокаТаблицы.fuelVolume <> 0 Тогда
				МенеджерЗаписи.ЗначениеДатчика4 = СтрокаТаблицы.fuelVolume / 10;
			КонецЕсли;

			Если МенеджерЗаписи.ЗначениеДатчика1 = 0 И МенеджерЗаписи.ЗначениеДатчика3 = 0 Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;

			Попытка
				МенеджерЗаписи.Записать();
			Исключение

			КонецПопытки;

		КонецЦикла;

	КонецЕсли;

	Возврат 0;
КонецФункции













Функция ЗагрузитьДополнительныеСведенияТСOmnicommВРегистр(Логин, Пароль, Сервер, ИмяБД, Драйвер, ИмяPIPE, ИмяDSN, СпособПодключения, ДатаС, ДатаПо, ТС, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	Соединение = Новый COMОбъект("ADODB.Connection");

	Если СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.СтандартноеПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Database=" + ИмяБД + ";DataSource=" + Сервер + ";UID=" + Логин + ";PWD=" + Пароль + ";";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.PIPEПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Server=" + Сервер + ";Socket=" + ИмяPIPE + ";Database=" + ИмяБД + ";UID=" + Логин + ";PWD=" + Пароль + ";OPTION=3;";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.DSNПодключение Тогда
		СтрокаСоединения = "DSN=" + ИмяDSN;
	Иначе
		ТекстОшибки = "Необходимо указать способ подключения к системе Omnicomm.";
		Возврат 1;
	КонецЕсли;

	Соединение.ConnectionString = СтрокаСоединения;

	Попытка
		Соединение.Open();
	Исключение
		ТекстОшибки = "Невозможно подключиться к базе. Проверьте корректность параметров подключения.";
		Возврат 1;
	КонецПопытки;

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("vehicleID");
	ТаблицаСобытий.Колонки.Добавить("eventDate");
	ТаблицаСобытий.Колонки.Добавить("eventTypeID");
	ТаблицаСобытий.Колонки.Добавить("volume");
	ТаблицаСобытий.Колонки.Добавить("driverCode");
	ТаблицаСобытий.Колонки.Добавить("eventDuration");
	ТаблицаСобытий.Колонки.Добавить("eventParameter");
	ТаблицаСобытий.Колонки.Добавить("limitValue");
	ТаблицаСобытий.Колонки.Добавить("address");

	Если Соединение.state Тогда
		НаборЗаписей = Новый COMОбъект("ADODB.Recordset");
		НаборЗаписей.CursorType = 3;

		НаборЗаписей.ActiveConnection = Соединение;
		ТекстЗапроса = "SELECT * FROM events";

		Если ТС.Количество() = 1 Тогда
			ТСВЗапрос = " WHERE vehicleID = " + ТС[0].ИдВСистемеНавигации;
		Иначе

			ТСМассив = ТС.ВыгрузитьКолонку("ИдВСистемеНавигации");
			СтрокаТС = "";
			Для каждого ЭлементМассива Из ТСМассив Цикл
				СтрокаТС = СтрокаТС + ЭлементМассива + ", ";
			КонецЦикла;
			СтрокаТС = Лев(СтрокаТС, СтрДлина(СтрокаТС) - 2);

			ТСВЗапрос = " WHERE vehicleID IN (" + СтрокаТС + ")";

		КонецЕсли;

		УсловиеСобытийВЗапрос = " AND eventTypeID IN (1,3,12,14,24)";

		Если ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);
			ДатаПоЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаПо);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " AND eventDate BETWEEN " + ДатаСЗапрос + " AND " + ДатаПоЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли ЗначениеЗаполнено(ДатаС) И Не ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " AND eventDate >= " + ДатаСЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли Не ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " AND eventDate <= " + ДатаСЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;
		Иначе


			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		КонецЕсли;

		Если НаборЗаписей.BOF И НаборЗаписей.EOF Тогда
			ТекстОшибки = "Невозможно рассчитать данные. Проверьте правильность выбранного ТС и период получения данных.";
			Возврат 1;
		Иначе
			НаборЗаписей.MoveFirst();
			Пока НаборЗаписей.EOF() = 0 Цикл
				НоваяСтрока = ТаблицаСобытий.Добавить();
				НоваяСтрока.vehicleId = НаборЗаписей.Fields("vehicleID").Value;
				НоваяСтрока.eventDate = НаборЗаписей.Fields("eventDate").Value;
				НоваяСтрока.eventTypeID = НаборЗаписей.Fields("eventTypeID").Value;
				НоваяСтрока.volume = НаборЗаписей.Fields("volume").Value;
				НоваяСтрока.driverCode = НаборЗаписей.Fields("driverCode").Value;
				НоваяСтрока.eventDuration = НаборЗаписей.Fields("eventDuration").Value;
				НоваяСтрока.eventParameter = НаборЗаписей.Fields("eventParameter").Value;
				НоваяСтрока.limitValue = НаборЗаписей.Fields("limitValue").Value;
				НоваяСтрока.address = НаборЗаписей.Fields("address").Value;

				НаборЗаписей.MoveNext();
			КонецЦикла;
		КонецЕсли;

		НаборЗаписей.Close();
		Соединение.Close();
	КонецЕсли;

	Если Не ТаблицаСобытий.Количество() Тогда
		ТекстОшибки = "Нет новых данных.";
		Возврат 1;
	Иначе

		Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

			МенеджерЗаписи = РегистрыСведений.уатДополнительныеСведенияПоOmnicomm.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ПеревестиДатуOmnicommВДату1С(СтрокаТаблицы.eventDate);
			НайденноеТС = Справочники.уатТС.НайтиПоРеквизиту("ИДвСистемеНавигации", Формат(СтрокаТаблицы.vehicleID, "ЧГ=0"));
			МенеджерЗаписи.ТС = НайденноеТС;

			Если СтрокаТаблицы.eventTypeID = 1 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.ЗаправкаГСМ;
				МенеджерЗаписи.Значение = СтрокаТаблицы.volume / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 3 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.СливГСМ;
				МенеджерЗаписи.Значение = СтрокаТаблицы.volume / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 12 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.МгновенноеПревышениеСкорости;
				МенеджерЗаписи.ДлительностьСобытия = СтрокаТаблицы.eventDuration;
				МенеджерЗаписи.Значение = СтрокаТаблицы.eventParameter / 10;
				МенеджерЗаписи.ПредельноеЗначение = СтрокаТаблицы.limitValue / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 14 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.ДлительноеПревышениеСкорости;
				МенеджерЗаписи.ДлительностьСобытия = СтрокаТаблицы.eventDuration;
				МенеджерЗаписи.Значение = СтрокаТаблицы.eventParameter / 10;
				МенеджерЗаписи.ПредельноеЗначение = СтрокаТаблицы.limitValue / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 24 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.НарушениеПредельныхЗначенийДатчиков;
			КонецЕсли;

			Попытка
				МенеджерЗаписи.Записать();
			Исключение

			КонецПопытки;

		КонецЦикла;

	КонецЕсли;

	Возврат 0;
КонецФункции















Функция СложитьВремя(Знач Время1, Знач Время2) Экспорт
	Если ТипЗнч(Время1) = Тип("Число") И ТипЗнч(Время2) = Тип("Число") Тогда
		час1 = Цел(Время1);
		час2 = Цел(Время2);
		мЧас = час1 + час2;
		мин = (Время1 - час1 + (Время2 - час2)) * 100;
		допЧас = Цел(мин / 60);
		мЧас = мЧас + допЧас;
		мин = (мин - допЧас * 60) / 100;
		Возврат мЧас + мин;
	ИначеЕсли ТипЗнч(Время1) = Тип("Дата") И ТипЗнч(Время2) = Тип("Дата") Тогда
		Возврат Время1 + Час(Время2) * 60 * 60 + Минута(Время2) * 60 + Секунда(Время2);
	Иначе
		Если ТипЗнч(Время1) = Тип("Число") Тогда
			мВремя1 = Время2;
			мВремя2 = Время1;
		Иначе
			мВремя1 = Время1;
			мВремя2 = Время2;
		КонецЕсли;
		мВремя = Дата('00010101010101');
		мВремя = мВремя1 + Цел(мВремя2) * 60 * 60 + (Время2 - Цел(Время2)) * 100 * 60;
		Если ТипЗнч(Время1) = Тип("Число") Тогда
			Возврат Час(мВремя) + Минута(мВремя) / 100;
		Иначе
			Возврат мВремя;
		КонецЕсли;
	КонецЕсли;

КонецФункции




