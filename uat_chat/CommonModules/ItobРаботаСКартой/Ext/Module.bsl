// Возвращает ближайший заданным координатам объект из классификатора карты
//
Функция ОпределитьБлижайшийОбъектНаКарте(Широта, Долгота) Экспорт
	
	ТочностьОкругленияКоординат = 4;
	МаксимальноеРасстояниеДоТочки = 100; // В метрах
	
	//Поиск вхождения в геозоны
	Геозона = ОпределениеВхожденияВГеозоны(Широта, Долгота);
	Если Не Геозона = Неопределено Тогда
		Возврат Геозона
	КонецЕсли;
	
	// Поиск в кэше
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Окр(Широта, ТочностьОкругленияКоординат));
	Запрос.УстановитьПараметр("Долгота", Окр(Долгота, ТочностьОкругленияКоординат));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическийКлассификатор.Представление
	               |ИЗ
	               |	РегистрСведений.ItobКэшГеокодера КАК ItobКэшГеокодера
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobГеографическийКлассификатор КАК ItobГеографическийКлассификатор
	               |		ПО (ItobКэшГеокодера.ГеоКладрШирота = ItobГеографическийКлассификатор.Широта
	               |				И ItobКэшГеокодера.ГеоКладрДолгота = ItobГеографическийКлассификатор.Долгота
	               |				И ItobКэшГеокодера.ГеоКладрТочность = ItobГеографическийКлассификатор.Точность)
	               |ГДЕ
	               |	ItobКэшГеокодера.Широта = &Широта
	               |	И ItobКэшГеокодера.Долгота = &Долгота";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат	Выборка.Представление;	
	
	КонецЕсли;
	
	// Поиск в гео классификаторе	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Окр(Широта, ТочностьОкругленияКоординат));
	Запрос.УстановитьПараметр("Долгота", Окр(Долгота, ТочностьОкругленияКоординат));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическийКлассификатор.Широта,
	               |	ItobГеографическийКлассификатор.Долгота,
	               |	ItobГеографическийКлассификатор.Точность КАК Точность,
	               |	ItobГеографическийКлассификатор.Представление,
	               |	ВЫРАЗИТЬ(1000000 * ВложенныйЗапрос.Расстояние КАК ЧИСЛО(15, 2)) КАК Расстояние,
	               |	ItobГеографическийКлассификатор.ГеоРамкаСевер,
	               |	ItobГеографическийКлассификатор.ГеоРамкаЮг,
	               |	ItobГеографическийКлассификатор.ГеоРамкаЗапад
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ItobГеографическийКлассификатор.Точность КАК Точность,
	               |		МИНИМУМ((ItobГеографическийКлассификатор.Широта - &Широта) * (ItobГеографическийКлассификатор.Широта - &Широта) + (ItobГеографическийКлассификатор.Долгота - &Долгота) * (ItobГеографическийКлассификатор.Долгота - &Долгота)) КАК Расстояние
	               |	ИЗ
	               |		РегистрСведений.ItobГеографическийКлассификатор КАК ItobГеографическийКлассификатор
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ItobГеографическийКлассификатор.Точность) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobГеографическийКлассификатор КАК ItobГеографическийКлассификатор
	               |		ПО ВложенныйЗапрос.Точность = ItobГеографическийКлассификатор.Точность
	               |			И (ВложенныйЗапрос.Расстояние = (ItobГеографическийКлассификатор.Широта - &Широта) * (ItobГеографическийКлассификатор.Широта - &Широта) + (ItobГеографическийКлассификатор.Долгота - &Долгота) * (ItobГеографическийКлассификатор.Долгота - &Долгота))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Точность УБЫВ,
	               |	Расстояние";
				   
	СервисОбратногоГеокодирования = Константы.ItobСервисОбратногоГеокодирования.Получить();	   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Расстояние = 0 Тогда
			Возврат	Выборка.Представление;
			
		КонецЕсли;
		
		Расстояние = ItobОперативныйМониторинг.ПолучитьРасстояниеМеждуТочками(Широта,Долгота,Выборка.Широта,Выборка.Долгота);
			
		Если Расстояние <= МаксимальноеРасстояниеДоТочки Тогда
			Возврат	Выборка.Представление;
			
		КонецЕсли;
		
		Если СервисОбратногоГеокодирования = ПредопределенноеЗначение("Перечисление.ItobСервисыГеокодирования.Локальный") Тогда
			Если Расстояние <= 25000 Тогда
				Возврат ""+Окр(Расстояние/1000,1)+"км от "+Выборка.Представление;			
			
			КонецЕсли;			
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если СервисОбратногоГеокодирования = ПредопределенноеЗначение("Перечисление.ItobСервисыГеокодирования.Локальный") Тогда
		Возврат "";						
				
	КонецЕсли;
	
	// Адрес в кэше не найден, обращаемся к геокодеру
	Если СервисОбратногоГеокодирования = ПредопределенноеЗначение("Перечисление.ItobСервисыГеокодирования.NominatimMapquest") Тогда
		ОбработчикДанных = Обработки.ItobРаботаССервисомNominatim.Создать();
		ОбработчикДанных.АдресСервера = "http://open.mapquestapi.com/nominatim/v1/";
		
	ИначеЕсли СервисОбратногоГеокодирования = ПредопределенноеЗначение("Перечисление.ItobСервисыГеокодирования.NominatimOSM") Тогда
		ОбработчикДанных = Обработки.ItobРаботаССервисомNominatim.Создать();
		ОбработчикДанных.АдресСервера = "http://nominatim.openstreetmap.org/";
		
	Иначе
		Возврат "Не задан сервис обратного геокодирования";
	
	КонецЕсли;	
	
	Страница = ОбработчикДанных.ОбратноеГеокодированиеПолучитьАдресСтраницы(Широта, Долгота);
	
	ИмяФайла = КаталогВременныхФайлов()+"geocoder-result-"+Строка(Новый УникальныйИдентификатор())+".xml";
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ИмяФайла);
	
	РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Страница, ПараметрыПолучения);
	Если НЕ РезультатСкачивания.Статус Тогда
		Сообщить("Ошибка получения файла на сервере "+Страница);
		Возврат "";	
	
	КонецЕсли;
			
	Попытка
		ТаблицаРезультат = ОбработчикДанных.ОбратноеГеокодированиеРазобратьФайлОтвета(ИмяФайла);		
	Исключение
		Сообщить("Ошибка обработки файла ответа геокодера: "+ОписаниеОшибки());
		Возврат "";
	
	КонецПопытки;	
	
	УдалитьФайлы(ИмяФайла);	
	
	Если ТаблицаРезультат = Неопределено Тогда
		Возврат "";	
	КонецЕсли;
			
	Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		
		Если СтрокаРезультат.Широта = 0 ИЛИ СтрокаРезультат.Долгота = 0 Тогда
			Продолжить;
		
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Страна", СтрокаРезультат.Страна);		
		СтруктураАдреса.Вставить("Индекс", СтрокаРезультат.Индекс);		
		СтруктураАдреса.Вставить("Регион", СтрокаРезультат.Регион);
		СтруктураАдреса.Вставить("Район",  СтрокаРезультат.Район);
		СтруктураАдреса.Вставить("Город",  СтрокаРезультат.Город);
		СтруктураАдреса.Вставить("НаселенныйПункт", СтрокаРезультат.НаселенныйПункт);
		СтруктураАдреса.Вставить("Улица",  СтрокаРезультат.Улица);
		СтруктураАдреса.Вставить("Дом",    СтрокаРезультат.Дом);
		СтруктураАдреса.Вставить("Корпус", СтрокаРезультат.Корпус);
		СтруктураАдреса.Вставить("Квартира","");		
		
		НовЗапись = РегистрыСведений.ItobГеографическийКлассификатор.СоздатьМенеджерЗаписи();
		НовЗапись.Широта   = СтрокаРезультат.Широта;
		НовЗапись.Долгота  = СтрокаРезультат.Долгота;
		НовЗапись.Точность = СтрокаРезультат.Точность;
		НовЗапись.Представление = СтрокаРезультат.Представление;		
		НовЗапись.ГеоРамкаСевер  = СтрокаРезультат.ГеоРамкаСевер;
		НовЗапись.ГеоРамкаЮг     = СтрокаРезультат.ГеоРамкаЮг;
		НовЗапись.ГеоРамкаЗапад  = СтрокаРезультат.ГеоРамкаЗапад;
		НовЗапись.ГеоРамкаВосток = СтрокаРезультат.ГеоРамкаВосток;
		
		п = 1;
		Для каждого ЭлементСруктуры Из СтруктураАдреса Цикл
			НовЗапись["Поле"+п] = ЭлементСруктуры.Значение;
			п = п+1;		
		КонецЦикла;
		
		НовЗапись.Записать();		
	
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("Точность Убыв");	
	Если ТаблицаРезультат.Количество() > 0 Тогда
		
		НовЗапись = РегистрыСведений.ItobКэшГеокодера.СоздатьМенеджерЗаписи();
		НовЗапись.Широта           = Широта;
		НовЗапись.Долгота          = Долгота;		
		НовЗапись.ГеоКладрШирота   = ТаблицаРезультат[0].Широта;
		НовЗапись.ГеоКладрДолгота  = ТаблицаРезультат[0].Долгота;
		НовЗапись.ГеоКладрТочность = ТаблицаРезультат[0].Точность;
		НовЗапись.Записать();
		
		Возврат ТаблицаРезультат[0].Представление;
		
	Иначе
		Возврат "";	
	
	КонецЕсли;
	
КонецФункции // ОпределитьБлижайшийОбъектНаКарте()

// Расчитывает маршрут обращаясь к серверу CloudMade.com
// СпособОптимизации - 0 = по времени
//                   - 1 = по расстоянию
//
Функция РассчитатьМаршрутCloudMade(ТабТочек, ОшибкаРасчета, СпособОптимизации=0) Экспорт
	
	ОшибкаРасчета = "";
	
	Если ТабТочек.Количество() < 2 Тогда
		ОшибкаРасчета = "Недостаточно точек для прокладки маршрута";
		Возврат Неопределено;
	
	КонецЕсли;
	
	Сервер = "routes.cloudmade.com";
	ОшибкаРасчета = "";
	
	Страница = "/b340f66132415b1fb597971398c1bfc0/api/0.3/";
	
	Для п = 0 По ТабТочек.Количество()-1 Цикл
		
		Если п = ТабТочек.Количество()-1 И ТабТочек.Количество() > 2 Тогда
			Страница = Страница + "]";		
		КонецЕсли;		
		Если п > 0 Тогда
			Страница = Страница + ",";			
		КонецЕсли;		
		Если п = 1 И ТабТочек.Количество() > 2 Тогда
			Страница = Страница + "[";		
		КонецЕсли;
		Страница = Страница + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТабТочек[п].Широта)+
			"," + ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(ТабТочек[п].Долгота);		
	
	КонецЦикла;
		
	Если СпособОптимизации = 1 Тогда
		Страница = Страница + "/car/shortest.gpx?lang=ru&units=km";
	Иначе
		Страница = Страница + "/car.gpx?lang=ru&units=km";	
	КонецЕсли;	
		
	ИмяФайла = КаталогВременныхФайлов()+"cloudmade-route.xml";
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ИмяФайла);
	
	РезультатСкачивания = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере("http://routes.cloudmade.com"+Страница,ПараметрыПолучения);
	Если НЕ РезультатСкачивания.Статус Тогда
		Сообщить("Ошибка получения файла на сервере "+"http://maps.google.com"+Страница);
		Возврат "";	
	
	КонецЕсли;
		
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);	
	Исключение
		ОшибкаРасчета = "Ошибка открытия XML: "+ОписаниеОшибки();
		Возврат Неопределено;
	
	КонецПопытки;	
	
	ТабМаршрута = Новый ТаблицаЗначений;
	ТабМаршрута.Колонки.Добавить("Lat", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,10)));
	ТабМаршрута.Колонки.Добавить("Lon", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,10)));
	ТабМаршрута.Колонки.Добавить("Index", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)));
	ТабМаршрута.Колонки.Добавить("Length", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТабМаршрута.Колонки.Добавить("Duration", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТабМаршрута.Колонки.Добавить("Path");
	
	ШаблонТабТочек  = Новый ТаблицаЗначений;
	ШаблонТабТочек.Колонки.Добавить("Lat", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,10)));
	ШаблонТабТочек.Колонки.Добавить("Lon", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,10)));
	ШаблонТабТочек.Колонки.Добавить("Name");
	
	НовСтрокаМаршрута = ТабМаршрута.Добавить();
	НовСтрокаМаршрута.Lat = ТабТочек[0].Широта;
	НовСтрокаМаршрута.Lon = ТабТочек[0].Долгота;
	НовСтрокаМаршрута.Index = 0;
	НовСтрокаМаршрута.Length = 0;
	НовСтрокаМаршрута.Duration = 0;	
	НовСтрокаМаршрута.Path = ШаблонТабТочек.Скопировать();
	
	Попытка
	
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя = "wpt" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								
				СтрPath = НовСтрокаМаршрута.Path.Добавить();
				СтрPath.Lat = Число(ЧтениеXML.ПолучитьАтрибут("lat"));
				СтрPath.Lon = Число(ЧтениеXML.ПолучитьАтрибут("lon"));
				
			ИначеЕсли ЧтениеXML.Имя = "distance" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								
				Если ЧтениеXML.Прочитать() Тогда
					Попытка
						НовСтрокаМаршрута.Length = ЧтениеXML.Значение;
					Исключение
					КонецПопытки;					
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.Имя = "time" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
								
				Если ЧтениеXML.Прочитать() Тогда
					Попытка
						НовСтрокаМаршрута.Duration = ЧтениеXML.Значение;
					Исключение
					КонецПопытки;					
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.Имя = "rte" Тогда
				Прервать;
				
			КонецЕсли;					
			
		КонецЦикла;	
		
	Исключение
	    ОшибкаРасчета = "Ошибка чтения XML: "+ОписаниеОшибки();
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	НовСтрокаМаршрута = ТабМаршрута.Добавить();
	НовСтрокаМаршрута.Lat = ТабТочек[ТабТочек.Количество()-1].Широта;
	НовСтрокаМаршрута.Lon = ТабТочек[ТабТочек.Количество()-1].Долгота;
	НовСтрокаМаршрута.Index = 1;
	НовСтрокаМаршрута.Length = 0;
	НовСтрокаМаршрута.Duration = 0;	
	НовСтрокаМаршрута.Path = ШаблонТабТочек.Скопировать();
	
	Возврат ТабМаршрута;

КонецФункции // РассчитатьМаршрутCloudMade()

// Определяет вхождение точки в геозону
//
Функция ОпределениеВхожденияВГеозоны(Широта, Долгота)
	
	Если Метаданные.НайтиПоПолномуИмени("Справочник.ItobГеографическиеЗоны") = Неопределено Тогда
		Возврат Неопределено;
	
	КонецЕсли;
	
	ТаблицаГеозон = Новый ТаблицаЗначений;
	ТаблицаГеозон.Колонки.Добавить("Геозона");
	ТаблицаГеозон.Колонки.Добавить("МинШирота");
	ТаблицаГеозон.Колонки.Добавить("МинДолгота");	
	ТаблицаГеозон.Колонки.Добавить("МаксШирота");
	ТаблицаГеозон.Колонки.Добавить("МаксДолгота");	
	ТаблицаГеозон.Колонки.Добавить("Уровень");	
	ТаблицаГеозон.Колонки.Добавить("Мх");
	ТаблицаГеозон.Колонки.Добавить("Му");		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Широта", Широта);
	Запрос.УстановитьПараметр("Долгота", Долгота);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ItobГеографическиеЗоныТочки.Ссылка КАК Ссылка,
	               |	ItobГеографическиеЗоныТочки.НомерСтроки,
	               |	ItobГеографическиеЗоныТочки.Широта,
	               |	ItobГеографическиеЗоныТочки.Долгота,
	               |	ItobГеографическиеЗоныТочки.Ссылка.Код
	               |ИЗ
	               |	Справочник.ItobГеографическиеЗоны.Точки КАК ItobГеографическиеЗоныТочки
	               |ГДЕ
	               |	(НЕ ItobГеографическиеЗоныТочки.Ссылка.ПометкаУдаления)
	               |	И ItobГеографическиеЗоныТочки.Ссылка.ИспользоватьПриГеокодировании
	               |	И ItobГеографическиеЗоныТочки.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ItobГеографическиеЗоныТочки.Ссылка
	               |			ИЗ
	               |				Справочник.ItobГеографическиеЗоны.Точки КАК ItobГеографическиеЗоныТочки
	               |			СГРУППИРОВАТЬ ПО
	               |						ItobГеографическиеЗоныТочки.Ссылка
	               |			ИМЕЮЩИЕ
	               |				&Широта МЕЖДУ МИНИМУМ(ItobГеографическиеЗоныТочки.Широта) И МАКСИМУМ(ItobГеографическиеЗоныТочки.Широта)
	               |					И (&Долгота МЕЖДУ МИНИМУМ(ItobГеографическиеЗоныТочки.Долгота) И МАКСИМУМ(ItobГеографическиеЗоныТочки.Долгота))
	               |					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ItobГеографическиеЗоныТочки.НомерСтроки) >= 3)
	               |ИТОГИ ПО
	               |	Ссылка";		
	
	ВыборкаПоЗонам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоЗонам.Следующий() Цикл
		
		ВыборкаПоТочкам = ВыборкаПоЗонам.Выбрать();
		Если ВыборкаПоТочкам.Количество() = 0 Тогда
			Продолжить;
			
		КонецЕсли;
		
		НовСтрока = ТаблицаГеозон.Добавить();
		НовСтрока.Геозона = ВыборкаПоЗонам.Ссылка;
		НовСтрока.Уровень = СтрДлина(ВыборкаПоЗонам.Ссылка.ПолныйКод());
		НовСтрока.Мх = Новый Массив;
		НовСтрока.Му = Новый Массив;		
		
		Пока ВыборкаПоТочкам.Следующий() Цикл				
			НовСтрока.Мх.Добавить(ВыборкаПоТочкам.Долгота);
			НовСтрока.Му.Добавить(ВыборкаПоТочкам.Широта);
			
		КонецЦикла;
		
		НовСтрока.Мх.Добавить(НовСтрока.Мх[0]);
		НовСтрока.Му.Добавить(НовСтрока.Му[0]);		
		
	КонецЦикла;
	
	ТаблицаГеозон.Сортировать("Уровень Убыв");
	
	Результат = Неопределено;	
	
	Для каждого СтрЗоны Из ТаблицаГеозон Цикл
		Если ItobОперативныйМониторинг.ТочкаВнутриГеозоны(Долгота, Широта, СтрЗоны.Мх, СтрЗоны.Му) Тогда
				
			Результат =  СтрЗоны.Геозона.Наименование;				
				
			Прервать;
				
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции
