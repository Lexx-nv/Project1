// Модуль представляет собой библиотеку функций используемых в обработках АРМ (Автоматизированное рабочее место)

// Проставляет номера строк в колонке "НомерСтроки" таблицы значений.
// 
// Параметры: 
//  Таблица – ТаблицаЗначений – таблица, в которой проставляются номера.
//  В таблице должна присутствовать колонка "НомерСтроки"
// 
// Возвращаемое значение: 
//  Нет.
Процедура арПроставитьНомераСтрок(Таблица) Экспорт
	Если Таблица.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		Таблица.Колонки.Добавить("НомерСтроки");
	КонецЕсли;
	Для Сч = 1 По Таблица.Количество() Цикл
		Таблица[Сч-1].НомерСтроки = Формат(Сч, "ЧДЦ=0; ЧГ=");
	КонецЦикла;
КонецПроцедуры

// Отбирает значения отложенных сделок по указанному АРМ-у в реквизит "ОтложенныеСделкиТекущие"
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  ИмяАРМ - Строка - имя АРМ по которому производится фильтрация
// 
// Возвращаемое значение: 
//  Нет.
Процедура арОтфильтроватьОтложенныеСделки(ЭтаФорма, ИмяАРМ) Экспорт
	ЭтотОбъект = ЭтаФорма.ОбработкаОбъект;
	ВремОтложенныеСделкиТекущие = ЭтотОбъект.ОтложенныеСделки.Скопировать();
	Пока Истина Цикл
		НадоПрервать = Истина;
		Для Каждого СтрСделка Из ВремОтложенныеСделкиТекущие Цикл
			Если СтрСделка.ИнтерфейсПользователя <> ИмяАрм И Не ПустаяСтрока(СтрСделка.ИнтерфейсПользователя) Тогда
				ВремОтложенныеСделкиТекущие.Удалить(СтрСделка);
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если НадоПрервать Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.ОтложенныеСделкиТекущие = ВремОтложенныеСделкиТекущие.Скопировать();
	Оповестить("АРМИзменениеТекущихОтложенныхСделок");
КонецПроцедуры

// Вызывается при изменении отбора в списке номенклатуры, управляет индикацией отбора на форме
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  Элемент - Элемент формы - элемент формы инициировавший изменение отбора
// 
// Возвращаемое значение: 
//  Нет.
Процедура арСписокНоменклатураПриИзмененииОтбора(ЭтаФорма, Элемент = Неопределено) Экспорт
	ПредставлениеОтбора = уатОбщегоНазначенияТиповые.уатПолучитьПредставлениеОтбора(ЭтаФорма.СписокНоменклатура.Отбор);
	Попытка
		ЭтаФорма.ЭлементыФормы.тКомментарийНоменклатура.Заголовок = Лев(ПредставлениеОтбора, СтрДлина(ПредставлениеОтбора)-1);
		ЭтаФорма.ЭлементыФормы.тКомментарийНоменклатура.ЦветТекста = Новый Цвет(155,0,0);
		ЭтаФорма.ЭлементыФормы.тКомментарийНоменклатура.Подсказка="Текущий фильтр";
	Исключение
	КонецПопытки;
	Попытка
		Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельСписокНоменклатура.Кнопки.ПоказатьОтбор.Текст = "Показать отбор (!)";
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельСписокНоменклатура.Кнопки.ПоказатьОтбор.Подсказка = "Установленный отбор: " + ПредставлениеОтбора;
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельСписокНоменклатура.Кнопки.ПоказатьОтбор.Пояснение = "Показать/скрыть отбор";
		Иначе
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельСписокНоменклатура.Кнопки.ПоказатьОтбор.Текст = "Показать отбор";
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельСписокНоменклатура.Кнопки.ПоказатьОтбор.Подсказка = "Отбор не установлен";
			ЭтаФорма.ЭлементыФормы.КоманднаяПанельСписокНоменклатура.Кнопки.ПоказатьОтбор.Пояснение = "Показать/скрыть отбор";
		КонецЕсли;
	Исключение;
	КонецПопытки;
КонецПроцедуры

// Вызывается при изменении отбора в списке контрагентов, управляет индикацией отбора на форме
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  Элемент - Элемент формы - элемент формы инициировавший изменение отбора
// 
// Возвращаемое значение: 
//  Нет.
Процедура арСписокКонтрагентыПриИзмененииОтбора(ЭтаФорма, Элемент = Неопределено) Экспорт
	ПредставлениеОтбора = уатОбщегоНазначенияТиповые.уатПолучитьПредставлениеОтбора(ЭтаФорма.СписокКонтрагенты.Отбор);
	Попытка
		ЭтаФорма.ЭлементыФормы.тКомментарийКонтрагенты.Заголовок = Лев(ПредставлениеОтбора, СтрДлина(ПредставлениеОтбора)-1);
		ЭтаФорма.ЭлементыФормы.тКомментарийКонтрагенты.ЦветТекста = Новый Цвет(155,0,0);
		ЭтаФорма.ЭлементыФормы.тКомментарийКонтрагенты.Подсказка="Текущий фильтр";
	Исключение
	КонецПопытки;
КонецПроцедуры

// Вызывается из обработчика ПриВыводеСтроки табличного документов для создания принятой для АРМ
//  цветовой индикации строк списка.
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  Элемент - ТабличноеПоле - табличное поле из обработчика которого вызывается процедура.
//  ОформлениеСтроки - ОформлениеСтроки - оформление строки переданное в обработчик.
//  ДанныеСтроки - данные строки, переданные в обработчик.
// 
// Возвращаемое значение: 
//  Нет.
Процедура арСписокДокументовПриВыводеСтроки(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	ЭтотОбъект = ЭтаФорма.ОбработкаОбъект;
	ОформлениеСтроки.ЦветТекста=ЦветаСтиля.ЦветРамки;
	
	Если ДанныеСтроки.Контрагент=ЭтотОбъект.Контрагент Тогда
		ОформлениеСтроки.ЦветФона=ЦветаСтиля.АльтернативныйЦветФонаПоля;
	Иначе
		ОформлениеСтроки.ЦветФона=ЦветаСтиля.ЦветФонаПоля;
	КонецЕсли;
КонецПроцедуры

// Формирует печатную форму выбранного документа.
// 
// Параметры: 
//  ТекущиеДанные - текущие данные табличного поля списка документов
//  ЭтаФорма – Форма – форма АРМ.
// 
// Возвращаемое значение: 
//  Нет.
Процедура арПечататьДокумент(ТекущиеДанные, ЭтаФорма = Неопределено) Экспорт
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.Ссылка.ПолучитьОбъект().Печать();
	КонецЕсли;
КонецПроцедуры

// Возвращает подменю расположенное на указанной командной панели.
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  ИмяКоманднойПанели - Строка - имя командной панели в которой ищется подменю
//  ТекстПодменю - Строка - заголовок искомого подменю
// 
// Возвращаемое значение: 
//  КнопкаКоманднойПанели - найденное подменю.
Функция арПолучитьПодменю(ЭтаФорма, ИмяКоманднойПанели, ТекстПодменю) Экспорт
	Для Каждого Кнопка Из ЭтаФорма.ЭлементыФормы[ИмяКоманднойПанели].Кнопки Цикл
		Если (Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю) И (Кнопка.Текст = ТекстПодменю) Тогда
			ПодменюДействия = Кнопка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ПодменюДействия.Кнопки;
КонецФункции

// Добавляет стандартные кнопки в командные панели формы АРМ.
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  СтруктураВсеПанели - Структура - структура содержащая имена и назначения командных панелей
//                       (например ключ="КоманднаяПанельСписокКонтрагенты", значение="СправочникСписок").
//
// Возвращаемое значение: 
//  Нет.
Процедура арЗаполнитьДополнительно(ЭтаФорма, СтруктураВсеПанели) Экспорт
	ЭтотОбъект = ЭтаФорма.ОбработкаОбъект;
	Для Каждого ЗначениеПанель Из СтруктураВсеПанели Цикл
		
		ПанельИмя = ЗначениеПанель.Ключ;
		ВидОбъекта = СтруктураВсеПанели[ПанельИмя];
		ПрефиксИмя = ВидОбъекта + "_1_" + ПанельИмя + "_2_";
		
		Если (ВидОбъекта = "ДокументСписок")
		 ИЛИ (ВидОбъекта = "СправочникСписок") Тогда
			// получаем кнопки подменю "Действия" для командной панели
			КнопкиПодменюДействия = арПолучитьПодменю(ЭтаФорма, ПанельИмя, "Действия");

			КнопкаИмя = "ДопВозможностиРазделитель";
			Кнопка = КнопкиПодменюДействия.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				КнопкиПодменюДействия.Вставить(0,КнопкаИмя,ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;	
				
			// добавляем кнопку поиска ссылок
			КнопкаИмя = ПрефиксИмя + "ПоискСсылок";
			Кнопка = КнопкиПодменюДействия.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПодменюДействия.Вставить(0, КнопкаИмя,ТипКнопкиКоманднойПанели.Действие,"Поиск ссылок",Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				Кнопка.Подсказка   = "Поиск ссылок на объекты использующие данный объект и используемых в данном объекте";
            КонецЕсли;
			
			// добавляем кнопку выведения истории объекта
			КнопкаИмя = ПрефиксИмя + "ИсторияОбъекта";
			Кнопка = КнопкиПодменюДействия.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПодменюДействия.Вставить(0, КнопкаИмя,ТипКнопкиКоманднойПанели.Действие,"История объекта",Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				Кнопка.Подсказка   = "История объекта";
			КонецЕсли;
			
			// добавляем кнопку выгрузки в табличный документ
			КнопкаИмя = ПрефиксИмя + "ВыгрузкаВТабличныйДокумент";
			Кнопка = КнопкиПодменюДействия.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПодменюДействия.Вставить(0, КнопкаИмя,ТипКнопкиКоманднойПанели.Действие,"Выгрузка в табличный документ",Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Картинка    = БиблиотекаКартинок.ТабличныйДокумент;
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				Кнопка.Подсказка   = "Выгрузка в табличный документ";
			КонецЕсли;	
		КонецЕсли;
		Если ВидОбъекта = "ДокументСписок" Тогда
			// получаем кнопки подменю "Перейти" для командной панели
			КнопкиПодменюПерейти = арПолучитьПодменю(ЭтаФорма, ПанельИмя, "Перейти");
			
			КнопкаИмя = "ДопВозможностиРазделитель";
			Кнопка = КнопкиПодменюПерейти.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				КнопкиПодменюПерейти.Вставить(0,КнопкаИмя,ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			// добавляем кнопку вывода движений документа
			КнопкаИмя = ПрефиксИмя + "ДвиженияДокумента";
			Кнопка = КнопкиПодменюПерейти.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПодменюПерейти.Вставить(0, КнопкаИмя,ТипКнопкиКоманднойПанели.Действие,"Движения документа",Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Подсказка   = "Вывести движения документа";
			КонецЕсли;
			
			// разделитель ДеревоДокумента
			КнопкиПанели = ЭтаФорма.ЭлементыФормы[ПанельИмя].Кнопки;
			КнопкаИмя = "ДеревоДокументаРазделитель";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			// кнопка ДеревоДокумента
			КнопкаИмя = ПрефиксИмя + "ДеревоДокумента";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Действие, "Показать дерево связей документа", Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
				Кнопка.Подсказка = "Показать дерево связей документа";
			КонецЕсли;
			
			// разделитель Свойства
			КнопкиПанели = ЭтаФорма.ЭлементыФормы[ПанельИмя].Кнопки;
			КнопкаИмя = "СвойстваРазделитель";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			// кнопка Свойства
			КнопкаИмя = ПрефиксИмя + "Свойства";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Действие, "Открыть панель свойств", Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Картинка = БиблиотекаКартинок.Свойства;
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
				Кнопка.Подсказка = "Открыть панель свойств";
			КонецЕсли;
			
			// разделитель Печать
			КнопкиПанели = ЭтаФорма.ЭлементыФормы[ПанельИмя].Кнопки;
			КнопкаИмя = "ПечатьРазделитель";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			// кнопка "Печать"
			КнопкаИмя = ПрефиксИмя + "Печать";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Действие, "Печать", Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Картинка = БиблиотекаКартинок.Печать;
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				Кнопка.Подсказка = "Печать документа";
			КонецЕсли;
			
			// разделитель ПечатьГрупповая
			КнопкиПанели = ЭтаФорма.ЭлементыФормы[ПанельИмя].Кнопки;
			КнопкаИмя = "ПечатьГрупповаяРазделитель";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			// кнопка "ПечатьГрупповая"
			КнопкаИмя = ПрефиксИмя + "ПечатьГрупповая";
			Кнопка = КнопкиПанели.Найти(КнопкаИмя);
			Если Кнопка = Неопределено Тогда
				Кнопка = КнопкиПанели.Добавить(КнопкаИмя,ТипКнопкиКоманднойПанели.Действие, "Групповая печать", Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				Кнопка.Подсказка = "Печать выделенных документов";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

// Добавляет панель в дерево, описывающее структуру формы. Используется при формирования дерева формы,
//  необходимого обработке ПанельАРМ для настройки видимости и положения закладок формы АРМ.
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  Дерево - ДеревоЗначений - формируемое дерево формы.
//  ИмяПанели - Строка - имя панели, добавляемой в дерево формы.
//  ИмяПанелиРодитель - Строка - имя панели на которой расположена добавляемая панель.
//  ИмяСтраницыРодитель - Строка - имя страницы панели на которой расположена добавляемая панель.
// 
// Возвращаемое значение: 
//  Нет.
Процедура арДобавитьПанельВДерево(ЭтаФорма, Дерево, ИмяПанели, ИмяПанелиРодитель = Неопределено, ИмяСтраницыРодитель = Неопределено) Экспорт
	Строки = Неопределено;
	Если Не ИмяПанелиРодитель = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяПанели", ИмяПанелиРодитель);
		Отбор.Вставить("ИмяСтраницы", ИмяСтраницыРодитель);
		МассивСтроки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
		Если МассивСтроки.Количество() = 0 Тогда
			Строки = Дерево.Строки;
		Иначе
			Строки = МассивСтроки[0].Строки;
		КонецЕсли;
	Иначе
		Строки = Дерево.Строки;
	КонецЕсли;

	ЭтаПанель = ЭтаФорма.ЭлементыФормы[ИмяПанели];
	Для Каждого Страница Из ЭтаПанель.Страницы Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяПанели", ЭтаПанель.Имя);
		Отбор.Вставить("ИмяСтраницы", Страница.Имя);
		МассивСтроки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
		Если МассивСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Строки.Добавить();
		НоваяСтрока.ИмяПанели = ЭтаПанель.Имя;
		НоваяСтрока.ИмяСтраницы = Страница.Имя;
		НоваяСтрока.Представление = Страница.Заголовок;
		НоваяСтрока.Видимость = Истина;
		НоваяСтрока.Картинка = Страница.КартинкаЗаголовка;
		НоваяСтрока.ОтображениеЗакладок = ЭтаПанель.ОтображениеЗакладок;
	КонецЦикла;
КонецПроцедуры

// Проверяет на корректность дерево формы, вызывается после восстановления сохраненного
//  значения дерева формы.
// 
// Параметры: 
//  ЭтаФорма – Форма – форма АРМ.
//  Строки - ДеревоЗначений - дерево формы.
//  Результат - Булево - этот параметр для внутреннего использования функцией, его передавать не надо.
// 
// Возвращаемое значение: 
//  Истина если дерево формы заполнено корректно, иначе Ложь.
Функция арПроверитьКорректностьДереваФормы(ЭтаФорма, Строки, Результат = Истина) Экспорт
	Для Каждого Стр Из Строки Цикл
		Результат = Результат И арПроверитьКорректностьДереваФормы(ЭтаФорма, Стр.Строки, Результат);
		Попытка
			ТестоваяПанель = ЭтаФорма.ЭлементыФормы[Стр.ИмяПанели];
			ТестоваяСтраница = ЭтаФорма.ЭлементыФормы[Стр.ИмяПанели].Страницы[Стр.ИмяСтраницы];
		Исключение
			Результат = Ложь;
		КонецПопытки;
	КонецЦикла;
	Возврат Результат;
КонецФункции
