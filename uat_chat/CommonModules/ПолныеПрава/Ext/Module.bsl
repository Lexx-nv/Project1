// Проверяет доступность прав для запуска конфигурации
//
Функция ЕстьДоступныеПраваДляЗапускаКонфигурации() Экспорт

	//Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("Пользователь") ИЛИ РольДоступна("Бухгалтер");
	Возврат Истина;
	
КонецФункции

// Устанавливает параметры сеанса
//
Процедура УстановитьПараметрыСеанса() Экспорт

	ТекущийПользователь = УправлениеПользователями.ОпределитьТекущегоПользователя();
	
	ПараметрыСеанса.ТекущийПользователь = ТекущийПользователь;
	

	//// Определим типы для поиска данных в документе регистрации
	//// типы определим по регистру сведений ОбъектыДоступаДокументов
	//МассивТиповИзмерения = Метаданные.РегистрыСведений.ОбъектыДоступаДокументов.Измерения.ОбъектДоступа.Тип.Типы();
	//СоответствиеОбъектов = Новый Соответствие;
	//СоответствиеОбъектов.Вставить("ТипыОбъектовДоступа", МассивТиповИзмерения);
	//ПараметрыСеанса.МетаданныеДокументовРегистрацииОбъектовДоступа = Новый ХранилищеЗначения(СоответствиеОбъектов);
	
	//уатОбщегоНазначенияТиповые.уатУстановитьГраницыЗапретаИзмененияДанных();
	УстановитьПараметрГраницыЗапретаИзмененияДанных();

КонецПроцедуры

// Сохранение в параметре сеанса ГраницыЗапретаИзмененияДанных границ запрета изменений данных
//
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанных() Экспорт
	
	Если РольДоступна("уатАдминистратор") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
		ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
	                                   |	Границы.Организация КАК Организация,
	                                   |	Границы.Пользователь КАК Пользователь,
	                                   |	ВЫБОР
	                                   |		КОГДА Границы.Пользователь = &ПустаяСсылка
	                                   |			ТОГДА 3
	                                   |		КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
	                                   |				И Границы.Пользователь = &Пользователь
	                                   |			ТОГДА 1
	                                   |	КОНЕЦ КАК Приоритет,
	                                   |	Границы.ГраницаЗапретаИзменений КАК ГраницаЗапретаИзменений
	                                   |ИЗ
	                                   |	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоПриоритетамЗаписей;
		
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Пользователи.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
				Соответствие[Выборка.Организация] = Выборка.ГраницаЗапретаИзменений;
		КонецЦикла;
		Если Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		Соответствие.Вставить(Справочники.Организации.ПустаяСсылка(), Дата('00010101'));
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли КлючИЗначение.Значение <> Дата('00010101') Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));	
	
КонецПроцедуры

// устанавливает период итогов
//
// Параметры:
//  СписокРегистровКРасчету - список регистров для которых устанавливается период
//  ПредпочтительнаяДатаРасчетаИтогов - предпочтительная дата для расчёта итогов
//
Функция ВыполнитьУстановкуПериодаИтогов(СписокРегистровКРасчету, ПредпочтительнаяДатаРасчетаИтогов) Экспорт
	
	СписокРассчитанных = Новый Массив;
	Для Каждого РегистрИзСписка Из СписокРегистровКРасчету Цикл
		ПозицияТочки = Найти(РегистрИзСписка, ".");
		ТипРегистра = Лев(РегистрИзСписка, ПозицияТочки - 1);
		ИмяРегистра = Сред(РегистрИзСписка, ПозицияТочки + 1);
		Если ТипРегистра = "РегистрНакопления" Тогда
			РегистрМенеджер = РегистрыНакопления[ИмяРегистра];
			МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
			ТипРегистраСтрокой = " накопления ";
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			РегистрМенеджер = РегистрыБухгалтерии[ИмяРегистра];
			МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			ТипРегистраСтрокой = " бухгалтерии "
		КонецЕсли;
						
		// повторная проверка прав нужна, так как процедура экспортная
		Если Не ПравоДоступа("УправлениеИтогами", МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;			
		
		РегистрМенеджер.УстановитьПериодРассчитанныхИтогов(ПредпочтительнаяДатаРасчетаИтогов);
		СписокРассчитанных.Добавить(ТипРегистраСтрокой + """" + МетаданныеРегистра.Синоним + """");
		
	КонецЦикла;
	
	Возврат СписокРассчитанных;

	
КонецФункции

// Функция определяет наличие движения по регистрам для документа
// 
// Параметры:
//  ДокументСсылка - документ для обработки
//
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// производит запись набора записей на стороне сервера
//
// Параметры:
//  ИмяРегистра  - регистр,в котором проводится запись
//  Регистратор  - регистратор записи
//  ТаблицаДвижений - Таблица движений для проведения по регистру
//
Процедура ЗаписатьНаборЗаписейНаСервере(ИмяРегистра, Регистратор, ТаблицаДвижений = Неопределено) Экспорт	
	
	Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Если ТаблицаДвижений <> Неопределено Тогда
		Набор.мТаблицаДвижений = ТаблицаДвижений;
		ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Набор);
	КонецЕсли;
	Набор.Записать();
	
КонецПроцедуры

// Определяет используется ли РИБ
//
Процедура ОпределитьФактИспользованияРИБ() Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("ПараметрСеанса.ИспользованиеРИБ") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Полный.Ссылка
	|ИЗ
	|	ПланОбмена.уатПолный КАК Полный
	|ГДЕ
	|	Полный.Ссылка <> &ЭтотУзел
	|
	|UNION ALL
	|
	|ВЫБРАТЬ
	|	Полный.Ссылка
	|ИЗ
	|	ПланОбмена.ДИСП КАК Полный
	|ГДЕ
	|	Полный.Ссылка <> &ЭтотУзелДИСП

	|";
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.уатПолный.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелДИСП", ПланыОбмена.ДИСП.ЭтотУзел());
	
	Попытка
		ПараметрыСеанса.ИспользованиеРИБ = (ПараметрыСеанса.ИспользованиеРИБ) ИЛИ (НЕ Запрос.Выполнить().Пустой());
	Исключение
		ПараметрыСеанса.ИспользованиеРИБ = НЕ Запрос.Выполнить().Пустой(); 
	КонецПопытки;
	
КонецПроцедуры

// Функция определяет наличие хотя бы одной записи в регистре сведений
//
// Параметры
//  ИмяРегистра - строка
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьЗаписиВРегистреСведений(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегСв.*
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегСв";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции