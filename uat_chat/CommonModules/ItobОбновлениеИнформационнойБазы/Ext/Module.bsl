
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ 

// Процедура заполняет пустую ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	
	НачатьТранзакцию();
	
	Константы.ItobАдресСервисаCsmSvc.Установить("localhost:8091");
	
	Константы.ItobМинимальнаяСкоростьДвижения.Установить(10);
	Константы.ItobМинимальноеВремяСтоянки.Установить('00010101001000');
	
	// Пользователь ReplicationBot для репликации
	Если ПользователиИнформационнойБазы.НайтиПоИмени("ReplicationBot") = Неопределено Тогда
		
		Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
			
			НовПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
			НовПользователь.АутентификацияОС = Ложь;
			НовПользователь.АутентификацияСтандартная = Истина;
			НовПользователь.ЗапрещеноИзменятьПароль = Ложь;
			НовПользователь.Имя = "Пользователь";
			НовПользователь.Пароль = "";
			НовПользователь.ПоказыватьВСпискеВыбора = Истина;
			НовПользователь.ПолноеИмя = "Пользователь системы мониторинга";
			НовПользователь.Роли.Добавить(Метаданные.Роли.уатАдминистратор);
			НовПользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.ItobПолный;
			НовПользователь.Записать();
			
		КонецЕсли;
		
		НовПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
		НовПользователь.АутентификацияОС = Ложь;
		НовПользователь.АутентификацияСтандартная = Истина;
		НовПользователь.ЗапрещеноИзменятьПароль = Истина;
		НовПользователь.Имя = "ReplicationBot";
		НовПользователь.Пароль = "ole123";
		НовПользователь.ПоказыватьВСпискеВыбора = Ложь;
		НовПользователь.ПолноеИмя = "Replication Bot User";
		НовПользователь.Роли.Добавить(Метаданные.Роли.уатАдминистратор);
		НовПользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.ItobПолный;
		НовПользователь.Записать();			
		
	КонецЕсли;
	
	// Модели терминалов
	// Терминал - Teltonika FM
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Teltonika FM";
	НовМодельТерминалов.Записать();
	
	// Датчики
	ТаблицаДатчиков = 
	"1	Цифровой вход 1	Дискретный
	|2	Цифровой вход 2	Дискретный
	|3	Цифровой вход 3	Дискретный
	|4	Цифровой вход 4	Дискретный
	|9	Аналоговый вход 1	Аналоговый
	|10	Аналоговый вход 2	Аналоговый
	|11	Аналоговый вход 3	Аналоговый
	|19	Аналоговый вход 4	Аналоговый
	|21	GSM сигнал	Дискретный
	|22	Текущий профиль	Дискретный
	|66	Напряжение питания	Аналоговый
	|67	Напряжение резервного аккумулятора	Аналоговый
	|68	Сила тока резервного аккумулятора	Аналоговый
	|69	Состояние GPS	Дискретный
	|70	Температура блока	Аналоговый
	|72	Датчик температуры	Аналоговый
	|76	Счетчик топлива	Аналоговый
	|78	Вход iButton	Аналоговый
	|145	CAN 01	Аналоговый
	|146	CAN 02	Аналоговый
	|147	CAN 03	Аналоговый
	|148	CAN 04	Аналоговый
	|149	CAN 05	Аналоговый
	|150	CAN 06	Аналоговый
	|151	CAN 07	Аналоговый
	|152	CAN 08	Аналоговый
	|153	CAN 09	Аналоговый
	|154	CAN 10	Аналоговый";
	
	Для п = 1 По СтрЧислоСтрок(ТаблицаДатчиков) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТаблицаДатчиков, п);
		ТекСтрока = СтрЗаменить(ТекСтрока, "	", Символы.ПС);
		
		НовДатчик = Справочники.ItobДатчики.СоздатьЭлемент();
		НовДатчик.Владелец = НовМодельТерминалов.Ссылка;
		НовДатчик.Код = СтрПолучитьСтроку(ТекСтрока,1);
		НовДатчик.Наименование = СтрПолучитьСтроку(ТекСтрока,2);
		Если СтрПолучитьСтроку(ТекСтрока,3) = "Дискретный" Тогда
			НовДатчик.ТипДатчика = Перечисления.ItobТипыДатчиков.Дискретный;
		Иначе
			НовДатчик.ТипДатчика = Перечисления.ItobТипыДатчиков.Аналоговый;
		КонецЕсли;
		НовДатчик.Записать();
		
	КонецЦикла;		
	
	// Терминал - Naviset GT30
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Naviset GT30/GT100";
	НовМодельТерминалов.Записать();
	
	ТаблицаДатчиков = 
	"1	Кнопка SOS	Дискретный
	|2	Кнопка B	Дискретный
	|3	Кнопка C	Дискретный
	|16	Низкий заряд батареи	Дискретный
	|17	Превышение скорости	Дискретный
	|18	Выход из геозоны	Дискретный
	|20	Перезагрузка или включение питания	Дискретный
	|21	Отсутствует GPS сигнал	Дискретный
	|22	Возобновление GPS сигнала	Дискретный";
	
	Для п = 1 По СтрЧислоСтрок(ТаблицаДатчиков) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТаблицаДатчиков, п);
		ТекСтрока = СтрЗаменить(ТекСтрока, "	", Символы.ПС);
		
		КодДатчика = Число(СтрПолучитьСтроку(ТекСтрока,1));
		НаименованиеДатчика = СтрПолучитьСтроку(ТекСтрока,2);
		ТипДатчика = Перечисления.ItobТипыДатчиков[?(СтрПолучитьСтроку(ТекСтрока,3) = "Дискретный", "Дискретный", "Аналоговый")];
		
		НайденныйДатчик = Справочники.ItobДатчики.НайтиПоКоду(КодДатчика,,,НовМодельТерминалов.Ссылка);
		Если НЕ НайденныйДатчик.Пустая() Тогда
			НовДатчик = НайденныйДатчик.ПолучитьОбъект();
			
		Иначе
			НовДатчик = Справочники.ItobДатчики.СоздатьЭлемент();	
			
		КонецЕсли;			
		
		НовДатчик.Владелец = НовМодельТерминалов.Ссылка;
		НовДатчик.Код = КодДатчика;
		НовДатчик.Наименование = НаименованиеДатчика;
		НовДатчик.ТипДатчика = ТипДатчика;
		НовДатчик.Записать();
		
	КонецЦикла;
	
	// Терминал - Portman GT2000
	НовМодельТерминалов = Справочники.ItobМоделиТерминалов.СоздатьЭлемент();
	НовМодельТерминалов.Наименование = "Portman GT2000";
	НовМодельТерминалов.Записать();
	
	
	// Назначения датчиков
	НазначениеДатчиковОбъект = Справочники.ItobНазначенияДатчиков.Зажигание.ПолучитьОбъект();
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 0;
	НовСтрока.Расшифровка = "Зажигание выключено";
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 1;
	НовСтрока.Расшифровка = "Зажигание включено";
	НазначениеДатчиковОбъект.Записать();
	
	НазначениеДатчиковОбъект = Справочники.ItobНазначенияДатчиков.ТревожнаяКнопка.ПолучитьОбъект();
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 0;
	НовСтрока.Расшифровка = "Кнопка выключена";
	НовСтрока = НазначениеДатчиковОбъект.РасшифровкаПоказаний.Добавить();
	НовСтрока.Показание = 1;
	НовСтрока.Расшифровка = "Кнопка включена";
	НазначениеДатчиковОбъект.Записать();
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПервыйЗапуск()

// Процедура обновления 1.1.2.4.
//
Процедура Обновление_1_1_2_4() Экспорт
	
	// Заполним регистр "Крайние данные терминалы"	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	*
	               |ИЗ
	               |	РегистрСведений.ItobАктуальностьДанныхТерминалов КАК ItobАктуальностьДанныхТерминалов";
				   
	НаборЗаписей = РегистрыСведений.ItobКрайниеДанныеТерминалов.СоздатьНаборЗаписей();			   
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);		
	
	КонецЦикла;
	
	НаборЗаписей.Записать();	
	
КонецПроцедуры // Обновление_1_1_2_4()

// Процедура обновления 1.1.3.2.
//
Процедура Обновление_1_1_3_2() Экспорт
	
	// Заполним справочник "Географические карты"
	НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
	НовыйОбъект.Код = "00001";
	НовыйОбъект.Наименование = "OSM (Mapnik)";
	НовыйОбъект.Сортировка = 10;
	НовыйОбъект.Идентификатор = "osm_mapnik";
	НовыйОбъект.Сервер = "http://tile.openstreetmap.org/";
	НовыйОбъект.Правообладатель = "OpenStreetMap";
	НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
	НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
	|   var subs = [ 'a', 'b', 'c' ];   
	|   return ""http://"" + subs[(x+y)%3] + "".tile.openstreetmap.org/"" + z + ""/"" + x + ""/"" + y + "".png"";
	|}";	
	НовыйОбъект.Записать();
	
	НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
	НовыйОбъект.Код = "00002";
	НовыйОбъект.Наименование = "OSM (Osmarender)";
	НовыйОбъект.Сортировка = 20;
	НовыйОбъект.Идентификатор = "osm_home";
	НовыйОбъект.Сервер = "http://tah.openstreetmap.org/Tiles/tile/";
	НовыйОбъект.Правообладатель = "OpenStreetMap";
	НовыйОбъект.СайтПравообладателя = "http://www.openstreetmap.org/";
	НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
	|   var subs = [ 'a', 'b', 'c' ];   
	|   return ""http://"" + subs[(x+y)%3] + "".tah.openstreetmap.org/Tiles/tile/"" + z + ""/"" + x + ""/"" + y + "".png"";
	|}";	
	НовыйОбъект.Записать();
	
	НовыйОбъект = Справочники.ItobГеографическиеКарты.СоздатьЭлемент();
	НовыйОбъект.Код = "00003";
	НовыйОбъект.Наименование = "CloudMade";
	НовыйОбъект.Сортировка = 30;
	НовыйОбъект.Идентификатор = "cloudmade";
	НовыйОбъект.Сервер = "http://b.tile.cloudmade.com/b340f66132415b1fb597971398c1bfc0/";
	НовыйОбъект.Правообладатель = "CloudMade";
	НовыйОбъект.СайтПравообладателя = "http://cloudmade.com";
	НовыйОбъект.Атрибуты = "getTileAddress: function(bounds,x,y,z) {
	|   var subs = [ 'a', 'b', 'c' ];   
	|   return ""http://"" + subs[(x+y)%3] + "".tile.cloudmade.com/b340f66132415b1fb597971398c1bfc0/1/256/""
	|           + z + ""/"" + x + ""/"" + y + "".png"";
	|}";	
	НовыйОбъект.Записать();
		
	// Установка сервиса геокодирования
	
	Константы.ItobСервисОбратногоГеокодирования.Установить(ПредопределенноеЗначение("Перечисление.ItobСервисыГеокодирования.NominatimMapquest"));
		
	
КонецПроцедуры // Обновление_1_1_3_2()

// Процедура обновления 1.1.4.2.
//
Процедура Обновление_1_1_4_2() Экспорт
	
	// Установка оптимальных параметров сглаживания в калибровочных графиках
	Выборка = Справочники.ItobКалибровочныеГрафики.Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СправочникОбъект.ДлинаБуфераСглаживания = 0 Тогда
			СправочникОбъект.ДлинаБуфераСглаживания = 40;
			СправочникОбъект.ПорогЗаправки = 10;
			СправочникОбъект.ПорогСлива = 10;
			СправочникОбъект.Записать();			
		
		КонецЕсли;		
			
	КонецЦикла;		
	
КонецПроцедуры // Обновление_1_1_4_2()

Функция ОбработчикиОбновления()

	Обработчики = НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления конфигурации
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазы.ПервыйЗапуск";
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазы.Обновление_1_1_2_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.2";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазы.Обновление_1_1_3_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.4.2";
	Обработчик.Процедура = "ItobОбновлениеИнформационнойБазы.Обновление_1_1_4_2";
	
	Возврат Обработчики;


КонецФункции // ОбработчикиОбновления()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЛОГИКИ ОБНОВЛЕНИЯ 

// Выполнить неинтерактивное обновление данных ИБ.
//
Функция ВыполнитьОбновлениеИнформационнойБазы() Экспорт

	ВерсияМетаданных = ПолучитьНомерВерсииКонфигурации();
	ВерсияДанных = ВерсияИБ("");
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	 
	// sidm Rarus --->
	
	//Закоментировано, т.к. описание обновлений выводится в рамках конфигурации УАТ Проф, а не отдельно 
	//по подсистеме ИТОБ ЦСМ
	////Если НЕ НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияДанных) Тогда
	////	Возврат ДокументОписаниеОбновлений(Неопределено);
	////КонецЕсли;
	////Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	////	НСтр("ru = 'Изменился номер версии конфигурации: с ""%1"" на ""%2"". Будет выполнено обновление информационной базы.'"),
	////	ВерсияДанных, ВерсияМетаданных);
	////ЗаписатьИнформацию(Сообщение);
	////// Проверка наличия прав для обновления информационной базы.
	////Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
	////	Сообщение = НСтр("ru = 'Недостаточно прав для выполнения обновления. Обратитесь к системному администратору.'");
	////	ЗаписатьОшибку(Сообщение);
	////	ВызватьИсключение Сообщение;
	////КонецЕсли;
	////
	////
	////// Установка монопольного режима для обновления информационной базы.
	////Попытка
	////	УстановитьМонопольныйРежим(Истина);
	////Исключение
	////	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	////		НСтр("ru = 'Невозможно выполнить обновление информационной базы, так как к ней подключены другие сеансы.
	////			 |Обратитесь к системному администратору.
	////			 |
	////			 |Подробности ошибки:
	////			 |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	////	
	////	ЗаписатьОшибку(Сообщение);
	////	
	////	ВызватьИсключение Сообщение;
	////КонецПопытки;
	
	// sidm Rarus ---<

	
	Попытка
		СписокОбработчиковОбновления = ОбработчикиОбновления();
				
		ВыполненныеОбработчики = ВыполнитьИтерациюОбновления("ЦентрСпутниковогоМониторинга", ВерсияМетаданных,
			СписокОбработчиковОбновления);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление информационной базы на версию ""%1"" завершилось с ошибками: 
				|%2'"), ВерсияМетаданных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьОшибку(Сообщение);
		// Отключение монопольного режима.
		
		// sidm Rarus --->

		////УстановитьМонопольныйРежим(Ложь);
		
		// sidm Rarus ---<
		
		ВызватьИсключение;
	КонецПопытки;
	
	// Отключение монопольного режима.
	// sidm Rarus --->
	////УстановитьМонопольныйРежим(Ложь);
	// sidm Rarus ---<
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновление информационной базы на версию ""%1"" выполнено успешно.'"), ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	ВыводитьОписаниеОбновлений = Истина;
		
	Адрес = "";
	Если ВыводитьОписаниеОбновлений Тогда
		Адрес = ПоместитьВоВременноеХранилище(ВыполненныеОбработчики, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для компонента ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//  ВерсияМетаданныхИБ       – Строка – версия метаданных, до которой необходимо
//                                      выполнить обновление.
//  ОбработчикиОбновления    – Соответствие – список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   – выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления) Экспорт
	
	ТекущаяВерсияИБ = ВерсияИБ(ИдентификаторБиблиотеки);
	Если ПустаяСтрока(ТекущаяВерсияИБ) Тогда
		 ТекущаяВерсияИБ = "0.0.0.0";
	КонецЕсли;
	НоваяВерсияИБ = ТекущаяВерсияИБ;
	ВерсияМетаданных = ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	
	Если ТекущаяВерсияИБ = ВерсияМетаданных Тогда
		Возврат Новый ДеревоЗначений();
	КонецЕсли;
	
	ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		
		Если Версия.Версия = "*" Тогда
			//Сообщение = НСтр("ru = 'Выполняются обязательные процедуры обновления информационной базы.'");
		Иначе
			НоваяВерсияИБ = Версия.Версия;
			
			Сообщение = НСтр("ru = 'Выполняется обновление подсистемы Itob ЦСМ %3 с версии %1 на версию %2.'");
			
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			                 ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
		КонецЕсли;
		
		ЗаписатьИнформацию(Сообщение);
		
		Для Каждого Обработчик Из Версия.Строки Цикл
			ВыполнитьБезопасно(Обработчик.Процедура);
		КонецЦикла;
		
		Если Версия.Версия = "*" Тогда
			//Сообщение = НСтр("ru = 'Выполнены обязательные процедуры обновления информационной базы.'");
		Иначе
			// Установка номера версии информационной базы
			УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ);
			
			//Сообщение = НСтр("ru = 'Выполнено обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
						
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			  ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
			ТекущаяВерсияИБ = НоваяВерсияИБ;
			
		КонецЕсли;
		ЗаписатьИнформацию(Сообщение);
		
	КонецЦикла;
	
	// Установка номера версии информационной базы
	Если ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ);
	КонецЕсли;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

Функция ОбработчикиОбновленияВИнтервале(Знач ВсеОбработчики, Знач ВерсияОт, Знач ВерсияДо)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	Источник = Новый ОписаниеИсточникаДанных(ВсеОбработчики);
	Источник.Колонки.Версия.Измерение = Истина;
	ПостроительЗапроса.ИсточникДанных = Источник;
	ПостроительЗапроса.Измерения.Добавить("Версия");
	ПостроительЗапроса.Выполнить();
	ВыборкаИтоги = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыполняемыеОбработчики = Новый ДеревоЗначений();
	ВыполняемыеОбработчики.Колонки.Добавить("Версия");
	ВыполняемыеОбработчики.Колонки.Добавить("Процедура");
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Если ВыборкаИтоги.Версия <> "*" И 
			НЕ (СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияОт) > 0 
				И СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияДо) <= 0) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВерсии = Неопределено;
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Процедура = Null Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Опциональный = Истина И ВерсияОт = "0.0.0.0" Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаВерсии = Неопределено Тогда
				СтрокаВерсии = ВыполняемыеОбработчики.Строки.Добавить();
				СтрокаВерсии.Версия = ВыборкаИтоги.Версия;
			КонецЕсли;
			Обработчик = СтрокаВерсии.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Обработчик, Выборка, "Версия, Процедура");
		КонецЦикла;
		
	КонецЦикла;
	
	// упорядочить обработчики по возрастанию версий
	КоличествоСтрок = ВыполняемыеОбработчики.Строки.Количество();
	Для Инд1 = 2 По КоличествоСтрок Цикл
		Для Инд2 = 0 По КоличествоСтрок - Инд1 Цикл
			
			Если ВыполняемыеОбработчики.Строки[Инд2].Версия = "*" Тогда
				Результат = -1;
			ИначеЕсли ВыполняемыеОбработчики.Строки[Инд2+1].Версия = "*" Тогда
				Результат = 1;
			Иначе
				Результат = СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВыполняемыеОбработчики.Строки[Инд2].Версия, ВыполняемыеОбработчики.Строки[Инд2+1].Версия);
			КонецЕсли;	
			
			Если Результат > 0  Тогда 
				ВыполняемыеОбработчики.Строки.Сдвинуть(Инд2, 1);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

Функция ВерсияИБ(Знач ИдентификаторБиблиотеки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = СокрЛП(Константы.ItobНомерВерсииКонфигурации.Получить());
	
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии) 
	
	Константы.ItobНомерВерсииКонфигурации.Установить(НомерВерсии);
	
КонецПроцедуры

Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Опциональный");
	Возврат Обработчики;
	
КонецФункции


Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
    	
	ВерсияМетаданных = ПолучитьНомерВерсииКонфигурации();
	ВерсияДанных = Константы.ItobНомерВерсииКонфигурации.Получить();
	
	Возврат НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияДанных);	

КонецФункции // НеобходимоОбновлениеИнформационнойБазы()

Функция ПолучитьНомерВерсииКонфигурации()

	Возврат Метаданные.Константы.ItobНомерВерсииКонфигурации.Комментарий;

КонецФункции // ПолучитьНомерВерсииКонфигурации()

// Проверить права текущего пользователя на выполнение обновления информационной базы.
//
Функция ЕстьПраваНаОбновлениеИнформационнойБазы() Экспорт
	
	Возврат ПравоДоступа("МонопольныйРежим", Метаданные) И ПравоДоступа("Администрирование", Метаданные);
	
КонецФункции

Функция ПроверитьНевозможностьОбновленияИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции

// Проверить, возможно ли выполнять обновление информационной базы.
//
Функция ВозможноВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	Результат = ПроверитьНевозможностьОбновленияИнформационнойБазы();
	
	Если Результат Тогда
		Сообщение = НСтр("ru = 'Информационная база заблокирована в связи с обновлением версии конфигурации. Работа системы будет завершена.
		                       |Обратитесь к системному администратору за подробностями.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	КонецЕсли;
	
	Возврат НЕ Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) 
	
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
	
КонецФункции

// Выполнить экспортную процедуру без параметров по имени.
//
//  Если доступа к реквизиту нет, будет исключение прав доступа.
//  В правильно спроектированном решении, либо используется предварительный
// переход в привилегированный режим, либо правильная настройка ролей,
// либо попытка с обработкой исключения.
// 
// Параметры
//  ИмяЭкспортнойПроцедуры – Строка    – имя экспортной процедуры в формате 
//										 <имя объекта>.<имя процедуры>, где <имя объекта> - это
// 										 общий модуль или модуль менеджера объекта.
//
// Пример:
//  ВыполнитьБезопасно("МойОбщийМодуль.МояПроцедура"); 
//
Процедура ВыполнитьБезопасно(Знач ИмяЭкспортнойПроцедуры) Экспорт
	
	// Проверка предусловий на формат ИмяЭкспортнойПроцедуры.
	ЧастиИмени = Общегоназначения.РазложитьСтрокуВМассивПодстрок(ИмяЭкспортнойПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если (Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено)
 		И (Метаданные.Обработки.Найти(ИмяОбъекта) = Неопределено) 
 		И (Метаданные.Документы.Найти(ИмяОбъекта) = Неопределено) 
 		И (Метаданные.Справочники.Найти(ИмяОбъекта) = Неопределено)
 		И (Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) = Неопределено) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;

	Выполнить ИмяЭкспортнойПроцедуры + "();";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ ХОДА ОБНОВЛЕНИЯ

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

Процедура ЗаписатьИнформацию(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ОБНОВЛЕНИЙ

// Данный метод не используется в конфигурации, т.к. описание обновлений выводится в рамках 
// конфигурации УАТ Проф, оставлен для совместимости и простоты обновления подсистемы ИТОБ. 
Функция ДокументОписаниеОбновлений(Знач ОбработчикиОбновления) Экспорт
	
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент();
	
	//Если ОбработчикиОбновления = Неопределено Тогда
	//	Возврат ДокументОписаниеОбновлений;
	//КонецЕсли;
	//
	//МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ItobОписаниеИзмененийСистемы");
	//Если МакетОписаниеОбновлений <> Неопределено Тогда
	//	МакетОписаниеОбновлений = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
	//Иначе	
	//	МакетОписаниеОбновлений = Новый ТабличныйДокумент();
	//КонецЕсли;
	//
	//Для Каждого Версия Из ОбработчикиОбновления.Строки Цикл
	//	
	//	Если Версия.Версия = "*" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ВывестиОписаниеИзменений(Версия.Версия, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	//	
	//КонецЦикла;
	//
	Возврат ДокументОписаниеОбновлений;
	
КонецФункции

// Вывести описания изменений в указанной версии
//
// Параметры
//  НомерВерсии  – Строка - номер версии, для которого выводится описание из макета
//                          табличного документа МакетОписаниеОбновлений в табличный документ 
//                          ДокументОписаниеОбновлений
//
Процедура ВывестиОписаниеИзменений(Знач НомерВерсии, ДокументОписаниеОбновлений, МакетОписаниеОбновлений) Экспорт
	
	Номер = СтрЗаменить(НомерВерсии, ".", "_");
	
	Если МакетОписаниеОбновлений.Области.Найти("Шапка" + Номер) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + Номер));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + Номер);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + Номер));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры
