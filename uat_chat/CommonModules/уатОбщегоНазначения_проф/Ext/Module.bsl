//Возвращает значение реквизитов ТС из регистра сведений
// Параметры: 	ТС - ссылка на справочник ОС - транспортное средство,
//				Реквизит - строка - имя реквизита сведений, значение которого хотим получить,
//					если пустая строка, то запрашиваются все реквизиты,
//				ДатаСреза - дата - дата, на которую запрашиваются сведения,
//				СведенияЕсть - булево - флаг заполнения сведений,
//				флСообщать - булево - флаг сообщения о незаполнении сведений.
// Возвращаемое значение: структура сведений по ТС
Функция уатПрочитатьРеквизитыТС(ТС, Реквизит = "", ДатаСреза = Неопределено, СведенияЕсть = Истина, флСообщать = Истина) ЭКСПОРТ
	СведенияЕсть = Истина;
	Реквизиты = Метаданные.Справочники.уатТС.Реквизиты;
	СтруктураРеквизитовТС = Новый Структура;
	
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") ИЛИ ТипЗнч(ТС) = Тип("СправочникСсылка.уатОборудование") Тогда
		Если Реквизит = "" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	уатТС.*,
			|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
			|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
			|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.уатТС КАК уатТС
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних
			|		ПО уатТС.Ссылка = уатМестонахождениеТССрезПоследних.ТС
			|ГДЕ
			|	уатТС.Ссылка = &ТС";
		Иначе
			Запрос = Новый Запрос;
			Если (Реквизит = "Организация" или Реквизит = "Колонна" или Реквизит = "Подразделение") Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
				|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
				|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение
				|ИЗ
				|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
			Иначе
				Запрос.Текст = 
				"ВЫБРАТЬ уатТС." + Реквизит + "
				|ИЗ
				|	Справочник.уатТС КАК уатТС
				|ГДЕ
				|	уатТС.Ссылка = &ТС";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Дата", ?(ДатаСреза = Неопределено, ТекущаяДата(), ДатаСреза));
		Запрос.УстановитьПараметр("ТС", ТС);
		Результат = Запрос.Выполнить();
		ВыборкаДетали = Результат.Выбрать();
		
		Если ВыборкаДетали.Следующий() Тогда
			Если Реквизит = "" Тогда //все измерения
				Для Каждого ТекЭлемент Из Реквизиты Цикл
					СтруктураРеквизитовТС.Вставить(ТекЭлемент.Имя, ВыборкаДетали[ТекЭлемент.Имя]);
				КонецЦикла;
				Если ВыборкаДетали.Организация = NULL Тогда
					СтруктураРеквизитовТС.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
				Иначе
					СтруктураРеквизитовТС.Вставить("Организация", ВыборкаДетали.Организация);
				КонецЕсли;
				Если ВыборкаДетали.Колонна = NULL Тогда
					СтруктураРеквизитовТС.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
				Иначе
					СтруктураРеквизитовТС.Вставить("Колонна", ВыборкаДетали.Колонна);
				КонецЕсли;
				Если ВыборкаДетали.Подразделение = NULL Тогда
					СтруктураРеквизитовТС.Вставить("Подразделение", Неопределено);
				Иначе
					СтруктураРеквизитовТС.Вставить("Подразделение", ВыборкаДетали.Подразделение);
				КонецЕсли;
			Иначе
				СтруктураРеквизитовТС.Вставить(Реквизит, ВыборкаДетали[Реквизит])
			КонецЕсли;
			
		Иначе //заполняем пустыми значениями, в коде могут быть обращения к отсутствующим полям 
			Если Реквизит = "" Тогда //все измерения
				Для Каждого ТекЭлемент Из Реквизиты Цикл
					ТекТип = ТекЭлемент.Тип;
					ЗначПоУмолчанию = ТекТип.ПривестиЗначение();
					СтруктураРеквизитовТС.Вставить(ТекЭлемент.Имя, ЗначПоУмолчанию);
				КонецЦикла;
				СтруктураРеквизитовТС.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Подразделение", Неопределено);
				
			Иначе
				ТекИзмерение = Реквизиты.Найти(Реквизит);
				Если ТекИзмерение <> Неопределено Тогда
					ТекТип = ТекИзмерение.Тип;
					ЗначПоУмолчанию = ТекТип.ПривестиЗначение();
					СтруктураРеквизитовТС.Вставить(Реквизит, ЗначПоУмолчанию);
				Иначе
					СтруктураРеквизитовТС.Вставить(Реквизит, Неопределено);
				КонецЕсли;
				СтруктураРеквизитовТС.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Подразделение", Неопределено);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТС) И флСообщать Тогда
				Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
					Сообщить("Транспортное средство <" + уатОбщегоНазначения.уатПредставлениеТС(ТС) + ">: отсутствуют сведения!", СтатусСообщения.Внимание);
				Иначе
					Сообщить("Оборудование <" + уатОбщегоНазначения.уатПредставлениеТС(ТС) + ">: отсутствуют сведения!", СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			СведенияЕсть = Ложь;
			
		КонецЕсли;
		
		Возврат	СтруктураРеквизитовТС;
	Иначе
		Возврат ТС;
	КонецЕсли;
КонецФункции // уатПрочитатьРеквизитТС()


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ СПИСАНИЯ ГСМ

// Возвращает результат запроса по остаткам ГСМ по партиям
//
//
Функция уатПолучитьОстаткиПартийГСМ(МоментВремени, СпособОценкиМПЗ, ТС, ГСМ, Колонна = Неопределено)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиГСМ.Партия КАК Партия,
	|	ОстаткиГСМ.ТС КАК ТС,
	|	ОстаткиГСМ.ГСМ КАК ГСМ,
	|	ОстаткиГСМ.Колонна КАК Колонна,
	|	ЕСТЬNULL(ОстаткиГСМ.КоличествоОстаток, 0) КАК Количество,
	|	ОстаткиГСМ.СтоимостьОстаток КАК Стоимость,
	|	ОстаткиГСМ.СтоимостьУпрОстаток КАК СтоимостьУпр
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(
	|		&Момент,
	|		ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|ГДЕ
	|	ОстаткиГСМ.КоличествоОстаток > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата УБЫВ";
	КонецЕсли;
	
	//получаем аналоги
	тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ГСМ);
	
	//добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ = ГСМ;
	НоваяСтрока.Аналог = ГСМ;
	
	////колонны ТС (для УАТ ПРОФ)
	//ТекКолонна = Колонна;
	//Если Колонна = Неопределено Тогда
	//	СтруктураМестонахождение = уатОбщегоНазначения.МестонахождениеТС(ТС, МоментВремени);
	//	ТекКолонна = СтруктураМестонахождение.Колонна;
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Колонна", ТекКолонна);
	//
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ГСМ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Возврат Запрос.Выполнить();
КонецФункции

//Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГСМ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияГСМ - Сформированная таблица значений,
//  ПоДокументу - булево, Истина - берем данные из документа и рассчитываем стоимость. Ложь - читаем данные из регистра
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция уатПодготовитьТаблицуСписанияГСМ(ДокументОбъект, ТаблицаДляСписанияГСМ, ПоДокументу, вхСредняяЦена = 0, СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияГСМ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ГСМ");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Колонна");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Стоимость");
	
	Если ПоДокументу Тогда
		//заполняем таблицу по данным документа. Рассчитываем стоимость ГСМ
		// получим результат запроса по таблице ГСМ в пут. листе
		РезультатЗапросаПоГСМ = Новый Запрос();
		
		МоментВремениОстПартий = ДокументОбъект.МоментВремени();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатПутевойЛистРасходГСМ.ГСМ,
			|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
			|	уатПутевойЛистРасходГСМ.ТС,
			|	уатПутевойЛистРасходГСМ.Ссылка.ДатаВозвращения КАК Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
			|	ПО уатПутевойЛистРасходГСМ.ТС = уатМестонахождениеТС.ТС
			|ГДЕ
			|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
			|	И уатПутевойЛистРасходГСМ.Активен = &Активен";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Активен", Истина);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаВозвращения) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаВозвращения, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатСливГСМ.ТС,
			|	уатСливГСМ.ГСМ,
			|	уатСливГСМ.АЗС.Контрагент_Склад КАК Склад,
			|	уатСливГСМ.Количество КАК СписываемоеКоличество,
			|	уатСливГСМ.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатСливГСМ.Дата,
			|	уатМестонахождениеТС.Колонна
			|ИЗ
			|	Документ.уатСливГСМ КАК уатСливГСМ
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата) КАК уатМестонахождениеТС
			|	ПО уатСливГСМ.ТС = уатМестонахождениеТС.ТС
			|
			|ГДЕ
			|	уатСливГСМ.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент", 1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Дата", ДокументОбъект.МоментВремени());
			
		КонецЕсли;	
		РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
		
		ВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выбрать();
		
		СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
		
		//Перебираем строки ГСМ, который надо списать
		Пока ВыборкаЗапросаПоГСМ.Следующий() Цикл
			НадоСписатьКоличество		= ВыборкаЗапросаПоГСМ.СписываемоеКоличество;
			
			//Получение остатков ГСМ по партиям
			РезультатЗапросаПартииГСМ = уатПолучитьОстаткиПартийГСМ(МоментВремениОстПартий, СпособОценкиМПЗ, ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ, ВыборкаЗапросаПоГСМ.Колонна);
			ВыборкаЗапросаПартииГСМ		= РезультатЗапросаПартииГСМ.Выбрать();
			
			//КоличествоОстаток = уатОстатокГСМнаТС(ДокументОбъект.МоментВремени(),
			//	ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			//Если НадоСписатьКоличество > КоличествоОстаток Тогда
			//	//Расход по ТС превышает остаток
			//	ВсеОК=Ложь;
			//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество
			//		+ ", остаток: " + КоличествоОстаток;
			//КонецЕсли; 
			
			Если ВсеОК Тогда
				
				НадоСписатьСумму = 0;
				НадоСписатьСуммуУпр = 0;
				Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
					Попытка
						мТаблицаДляСуммы	= РезультатЗапросаПартииГСМ.Выгрузить();
						НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
						НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
					Исключение
					КонецПопытки;	
				КонецЕсли;
				
				Пока НадоСписатьКоличество > 0 Цикл
					Если ВыборкаЗапросаПартииГСМ.Следующий() Тогда
						
						мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииГСМ.Количество);
						мКоличество = ?(мКоличество < 0, 0, мКоличество);
						
						Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
							мСтоимость = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииГСМ.Стоимость);
							мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииГСМ.СтоимостьУпр);
						Иначе
							Если ВыборкаЗапросаПартииГСМ.Количество = 0 Или ВыборкаЗапросаПартииГСМ.Количество < НадоСписатьКоличество Тогда
								мСтоимость = ВыборкаЗапросаПартииГСМ.Стоимость;
								мСтоимостьУпр = ВыборкаЗапросаПартииГСМ.СтоимостьУпр;
							Иначе	
								мСтоимость = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.Стоимость / ВыборкаЗапросаПартииГСМ.Количество;
								мСтоимостьУпр = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.СтоимостьУпр / ВыборкаЗапросаПартииГСМ.Количество;
								//мСтоимостьУпр = мСтоимость;
							КонецЕсли;
							
						КонецЕсли;      
						
						Если мКоличество > 0 Тогда
							НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
							НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
							НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
							НоваяСтрока.Партия = ВыборкаЗапросаПартииГСМ.Партия;
							НоваяСтрока.ГСМ = ВыборкаЗапросаПартииГСМ.ГСМ;
							НоваяСтрока.Колонна = ВыборкаЗапросаПартииГСМ.Колонна;
							НоваяСтрока.Количество = мКоличество;
							НоваяСтрока.Стоимость = мСтоимость;	
							НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
							
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") Тогда
								
								НоваяСтрока.Склад		= ВыборкаЗапросаПоГСМ.Склад;
								НоваяСтрока.Номенклатура= ВыборкаЗапросаПартииГСМ.ГСМ;
								НоваяСтрока.Сумма		= мСтоимость;
								НоваяСтрока.Коэффициент	= ВыборкаЗапросаПоГСМ.Коэффициент;
								
							КонецЕсли;	
							
							мСписаноКоличество 		= мСписаноКоличество + НоваяСтрока.Количество;
							мСписаноСтоимость 		= мСписаноСтоимость + НоваяСтрока.Стоимость;
						КонецЕсли;
						
						НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
						НадоСписатьСумму = НадоСписатьСумму - мСтоимость;
						НадоСписатьСуммуУпр = НадоСписатьСуммуУпр - мСтоимостьУпр;
						
					Иначе
						НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
						НоваяСтрока.Партия = Неопределено;
						НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
						НоваяСтрока.Колонна = ВыборкаЗапросаПоГСМ.Колонна;
						НоваяСтрока.Количество = НадоСписатьКоличество;
						НоваяСтрока.Стоимость = НадоСписатьСумму;	
						НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
						
						НадоСписатьКоличество = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		вхСредняяЦена = ?(мСписаноКоличество=0, 0,окр(мСписаноСтоимость / мСписаноКоличество,2));
		
	Иначе
		
		//заполняем таблицу по движениям регистра документа. Стоимость ГСМ берем из регистра
		
		РезультатЗапросаПоГСМ 		= Новый Запрос();
		РезультатЗапросаПоГСМ.Текст	=
		"ВЫБРАТЬ
		|	уатОстаткиГСМнаТС.ТС,
		|	уатОстаткиГСМнаТС.ГСМ,
		|	уатОстаткиГСМнаТС.Колонна,
		|	уатОстаткиГСМнаТС.Количество,
		|	уатОстаткиГСМнаТС.Стоимость,
		|	уатОстаткиГСМнаТС.СтоимостьУпр
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
		|ГДЕ
		|	уатОстаткиГСМнаТС.Регистратор = &Ссылка";
		РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
		
		ВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выбрать();
		
		//Перебираем строки ГСМ, который надо списать
		Пока ВыборкаЗапросаПоГСМ.Следующий() Цикл
			НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
			НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
			НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
			НоваяСтрока.Колонна = ВыборкаЗапросаПоГСМ.Колонна;
			НоваяСтрока.Количество = ВыборкаЗапросаПоГСМ.Количество;
			НоваяСтрока.Стоимость = ВыборкаЗапросаПоГСМ.Стоимость;
			НоваяСтрока.СтоимостьУпр = ВыборкаЗапросаПоГСМ.СтоимостьУпр;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()

//Функция возвращает выборку результата запроса со структурой норм расхода ГСМ
// на указанную дату среза
//
Функция ПолучитьНормыРасходаГСМ(ТС, ЗаданнаяДата, ГСМ) ЭКСПОРТ
	
	//список ГСМ с учетом аналогов
	СписокГСМ = Новый СписокЗначений;
	СписокГСМ.Добавить(ГСМ);
	
	ТаблицаГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ГСМ, Перечисления.уатГруппыГСМ.Топливо);
	
	Для Каждого ТекСтрока Из ТаблицаГСМ Цикл
		СписокГСМ.Добавить(ТекСтрока.Аналог);
	КонецЦикла;	
	
	//запрос по ТС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходаГСМ.*
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|		&Период,
	|		МодельТС = &ТС
	|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
	Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
	Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
	Запрос.УстановитьПараметр("ТС", ТС);
	Рез = Запрос.Выполнить();
	
	//если по конкретному ТС не найдены нормы ГСМ, то ищем нормы по модели ТС
	Если Рез.Пустой() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходаГСМ.*
		|ИЗ
		|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
		|		&Период,
		|		МодельТС = &МодельТС
		|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
		Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
		Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
		Запрос.УстановитьПараметр("МодельТС", ТС.Модель);
		Рез = Запрос.Выполнить();
	КонецЕсли;
	
	РезЗапроса = Запрос.Выполнить();
	Выборка = РезЗапроса.Выбрать();
	НормаРасхода = Новый Структура;
	
	Выборка.Следующий();
	Для каждого ТекКолонка ИЗ РезЗапроса.Колонки Цикл
		Если ТекКолонка.Имя = "ГСМ" И НЕ ЗначениеЗаполнено(Выборка["ГСМ"]) тогда
			НормаРасхода.Вставить( "ГСМ", Справочники.Номенклатура.ПустаяСсылка());	
			Продолжить;
		КонецЕсли;
		Если НЕ ТС.Модель.НаличиеСпидометра И ТекКолонка.Имя = "ЛинейнаяНорма" И НЕ ЗначениеЗаполнено(Выборка["ЛинейнаяНорма"]) тогда
			НормаРасхода.Вставить("ЛинейнаяНорма", 0.0001);	
			Продолжить;
		КонецЕсли;
		НормаРасхода.Вставить( ТекКолонка.Имя, ?(ЗначениеЗаполнено(Выборка[ТекКолонка.Имя]),Выборка[ТекКолонка.Имя],0));
	КонецЦикла;
	
	Возврат НормаРасхода;
КонецФункции // уатПолучитьНормыРасходаГСМ

//Функция возвращает таблицу норм расхода ТЖ на указанную дату среза.
//	Сначала ищет нормы на ТС, если не находит, то продолжает искать по модели ТС.
//
Функция ПолучитьНормыРасходаТЖ(ТС, ЗаданнаяДата) ЭКСПОРТ
	//запрос по ТС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходаТехническихЖидкостей.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.уатМоделиТС
	|			ТОГДА НормыРасходаТехническихЖидкостей.МодельТС
	|		ИНАЧЕ НормыРасходаТехническихЖидкостей.МодельТС.Модель
	|	КОНЕЦ КАК МодельТС,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.уатТС
	|			ТОГДА НормыРасходаТехническихЖидкостей.МодельТС
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ТС,
	|	НормыРасходаТехническихЖидкостей.ГСМ,
	|	НормыРасходаТехническихЖидкостей.Норма,
	|	НормыРасходаТехническихЖидкостей.НормаНаМоточас,
	|	ВЫБОР
	|		КОГДА НормыРасходаТехническихЖидкостей.МодельТС ССЫЛКА Справочник.уатТС
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.уатНормыРасходаТехническихЖидкостей.СрезПоследних(
	|			&Период,
	|			МодельТС = &ТС
	|				ИЛИ МодельТС = &МодельТС) КАК НормыРасходаТехническихЖидкостей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("МодельТС", ТС.Модель);
	Рез = Запрос.Выполнить().Выгрузить();
	
	//удаляем лишние строки, поскольку приоритет норм для ТС выше, чем для моделей
	мсвСтрокУдалить = Новый Массив;
	Если Рез.Количество() > 1 Тогда
		Для Каждого ТекСтрокаНормы Из Рез Цикл
			//строки с приоритетом = 2 (это модели)
			Если ТекСтрокаНормы.Приоритет = 2 Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСтрокиПоиска = Рез.НайтиСтроки(Новый Структура("МодельТС, ГСМ, Приоритет", ТС.Модель, ТекСтрокаНормы.ГСМ, 2));
			Для Каждого ТекСтрокаЛишняя Из мсвСтрокиПоиска Цикл //нашли лишние строки по модели
				мсвСтрокУдалить.Добавить(ТекСтрокаЛишняя);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Для Каждого ТекСтрокаДляУдаления Из мсвСтрокУдалить Цикл
		Рез.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции // уатПолучитьНормыРасходаТЖ

функция уатПолучитьНормыРасходаГСМ(ТС, ЗаданнаяДата, ГСМ) Экспорт 
	Возврат ПолучитьНормыРасходаГСМ(ТС, ЗаданнаяДата, ГСМ);
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПЛАНИРОВАНИЯ РЕСУРСОВ (РЕМОНТНЫХ ЦЕХОВ)

// Получение ТЗ описывающую полную таблицу графика
//
// Параметры:
//  График 		     - ТаблицаЗначений - График по которому вычисляется продолжительность
//  НачалоГрафика    - Дата			   - Дата начала вычисления продолжительности
//  ОкончаниеГрафика - Дата            - Дата окончания вычисления продолжительности
//  ВидыИнтервалов   - Массив          - Массив либо элемент перечисления вид интервала,
//					 для которого вычисляется продолжительность
//	ВидыДней         - Массив          - Массив либо элемент перечисления вид дня,
//					 для которого вычисляется продолжительность
// Возвращаемое значение:	
//	ТаблицаЗначений - Таблица графика
//
Функция кпПолучитьГрафик(График, Знач НачалоГрафика, Знач ОкончаниеГрафика, Знач ВидыИнтервалов = Неопределено, Знач ВидыДней = Неопределено) Экспорт
	ТаблицаГрафика = Новый ТаблицаЗначений;
	ТаблицаГрафика.Колонки.Добавить("Дата",					 Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаГрафика.Колонки.Добавить("НачалоРабочегоВремени", Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаГрафика.Колонки.Добавить("КонецРабочегоВремени",  Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаГрафика.Колонки.Добавить("Продолжительность",	 Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТаблицаГрафика.Колонки.Добавить("Смена",				 Новый ОписаниеТипов("СправочникСсылка.уатСмены"));
	
	// Проверка корректности параметров
	Если (НЕ ЗначениеЗаполнено(График)) ИЛИ (НЕ ЗначениеЗаполнено(НачалоГрафика))
		ИЛИ (НЕ ЗначениеЗаполнено(ОкончаниеГрафика)) ИЛИ График.ВидГрафика.Пустая() Тогда
		
		Возврат ТаблицаГрафика;
	КонецЕсли;
	
	НачалоГрафика = НачалоДня(НачалоГрафика);
	ОкончаниеГрафика = НачалоДня(ОкончаниеГрафика);
	
	//таблицу получаем из регистра
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГрафикРаботы КАК График,
	|	ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|	Дата КАК Дата,
	|	Смена КАК Смена
	|ИЗ
	|	РегистрСведений.уатГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикРаботы = &График
	|	И ОсновноеЗначение > 0
	|	И ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.уатВидыУчетаВремени.ПоДням)
	|	И ГрафикРаботы.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.уатВидыРабочихГрафиков.Сменный)
	|	И (Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ГрафикРаботы,
	|	ГрафикРаботы.ВидГрафика,
	|	Дата,
	|	Смена
	|ИЗ
	|	РегистрСведений.уатГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикРаботы = &График
	|	И ОсновноеЗначение > 0
	|	И ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.уатВидыУчетаВремени.ПоЧасам)
	|	И ГрафикРаботы.ВидГрафика <> ЗНАЧЕНИЕ(Перечисление.уатВидыРабочихГрафиков.Сменный)
	|	И (Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)");
	
	Запрос.УстановитьПараметр("График", График);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоГрафика);
	Запрос.УстановитьПараметр("ДатаОкончания", ОкончаниеГрафика);
	
	ТаблицаГрафикаВрем = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрокаВрем Из ТаблицаГрафикаВрем Цикл
		Если ТекСтрокаВрем.ВидГрафика = Перечисления.уатВидыРабочихГрафиков.Сменный Тогда
			тблПериодовСмены = ТекСтрокаВрем.Смена.ПериодыСмены;
		Иначе
			тблПериодовСмены = ТекСтрокаВрем.График.ПериодыСмены;
		КонецЕсли;
		Для Каждого ТекИнтервал Из тблПериодовСмены Цикл
			НоваяСтрока = ТаблицаГрафика.Добавить();
			НоваяСтрока.Дата = ТекСтрокаВрем.Дата;
			НоваяСтрока.НачалоРабочегоВремени = ТекИнтервал.ВремяНачала;
			НоваяСтрока.КонецРабочегоВремени = ТекИнтервал.ВремяОкончания;
			НоваяСтрока.Продолжительность = '00010101' + (ТекИнтервал.ВремяОкончания - ТекИнтервал.ВремяНачала);
			НоваяСтрока.Смена = ТекСтрокаВрем.Смена;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаГрафика;
КонецФункции

// Функция возвращает таблицу объектов из регистров сведений "ГрафикРаботыРесурсов" и, возможно, "Напоминания"
//
// Параметры:
//   Ресурс1 				   – Ссылка - Значение первого ресурса для отбора
//   Ресурс2 				   – Ссылка - Значение второго ресурса для отбора
//   УчитыватьПорядокРесурсов  – Булево - Определяет, будет ли учитываться порядок значений ресурсов при выборке.
//                              Если равен "Ложь", то будут выбираться все записи, где есть значение Ресурс1
//								(и возможно Ресурс2) независимо от того, где находится это значение в записи
//								регистра - в измерении "Ресурс1" или в "Ресурс2" 
//   ДатаНачала  			   - Дата   - Дата начала выборки объектов
//   ДатаОкончания 			   - Дата   - Дата окончания выборки объектов
//   ВыполнятьПолноеСоединение - Булево - Признак выполнения полного соединения с регистром "Напоминания".
//								 (Только в том в случае если в ресурс передана ссылка на пользователя!)
//   ГруппироватьПоДате 	   - Булево - Признак группировки результата запроса по дате
//   АктуальныеЗавершенные 	   - Число - 0: все, 1: только актуальные, 2: только завершенные
//
// Возвращаемое значение:
//   ТаблицаЗначений   – Таблица или дерево полученных данных (в зависимости от использования группировки)
//
Функция кпПолучитьОбъектыИзГрафикаРаботыРесурсов(Ресурс1, Ресурс2 = Неопределено, УчитыватьПорядокРесурсов = Истина,
	ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ВыполнятьПолноеСоединение = Истина, ГруппироватьПоДате = Истина, АктуальныеЗавершенные = 1, МенеджерВременныхТаблицДляЗаполнения = Неопределено, СтруктураИндексов=Неопределено) Экспорт
	
	ИспользоватьМенеджерВременныхТаблиц = (ТипЗнч(МенеджерВременныхТаблицДляЗаполнения)=Тип("МенеджерВременныхТаблиц") И Не ГруппироватьПоДате);
	
	Если ИспользоватьМенеджерВременныхТаблиц Тогда
		ОтрицательныйРезультат = Ложь;
	Иначе
		ОтрицательныйРезультат = Новый ТаблицаЗначений; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ресурс1) Тогда
		Возврат ОтрицательныйРезультат;
	КонецЕсли;
	
	Если ДатаНачала <> Неопределено И ДатаОкончания <> Неопределено Тогда
		Если ДатаОкончания < ДатаНачала Тогда
			Возврат ОтрицательныйРезультат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// если у нас есть переданный пользователь, то сделаем полное соединение с регистром напоминаний по объекту
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	ГрафикРаботыРесурсов.Дата,
	|	ГрафикРаботыРесурсов.Регистратор КАК Объект,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыРесурсов.Ресурс1 = &Сотрудник ТОГДА ГрафикРаботыРесурсов.Ресурс2
	|		ИНАЧЕ ГрафикРаботыРесурсов.Ресурс1
	|	КОНЕЦ КАК Ресурс,
	|	ГрафикРаботыРесурсов.НачалоРабочегоВремени,
	|	ГрафикРаботыРесурсов.КонецРабочегоВремени,
	|	ГрафикРаботыРесурсов.Смена,
	|	ГрафикРаботыРесурсов.Продолжительность"+?(ИспользоватьМенеджерВременныхТаблиц,Символы.ПС+" ПОМЕСТИТЬ ГрафикиРаботРесурсов","")+"
	|ИЗ
	|	РегистрСведений.уатГрафикРаботыРесурсов КАК ГрафикРаботыРесурсов
	|ГДЕ"
	+ ?(АктуальныеЗавершенные = 0, "", "
	|	ИСТИНА И");
	
	Запрос.УстановитьПараметр("Сотрудник", ?(ТипЗнч(Ресурс1) = Тип("СправочникСсылка.уатСотрудники"), Ресурс1, Ресурс2));
	
	Если ИспользоватьМенеджерВременныхТаблиц Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицДляЗаполнения;
	КонецЕсли;
	
	// заполняем условия по ресурсам и датам			   
	ТекстЗапроса = ТекстЗапроса + "
	|( " + ?(НЕ УчитыватьПорядокРесурсов, "(", "") + "(ГрафикРаботыРесурсов.Ресурс1 = &Ресурс1" +
	?(НЕ ЗначениеЗаполнено(Ресурс2), "", " И ГрафикРаботыРесурсов.Ресурс2 = &Ресурс2") + ")";
	
	Если НЕ УчитыватьПорядокРесурсов Тогда
		
		ТекстЗапроса = ТекстЗапроса + " ИЛИ 
		|	(ГрафикРаботыРесурсов.Ресурс2 = &Ресурс1" +
		?(НЕ ЗначениеЗаполнено(Ресурс2), "", " И ГрафикРаботыРесурсов.Ресурс1 = &Ресурс2") + "))";
	КонецЕсли;					   
	
	ТекстЗапроса = ТекстЗапроса + ")";
	
	Если ДатаНачала <> Неопределено Или ДатаОкончания <> Неопределено Тогда
		Если ДатаНачала <> Неопределено И ДатаОкончания <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|И
			| ((ГрафикРаботыРесурсов.Дата >= &ДатаНачала И ГрафикРаботыРесурсов.Дата <= &ДатаОкончания))";
		ИначеЕсли ДатаНачала <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|И 
			| (ГрафикРаботыРесурсов.Дата >= &ДатаНачала)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|И
			| (ГрафикРаботыРесурсов.Дата <= &ДатаОкончания)";
		КонецЕсли;	
	КонецЕсли;
	
	Если ИспользоватьМенеджерВременныхТаблиц Тогда
		Если ТипЗнч(СтруктураИндексов)=Тип("Структура") И СтруктураИндексов.Количество()>0 Тогда
			ТекстИндексируемыхПолей = "";
			Для Каждого ТекПоле Из СтруктураИндексов Цикл
				ТекстИндексируемыхПолей = ТекстИндексируемыхПолей + ?(ТекстИндексируемыхПолей="","",","+Символы.ПС)+ТекПоле.Ключ;
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + "
			|ИНДЕКСИРОВАТЬ ПО
			|	"+ТекстИндексируемыхПолей;
		КонецЕсли;
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	НачалоРабочегоВремени";
	КонецЕсли;			   
	
	Если ГруппироватьПоДате Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ ПО
		|	Дата";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Если Ресурс1 <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ресурс1", Ресурс1);
	КонецЕсли;	
	Если Ресурс2 <> Неопределено Тогда
		Запрос.УстановитьПараметр("Ресурс2", Ресурс2);
	КонецЕсли;
	Если ДатаНачала <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ГруппироватьПоДате Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ИначеЕсли ИспользоватьМенеджерВременныхТаблиц Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Количество")[0]>0;
	Иначе	
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ВыборкаЗапроса;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ОТЧЕТАМИ

// Функция возвращает строку для подстановки в условие запроса и от вида сравнения 
// заполняет структуру параметров.
// Если не задан параметр ПутьКДанным, то надо заменить "#" на имя поля,
//
// Параметры:
//	СтрокаОтбора - ЭлементОтбора - текущая строка отбора
//	Параметры	 - Структура	 - Структура параметров запроса или построителя запроса
//	ПутьКДанным	 - Строка		 - Путь к полю в запросе (ИмяТаблицы.Номенклатура.Код)
//
// Возвращаемое значение:
//	Строка - Строка подстановки в условие запроса
//
Функция СформироватьСтрокуОтбора(СтрокаОтбора, Параметры=Неопределено, ПутьКДанным="#") Экспорт
	
	СтрокаУсловия="";
	Попытка
		ИмяПараметра	= СтрЗаменить(СтрокаОтбора.ПутьКДанным,".", "");
		ВидСравн		= СтрокаОтбора.ВидСравнения;
	Исключение
		Возврат СтрокаУсловия;
	КонецПопытки;
	
	Если ТипЗнч(Параметры)<>Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ПутьКДанным)<>Тип("Строка") Тогда
		ПутьКДанным = "#";
	КонецЕсли;
	
	ТипПараметра = 1;
	Если ВидСравн = ВидСравнения.Равно Тогда
		СтрокаУсловия = ПутьКДанным+" = &"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.НеРавно Тогда
		СтрокаУсловия = ПутьКДанным+" <> &"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.ВСписке Тогда
		СтрокаУсловия = ПутьКДанным+" В (&"+ИмяПараметра+")";
	ИначеЕсли ВидСравн= ВидСравнения.ВСпискеПоИерархии Тогда
		СтрокаУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";
	ИначеЕсли ВидСравн= ВидСравнения.ВИерархии Тогда
		СтрокаУсловия = ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+")";	
	ИначеЕсли ВидСравн= ВидСравнения.НеВСписке Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.НеВСпискеПоИерархии Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.НеВИерархии Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" В ИЕРАРХИИ (&"+ИмяПараметра+"))";
	ИначеЕсли ВидСравн= ВидСравнения.Больше Тогда
		СтрокаУсловия = ПутьКДанным+">&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.БольшеИлиРавно Тогда
		СтрокаУсловия = ПутьКДанным+">=&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.Меньше Тогда
		СтрокаУсловия = ПутьКДанным+"<&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.МеньшеИлиРавно Тогда
		СтрокаУсловия = ПутьКДанным+"<=&"+ИмяПараметра;
	ИначеЕсли ВидСравн= ВидСравнения.Содержит Тогда
		СтрокаУсловия = ПутьКДанным+" ПОДОБНО &"+ИмяПараметра;
		ТипПараметра  = 2;
	ИначеЕсли ВидСравн= ВидСравнения.НеСодержит Тогда
		СтрокаУсловия = "(НЕ "+ПутьКДанным+" ПОДОБНО &"+ИмяПараметра+")";
		ТипПараметра  = 2;
	ИначеЕсли ВидСравн= ВидСравнения.Интервал Тогда
		СтрокаУсловия = ПутьКДанным+" > &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" < &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяГраницы Тогда
		СтрокаУсловия = ПутьКДанным+" >= &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" <= &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяНачало Тогда
		СтрокаУсловия = ПутьКДанным+" >= &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" < &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	ИначеЕсли ВидСравн= ВидСравнения.ИнтервалВключаяОкончание Тогда
		СтрокаУсловия = ПутьКДанным+" > &"+ИмяПараметра+"С
		|	И "+ПутьКДанным+" <= &"+ИмяПараметра+"По";
		ТипПараметра  = 3;
	КонецЕсли;
	
	Если ТипПараметра=1 Тогда
		Параметры.Вставить(ИмяПараметра, СтрокаОтбора.Значение);
	ИначеЕсли ТипПараметра=2 Тогда
		Параметры.Вставить(ИмяПараметра, "%"+СтрокаОтбора.Значение+"%");
	ИначеЕсли ТипПараметра=3 Тогда
		Параметры.Вставить(ИмяПараметра+"С", СтрокаОтбора.ЗначениеС);
		Параметры.Вставить(ИмяПараметра+"По", СтрокаОтбора.ЗначениеПо);
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции // отСформироватьСтрокуОтбора()


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С ПУТ. ЛИСТАМИ

// Процедура выполняет проверку корректности заполнения путевого листа
//
// Параметры:
//  УчетнаяПолитика - учетная политика
//  ПутевойЛист  - проверяемый путевой лист
//  Отказ        - отказ
Процедура уатПроверкаКорректностиПЛ(Организация, ПутевойЛист, Отказ) ЭКСПОРТ
	уатОбщегоНазначения.уатПроверкаКорректностиПЛ(Организация, ПутевойЛист, Отказ);
	
	Если ПутевойЛист.ТранспортноеСредство.ДатаВводаВЭксплуатацию = '00010101'
		ИЛИ ПутевойЛист.ТранспортноеСредство.ДатаВводаВЭксплуатацию > ПутевойЛист.ДатаВыезда Тогда
		ТекстСообщения = "Транспортное средство """ + уатОбщегоНазначения.уатПредставлениеТС(ПутевойЛист.ТранспортноеСредство)
		+ """ не введено в эксплуатацию на дату выезда!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	Если ПутевойЛист.ТранспортноеСредство.ДатаВыбытия <> '00010101'
		И ПутевойЛист.ТранспортноеСредство.ДатаВыбытия < ПутевойЛист.ДатаВозвращения Тогда
		ТекстСообщения = "Транспортное средство """ + уатОбщегоНазначения.уатПредставлениеТС(ПутевойЛист.ТранспортноеСредство)
		+ """ выведено из эксплуатации до даты возвращения!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрокаПрицеп Из ПутевойЛист.Прицепы Цикл
		Для Каждого ТекСтрока Из ПутевойЛист.Задание Цикл
			Если ТекСтрокаПрицеп.ТС = ТекСтрока.Прицеп1 ИЛИ ТекСтрокаПрицеп.ТС = ТекСтрока.Прицеп2 Тогда
				ТекстСообщения = "Прицеп/оборудование """ + уатОбщегоНазначения.уатПредставлениеТС(ТекСтрокаПрицеп.ТС)
				+ """ не должно одновременно находиться и в табличной части ""Прицепы"", и в табличной части ""Задание""!";
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // утПроверкаКорректностиПЛ       

// Функция возвращает Истина в случае использования ТС какой-либо системы GPS
//
// Параметры:
//  ТС - Ссылка на транспортное средство
Функция уатПроверитьИспользованиеGPS(ТС) ЭКСПОРТ
	
	Если Константы.уатИспользуемаяСистемаGPS.Получить() = Перечисления.уатСистемаGPS._1СЦСМ Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ItobПривязкиТерминаловСрезПоследних.Объект
		|ИЗ
		|	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних КАК ItobПривязкиТерминаловСрезПоследних
		|ГДЕ
		|	ItobПривязкиТерминаловСрезПоследних.ТерминалУстановлен
		|	И ItobПривязкиТерминаловСрезПоследних.Объект = &ТС";
		
		Запрос.УстановитьПараметр("ТС", ТС);                                               
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() Тогда
			Возврат Истина;
		КонецЕсли;			
		
	ИначеЕсли Константы.уатИспользуемаяСистемаGPS.Получить() <> Перечисления.уатСистемаGPS.ПустаяСсылка() Тогда
		
		Если ЗначениеЗаполнено(ТС.ИДвСистемеНавигации) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С БИЗНЕС_ПРОЦЕССАМИ

// Функция возвращает флаг согласования документа
//
Функция ДокументСогласован(ДокументСсылка) ЭКСПОРТ
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСогласование.Ссылка
	|ИЗ
	|	БизнесПроцесс.уатСогласование КАК уатСогласование
	|ГДЕ
	|	уатСогласование.Предмет = &ДокументСсылка
	|	И уатСогласование.Завершен
	|	И (уатСогласование.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.уатРезультатыСогласования.Согласовано)
	|	ИЛИ уатСогласование.РезультатСогласования = ЗНАЧЕНИЕ(Перечисление.уатРезультатыСогласования.СогласованоСЗамечаниями))");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезЗапроса = Запрос.Выполнить();
	
	Возврат (НЕ РезЗапроса.Пустой());
КонецФункции

// Функция возвращает статус согласования документа
//Возвращаемое значение:
//	Структура с ключами
//		- Код - код статуса
//		- Статус - строковое представление статуса
//		- Ссылка - ссылка на бизнес-процесс согласования
//
Функция СтатусСогласования(ДокументСсылка) ЭКСПОРТ
	Рез = Новый Структура("Код, Статус, Ссылка");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСогласование.Ссылка,
	|	уатСогласование.Стартован,
	|	уатСогласование.Завершен
	|ИЗ
	|	БизнесПроцесс.уатСогласование КАК уатСогласование
	|ГДЕ
	|	уатСогласование.Предмет = &ДокументСсылка");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезЗапроса = Запрос.Выполнить();
	
	Если РезЗапроса.Пустой() Тогда
		Рез.Код = 0;
		Рез.Статус = "Не согласован";
	Иначе
		Выборка = РезЗапроса.Выбрать();
		Выборка.Следующий();
		Если НЕ Выборка.Стартован Тогда
			Рез.Код = 1;
			Рез.Статус = "Не согласован";
			Рез.Ссылка = Выборка.Ссылка;
		ИначеЕсли Выборка.Завершен Тогда
			Рез.Код = 3;
			Рез.Статус = "Согласован";
			Рез.Ссылка = Выборка.Ссылка;
		Иначе
			Рез.Код = 2;
			Рез.Статус = "На согласовании";
			Рез.Ссылка = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Процедура настраивает оформление шрифт/раскраску строки задачи (или бизнес-процесса)
//При выводе строки в списке
Процедура ОформитьСтрокуЗадачи(ОформлениеСтроки, ДанныеСтроки) ЭКСПОРТ
	Если ДанныеСтроки.Ссылка.Важность = Перечисления.уатВажность.Высокая Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли ДанныеСтроки.Ссылка.Важность = Перечисления.уатВажность.Низкая Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДолгиПоКонтрагенту(Контагент, Дата = Неопределено) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, Контрагент = &Контрагент) КАК уатВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	уатВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0";
	
	Если НЕ ЗначениеЗаполнено(Дата) тогда
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст,"&ДатаКон","");
	Иначе
		мЗапрос.УстановитьПараметр("ДатаКон",Конецдня(Дата));
	КонецЕсли;
	мЗапрос.УстановитьПараметр("Контрагент",Контагент);
	Возврат мЗапрос.Выполнить().Выгрузить();
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ ДЕНЕЖНЫМИ СРЕДСТВАМИ

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации = Неопределено) Экспорт
	
	Если ВидОперации = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат ВидОперации = Перечисления.уатВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.уатВидыОперацийПлатежноеПоручениеВходящее.ПрочиеРасчетыСКонтрагентами
		
	КонецЕсли;
	
КонецФункции // ЕстьРасчетыСКонтрагентами()


//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТНЫМИ ЗАДАНИЯМИ ЗАГРУЗКИ GSM

// Процедура выполняет регламентное задание ЗагрузкаДанныхDynafleet
//
Процедура ЗагрузкаДанныхDynafleet() Экспорт
	ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	Период = Константы.уатИнтервалДетализацииDynafleet.Получить();
	Логин  = Константы.уатЛогинВСистемеDynafleet.Получить();
	Пароль = Константы.уатПарольВСистемеDynafleet.Получить();
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхDynafleet.Получить().Получить();
	
	Если ТипЗнч(СтруктураДопПараметры) <> Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("РежимЗагрузки")) Тогда
		СтруктураДопПараметры.Вставить("РежимЗагрузки", 0);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ФайлЗагрузки")) Тогда
		СтруктураДопПараметры.Вставить("ФайлЗагрузки", "");
	КонецЕсли;
	
	Если СтруктураДопПараметры.РежимЗагрузки = 2 И (НЕ ЗначениеЗаполнено(СтруктураДопПараметры.ФайлЗагрузки)) Тогда 
		Сообщить("Не указан файл загрузки Dynafleet!", СтатусСообщения.Внимание);
		ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Ошибка,,, "Не указан файл загрузки");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если ВсеОК Тогда
		ТекстОшибки = "";
		Если СтруктураДопПараметры.РежимЗагрузки = 0 Тогда
			КодВозврата = уатЗащищенныеФункцииСервер.ЗагрузитьМестоположениеТСDynafleet(Логин, Пароль, Период, ТекстОшибки);
		Иначе
			КодВозврата = уатЗащищенныеФункцииСервер.ЗагрузитьМестоположениеТСизФайла(Период, СтруктураДопПараметры.ФайлЗагрузки, ТекстОшибки);
		КонецЕсли;
		
		//Сообщить("Режим загрузки = " + СтруктураДопПараметры.РежимЗагрузки);
		//Сообщить("Логин = " + Логин);
		//Сообщить("Пароль = " + Пароль);
		//Сообщить("Период = " + Период);
		//Сообщить("ФайлЗагрузки = " + СтруктураДопПараметры.ФайлЗагрузки);
		//
		//КодВозврата = 1;
		//ТекстОшибки = "Тестовая ошибка!!!";
		
		Если КодВозврата Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных Dynafleet", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
КонецПроцедуры

// Процедура выполняет регламентное задание ЗагрузкаДанныхOmnicomm
//
Процедура ЗагрузкаДанныхOmnicomm() Экспорт
	ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Информация,,, "Начало сеанса загрузки");
	
	ВсеОК = Истина;
	
	Логин			  = Константы.уатЛогинВСистемеOmnicomm.Получить();
	Пароль			  = Константы.уатПарольВСистемеOmnicomm.Получить();
	Сервер 			  = Константы.уатСерверВСистемеOmnicomm.Получить();
	Драйвер			  = Константы.уатДрайверВСистемеOmnicomm.Получить();
	ИмяБД			  = Константы.уатИмяБДВСистемеOmnicomm.Получить();
	ИмяPIPE			  = Константы.уатИмяPIPEСистемеOmnicomm.Получить();
	ИмяDSN			  = Константы.уатИмяDSNСистемеOmnicomm.Получить();
	СпособПодключения = Константы.уатСпособПодключенияКСистемеOmnicomm.Получить();
	
	СтруктураДопПараметры = Константы.уатПараметрыРеглЗаданияЗагрузкаДанныхOmnicomm.Получить().Получить();
	Если ТипЗнч(СтруктураДопПараметры) <> Тип("Структура") Тогда
		СтруктураДопПараметры = Новый Структура;
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ЗагрузитьПробегИРасходГСМ")) Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьПробегИРасходГСМ", Ложь);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ЗагрузитьДополнительныеСведения")) Тогда
		СтруктураДопПараметры.Вставить("ЗагрузитьДополнительныеСведения", Ложь);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("СписокТС")) Тогда
		СтруктураДопПараметры.Вставить("СписокТС", Новый Массив);
	КонецЕсли;
	Если (НЕ СтруктураДопПараметры.Свойство("ИнтервалЗагрузки")) Тогда
		СтруктураДопПараметры.Вставить("ИнтервалЗагрузки", "День");
	КонецЕсли;
	
	Если СтруктураДопПараметры.СписокТС.Количество() = 0 Тогда
		Сообщить("Не выбрано ни одно ТС", СтатусСообщения.Внимание);
		ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Ошибка,,, "Не выбрано ни одно ТС");
		ВсеОК = Ложь;
	КонецЕсли;
	
	Если (НЕ СтруктураДопПараметры.ЗагрузитьПробегИРасходГСМ) И (НЕ СтруктураДопПараметры.ЗагрузитьДополнительныеСведения) Тогда
		Сообщить("Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""", СтатусСообщения.Внимание);
		ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Ошибка,,, "Не указаны параметры: ""Загрузить пробег и расход ГСМ"", ""Загрузить доп. сведения""");
		ВсеОК = Ложь;
	КонецЕсли;
	
	//расчет интервала по параметрам задания
	Если ВсеОК Тогда
		ДатаПо = ТекущаяДата();
		Если СтруктураДопПараметры.ИнтервалЗагрузки = "Год" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -12);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полугодие" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -6);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Квартал" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -3);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Месяц" Тогда
			ДатаС = ДобавитьМесяц(ДатаПо, -1);
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Неделя" Тогда
			ДатаС = ДатаПо - 7*24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Сутки" Тогда
			ДатаС = ДатаПо - 24*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "12часов" Тогда
			ДатаС = ДатаПо - 12*3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Час" Тогда
			ДатаС = ДатаПо - 3600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Полчаса" Тогда
			ДатаС = ДатаПо - 1800;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "10минут" Тогда
			ДатаС = ДатаПо - 600;
		ИначеЕсли СтруктураДопПараметры.ИнтервалЗагрузки = "Минута" Тогда
			ДатаС = ДатаПо - 60;
		Иначе //если не указан, считаем что сутки
			ДатаС = ДатаПо - 24*3600;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеОК Тогда
		таблТС = Новый ТаблицаЗначений;
		таблТС.Колонки.Добавить("ТС");
		таблТС.Колонки.Добавить("ИДвСистемеНавигации");
		Для Каждого ТекТС Из СтруктураДопПараметры.СписокТС Цикл
			НоваяСтрока = таблТС.Добавить();
			НоваяСтрока.ТС = ТекТС;
			НоваяСтрока.ИДвСистемеНавигации = ТекТС.ИДвСистемеНавигации;
		КонецЦикла;
		
		ТекстОшибки = "";
		
		//Сообщить("Логин = " + Логин);
		//Сообщить("Пароль = " + Пароль);
		//Сообщить("Сервер = " + Сервер);
		//Сообщить("Драйвер = " + Драйвер);
		//Сообщить("Период = " + ДатаС + ", " + ДатаПо);
		//Сообщить("Интервал загрузки = " + СтруктураДопПараметры.ИнтервалЗагрузки);
		//Сообщить("ТС = " + СтруктураДопПараметры.СписокТС);
		//Сообщить("ЗагрузитьПробегИРасходГСМ = " + СтруктураДопПараметры.ЗагрузитьПробегИРасходГСМ);
		//Сообщить("ЗагрузитьДополнительныеСведения = " + СтруктураДопПараметры.ЗагрузитьДополнительныеСведения);
		//	
		//КодВозврата = 1;
		//ТекстОшибки = "Тестовая ошибка!!!";
		
		Если СтруктураДопПараметры.ЗагрузитьДополнительныеСведения Тогда // загружаем дополнительные сведения
			КодВозврата = уатЗащищенныеФункцииСервер.ЗагрузитьДополнительныеСведенияТСOmnicommВРегистр(Логин, Пароль, Сервер, ИмяБД, Драйвер, ИмяPIPE, ИмяDSN, СпособПодключения, ДатаС, ДатаПо, таблТС, ТекстОшибки);
		КонецЕсли;
		Если СтруктураДопПараметры.ЗагрузитьПробегИРасходГСМ Тогда // загружаем пробег и расход ГСМ
			КодВозврата = уатЗащищенныеФункцииСервер.ЗагрузитьМестоположениеТСOmnicommВРегистр(Логин, Пароль, Сервер, ИмяБД, Драйвер, ИмяPIPE, ИмяDSN, СпособПодключения, ДатаС, ДатаПо, таблТС, ТекстОшибки);
		КонецЕсли;
		
		Если КодВозврата Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Загрузка данных Omnicomm", УровеньЖурналаРегистрации.Информация,,, "Окончание сеанса загрузки");
КонецПроцедуры
