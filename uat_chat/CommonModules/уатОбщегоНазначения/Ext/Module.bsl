
#Если Клиент Тогда
	// Возвращает цвет текста для предупреждения
	//
	// Параметры:
	//  Нет
	//
	// Возвращаемое значение:
	//  Цвет - новый цвет предупреждения
	Функция уатЦветПредупрежденияВСписке() ЭКСПОРТ
		Возврат Новый Цвет(255, 0, 0);
	КонецФункции // уатЦветПредупрежденияВСписке       
	
	// Возвращает цвет фона для предупреждения
	//
	// Параметры:
	//  Нет
	//
	// Возвращаемое значение:
	//  Цвет - новый цвет предупреждения
	Функция уатЦветПредупрежденияФонаВСписке() ЭКСПОРТ
		Возврат Новый Цвет(255, 200, 200);
	КонецФункции // уатЦветПредупрежденияВСписке
	
	// Возвращает цвет для запрещенных к редактированию в списке элементов
	//
	// Параметры:
	//  Нет
	//
	// Возвращаемое значение:
	//  Цвет - новый цвет 
	Функция уатЦветЗапретаРедактированияВСписке() ЭКСПОРТ
		Возврат Новый Цвет(137,132,119);
	КонецФункции // уатЦветПредупрежденияВСписке       
	
	// Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение
	//
	Функция уатИмяCOMСоединителя() Экспорт
		СисИнфо = Новый СистемнаяИнформация;
		ПодстрокиВерсии = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");
		Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	КонецФункции 

	
	/////////////////////////////////////////////////////////////////////////////////////
	//        ИНИЦИАЛИЗАЦИЯ СЕАНСА
		
	// Процедура создает в зависимости от решения необходимую обработку инициализации
	// и запускает ее на выполнение
	Процедура уатИнициализацияСеанса() ЭКСПОРТ
		Если глКомпонентаЗащитыУАТ = Неопределено Тогда
			глКомпонентаЗащитыУАТ = Истина;
			// Обновим право "РазрешитьРаботуСУАТ". Считаем, что нужно обновлять, когда право есть, но назначение его не указано
			//(Если назначение не будет указано, то значение по умолчанию не будет получено)
			Если РольДоступна("уатАдминистратор") ИЛИ РольДоступна("уатОбновлениеОбменИФЗ")
				ИЛИ ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "" Тогда
				
				ПВХ_уатПраваИНастройки = ПланыВидовХарактеристик.уатПраваИНастройки;
				РазрешитьРаботуСУАТ = ПВХ_уатПраваИНастройки.НайтиПоНаименованию("Разрешить работу с УАТ");
				Если НЕ РазрешитьРаботуСУАТ.Пустая() И РазрешитьРаботуСУАТ.Назначение.Пустая() Тогда
					РазрешитьРаботуСУАТОбъект = РазрешитьРаботуСУАТ.ПолучитьОбъект();
					РазрешитьРаботуСУАТОбъект.Назначение = Перечисления.уатНазначениеПравИНастроек.Пользователь;
					РазрешитьРаботуСУАТОбъект.ЗначениеПоУмолчанию = Ложь;
					Попытка
						РазрешитьРаботуСУАТОбъект.Записать();
						//регистр
						ТекЗаписьПрава = РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
						ТекЗаписьПрава.Объект = ПараметрыСеанса.ТекущийПользователь;
						ТекЗаписьПрава.ПравоНастройка = РазрешитьРаботуСУАТ;
						ТекЗаписьПрава.Прочитать();
						Если НЕ ТекЗаписьПрава.Выбран() Тогда
							ТекЗаписьПрава.Объект = ПараметрыСеанса.ТекущийПользователь;
							ТекЗаписьПрава.ПравоНастройка = РазрешитьРаботуСУАТ;
							ТекЗаписьПрава.Значение = Истина;
							ТекЗаписьПрава.Записать();
						КонецЕсли;
						
						Сообщить("Обновлено право <" + РазрешитьРаботуСУАТОбъект + ">", СтатусСообщения.Информация);
						глПраваУАТ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.ТекущийПользователь);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			ЭтоОбъединеннаяКонфигурация = уатОбщегоНазначения.ЭтоОбъединеннаяКонфигурация();
			ЭтоОбъединениеСТЛЭ = уатОбщегоНазначения.ЭтоОбъединениеСТЛЭ();
			Если (НЕ ЭтоОбъединеннаяКонфигурация И НЕ ЭтоОбъединениеСТЛЭ) ИЛИ уатПраваИНастройки.уатПраво("РазрешитьРаботуСУАТ", глПраваУАТ) Тогда
				//Проверка обновлений при необходимости
				уатПроверитьОбновлениеПриЗапуске();
				мОбработка = Обработки.уатСтартСистемы.Создать();
				мОбработка.ИнициализацияСистемыУАТ();
			Иначе
				Возврат;
			КонецЕсли;
			
			// ITOB +++
			Попытка 
				ItobОбработкаСобытийСервер.УстановитьДатуНачалаВыборкиСобытий(ItobОперативныйМониторинг.ПривестиКДатеВремениПоГринвичу(ТекущаяДата()));
			Исключение
			КонецПопытки;
			//// ОбновлениеВерсииИБ - вызывается из обработки обновления УАТ ПРоф
			//ItobОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
			// Устанавливает часовой пояс текущего сеанса
			Попытка
				ItobОперативныйМониторингКлиент.ОпределениеЧасовогоПоясаСеанса();
			Исключение
			КонецПопытки;
			// ITOB --

			// показывать панель фунцкий
			Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(глЗначениеПеременной("глТекущийПользователь"), ПланыВидовХарактеристик.уатПраваИНастройки.ОткрыватьПриЗапускеПанельФункций) Тогда
				мОбработка = Обработки.уатПанельФункций.ПолучитьФорму();
				мОбработка.Открыть();
			КонецЕсли;
			
			Если уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ") тогда
				Выполнить("уатОбщегоНазначенияПривелигированный_уэ.УстановитьПараметрыСеансаУЭ()");
			КонецЕсли;

		КонецЕсли;
		
	Если  ПользователиИнформационнойБазы.ТекущийПользователь().ОсновнойИнтерфейс = Метаданные.Интерфейсы.уатМеханик Тогда
		Форма = Документы.уатРемонтныйЛист.ПолучитьФорму("ФормаСписка");
		Форма.РазрешитьСостояниеСвободное=Истина;
		//Форма.СостояниеОкна=ВариантСостоянияОкна.Свободное;		
		//Форма.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Максимизированное;
		Форма.Открыть();
	ИНачеЕсли  ПользователиИнформационнойБазы.ТекущийПользователь().ОсновнойИнтерфейс = Метаданные.Интерфейсы.уатКладовщик Тогда
		Форма = Документы.уатТТД.ПолучитьФорму("ФормаСписка");
		//Форма.СостояниеОкна=ВариантСостоянияОкна.Свободное;		
		//Форма.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Максимизированное;
		Форма.Открыть();
	КонецЕСЛИ;
		
	КонецПроцедуры
		
	
	// Процедура выполняет проверку наличия новых версий при запуске системы
	//
	Процедура уатПроверитьОбновлениеПриЗапуске() Экспорт
		ПроверятьПриЗапуске = ВосстановитьЗначение("уатПроверкаНаличияОбновленияПроверятьПриЗапуске");	
		
		Если ПроверятьПриЗапуске = Истина Тогда
			Обозреватель = Обработки.уатОбозреватель.Создать();
			Форма = Обозреватель.ПолучитьФорму("ПроверкаНаличияОбновления");
			
			Если Обозреватель.Проверить(Форма.ЭлементыФормы) Тогда
				ПоказПриПоявленииНовойВерсии = ВосстановитьЗначение("уатПроверкаНаличияОбновленияПоказПриПоявленииНовойВерсии");		
				ВерсияДистрибутива = ВосстановитьЗначение("уатПроверкаНаличияОбновленияПоследняяВерсия");
				Если ПоказПриПоявленииНовойВерсии = Истина Тогда
					Если ВерсияДистрибутива <> Форма.ЭлементыФормы.ВерсияДистрибутива.Значение Тогда
						Форма.Открыть();
					КонецЕсли;
				Иначе
					Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры
	
	// Процедура выполняет действия необходимые при завершении работы системы
	//
	Процедура уатЗавершитьРаботуСистемы(Права) Экспорт
		//Попытка
		//	Если НЕ уатПраваИНастройки.уатПраво("РазрешитьРаботуССистемойПослеВыхода", Права) Тогда 
		//		глКомпонентаЗащитыУАТ.ЗавершитьРаботу(); 
		//	КонецЕсли;
		//	//КомпонентаЗащиты = НЕОПРЕДЕЛЕНО;
		//		
		//Исключение
		//	Сообщить("Не удалось завершить работу Windows");	
		//КонецПопытки;
		//
		//СисИнфо = Новый СистемнаяИнформация;
		//СтрокаВерсии = СисИнфо.ВерсияПриложения;
		//Если Лев(СтрокаВерсии, 3) = "8.2" Тогда
		//	Если глКомпонентаЗащитыУАТ <> Неопределено Тогда
		//		глКомпонентаЗащитыУАТ.Освободить();
		//	КонецЕсли;
		//КонецЕсли;
		//глКомпонентаЗащитыУАТ = Неопределено;
		
	КонецПроцедуры
	
#КонецЕсли

// Производит проверку наличия комплекта обновления и 
// открывает форму для просмотра результатов проверки
Процедура уатПроверкаНаличияКомплектаОбновлений() Экспорт
	
	Обозреватель = Обработки.уатОбозреватель.Создать();
	Форма        = Обозреватель.ПолучитьФорму("ПроверкаНаличияОбновления");
	Обозреватель.Проверить(Форма.ЭлементыФормы);
	Форма.Открыть();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СФОРМИРОВАННЫМИ ДОКУМЕНТАМИ ТИПОВЫХ КОНФИГУРАЦИЙ

// Процедуру ищет документ УАТ для типового документа
// 
Функция уатНайтиДокументУАТДляТиповогоДокумента(вхТиповойДокумент, выхДокументУАТ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатТиповыеДокументы.ДокументУАТ
	|ИЗ
	|	РегистрСведений.уатТиповыеДокументы КАК уатТиповыеДокументы
	|ГДЕ
	|	уатТиповыеДокументы.ТиповойДокумент = &ТиповойДокумент
	|";
	
	Запрос.УстановитьПараметр("ТиповойДокумент",вхТиповойДокумент);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		выхДокументУАТ = РезультатЗапроса.ДокументУАТ;
		Если выхДокументУАТ.ПометкаУдаления Тогда
			Результат = Ложь;
		Иначе
			Результат = Истина;
		КонецЕсли;	
	Иначе
		выхДокументУАТ = Неопределено;
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

// Процедуру ищет типовой документ для документа УАТ
// 
Функция уатНайтиТиповойДокументДляДокументаУАТ(вхДокументУАТ, выхТиповойДокумент = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатТиповыеДокументы.ТиповойДокумент
	|ИЗ
	|	РегистрСведений.уатТиповыеДокументы КАК уатТиповыеДокументы
	|ГДЕ
	|	уатТиповыеДокументы.ДокументУАТ = &ДокументУАТ";
	
	Запрос.УстановитьПараметр("ДокументУАТ",вхДокументУАТ);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		выхТиповойДокумент = РезультатЗапроса.ТиповойДокумент;
		Если выхТиповойДокумент = Неопределено Тогда
			Результат = Ложь;
		Иначе	
			Если выхТиповойДокумент.ПометкаУдаления Тогда
				Результат = Ложь;
			Иначе
				Результат = Истина;
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		выхТиповойДокумент = Неопределено;
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

// Процедуру удаляет типовые документы для документа УАТ
// 
Процедура уатУдалениеТиповогоДокумента(вхДокументУАТ) Экспорт
	
	НаборЗаписейТД	= РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	НаборЗаписейТД.мДокументУАТ = вхДокументУАТ;
	НаборЗаписейТД.УдалениеТиповыхДокументов();
	
КонецПроцедуры

// Процедура обрабатывает нажатие кнопки "ТД" в формах списков документов,
//	на основании которых могут формироваться типовые документы
//
Процедура ВвестиТиповойДокумент(ДокументУАТ) Экспорт
	ТипДок = Неопределено;
	Если уатОбщегоНазначения.уатНайтиТиповойДокументДляДокументаУАТ(ДокументУАТ, ТипДок) Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("На основании текущего документа уже сформирован типовой документ! Продолжить?
			|	(Нет - открыть форму сформированного типового документа)", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			ТипДок.ПолучитьФорму().Открыть();
			Возврат;
		КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	МетаданныеДокумента = ДокументУАТ.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Если МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить И (Не ДокументУАТ.Проведен) Тогда
		#Если Клиент Тогда
		Предупреждение("Формировать типовой документ можно только для проведенного документа!");
		#КонецЕсли
		Возврат;
	ИначеЕсли МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить И ДокументУАТ.ПометкаУдаления Тогда
		#Если Клиент Тогда
		Предупреждение("Формировать типовой документ можно только для не помеченного на удаление документа!");
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ДокументУАТ, ФормироватьТолькоНовые, ФормироватьОбщийТД, ДатаОбщегоТД, Контрагент");
	СтруктураПараметров.ДокументУАТ = Документы[ИмяДокумента];
	СтруктураПараметров.ФормироватьОбщийТД 	= Ложь;
	СтруктураПараметров.ФормироватьТолькоНовые = Ложь;
	Если ИмяДокумента = "уатПоступлениеТоваровУслуг" Тогда
		СтруктураПараметров.Вставить("ФормироватьПоступТовУслуг", Истина);
	ИначеЕсли ИмяДокумента = "уатПутевойЛист" Тогда
		СтруктураПараметров.Вставить("ФормироватьВырабОС", Истина);
		СтруктураПараметров.Вставить("ФормироватьТребНакл", Истина);
	ИначеЕсли ИмяДокумента = "уатПеремещениеТоваров" Тогда
		СтруктураПараметров.Вставить("ФормироватьПеремещение", Истина);
	ИначеЕсли ИмяДокумента = "уатСписаниеТоваров" Тогда
		СтруктураПараметров.Вставить("ФормироватьСписание", Истина);
	ИначеЕсли ИмяДокумента = "уатВыдачаРасходныхМатериалов" Тогда
		СтруктураПараметров.Вставить("ФормироватьТребНакл", Истина);
	ИначеЕсли ИмяДокумента = "уатРемонтныйЛист" Тогда
		СтруктураПараметров.Вставить("ФормироватьТребНакл", Истина);
		СтруктураПараметров.Вставить("ФормироватьПоступТовУслуг", Истина);
	КонецЕсли;
	
	НаборЗаписейТД	= РегистрыСведений.уатТиповыеДокументы.СоздатьНаборЗаписей();
	НаборЗаписейТД.мДокументУАТ	= ДокументУАТ;
	ВсеОк = НаборЗаписейТД.ФормированиеТД(СтруктураПараметров); // ИЛИ Не Отказ;
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ РАБОТЫ С ВРЕМЕНЕМ

//Функция преобразует тип Дата в тип Число в формате ЧЧ.ММ
//
Функция уатВремяВЧЧ_ММ(Время) Экспорт
	
	Часы = Цел(Время / 3600);
	Минуты = Цел((Время - (Часы * 3600))/60)/100;
	Результат = Часы + Минуты;
	Возврат Результат;
	
КонецФункции	

//Функция преобразует тип Число в формате ЧЧ.ММ в количество секунд
//
Функция уатВремяВСекунды(Время) Экспорт
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 100;
	Результат = Часы * 3600 + Минуты * 60;
	Возврат Результат;
КонецФункции	

//Функция преобразует тип Число в формате ЧЧ.ДЕСЯТЫЕ ДОЛИ ЧАСА в количество секунд
//
Функция уатПоказанияСчетчикаВСекунды(Время) Экспорт
	
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 60;
	Результат = Часы * 3600 + Минуты * 60;
	Возврат Результат;
КонецФункции	

// Преобразует время из представления в виде строки в число
//
// Параметры:
//  Время        - Строка - Строковое представление времени
//
// Возвращаемое значение:
//  Время - Число 5.2 - Время в виде числа
Функция уатВремяСтрокаВЧисло(Время) Экспорт
	
	Поз = Найти(Время,":");
	Если НЕ Поз тогда
		Возврат 0;
	КонецЕсли;
	ЦелЧасть = Число(Лев(Время,Поз-1));
	ДробЧасть = Число(Сред(Время,Поз+1,6)) / 60;
	Возврат ЦелЧасть + ДробЧасть; 	
	
КонецФункции

// Преобразует время из числового представления в строковое
//
// Параметры:
//  Время        - Число - числовое представление времени
//
// Возвращаемое значение
//  Время - Строка - Время в виде строки
Функция уатВремяЧислоВСтрока(Время) Экспорт
	
	ЦелЧасть = Цел(Время);
	ДробЧасть = (Время - ЦелЧасть) * 60;
	Возврат Строка(ЦелЧасть) + ":" + Строка(Окр(ДробЧасть,0));
	
КонецФункции

// Форматирует выводимое время в отчетах.
//Переводит время в сотых долях часа во время в формате Часы:Минуты
// Параметры:
//  ДатаВремяЧисло - Число - время в часах и сотых долях часа
// Возвращаемое значение:
//	В зависимости от настроек УАТ - Время в часах и минутах (ЧЧ:мм) или время во входящем формате (не изменяется)
//
Функция уатФорматироватьВремяВОтчетах(ДатаВремяЧисло, ФорматПоУмолчанию = Неопределено, Права = Неопределено) Экспорт
	Если НЕ уатПраваИНастройки.уатПраво("ФорматироватьВремяВОтчетах", Права) Тогда
		Если ФорматПоУмолчанию <> Неопределено Тогда
			Возврат Формат(ДатаВремяЧисло, ФорматПоУмолчанию);
		КонецЕсли;
		
		Возврат ДатаВремяЧисло;
	КонецЕсли;
	
	Если ДатаВремяЧисло = 0 ИЛИ ДатаВремяЧисло = Null Тогда
		СтрокаЧМ = 0;
	Иначе
		СтрокаЧМ = "" + Цел(ДатаВремяЧисло) + ":" + Прав(Формат(Окр((ДатаВремяЧисло - Цел(ДатаВремяЧисло))/10*6, 2), "ЧДЦ=2; ЧН=00"), 2);
	КонецЕсли;
	
	Возврат СтрокаЧМ;
КонецФункции

// Функция удаляет секунды из даты
//
Функция уатДатаБезСекунд(ДатаИВремя) Экспорт
	Рез = НачалоДня(ДатаИВремя) + Час(ДатаИВремя)*3600 + Минута(ДатаИВремя)*60;
	Возврат Рез;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ПРЕДСТАВЛЕНИЯ СПРАВОЧНИКОВ

// Получает представление для транспортного средства в зависимости от его параметров
//
// Параметры:
//  ТС - Транспортное средство для которого необходиом получить представление
//  Организация - организация
//
// Возвращаемое значение:
//  Результат - Строка - Представление ТС
Функция уатПредставлениеТС(ТС, Организация = Неопределено) Экспорт
	Если ТипЗнч(Организация) = Тип("Структура") Тогда
		мОрг = Организация.Организация;
	Иначе
	    мОрг = Организация;
	КонецЕсли;	
	
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
		Если ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт
			ИЛИ ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			Если мОрг = Неопределено ИЛИ ПараметрыСеанса.уатПредставлениеТСКакГосНомер Тогда
				Результат = ТС.ГосударственныйНомер;
			Иначе
				Результат = ТС.ГаражныйНомер;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = ТС.Наименование;
			КонецЕсли;
		Иначе
			Результат = ТС.Наименование;
		КонецЕсли;
		
	ИначеЕсли (ТС <> Неопределено) и (ТС <> NULL) Тогда      
		результат = СокрЛП(ТС.Наименование);
		рсТС = ТС;
		
	Иначе
		результат = "";
		
	КонецЕсли;
	
	Возврат результат; 
КонецФункции

// Получает представление модели для переданного объекта.
//
// Параметры:
//  ТС           - Справочник.уатТС,
//               Справочник.уатОборудованиеТС, Справочник.уатМоделиТС - 
//               Объект, представление модели которого, необходиом получить.
//
// Возвращаемое значение:
//  Результат - Строка - Представление ТС
Функция уатПредставлениеМоделиТС(ТС) Экспорт
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		
		Результат = "";
		
	ИначеЕсли ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
		
		Результат = ТС.Наименование;
	
	ИначеЕсли ТипЗнч(ТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		
		Результат = ТС.Наименование;
		
	Иначе 
		
		Результат = "";
		сообщить("В процедуру <уатПредставлениеМоделиТС> передано неправильное значение!");
		
	КонецЕсли;
	Возврат СокрЛП(результат);
КонецФункции

// Функция выполняет проверку, является ли переданное ТС автотранспортом.
//
// Параметры:
//  ТС           - Проверяемое транспортное средство
//
// Возвращаемое значение:
//  Результат - Булево - Результат проверки
Функция уатЭтоТС(ТС) Экспорт
	Если ТС = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТС) тогда
		Возврат ЛожЬ;
	КонецЕсли;
	Если ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт ИЛИ ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
		результат = Истина; 
	Иначе	 
		результат = Ложь;
	КонецЕсли;
	Возврат результат;
КонецФункции	


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ, ВОЗВРАЩАЮЩИЕ ДАННЫЕ ПО ШИНАМ

//Возвращает таблицу установленных шин
//
Функция уатШиныТС(ТС, Дата = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатАгрегатыТССрезПоследних.Период КАК ДатаУстановки,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК Состояние,
	|	уатАгрегатыТССрезПоследних.ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	|	уатАгрегатыТССрезПоследних.МестоУстановки,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель КАК Модель,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель.Производитель КАК Производитель,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель.Наименование КАК Характеристики
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(&Дата, ) КАК уатАгрегатыТССрезПоследних
	|ГДЕ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата В(&СостояниеАгрегата)
	|	И уатАгрегатыТССрезПоследних.ТС В (&ТС)
	|	И уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата = &ТипАгрегата";
	Запрос.УстановитьПараметр("ТС",ТС);
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Запрос.УстановитьПараметр("СостояниеАгрегата", СписокСостоянийАгрегата);
	Запрос.УстановитьПараметр("ТипАгрегата", Справочники.уатТипыАгрегатов.Шина);
	Запрос.УстановитьПараметр("Дата", ?(Дата = Неопределено, ТекущаяДата(), Дата));
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТаблица;
КонецФункции // уатШиныТС

//Процедура открывает форму выбора серийных номеров шин
//
Процедура уатДиалогВыбораСерийногоНомераШин(СН,Модель = Неопределено)	ЭКСПОРТ
	
	ФормаВыбора = Справочники.уатСерииНоменклатуры.ПолучитьФорму("ФормаВыбораДляШин", ,);
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Закрыть();
	КонецЕСли; 
	ФормаВыбора = Справочники.уатСерииНоменклатуры.ПолучитьФорму("ФормаВыбораДляШин", СН,);
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.РежимВыбора = Истина;
	Если ЗначениеЗаполнено(СН) Тогда
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = СН;
	КонецЕсли;	
	мРезультатФормы = ФормаВыбора.ОткрытьМодально();
	Если мРезультатФормы <> Неопределено Тогда
		СН = мРезультатФормы;
	КонецЕсли;	
	
КонецПроцедуры	

//Процедура возвращает состояние шины
//
Функция уатСостояниеШины(мСерияНоменклатуры, мДата)	ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата,
	|	уатАгрегатыТССрезПоследних.ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|		&ДатаУстановки,
	|		СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних";
	Запрос.УстановитьПараметр("ДатаУстановки", мДата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", мСерияНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.СостояниеАгрегата;
	Иначе	
		Результат = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ, ВОЗВРАЩАЮЩИЕ ДАННЫЕ ПО АККУМУЛЯТОРАМ

//Возвращает таблицу установленных аккумуляторов
//
Функция уатАккумуляторыТС(ТС, Дата = Null) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатАгрегатыТССрезПоследних.Период КАК ДатаУстановки,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК Состояние,
	|	уатАгрегатыТССрезПоследних.ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	|	уатАгрегатыТССрезПоследних.МестоУстановки,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель КАК Модель,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель.Емкость КАК Емкость
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(&Дата, ) КАК уатАгрегатыТССрезПоследних
	|ГДЕ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата В(&СостояниеАгрегата)
	|	И уатАгрегатыТССрезПоследних.ТС В (&ТС)
	|	И уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата = &ТипАгрегата";
	Запрос.УстановитьПараметр("ТС", ТС);
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Запрос.УстановитьПараметр("СостояниеАгрегата",СписокСостоянийАгрегата);
	Запрос.УстановитьПараметр("ТипАгрегата",Справочники.уатТипыАгрегатов.Аккумулятор);
	Запрос.УстановитьПараметр("Дата",?(Дата = Null, ТекущаяДата(), Дата));
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТаблица;
	
КонецФункции // уатАккумуляторыТС

//Процедура открывает форму выбора серийных номеров аккумуляторов
//
Процедура уатДиалогВыбораСерийногоНомераАккумулятора(СН, Модель = Неопределено)	ЭКСПОРТ
	
	ФормаВыбора = Справочники.уатСерииНоменклатуры.ПолучитьФорму("ФормаВыбораДляАккумуляторов", ,);
	Если ФормаВыбора.Открыта() Тогда
		ФормаВыбора.Закрыть();  	
	КонецЕСли;
	ФормаВыбора = Справочники.уатСерииНоменклатуры.ПолучитьФорму("ФормаВыбораДляАккумуляторов", СН,);
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.РежимВыбора = Истина;
	
	Если ЗначениеЗаполнено(СН) Тогда
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = СН;
	КонецЕсли;	
	
	мРезультатФормы = ФормаВыбора.ОткрытьМодально();
	
	Если мРезультатФормы <> Неопределено Тогда
		СН = мРезультатФормы;
	КонецЕсли;	
	
КонецПроцедуры	

//Процедура возвращает состояние шины
//
Функция уатСостояниеАккумулятора(мСерияНоменклатуры,мДата)	ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата,
	|	уатАгрегатыТССрезПоследних.ТС
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|		&ДатаУстановки,
	|		СерияНоменклатуры = &СерияНоменклатуры) КАК уатАгрегатыТССрезПоследних";
	Запрос.УстановитьПараметр("ДатаУстановки", мДата);
	Запрос.УстановитьПараметр("СерияНоменклатуры", мСерияНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() > 0 Тогда
		РезультатЗапроса.Следующий();
		Результат = РезультатЗапроса.СостояниеАгрегата;
	Иначе	
		Результат = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ, ВОЗВРАЩАЮЩИЕ ДАННЫЕ ПО ПРОЧИМ АГРЕГАТАМ

//Возвращает таблицу установленных прочих агрегатов
//
Функция уатПрочиеАгрегатыТС(ТС, Дата = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатАгрегатыТССрезПоследних.Период КАК ДатаУстановки,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК Состояние,
	|	уатАгрегатыТССрезПоследних.ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
	|	уатАгрегатыТССрезПоследних.МестоУстановки,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.Модель КАК Модель
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(&Дата, ) КАК уатАгрегатыТССрезПоследних
	|ГДЕ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата В(&СостояниеАгрегата)
	|	И уатАгрегатыТССрезПоследних.ТС В (&ТС)
	|	И (уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата НЕ В (&ТипыАгрегатовШинаИлиАккумулятор))";
	Запрос.УстановитьПараметр("ТС", ТС);
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Запрос.УстановитьПараметр("СостояниеАгрегата", СписокСостоянийАгрегата);
	СписокТиповАгрегата = Новый СписокЗначений();
	СписокТиповАгрегата.Добавить(Справочники.уатТипыАгрегатов.Шина);
	СписокТиповАгрегата.Добавить(Справочники.уатТипыАгрегатов.Аккумулятор);
	Запрос.УстановитьПараметр("ТипыАгрегатовШинаИлиАккумулятор", СписокТиповАгрегата);
	Запрос.УстановитьПараметр("Дата",?(Дата = Неопределено, ТекущаяДата(), Дата));
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТаблица;
	
КонецФункции // уатПрочиеАгрегатыТС

// Возвращает список ссылок на элементы справочника Серийные номера по переданному списку с/н
// 
// Параметры:
//  СписокСерийныхНомеров - список серийных номеров
//
// Возвращаемое значение:
//  Список ссылок на элементы справочинка
Функция ПолучитьСписокАгрегатовПоСерийнымНомерам(СписокСерийныхНомеров) Экспорт
	
	мЗапрос = новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатСерииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.уатСерииНоменклатуры КАК уатСерииНоменклатуры
	|ГДЕ
	|	уатСерииНоменклатуры.СерийныйНомер В (&СерийныйНомер)";
	мЗапрос.УстановитьПараметр("СерийныйНомер",СписокСерийныхНомеров);
	СписокСсылок = новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(мЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокСсылок;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ И ПРОЦЕДУРЫ РАБОТЫ С ТС

// Функция вычисляет разность показаний счетчика транспортного средства
//
// Параметры:
//  СчетчикВыезда - значение счетчика перед выездом
//  СчетчикВозвращения - значение счетчика по возвращению
//
// Возвращаемое значение
//  Результат - число - разность показаний
Функция уатРазностьПоказанийСчетчика(СчетчикВыезда, СчетчикВозвращения) ЭКСПОРТ
	Перем чРазностьПоказаний;
	Перем чИнд;
	Перем чМаксСчетчик;
	Перем чКоличЗнаков;
	
	чРазностьПоказаний = СчетчикВозвращения - СчетчикВыезда;
	
	Если чРазностьПоказаний < 0 Тогда
		чКоличЗнаков = СтрДлина(Формат(Цел(СчетчикВыезда), "ЧГ="));
		Если чКоличЗнаков > 0 Тогда
			Результат = Pow(10, чКоличЗнаков)  + чРазностьПоказаний;
		Иначе
			Результат = 0;
		КонецЕсли;	
	Иначе
		Результат = чРазностьПоказаний;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // глПробегПоСпидометру       

//Функция возвращает список значений, заполненный номенклатурой топлива
//
Функция уатПолучитьНормыРасходаГСМ(МодельТС, ЗаданнаяДата, ГСМ) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходаГСМ.*
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|		&Период,
	|		МодельТС = &МодельТС
	|		    И ГСМ В (&СписокГСМ)) КАК НормыРасходаГСМ";
	
	ТаблицаГСМ 			= уатПолучитьАналогиГСМ(ГСМ, Перечисления.уатГруппыГСМ.Топливо);
	
	СписокГСМ = Новый СписокЗначений;
	СписокГСМ.Добавить(ГСМ);
	Для Каждого ТекСтрока Из ТаблицаГСМ Цикл
		СписокГСМ.Добавить(ТекСтрока.Аналог);
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("МодельТС", МодельТС);
	Запрос.УстановитьПараметр("СписокГСМ", СписокГСМ);
	Запрос.УстановитьПараметр("Период", ЗаданнаяДата);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	Возврат РезультатЗапроса;
КонецФункции // уатПолучитьНормыРасходаГСМ       

//Возвращает значение реквизитов ТС из регистра сведений
// Параметры: 	ТС - ссылка на справочник ОС - транспортное средство,
//				Реквизит - строка - имя реквизита сведений, значение которого хотим получить,
//					если пустая строка, то запрашиваются все реквизиты,
//				ДатаСреза - дата - дата, на которую запрашиваются сведения,
//				СведенияЕсть - булево - флаг заполнения сведений,
//				флСообщать - булево - флаг сообщения о незаполнении сведений.
// Возвращаемое значение: структура сведений по ТС
Функция уатПрочитатьРеквизитыТС(ТС, Реквизит = "", ДатаСреза = Неопределено, СведенияЕсть = Истина, флСообщать = Истина) ЭКСПОРТ
	СведенияЕсть = Истина;
	Реквизиты = Метаданные.Справочники.уатТС.Реквизиты;
	СтруктураРеквизитовТС = Новый Структура;
		
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
		Если Реквизит = "" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	уатТС.*,
			|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
			|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
			|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.уатТС КАК уатТС
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних
			|		ПО уатТС.Ссылка = уатМестонахождениеТССрезПоследних.ТС
			|ГДЕ
			|	уатТС.Ссылка = &ТС";
		Иначе
			Запрос = Новый Запрос;
			Если (Реквизит = "Организация" или Реквизит = "Колонна" или Реквизит = "Подразделение") Тогда
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
				|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
				|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение
				|ИЗ
				|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
			Иначе
				Запрос.Текст = 
				"ВЫБРАТЬ уатТС." + Реквизит + "
				|ИЗ
				|	Справочник.уатТС КАК уатТС
				|ГДЕ
				|	уатТС.Ссылка = &ТС";
			КонецЕсли;
		КонецЕсли;
		//Запрос.УстановитьПараметр("Дата", ?(ДатаСреза = Неопределено, ТекущаяДата(), ДатаСреза));
		Запрос.УстановитьПараметр("Дата", ДатаСреза);
		Запрос.УстановитьПараметр("ТС", ТС);
		Результат = Запрос.Выполнить();
		ВыборкаДетали = Результат.Выбрать();
		
		Если ВыборкаДетали.Следующий() Тогда
			Если Реквизит = "" Тогда //все измерения
				Для Каждого ТекЭлемент Из Реквизиты Цикл
					СтруктураРеквизитовТС.Вставить(ТекЭлемент.Имя, ВыборкаДетали[ТекЭлемент.Имя]);
				КонецЦикла;
				Если ВыборкаДетали.Организация = NULL Тогда
					СтруктураРеквизитовТС.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
				Иначе
					СтруктураРеквизитовТС.Вставить("Организация", ВыборкаДетали.Организация);
				КонецЕсли;
				Если ВыборкаДетали.Колонна = NULL Тогда
					СтруктураРеквизитовТС.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
				Иначе
					СтруктураРеквизитовТС.Вставить("Колонна", ВыборкаДетали.Колонна);
				КонецЕсли;
				Если ВыборкаДетали.Подразделение = NULL Тогда
					СтруктураРеквизитовТС.Вставить("Подразделение", Неопределено);
				Иначе
					СтруктураРеквизитовТС.Вставить("Подразделение", ВыборкаДетали.Подразделение);
				КонецЕсли;
			Иначе
				СтруктураРеквизитовТС.Вставить(Реквизит, ВыборкаДетали[Реквизит])
			КонецЕсли;
			
		Иначе //заполняем пустыми значениями, в коде могут быть обращения к отсутствующим полям 
			Если Реквизит = "" Тогда //все измерения
				Для Каждого ТекЭлемент Из Реквизиты Цикл
					ТекТип = ТекЭлемент.Тип;
					ЗначПоУмолчанию = ТекТип.ПривестиЗначение();
					СтруктураРеквизитовТС.Вставить(ТекЭлемент.Имя, ЗначПоУмолчанию);
				КонецЦикла;
				СтруктураРеквизитовТС.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Подразделение", Неопределено);
				
			Иначе
				ТекИзмерение = Реквизиты.Найти(Реквизит);
				Если ТекИзмерение <> Неопределено Тогда
					ТекТип = ТекИзмерение.Тип;
					ЗначПоУмолчанию = ТекТип.ПривестиЗначение();
					СтруктураРеквизитовТС.Вставить(Реквизит, ЗначПоУмолчанию);
				Иначе
					СтруктураРеквизитовТС.Вставить(Реквизит, Неопределено);
				КонецЕсли;
				СтруктураРеквизитовТС.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Колонна", Справочники.уатКолонны.ПустаяСсылка());
				СтруктураРеквизитовТС.Вставить("Подразделение", Неопределено);
				
			КонецЕсли;
			
			Если НЕ ТС.Пустая() И флСообщать Тогда
				Сообщить("Транспортное средство """ + уатПредставлениеТС(ТС) + """: отсутствуют сведения", СтатусСообщения.Внимание);
			КонецЕсли;
			СведенияЕсть = Ложь;
			
		КонецЕсли;
		
		Возврат	СтруктураРеквизитовТС;
	Иначе
		Возврат ТС;
	КонецЕсли;
КонецФункции // уатПрочитатьРеквизитТС()

//Возвращает показания спидометра
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатТекущийСпидометр(ТС, ТекДата) ЭКСПОРТ
	Возврат РегистрыСведений.уатСчетчикиТС.ПолучитьСчетчик(ТекДата, ТС, Перечисления.уатТипыСчетчиковТС.Спидометр);
КонецФункции // уатТекущийСпидометр       

//Возвращает показания счетчика моточасов
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатТекущийСчетчикМЧ(ТС, ТекДата) ЭКСПОРТ
	Возврат РегистрыСведений.уатСчетчикиТС.ПолучитьСчетчик(ТекДата, ТС, Перечисления.уатТипыСчетчиковТС.СчетчикМЧ);
КонецФункции // уатТекущийСпидометр       

// Функция получает коэффициент изменения норм топлива для ТС на заданную дату.
//
// Параметры
//  ТС           - транспортное средство 
//  ТекДата      - дата, на которую  необходимо получить коэффициент
//
// Возвращаемое значение
//  Результат - число - коэффициент
Функция уатПолучитьКоэффициентИзмененияНормТопливаТС(ТС, ЗаданнаяДата) Экспорт
	Возврат РегистрыСведений.уатКоэффициентыИзмененияНормТоплива.СоздатьНаборЗаписей().ПолучитьКоэффициент(ЗаданнаяДата,ТС);
КонецФункции

// Функция возвращает список основных средств и оборудования входящего в состав
// транспортного средства.
//
// Параметры:
//  ТС           - транспортное средство для которого необходимо получить состав
//  ТаблицаСостав - таблица содержащая состав ТС
//
// Возвращаемое значение:
//  ТаблицаСостав - ТаблицаЗначений - таблица содержащая состав ТС
Функция уатСоставТС(ТС, ТаблицаСостав = Неопределено) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоставТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК СоставТС
	|
	|ГДЕ
	|	СоставТС.ВСоставе = &ТС";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСостав = Неопределено Тогда
		ТаблицаСостав = РезультатТаблица;
	Иначе	
		Для Каждого ТекСтрока Из РезультатТаблица Цикл
			НоваяСтрока = ТаблицаСостав.Добавить();
			НоваяСтрока.ТС = ТекСтрока.ТС;
		КонецЦикла;	
	КонецЕсли;	
	Для Каждого ТекСтрока Из РезультатТаблица Цикл
		уатСоставТС(ТекСтрока.ТС, ТаблицаСостав);
	КонецЦикла;
	
	Возврат РезультатТаблица;
КонецФункции // уатСоставТС       

// Функция проверяет действительность документов на ТС
//
Функция уатПросроченныеДокументыТС(вхДата, вхДопускДней, вхТС, выхТаблицаДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатДокументыТС.ВидДокумента,
	|	уатДокументыТС.Номер,
	|	уатДокументыТС.ДатаВыдачи,
	|	уатДокументыТС.ДатаОкончания,
	|	уатДокументыТС.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыТС КАК уатДокументыТС
	|ГДЕ
	|	уатДокументыТС.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыТС.ТС = &ТС
	|	И уатДокументыТС.Архив = &Архив
	|	И уатДокументыТС.ДатаОкончания <> &ПустаяДата";
	
	Запрос.УстановитьПараметр("ДатаОкончания", вхДата + вхДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));		
	Запрос.УстановитьПараметр("ТС", вхТС);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхТаблицаДокументов = РезультатЗапроса;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции // уатПросроченныеДокументыТС()

// Функция проверяет просроченные документы ТС.
//
//Параметры:
//	вхДата - Дата проверки
//	вхДопускДней - допуск проверки, плюс дней
//	вхТС - ТС
//
//Возвращаемое значение:
//	Таблица просроченных документов
//
Функция уатПросроченныеДокументыТССписок(вхДата, вхДопускДней, вхТС = Неопределено, выхТаблицаДокументов = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатДокументыТС.ВидДокумента,
	|	уатДокументыТС.Номер,
	|	уатДокументыТС.ДатаВыдачи,
	|	уатДокументыТС.ТС,
	|	уатДокументыТС.ДатаОкончания,
	|	уатДокументыТС.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыТС КАК уатДокументыТС
	|ГДЕ
	|	уатДокументыТС.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыТС.ДатаОкончания <> &ПустаяДата";
	Если НЕ ВхТС = Неопределено Тогда
		Запрос.Текст =	Запрос.Текст +"	
		|	И уатДокументыТС.ТС = &ТС
		|";
	КонецЕсли;
	Запрос.Текст =	Запрос.Текст +"	
	|	И уатДокументыТС.Архив = &Архив
	|";
	
	Запрос.УстановитьПараметр("ДатаОкончания", вхДата + вхДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));		
	Запрос.УстановитьПараметр("ТС", вхТС);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
КонецФункции //уатПросроченныеДокументыТССписок()

// Возвращает таблицу пут. листов
//
Функция уатПутевыеЛисты(ТС, ДатаНач, ДатаКон, НомерПЛ = Неопределено, Рассчитан = Неопределено) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.ТранспортноеСредство = &ТС
	|	И уатПутевойЛист.ПометкаУдаления <> &ПометкаУдаления
	|	И (уатПутевойЛист.ДатаВозвращения МЕЖДУ &ДатаНач И &ДатаКон
	|			ИЛИ уатПутевойЛист.ДатаВыезда МЕЖДУ &ДатаНач И &ДатаКон)";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ПометкаУдаления", Истина);
	
	Если НомерПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Номер = &НомерПЛ";
	КонецЕсли;
	
	Если Рассчитан <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Рассчитан = &Рассчитан";
		Запрос.УстановитьПараметр("Рассчитан", Рассчитан);
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТаблица;
КонецФункции // глСпидометр       

// Функция возвращает текущее состояние
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция уатСостояниеТС(ТС,Дата) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	уатСостояниеТССрезПоследних.ТС,
	|	уатСостояниеТССрезПоследних.Состояние,
	|	уатСостояниеТССрезПоследних.ДатаОкончания,
	|	уатСостояниеТССрезПоследних.Контрагент,
	|	уатСостояниеТССрезПоследних.Заказ
	|ИЗ
	|	РегистрСведений.уатСостояниеТС.СрезПоследних(&Период, ТС = &ТС) КАК уатСостояниеТССрезПоследних";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Период", Дата);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса;
КонецФункции // уатСостояниеТС       

// Функция возвращает текущее состояние
//
// Параметры:
//  ТС           - ссылка справочника ОС
//
Функция МестонахождениеТС(ТС, Дата = Неопределено) ЭКСПОРТ
	Рез = Новый Структура("Организация, Подразделение, Колонна,Состояние,Владелец,Период",
		Справочники.Организации.ПустаяСсылка(),
		Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),
		Справочники.уатКолонны.ПустаяСсылка(),
		Справочники.уатСостояниеТС.ПустаяСсылка());
	
	//если ТС уже выбыло, то оно нигде не находится	
	Если ТС.ДатаВыбытия <> '00010101' Тогда
		Если Дата = Неопределено ИЛИ ТС.ДатаВыбытия <= Дата Тогда
			Возврат Рез;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатМестонахождениеТССрезПоследних.Состояние КАК Состояние,
	|	уатМестонахождениеТССрезПоследних.Владелец КАК Владелец,
	|	уатМестонахождениеТССрезПоследних.Подразделение КАК Подразделение,
	|	уатМестонахождениеТССрезПоследних.Период
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дата, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТС", ТС);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ВыборкаДетали = Результат.Выбрать();
		ВыборкаДетали.Следующий();
		Рез.Организация = ВыборкаДетали.Организация;
		Рез.Подразделение = ВыборкаДетали.Подразделение;
		Рез.Колонна = ВыборкаДетали.Колонна;
		Рез.Состояние = ВыборкаДетали.Состояние;
		Рез.Владелец = ВыборкаДетали.Владелец;
		Рез.Период = ВыборкаДетали.Период;
	КонецЕсли;
	
	Возврат	Рез;
КонецФункции // МестонахождениеТС       

// Функция возвращает Истину если ТС свободен для выезда и Ложь если нет
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
Функция уатТССвободенДляВыезда(ТС,Дата) ЭКСПОРТ
	Если уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.НаКонсервацииИсправен Или
		уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.Выбыло Или
		уатСостояниеТС(ТС,Дата) = Справочники.уатСостояниеТС.НаКонсервацииНеИсправен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|
	|ГДЕ
	|	(уатПутевойЛист.ТранспортноеСредство = &ТС ИЛИ уатПутевойЛист.Прицепы.ТС = &ТС) И
	|	уатПутевойЛист.ДатаВыезда <= &Дата И
	|	(уатПутевойЛист.ДатаВозвращения >= &Дата ИЛИ (уатПутевойЛист.ДатаВозвращения) ЕСТЬ NULL ) И
	|	уатПутевойЛист.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Истина ;		//нет выписанных путевых листов на эту дату
	Иначе	
		Результат = Ложь;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // уатТССвободенДляВыезда       

// Функция возвращает Истину если ТС занесено в пут. листе и Ложь если нет
//
// Параметры:
//  ТС           - ссылка справочника ОС
//  ПутевойЛист  - ссылка документа пут. лист
//
Функция уатТСВПутевомЛисте(ТС,ПутевойЛист) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	уатПутевойЛист.ТранспортноеСредство,
	|	уатПутевойЛист.Прицепы.(
	|		ТС
	|	)
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|
	|ГДЕ
	|	(уатПутевойЛист.ТранспортноеСредство = &ТС ИЛИ уатПутевойЛист.Прицепы.ТС = &ТС) И
	|	уатПутевойЛист.Ссылка = &ПутевойЛист";
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // утПроверкаКорректностиПЛ       

// Процедура ищет единственное ТС среди всех ТС по началу его номера
//
// Параметры:
//  Текст        - строка - начало номера
//
// Возвращаемое значение
//  строка - номер найденного ТС, если он единственный
//
Функция уатПодобратьНомерТС(Организация, Знач Текст) Экспорт
	
	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	уатТС.ГосударственныйНомер КАК Номер
		|ИЗ
		|   Справочник.уатТС КАК уатТС
		|ГДЕ
		|   уатТС.ГосударственныйНомер ПОДОБНО &парамТекст";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|   уатТС.ГаражныйНомер КАК Номер
		|ИЗ
		|   Справочник.уатТС КАК уатТС
		|ГДЕ
		|   уатТС.ГаражныйНомер ПОДОБНО &парамТекст";
	КонецЕсли;                                 
		
	Запрос.Текст = ТекстЗапроса;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = "%"+сокрЛП(Текст)+"%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Номер;
	КонецЕсли;
	
	Возврат ТекстАвтоПодбора
	
КонецФункции // уатПодобратьНомерТС()

// Процедура ищет ТС по началу его номера
//
// Параметры:
//  Текст        - строка - начало гос. или гар. номера
//  НачальноеЗначение - СправочникСсылка.уатТС - значение по умолчанию
//
// Возвращаемое значение:
//  СправочникСсылка.уатТС - возвращается значение первого попавшегося ТС,
//		номер которого начинается на указанный параметр
//  Неопределено - ни одно ТС не найдено
//
Функция уатНайтиТСПоНомеру(Организация, Знач Номер) Экспорт
	Если ПустаяСтрока(Номер) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПредставлениеТСКакГосНомер) Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|       уатТС.Ссылка КАК ТС
		|ИЗ
		|       Справочник.уатТС КАК уатТС
		|
		|ГДЕ
		|       уатТС.ГосударственныйНомер = &Номер";
	Иначе   
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|       уатТС.Ссылка КАК ТС
		|ИЗ
		|       Справочник.уатТС КАК уатТС
		|
		|ГДЕ
		|       уатТС.ГаражныйНомер = &Номер";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.ТС;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции //уатНайтиТСПоНомеру

// Функция проверяет занятость ТС
//Под занятостью здесь подразумеваются:
//	1) если проверять ПЛ, то будут проверены открытые, но не закрытые путевые листы.
//		Такие листы добавляются в возвращаемую строку
//	2) будут проверены ремонтные листы, по аналогии с путевыми
//	3) проверка подошедшего планового ТО
//	4) проверка просроченных документов на ТС и документов водителей
// Параметры:
//  ТС           - транспортное средство для которого возвращается состояние
//  Водитель1    - водитель
//  Водитель2	 - второй водитель
//	Дата 		 - дата на которую производиться проверка
//  ДопускДней   - количество дней допуска
//  ПроверятьПЛ  - признак необходимости проверки путевых листов  
//
// Возвращаемые значения:
//  ВозвращаемоеЗначение - строка - состояние ТС
//
Функция уатЗанятостьТС(ТС, Водитель1, Водитель2, Дата, ДопускДней, ПроверятьПЛ = Истина) ЭКСПОРТ
	ВозвращаемоеЗначение = "";
	Если ПроверятьПЛ Тогда
		// не закрыт какой-то из путевых листов (нарушается цепочка остатков топлива)
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатПутевойЛист.Ссылка
		|ИЗ
		|	Документ.уатПутевойЛист КАК уатПутевойЛист
		|ГДЕ
		|	уатПутевойЛист.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И уатПутевойЛист.ТранспортноеСредство = &ТС
		|	И (НЕ уатПутевойЛист.ПометкаУдаления)
		|	И (НЕ уатПутевойЛист.Рассчитан)
		|УПОРЯДОЧИТЬ ПО
		|	уатПутевойЛист.Дата УБЫВ";
		Запрос.УстановитьПараметр("ДатаНач", ДобавитьМесяц(Дата, -1));
		Запрос.УстановитьПараметр("ДатаКон", Дата + 1);
		Запрос.УстановитьПараметр("ТС", ТС);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ВозвращаемоеЗначение = "не закрыт путевой лист: " + Строка(Результат.Ссылка.Номер) + " от " + Формат(Результат.Ссылка.Дата, "ДЛФ = D");
		КонецЕсли;      
	КонецЕсли;
	
	// не выполнен последний ремонтный лист
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатРемонтныйЛист.Ссылка
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Проведен
	|	И (НЕ уатРемонтныйЛист.ПометкаУдаления)
	|	И (НЕ уатРемонтныйЛист.Выполнен)
	|	И уатРемонтныйЛист.ТС = &ТС
	|	И уатРемонтныйЛист.ДатаНачала < &ТекДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатРемонтныйЛист.ДатаОкончания УБЫВ";
	Запрос.УстановитьПараметр("ТекДата", Дата);
	Запрос.УстановитьПараметр("ТС", ТС);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВозвращаемоеЗначение = ВозвращаемоеЗначение + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВозвращаемоеЗначение), "", "; ") 
			+ "не выполнен ремонтный лист: " + Строка(Результат.Ссылка.Номер) + " от " + Формат(Результат.Ссылка.Дата, "ДЛФ = D");
	КонецЕсли;
	
	// Подошел срок ТО
	СписокТСДляТО = уатСписокТСДляТО(Дата, ТС);
	Результат = СписокТСДляТО.Выбрать();
	Если Результат.Следующий() Тогда
		ВозвращаемоеЗначение = ВозвращаемоеЗначение + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВозвращаемоеЗначение), "", "; ") + "подошел срок ТО: " + Строка(Результат.ВидОбслуживания);
	КонецЕсли;
	
	// Есть просроченные документы на ТС
	ПросроченныеДокументы = уатПросроченныеДокументыТССписок(Дата, ДопускДней, ТС);
	Результат = ПросроченныеДокументы.Выбрать();
	Если Результат.Следующий() Тогда
		ВозвращаемоеЗначение = ВозвращаемоеЗначение + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВозвращаемоеЗначение), "", "; ") + "просрочен документ на ТС: " + Строка(Результат.ВидДокумента);
	КонецЕсли;
	
	// Есть просроченные документы водителей
	ПросроченныеДокументы = уатПросроченныеДокументыВодителяСписок(Дата, ДопускДней, Водитель1);
	Результат = ПросроченныеДокументы.Выбрать();
	Если Результат.Следующий() Тогда
		ВозвращаемоеЗначение = ВозвращаемоеЗначение + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВозвращаемоеЗначение), "", "; ") + "у " + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель1) + " просрочен документ: " + Строка(Результат.ВидДокумента);
	КонецЕсли;
	
	Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(Водитель2) Тогда
		ПросроченныеДокументы = уатПросроченныеДокументыВодителяСписок(Дата, ДопускДней, Водитель2);
		Результат = ПросроченныеДокументы.Выбрать();
		Если Результат.Следующий() Тогда
			ВозвращаемоеЗначение = ВозвращаемоеЗначение + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВозвращаемоеЗначение), "", "; ") + "у " + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Водитель2) + " просрочен документ: " + Строка(Результат.ВидДокумента);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ВозвращаемоеЗначение;
КонецФункции    

//Функция возвращает список видов ТС - прицепы\
//
Функция уатСписокВидовТСПрицепов()ЭКСПОРТ
	
	СписокПрицепов = Новый СписокЗначений;
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.Полуприцеп);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.Прицеп);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.ПрицепСамосвал);
	СписокПрицепов.Добавить(Перечисления.уатВидыТС.ПрицепЦистерна);
	Возврат СписокПрицепов;
	
КонецФункции    

// Функция получает значения грузоподъемности и объема кузова для ТС
//  
// Параметры:
//  ТС           - транспортное средство параметры которого необходимо получить
//
// Возвращаемое значение:
//  Параметры - Структура - Структура, содержащая характеристики ТС
//
Функция уатПолучитьГрузоподъемностьИОбъемТС(ТС) Экспорт
	Параметры = Новый Структура("Грузоподъемность, ОбъемКузова");
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") И НЕ ТС.Пустая() тогда
		Параметры.Грузоподъемность = ТС.Модель.Грузоподъемность;
		Параметры.ОбъемКузова      = ТС.Модель.ОбъемКузова;
	Иначе 
		Параметры.Грузоподъемность = 0;
		Параметры.ОбъемКузова = 0;
	КОнецЕсли;
	Возврат Параметры;
КОнецФункции

// Процедура открывает форму карточки ТС по переданному параметру - основному средству
//
Процедура уатОткрытьКарточкуТС(ТС) Экспорт
	Если ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
		ТС.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры

// Процедура открывает форму отчета по документам ТС и водителей с отбором по переданному параметру - документу
//
Процедура уатОткрытьОтчетПоДокументамТСиВодителей(Ссылка) Экспорт
	Отчет = Отчеты.уатДокументыПоПЛиРазнарядкам.Создать();
		 
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.Открыть();
	
	ФормаОтчета.УниверсальныйОтчет.ДобавитьОтбор("Ссылка",Истина,ВидСравнения.Равно,Ссылка);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		ФормаОтчета.УниверсальныйОтчет.ДатаНач = Ссылка.ДатаВыезда;
		ФормаОтчета.УниверсальныйОтчет.ДатаКон = Ссылка.ДатаВозвращения;
	Иначе
		тчРазнарядка = Ссылка.Разнарядка.Выгрузить();
		тчРазнарядка.Сортировать("ДатаВозвращения Убыв");
		
		ФормаОтчета.УниверсальныйОтчет.ДатаНач = Ссылка.Дата;
		Если НЕ ЗначениеЗаполнено(тчРазнарядка[0].ДатаВозвращения) Тогда
			ФормаОтчета.УниверсальныйОтчет.ДатаКон = КонецМесяца(ТекущаяДата());		
		Иначе
			ФормаОтчета.УниверсальныйОтчет.ДатаКон = тчРазнарядка[0].ДатаВозвращения;
		КонецЕсли;
	КонецЕсли;
	ФормаОтчета.ОбновитьОтчет();
КонецПроцедуры

	
/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ РАБОТЫ С ОБОРУДОВАНИЕМ

// Функция возвращает место установки оборудования
//
Функция уатМестоУстановкиОборудования(вхОборудование) Экспорт
	
	Если ТипЗнч(вхОборудование) = Тип("Тип") ИЛИ вхОборудование = Неопределено ИЛИ вхОборудование = NULL Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатСоставТС.ВСоставе
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	уатСоставТС.ТС = &Оборудование";
	
	Запрос.УстановитьПараметр("Оборудование", вхОборудование);		
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Результат = ВыборкаЗапроса.ВСоставе;
	Иначе	
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // уатМестоУстановкиОборудования()


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ РАБОТЫ С ВОДИТЕЛЯМИ

// Функция - проверяет действительность документов на водителя
//
Функция уатПросроченныеДокументыВодителя(вхДата, вхДопускДней, вхВодитель, выхТаблицаДокументов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатДокументыВодителей.ВидДокумента,
	|	уатДокументыВодителей.Номер,
	|	уатДокументыВодителей.ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания,
	|	уатДокументыВодителей.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
	|ГДЕ
	|	уатДокументыВодителей.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыВодителей.Сотрудник = &Сотрудник
	|	И уатДокументыВодителей.Архив = &Архив
	|	И уатДокументыВодителей.ДатаОкончания <> &ПустаяДата";
	
	Запрос.УстановитьПараметр("ДатаОкончания", вхДата + вхДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));		
	Запрос.УстановитьПараметр("Сотрудник", вхВодитель);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Результат = Истина;
		выхТаблицаДокументов = РезультатЗапроса;
	Иначе	
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции // уатПросроченныеДокументыВодителя()

// Функция - возвращает реквизиты водителя
//
Функция уатПрочитатьРеквизитыВодителя(вхВодитель, вхДата, ЕстьРегистрТиповойКонфигурации = Неопределено, вхОрганизация = Неопределено) Экспорт
	Результат = Новый Структура("ТабельныйНомер, Наименование, Организация, ПодразделениеОрганизации, Должность, Класс, Позывной, НачислятьЗПВПЛ");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатСведенияОСотрудникахСрезПоследних.ТабельныйНомер,
	|	уатСведенияОСотрудникахСрезПоследних.Сотрудник.Наименование КАК Наименование,
	|	уатСведенияОСотрудникахСрезПоследних.Организация,
	|	уатСведенияОСотрудникахСрезПоследних.ПодразделениеОрганизации,
	|	уатСведенияОСотрудникахСрезПоследних.Должность,
	|	уатСведенияОСотрудникахСрезПоследних.ГрафикРаботы,
	|	уатСведенияОСотрудникахСрезПоследних.Класс,
	|	уатСведенияОСотрудникахСрезПоследних.Позывной,
	|	уатСведенияОСотрудникахСрезПоследних.Сотрудник.НачислятьЗПВПЛ КАК НачислятьЗПВПЛ,
	|	уатСведенияОСотрудникахСрезПоследних.Сотрудник.ДатаПриема КАК ДатаПриема,
	|	уатСведенияОСотрудникахСрезПоследних.Сотрудник.ДатаУвольнения КАК ДатаУвольнения
	|ИЗ
	|	РегистрСведений.уатСведенияОСотрудниках.СрезПоследних(&Дата, Сотрудник = &Сотрудник"
	+ ?(ЗначениеЗаполнено(вхОрганизация), " И Организация = &Организация", "") + ") КАК уатСведенияОСотрудникахСрезПоследних
	|ГДЕ
	|	Сотрудник.ДатаУвольнения = &ПустаяДата ИЛИ Сотрудник.ДатаУвольнения > &Дата";
	
	Запрос.УстановитьПараметр("Дата", вхДата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Сотрудник", вхВодитель);
	Запрос.УстановитьПараметр("Организация", вхОрганизация);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаРезультатаЗапроса);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // уатПрочитатьРеквизитыВодителя

// Функция получает удостоверение водителя.
//
//Параметры:
//	ФизЛицо - водитель, входящий параметр
//	ДокументСерия - серия документа, исходящий параметр
//	ДокументНомер - номер документа, исходящий параметр
//	ДокументКатегория - категория документа, исходящий параметр
//  ВидДокумента  - 0 - Любой, 1 - Водитель, 2 - механизатор
//
//Возвращаемое значение:
//	Булево. Истина, если документ найден.
//
Функция уатУдостоверениеВодителя(Сотрудник, ДокументСерия, ДокументНомер, ДокументКатегория,ВидДокумента=0,ДтВыд="") ЭКСПОРТ
	
	ДокументСерия = "";
	ДокументНомер = "";
	ДокументКатегория = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатДокументыВодителей.Сотрудник,
	|	уатДокументыВодителей.ВидДокумента,
	|	уатДокументыВодителей.Серия,
	|	уатДокументыВодителей.Номер,
	|	уатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания,
	|	уатДокументыВодителей.КемВыдан,
	|	уатДокументыВодителей.Категория
	|ИЗ
	|	РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
	|
	|ГДЕ
	|	уатДокументыВодителей.Сотрудник = &Сотрудник И
	|	уатДокументыВодителей.ВидДокумента в (&ВидДокумента1,&ВидДокумента2)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВидДокумента1", Справочники.уатВидыДДД.УдостоверениеВодителя);
	Запрос.УстановитьПараметр("ВидДокумента2", Справочники.уатВидыДДД.УдостоверениеМеханизатора);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Ложь;
	Иначе	
		РезультатВыборки = РезультатЗапроса.Выбрать();
		Есть=Ложь;
		Пока РезультатВыборки.Следующий() Цикл
			Если  РезультатВыборки.ВидДокумента = Справочники.уатВидыДДД.УдостоверениеВодителя 
				и ВидДокумента = 1 Тогда
				Есть=Истина;
				Прервать;
			ИНачеЕсли  РезультатВыборки.ВидДокумента = Справочники.уатВидыДДД.УдостоверениеМеханизатора 
				и ВидДокумента = 2 Тогда
				Есть=Истина;
				Прервать;
			КонецесЛИ;	
		КонецЦикла;
		
		Если Не Есть Тогда
			РезультатВыборки = РезультатЗапроса.Выбрать();
			РезультатВыборки.Следующий();
		КонецеСЛИ;
		
		ДокументСерия = РезультатВыборки.Серия;
		ДокументНомер = РезультатВыборки.Номер;
		ДокументКатегория = РезультатВыборки.Категория;
		ДтВыд = РезультатВыборки.ДатаВыдачи;
		Результат = Истина;
		
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // утПроверкаКорректностиПЛ       

// Функция возвращает таблицу значений параметров выработки водителей 
//
// Параметры: 	
//  ТС           - ссылка на справочник ОС
//
// Возвращаемое значение: 
//  Список значений
//
Функция уатПараметрыВыработкиВодителей() ЭКСПОРТ
	
	//спПараметрыВыработки = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПараметрыВыработки.Ссылка КАК ПараметрВыработки
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ПометкаУдаления = &ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаСотрудников = &ДействуетНаСотрудников
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПараметрыВыработки.Ссылка.Наименование";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ДействуетНаСотрудников", Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	спПараметрыВыработки.Добавить(Выборка.ПараметрВыработки);
	//КонецЦикла;
	//
	//Возврат спПараметрыВыработки;
	
КонецФункции // уатПараметрыВыработкиВодителей

// Возвращает таблицу пут. листов водителя
//
// Параметры:
//  Водитель     - водитель, путевые листы которого возвращаются
//  ДатаНач      - начало периода выборки путевых листов
//  ДатаКон      - конец периода выборки путевых листов
//  НомерПЛ      - номер путевого листа который необходимо выбрать
//  СтатусПЛ     - статус путевых листов, которые должны попасть в выборку
//  ПроведенПЛ   - признак того, что в выборку должны попасть только проведенные
//                 или непроведенные документы
//
// Возвращаемое значение:
//  Результат   - таблица значений
//
Функция уатПутевыеЛистыВодителя(Водитель, ДатаНач, ДатаКон, НомерПЛ = Неопределено, СтатусПЛ = Неопределено, ПроведенПЛ = Неопределено) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1 = &Водитель
	|			ИЛИ уатПутевойЛист.Водитель2 = &Водитель
	|			ИЛИ уатПутевойЛист.Сотрудник1 = &Водитель
	|			ИЛИ уатПутевойЛист.Сотрудник2 = &Водитель)
	|	И уатПутевойЛист.ПометкаУдаления <> &ПометкаУдаления
	|	И уатПутевойЛист.ДатаВыезда >= &ДатаВыезда
	|	И уатПутевойЛист.ДатаВозвращения <= &ДатаВозвращения";
	
	Запрос.УстановитьПараметр("ДатаВыезда", ДатаНач);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДатаКон);
	Запрос.УстановитьПараметр("Водитель", Водитель);
	Запрос.УстановитьПараметр("ПометкаУдаления", Истина);
	
	Если НомерПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Номер = &НомерПЛ";
	КонецЕсли;
	
	Если СтатусПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Рассчитан = &СтатусПЛ";
		Запрос.УстановитьПараметр("Рассчитан", СтатусПЛ);
	КонецЕсли;
	
	Если ПроведенПЛ <> Неопределено Тогда
		Запрос.Текст = СокрЛП(Запрос.Текст)	+ " И
		|	уатПутевойЛист.Проведен = &Проведен";
		Запрос.УстановитьПараметр("Проведен", ПроведенПЛ);
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст)	+ "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда УБЫВ";
	
	РезультатТаблица = Запрос.Выполнить().Выгрузить();
	Возврат РезультатТаблица;
КонецФункции // уатПутевыеЛистыВодителя       

// Возвращает водителя работающего по графику на данное ТС
//  
// Параметры:
//  тТС          - ТС для которого необходимо найти водителя
//  тДата        - дата на которую нужно найти работавшего водителя.
//
// Возвращаемое значение;
//  Водитель     - найденный водитель
//
Функция ВодительПоГрафику(тТС, тДата) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЭкипажТС.Сотрудник
	|ИЗ
	|	РегистрСведений.уатЭкипажТС КАК уатЭкипажТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатСведенияОСотрудникахСрезПоследних.Сотрудник КАК Сотрудник,
	|			уатГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ОсновноеЗначение
	|		ИЗ
	|			РегистрСведений.уатСведенияОСотрудниках.СрезПоследних(&Дата, ) КАК уатСведенияОСотрудникахСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатГрафикиРаботыПоВидамВремени КАК уатГрафикиРаботыПоВидамВремени
	|				ПО уатСведенияОСотрудникахСрезПоследних.ГрафикРаботы = уатГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|		ГДЕ
	|			уатГрафикиРаботыПоВидамВремени.Дата = &Дата) КАК ГрафикиВодителей
	|		ПО уатЭкипажТС.Сотрудник = ГрафикиВодителей.Сотрудник
	|ГДЕ
	|	уатЭкипажТС.ТС = &ТС
	|	И ГрафикиВодителей.ОсновноеЗначение > 0";
	Запрос.УстановитьПараметр("Дата", НачалоДня(тДата));
	Запрос.УстановитьПараметр("ТС", тТС);
	//Запрос.Выполнить().Выгрузить().ВыбратьСтроку();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	Иначе
		Возврат Справочники.уатСотрудники.ПустаяСсылка();
	КонецЕсли;	
КонецФункции	

// Возвращает признак того, что сотрудник на указанную дату
//работает по своему графику.
//
Функция СотрудникРаботаетПоГрафику(вхДата, вхСотрудник, вхОрганизация, флГрафикНайден = ЛОЖЬ, вхСмена = Неопределено) ЭКСПОРТ
	Отбор = Новый Структура("Сотрудник, Организация", вхСотрудник, вхОрганизация);
	СтруктураВодитель = РегистрыСведений.уатСведенияОСотрудниках.ПолучитьПоследнее(вхДата, Отбор);
	флГрафикНайден = ЗначениеЗаполнено(СтруктураВодитель.ГрафикРаботы);
	Если НЕ флГрафикНайден Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Запрос1 = Новый Запрос;
	Запрос1.Текст = "ВЫБРАТЬ
	|	уатГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	уатГрафикиРаботыПоВидамВремени.Дата,
	|	уатГрафикиРаботыПоВидамВремени.Смена,
	|	уатГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
	|	уатГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|ИЗ
	|	РегистрСведений.уатГрафикиРаботыПоВидамВремени КАК уатГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	уатГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И уатГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И уатГрафикиРаботыПоВидамВремени.ДополнительноеЗначение > 0
	|	И уатГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремени";
	Если ЗначениеЗаполнено(вхСмена) Тогда
		Запрос1.Текст = Запрос1.Текст + "
		|	И уатГрафикиРаботыПоВидамВремени.Смена = &Смена";
	КонецЕсли;
	Запрос1.УстановитьПараметр("ГрафикРаботы"   , СтруктураВодитель.ГрафикРаботы);
	Запрос1.УстановитьПараметр("ДатаНач"        , НачалоДня(вхДата));
	Запрос1.УстановитьПараметр("ДатаКон"        , КонецДня(вхДата));
	Запрос1.УстановитьПараметр("ВидУчетаВремени", Перечисления.уатВидыУчетаВремени.ПоДням);
	Запрос1.УстановитьПараметр("Смена", вхСмена);
	Результат1 = Запрос1.Выполнить();
	
	Возврат (НЕ Результат1.Пустой());
КонецФункции

// Функция возвращает список просроченных документов для водителя
//
// Параметры:
//  вхДата       - дата, на которую необходимо получить просроченные документы
//  вхДопускДней - допуск дней
//  вхВодитель   - водитель, просроченные документы которого необходимо получить
//  выхТаблицаДокументов - таблица просроченных документов
//
// Возвращаемое значение:
//  ТаблицаДокументов - таблица просроченных документов
Функция уатПросроченныеДокументыВодителяСписок(вхДата, вхДопускДней, вхВодитель = Неопределено, выхТаблицаДокументов = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	|	уатДокументыВодителей.Сотрудник,
	|	уатДокументыВодителей.ВидДокумента,
	|	уатДокументыВодителей.Номер,
	|	уатДокументыВодителей.ДатаВыдачи,
	|	уатДокументыВодителей.ДатаОкончания,
	|	уатДокументыВодителей.Архив
	|ИЗ
	|	РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
	|ГДЕ
	|	уатДокументыВодителей.ДатаОкончания <= &ДатаОкончания
	|	И уатДокументыВодителей.Архив = &Архив
	|	И уатДокументыВодителей.ДатаОкончания <> &ПустаяДата";
	Если вхВодитель <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "	
		|	И уатДокументыВодителей.Сотрудник = &Сотрудник
		|";
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОкончания", вхДата + вхДопускДней * 24 * 60 * 60);		
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));		
	Запрос.УстановитьПараметр("Сотрудник", вхВодитель);		
	Запрос.УстановитьПараметр("Архив", Ложь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
КонецФункции //уатПросроченныеДокументыВодителяСписок()

// Функция возвращает ФИО физ. лица или юридического лица организации
//Параметры:
//	ФизЛицо  физ. лицо или организация
//Возвращаемое значение:
//	Структура - ключи Фамилия, Имя, Отчество,
//	если инициалы не найдены, то возвращается Неопределено
//
Функция уатФИОФизЛица(ФизЛицо, Знач ТекДата = Неопределено) Экспорт
	Если ТекДата = Неопределено Тогда
		ТекДата = ТекущаяДата();
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.Найти("ФИОФизЛиц") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Табл = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ТекДата, Новый Структура("ФизЛицо", ФизЛицо));
	Если Табл.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Фамилия, Имя, Отчество", Табл[0].Фамилия, Табл[0].Имя, Табл[0].Отчество);
	КонецЕсли;
КонецФункции

// Функция возвращает полное ФИО физ. лица или юридического лица организации
//Параметры:
//	ФизЛицо  физ. лицо или организация,
//	ТекДата - дата текущего ФИО
//	флПодставлятьИнициалыФизЛицаЕслиНетФИО - флаг подстановки инициалов, если ФИО не обнаружено
//Возвращаемое значение:
//	Строка - представление ФИО физ. лица
//
Функция уатФИОФизЛицаПолноеСтрокой(ФизЛицо, Знач ТекДата = Неопределено, флПодставлятьИнициалыФизЛицаЕслиНетФИО = Истина) Экспорт
	СтруктураФИО = уатФИОФизЛица(ФизЛицо, ТекДата);
	Если СтруктураФИО = Неопределено Тогда //возвращаем инициалы физ. лица
		Если флПодставлятьИнициалыФизЛицаЕслиНетФИО Тогда
			Возврат уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ФизЛицо);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе //возвращаем полное ФИО
		Возврат СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;
	КонецЕсли;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ РАБОТЫ С ПРЕЙСКУРАНТАМИ НА УСЛУГИ

// Функция получает список (массив) всех родителей для указанного элемента/группы справочника
//
Функция СписокРодителейЭлементаСправочника(СпрСсылка) Экспорт
	мсвРез = Новый Массив;
	
	ТекРодитель = СпрСсылка.Родитель;
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		мсвРез.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
		
	Возврат мсвРез;
КонецФункции

// Функция возвращает ссылку на справочник прейскурантов
//
// Параметры:
//  СписокФильтров:  Структура фильтров
//	ПолучатьТолькоОдинТарифПоПараметрамВыработки
//
// Алгоритм поиска прейскуранта: ищется последний по дате и больший по номеру прейскурант,
//	удовлетворяющий наибольшему количеству фильтров
//
Функция уатНайтиПрейскурант(Знач СписокФильтров, Знач Организация = Неопределено, Знач Дата = Неопределено, ПолучатьТолькоОдинТарифПоПараметрамВыработки = Ложь) ЭКСПОРТ
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	//разбираем входной фильтр
	Если ТипЗнч(СписокФильтров) <> Тип("Структура") Тогда
		СписокФильтров = Новый Структура;
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Тягач") Тогда
		СписокФильтров.Вставить("Тягач", Справочники.уатТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельТягача") Тогда
		СписокФильтров.Вставить("МодельТягача", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипТягача") Тогда
		СписокФильтров.Вставить("ТипТягача", Справочники.уатТипыТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Прицеп") Тогда
		СписокФильтров.Вставить("Прицеп", Справочники.уатТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("МодельПрицепа") Тогда
		СписокФильтров.Вставить("МодельПрицепа", Справочники.уатМоделиТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ТипПрицепа") Тогда
		СписокФильтров.Вставить("ТипПрицепа", Справочники.уатТипыТС.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Контрагент") Тогда
		СписокФильтров.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ДоговорКонтрагента") Тогда
		СписокФильтров.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Маршрут") Тогда
		СписокФильтров.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("Номенклатура") Тогда
		СписокФильтров.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СписокФильтров.Свойство("ОбъектСтроительства") Тогда
		СписокФильтров.Вставить("ОбъектСтроительства", Справочники.уатОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	
	//вводим структуру видов областей действия тарифа, ключи - это возможные имена областей,
	//значения - имена справочников (добавлены для формирования запроса)
	СтруктураВидовОбластейТарифа = Новый Структура("Тягач, МодельТягача, ТипТягача, Прицеп, МодельПрицепа, ТипПрицепа, Контрагент, ДоговорКонтрагента, Маршрут, Номенклатура, ОбъектСтроительства",
		"уатТС", "уатМоделиТС", "уатТипыТС", "уатТС", "уатМоделиТС", "уатТипыТС", "Контрагенты", "ДоговорыКонтрагентов", "уатМаршруты", "Номенклатура", "уатОбъектыСтроительства");
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	уатПрейскурантыТС.Прейскурант КАК Прейскурант,
	|	ТарифыТС.Ссылка КАК Тариф,
	|	0 КАК СтепеньСовпаденияФильтров,
	|	ТарифыТС.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПрейскурантыТС.ДатаНачала
	|ИЗ
	|	Справочник.уатТарифыТС КАК ТарифыТС
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.уатПрейскурантыТС КАК уатПрейскурантыТС
	|ПО ТарифыТС.Владелец = уатПрейскурантыТС.Прейскурант
	|ГДЕ
	|	ТарифыТС.Владелец.Организация = &Организация
	|	И уатПрейскурантыТС.ДатаНачала <= &Дата
	|	И (уатПрейскурантыТС.ДатаОкончания >= &Дата
	|			ИЛИ уатПрейскурантыТС.ДатаОкончания = &ПустаяДата)
	|	И (НЕ ТарифыТС.ПометкаУдаления)
	|	И (НЕ ТарифыТС.ЭтоГруппа)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПрейскурантыТС.Прейскурант,
	|	уатПрейскурантыТС.ДатаНачала,
	|	ТарифыТС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПрейскурантыТС.ДатаНачала УБЫВ,
	|	ТарифыТС.Владелец.Код УБЫВ";
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	тблТарифы = Запрос.Выполнить().Выгрузить();
	мсвСтрокУдаления = Новый Массив;
	
	Для Каждого ТекСтрокаТариф Из тблТарифы Цикл
		ОблДействияТарифа = ТекСтрокаТариф.Тариф.ОбластьДействия.Получить(); //получаем структуру области действия тарифа из хранилища значений
		
		//оставляем "общий" тариф - тариф с незаполненной областью действия
		Если ТипЗнч(ОблДействияТарифа) <> Тип("Структура") ИЛИ ОблДействияТарифа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//по каждому виду области сравниваем область действия по тарифу и входное значение
		Для Каждого ТекВидОбластиДействия Из СтруктураВидовОбластейТарифа Цикл
			ИмяВидаОбластиДействия = ТекВидОбластиДействия.Ключ;
			
			//пропускаем вид области, которой нет в области действия тарифа
			//(например Тягача нет в области действия тарифа и нам неважно значение тягача во входном фильтре,
			// т.к. такой тариф подходит для любого тягача)
			ОбластьЕстьВТарифе = Ложь;
			Для Каждого ТекОбластьДействия Из ОблДействияТарифа Цикл
				Если ТекОбластьДействия.Значение.Имя = ИмяВидаОбластиДействия И ТекОбластьДействия.Значение.Использование Тогда
					ОбластьЕстьВТарифе = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ОбластьЕстьВТарифе Тогда
				Продолжить;
			КонецЕсли;
			
			ПостроительЗапроса = Новый ПостроительЗапроса;
			
			Если ИмяВидаОбластиДействия = "ТипТягача" ИЛИ ИмяВидаОбластиДействия = "ТипПрицепа" Тогда
				ПостроительЗапроса.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	уатТС.ТипТС
				|ИЗ
				|	Справочник.уатТС КАК уатТС
				|{ГДЕ ТипТС КАК Ссылка}";
			ИначеЕсли ИмяВидаОбластиДействия = "МодельТягача" ИЛИ ИмяВидаОбластиДействия = "МодельПрицепа" Тогда
				ПостроительЗапроса.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	уатТС.Модель
				|ИЗ
				|	Справочник.уатТС КАК уатТС
				|{ГДЕ Модель КАК Ссылка}";
			Иначе
				ПостроительЗапроса.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Ссылка
				|ИЗ
				|	Справочник." + ТекВидОбластиДействия.Значение + "
				|{ГДЕ Ссылка}";
			КонецЕсли;
			
			//добавляем отборы из области действия тарифа
			Для Каждого ТекОбластьДействия Из ОблДействияТарифа Цикл
				Если ТекОбластьДействия.Значение.Имя <> ИмяВидаОбластиДействия Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Ссылка");
				ЭлементОтбора.ВидСравнения = ТекОбластьДействия.Значение.ВидСравнения;
				ЭлементОтбора.Значение = ТекОбластьДействия.Значение.Значение;
				//ЭлементОтбора.ЗначениеС = ТекОбластьДействия.Значение.ЗначениеС;
				//ЭлементОтбора.ЗначениеПо = ТекОбластьДействия.Значение.ЗначениеПо;
				ЭлементОтбора.Использование = Истина;
			КонецЦикла;
			//добавляем отбор из входного фильтра
			ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Ссылка");
			ТекВхЗначение = СписокФильтров[ИмяВидаОбластиДействия];
			Если ТипЗнч(ТекВхЗначение) = Тип("Массив") Тогда
				ТекВхЗначение = Новый СписокЗначений;
				ТекВхЗначение.ЗагрузитьЗначения(СписокФильтров[ИмяВидаОбластиДействия].Значение);
			КонецЕсли;
			ЭлементОтбора.ВидСравнения = ?(ТипЗнч(ТекВхЗначение) = Тип("СписокЗначений"), ВидСравнения.ВСписке, ВидСравнения.Равно);
			ЭлементОтбора.Значение = ТекВхЗначение;
			ЭлементОтбора.Использование = Истина;
			
			ПостроительЗапроса.Выполнить();
			
			Если ПостроительЗапроса.Результат.Пустой() Тогда //такой тариф точно не подходит, удаляем его
				мсвСтрокУдаления.Добавить(ТекСтрокаТариф);
				Прервать;
			Иначе //такой тариф точно подходит - повышаем степень совпадения фильтров
				ТекСтрокаТариф.СтепеньСовпаденияФильтров = ТекСтрокаТариф.СтепеньСовпаденияФильтров + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекСтрокаУдаления Из мсвСтрокУдаления Цикл
		тблТарифы.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
		
	КоличТарифов = тблТарифы.Количество();
	
	Если КоличТарифов > 0 Тогда
		мсвПараметрыВыработки = Новый Массив;
		
		//нужно оставить только строки для последнего по порядку прейскуранта (актуального)
		АктуальныйПрейскурант = тблТарифы[0].Прейскурант;
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из тблТарифы Цикл
			Если ТекСтрока.Прейскурант <> АктуальныйПрейскурант Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			тблТарифы.Удалить(ТекСтрока);
		КонецЦикла;
		
		//оставим только тарифы с максимальной степенью совпадения фильтров
		мсвСтрокУдаления = Новый Массив;
		тблТарифы.Сортировать("СтепеньСовпаденияФильтров УБЫВ");
		тблПараметрыВыработки = тблТарифы.Скопировать();
		тблПараметрыВыработки.Свернуть("ПараметрВыработки");
		Для Каждого ТекПараметрВыработки Из тблПараметрыВыработки Цикл
			МаксСтепеньСовпадения = 0;
			СчТариф = 0;
			Для Каждого ТекСтрока Из тблТарифы Цикл
				Если ТекПараметрВыработки.ПараметрВыработки <> ТекСтрока.ПараметрВыработки Тогда
					Продолжить;
				КонецЕсли;
				СчТариф = СчТариф + 1;
				
				МаксСтепеньСовпадения = Макс(ТекСтрока.СтепеньСовпаденияФильтров, МаксСтепеньСовпадения);
				
				Если ПолучатьТолькоОдинТарифПоПараметрамВыработки И СчТариф > 1 Тогда
					мсвСтрокУдаления.Добавить(ТекСтрока);
				ИначеЕсли ТекСтрока.СтепеньСовпаденияФильтров < МаксСтепеньСовпадения Тогда
					мсвСтрокУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			тблТарифы.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат тблТарифы;
КонецФункции // уатНайтиПрейскуранты       

// Функция проверяет пересечение периодов и возвращает количество секунд пересечения
//
// Параметры:
//  ВремяНачало, ВремяКонец       - тип время
//  УслугаНачало, УслугаКонец       - тип дата
//
// Возвращаемое значение:
//  Длительность в секундах пересечения интервалов
//
Функция уатПересечениеПериодовВремени(ВремяНачало, ВремяКонец, УслугаНачало, УслугаКонец) Экспорт
	
	ВремяПересечения = 0;

	Если ВремяНачало > ВремяКонец тогда //переходящий через сутки тариф
		
		ВремяПересечения = уатПересечениеПериодовВремени(ВремяНачало, Дата('00010101235959'), УслугаНачало, УслугаКонец);
		ВремяПересечения = ВремяПересечения + уатПересечениеПериодовВремени(Дата('00010101000000'), ВремяКонец, УслугаНачало, УслугаКонец);
		
	ИначеЕсли НачалоДня(УслугаНачало) <> НачалоДня(УслугаКонец) тогда
		
		ТабИнтервалов = Новый ТаблицаЗначений;
		ТабИнтервалов.Колонки.Добавить("Начало");
		ТабИнтервалов.Колонки.Добавить("Конец");
		РабДата = НачалоДня(УслугаНачало);
		Пока НачалоДня(РабДата) < НачалоДня(УслугаКонец) цикл
			НовСтрока = ТабИнтервалов.Добавить();
			Если рабДата = НачалоДня(УслугаНачало) тогда
				НовСтрока.Начало = Дата(1,1,1,Час(УслугаНачало),Минута(УслугаНачало),Секунда(УслугаНачало));
				НовСтрока.Конец  = Дата('00010101235959');
			Иначе
				НовСтрока.Начало = Дата('00010101000000');
				НовСтрока.Конец  = Дата('00010101235959');
			КонецЕсли;
			РабДата = РабДата + 86400;
		КонецЦикла;
		НовСтрока = ТабИнтервалов.Добавить();
		НовСтрока.Начало = Дата('00010101000000');
		НовСтрока.Конец  = Дата(1,1,1,Час(УслугаКонец),Минута(УслугаКонец),Секунда(УслугаКонец));
		
		Для каждого ТекСтрока ИЗ ТабИнтервалов Цикл
			ВремяПересечения = ВремяПересечения + уатПересечениеПериодовВремени(ВремяНачало, ВремяКонец, ТекСтрока.Начало, ТекСтрока.Конец);
		КонецЦикла;
		
	Иначе
		
		ТабИнтервалов = Новый ТаблицаЗначений;
		ТабИнтервалов.Колонки.Добавить("Начало");
		ТабИнтервалов.Колонки.Добавить("Конец");
		НовСтрока = ТабИнтервалов.Добавить();
		НовСтрока.Начало = Дата(1,1,1,Час(ВремяНачало),Минута(ВремяНачало),Секунда(ВремяНачало));
		НовСтрока.Конец  = Дата(1,1,1,Час(ВремяКонец),Минута(ВремяКонец),Секунда(ВремяКонец));
		НовСтрока = ТабИнтервалов.Добавить();
		НовСтрока.Начало = Дата(1,1,1,Час(УслугаНачало),Минута(УслугаНачало),Секунда(УслугаНачало));
		НовСтрока.Конец  = Дата(1,1,1,Час(УслугаКонец ),Минута(УслугаКонец ),Секунда(УслугаКонец ));

		ТабИнтервалов.Сортировать("Начало");
		Если ТабИнтервалов[1].Начало > ТабИнтервалов[0].Конец тогда
			ВремяПересечения  = 0;
		Иначе
			мНач = Макс(ТабИнтервалов[0].Начало,ТабИнтервалов[1].Начало);
			мКон = Мин(ТабИнтервалов[0].Конец,ТабИнтервалов[1].Конец);
			ВремяПересечения  = мКон - мНач;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВремяПересечения;
	
КонецФункции

// уатПарсерУсловия()
// Параметры: Значение1 - число, Значение2 - число, Знак - перечисление "ЗнакСравнения"
// Возвращаемое значение: Истина, Ложь
// Описание: Проверка простого условия по перечислению "ЗнакиСравнения"
Функция  уатПарсерУсловия(Значение1,Значение2,Знак)
	
	Значение1 = Число(Значение1);
	Значение2 = Число(Значение2);
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Знак) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Знак = Перечисления.уатЗнакиСравнения.Больше Тогда
		Если Значение1 > Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.БольшеИлиРавно Тогда
		Если Значение1 >= Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Меньше Тогда
		Если Значение1 < Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.МеньшеИлиРавно Тогда
		Если Значение1 <= Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.Равно Тогда
		Если Значение1 = Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Знак = Перечисления.уатЗнакиСравнения.НеРавно Тогда
		Если Значение1 <> Значение2 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //  глУсловие

// Функция проверяет соответствие условию строки тарифа
// Параметры:
//		НомерГруппировки       - номер условия
//		СтрокаТарифа       - строка табл. части прейскуранта
//
Функция уатПроверкаУсловияТарифа(Тариф, НомерГруппировки, СтрокаТаблицыРасчетаТарифа, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза)
	//Перем Условие; // тип условия - перечисление "РеквизитыТарифов"
	//Перем ЗначениеУсловия;
	//Перем ЗнакУсловия; // знак условия группировки тарифа
	//Перем ЗначениеГруппировки; // значение условия группировки тарифа
	
	Если НомерГруппировки = 1 Тогда
		Условие = Тариф.ГруппировкаТарифа1;
		ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки1;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки1;
		
	ИначеЕсли НомерГруппировки = 2 Тогда
		Условие = Тариф.ГруппировкаТарифа2;
		ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки2;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки2;
		
	ИначеЕсли НомерГруппировки = 3 Тогда
		Условие = Тариф.ГруппировкаТарифа3;
		ЗнакУсловия = СтрокаТаблицыРасчетаТарифа.ЗнакГруппировки3;
		ЗначениеГруппировки = СтрокаТаблицыРасчетаТарифа.ЗначениеГруппировки3;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
	// если в тарифе знак или значение группировки не указаны, то условие верно
	Если Не (ЗначениеЗаполнено(ЗнакУсловия) И ЗначениеЗаполнено(ЗначениеГруппировки)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Условие = Перечисления.уатГруппировкиТарифов.Грузоподъемность Тогда
		ЗначениеУсловия = Грузоподъемность;
	ИначеЕсли Условие = Перечисления.уатГруппировкиТарифов.Расстояние Тогда
		ЗначениеУсловия = Расстояние;
	ИначеЕсли Условие = Перечисления.уатГруппировкиТарифов.ВремяРаботы Тогда
		ЗначениеУсловия = ВремяРаботы;
	ИначеЕсли Условие = Перечисления.уатГруппировкиТарифов.КлассГруза Тогда
		ЗначениеУсловия = КлассГруза;
	КонецЕсли;
	
	Результат = уатПарсерУсловия(ЗначениеУсловия, ЗначениеГруппировки, ЗнакУсловия);
	
	Возврат Результат;
КонецФункции // уатПроверкаУсловияТарифа       

// Функция возвращает значение тарифа
//
// Параметры:
//  Прейскурант - ссылка справочника Прейскуранты
//  Расстояние - значение расстояние перевозки
//  ВремяРаботы - значение времени работы
//  Грузоподъемность - грузоподъемность трансп. средств
//  КлассГруза - значение класса груза
//
Функция уатНайтиТариф(Тариф, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) ЭКСПОРТ
	Если Не Тариф.СложныйТариф Тогда
		Возврат Тариф.Тариф;
	КонецЕсли;              
	
	Результат = 0;
	Для Каждого ТекСтрока Из Тариф.Тарифы Цикл
		Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа1) Тогда
			Если Не уатПроверкаУсловияТарифа(Тариф, 1, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа2) Тогда
			Если Не уатПроверкаУсловияТарифа(Тариф, 2, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(Тариф.ГруппировкаТарифа3) Тогда
			Если Не уатПроверкаУсловияТарифа(Тариф, 3, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Результат = ТекСтрока.Тариф;
		Прервать;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции // уатНайтиПрейскурант       

// Функция возвращает количество выработки
//Параметры: Количество - время в секундах
//Если параметр выработки - время, то производится пересчет в ЧЧ.Десятые доли.
//
Функция уатКоличествоВыработкиДляРасчетаСтоимости(ПараметрВыработки, Количество)	Экспорт
	Если ПараметрВыработки.Временный Тогда
		мКоличество = Количество / 3600;
	Иначе
		мКоличество = Количество;
	КонецЕсли;	
	
	Возврат мКоличество;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ РАБОТЫ С ТАРИФАМИ НА З/П

// Функция определяет находится ли тариф з/п в области действия
//
// Параметры:
//  ТарифЗП - ссылка справочника ТарифыЗП
//  ПутЛист - ссылка документы ПутЛист
//  ТТД     - ТТД путевого листа
//  Вид ремонта - Вид обслуживания при расчете з/п по ремонтному листу
//  ВесСовпаденияФильтров - если общий тариф, то 0. Если область действия содержит например модель,
//		указанную в фильтре, то вес будет 1. Если таких совпадений n то вес = n.
//	Если имеется несовпадение по типу области значения области со значением фильтра,
//		то вес устанавливаем -1 (такой тариф не подходит вообще).
//
// Алгоритм поиска:
//Случай, когда в табличной части «Фильтр» заполнены несколько строк с одинаковым типом (например Модели ТС).
//	Для путевого листа данный тариф будет применяться только в том случае, если модель тягача в путевом листе совпадет
//	с одним из значений строк фильтра. 
//Случай, когда в табличной части «Фильтр» заполнены несколько строк с разными типами (например Модели ТС и Маршруты).
//	Для путевого листа данный тариф будет применяться только в том случае, когда одновременно будут выполнены
//	два условия:
//		1. Если модель тягача в путевом листе совпадет с одним из значений строк фильтра с типом Модель ТС;
//		2. В табличной части путевого листа  "Задание" есть хоть одна строка, в которой реквизит "Маршрут" совпадет
//			с одним из значений строк фильтра с типом Маршруты.
//
Функция уатТарифЗПВОбластиДействия_Старая(вхФизЛицо, ТарифЗП, Дата, ТС, ПутЛист=Неопределено, ТТД=Неопределено, ВидРемонта=Неопределено, ВесСовпаденияФильтров = 0) ЭКСПОРТ
	
	мРеквизитыВодителя = уатПрочитатьРеквизитыВодителя(вхФизЛицо, Дата);
	
	РезультатОрганизация = Ложь;
	РезультатОбласть	 = Ложь;
	
	// нет никаких ограничений по области действия тарифов
	Если (ТарифЗП.ОбластиДействия.Количество() = 0) И (ТарифЗП.Организации.Количество() = 0) Тогда
		Результат = Истина;
		Возврат Результат;
	КонецЕсли;	
	
	Если ТарифЗП.Организации.Количество() = 0 Тогда
		РезультатОрганизация = Истина;
	Иначе
		Для Каждого ТекСтрока Из ТарифЗП.Организации Цикл
			Если ТекСтрока.Организация = мРеквизитыВодителя.Организация Тогда
				РезультатОрганизация = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	РезультатОбласть	 = Истина;
	Если ТарифЗП.ОбластиДействия.Количество() = 0 Тогда
		РезультатОбласть	 = Истина;
	Иначе
		
		РезультатОбластьТС	 				= Неопределено;
		РезультатОбластьМодельТС	 		= Неопределено;
		РезультатОбластьМаршрут	 			= Неопределено;
		РезультатОбластьКонтрагент 			= Неопределено;
		РезультатОбластьОбъектСтроительства	= Неопределено;
		РезультатОбластьВидРемонта			= Неопределено;
		
		ВесСовпаденияФильтров = 0;
		
		Для Каждого ТекСтрока Из ТарифЗП.ОбластиДействия Цикл
			
			Если ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатТС") Тогда
				
				Если ТекСтрока.ОбластьДействия = ТС Тогда
					РезультатОбластьТС	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьТС	= ?(РезультатОбластьТС	= Неопределено, Ложь, РезультатОбластьТС);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатМоделиТС") Тогда
				
				мМодельТС = уатПрочитатьРеквизитыТС(ТС).Модель;
				Если ТекСтрока.ОбластьДействия = мМодельТС Тогда
					РезультатОбластьМодельТС	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьМодельТС	= ?(РезультатОбластьМодельТС	= Неопределено, Ложь, РезультатОбластьМодельТС);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатМаршруты") Тогда
				
				Если ПутЛист <> Неопределено Тогда
					мСтрокиЗадания = ПутЛист.Задание.НайтиСтроки(Новый Структура("Маршрут, Выполнено", ТекСтрока.ОбластьДействия, Истина));
					Если мСтрокиЗадания.Количество() > 0 Тогда
						РезультатОбластьМаршрут	= Истина;
						ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
					Иначе 	
						РезультатОбластьМаршрут	= ?(РезультатОбластьМаршрут	= Неопределено, Ложь, РезультатОбластьМаршрут);
					КонецЕсли;	
				Иначе 	
					РезультатОбластьМаршрут	= ?(РезультатОбластьМаршрут	= Неопределено, Ложь, РезультатОбластьМаршрут);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатОбъектыСтроительства") Тогда
				
				Если ПутЛист <> Неопределено Тогда
					мСтрокиЗадания = ПутЛист.Задание.НайтиСтроки(Новый Структура("ОбъектСтроительства, Выполнено", ТекСтрока.ОбластьДействия, Истина));
					Если мСтрокиЗадания.Количество() > 0 Тогда
						РезультатОбластьОбъектСтроительства	= Истина;
						ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
					Иначе 	
						РезультатОбластьОбъектСтроительства	= ?(РезультатОбластьОбъектСтроительства	= Неопределено, Ложь, РезультатОбластьОбъектСтроительства);
					КонецЕсли;	
				Иначе 	
					РезультатОбластьОбъектСтроительства	= ?(РезультатОбластьОбъектСтроительства	= Неопределено, Ложь, РезультатОбластьОбъектСтроительства);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатВидыОбслуживанияТС") Тогда
				
				Если ТекСтрока.ОбластьДействия = ВидРемонта Тогда
					РезультатОбластьВидРемонта	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьВидРемонта	= ?(РезультатОбластьВидРемонта	= Неопределено, Ложь, РезультатОбластьВидРемонта);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				Если ПутЛист <> Неопределено Тогда
					//вначале ищем контрагента в задании п/л
					мСтрокиЗадания = ПутЛист.Задание.НайтиСтроки(Новый Структура("Контрагент, Выполнено", ТекСтрока.ОбластьДействия, Истина));
					Если мСтрокиЗадания.Количество() > 0 Тогда
						РезультатОбластьКонтрагент	= Истина;
						ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
					Иначе 	
						//в задании п/л не нашли, теперь ищем в ТТД. Надо через попытку - если забудут передать ТТД
						Попытка
							Если ТТД.Контрагент = ТекСтрока.ОбластьДействия Тогда
								РезультатОбластьКонтрагент	= Истина;
								ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
							Иначе 	
								РезультатОбластьКонтрагент	= ?(РезультатОбластьКонтрагент	= Неопределено, Ложь, РезультатОбластьКонтрагент);
							КонецЕсли;	
						Исключение
							РезультатОбластьКонтрагент	= ?(РезультатОбластьКонтрагент	= Неопределено, Ложь, РезультатОбластьКонтрагент);
						КонецПопытки;
					КонецЕсли;
				Иначе	
					РезультатОбластьКонтрагент	= ?(РезультатОбластьКонтрагент	= Неопределено, Ложь, РезультатОбластьКонтрагент);
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;	
		
		РезультатОбластьТС			= ?(РезультатОбластьТС = Неопределено, Истина, РезультатОбластьТС);
		РезультатОбластьМодельТС	= ?(РезультатОбластьМодельТС = Неопределено, Истина, РезультатОбластьМодельТС);
		РезультатОбластьМаршрут		= ?(РезультатОбластьМаршрут = Неопределено, Истина, РезультатОбластьМаршрут);
		РезультатОбластьОбъектСтроительства	= ?(РезультатОбластьОбъектСтроительства = Неопределено, Истина, РезультатОбластьОбъектСтроительства);
		РезультатОбластьКонтрагент	= ?(РезультатОбластьКонтрагент = Неопределено, Истина, РезультатОбластьКонтрагент);
		РезультатОбластьВидРемонта	= ?(РезультатОбластьВидРемонта = Неопределено, Истина, РезультатОбластьВидРемонта);
		РезультатОбласть 			= РезультатОбластьТС И РезультатОбластьМодельТС И РезультатОбластьМаршрут И РезультатОбластьОбъектСтроительства И РезультатОбластьКонтрагент И РезультатОбластьВидРемонта;
		
	КонецЕсли;	
	
	Возврат (РезультатОбласть И РезультатОрганизация);
КонецФункции // уатТарифЗПВОбластиДействия       

// Функция определяет находится ли тариф зарплаты в области действия
//
// Параметры:
//  ТарифЗП - ссылка справочника ТарифыЗП
//  Организация - входящая организация документа, по которому используем тариф
//	СтруктураОбластьДействия - структура области действия с ключами [ТС, МодельТС, Маршрут, Контрагент, ВидРемонта].
//		В качестве значений структуры могут выступать как ссылки, так и списки ссылок
//  ВесСовпаденияФильтров - если общий тариф, то 0. Если область действия содержит например модель,
//		указанную в фильтре, то вес будет 1. Если таких совпадений n то вес = n.
//	Если имеется несовпадение по типу области значения области со значением фильтра,
//		то вес устанавливаем -1 (такой тариф не подходит вообще).
//
// Алгоритм поиска:
//Случай, когда в табличной части «Фильтр» заполнены несколько строк с одинаковым типом (например Модели ТС).
//	Для путевого листа данный тариф будет применяться только в том случае, если модель тягача в путевом листе совпадет
//	с одним из значений строк фильтра. 
//Случай, когда в табличной части «Фильтр» заполнены несколько строк с разными типами (например Модели ТС и Маршруты).
//	Для путевого листа данный тариф будет применяться только в том случае, когда одновременно будут выполнены
//	два условия:
//		1. Если модель тягача в путевом листе совпадет с одним из значений строк фильтра с типом Модель ТС;
//		2. В табличной части путевого листа  "Задание" есть хоть одна строка, в которой реквизит "Маршрут" совпадет
//			с одним из значений строк фильтра с типом Маршруты.
//
Функция уатТарифЗПВОбластиДействия(ТарифЗП, Организация, СтруктураОбластьДействия, ВесСовпаденияФильтров = 0) ЭКСПОРТ
	РезультатОрганизация = Ложь;
	РезультатОбласть	 = Ложь;
	
	//дозаполним структуру для корректной работы функции
	Если НЕ СтруктураОбластьДействия.Свойство("ТС") Тогда
		СтруктураОбластьДействия.Вставить("ТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("МодельТС") Тогда
		СтруктураОбластьДействия.Вставить("МодельТС", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Маршрут") Тогда
		СтруктураОбластьДействия.Вставить("Маршрут", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Контрагент") Тогда
		СтруктураОбластьДействия.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ВидРемонта") Тогда
		СтруктураОбластьДействия.Вставить("ВидРемонта", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("ОбъектСтроительства") Тогда
		СтруктураОбластьДействия.Вставить("ОбъектСтроительства", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Подразделение") Тогда
		СтруктураОбластьДействия.Вставить("Подразделение", Неопределено);
	КонецЕсли;
	Если НЕ СтруктураОбластьДействия.Свойство("Прицепы") Тогда
		СтруктураОбластьДействия.Вставить("Прицепы", Новый Массив);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОбластьДействия.ТС) И НЕ ЗначениеЗаполнено(СтруктураОбластьДействия.МодельТС) Тогда
		СтруктураОбластьДействия.Вставить("МодельТС", СтруктураОбластьДействия.ТС.Модель);
	КонецЕсли;
		
	// нет никаких ограничений по области действия тарифов
	Если (ТарифЗП.ОбластиДействия.Количество() = 0) И (ТарифЗП.Организации.Количество() = 0) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ТарифЗП.Организации.Количество() = 0 Тогда
		РезультатОрганизация = Истина;
	Иначе
		Для Каждого ТекСтрока Из ТарифЗП.Организации Цикл
			Если ТекСтрока.Организация = Организация Тогда
				РезультатОрганизация = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	РезультатОбласть = Истина;
	
	Если ТарифЗП.ОбластиДействия.Количество() = 0 Тогда
		РезультатОбласть = Истина;
	Иначе
		РезультатОбластьТС = Неопределено;
		РезультатОбластьМодельТС = Неопределено;
		РезультатОбластьМаршрут = Неопределено;
		РезультатОбластьКонтрагент = Неопределено;
		РезультатОбластьВидРемонта = Неопределено;
		РезультатОбластьОбъектСтроительства = Неопределено;
		РезультатОбластьПодразделение = Неопределено;
		
		ВесСовпаденияФильтров = 0;
		
		Для Каждого ТекСтрока Из ТарифЗП.ОбластиДействия Цикл
			Если ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатТС") Тогда
				Если ТекСтрока.ОбластьДействия = СтруктураОбластьДействия.ТС
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ТС).Найти(ТекСтрока.ОбластьДействия)<>Неопределено Тогда
					РезультатОбластьТС	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе
					Если СтруктураОбластьДействия.Прицепы.Количество() > 0 Тогда
						флПрицепНайден = Ложь;
						Для Каждого ТекПрицеп Из СтруктураОбластьДействия.Прицепы Цикл
							Если ТекСтрока.ОбластьДействия = ТекПрицеп
								ИЛИ СписокРодителейЭлементаСправочника(ТекПрицеп).Найти(ТекСтрока.ОбластьДействия)<>Неопределено Тогда
								РезультатОбластьТС	= Истина;
								ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
								флПрицепНайден = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ флПрицепНайден Тогда
							РезультатОбластьТС = ?(РезультатОбластьТС = Неопределено, Ложь, РезультатОбластьТС);
						КонецЕсли;
					Иначе
						РезультатОбластьТС = ?(РезультатОбластьТС = Неопределено, Ложь, РезультатОбластьТС);
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатМоделиТС") Тогда
				Если ТекСтрока.ОбластьДействия = СтруктураОбластьДействия.МодельТС
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.МодельТС).Найти(ТекСтрока.ОбластьДействия)<>Неопределено Тогда
					РезультатОбластьМодельТС = Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					Если СтруктураОбластьДействия.Прицепы.Количество() > 0 Тогда
						флМодельПрицепНайден = Ложь;
						Для Каждого ТекПрицеп Из СтруктураОбластьДействия.Прицепы Цикл
							Если ТекСтрока.ОбластьДействия = ТекПрицеп.Модель
								ИЛИ СписокРодителейЭлементаСправочника(ТекПрицеп.Модель).Найти(ТекСтрока.ОбластьДействия)<>Неопределено Тогда
								РезультатОбластьМодельТС = Истина;
								ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
								флМодельПрицепНайден = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если НЕ флМодельПрицепНайден Тогда
							РезультатОбластьМодельТС = ?(РезультатОбластьМодельТС = Неопределено, Ложь, РезультатОбластьМодельТС);
						КонецЕсли;
					Иначе
						РезультатОбластьМодельТС = ?(РезультатОбластьМодельТС = Неопределено, Ложь, РезультатОбластьМодельТС);
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатМаршруты") Тогда
				Если ТипЗнч(СтруктураОбластьДействия.Маршрут) = Тип("СписокЗначений") И СтруктураОбластьДействия.Маршрут.НайтиПоЗначению(ТекСтрока.ОбластьДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.Маршрут) = Тип("СправочникСсылка.уатМаршруты") И (ТекСтрока.ОбластьДействия = СтруктураОбластьДействия.Маршрут
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.Маршрут).Найти(ТекСтрока.ОбластьДействия)<>Неопределено) Тогда
					
					РезультатОбластьМаршрут	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьМаршрут	= ?(РезультатОбластьМаршрут	= Неопределено, Ложь, РезультатОбластьМаршрут);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ТипЗнч(СтруктураОбластьДействия.Контрагент) = Тип("СписокЗначений") И СтруктураОбластьДействия.Контрагент.НайтиПоЗначению(ТекСтрока.ОбластьДействия) <> Неопределено
					ИЛИ ТипЗнч(СтруктураОбластьДействия.Контрагент) = Тип("СправочникСсылка.Контрагенты") И (ТекСтрока.ОбластьДействия = СтруктураОбластьДействия.Контрагент
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.Контрагент).Найти(ТекСтрока.ОбластьДействия)<>Неопределено) Тогда
					
					РезультатОбластьКонтрагент	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе	
					РезультатОбластьКонтрагент = ?(РезультатОбластьКонтрагент = Неопределено, Ложь, РезультатОбластьКонтрагент);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатВидыОбслуживанияТС") Тогда
				Если ТекСтрока.ОбластьДействия = СтруктураОбластьДействия.ВидРемонта Тогда
					РезультатОбластьВидРемонта	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьВидРемонта	= ?(РезультатОбластьВидРемонта	= Неопределено, Ложь, РезультатОбластьВидРемонта);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.уатОбъектыСтроительства") Тогда
				Если (ТекСтрока.ОбластьДействия = СтруктураОбластьДействия.ОбъектСтроительства
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.ОбъектСтроительства).Найти(ТекСтрока.ОбластьДействия)<>Неопределено) Тогда
					РезультатОбластьОбъектСтроительства	= Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьОбъектСтроительства	= ?(РезультатОбластьОбъектСтроительства	= Неопределено, Ложь, РезультатОбластьОбъектСтроительства);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТекСтрока.ОбластьДействия) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Если (ТекСтрока.ОбластьДействия = СтруктураОбластьДействия.Подразделение
					ИЛИ СписокРодителейЭлементаСправочника(СтруктураОбластьДействия.Подразделение).Найти(ТекСтрока.ОбластьДействия)<>Неопределено) Тогда
					РезультатОбластьПодразделение = Истина;
					ВесСовпаденияФильтров = ВесСовпаденияФильтров + 1;
				Иначе 	
					РезультатОбластьПодразделение = ?(РезультатОбластьПодразделение	= Неопределено, Ложь, РезультатОбластьПодразделение);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
				
		РезультатОбластьТС = ?(РезультатОбластьТС = Неопределено, Истина, РезультатОбластьТС); //если ТС в фильтре не указано, то тариф используется для всех ТС
		РезультатОбластьМодельТС = ?(РезультатОбластьМодельТС = Неопределено, Истина, РезультатОбластьМодельТС);
		РезультатОбластьМаршрут = ?(РезультатОбластьМаршрут = Неопределено, Истина, РезультатОбластьМаршрут);
		РезультатОбластьКонтрагент = ?(РезультатОбластьКонтрагент = Неопределено, Истина, РезультатОбластьКонтрагент);
		РезультатОбластьВидРемонта = ?(РезультатОбластьВидРемонта = Неопределено, Истина, РезультатОбластьВидРемонта);
		РезультатОбластьОбъектСтроительства	= ?(РезультатОбластьОбъектСтроительства = Неопределено, Истина, РезультатОбластьОбъектСтроительства);
		РезультатОбластьПодразделение	= ?(РезультатОбластьПодразделение = Неопределено, Истина, РезультатОбластьПодразделение);
		
		РезультатОбласть = РезультатОбластьТС И РезультатОбластьМодельТС И РезультатОбластьМаршрут
			И РезультатОбластьКонтрагент И РезультатОбластьВидРемонта И РезультатОбластьОбъектСтроительства И РезультатОбластьПодразделение;
	КонецЕсли;	
	
	Возврат (РезультатОбласть И РезультатОрганизация);
КонецФункции // уатТарифЗПВОбластиДействия

// Функция возвращает результат таблицу значений действующих тарифов з/п
//
// Параметры:
//  вхСотрудник - СправочникСсылка.уатСотрудники - сотрудник, по которому ищется тариф з/п
//  вхДата - Дата - Дата поиска тарифов
//  СписокФильтров - Структура - структура фильтров с ключами, соответствующими типам области данных тарифов з/п
//
Функция уатНайтиТарифыЗП(вхСотрудник, вхДата) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	РезультатТаблица = Новый ТаблицаЗначений;
	//РезультатТаблица.Колонки.Добавить("Период");
	РезультатТаблица.Колонки.Добавить("ТарифЗП");
	РезультатТаблица.Колонки.Добавить("ВидНачисления");
	РезультатТаблица.Колонки.Добавить("СпособРасчетаОплатыТруда");
	РезультатТаблица.Колонки.Добавить("ПараметрВыработки");
	
	// Выбираем тарифы и тарифные планы водителя
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТарифыСотрудников.ТарифЗП,
	|	уатТарифыСотрудников.ТарифЗП.ВидНачисления КАК ВидНачисления,
	|	уатТарифыСотрудников.ТарифЗП.ВидНачисления.СпособРасчетаОплатыТруда КАК СпособРасчетаОплатыТруда,
	|	уатТарифыСотрудников.ТарифЗП.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	РегистрСведений.уатТарифыСотрудников.СрезПоследних(
	|			&Дата,
	|			Сотрудник = &Сотрудник
	|				И Действует) КАК уатТарифыСотрудников
	|УПОРЯДОЧИТЬ ПО
	|	уатТарифыСотрудников.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", вхСотрудник);
	Запрос.УстановитьПараметр("Дата", вхДата);
	
	//теперь для тарифных планов выбираем тарифы
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	
	"ВЫБРАТЬ
	|	ТарифыТарифногоПлана.Тариф КАК ТарифЗП,
	|	ТарифыТарифногоПлана.Тариф.ВидНачисления КАК ВидНачисления,
	|	ТарифыТарифногоПлана.Тариф.ВидНачисления.СпособРасчетаОплатыТруда КАК СпособРасчетаОплатыТруда,
	|	ТарифыТарифногоПлана.Тариф.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	Справочник.уатТарифныеПланыЗП.Тарифы КАК ТарифыТарифногоПлана
	|ГДЕ
	|	ТарифыТарифногоПлана.Ссылка = &ТарифныйПлан";
	
	тблРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого РезультатЗапроса Из тблРезультатЗапроса Цикл
		Если ТипЗнч(РезультатЗапроса.ТарифЗП) = Тип("СправочникСсылка.уатТарифыЗП") Тогда
			НоваяСтрока 							= РезультатТаблица.Добавить();
			НоваяСтрока.ТарифЗП 					= РезультатЗапроса.ТарифЗП;
			НоваяСтрока.ВидНачисления 				= РезультатЗапроса.ВидНачисления;
			НоваяСтрока.СпособРасчетаОплатыТруда 	= РезультатЗапроса.СпособРасчетаОплатыТруда;
			НоваяСтрока.ПараметрВыработки 			= РезультатЗапроса.ПараметрВыработки;
		Иначе	
			Запрос1.УстановитьПараметр("ТарифныйПлан", РезультатЗапроса.ТарифЗП);
			РезультатЗапроса1 = Запрос1.Выполнить().Выбрать();
			Пока РезультатЗапроса1.Следующий() Цикл
				НоваяСтрока 							= РезультатТаблица.Добавить();
				НоваяСтрока.ТарифЗП						= РезультатЗапроса1.ТарифЗП;
				НоваяСтрока.ВидНачисления 				= РезультатЗапроса1.ВидНачисления;
				НоваяСтрока.СпособРасчетаОплатыТруда 	= РезультатЗапроса1.СпособРасчетаОплатыТруда;
				НоваяСтрока.ПараметрВыработки 			= РезультатЗапроса1.ПараметрВыработки;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	#Если Клиент Тогда
		Если РезультатТаблица.Количество() = 0 Тогда
			Сообщить("Не найдены тарифы зарплаты для сотрудника " + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(вхСотрудник.ФизЛицо) + """", СтатусСообщения.Внимание);
		КонецЕсли;	
	#КонецЕсли
	
	Возврат РезультатТаблица;
КонецФункции // уатНайтиТарифыЗП       

// Функция возвращает значение тарифа
//
// Параметры:
//  Прейскурант - ссылка справочника Прейскуранты
//  Расстояние - значение расстояние перевозки
//  ВремяРаботы - значение времени работы
//  Грузоподъемность - грузоподъемность трансп. средств
//  КлассГруза - значение класса груза
//
Функция уатРасчетСдельногоТарифаЗП(ТарифЗП, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) ЭКСПОРТ
	Результат = 0;
	
	Если НЕ ТарифЗП.СложныйТариф Тогда
		Возврат ТарифЗП.Тариф;
	КонецЕсли;              
	
	Для Каждого ТекСтрока Из ТарифЗП.ТаблицаРасчета Цикл
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа1) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 1, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа2) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 2, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Если ЗначениеЗаполнено(ТарифЗП.ГруппировкаТарифа3) Тогда
			Если Не уатПроверкаУсловияТарифа(ТарифЗП, 3, ТекСтрока, Расстояние, ВремяРаботы, Грузоподъемность, КлассГруза) Тогда
				Продолжить;
			КонецЕсли;              
		КонецЕсли;              
		Результат = ТекСтрока.Тариф;
		Прервать;
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции // уатРасчетСдельногоТарифаЗП       


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ РАБОТЫ С ПУТ. ЛИСТАМИ

// Процедура выполняет проверку корректности заполнения путевого листа
//
// Параметры:
//  Организация - организация
//  ПутевойЛист  - проверяемый путевой лист
//  Отказ        - отказ
Процедура уатПроверкаКорректностиПЛ(Организация, ПутевойЛист, Отказ) ЭКСПОРТ
	
	//Если Не ЗначениеЗаполнено(ПутевойЛист.ТранспортноеСредство) Тогда
	//	ТекстСообщения = "Не указан автомобиль!";
	//	Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	//	Отказ = Истина;
	//КонецЕсли;	
	
	Если ПутевойЛист.ДатаВозвращения < ПутевойЛист.ДатаВыезда Тогда
		ТекстСообщения = "Дата возвращения не может быть раньше даты выезда!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;	
	
	//проверка на максимальный суточный пробег по учетной политике
	Если ПутевойЛист.ДатаВозвращения >= ПутевойЛист.ДатаВыезда Тогда
		флАвтоСоСпидометром = (НЕ ЗначениеЗаполнено(ПутевойЛист.ТранспортноеСредство)) ИЛИ ПутевойЛист.ТранспортноеСредство.Модель.НаличиеСпидометра;
		мДни = (НачалоДня(ПутевойЛист.ДатаВозвращения) - НачалоДня(ПутевойЛист.ДатаВыезда))/24/3600 + 1;
		мСуточныйПробег = уатРазностьПоказанийСчетчика(ПутевойЛист.СпидометрВыезда, ПутевойЛист.СпидометрВозвращения) / мДни;
		мМаксимальныйСуточныйПробег = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПутевойЛист.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальныйСуточныйПробег);
		мМаксимальнаяСуточнаяНаработкаМоточасов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПутевойЛист.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальнаяСуточнаяНаработкаМоточасов);
		Если мМаксимальныйСуточныйПробег > 0 И флАвтоСоСпидометром И мСуточныйПробег > мМаксимальныйСуточныйПробег Тогда
			ТекстСообщения = "Суточный пробег по путевому листу (" + мСуточныйПробег + ") превышает максимальный разрешенный (" + мМаксимальныйСуточныйПробег + ")!";
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Отказ = Истина;
		ИначеЕсли мМаксимальнаяСуточнаяНаработкаМоточасов > 0 И (НЕ флАвтоСоСпидометром) И мСуточныйПробег > мМаксимальнаяСуточнаяНаработкаМоточасов Тогда
			ТекстСообщения = "Суточная наработка в моточасах по путевому листу (" + мСуточныйПробег
			+ ") превышает максимально разрешенную (" + мМаксимальнаяСуточнаяНаработкаМоточасов + ")!";
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//проверка на максимальную продолжительность путевого листа
	мМаксимальнаяПродолжительностьПутЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПутевойЛист.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.МаксимальнаяПродолжительностьПутЛиста);	
	Если мМаксимальнаяПродолжительностьПутЛиста > 0 Тогда
		мДниПЛ = (НачалоДня(ПутевойЛист.ДатаВозвращения) - НачалоДня(ПутевойЛист.ДатаВыезда))/24/3600 + 1;
		Если мДниПЛ > мМаксимальнаяПродолжительностьПутЛиста Тогда
			ТекстСообщения = "Продолжительность по путевому листу (" + мДниПЛ
				+ " дн.) превышает максимально разрешенную (" + мМаксимальнаяПродолжительностьПутЛиста + " дн.)!";
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	мПробег = уатРазностьПоказанийСчетчика(ПутевойЛист.СпидометрВыезда, ПутевойЛист.СпидометрВозвращения);
	Если мПробег < (ПутевойЛист.НулевойПробегВыезда + ПутевойЛист.НулевойПробегВозвращения) Тогда
		ТекстСообщения = "Нулевой пробег по пут. листу превышает общий пробег!";
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	
КонецПроцедуры // утПроверкаКорректностиПЛ       

//Функция возвращает грузоподъемность ТС, работающих по пут. листу
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатГрузоподъемностьПоПЛ(ПутевойЛист) Экспорт
	
	мМодель = уатПрочитатьРеквизитыТС(ПутевойЛист.ТранспортноеСредство).Модель;
	
	Если мМодель = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = мМодель.Грузоподъемность;
	
	Для Каждого ТекСтр из ПутевойЛист.Прицепы Цикл
		мМодель = уатПрочитатьРеквизитыТС(ТекСтр.ТС).Модель;
		//!!! надо добавить фильтр
		Результат = Результат + мМодель.Грузоподъемность;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции //уатГрузоподъемностьПоПЛ

// Функция возвращает таблицу ТТД для заданного пут. листа
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатТТДДляПЛ(ПутевойЛист) ЭКСПОРТ
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПутевойЛист) Тогда
		мПустаяТаблица = Новый ТаблицаЗначений;
		мПустаяТаблица.Колонки.Добавить("Проведен");
		мПустаяТаблица.Колонки.Добавить("Номер");
		мПустаяТаблица.Колонки.Добавить("Дата");
		мПустаяТаблица.Колонки.Добавить("Контрагент");
		мПустаяТаблица.Колонки.Добавить("ТТД");
		Возврат мПустаяТаблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатТТД.Проведен,
	|	уатТТД.Номер,
	|	уатТТД.Дата,
	|	уатТТД.Контрагент,
	|	уатТТД.Ссылка КАК ТТД,
	|   0 Ездки,
	|   0 Тонны,
	|   0 Расстояние
	|ИЗ
	|	Документ.уатТТД КАК уатТТД
	|ГДЕ
	|	уатТТД.Выработка.ПутЛист = &ПутЛист И
	|	(НЕ уатТТД.ПометкаУдаления)
	|
	|UNION ALL 
	|
	|ВЫБРАТЬ
	|	уатТТД.Проведен,
	|	уатТТД.Номер,
	|	уатТТД.Дата,
	|	CASE WHEN уатТТД.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка) THEN уатТТД.ОбъектСтроительства ELSE уатТТД.Контрагент END,
	|	уатТТД.Ссылка КАК ТТД,
	|   ТблПЛ.КоличествоЕздок,
	|   ТблПЛ.КоличествоТонн,
	|   ТблПЛ.Расстояние
	|ИЗ
	|	Документ.РеестрНаПеревозку КАК уатТТД
	|INNER JOIN Документ.РеестрНаПеревозку.Задание ТблПЛ ON ТблПЛ.Ссылка = уатТТД.Ссылка
	|и ТблПЛ.ПутевойЛист = &ПутЛист 
	|И (НЕ уатТТД.ПометкаУдаления)
	|
	|
	|";
	Запрос.УстановитьПараметр("ПутЛист", ПутевойЛист);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатНайтиТТДДляПЛ       

// Функция возвращает список видов пут. листов
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция уатВидыПЛ(Организация=Неопределено) ЭКСПОРТ
	
	мСписокВидовПЛ = Новый СписокЗначений;
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._3,"3 (легковой)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._3спец,"3С (спец. автомобиля)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._3спец2,"3С (спец. автомобиля нвдс)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4М,"4М (междугородний)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4П,"4П (повременный)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._4С,"4С (сдельный)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._6С,"6С (автобус необщего пользования)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ2,"ЭСМ2 (строительный)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПЛ1,"ПЛ1 (легковой ЧП)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПГ1,"ПГ1 (грузовой ЧП)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ПА1,"ПА1 (автобус ЧП)");
	
	Если Организация<>Неопределено Тогда
		
		пСтр = ";"+уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВидыПЛДляВыбора); 
		Если пСтр<>";" ТОгда
			Для а = -мСписокВидовПЛ.Количество() по -1 Цикл
				Эл = мСписокВидовПЛ[-а-1];
				Если Найти(пСтр,";"+Эл.Значение+";")=0 Тогда
					мСписокВидовПЛ.Удалить(Эл);		
				КонецЕСЛИ;
			КонецЦикла;
		КонецЕсЛИ;
		
	КонецеСЛИ;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВнешниеОбработки.Ссылка,
	|	ВнешниеОбработки.Наименование
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|WHERE ВидОбработки = &Вид ";
	Запрос.УстановитьПараметр("Вид",Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатьПЛ);
	Тбл =Запрос.Выполнить().Выгрузить();
	ДЛя каждого Стр из Тбл Цикл
		мСписокВидовПЛ.Добавить(Стр.ссылка,Стр.Наименование);
	КонецЦикла;
				   
	
	мСписокВидовПЛ.СортироватьПоПредставлению();
	
	Возврат мСписокВидовПЛ;
	
КонецФункции // уатВидыПЛ       


/////////////////////////////////////////////////////////////////////////////////////
//        ПРОЧИЕ ФУНКЦИИ

// Процедура получает коэффициент изменения нормы расхода ГСМ в зависимости от 
// температуры.
//
// Параметры:
//  Температура  - температура для которой необходимо получить коэффициент
Функция уатПолучитьКоэффициентИзмененияНормыДляТемпературы(Температура) ЭКСПОРТ
	// Параметры: Температура
	// Возвращаемое значение: процент изменения нормы расхода топлива
	Результат = 0;
	спрТемпературы = Справочники.уатТемпературныеКоэффициентыГСМ;
	ВыборкаТемпературы = спрТемпературы.Выбрать(,,,"ТемператураМеньше Возр");
	Пока ВыборкаТемпературы.Следующий() Цикл
		Если Температура <= ВыборкаТемпературы.ТемператураМеньше Тогда
			Результат = ВыборкаТемпературы.Процент;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Результат;
КонецФункции // уатСписокМаселАС       

//Функция возвращает список пластиковых карт водителя или автомобиля
// Параметры: КомуВыдана - ссылка на справочник ФизЛица или ОС
Функция уатСписокПластиковыхКарт(КомуВыдана) ЭКСПОРТ
	спПластиковыхКарт = Новый СписокЗначений;
	
	спрПластиковыеКарты = Справочники.уатПластиковыеКарты;
	ОтборКомуВыдана = Новый Структура("КомуВыдана");
	ОтборКомуВыдана.КомуВыдана = КомуВыдана;
	ВыборкаПластиковыеКарты = спрПластиковыеКарты.Выбрать(,,ОтборКомуВыдана);
	Пока ВыборкаПластиковыеКарты.Следующий() Цикл
		спПластиковыхКарт.Добавить(ВыборкаПластиковыеКарты.Ссылка, ВыборкаПластиковыеКарты.Код);
	КонецЦикла;	
	Возврат спПластиковыхКарт;
	
КонецФункции // СписокПластиковыхКарт       

//Функция возвращает таблицу значений параметров выработки ТС 
// Параметры: 	ТС - ссылка на справочник ОС
// Возвращаемое значение: Список значений
Функция уатПараметрыВыработкиТС() ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПараметрыВыработки.Ссылка КАК ПараметрВыработки
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|
	|ГДЕ
	|	уатПараметрыВыработки.ПометкаУдаления = &ПометкаУдаления И
	|	уатПараметрыВыработки.ДействуетНаТС = &ДействуетНаТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПараметрыВыработки.Ссылка.Наименование";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ДействуетНаТС", Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатПараметрыВыработкиТС

// процедура выполняет чтение данных из хранилища для заданного объекта
//
// Параметры
//  Объект - Объект для которого необходимо получить картинки и/или файлы
Функция уатПрочитатьЗначениеИзХранилища(Объект) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатКартинкиИФайлы.Данные
	|ИЗ
	|	РегистрСведений.уатКартинкиИФайлы КАК уатКартинкиИФайлы
	|ГДЕ
	|	уатКартинкиИФайлы.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции // уатПрочитатьЗначениеИзХранилища

// Функция выполняет проверку указанной компоненты.
//
// Параметры:
//  ИмяКомпоненты - сокращенное название компоненты: УАТ для управления 
//                 автотранспортом
//
// Возвращаемое значение:
//  результат проверки
Функция уатДоступностьКомпоненты(ИмяКомпоненты = "УАТ") Экспорт
	текКомпонента = уатТекущаяКомпонента();
	Если Найти(ВРег(ТекКомпонента),ВРег(ИмяКомпоненты)) тогда
		Рез = Истина;
	Иначе 
		Рез = Ложь;
	КонецЕсли;
	Возврат	Рез;
КонецФункции

// Функция получает строковое представление текущей компоненты 
//
// Возвращаемое значение:
//  ТекКомпонента - строковое представление текущей компоненты. Возможные 
//                 варианты: УАТ
//
Функция уатТекущаяКомпонента() Экспорт
	
	ТекКомпонента = "";	
	Если НЕ Метаданные.Документы.Найти("уатПутевойЛист") = Неопределено тогда
		ТекКомпонента = "УАТПРОФ";	
	КонецЕсли;
	Если НЕ Метаданные.Документы.Найти("уатРазмещениеГрузаВКонтейнере_уэ") = Неопределено тогда
		ТекКомпонента = СокрЛП(ТекКомпонента) + " УЭ";
	КонецЕсли;
	Возврат ТекКомпонента;	
	
КонецФункции

// Функция получает класс номенклатуры грузов
//
Функция уатКлассГруза(Номенклатура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатНоменклатураГрузов.Класс
	|ИЗ
	|	РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
	|ГДЕ
	|	уатНоменклатураГрузов.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Класс;
	КонецЕсли;
	
	Возврат 0;
КонецФункции
	
// Функция выполняет получение веса и объема для заданной номенклатуры и единицы
// измерения. 
//
// Параметры:
//  Номенклатура - номенклатура для которой необходимо получить параметры
//  ЕдиницаИзмерения - единица измерения номенклатуры, для которой необходимо получить параметры
//
// Возвращаемое значение:
//  Результат - Структура - содержащая значения веса и объема
Функция ПолучитьВесОбъемНоменклатуры(Номенклатура,ЕдиницаИзмерения) Экспорт
	
	Вес   = 0; Объем = 0; КолМест = 0;
	
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатНоменклатураГрузов.Объем,
		|	уатНоменклатураГрузов.Вес,
		|	уатНоменклатураГрузов.КоличествоМест
		|ИЗ
		|	РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
		|ГДЕ
		|	уатНоменклатураГрузов.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() тогда
			Выборка.Следующий();
			Вес     = Выборка.Вес;
			Объем   = Выборка.Объем;
			КолМест = Выборка.КоличествоМест;
		КонецЕсли;
		
	ИначеЕсли типЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") тогда
		
		Вес   = ЕдиницаИзмерения.Вес;
		Объем = ЕдиницаИзмерения.Объем;
		Если Объем = 0 ИЛИ Вес = 0 ИЛИ КолМест = 0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕдиницыИзмерения.Ссылка,
			|	ЕдиницыИзмерения.Вес,
			|	ЕдиницыИзмерения.Объем,
			|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
			|	ЕСТЬNULL(уатНоменклатураГрузов.КоличествоМест, 0) КАК КоличествоМест
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
			|		ПО (уатНоменклатураГрузов.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
			|			И (уатНоменклатураГрузов.Номенклатура = ЕдиницыИзмерения.Владелец)
			|ГДЕ
			|	ЕдиницыИзмерения.Владелец = &Владелец
			|	И (ЕдиницыИзмерения.Вес <> 0
			|			ИЛИ ЕдиницыИзмерения.Объем <> 0)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Коэффициент";
			Запрос.УстановитьПараметр("Владелец",Номенклатура.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() цикл
				Если Вес <> 0 И Объем <> 0 И КолМест <> 0 Тогда Прервать; КонецЕсли;
				Если Вес = 0 И Выборка.Вес <> 0 тогда 
					Вес = ((Выборка.Вес * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент);
				КонецЕсли;
				Если Объем = 0 И Выборка.Объем <> 0 тогда
					Объем = ((Выборка.Объем * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент);
				КонецЕсли;
				Если КолМест = 0 И Выборка.КоличествоМест <> 0 тогда
					КолМест = ((Выборка.КоличествоМест * ЕдиницаИзмерения.Коэффициент) / Выборка.Коэффициент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("Вес, Объем, КоличествоМест", Вес, Объем, КолМест);
	
КонецФункции

// Процедура возвращает расстояние между указанными пунктами
//
// Параметры:
//  МенятьПорядокПунктов - Определяет искать ли расстояние для другой последовательности пунктов
// 
// ВозвращаемоеЗначение:
//  Расстояние   - расстояние между пунктами, если данные не найдены, будет возвращен 0
//
Функция уатПолучитьРасстояниеМеждуПунктами(Пункт1, Пункт2, МенятьПорядокПунктов = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	уатРасстоянияМеждуПунктами.Расстояние
	|ИЗ
	|	РегистрСведений.уатРасстоянияМеждуПунктами КАК уатРасстоянияМеждуПунктами
	|ГДЕ
	|	(уатРасстоянияМеждуПунктами.Пункт1 = &Пункт1
	|	И уатРасстоянияМеждуПунктами.Пункт2 = &Пункт2)
	|	//УСЛОВИЕМЕНЯТЬПОРЯДОКПУНКТОВ";
	
	Если МенятьПорядокПунктов тогда
		ТекстУсловия = "
		|	ИЛИ (уатРасстоянияМеждуПунктами.Пункт1 = &Пункт2
		|	И уатРасстоянияМеждуПунктами.Пункт2 = &Пункт1)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//УСЛОВИЕМЕНЯТЬПОРЯДОКПУНКТОВ",ТекстУсловия);
	КонецЕсли;
	Запрос.УстановитьПараметр("Пункт1",Пункт1);
	Запрос.УстановитьПараметр("Пункт2",Пункт2);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Расстояние;	
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Процедура обработчик поля Водитель
//Заменяет стандартную обработку на выбор значения из регистра Водители
Функция уатВодительАвтоподборТекста(ЭтаФорма, Знач Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Знач Организация_ = Неопределено) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если Организация_ <> Неопределено И Организация_.Пустая() Тогда
		Организация_ = Неопределено;
	КонецЕсли;
	
	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ	
	|	уатСотрудники.Ссылка КАК Водитель
	|ИЗ
	|	Справочник.уатСотрудники КАК уатСотрудники
	|ГДЕ
	|	уатСотрудники.ДатаУвольнения = &ПустаяДата
	|	И (НЕ уатСотрудники.ПометкаУдаления)
	|	И уатСотрудники.Наименование ПОДОБНО &парамТекст";
	
	Если Организация_ <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|   И уатСотрудники.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация_);
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = СокрЛП(Текст) + "%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Водитель.Наименование;
	КонецЕсли;
КонецФункции

// Функция возвращает список водителей при окончании ввода строки в поле Водитель
//
// Параметры
//  Текст 		- строка - начало гос. или гар. номера
//  НачальноеЗначение	- СправочникСсылка.ОсновныеСредства - значение по умолчанию
//
// Возвращаемое значение:
//  СписокЗначений - список водителей, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих ТС
//
Функция уатПодобратьСписокВодителей(Знач Текст, НачальноеЗначение, Знач Организация_ = Неопределено) Экспорт
    Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = сокрЛП(Текст);
	
	Если Организация_ <> Неопределено И Организация_.Пустая() Тогда
		Организация_ = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	уатСотрудники.Ссылка КАК Водитель
	|ИЗ
	|	Справочник.уатСотрудники КАК уатСотрудники
	|ГДЕ
	|	уатСотрудники.ДатаУвольнения = &ПустаяДата
	|	И (НЕ уатСотрудники.ПометкаУдаления) ";
	
	Если КодСимвола(Текст)<60 ТОгда
		ТекстЗапроса =ТекстЗапроса +"	И ПодСтрока(уатСотрудники.Код,1,"+СтрДлина(Текст)+") = &парамТекст";
	ИНАче
		ТекстЗапроса =ТекстЗапроса +"	И уатСотрудники.Наименование ПОДОБНО &парамТекст";
		Текст = сокрЛП(Текст)+"%";
	КонецЕСЛИ;

	Если Организация_ <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|   И уатСотрудники.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация_);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Выборка = Запрос.Выполнить().Выбрать();

	Количество = Выборка.Количество();

	Если Количество = 0 Тогда
		//#Если Клиент Тогда
		//	Предупреждение("В поле ввода неверно задано наименование водителя!", 10);
		//#КонецЕсли
		//Возврат НачальноеЗначение;
		Возврат Новый СписокЗначений;

	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Водитель);
		КонецЦикла;

		Возврат Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // уатЗащищенныеФункции.уатПодобратьСписокТС()

// Функция выполняет проверку наличия на компьютере установленной компоненты электронных карт INGIT
//
// Возвращаемое значение:
//  РезультатПроверки - <Булево>
Функция уатУстановленыКартыИнгит() Экспорт
	Попытка
		мКарта = Новый COMОбъект("Ingit.GWControl");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

// Процедура открывает типовую обработку ОбработкуПоискИЗаменаДублирующихсяЭлементов
//Если обработка отсутствует, то открывается аналогичная обработка УАТ
//
Процедура уатОткрытьОбработкуПоискИЗаменаДублирующихсяЭлементов() Экспорт
	Если Метаданные.Обработки.Найти("ПоискИЗаменаДублирующихсяЭлементов") <> Неопределено Тогда
		Обработки.ПоискИЗаменаДублирующихсяЭлементов.ПолучитьФорму().Открыть();
	Иначе
		Обработки.уатПоискИЗаменаДублирующихсяЭлементов.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры

// Функция возвращает признак того, что конфигурация УАТ объединена с типовым решением
//
Функция ЭтоОбъединеннаяКонфигурация() Экспорт
	Возврат (Метаданные.Справочники.Найти("РегистрацияВИФНС") <> Неопределено);
КонецФункции

// Функция возвращает признак того, что конфигурация УАТ объединена с конфигурацией ТЛЭ
//
Функция ЭтоОбъединениеСТЛЭ() Экспорт
	Возврат (Метаданные.Документы.Найти("уатИзвлечениеГрузаИзКонтейнера_уэ") <> Неопределено);
КонецФункции

// Функция возвращает признак того, что конфигурация УАТ объединена с конфигурацией БП
//
Функция ЭтоОбъединениеСБП() Экспорт
	Возврат (Метаданные.Документы.Найти("ОтражениеНачисленияНДС") <> Неопределено);
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНТЕРНЕТ-ПОДДЕРЖКИ ПОЛЬЗОВАТЕЛЕЙ

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки
//
Функция уатПолучитьНомерРелиза(НомерВерсии) Экспорт
	
	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;
	
	Для х = 1 По СтрДлина(НомерВерсии) Цикл
		
		Если Сред(НомерВерсии, х, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;
		
		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = х - 1;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);
	
КонецФункции // ПолучитьНомерРелиза()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПЛАНИРОВАНИЕМ ТО

// Список ТС у которых подошел срок ТО
// 
// Параметры
//  ДатаТО - Дата, на которую нужно осуществлять проверку  
//  ТС -  ТС, для которого нужно проверить.
//  ВидТО - Вид проходимого ТО (например, ТО1)
// 
//
// Возвращаемое значение:
// РезультатЗапроса 
//
//
Функция уатСписокТСДляТО(ДатаТО, ТС = Неопределено, ВидТО = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ДатаТО) Тогда
		ДатаТО = ТекущаяДата();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НормыТО.ТС КАК ТС,
	|	уатВыработкаТСОбороты.КоличествоОборот,
	|	уатПрохождениеТОСрезПоследних.Выработка,
	|	уатПрохождениеТОСрезПоследних.ВидТО КАК ВидТО,
	|	уатПрохождениеТОСрезПоследних.Период КАК ДатаТО,
	|	ВЫБОР
	|		КОГДА НормыТО.ТС.Модель.НаличиеСпидометра И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) ИЛИ (НЕ НормыТО.ТС.Модель.НаличиеСпидометра) И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|			ТОГДА НормыТО.НачальныйПробег
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйПробег,
	|	НормыТО.ПараметрВыработки,
	|	НормыТО.ЗначениеПараметраВыработки,
	|	НормыТО.Допуск,
	|	НормыТО.ВидОбслуживания,
	|	НормыТО.ПериодичностьОбслуживания,
	|	НормыТО.КоличествоПериодов
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания,
	|		уатМоделиТСНормативыОбслуживания.ПараметрВыработки КАК ПараметрВыработки,
	|		ВЫБОР
	|			КОГДА уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ уатМоделиТСНормативыОбслуживания.ЗначениеПараметраВыработки
	|		КОНЕЦ КАК ЗначениеПараметраВыработки,
	|		уатМоделиТСНормативыОбслуживания.ПериодичностьОбслуживания КАК ПериодичностьОбслуживания,
	|		ВЫБОР
	|			КОГДА уатМоделиТСНормативыОбслуживания.КоличествоПериодов ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ уатМоделиТСНормативыОбслуживания.КоличествоПериодов
	|		КОНЕЦ КАК КоличествоПериодов,
	|		ВЫБОР
	|			КОГДА уатМоделиТСНормативыОбслуживания.Допуск ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ уатМоделиТСНормативыОбслуживания.Допуск
	|		КОНЕЦ КАК Допуск,
	|		ВЫБОР
	|			КОГДА уатМоделиТСНормативыОбслуживания.КоличествоПериодов ЕСТЬ NULL ИЛИ уатМоделиТСНормативыОбслуживания.КоличествоПериодов = 0
	|				ТОГДА 1
	|			ИНАЧЕ 1 / уатМоделиТСНормативыОбслуживания.КоличествоПериодов
	|		КОНЕЦ КАК ПродолжительностьПериода,
	|		уатТС.Ссылка КАК ТС,
	|		уатТС.НачальныйПробег КАК НачальныйПробег,
	|		уатТС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию
	|	ИЗ
	|		Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|			ПО (уатТС.Модель = уатМоделиТСНормативыОбслуживания.Ссылка)) КАК НормыТО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПрохождениеТО.СрезПоследних(&ДатаКон, ) КАК уатПрохождениеТОСрезПоследних
	|		ПО НормыТО.ВидОбслуживания = уатПрохождениеТОСрезПоследних.ВидТО
	|			И НормыТО.ТС = уатПрохождениеТОСрезПоследних.ТС
	|			И НормыТО.ПараметрВыработки = уатПрохождениеТОСрезПоследних.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(, &ДатаКон, , ) КАК уатВыработкаТСОбороты
	|		ПО НормыТО.ПараметрВыработки = уатВыработкаТСОбороты.ПараметрВыработки
	|			И НормыТО.ТС = уатВыработкаТСОбороты.ТС
	|ГДЕ
	|	((НормыТО.ЗначениеПараметраВыработки <> 0 И ВЫБОР
	|			КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL 
	|					И уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатВыработкаТСОбороты.КоличествоОборот ЕСТЬ NULL 
	|						ТОГДА -уатПрохождениеТОСрезПоследних.Выработка
	|					ИНАЧЕ ВЫБОР
	|							КОГДА уатПрохождениеТОСрезПоследних.Выработка ЕСТЬ NULL 
	|								ТОГДА ВЫБОР
	|										КОГДА НормыТО.ПараметрВыработки.Временный
	|											ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|										ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|									КОНЕЦ
	|							ИНАЧЕ ВЫБОР
	|										КОГДА НормыТО.ПараметрВыработки.Временный
	|											ТОГДА уатВыработкаТСОбороты.КоличествоОборот / 3600
	|										ИНАЧЕ уатВыработкаТСОбороты.КоличествоОборот
	|									КОНЕЦ - 
	|										ВЫБОР
	|										КОГДА уатПрохождениеТОСрезПоследних.ПараметрВыработки.Временный
	|											ТОГДА уатПрохождениеТОСрезПоследних.Выработка / 3600
	|										ИНАЧЕ уатПрохождениеТОСрезПоследних.Выработка
	|									КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ >= НормыТО.ЗначениеПараметраВыработки - НормыТО.Допуск - ВЫБОР
	|					КОГДА НормыТО.ТС.Модель.НаличиеСпидометра И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий) ИЛИ (НЕ НормыТО.ТС.Модель.НаличиеСпидометра) И НормыТО.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРаботе)
	|						ТОГДА НормыТО.НачальныйПробег
	|					ИНАЧЕ 0
	|				КОНЕЦ)
	|	ИЛИ
	|		(НормыТО.ЗначениеПараметраВыработки = 0 И
	|			((ВЫБОР
	|				КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьГод ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ГОД, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|				ИНАЧЕ ВЫБОР КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьКвартал ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), КВАРТАЛ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|				ИНАЧЕ ВЫБОР КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьМесяц ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), МЕСЯЦ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|				ИНАЧЕ ВЫБОР КОГДА НормыТО.ПериодичностьОбслуживания = &ПериодичностьНеделя ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), НЕДЕЛЯ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ЕСТЬNULL(уатПрохождениеТОСрезПоследних.Период, НормыТО.ДатаВводаВЭксплуатацию), ДЕНЬ, НормыТО.ПродолжительностьПериода), ДЕНЬ, НормыТО.Допуск)
	|			КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ) < &ДатаКон)))";
	
	Если ЗначениеЗаполнено(ТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И НормыТО.ТС = &ТС";
		Запрос.УстановитьПараметр("ТС", ТС);
	КонецЕСли;
	
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаТО));
	Запрос.УстановитьПараметр("ПериодичностьГод", Перечисления.Периодичность.Год);
	Запрос.УстановитьПараметр("ПериодичностьКвартал", Перечисления.Периодичность.Квартал);
	Запрос.УстановитьПараметр("ПериодичностьМесяц", Перечисления.Периодичность.Месяц);
	Запрос.УстановитьПараметр("ПериодичностьНеделя", Перечисления.Периодичность.Неделя);
	Запрос.УстановитьПараметр("ПериодичностьДень", Перечисления.Периодичность.День);
	
	Возврат Запрос.Выполнить();
КонецФункции // уатСписокТСДляТО()


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ РАБОТЫ С ГСМ

//Возвращает значение реквизитов ГСМ из регистра сведений
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПрочитатьРеквизитГСМ(ГСМ, ИмяРеквизита="") ЭКСПОРТ
	Перем ЗначениеРеквизита;
	
	ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГСМ.Получить(Новый Структура("Номенклатура",ГСМ));
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат ВыборкаЗаписей;
	Иначе	
		ВыборкаЗаписей.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Возврат ЗначениеРеквизита;
	КонецЕсли;	
КонецФункции // уатПрочитатьРеквизитГСМ()

//Возвращает количество литров по талону ГСМ
//					
// Возвращаемое значение: ЗначениеРеквизита
Функция уатКоличествоЛитровТалонаГСМ(Дата, АЗС, ГСМ, КоличествоТалонов) ЭКСПОРТ
	
	Если ТипЗнч(ГСМ) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГСМ.Получить(Новый Структура("Номенклатура",ГСМ));
		
	ИначеЕсли ТипЗнч(ГСМ) = Тип("Структура") Тогда
		
		ВыборкаЗаписей = ГСМ;
		
	КонецЕсли;
	
	Если ВыборкаЗаписей <> Неопределено Тогда
		Если ВыборкаЗаписей.ЛитровыйТалон Тогда
			Результат = ВыборкаЗаписей.НоминалТалона * КоличествоТалонов;
		Иначе
			//определим последнюю цену ГСМ
			мЦенаВалюта = уатНайтиЦенуНоменклатуры(Дата, ВыборкаЗаписей.ГСМТалона, АЗС);
			Результат = ?(мЦенаВалюта.Цена = 0, 0, окр(ВыборкаЗаписей.НоминалТалона * КоличествоТалонов / мЦенаВалюта.Цена, 3));
		КонецЕсли;
	Иначе
		Результат = 0;
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции // уатКоличествоЛитровТалонаГСМ()

//Возвращает таблицу аналогов ГСМ
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПолучитьАналогиГСМ(ГСМ, ГруппаГСМ=Неопределено) ЭКСПОРТ
	
	Если Тип("ТаблицаЗначений") <> ТипЗнч(ГСМ) Тогда
		ТабГСМ = Новый ТаблицаЗначений;
		ТабГСМ.Колонки.Добавить("ГСМ");
		НоваяСтрока 	= ТабГСМ.Добавить();
		НоваяСтрока.ГСМ = ГСМ;
	Иначе
		ТабГСМ = ГСМ;
	КонецЕсли;	
	
	ТаблицаАналоги = Новый ТаблицаЗначений;
	ТаблицаАналоги.Колонки.Добавить("ГСМ");
	ТаблицаАналоги.Колонки.Добавить("Аналог");
	Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
		ТаблицаАналоги.Колонки.Добавить("АналогТоплива");
		ТаблицаАналоги.Колонки.Добавить("Литровый");
		ТаблицаАналоги.Колонки.Добавить("Номинал");
	КонецЕсли;	
	
	Для Каждого Строка Из ТабГСМ Цикл
		
		Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	уатНоменклатураГСМ.Номенклатура КАК Аналог,
			|	уатАналогиГСМ.Аналог КАК АналогТоплива,
			|	уатАналогиГСМ.ГСМ КАК ГСМ,
			|	уатНоменклатураГСМ.ЛитровыйТалон КАК Литровый,
			|	уатНоменклатураГСМ.НоминалТалона КАК Номинал
			|ИЗ
			|	РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
			|		ПО уатАналогиГСМ.Аналог = уатНоменклатураГСМ.ГСМТалона
			|
			|ГДЕ
			|	уатАналогиГСМ.ГСМ = &ГСМ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ГСМ", Строка.ГСМТалона);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
				
				НоваяСтрока = ТаблицаАналоги.Добавить();
				НоваяСтрока.ГСМ 			= СтрокаЗапроса.ГСМ;
				НоваяСтрока.Аналог 			= СтрокаЗапроса.Аналог;
				НоваяСтрока.АналогТоплива 	= СтрокаЗапроса.АналогТоплива;
				НоваяСтрока.Литровый 		= СтрокаЗапроса.Литровый;
				НоваяСтрока.Номинал 		= СтрокаЗапроса.Номинал;
				
			КонецЦикла;
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
			|	АналогиГСМ.Аналог,
			|	АналогиГСМ.ГСМ КАК ГСМ
			|ИЗ
			|	РегистрСведений.уатАналогиГСМ КАК АналогиГСМ
			|
			|ГДЕ
			|	АналогиГСМ.ГСМ = &ГСМ";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ГСМ", Строка.ГСМ);
			
			ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
				
				НоваяСтрока = ТаблицаАналоги.Добавить();
				НоваяСтрока.ГСМ 			= СтрокаЗапроса.ГСМ;
				НоваяСтрока.Аналог 			= СтрокаЗапроса.Аналог;
				
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТаблицаАналоги;
	
КонецФункции // уатПолучитьАналогиГСМ()

//Возвращает таблицу заправок по пут. листу
// Параметры: 	ТС - ссылка на справочник ОС
//				ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПолучитьЗаправкиДляПЛ(ПутевойЛист) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	ТекстЗапроса=
	
	"ВЫБРАТЬ
	|	уатЗаправкаГСМЗаправки.Дата КАК Дата,
	|	уатЗаправкаГСМЗаправки.Ссылка.Номер,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.Страна,
	|	уатЗаправкаГСМЗаправки.ТС,
	|	уатЗаправкаГСМЗаправки.ГСМ,
	|	уатЗаправкаГСМЗаправки.Цена,
	|	уатЗаправкаГСМЗаправки.Количество,
	|	уатЗаправкаГСМЗаправки.Водитель,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Сумма,
	|	уатЗаправкаГСМЗаправки.Валюта,
	|	уатЗаправкаГСМЗаправки.СтавкаНДС,
	|	уатЗаправкаГСМЗаправки.СуммаНДС,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.Ссылка,
	|	уатЗаправкаГСМЗаправки.НомерСтроки,
	|	уатЗаправкаГСМЗаправки.НомераТалонов
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.ПутевойЛист = &ПутевойЛист
	|	И уатЗаправкаГСМЗаправки.ПутевойЛист <> &ПустойПутевойЛист";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПутевойЛист",ПутевойЛист);
	Запрос.УстановитьПараметр("ПустойПутевойЛист",Документы.уатПутевойЛист.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // уатПолучитьЗаправкиДляПЛ

//Функция возвращает остаток ГСМ на автомобиле
// Параметры: МоментВремени - время на которое определяется остаток
// ТС
// ГСМ
// ПутевойЛист - параметр нужно передавать только в случае, если нужен остаток на выезд по путевому листу.
//               Если этот параметр передан, то производится контроль заправок  
Функция уатОстатокГСМнаТС(МоментВремени, ТС, ГСМ, ПутевойЛист = Неопределено) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	Запрос.Текст=
	
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА (ОстаткиГСМ.КоличествоОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ОстаткиГСМ.КоличествоОстаток КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(&Момент, ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки";
	
	//получаем аналоги
	тзАналогиГСМ = уатПолучитьАналогиГСМ(ГСМ);
	
	//добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ 			= ГСМ;
	НоваяСтрока.Аналог 			= ГСМ;
	
	Запрос.УстановитьПараметр("Момент",МоментВремени);
	Запрос.УстановитьПараметр("ГСМ",тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС",ТС);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ВыборкаЗапроса.Следующий();
	Результат = ВыборкаЗапроса.Количество;
	
	Возврат Результат;
	
КонецФункции // уатОстатокГСМнаТС       

// Функция возвращает список видов заправок ГСМ
//
// Параметры:
//  ПутевойЛист - ссылка документа пут. лист
//
Функция СписокВидовЗаправок() ЭКСПОРТ
	
	мСписокЗаправок = Новый СписокЗначений;
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад);
	мСписокЗаправок.Добавить(Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны);
	
	Возврат мСписокЗаправок;
	
КонецФункции // СписокВидовЗаправок       


/////////////////////////////////////////////////////////////////////////////////////
//        ФУНКЦИИ ДЛЯ СПИСАНИЯ ГСМ

// Возвращает результат запроса по остаткам ГСМ по партиям
//
Функция уатПолучитьОстаткиПартийГСМ(МоментВремени, СпособОценкиМПЗ, ТС, ГСМ)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиГСМ.Партия КАК Партия,
	|	ОстаткиГСМ.ТС КАК ТС,
	|	ОстаткиГСМ.ГСМ КАК ГСМ,
	|	ЕСТЬNULL(ОстаткиГСМ.КоличествоОстаток, 0) КАК Количество,
	|	ОстаткиГСМ.СтоимостьОстаток КАК Стоимость,
	|	ОстаткиГСМ.СтоимостьУпрОстаток КАК СтоимостьУпр
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(
	|		&Момент,
	|		ГСМ В (&ГСМ) И ТС = &ТС) КАК ОстаткиГСМ
	|ГДЕ
	|	ОстаткиГСМ.КоличествоОстаток > 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки";
	
	Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата ВОЗР";
	ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО	ОстаткиГСМ.Партия.Дата УБЫВ";
	КонецЕсли;
	
	//получаем аналоги
	тзАналогиГСМ = уатПолучитьАналогиГСМ(ГСМ);
	
	//добавляем к аналогам основное ГСМ
	НоваяСтрока = тзАналогиГСМ.Добавить();
	НоваяСтрока.ГСМ = ГСМ;
	НоваяСтрока.Аналог = ГСМ;
	
	Запрос.УстановитьПараметр("Момент", МоментВремени);
	Запрос.УстановитьПараметр("ГСМ", тзАналогиГСМ.ВыгрузитьКолонку("Аналог"));
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Возврат Запрос.Выполнить();
КонецФункции

//Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоГСМ - результат запроса по табличной части "Материалы",
//  ТаблицаДляСписанияГСМ - Сформированная таблица значений,
//  ПоДокументу - булево, Истина - берем данные из документа и рассчитываем стоимость. Ложь - читаем данные из регистра
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция уатПодготовитьТаблицуСписанияГСМ(ДокументОбъект, ТаблицаДляСписанияГСМ, ПоДокументу, вхСредняяЦена = 0, СтрокаОшибки = "") Экспорт
	
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ВсеОК = Истина;
	мСписаноКоличество = 0;
	мСписаноСтоимость  = 0;
	
	ТаблицаДляСписанияГСМ = Новый ТаблицаЗначений;
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Партия");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Дата");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Склад");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ГСМ");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Номенклатура");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("ТС");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Количество");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Коэффициент");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Сумма");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("СтоимостьУпр");
	ТаблицаДляСписанияГСМ.Колонки.Добавить("Стоимость");
	
	Если ПоДокументу Тогда
		//заполняем таблицу по данным документа. Рассчитываем стоимость ГСМ
		// получим результат запроса по таблице ГСМ в пут. листе
		РезультатЗапросаПоГСМ = Новый Запрос();
		
		МоментВремениОстПартий = ДокументОбъект.МоментВремени();
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатПутевойЛистРасходГСМ.ГСМ,
			|	уатПутевойЛистРасходГСМ.РасходПоФакту КАК СписываемоеКоличество,
			|	уатПутевойЛистРасходГСМ.ТС,
			|	уатПутевойЛистРасходГСМ.Ссылка.ДатаВозвращения КАК Дата
			|ИЗ
			|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
			|ГДЕ
			|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка
			|	И уатПутевойЛистРасходГСМ.Активен = &Активен";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Активен",Истина);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаВозвращения) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаВозвращения, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
			тблВыборкаЗапросаПоГСМ = ДокументОбъект.РасходГСМ.Выгрузить();
			тблВыборкаЗапросаПоГСМ.Колонки.Добавить("Дата");
			тблВыборкаЗапросаПоГСМ.Колонки.РасходПоФакту.Имя = "СписываемоеКоличество";
			тблВыборкаЗапросаПоГСМ.ЗаполнитьЗначения(ДокументОбъект.ДатаВозвращения, "Дата");
			
			Если ЗначениеЗаполнено(ДокументОбъект.ДатаВозвращения) Тогда
				МоментВремениОстПартий = Новый Граница(ДокументОбъект.ДатаВозвращения, ВидГраницы.Исключая);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.уатСливГСМ") Тогда
			РезультатЗапросаПоГСМ.Текст	=
			"ВЫБРАТЬ
			|	уатСливГСМ.ТС,
			|	уатСливГСМ.ГСМ,
			|	уатСливГСМ.АЗС.Контрагент_Склад КАК Склад,
			|	уатСливГСМ.Количество КАК СписываемоеКоличество,
			|	уатСливГСМ.Количество КАК Количество,
			|	&Коэффициент КАК Коэффициент,
			|	уатСливГСМ.Дата
			|ИЗ
			|	Документ.уатСливГСМ КАК уатСливГСМ
			|
			|ГДЕ
			|	уатСливГСМ.Ссылка = &Ссылка";
			РезультатЗапросаПоГСМ.УстановитьПараметр("Коэффициент",1);
			РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
			тблВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выгрузить();
			
		КонецЕсли;	
		
		СпособОценкиМПЗ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ);
		
		//Перебираем строки ГСМ, который надо списать
		Для Каждого ВыборкаЗапросаПоГСМ Из тблВыборкаЗапросаПоГСМ Цикл
			НадоСписатьКоличество		= ВыборкаЗапросаПоГСМ.СписываемоеКоличество;
			
			//Получение остатков ГСМ по партиям
			РезультатЗапросаПартииГСМ = уатПолучитьОстаткиПартийГСМ(МоментВремениОстПартий, СпособОценкиМПЗ, ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			ВыборкаЗапросаПартииГСМ		= РезультатЗапросаПартииГСМ.Выбрать();
			
			//КоличествоОстаток = уатОстатокГСМнаТС(ДокументОбъект.МоментВремени(),
			//	ВыборкаЗапросаПоГСМ.ТС, ВыборкаЗапросаПоГСМ.ГСМ);
			//Если НадоСписатьКоличество > КоличествоОстаток Тогда
			//	//Расход по ТС превышает остаток
			//	ВсеОК=Ложь;
			//	СтрокаОшибки = СтрокаОшибки + Символы.ПС + "Надо списать: " + НадоСписатьКоличество
			//		+ ", остаток: " + КоличествоОстаток;
			//КонецЕсли; 
			
			Если ВсеОК Тогда
				
				НадоСписатьСумму = 0;
				НадоСписатьСуммуУпр = 0;
				Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
					Попытка
						мТаблицаДляСуммы	= РезультатЗапросаПартииГСМ.Выгрузить();
						НадоСписатьСумму = мТаблицаДляСуммы.Итог("Стоимость") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
						НадоСписатьСуммуУпр = мТаблицаДляСуммы.Итог("СтоимостьУпр") / мТаблицаДляСуммы.Итог("Количество") * НадоСписатьКоличество;
					Исключение
					КонецПопытки;	
				КонецЕсли;
				
				Пока НадоСписатьКоличество > 0 Цикл
					Если ВыборкаЗапросаПартииГСМ.Следующий() Тогда
						
						мКоличество = Мин(НадоСписатьКоличество, ВыборкаЗапросаПартииГСМ.Количество);
						мКоличество = ?(мКоличество < 0, 0, мКоличество);
						
						Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
							мСтоимость = Мин(НадоСписатьСумму, ВыборкаЗапросаПартииГСМ.Стоимость);
							мСтоимостьУпр = Мин(НадоСписатьСуммуУпр, ВыборкаЗапросаПартииГСМ.СтоимостьУпр);
						Иначе
							
							Если ВыборкаЗапросаПартииГСМ.Количество = 0 Или ВыборкаЗапросаПартииГСМ.Количество < НадоСписатьКоличество Тогда
								мСтоимость = ВыборкаЗапросаПартииГСМ.Стоимость;
								мСтоимостьУпр = ВыборкаЗапросаПартииГСМ.СтоимостьУпр;
							Иначе	
								мСтоимость = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.Стоимость / ВыборкаЗапросаПартииГСМ.Количество;
								мСтоимостьУпр = НадоСписатьКоличество * ВыборкаЗапросаПартииГСМ.СтоимостьУпр / ВыборкаЗапросаПартииГСМ.Количество;
								//мСтоимостьУпр = мСтоимость;
							КонецЕсли;
							
						КонецЕсли;      
						
						Если мКоличество > 0 Тогда
							НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
							НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
							НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
							НоваяСтрока.Партия = ВыборкаЗапросаПартииГСМ.Партия;
							НоваяСтрока.ГСМ = ВыборкаЗапросаПартииГСМ.ГСМ;
							НоваяСтрока.Количество = мКоличество;
							НоваяСтрока.Стоимость = мСтоимость;	
							НоваяСтрока.СтоимостьУпр = мСтоимостьУпр;
							
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСливГСМ") Тогда
								
								НоваяСтрока.Склад		= ВыборкаЗапросаПоГСМ.Склад;
								НоваяСтрока.Номенклатура= ВыборкаЗапросаПартииГСМ.ГСМ;
								НоваяСтрока.Сумма		= мСтоимость;
								НоваяСтрока.Коэффициент	= ВыборкаЗапросаПоГСМ.Коэффициент;
								
							КонецЕсли;	
							
							мСписаноКоличество 		= мСписаноКоличество + НоваяСтрока.Количество;
							мСписаноСтоимость 		= мСписаноСтоимость + НоваяСтрока.Стоимость;
						КонецЕсли;
						
						НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
						НадоСписатьСумму = НадоСписатьСумму - мСтоимость;
						НадоСписатьСуммуУпр = НадоСписатьСуммуУпр - мСтоимостьУпр;
						
					Иначе
						НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
						НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
						НоваяСтрока.Дата = ВыборкаЗапросаПоГСМ.Дата;
						НоваяСтрока.Партия = Неопределено;
						НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
						НоваяСтрока.Количество = НадоСписатьКоличество;
						НоваяСтрока.Стоимость = НадоСписатьСумму;	
						НоваяСтрока.СтоимостьУпр = НадоСписатьСуммуУпр;
						
						НадоСписатьКоличество = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		вхСредняяЦена = ?(мСписаноКоличество=0, 0,окр(мСписаноСтоимость / мСписаноКоличество,2));
		
	Иначе
		
		//заполняем таблицу по движениям регистра документа. Стоимость ГСМ берем из регистра
		
		РезультатЗапросаПоГСМ 		= Новый Запрос();
		РезультатЗапросаПоГСМ.Текст	=
		"ВЫБРАТЬ
		|	уатОстаткиГСМнаТС.ТС,
		|	уатОстаткиГСМнаТС.ГСМ,
		|	уатОстаткиГСМнаТС.Количество,
		|	уатОстаткиГСМнаТС.Стоимость,
		|	уатОстаткиГСМнаТС.СтоимостьУпр
		|ИЗ
		|	РегистрНакопления.уатОстаткиГСМнаТС КАК уатОстаткиГСМнаТС
		|ГДЕ
		|	уатОстаткиГСМнаТС.Регистратор = &Ссылка";
		РезультатЗапросаПоГСМ.УстановитьПараметр("Ссылка",ДокументОбъект.Ссылка);
		
		ВыборкаЗапросаПоГСМ = РезультатЗапросаПоГСМ.Выполнить().Выбрать();
		
		//Перебираем строки ГСМ, который надо списать
		Пока ВыборкаЗапросаПоГСМ.Следующий() Цикл
			НоваяСтрока = ТаблицаДляСписанияГСМ.Добавить();
			НоваяСтрока.ТС = ВыборкаЗапросаПоГСМ.ТС;
			НоваяСтрока.ГСМ = ВыборкаЗапросаПоГСМ.ГСМ;
			НоваяСтрока.Количество = ВыборкаЗапросаПоГСМ.Количество;
			НоваяСтрока.Стоимость = ВыборкаЗапросаПоГСМ.Стоимость;
			НоваяСтрока.СтоимостьУпр = ВыборкаЗапросаПоГСМ.СтоимостьУпр;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат ВсеОК;
	
КонецФункции // ПодготовитьТаблицуСписанияГСМ()


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПЛАСТИКОВЫМИ КАРТАМИ

//Возвращает пластиковую карту, закрепленную за ТС или водителем
// Возвращаемое значение: Пластиковая карта
Функция уатПластиковаяКартаТСВодителя(ТС, Водитель) ЭКСПОРТ
	
	Запрос = Новый Запрос();
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	уатПластиковыеКарты.Ссылка КАК ПластиковаяКарта,
	|	уатПластиковыеКарты.Основная
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	(уатПластиковыеКарты.КомуВыдана = &ТС
	|			ИЛИ уатПластиковыеКарты.КомуВыдана = &Водитель)
	|	И (НЕ уатПластиковыеКарты.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатПластиковыеКарты.Основная УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТС",ТС);
	Запрос.УстановитьПараметр("Водитель",Водитель);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() Тогда
		
		Результат = РезультатЗапроса[0].ПластиковаяКарта;
		
	Иначе
		
		Результат = Справочники.уатПластиковыеКарты.ПустаяСсылка();
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатПластиковаяКартаТСВодителя

//Возвращает ТС или водителя, за которыми закреплена пластиковая карта
// Возвращаемое значение: ТС или водитель
Функция уатВладелецПластиковойКарты(ПластиковаяКарта) ЭКСПОРТ
	
	Запрос=Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатПластиковыеКарты.КомуВыдана
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	уатПластиковыеКарты.Ссылка = &ПластиковаяКарта";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("ПластиковаяКарта",ПластиковаяКарта);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		
		Результат = ВыборкаЗапроса.КомуВыдана;
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатВладелецПластиковойКарты


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ЗАТРАТАМИ

// Функция находит план затрат
//
// Параметры:
//  Организация - ссылка справочника Организации
//  Подразделение - ссылка справочника ПодразделениеОрганизации
//  ТС     - автомобиль
//  Колонна - ссылка справочника уатКолонна
//
// Возвращаемое значение: - ссылка справочника уатПланыПримененияЗатрат если найден,
//							Неопределено - если не найден.
//
//Алгоритм поиска:
// 1. Ищем записи для указанных Организации и Подразделения. Если найдена - работаем с этой записью. Если нет,
//    то ищем записи для Организации. Если найдена - работаем с этой записью. Если нет,  то ищем записи для 
//    пустой Организации. Если не найдено - возвращаем Неопределено.
// 2. Среди набора записей ищем первую у которой в фильтрах указаны и колонна и ТС. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 3. Среди набора записей ищем первую у которой в фильтрах указано ТС. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 4. Среди набора записей ищем первую у которой в фильтрах указана Колонна. Если найдена, и фильтр
//    удовлетворяет условию то переходим к пункту 6.
// 5. Среди набора записей ищем первую у которой пустой фильтр. Если найдена то переходим к пункту 6.
// 6. Возвращаем ссылку.
//
Функция уатНайтиПланЗатрат(ПланЗатрат, Организация, ТС, Колонна = Неопределено) ЭКСПОРТ
	
	Если Колонна = Неопределено Тогда
		Колонна = уатПрочитатьРеквизитыТС(ТС).Колонна;
	КонецЕсли;	
	
	ЗапросПланЗатрат = Новый Запрос;
	
	Результат = Ложь;
	ПланЗатрат = Справочники.уатПланыПримененияЗатрат.ПустаяСсылка();
	
	ЗапросПланЗатрат.Текст = 
	
	"ВЫБРАТЬ
	|	уатПланыПримененияЗатрат.Ссылка,
	|	уатПланыПримененияЗатрат.Фильтры.(
	|		Ссылка,
	|		НомерСтроки,
	|		Фильтр
	|	)
	|ИЗ
	|	Справочник.уатПланыПримененияЗатрат КАК уатПланыПримененияЗатрат
	|ГДЕ
	|	уатПланыПримененияЗатрат.Организация = &Организация";
	
	ЗапросПланЗатрат.УстановитьПараметр("Организация", Организация);
	мРезультатЗапроса = ЗапросПланЗатрат.Выполнить();
	
	Если мРезультатЗапроса.Пустой() Тогда
		
		ЗапросПланЗатрат.Текст = 
		
		"ВЫБРАТЬ
		|	уатПланыПримененияЗатрат.Ссылка,
		|	уатПланыПримененияЗатрат.Фильтры.(
		|		Ссылка,
		|		НомерСтроки,
		|		Фильтр
		|	)
		|ИЗ
		|	Справочник.уатПланыПримененияЗатрат КАК уатПланыПримененияЗатрат
		|ГДЕ
		|	уатПланыПримененияЗатрат.Организация = &Организация";
		
		ЗапросПланЗатрат.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
		мРезультатЗапроса = ЗапросПланЗатрат.Выполнить();
		
		Если мРезультатЗапроса.Пустой() Тогда
			
			Возврат Результат;
			
		КонецЕсли;
	КонецЕсли;
	
	РезультатФильтр 		= Ложь;
	РезультатФильтрТС 		= Ложь;
	РезультатФильтрКолонна 	= Ложь;
	
	мВыборкаЗапроса = мРезультатЗапроса.Выбрать();
	
	//первый проход, ищем фильтр по ТС и по Колонне
	Пока мВыборкаЗапроса.Следующий() Цикл
		
		мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
		Пока мВыборкаЗапросаФильтры.Следующий() Цикл
			
			Если мВыборкаЗапросаФильтры.Фильтр = Колонна Тогда
				РезультатФильтрКолонна = Истина;
			ИначеЕсли мВыборкаЗапросаФильтры.Фильтр = ТС Тогда
				РезультатФильтрТС = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если РезультатФильтрКолонна и РезультатФильтрТС Тогда
			
			Результат	= Истина;
			ПланЗатрат = мВыборкаЗапроса.Ссылка;
			Возврат Результат;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Не (РезультатФильтрТС и РезультатФильтрКолонна) Тогда
		//второй проход, ищем фильтр по ТС
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			Пока мВыборкаЗапросаФильтры.Следующий() Цикл
				Если мВыборкаЗапросаФильтры.Фильтр = ТС Тогда
					
					Результат	= Истина;
					ПланЗатрат = мВыборкаЗапроса.Ссылка;
					Возврат Результат;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		//третий проход, ищем фильтр по Колонне
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			Пока мВыборкаЗапросаФильтры.Следующий() Цикл
				Если мВыборкаЗапросаФильтры.Фильтр = Колонна Тогда
					
					Результат	= Истина;
					ПланЗатрат = мВыборкаЗапроса.Ссылка;
					Возврат Результат;
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
		//четвертый проход, ищем записи с пустым фильтром
		мВыборкаЗапроса.Сбросить();
		Пока мВыборкаЗапроса.Следующий() Цикл
			
			мВыборкаЗапросаФильтры	= мВыборкаЗапроса.Фильтры.Выбрать();
			// нет никаких фильтров
			Если мВыборкаЗапросаФильтры.Количество() = 0 Тогда
				
				Результат	= Истина;
				ПланЗатрат = мВыборкаЗапроса.Ссылка;
				Возврат Результат;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатНайтиПланЗатрат       

// Функция находит цену
//
// Параметры:
//
Функция уатНайтиЦенуНоменклатуры(Дата, Номенклатура, Контрагент = Неопределено, флСообщатьОшибки = Истина) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Период,
	|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Контрагент,
	|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
	|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.уатЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|		&Дата,
	|		Номенклатура = &Номенклатура
	|			И Контрагент = &Контрагент) КАК уатЦеныНоменклатурыКонтрагентовСрезПоследних";
		
	Запрос.УстановитьПараметр("Дата", Дата);		
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);		
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Результат = Новый Структура("Цена, Валюта", ВыборкаРезультатаЗапроса.Цена, ВыборкаРезультатаЗапроса.Валюта);
	Иначе
		Если флСообщатьОшибки = Истина Тогда
			Сообщить("Не указана цена номенклатуры """ + Номенклатура + """, контрагента/АЗС """ + Контрагент + """, на дату " + Дата, СтатусСообщения.Внимание);
		КонецЕсли;
		Результат = Новый Структура("Цена, Валюта", 0, Неопределено);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // уатНайтиЦенуНоменклатуры       

//Возвращает значение реквизитов Груза из регистра сведений
// Параметры:
//	Груз - СправочникСсылка.Номенклатура - ссылка на элемент номенклатуры
//	Груз - СправочникСсылка.ЕдиницыИзмерения - ссылка на элемент единиц измерения
//	ИмяРеквизита - строка
//					ГаражныйНомер
//					ГосударственныйНомер
//					Модель
//					VIN
//					МодельДвигателя
//					МощностьДвигателяЛС
//					МощностьДвигателяКВт
//					НомерДвигателя
//					НомерКузова
//					НомерШасси
//					ЦветКузова
//					СобственныйВес
//					ОсновноеУсловиеРаботы
//					ОсновнойРежимРаботы
//					ГабаритныйРазмерДлина
//					ГабаритныйРазмерВысота
//					ГабаритныйРазмерШирина
//					Класс
// Возвращаемое значение: ЗначениеРеквизита
Функция уатПрочитатьРеквизитыГруза(Груз, ЕдиницаИзмерения, ИмяРеквизита="") ЭКСПОРТ
	Перем ЗначениеРеквизита;
	
	ВыборкаЗаписей = РегистрыСведений.уатНоменклатураГрузов.Получить(Новый Структура("Номенклатура, ЕдиницаИзмерения", Груз, ЕдиницаИзмерения));
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат ВыборкаЗаписей;
	Иначе	
		ВыборкаЗаписей.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Возврат ЗначениеРеквизита;
	КонецЕсли;	
КонецФункции // уатПрочитатьРеквизитГруза()


/////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

#Если Клиент Тогда
	
	// Обработчик события ПередУстановкойПометкиУдаления элемента формы
	//
	Процедура уатСписокПередУстановкойПометкиУдаления(ЭтаФорма, Элемент, Отказ) Экспорт
		
		Перем мТиповойДокумент;
		
		Если ТипЗнч(Элемент)=Тип("ТабличноеПоле") Тогда
			Ссылка=Элемент.ТекущаяСтрока;
			Если (Не ЗначениеЗаполнено(Ссылка)) ИЛИ Ссылка.ПометкаУдаления Тогда
				// не должно такой ситуации возникнуть когда неопределенная или, но на всякий случай...
				// зато если уже помечен на удаление то отмечать его обратно можно без проверок-вопросов
			Иначе
				
				// проверяем только есть ли документы типовой конфигурации
				Если уатНайтиТиповойДокументДляДокументаУАТ(Ссылка, мТиповойДокумент) Тогда
					
					Предупреждение("Для данного документа сформирован документ типовой конфигурации " + Символы.ПС + 
					мТиповойДокумент.Метаданные().Представление() + " № " + мТиповойДокумент.Номер + " от " + Формат(мТиповойДокумент.Дата, "ДЛФ=Д") + "." + Символы.ПС + 
					"Пометка на удаление запрещена!", 10);
					
					Отказ = Истина;
					
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецПроцедуры
	
	// Обработчик события НачалоВыбора элементов формы связанных с пунктами назначения
	//
	Процедура уатПунктНачалоВыбора(Элемент,СтандартнаяОбработка) Экспорт
		СтандартнаяОбработка = Ложь;
		ФормаСправочника = Справочники.уатПунктыНазначения.ПолучитьФормуВыбора(,Элемент);
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ФормаСправочника.НачальноеЗначениеВыбора = Элемент.Значение;
		КонецЕсли; 	
		ФормаСправочника.Открыть();
	КонецПроцедуры
	
	// Обработчик события Очистка элементов формы связанных с пунктами назначения
	//
	Процедура уатПунктОчистка(Элемент, СтандартнаяОбработка)Экспорт
		Элемент.Значение = "";
		СтандартнаяОбработка = Ложь;
	КонецПроцедуры 
	
	// Обработчик события ОбработкаВыбора элементов формы связанных с пунктами назначения
	//
	Процедура уатПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)Экспорт
		СтандартнаяОбработка = Ложь;
		Если уатЗначениеНеЗаполнено(ВыбранноеЗначение) тогда
			Возврат;
		КонецЕсли;
		Элемент.Значение = ВыбранноеЗначение;
	КонецПроцедуры
	
	// Обработчик события ОкончаниеВводаТекста элементов формы связанных с пунктами назначения
	//
	Процедура уатПунктОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)Экспорт
		СтандартнаяОбработка = Ложь;
		НайденноеЗначение = Неопределено;
		Если ЗначениеЗаполнено(Текст) тогда
			НайденноеЗначение = Справочники.уатПунктыНазначения.НайтиПоНаименованию(Текст);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НайденноеЗначение) тогда
			НайденноеЗначение = Текст;
		КонецЕсли;
		Значение = НайденноеЗначение;
	КонецПроцедуры
	
#КонецЕсли

// Процедура выполняет проверку переданного значения на заполненность
//
// Параметры:
//  Значение     - проверяемое значение
//
// Возвращаемое значение:
//  Результат проверки
Функция уатЗначениеНеЗаполнено(Значение) Экспорт
	Попытка
		Возврат НЕ ЗначениеЗаполнено(Значение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Процедура выполняет открытие формы выбора контрагента в зависимости от 
// используемого решения.
// 
// Параметры:
//  Элемент      - элемент, из которого происходит вызов списка контрагентов
//  Контрагент   - текущее значение
//  ВладелецФормы- элемент владелец открываемой формы
//  ФильтрОтбора - фильтр отбора 
//
Процедура уатОткрытьДиалогКонтрагента(Элемент, Контрагент, ВладелецФормы = Неопределено, ФильтрОтбора = Неопределено) ЭКСПОРТ
	Форма = Обработки.уатКонтрагенты.ПолучитьФорму("ФормаСписка", ВладелецФормы, Элемент);
	Форма.ЗакрыватьПриЗакрытииВладельца = Истина;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Форма.НачальноеЗначениеВыбора = Контрагент;
	КонецЕсли;
	Если НЕ ФильтрОтбора = Неопределено Тогда
		Для Каждого СтрокаФильтр Из ФильтрОтбора Цикл
			ЭлементОтбора =  Форма.СправочникСписок.Отбор.Найти(СтрокаФильтр.Ключ);
			
			Если НЕ ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.Значение = СтрокаФильтр.Значение;
				Форма.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();                
КонецПроцедуры

// Функция возвращает форму выбора груза
//
// Параметры:
//  ВладелецФормы- элемент владелец открываемой формы
//  ТекНоменклатура - текущее значение номенклатуры. на этом значении будет 
//                 спозиционирован список после открытия.
Функция уатПолучитьФормуВыбораГруза(ВладелецФормы,ТекНоменклатура = неопределено) Экспорт
	Форма = РегистрыСведений.уатНоменклатураГрузов.ПолучитьФорму("ФормаВыбора",ВладелецФормы);
	Если НЕ ТекНоменклатура = Неопределено  тогда
		Форма.Номенклатура = ТекНоменклатура;
	КонецЕсли;
	Форма.ЗакрыватьПриВыборе = Истина;
	Возврат Форма;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПРАВАМИ

// Процедура выполняет проверку прав пользователя перед записью элемента 
// справочника
//
// Параметры:
//  Объект       - записываемый объект
//  Отказ        - признак отказа записи объекта
//  ЭтаФорма     - 
//  ЗначениеПрав - КЭШ содержащий права текущего пользователя
Процедура уатПроверкаПравПередЗаписьюВСправочниках(Объект, Отказ, ЭтаФорма = Неопределено, ЗначенияПрав = Неопределено) Экспорт
	#Если Клиент Тогда	
		// Проверка доступа документа по текущему пользователю
		
		Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам", ЗначенияПрав) Тогда	
			уатПраваИНастройки.уатПроверкаПраваДоступаКСправочникам(Объект, Отказ, , ЗначенияПрав);
		КонецЕсли;		
		
		Если НЕ (Объект.ПометкаУдаления = Объект.Ссылка.ПометкаУдаления) Тогда
			Если НЕ уатПраваИНастройки.уатПраво("УдалениеЧерезПометку", ЗначенияПрав) Тогда
				Сообщить("У Вас нет прав на изменение пометки удаления!", СтатусСообщения.Важное); 
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры

// Процедура выполняет проверку прав пользователя перед записью документа 
// справочника
//
// Параметры:
//  Объект       - записываемый объект
//  Отказ        - признак отказа записи объекта
//  ЭтаФорма     - 
//  ЗначениеПрав - КЭШ содержащий права текущего пользователя
Процедура уатПроверкаПравПередЗаписьюВДокументах(Объект, Отказ, ЭтаФорма = Неопределено, ЗначенияПрав = Неопределено) Экспорт
	#Если Клиент Тогда	
		
		// Проверка доступа документа по текущему пользователю
		Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам", ЗначенияПрав) Тогда	
			уатПраваИНастройки.уатПроверкаПраваДоступаКДокументам(Объект, Отказ, , ЗначенияПрав);
		КонецЕсли;		
		
		Если НЕ (Объект.ПометкаУдаления = Объект.Ссылка.ПометкаУдаления) Тогда
			Если НЕ уатПраваИНастройки.уатПраво("УдалениеЧерезПометку", ЗначенияПрав) Тогда
				Сообщить("У Вас нет прав на изменение пометки удаления!", СтатусСообщения.Важное); 
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли; 
	#КонецЕсли	
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
//РАБОТА С ОТЧЕТАМИ

// Функция сохраняет реквизиты отчета в структуре. Данные можно восстановить процедурой ВосстановитьРеквизитыОтчета().
// Используется для передачи реквизитов отчета при расшифровке.
// По умолчанию сохраняются все реквизиты отчета, кроме реквизитов имеющих тип Строка, Отчет или Обработка.
// Табличные части также сохраняются.
// Если список реквизитов для сохранения задан явно, список исключений игнорируется.
// Данные передаются в структуре с ключом "_РеквизитыОтчета", значением является структура с сохраненными значениями,
// ключ - имя реквизита отчета.
// Если передан параметр СтруктНастройка, то данные сохраняются в переданной структуре (под указанным ключом),
// иначе в новой.
//
Функция уатСохранитьРеквизитыОтчета(ОтчетОбъект, СтруктНастройка = Неопределено, Знач СтрСохранять = "", Знач СтрНеСохранять = "") Экспорт
	
	СтруктПараметры = ?(СтруктНастройка = Неопределено, Новый Структура, СтруктНастройка);
	
	МетаОтчет = ОтчетОбъект.Метаданные();
	Если ПустаяСтрока(СтрСохранять) Тогда
		
		СтруктДанные = Новый Структура;
		СтруктИсключений = ?(ПустаяСтрока(СтрНеСохранять), Новый Структура, Новый Структура(СтрНеСохранять));
		
		МетаОтчеты    = Метаданные.Отчеты;
		МетаОбработки = Метаданные.Обработки;
		Для Каждого МетаРекв Из МетаОтчет.Реквизиты Цикл
			
			Если СтруктИсключений.Свойство(МетаРекв.Имя) Тогда
				Продолжить; // Реквизит содержится в списке исключений
			КонецЕсли;
			
			ТипыРекв = ОтчетОбъект.Метаданные().Реквизиты[МетаРекв.Имя].Тип.Типы();
			Если ТипыРекв.Количество() = 1 Тогда
				
				// Исключим реквизиты типа Отчет и Обработка (например Универсальный отчет)
				МетаНайтиПоТипу = Метаданные.НайтиПоТипу(ТипыРекв[0]);
				Если НЕ МетаНайтиПоТипу = Неопределено  // Реквизит простого типа (число, булево)
					И (МетаОтчеты.Содержит(МетаНайтиПоТипу) ИЛИ МетаОбработки.Содержит(МетаНайтиПоТипу)) Тогда
					Продолжить; // Отчеты и обработки пропускаем
				КонецЕсли;
				
				// Добавим реквизит в структуру
				СтруктДанные.Вставить(МетаРекв.Имя, ОтчетОбъект[МетаРекв.Имя]);
				
			Иначе // составной тип. считаем что это реквизит, который надо сохранять.
				
				СтруктДанные.Вставить(МетаРекв.Имя, ОтчетОбъект[МетаРекв.Имя]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сохраним табличные части
		Для Каждого МетаРекв Из МетаОтчет.ТабличныеЧасти Цикл
			
			Если СтруктИсключений.Свойство(МетаРекв.Имя) Тогда
				Продолжить; // Реквизит содержится в списке исключений
			КонецЕсли;
			
			СтруктДанные.Вставить(МетаРекв.Имя, ОтчетОбъект[МетаРекв.Имя].Выгрузить());
			
		КонецЦикла;
		
	Иначе // Список реквизитов задан явно. Их и сохраняем
		
		СтруктДанные = Новый Структура(СтрСохранять);
		Для Каждого ТекРекв Из СтруктДанные Цикл
			
			Если МетаОтчет.Реквизиты.Найти(ТекРекв.Ключ) <> Неопределено Тогда
				СтруктДанные.Вставить(ТекРекв.Ключ, ОтчетОбъект[ТекРекв.Ключ]);
			ИначеЕсли МетаОтчет.ТабличныеЧасти.Найти(ТекРекв.Ключ) <> Неопределено Тогда
				СтруктДанные.Вставить(ТекРекв.Ключ, ОтчетОбъект[ТекРекв.Ключ].Выгрузить());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктПараметры.Вставить("_РеквизитыОтчета", СтруктДанные);
	
	Возврат СтруктПараметры;
	
КонецФункции // СохранитьРеквизитыОтчета()

// Функция восстанавливает значения реквизитов отчета, сохраненные в структуре функцией СохранитьРеквизитыОтчета()
//
Процедура уатВосстановитьРеквизитыОтчета(ОтчетОбъект, СтруктНастройка) Экспорт
	
	Если ТипЗнч(СтруктНастройка) <> Тип("Структура")
		ИЛИ НЕ СтруктНастройка.Свойство("_РеквизитыОтчета") Тогда
		Возврат;
	КонецЕсли;
	
	МетаОтчет = ОтчетОбъект.Метаданные();
	Для Каждого СохрРекв Из СтруктНастройка["_РеквизитыОтчета"] Цикл
		Если МетаОтчет.Реквизиты.Найти(СохрРекв.Ключ) <> Неопределено Тогда
			ОтчетОбъект[СохрРекв.Ключ] = СохрРекв.Значение;
		ИначеЕсли МетаОтчет.ТабличныеЧасти.Найти(СохрРекв.Ключ) <> Неопределено Тогда
			ОтчетОбъект[СохрРекв.Ключ].Загрузить(СохрРекв.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьРеквизитыОтчета()

// Обработчик изменения организации в формах отчетов УАТ (относится к отчетам с реквизитом ПостроительОтчета,
//не строящихся на базе универсальных)
Процедура уатОтчетыПриИзмененииОрганизации(ОтчетОбъект) Экспорт
	ДоступноеПолеОрганизация = ОтчетОбъект.ПостроительОтчета.ДоступныеПоля.Найти("Организация");
	Если ДоступноеПолеОрганизация = Неопределено Тогда
		Возврат;
	КонецЕсли;
		 
	мОтборОрганизация = ОтчетОбъект.ПостроительОтчета.Отбор.Найти("Организация");
	Если мОтборОрганизация = Неопределено Тогда
		мОтборОрганизация = ОтчетОбъект.ПостроительОтчета.Отбор.Добавить("Организация");
	КонецЕсли;
	мОтборОрганизация.ВидСравнения = ВидСравнения.Равно;
	мОтборОрганизация.Значение = ОтчетОбъект.Организация;
	мОтборОрганизация.Использование = Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОтчетОбъект.Организация);
КонецПроцедуры

#Если Клиент Тогда
	
// Обработчик стандартного события ПриОткрытии главной формы отчетов
Процедура уатОтчетыФормаПриОткрытии(ЭтаФорма) Экспорт
	Если НЕ ЭтаФорма.НеЗаполнятьНастройкиПриОткрытии Тогда
		ЭтаФорма.ВыводЗаголовка();
		ЭтаФорма.СформироватьЗаголовокФормы();
	КонецЕсли;
	
	ЭтаФорма.НеЗаполнятьНастройкиПриОткрытии=Ложь;
	
	ЭтаФорма.УправлениеПометкамиКнопокКоманднойПанели();
	
	// Проверка ведения однофирменности
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ЭтаФорма.Организация) Тогда 
		ЭтаФорма.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	уатОбщегоНазначения.уатОтчетыПриИзмененииОрганизации(ЭтаФорма);
КонецПроцедуры

// Обработчик стандартного события ПередОткрытием главной формы отчетов
Процедура уатОтчетыФормаПередОткрытием(ЭтаФорма, Отказ, СтандартнаяОбработка, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.НеЗаполнятьНастройкиПриОткрытии Тогда
		
		ЭтаФорма.ПоказыватьЗаголовок = Истина;
		
		СтруктураОбщихПараметров = ВосстановитьЗначение("ОбщиеПараметры" + ЭтаФорма.Метаданные().Имя);
		Если ТипЗнч(СтруктураОбщихПараметров) = Тип("Структура") Тогда
			Если СтруктураОбщихПараметров.Свойство("Организация") Тогда
				ЭтаФорма.Организация = СтруктураОбщихПараметров.Организация;
			КонецЕсли;
			Если СтруктураОбщихПараметров.Свойство("ПоказыватьЗаголовок") Тогда
				ЭтаФорма.ПоказыватьЗаголовок = СтруктураОбщихПараметров.ПоказыватьЗаголовок;
			КонецЕсли;
			Если СтруктураОбщихПараметров.Свойство("ДатаНач") Тогда
				ЭтаФорма.ДатаНач = СтруктураОбщихПараметров.ДатаНач;
			КонецЕсли;
			Если СтруктураОбщихПараметров.Свойство("ДатаКон") Тогда
				ЭтаФорма.ДатаКон = СтруктураОбщихПараметров.ДатаКон;
			КонецЕсли;
			Если ДопПараметры.Свойство("ОбщиеПараметры") Тогда
				Для Каждого ТекДопПараметр Из ДопПараметры.ОбщиеПараметры Цикл
					Если СтруктураОбщихПараметров.Свойство(ТекДопПараметр) Тогда
						ЭтаФорма[ТекДопПараметр] = СтруктураОбщихПараметров[ТекДопПараметр];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ЭтаФорма.ВысотаЗаголовка = 0;
		
	КонецЕсли;
	
	ЭтаФорма.ЗаполнитьНачальныеНастройки();
	
	Попытка //отчет может быть как с настройкой периода, так и без нее
		ЭтаФорма.НП.УстановитьПериод(НачалоДня(ЭтаФорма.ДатаНач), ?(ЭтаФорма.ДатаКон = '00010101', ЭтаФорма.ДатаКон, КонецДня(ЭтаФорма.ДатаКон)));
	Исключение
	КонецПопытки;
КонецПроцедуры

// Обработчик стандартного события ПередОткрытием главной формы отчетов
Процедура уатОтчетыФормаПередЗакрытием(ЭтаФорма, Отказ, СтандартнаяОбработка, ДопПараметры = Неопределено) Экспорт
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	СтруктураОбщихПараметров = Новый Структура;
	Попытка
		СтруктураОбщихПараметров.Вставить("ПоказыватьЗаголовок", ЭтаФорма.ПоказыватьЗаголовок);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбщихПараметров.Вставить("Организация", ЭтаФорма.Организация);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбщихПараметров.Вставить("ДатаНач", ЭтаФорма.ДатаНач);
	Исключение
	КонецПопытки;
	Попытка
		СтруктураОбщихПараметров.Вставить("ДатаКон", ЭтаФорма.ДатаКон);
	Исключение
	КонецПопытки;
	Если ДопПараметры.Свойство("ОбщиеПараметры") Тогда
		Для Каждого ТекДопПараметр Из ДопПараметры.ОбщиеПараметры Цикл
			СтруктураОбщихПараметров.Вставить(ТекДопПараметр, ЭтаФорма[ТекДопПараметр]);
		КонецЦикла;
	КонецЕсли;
	СохранитьЗначение("ОбщиеПараметры" + ЭтаФорма.Метаданные().Имя, СтруктураОбщихПараметров);
КонецПроцедуры

// Обработчик стандартного события ПередСохранениемЗначений главной формы отчетов
Процедура уатОтчетыФормаПередСохранениемЗначений(ЭтаФорма) Экспорт
	ЭтаФорма.СохраненныеНастройки = Новый Структура("НастройкиПостроителяОтчета", ЭтаФорма.ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Истина, Истина));
КонецПроцедуры

// Обработчик стандартного события ПослеВосстановленияЗначений главной формы отчетов
Процедура уатОтчетыФормаПослеВосстановленияЗначений(ЭтаФорма) Экспорт
	// Если настройка восстанавливается, когда открывается форма сформированного отчета, игнорируем
	Если ЭтаФорма.НеЗаполнятьНастройкиПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	// Тип восстановленного значения должен быть Структура
	Если ТипЗнч(ЭтаФорма.СохраненныеНастройки) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	// После установки счета и флагов можно заполнять текст построителя
	ЭтаФорма.ЗаполнитьНачальныеНастройки();
	
	НастройкиПостроителяОтчета = Неопределено;
	ЭтаФорма.СохраненныеНастройки.Свойство("НастройкиПостроителяОтчета", НастройкиПостроителяОтчета);
	Если НастройкиПостроителяОтчета <> Неопределено Тогда
		ЭтаФорма.ПостроительОтчета.УстановитьНастройки(НастройкиПостроителяОтчета, Истина, Истина, Истина, Истина);
	КонецЕсли;
	
	уатОтчетыПриИзмененииОрганизации(ЭтаФорма);
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - ОБРАБОТЧИКИ СОБЫТИЙ ОСНОВНЫХ ФОРМ ОБЪЕКТОВ

// Обработчик открытия форм справочников/ПВХ
Процедура уатСправочникиФормаПриОткрытии(ЭтаФорма) Экспорт
	ДействияФормы = ЭтаФорма.ЭлементыФормы.Найти("ДействияФормы");
	
	ПодменюДействия = Неопределено;
	Если ДействияФормы <> Неопределено Тогда
		Для НомерКнопки = 1 По ДействияФормы.Кнопки.Количество() Цикл
			ТекПодменю = ДействияФормы.Кнопки.Получить(НомерКнопки-1);
			Если (ТекПодменю.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю) И (ТекПодменю.Текст = "Действия") Тогда
				ПодменюДействия = ТекПодменю;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//установка кнопки редактирования кода
	Попытка
		ПолеВводаКод = ЭтаФорма.ЭлементыФормы.Код;
	Исключение
		ПолеВводаКод = Неопределено;
	КонецПопытки;
	Если ПодменюДействия <> Неопределено И ПолеВводаКод <> Неопределено Тогда
		уатОбщегоНазначенияТиповые.уатДобавитьВМенюДействияКнопкуРедактированияКода(ПодменюДействия);
		уатОбщегоНазначенияТиповые.уатУстановитьДоступностьПоляВводаНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ПодменюДействия, ПолеВводаКод);
	КонецЕсли;
	
	//дополнительные действия формы
	уатЗаполнитьПодменюДопДействияФормы(ПодменюДействия);
КонецПроцедуры

// Обработчик открытия форм документов
Процедура уатДокументыФормаПриОткрытии(ЭтаФорма) Экспорт
	ДействияФормы = ЭтаФорма.ЭлементыФормы.Найти("ДействияФормы");
	
	ПодменюДействия = Неопределено;
	Если ДействияФормы <> Неопределено Тогда
		Для НомерКнопки = 1 По ДействияФормы.Кнопки.Количество() Цикл
			ТекПодменю = ДействияФормы.Кнопки.Получить(НомерКнопки-1);
			Если (ТекПодменю.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю) И (ТекПодменю.Текст = "Действия") Тогда
				ПодменюДействия = ТекПодменю;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//установка кнопки редактирования кода
	Попытка
		ПолеВводаНомер = ЭтаФорма.ЭлементыФормы.Номер;
	Исключение
		ПолеВводаНомер = Неопределено;
	КонецПопытки;
	Если ПодменюДействия <> Неопределено И ПолеВводаНомер <> Неопределено Тогда
		уатОбщегоНазначенияТиповые.уатДобавитьВМенюДействияКнопкуРедактированияНомера(ПодменюДействия);
		уатОбщегоНазначенияТиповые.уатУстановитьДоступностьПоляВводаНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ПодменюДействия, ПолеВводаНомер);
	КонецЕсли;
	
	//дополнительные действия формы
	уатЗаполнитьПодменюДопДействияФормы(ПодменюДействия);
КонецПроцедуры

// Обработчик открытия форм списка справочников/ПВХ
Процедура уатСправочникиФормаСпискаПриОткрытии(ЭтаФорма, ЭлементФормыСправочникСписок, МетаданныеОбъекта) Экспорт
	ДействияФормы = ЭтаФорма.ЭлементыФормы.Найти("ДействияФормы");
	
	ПодменюДействия = Неопределено;
	Если ДействияФормы <> Неопределено Тогда
		Для НомерКнопки = 1 По ДействияФормы.Кнопки.Количество() Цикл
			ТекПодменю = ДействияФормы.Кнопки.Получить(НомерКнопки-1);
			Если (ТекПодменю.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю) И (ТекПодменю.Текст = "Действия") Тогда
				ПодменюДействия = ТекПодменю;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//установка кнопки редактирования кода
	Попытка
		КолонкаКод = ЭлементФормыСправочникСписок.Колонки.Найти("Код");
	Исключение
		КолонкаКод = Неопределено;
	КонецПопытки;
	Если ПодменюДействия <> Неопределено И КолонкаКод <> Неопределено
	   И КолонкаКод.ТолькоПросмотр = Истина
	   И МетаданныеОбъекта.СпособРедактирования = Метаданные.СвойстваОбъектов.СпособРедактирования.ВСписке Тогда
		
		уатОбщегоНазначенияТиповые.уатДобавитьВМенюДействияКнопкуРедактированияКода(ПодменюДействия);
		уатОбщегоНазначенияТиповые.уатУстановитьДоступностьКолонкиКодаВСписке(МетаданныеОбъекта, ЭтаФорма, ПодменюДействия, КолонкаКод, ЭлементФормыСправочникСписок);
		
	КонецЕсли;
	
	//дополнительные действия формы
	уатЗаполнитьПодменюДопДействияФормы(ПодменюДействия);
КонецПроцедуры

// Обработчик открытия форм обработок
Процедура уатОбработкиФормаПриОткрытии(ЭтаФорма) Экспорт
	ДействияФормы = ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки;
	
	ПодменюДействия = Неопределено;
	Для НомерКнопки = 1 По ДействияФормы.Количество() Цикл
		ТекПодменю = ДействияФормы.Получить(НомерКнопки-1);
		Если (ТекПодменю.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю) И (ТекПодменю.Текст = "Действия") Тогда
			ПодменюДействия = ТекПодменю;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	уатЗаполнитьПодменюДопДействияФормы(ПодменюДействия);
КонецПроцедуры

// Процедура заполняет доп. действия форм объектов
Процедура уатЗаполнитьПодменюДопДействияФормы(ПодменюДействия) Экспорт
	Если ПодменюДействия <> Неопределено Тогда
		Попытка // Может возникнуть ситуация что форма программно открывается повторно, в этом случае все кнопки уже созданы!
			КнопкиПодменюДействия = ПодменюДействия.Кнопки;
			
			КнопкиПодменюДействия.Вставить(0, "ДопВозможностиРазделитель", ТипКнопкиКоманднойПанели.Разделитель);
			
			Кнопка = КнопкиПодменюДействия.Найти("ДобавитьВИзбранное");
			Если Кнопка = Неопределено Тогда
				// добавляем кнопки для вызова дополнительных действий
				
				Кнопка = КнопкиПодменюДействия.Вставить(0, "ДобавитьВИзбранное", ТипКнопкиКоманднойПанели.Действие, "Добавить в избранное", Новый Действие("ДополнительныеДействияФормы"));
				Кнопка.Картинка    = БиблиотекаКартинок.уатИзбранное;
				Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				Кнопка.Подсказка   = "Добавить в избранное";
			КонецЕсли;
		Исключение
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры

// Процедура обработчик доп. действий формы
Процедура уатДополнительныеДействияФормы(ЭтаФорма, Элемент, ДопПараметры = Неопределено) Экспорт
	Попытка
		ЭтоСсылка = (НЕ ЭтаФорма.Ссылка.Пустая());
	Исключение
		ЭтоСсылка = Ложь;
	КонецПопытки;
	
	Если Элемент.Имя = "ДобавитьВИзбранное" Тогда
		уатИзбранное = Обработки.уатИзбранное.Создать();
		Если ЭтоСсылка Тогда
			уатИзбранное.ДобавитьВИзбранное(ЭтаФорма.Ссылка);
			
		Иначе
			Если ДопПараметры <> Неопределено И ТипЗнч(ДопПараметры) = Тип("Структура")
				И ДопПараметры.Свойство("МетаданныеСтрока") И ДопПараметры.Свойство("ИмяФормы") Тогда
				
				Менеджер = ДопПараметры.МетаданныеСтрока;
				ИмяФормы = ДопПараметры.ИмяФормы;
				
				уатИзбранное.ДобавитьВИзбранное(ЭтаФорма.Заголовок, Менеджер, ИмяФормы); 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ВЕРСИЕЙ КОНФИГУРАЦИИ

// Возвращает номер редакции текущей конфигурации.
//  Номер редакции выделяется из полного номера версии конфигурации 
// и представляет собой все символы до второй точки.
//
Функция уатРедакцияКонфигурации() Экспорт
	
	Перем Версия;
	Перем ПерваяТочка;
	
	Версия = уатНомерВерсииКонфигурации();
	ПерваяТочка = Найти(Версия, ".");
	
	Возврат СокрЛП(Лев(Версия, Найти(Сред(Версия, ПерваяТочка + 1), ".") + ПерваяТочка - 1));
	
КонецФункции // уатРедакцияКонфигурации()

// Возвращает номер версии конфигурации согласно константе
Функция уатНомерВерсииКонфигурации() Экспорт
	ВерсияМетаданных = Обработки.уатСтартСистемы.Создать().НомерВерсииКонфигурации;
	Возврат ВерсияМетаданных;
КонецФункции

// Сравнивает строки версий конфигураций и возвращает вид сравнения: больше, меньше или равны
Функция уатСравнитьВерсииКонфигурации(Версия1, Версия2) Экспорт
	ВидСравненияВерсий = ВидСравнения.Равно;
	
	ВерсияВрем1 = Версия1;
	ВерсияВрем2 = Версия2;
	
	Пока ИСТИНА Цикл
		НомерПозицииТочки1 = Найти(ВерсияВрем1, ".");
		НомерПозицииТочки2 = Найти(ВерсияВрем2, ".");
		
		Если НомерПозицииТочки1 = 0 Тогда
			Число1 = Число(ВерсияВрем1);
		Иначе
			Число1 = Число(Лев(ВерсияВрем1, НомерПозицииТочки1-1));
		КонецЕсли;
		
		Если НомерПозицииТочки2 = 0 Тогда
			Число2 = Число(ВерсияВрем2);
		Иначе
			Число2 = Число(Лев(ВерсияВрем2, НомерПозицииТочки1-1));
		КонецЕсли;
		
		Если Число1 > Число2 Тогда
			ВидСравненияВерсий = ВидСравнения.Больше;
			Прервать;
		ИначеЕсли Число1 < Число2 Тогда
			ВидСравненияВерсий = ВидСравнения.Меньше;
			Прервать;
		КонецЕсли;
		
		Если НомерПозицииТочки1 = 0 ИЛИ НомерПозицииТочки2 = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ВерсияВрем1	= Сред(ВерсияВрем1, НомерПозицииТочки1+1);
		ВерсияВрем2	= Сред(ВерсияВрем2, НомерПозицииТочки2+1);
	КонецЦикла;
	
	Возврат ВидСравненияВерсий;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С НОМЕНКЛАТУРОЙ

// Процедура заполняет цену и стоимость в переданной таблице.
//Данные берутся из регистра накопления ПартииТоваровНаСкладах.
//
//
Процедура уатЗаполнитьЦеныНоменклатурыУПП(ТаблицаНоменклатуры, Дата, Склад)
	
	Запрос = Новый Запрос;
	
	Если Метаданные.Константы.Найти("ВестиПартионныйУчетПоСкладам") <> Неопределено Тогда
		флВестиПартионныйУчетПоСкладам = Константы.ВестиПартионныйУчетПоСкладам.Получить();
	Иначе
		СрезПолитика = РегистрыСведений.УчетнаяПолитика.СрезПоследних(Дата);
		Если СрезПолитика.Количество() = 0 Тогда
			флВестиПартионныйУчетПоСкладам = Ложь;
		Иначе
			флВестиПартионныйУчетПоСкладам = СрезПолитика[0].ВестиПартионныйУчетПоСкладам;
		КонецЕсли;
	КонецЕсли;
	
	Если флВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток)                         КАК Количество,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                                           КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&МоментДокумента, 
		|	                Номенклатура в (&СписокНоменклатуры)
		|	              И Склад = &Склад)
		|КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                Номенклатура в (&СписокНоменклатуры)
		|	              И Склад = &ПартионныйСклад) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ЦенаВРознице,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                                           КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&МоментДокумента,
		|	                Номенклатура в (&СписокНоменклатуры)
		|	              И Склад = &Склад) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                Номенклатура в (&СписокНоменклатуры)
		|	              И Склад = &ПартионныйСклад) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ЦенаВРознице";
		
	КонецЕсли;
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("СписокНоменклатуры",  СписокНоменклатуры);
	Запрос.УстановитьПараметр("МоментДокумента", Дата);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	флЕстьЕИ = (ТаблицаНоменклатуры.Колонки.Найти("ЕдиницаИзмерения") <> Неопределено);
	
	Для каждого СтрокаТабличнойЧасти ИЗ ТаблицаНоменклатуры Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0 Тогда
			мКоличествоОстаток = МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения / ?(флЕстьЕИ, СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент, 1);
			мСуммаОстаток      = МассивСтрок[0].Сумма;
			
			СтрокаТабличнойЧасти.Цена	= ?(мКоличествоОстаток = 0, мСуммаОстаток, мСуммаОстаток / мКоличествоОстаток);
			СтрокаТабличнойЧасти.Сумма	= СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // уатЗаполнитьЦеныНоменклатурыУПП()

// Процедура заполняет цену и стоимость в переданной таблице.
Процедура уатЗаполнитьЦеныНоменклатуры(ТаблицаНоменклатуры, Дата, Склад, Организация = Неопределено) Экспорт
	Если уатРаботаСМетаданными.ЕстьСправочник("РегистрацияВИФНС") Тогда
		уатЗаполнитьЦеныНоменклатурыУПП(ТаблицаНоменклатуры, Дата, Склад);
	КонецЕсли;
КонецПроцедуры

#КонецЕсли


/////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ  - ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТОВ

// Процедура вызывается в стандартном обработчике документа ПередЗаписью()
//
Процедура уатДокументПередЗаписью(ЭтотОбъект, Отказ, Права, РежимЗаписи, Знач РежимПроведения = Неопределено) Экспорт
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	//проверка прав
	уатПроверкаПравПередЗаписьюВДокументах(ЭтотОбъект, Отказ, Права);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

#Если Клиент Тогда

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура уатОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма = Обработки.уатЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);
	
	Форма.НазначениеСвойств      = уатОбщегоНазначения.уатПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ДокументОбъект.Ссылка);
	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;
	
	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСвойстваДокумента()

#КонецЕсли

// Процедура выполняет открытие формы работы со свойствами объекта
// формы списка.
//
// Параметры:
//  Объект       - владелец свойств,
//  ФормаОбъекта - форма списка
//
Процедура уатОткрытьСвойстваИзСписка(Объект, ФормаОбъекта) Экспорт
	
	Если Объект = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.уатЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаОбъекта);
	
	Форма.ОбъектОтбораЗначений   = Объект;
	Форма.ОбъектОтбораНазначений = Объект;
	
	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьСвойстваДокумента()

// Функция получает описание значений свойств
//
// Параметры:
//  ДокументОбъект - ссылка на объект, для которого необходимо получить описание
//
Функция уатПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка) Экспорт 
	
	ОписаниеЗначенийСвойств = "Дополнительные реквизиты";
	
	Если Ссылка = Неопределено Тогда
		Возврат ОписаниеЗначенийСвойств;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|			ТОГДА ""Да""
	|		КОГДА ЗначенияСвойствОбъектов.Значение = ЛОЖЬ
	|			ТОГДА ""Нет""
	|		ИНАЧЕ ЗначенияСвойствОбъектов.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	РегистрСведений.уатЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияСвойствОбъектов.Свойство.Наименование";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОписаниеЗначенийСвойств = "";
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Значение) = Тип("Дата") Тогда
				Если Выборка.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Формат(Выборка.Значение, "ДФ=dd.MM.yyyy") + Символы.ПС;
				ИначеЕсли Выборка.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
					ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Формат(Выборка.Значение, "ДФ=ЧЧ:мм:сс") + Символы.ПС;
				Иначе
					ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Выборка.Значение + Символы.ПС;
				КонецЕсли;
			Иначе
				ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Выборка.Значение + Символы.ПС;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеЗначенийСвойств;
	
КонецФункции

// Функция получает описание значений свойств
//
// Параметры:
//  ФормаОбъекта - форма объекта, в котором необходимо обновить кнопку
//  ОписаниеЗначенийСвойств - текстовое описание значений свойств
//
Процедура уатИзменитьПредставлениеКнопкиВыбораСвойств(ФормаОбъекта, ОписаниеЗначенийСвойств) Экспорт 
	
	Если ПустаяСтрока(ОписаниеЗначенийСвойств) ИЛИ ОписаниеЗначенийСвойств = "Дополнительные реквизиты" Тогда
		КартинкаКнопки = БиблиотекаКартинок.уатДополнительныеРеквизитыНеУстановлены;
	Иначе
		КартинкаКнопки = БиблиотекаКартинок.уатДополнительныеРеквизитыУстановлены;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из ФормаОбъекта.ЭлементыФормы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда 
			Кнопка = ЭлементФормы.Кнопки.Найти("ДействиеСвойства");
			Если Кнопка <> Неопределено Тогда
				Кнопка.Подсказка = ОписаниеЗначенийСвойств;
				Кнопка.Картинка  = КартинкаКнопки;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

//Функция возвращает список доступных назначений для "Свойств и категорий объектов" 
//по переданной ссылке
// Параметры:
//	Ссылка - Ссылка на справочник или документ
//
// Возвращаемое значение:
// Список значений: доступные назначения для свойств и категорий
Функция уатПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(Ссылка) Экспорт

	Результат = Новый СписокЗначений;

	ТипСсылки = ТипЗнч(Ссылка);

	Запрос = Новый Запрос;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Назначения.Ссылка КАК Ссылка,
	|	Назначения.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.уатНазначенияСвойствКатегорийОбъектов КАК Назначения
	|ГДЕ
	|	НЕ Назначения.ЭтоГруппа
	|";

	Запрос.Текст = ТекстЗапроса;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗначения.СодержитТип(ТипСсылки) Тогда
			Результат.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // уатПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке()

	
/////////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура оформления строки ТС (первоначальные сведения о ТС, различные АРМы, другие списки ТС)
Процедура уатОформитьСтрокуТС(ТС, ЭлементФормы_СписокТС, ОформлениеСтроки, КешПоДок, КешПоТО) Экспорт
	//ОформлениеСтроки.Ячейки.ОсновноеСредство.ОтображатьТекст = Ложь;
	Если НЕ КешПоДок.Найти(ТС) = Неопределено Тогда
		ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ОтображатьКартинку = Истина;
	КонецЕсли;	
	ОформлениеСтроки.Ячейки.ПросроченныеДокументы.ОтображатьТекст  = Ложь;
	Если НЕ КешПоТО.Найти(ТС) = Неопределено Тогда
		ОформлениеСтроки.Ячейки.ТО.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ТО.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.ТО.ОтображатьКартинку = Истина;
	КонецЕсли;	
	ОформлениеСтроки.Ячейки.ТО.ОтображатьТекст  = Ложь;
	
	Местонахождение_ = Неопределено;
	КолонкаКолонна_ = ЭлементФормы_СписокТС.Колонки.Найти("Колонна");
	КолонкаОрганизация_ = ЭлементФормы_СписокТС.Колонки.Найти("Организация");
	КолонкаПодразделение_ = ЭлементФормы_СписокТС.Колонки.Найти("Подразделение");
	флКолонкаКолонна_ = (КолонкаКолонна_ <> Неопределено И КолонкаКолонна_.Видимость);
	флКолонкаОрганизация_ = (КолонкаОрганизация_ <> Неопределено И КолонкаОрганизация_.Видимость);
	флКолонкаПодразделение_ = (КолонкаПодразделение_ <> Неопределено И КолонкаПодразделение_.Видимость);
	Если флКолонкаКолонна_ ИЛИ флКолонкаОрганизация_ ИЛИ флКолонкаПодразделение_ Тогда
		Местонахождение_ = МестонахождениеТС(ТС);
	КонецЕсли;	
	Если флКолонкаКолонна_ Тогда
		ОформлениеСтроки.Ячейки.Колонна.УстановитьТекст(Местонахождение_.Колонна);
	КонецЕсли;
	Если флКолонкаОрганизация_ Тогда
		ОформлениеСтроки.Ячейки.Организация.УстановитьТекст(Местонахождение_.Организация);
	КонецЕсли;
	Если флКолонкаПодразделение_ Тогда
		ОформлениеСтроки.Ячейки.Подразделение.УстановитьТекст(Местонахождение_.Подразделение);
	КонецЕсли;
КонецПроцедуры

// Процедура получения списка файлов объекта в одну строку
//по переданной ссылке
// Параметры:
//	Ссылка - Ссылка на справочник или документ
//
// Возвращаемое значение:
// Строка: доступные файлы
Функция ПолучитьСписокФайловОбъектаСтрокой(Ссылка) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ
	|	уатХранилищеДополнительнойИнформации.Ссылка
	|ИЗ
	|	Справочник.уатХранилищеДополнительнойИнформации КАК уатХранилищеДополнительнойИнформации
	|ГДЕ
	|	уатХранилищеДополнительнойИнформации.Объект = &Объект";
	мЗапрос.УстановитьПараметр("Объект",Ссылка);
	Выборка = мЗапрос.Выполнить().Выбрать();
	мСтрокаФайлов = "";
	Пока Выборка.Следующий() Цикл
		мСтрокаФайлов = мСтрокаФайлов + ?(ЗначениеЗаполнено(Выборка.Ссылка.Наименование),Выборка.Ссылка.Наименование,Выборка.Ссылка.ИмяФайла) + ", ";
	КонецЦикла;
	Если СтрДлина(мСтрокаФайлов) тогда
		мСтрокаФайлов = Лев(мСтрокаФайлов,СтрДлина(мСтрокаФайлов)-2);
	КонецЕсли;
	Возврат мСтрокаФайлов;
	
КонецФункции

// Процедура запускает обработчик загрузки данных GPS в зависимости от используемой системы GPS
//
Процедура УатПолныйЗагрузкаДанныхGPS() Экспорт
	Если Константы.уатИспользуемаяСистемаGPS.Получить() = Перечисления.уатСистемаGPS.Dynafleet Тогда
		Форма = Обработки.уатЗагрузкаДанныхDynafleet.ПолучитьФорму();
		Форма.Открыть();
	ИначеЕсли Константы.уатИспользуемаяСистемаGPS.Получить() = Перечисления.уатСистемаGPS.Omnicomm Тогда
		Форма = Обработки.уатЗагрузкаДанныхOmnicomm.ПолучитьФорму();
		Форма.Открыть();
	Иначе 
		Сообщить("Открытие возможно только тогда, когда используемая система GPS - Dynafleet либо Omnicomm.", СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

// Открывает отчет сравнения пробега и расхода ГСМ по данным ПЛ и GPS в зависимости от используемой системы GPS
//
Процедура УатПолныйОтчетСравнениеПробегаПЛиGPS() Экспорт
	Если Константы.уатИспользуемаяСистемаGPS.Получить() = Перечисления.уатСистемаGPS.Dynafleet Тогда
		Форма = Отчеты.уатСравнениеПробегаИРасходаГСМПоПЛИDynafleet.ПолучитьФорму();
		Форма.Открыть();
	ИначеЕсли Константы.уатИспользуемаяСистемаGPS.Получить() = Перечисления.уатСистемаGPS.Omnicomm Тогда
		Форма = Отчеты.уатСравнениеПробегаИРасходаГСМПоПЛИOmnicomm.ПолучитьФорму();
		Форма.Открыть();
	Иначе 
		Сообщить("Открытие возможно только тогда, когда используемая система GPS - Dynafleet либо Omnicomm.", СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

// Открывает отчет дополнительные сведения по  Omnicomm в зависимости от используемой системы GPS
//
Процедура УатПолныйОтчетДополнительныеСведенияПоOmnicomm() Экспорт
	Если Константы.уатИспользуемаяСистемаGPS.Получить() = Перечисления.уатСистемаGPS.Omnicomm Тогда
		Форма = Отчеты.уатДополнительныеСведенияПоOmnicomm.ПолучитьФорму();
		Форма.Открыть();
	Иначе
		Сообщить("Открытие возможно только тогда, когда используемая система GPS - Omnicomm.", СтатусСообщения.Важное);		
	КонецЕсли;
КонецПроцедуры

// Открывает отчет сравнение заправок ГСМ и Omnicomm в зависимости от используемой системы GPS
//
Процедура УатПолныйОтчетСравнениеЗаправокГСМиOmnicomm() Экспорт
	Если Константы.уатИспользуемаяСистемаGPS.Получить() = Перечисления.уатСистемаGPS.Omnicomm Тогда
		Форма = Отчеты.уатСравнениеЗаправокГСМиOmnicomm.ПолучитьФорму();
		Форма.Открыть();
	Иначе
		Сообщить("Открытие возможно только тогда, когда используемая система GPS - Omnicomm.", СтатусСообщения.Важное);		
	КонецЕсли;
КонецПроцедуры
