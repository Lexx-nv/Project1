// Этот модуль предназначен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.

#Если Клиент Тогда
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ТАЙПИНГА В ПОЛЕ ВВОДА
	
	// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
	//
	// Параметры
	//  РезультатЗапроса - РезультатЗапроса при тайпинге
	//  Текст - Строка, текст тайпинга
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	// Возвращаемое значение:
	//   Список значений
	//
	Функция СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Знач Текст, ТипСправочника)
		
		ПустаяСсылка = Новый(ТипСправочника);
		КоллекцияЗначенийПоискаПоПодстроке = ПустаяСсылка.Метаданные().ВводПоСтроке;
		
		СписокВозврата = Новый СписокЗначений;
		
		Текст = ВРег(Текст);
		ДлинаТекста = СтрДлина(Текст);
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		
		ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
		ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
		
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			
			Если ЕстьНаименование И КоллекцияЗначенийПоискаПоПодстроке.Найти("Наименование") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + Строка(СтрокаТаблицы.Код) + ")"), "")));
				Продолжить;
			КонецЕсли;
			
			Если ЕстьКод И КоллекцияЗначенийПоискаПоПодстроке.Найти("Код") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
				Если ЕстьНаименование Тогда
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + " (" + Строка(СтрокаТаблицы.Код) + ")"));
				Иначе
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, Строка(СтрокаТаблицы.Код));
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
			Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
				
				Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + Строка(СтрокаТаблицы.Наименование) + ")"), "")));
				КонецЕсли
				
			КонецЦикла; 
			
		КонецЦикла; 
		
		Возврат СписокВозврата;
		
	КонецФункции
	
	// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
	//
	// Параметры
	//  Текст - Строка, текст введенный в поле ввода вида контактной информации, по которому необходимо строить поиск
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
	//
	// Возвращаемое значение
	//  РезультатЗапроса
	//
	Функция ПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт
		
		ПустаяСсылкаТипа = Новый(ТипСправочника);
		
		МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
		
		КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
		Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ИмяТаблицыСправочника = МетаданныеОбъекта.Имя;
		
		Запрос = Новый Запрос;
		
		Текст = СтрЗаменить(Текст, "~", "~~");
		Текст = СтрЗаменить(Текст, "%", "~%");
		Текст = СтрЗаменить(Текст, "_", "~_");
		Текст = СтрЗаменить(Текст, "[", "~[");
		Текст = СтрЗаменить(Текст, "-", "~-");
		Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (Текст + "%"));
		Попытка
			Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(Текст));
		Исключение
			Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
		КонецПопытки;
		
		СтрокаОтборовПоСтруктуре = "";
		Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
			|		И
			|		" + ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса.", "ТаблицаСправочника.") + ЭлементСтруктуры.Ключ + " = &"+ ЭлементСтруктуры.Ключ;
		КонецЦикла; 
		
		СтрокаПолей = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
		|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
		|";
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
		КонецЕсли; 
		
		Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
			
			ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;
				ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
			Иначе
				Если ЭлементКоллекции.Имя = "Наименование" Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
						ТипЗначенияПоиска = Тип("Строка");
					Иначе
						ТипЗначенияПоиска = Тип("Число");
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
			
			Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
			|ИЗ
			|	Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
			|ГДЕ
			|	ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
			
		Иначе
			
			ПервыйЭлемент = Истина;
			СтрокаТаблиц = "";
			Для каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
				
				Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
					СтрокаПолей = СтрокаПолей + "
					|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";
					ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
				Иначе
					Если ЭлементКоллекции.Имя = "Наименование" Тогда
						ТипЗначенияПоиска = Тип("Строка");
					Иначе
						Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
							ТипЗначенияПоиска = Тип("Строка");
						Иначе
							ТипЗначенияПоиска = Тип("Число");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
				
				Если НЕ ПервыйЭлемент Тогда
					СтрокаТаблиц = СтрокаТаблиц + "
					|	ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли; 
				ПервыйЭлемент = Ложь;
				
				СтрокаТаблиц = СтрокаТаблиц + "
				|	ВЫБРАТЬ
				|		ТаблицаСправочника.Ссылка КАК Ссылка
				|	ИЗ
				|		Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
				|	ГДЕ
				|		ТаблицаСправочника." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
				
			КонецЦикла; 
			
			Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
			|ИЗ
			|
			|	(
			|" + СтрокаТаблиц + "
			|	) КАК ТаблицаВложенногоЗапроса";
			
		КонецЕсли; 
		
		Возврат Запрос.Выполнить();
		
	КонецФункции
	
	// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
	//
	// Параметры
	//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
	//  Элемент - элемент управления в котором производится тайпинг
	//
	Процедура ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт
		
		Если ОбработкаТайпинга Тогда
			ЭтаФорма.ТекущийЭлемент = Элемент;
			Элемент.ВыделенныйТекст = ТекстТайпинга;
			ОбработкаТайпинга = Ложь;
			ТекстТайпинга = "";
		КонецЕсли; 
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
		Иначе
			Элемент.ЦветТекстаПоля = Новый Цвет;
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
	//
	// Параметры
	//  Элемент - поле ввода
	//  Текст - текст введенный в поле ввода Вид
	//  ТекстАвтоПодбора - текст автоподбора в поле Вид
	//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	Процедура АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, ТипСправочника) Экспорт
		
		РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ПустаяСсылка = Новый(ТипСправочника);
				КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
				Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
					Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
						Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
							ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
						КонецЕсли;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
	// сведений Контактная информация.
	//
	// Параметры
	//  Элемент - поле ввода
	//  Текст - текст введенный в поле ввода Вид
	//  Значение - данные элемента управления поле ввода
	//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ЭтаФорма - форма записи регистра сведений контактная информация
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	Процедура ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт
		
		Если ПустаяСтрока(Текст) Тогда
			Значение = Новый(ТипСправочника);
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли; 
		
		РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
			ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				ОбработкаТайпинга = Истина;
				ТекстТайпинга = Текст;
			Иначе
				Значение = Текст;
			КонецЕсли;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Значение = Выборка.Ссылка;
			ИначеЕсли Выборка.Количество() > 50 Тогда
				Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
				|Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
				Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
					Значение = Текст;
				Иначе
					Значение = ПоследнееЗначениеЭлементаТайпинга;
				КонецЕсли; 
			Иначе
				Если Выборка.Количество() = 0 Тогда
					ВыбранныйЭлемент = Неопределено;
				Иначе
					СписокВыбора = СформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Текст, ТипСправочника);
					ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
				КонецЕсли; 
				Если ВыбранныйЭлемент = Неопределено Тогда
					ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
					Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
						Значение = Текст;
					Иначе
						Значение = ПоследнееЗначениеЭлементаТайпинга;
					КонецЕсли; 
					Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
						ОбработкаТайпинга = Истина;
						ТекстТайпинга = Текст;
					КонецЕсли;
				Иначе
					Значение = ВыбранныйЭлемент.Значение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецПроцедуры
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ
	
	// Активизирует один из реквизитов при открытии документа.
	//
	// Параметры:
	//  ДокументОбъект     - объект документа, 
	//  ФормаДокумента     - форма документа.
	//
	Процедура АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента) Экспорт
		
		// Структура - порядок активизации реквизитов.
		// Активизируется первый не заполненный.
		СтруктураРеквизитов = Новый Структура();
		
		СтруктураРеквизитов.Вставить("Дата");
		СтруктураРеквизитов.Вставить("Номер");
		СтруктураРеквизитов.Вставить("Организация");
		СтруктураРеквизитов.Вставить("Касса");
		СтруктураРеквизитов.Вставить("БанковскийСчет");
		СтруктураРеквизитов.Вставить("Склад");
		СтруктураРеквизитов.Вставить("СкладОрдер");
		СтруктураРеквизитов.Вставить("Контрагент");
		СтруктураРеквизитов.Вставить("Получатель");
		СтруктураРеквизитов.Вставить("Плательщик");
		СтруктураРеквизитов.Вставить("ФизЛицо");
		
		Для каждого Элемент Из СтруктураРеквизитов Цикл
			
			// Определим, есть ли ЭУ с таким именем.
			ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
			Если ЭлементУправления <> Неопределено Тогда // есть такой
				Если НЕ ЗначениеЗаполнено(ЭлементУправления.Значение)
					И ЭлементУправления.Доступность
					И ЭлементУправления.Видимость
					И Не ЭлементУправления.ТолькоПросмотр Тогда 
					
					// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
					ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
					Прервать;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
		
	КонецПроцедуры // АктивизироватьРеквизитВФорме()
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГПУ ВВОДА ДАННЫХ
	
	// Выполняет общие для всех документов действия при нажатии на гиперссылку на Счет-фактуру
	//
	// Параметры:
	//  ДокументОбъект  - объект документа, 
	//  ФормаДокумента  - форма документа.
	//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
	//
	Процедура ВвестиСчетФактуру1(ДокументОбъект, ФормаДокумента, ВидСчетаФактуры = "СчетФактураВыданный") Экспорт
		
		Если (Не ДокументОбъект.Проведен) и (Не ДокументОбъект.ПометкаУдаления) Тогда
			Ответ = Вопрос("Счет-фактуру нельзя вводить на основании не проведенного документа! Провести документ?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				Попытка
					// выполняем проведение документа
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Возврат;
				КонецПопытки;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		//Попытаемся найти счет фактуру
		СчетФактура = ОбщегоНазначения.НайтиПодчиненныйДокумент(ДокументОбъект.Ссылка, ВидСчетаФактуры);
		
		ОбъектСчетаФактуры = Неопределено;
		
		//Если потерпели неудачу, то необходимо ввести новый документ 
		Если (НЕ ЗначениеЗаполнено(СчетФактура))
			И (Не ДокументОбъект.ПометкаУдаления) Тогда
			//Вводим новый документ на основании нашего
			Если ДокументОбъект.Модифицированность() Тогда
				Предупреждение("Документ был изменен! Сначала следует записать документ!");
				Возврат;
			КонецЕсли;
			
			ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].СоздатьДокумент();
			ОбъектСчетаФактуры.Заполнить(ДокументОбъект); 
			
		ИначеЕсли ЗначениеЗаполнено(СчетФактура) Тогда
			ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
			
		Иначе
			Предупреждение("На основании документов, помеченных на удаление, ввод счетов-фактур не предусмотрен.");
			
		КонецЕсли;
		
		Если ОбъектСчетаФактуры <> Неопределено Тогда
			// Откроем форму для редактирования счета фактуры
			ОбъектСчетаФактуры.ПолучитьФорму( , ФормаДокумента, Строка(ДокументОбъект)).Открыть();
			
		КонецЕсли;
		
	КонецПроцедуры // ВвестиСчетФактуру()
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ
	
	//  Процедура определяет ситуацию, когда при изменении своей даты документ 
	//  оказывается в другом периоде нумерации документов, и в это м случае
	//  присваивает документу новый уникальный номер.
	//
	// Параметры:
	//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
	//  НачальнаяДатаДокумента - начальная дата документа 
	// 
	Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке
		
		// Определяем назначенную для данного вида документов периодичность смены номера
		ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;
		
		//В зависимости от установленной периодичности смены номеров,
		//определяем разность старой и новой датами документа.
		Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
			РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);
			
		ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
			РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);
			
		ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
			РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);
			
		ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
			РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;
			
		Иначе
			Возврат;
			
		КонецЕсли;
		
		Если РазностьДат <> 0 Тогда
			УстановитьНомерДокумента(ДокументОбъект);
		КонецЕсли;
		
	КонецПроцедуры // ПроверитьНомерДокумента()
	
// Процедура устанавливает номер документа.
//
// Параметры:
//  ДокументОбъект  - ДокументОбъект. Экземпляр документа, которому 
//                    необходимо присвоить новый номер
//
Процедура УстановитьНомерДокумента(ДокументОбъект) Экспорт
	
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если Не ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		Или НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда
		
		ДокументОбъект.УстановитьНовыйНомер("00");
		
	Иначе
		
		ДокументОбъект.УстановитьНовыйНомер(ДокументОбъект.Организация.Префикс);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьНомерДокумента()

	// Процедура выполняет общие действия при изменении даты документа
	//
	// Параметры:
	//  ДокументОбъект                 - объект редактируемого документа
	//  ВалютаРегламентированногоУчета - валюта регламентированного учета
	//  ФлагИзмененияКурса             - валюта регламентированного учета
	//
	Процедура ПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено) Экспорт
		
		МетаданныеДокумента            = ДокументОбъект.Метаданные();
		ЕстьВалютаДокумента            = МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено;
		ЕстьДоговорКонтрагента         = МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено;
		ПроверкаПоВалютеВзаиморасчетов = Ложь;
		ФлагИзмененияКурса             = Ложь;
		
		// В некоторых документах нет валюты документа и договора.
		Если ЕстьВалютаДокумента Тогда
			Если ЕстьДоговорКонтрагента Тогда
				Договор = ДокументОбъект.ДоговорКонтрагента;
				
				Если ЗначениеЗаполнено(Договор) Тогда
					Валюта = Договор.ВалютаВзаиморасчетов;
					ПроверкаПоВалютеВзаиморасчетов = Истина;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Валюта = ДокументОбъект.ВалютаДокумента;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		ЕстьКурсДокумента           = (МетаданныеДокумента.Реквизиты.Найти("КурсДокумента") <> Неопределено);
		ЕстьКратностьДокумента      = (МетаданныеДокумента.Реквизиты.Найти("КратностьДокумента") <> Неопределено);
		ЕстьКурсВзаиморасчетов      = (МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено);
		ЕстьКратностьВзаиморасчетов = (МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено);
		
		// В некоторых документах курс и кратность документа отсутствуют
		Если ПроверкаПоВалютеВзаиморасчетов
			И ЕстьКурсВзаиморасчетов
			И ЕстьКратностьВзаиморасчетов
			И ЕстьКурсДокумента
			И ЕстьКратностьДокумента Тогда
			
			ВалютаВзаиморасчетов          = Валюта;
			ВалютаДокумента               = ДокументОбъект.ВалютаДокумента;
			
			СтарыйКурсВзаиморасчетов      = ДокументОбъект.КурсВзаиморасчетов;
			СтараяКратностьВзаиморасчетов = ДокументОбъект.КратностьВзаиморасчетов;
			
			СтруктураВалюты               = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДокументОбъект.Дата);
			НовыйКурсВзаиморасчетов       = СтруктураВалюты.Курс;
			НоваяКратностьВзаиморасчетов  = СтруктураВалюты.Кратность;
			
			СтарыйКурсДокумента           = ДокументОбъект.КурсДокумента;
			СтараяКратностьДокумента      = ДокументОбъект.КратностьДокумента;
			
			СтруктураВалюты               = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
			НовыйКурсДокумента            = СтруктураВалюты.Курс;
			НоваяКратностьДокумента       = СтруктураВалюты.Кратность;
			
		ИначеЕсли ПроверкаПоВалютеВзаиморасчетов
			И ЕстьКурсВзаиморасчетов
			И ЕстьКратностьВзаиморасчетов Тогда
			
			ВалютаВзаиморасчетов          = Валюта;
			ВалютаДокумента               = Неопределено;
			
			СтарыйКурсВзаиморасчетов      = ДокументОбъект.КурсВзаиморасчетов;
			СтараяКратностьВзаиморасчетов = ДокументОбъект.КратностьВзаиморасчетов;
			
			СтруктураВалюты               = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДокументОбъект.Дата);
			НовыйКурсВзаиморасчетов       = СтруктураВалюты.Курс;
			НоваяКратностьВзаиморасчетов  = СтруктураВалюты.Кратность;
			
			СтарыйКурсДокумента           = 0;
			СтараяКратностьДокумента      = 0;
			
			НовыйКурсДокумента            = 0;
			НоваяКратностьДокумента       = 0;
			
		ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов
			И ЕстьКурсДокумента
			И ЕстьКратностьДокумента Тогда
			
			ВалютаВзаиморасчетов          = Неопределено;
			ВалютаДокумента               = Валюта;
			
			СтарыйКурсВзаиморасчетов      = 0;
			СтараяКратностьВзаиморасчетов = 0;
			
			НовыйКурсВзаиморасчетов       = 0;
			НоваяКратностьВзаиморасчетов  = 0;
			
			СтарыйКурсДокумента           = ДокументОбъект.КурсДокумента;
			СтараяКратностьДокумента      = ДокументОбъект.КратностьДокумента;
			
			СтруктураВалюты               = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ДокументОбъект.Дата);
			НовыйКурсДокумента            = СтруктураВалюты.Курс;
			НоваяКратностьДокумента       = СтруктураВалюты.Кратность;
			
		Иначе
			Возврат;
		КонецЕсли;
		
		ИзменилсяКурсВзаиморасчетов = НЕ (НовыйКурсВзаиморасчетов = СтарыйКурсВзаиморасчетов И НоваяКратностьВзаиморасчетов = СтараяКратностьВзаиморасчетов);
		ИзменилсяКурсДокумента      = НЕ (НовыйКурсДокумента      = СтарыйКурсДокумента      И НоваяКратностьДокумента      = СтараяКратностьДокумента);
		
		// Контроль изменений курса.
		Если ИзменилсяКурсВзаиморасчетов
			И ИзменилсяКурсДокумента Тогда
			
			// Изменился курс документа и взаиморасчетов.
			ТекстВопроса = "На дату документа у валюты документа " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,      СтарыйКурсДокумента,      СтараяКратностьДокумента,      ВалютаРегламентированногоУчета, Истина)) +
			" и валюты взаиморасчетов " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, СтарыйКурсВзаиморасчетов, СтараяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
			" был задан другой курс." +
			Символы.ПС +
			"Установить курс документа " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,      НовыйКурсДокумента,      НоваяКратностьДокумента,      ВалютаРегламентированногоУчета, Истина)) +
			" и курс взаиморасчетов " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, НовыйКурсВзаиморасчетов, НоваяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
			" в соответствии с курсом валют?";
			
		ИначеЕсли ИзменилсяКурсВзаиморасчетов
			И НЕ ИзменилсяКурсДокумента Тогда
			
			// Изменился курс взаиморасчетов.
			ТекстВопроса = "На дату документа у валюты взаиморасчетов " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, СтарыйКурсВзаиморасчетов, СтараяКратностьВзаиморасчетов, ВалютаРегламентированногоУчета, Истина)) +
			" был задан другой курс." +
			Символы.ПС +
			"Установить курс взаиморасчетов " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, НовыйКурсВзаиморасчетов,  НоваяКратностьВзаиморасчетов,  ВалютаРегламентированногоУчета, Истина)) +
			" в соответствии с курсом валюты?";
			
		ИначеЕсли ИзменилсяКурсДокумента Тогда
			
			// Изменился курс документа.
			ТекстВопроса = "На дату документа у валюты документа " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, СтарыйКурсДокумента, СтараяКратностьДокумента, ВалютаРегламентированногоУчета, Истина)) +
			" был задан другой курс." +
			Символы.ПС +
			"Установить курс документа " +
			СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, НовыйКурсДокумента,  НоваяКратностьДокумента,  ВалютаРегламентированногоУчета, Истина)) +
			" в соответствии с курсом валюты?";
			
		Иначе
			// Если курс не изменился, то выход.
			Возврат;
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если ИзменилсяКурсДокумента Тогда
				Если ЕстьКурсДокумента Тогда
					ДокументОбъект.КурсДокумента           = НовыйКурсДокумента;
				КонецЕсли;
				Если ЕстьКратностьДокумента Тогда
					ДокументОбъект.КратностьДокумента      = НоваяКратностьДокумента;
				КонецЕсли;
			КонецЕсли;
			
			Если ИзменилсяКурсВзаиморасчетов Тогда
				Если ЕстьКурсВзаиморасчетов Тогда
					ДокументОбъект.КурсВзаиморасчетов      = НовыйКурсВзаиморасчетов;
				КонецЕсли;
				Если ЕстьКратностьВзаиморасчетов Тогда
					ДокументОбъект.КратностьВзаиморасчетов = НоваяКратностьВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			ФлагИзмененияКурса = Истина;
		КонецЕсли;
		
	КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()
	
#КонецЕсли

#Если Клиент Тогда
	
	// Функция спрашивает пользователя записать ли объект, или нет, если он новый
	//
	// Параметры
	//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
	//
	// Возвращаемое значение:
	//   Булево - Объект записан или нет
	//
	Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт
		
		Возврат уатОбщегоНазначенияТиповые.ЗаписатьНовыйОбъектВФорме(ФормаОбъекта);
		
		//Если ФормаОбъекта.ЭтоНовый() Тогда
		//	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
		//		ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		//	Иначе // Справочник
		//		ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		//	КонецЕсли; 
		//	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		//	Если Ответ <> КодВозвратаДиалога.Да Тогда
		//		Возврат Ложь;
		//	Иначе
		//		Попытка
		//			Возврат ФормаОбъекта.ЗаписатьВФорме();
		//		Исключение
		//			Сообщить(ОписаниеОшибки());
		//			Возврат Ложь;
		//		КонецПопытки;
		//	КонецЕсли;
		//Иначе
		//	Возврат Истина;
		//КонецЕсли; 
		
	КонецФункции // ЗаписатьНовыйОбъектВФорме()
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ
	
	// Процедура возвращает паспортные данные физлица в виде строки
	//
	// Параметры: 
	//  Валюта                         - Валюта, курс которой необходимо отобразить
	//  Курс                           - курс, которой необходимо отобразить
	//  Кратность                      - кратность, которую необходимо отобразить
	//  ВалютаРегламентированногоУчета - валюта регламентированного учета
	//  СформироватьСкобки             - признак необходимости скобок
	//
	// Возвращаемое значение:
	//  Строка с данными о курсе и кратности валюты
	//
	Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт
		
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			Возврат "";
			
		Иначе
			Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
			+ СокрЛП(Валюта)
			+ " = "
			+ Курс + " " 
			+ СокрЛП(ВалютаРегламентированногоУчета)
			+ ?(СформироватьСкобки, " )", "");
		КонецЕсли;
		
	КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ
	
	// Процедура передаёт в поле выбора список значений для выбора.
	// Если в поле уже было установлено отличное от Неопределено значение, оно будет сохранено
	//
	// Параметры: 
	//  ПолеВыбора - ссылка на элемент формы, в который требуется передать список значений для выбора
	//  Список - список значений который требуется передать в указанное поле выбора
	//	
	Процедура УстановитьСписокполяВыбора(ПолеВыбора, Список) Экспорт
		
		ПрошлоеЗначение = ПолеВыбора.Значение;
		ПолеВыбора.СписокВыбора = Список;
		Если  ЗначениеЗаполнено(ПрошлоеЗначение) Тогда
			Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
				Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
					ПолеВыбора.Значение = ПрошлоеЗначение;
				КонецЕсли;
			Иначе
				ПолеВыбора.Значение = Неопределено;
			КонецЕсли;
		КонецЕсли; 
		
	КонецПроцедуры // УстановитьСписокполяВыбора()
	
	//=================================================================================
	// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ
	
	// Проверяет модифицированность документа перед печатью, и если необходимо 
	// записывает его
	// 
	// Параметры
	//  Документ - (ДокументОбъект.*) - проверяемый документ
	//
	Функция ПроверитьМодифицированность(Документ) Экспорт
		
		Результат = Ложь;
		
		Если Документ.Модифицированность() Тогда
			
			Проведен = ?(Документ.Проведен, " и провести","");
			
			Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ Проведен +".
			|Записать" + Проведен + "?",
			РежимДиалогаВопрос.ОКОтмена, , 
			КодВозвратаДиалога.Отмена,
			"Документ изменен");
			
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				
				Если Документ.Проведен Тогда
					
					ДатаДока = НачалоДня(Документ.Дата);
					ДатаДня  = НачалоДня(ТекущаяДата());
					
					Попытка
						
						Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
							Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
						Иначе
							Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
						
					Исключение
						
						Предупреждение("Операция не выполнена!");
						Возврат Результат = Истина;
						
					КонецПопытки;
					
				Иначе
					Документ.Записать();
				КонецЕсли;
				
				Результат = Истина;
				
			КонецЕсли;
			
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПроверитьМодифицированность()
	
	// Проверяет модифицированность документа перед печатью, и если необходимо 
	// записывает его
	// 
	// Параметры
	//  Документ - (ДокументОбъект.*) - проверяемый документ
	//  Форма    - форма проверяемого документа
	//
	Функция ПроверитьМодифицированностьВФорме(Документ, Форма) Экспорт
		
		Результат = Ложь;
		
		Если Форма.Модифицированность Тогда
			
			Проведен = ?(Документ.Проведен, " и провести","");
			
			Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ Проведен +".
			|Записать" + Проведен + "?",
			РежимДиалогаВопрос.ОКОтмена, , 
			КодВозвратаДиалога.Отмена,
			"Документ изменен");
			
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				
				Если Документ.Проведен Тогда
					
					Попытка
						
						Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
						
					Исключение
						
						Предупреждение("Операция не выполнена!");
						Возврат Результат = Истина;
						
					КонецПопытки;
					
				Иначе
					Форма.ЗаписатьВФорме();
				КонецЕсли;
				
				Результат = Истина;
				
			КонецЕсли;
			
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПроверитьМодифицированность()
	
	// Проверяет модифицированность документа перед заполнением на основании
	// 
	// Параметры
	//  Документ - проверяемый документ основания
	//
	Функция ПроверитьМодифицированностьДокументаОснования(Документ) Экспорт
		
		Результат = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Документ) Тогда
			
			ФормаДокумента = Документ.ПолучитьФорму();
			
			Если ФормаДокумента.Модифицированность() Тогда
				#Если Клиент Тогда
					ОчиститьСообщения();
				#КонецЕсли
				ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Документ) + " был изменен! Сначала следует записать документ!");
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПроверитьМодифицированностьДокументаОснования()
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ В ФОРМЕ
	
	// Процедура вызывает сервисный механизм для изменения общих для
	// всей табличной части Товары реквизитов, таких, например, как
	// тип цен, валюта и т. д.
	//
	// Параметры:
	//  ДокументОбъект                     - объект редактируемого документа; 
	//  СпособЗаполненияЦен                - значение перечисления "Способы заполнения цен", определяет по какому из 
	//                                       регистров ("Цены компании" или "Цены контрагентов") будет строиться запрос.
	//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
	//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
	//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
	//                                       но не надо давать изменять, необязательный параметр;
	//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать;
	//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
	//  СтруктураЗначений                  - для эмуляции ввода пользователем валюты, типа цен и пр. Применяется при
	//                                       автоматическом заполнении документов.
	//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
	//  СтруктураНеобрабатываемыхТабличныхЧастей - структура, содержащая имена табличных частей, которые не надо 
	//                                       обрабатывать при изменении цен/валюты;
	//
	Процедура ИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, 
		СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
		ВалютаРегламентированногоУчета,
		СкидкаУстановлена = Ложь,
		СтруктураЗначений = Неопределено,
		НовыйТипЦенДляУстановки = Неопределено,
		СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт
		
		// Откроем модально форму "Цены и Налоги" и получим структуру старых и новых значений реквизитов документа
		Автозаполнение = Ложь;
		Если СтруктураЗначений = Неопределено Тогда
			
			СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
			СтруктураНеРедактируемыхРеквизитов, ИмяТабличнойЧасти, НовыйТипЦенДляУстановки);
		Иначе
			
			Автозаполнение = Истина;
			
		КонецЕсли;
		
		// Если в форме отказались от изменений, то необходимо прекратить обработку
		Если СтруктураЗначений = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		// Заполним нужные реквизиты документа
		Ценообразование.УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураЗначений, ДокументОбъект, СтруктураРеквизитовДокумента);
		
		//обрабатываем изменения Товаров, Услуг, ВозвратнойТары 
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
			ТекущееИмяТабличнойЧасти = ТЧОбъекта.Имя;
			Если (СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено
				ИЛИ Не СтруктураНеобрабатываемыхТабличныхЧастей.Свойство(ТекущееИмяТабличнойЧасти))
				И (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
				ИЛИ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)) Тогда
				
				Ценообразование.ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект,
				СпособЗаполненияЦен,
				СтруктураРеквизитовДокумента,
				ТекущееИмяТабличнойЧасти,
				ВалютаРегламентированногоУчета,
				СкидкаУстановлена,
				СтруктураЗначений,
				Автозаполнение);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры // ИзменитьЦеныВалюту()
	
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ
	
	// Процедура выполняет открытие формы работы со свойствами документа
	//
	// Параметры:
	//  ДокументОбъект - объект редактируемого документа,
	//  ФормаДокумента - форма редактируемого документа
	//
	Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
			Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
			
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				ФормаДокумента.ЗаписатьВФорме();
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);
		
		Форма.НазначениеСвойств      = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ДокументОбъект.Ссылка);
		Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
		Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;
		
		Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
		Форма.Открыть();
		
	КонецПроцедуры // ОткрытьСвойстваДокумента()
	
	// Процедура выполняет открытие формы работы со свойствами объекта
	// формы списка.
	//
	// Параметры:
	//  Объект       - владелец свойств,
	//  ФормаОбъекта - форма списка
	//
	Процедура ОткрытьСвойстваИзСписка(Объект, ФормаОбъекта) Экспорт
		
		Если Объект = неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаОбъекта);
		
		Форма.ОбъектОтбораЗначений   = Объект;
		Форма.ОбъектОтбораНазначений = Объект;
		
		Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
		Форма.Открыть();
		
	КонецПроцедуры // ОткрытьСвойстваДокумента()
	
	// Функция получает описание значений свойств
	//
	// Параметры:
	//  ДокументОбъект - ссылка на объект, для которого необходимо получить описание
	//
	Функция ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка) Экспорт 
		
		ОписаниеЗначенийСвойств = "Дополнительные реквизиты";
		
		Если Ссылка = Неопределено Тогда
			Возврат ОписаниеЗначенийСвойств;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ВЫБОР
		|		КОГДА ЗначенияСвойствОбъектов.Значение = ИСТИНА
		|			ТОГДА ""Да""
		|		КОГДА ЗначенияСвойствОбъектов.Значение = ЛОЖЬ
		|			ТОГДА ""Нет""
		|		ИНАЧЕ ЗначенияСвойствОбъектов.Значение
		|	КОНЕЦ КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияСвойствОбъектов.Свойство.Наименование";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ОписаниеЗначенийСвойств = "";
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ТипЗнч(Выборка.Значение) = Тип("Дата") Тогда
					Если Выборка.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
						ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Формат(Выборка.Значение, "ДФ=dd.MM.yyyy") + Символы.ПС;
					ИначеЕсли Выборка.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
						ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Формат(Выборка.Значение, "ДФ=ЧЧ:мм:сс") + Символы.ПС;
					Иначе
						ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Выборка.Значение + Символы.ПС;
					КонецЕсли;
				Иначе
					ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Выборка.Значение + Символы.ПС;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат ОписаниеЗначенийСвойств;
		
	КонецФункции
	
	// Функция получает описание значений свойств
	//
	// Параметры:
	//  ФормаОбъекта - форма объекта, в котором необходимо обновить кнопку
	//  ОписаниеЗначенийСвойств - текстовое описание значений свойств
	//
	Процедура ИзменитьПредставлениеКнопкиВыбораСвойств(ФормаОбъекта, ОписаниеЗначенийСвойств) Экспорт 
		
		Если ПустаяСтрока(ОписаниеЗначенийСвойств) ИЛИ ОписаниеЗначенийСвойств = "Дополнительные реквизиты" Тогда
			КартинкаКнопки = БиблиотекаКартинок.уатДополнительныеРеквизитыНеУстановлены;
		Иначе
			КартинкаКнопки = БиблиотекаКартинок.уатДополнительныеРеквизитыУстановлены;
		КонецЕсли;
		
		Для Каждого ЭлементФормы Из ФормаОбъекта.ЭлементыФормы Цикл
			Если ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда 
				Кнопка = ЭлементФормы.Кнопки.Найти("ДействиеСвойства");
				Если Кнопка <> Неопределено Тогда
					Кнопка.Подсказка = ОписаниеЗначенийСвойств;
					Кнопка.Картинка  = КартинкаКнопки;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
		
	КонецПроцедуры
	

	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ
	
	// Печатает движения документа
	//
	// Параметры:
	//  ДокументСсылка - ссылка на документ, движения которого печатаем
	//
	Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт
		Попытка
			
			Форма = Отчеты.ДвиженияДокумента.ПолучитьФорму(,,Новый УникальныйИдентификатор);
			Форма.Открыть();
			Форма.Документ = ДокументСсылка;
			Форма.СформироватьИВывестиОтчет();
		Исключение
			// Получим контекст отчета
			ПечатьДвиженийДокумента = Отчеты.ДвиженияДокумента.Создать();
			
			//Установим реквизиты и переменные отчета
			ПечатьДвиженийДокумента.Документ = ДокументСсылка;
			
			// Напечатаем движения
			ПечатьДвиженийДокумента.СформироватьИВывестиОтчет();
		КонецПопытки;
		
	КонецПроцедуры // НапечататьДвиженияДокумента()
	
	// Процедура выводить форму структуры подчиненности документа
	Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
		
		ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
		Если ФормаСтруктурыПодчиненности.Открыта() Тогда
			ФормаСтруктурыПодчиненности.Закрыть();
		КонецЕсли;
		ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
		ФормаСтруктурыПодчиненности.Открыть();
		
	КонецПроцедуры
	
	// Функция формирует представление суммы прописью в указанной валюте
	//
	// Возвращаемое значение:
	//  Строка - сумма прописью
	//
	Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт
		
		Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
			Возврат ОбщегоНазначения.ФорматСумм(Сумма);
		Иначе
			Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
		КонецЕсли;
		
	КонецФункции // СформироватьСуммуПрописью()
	
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

// Процедура устанавливает видимость текста
Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: справка еще не загружена");
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: не найден элемент " + Ид);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

// Процедура отрабатывает нажатие на поле HTML документа
Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент_HTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(Элемент_HTML.pathname, Элемент_HTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли Элемент_HTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(Элемент_HTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли Элемент_HTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + Элемент_HTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

 // Функция возвращает найденный элемент HTML
//
// Параметры:
//  Элемент_HTML - Название элемента для поиска
//  НазваниеТега - Название тега для поиска
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция НайтиЭлемент(Элемент_HTML, НазваниеТега)
	
	ТекущийЭлемент_HTML = Элемент_HTML;
	Пока Истина Цикл
		Если ТекущийЭлемент_HTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлемент_HTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлемент_HTML;
		Иначе
			ТекущийЭлемент_HTML = ТекущийЭлемент_HTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Процедура отрабатывает событие наведения мышки на поле HTML документа
Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если Элемент_HTML <> Неопределено Тогда
			Элемент_HTML.style.paddingtop		= 0;
			Элемент_HTML.style.paddingright		= 3;
			Элемент_HTML.style.paddingbottom		= 2;
			Элемент_HTML.style.paddingleft		= 3;
			Элемент_HTML.style.borderwidth		= 1;
			Элемент_HTML.style.borderstyle		= "solid";
			Элемент_HTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML <> Неопределено Тогда
		Элемент_HTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		Элемент_HTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

// Процедура отрабатывает событие покидания мышки поля HTML документа
Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если Элемент_HTML <> Неопределено Тогда
			Элемент_HTML.style.paddingtop		= 1;
			Элемент_HTML.style.paddingright		= 4;
			Элемент_HTML.style.paddingbottom		= 3;
			Элемент_HTML.style.paddingleft		= 4;
			Элемент_HTML.style.borderstyle		= "none";
			Элемент_HTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML <> Неопределено Тогда
		Элемент_HTML.style.backgroundcolor	= "";
		Элемент_HTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает цвет фона
//
// Возвращаемое значение:
//  Цвет - цвет фона
//
Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

// Функция возвращает цвет рамки
//
// Возвращаемое значение:
//  Цвет - цвет рамки
//
Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

// Функция возвращает цвет ссылки
//
// Возвращаемое значение:
//  Цвет - цвет ссылки
//
Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(51, 102, 255);
	
КонецФункции

// Функция возвращает цвет выделенной ссылки
//
// Возвращаемое значение:
//  Цвет - цвет выделенной ссылки
//
Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

// Функция возвращает цвет фона выделенной ссылки
//
// Возвращаемое значение:
//  Цвет - цвет фона выделенной ссылки
//
Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|				FONT-SIZE: 8pt;
	|				FONT-FAMILY: ""MS Sans Serif"";
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

// Функция возвращает цвет фона выделенной ссылки
//
// Параметры:
//  ВыбранныйЦвет - Тип("Цвет"). Цвет, для которого нужно найти 16ричное представление
//
// Возвращаемое значение:
//  Цвет - Строка, 16ричное представление цвета
//
Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции

// Функция возвращает путь к картинке для HTML
//
// Параметры:
//  Картинка - Тип("Картинка"). Картинка, для которой нужно найти путь
//  ПолеHTMLДокумента - Поле представленное в виде HTML-документа
//
// Возвращаемое значение:
//  Путь - Строка, путь к картинке HTML
//
Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // КартинкаУрл()

	
	
#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если КолонкиТабПоля.Код.Видимость Тогда
		Если Номенклатура <> Неопределено Тогда
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
		Иначе
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

	Если КолонкиТабПоля.Артикул.Видимость Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
		Иначе
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()