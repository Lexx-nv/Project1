//////////////////////////////////////////////////////////////////
////        ФУНКЦИИ РАБОТЫ ПРАВАМИ И НАСТРОЙКАМИ
//////////////////////////////////////////////////////////////////  


// Стандартная процедура проверки корректности заполнения элемента
// по заполнению обязательных реквизитов и уникальности уникальных индексированных
//
//  ЭтотОбъект -объект для проверки
//  Ошибки - ошибки в объекте,строкой
//  ДопРеквизиты - список дополнительных реквизитов для проверки
//  Заполнение - требование заполнения
//  Уникальность - требование уникальности
//
Функция уатПроверитьКорректность(ЭтотОбъект, Ошибки = "", ДопРеквизиты = Неопределено, Заполнение = Истина, Уникальность = Истина) Экспорт
	Результат=Истина;
	Если НЕ уатПраво("ПроверкаЗаполненияСправочниковИДокументов", ЭтотОбъект.Права) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	// Определимся это элемент или группа (для плана счетов всегда элемент)
	Попытка  ЭтоГруппа = ЭтотОбъект.ЭтоГруппа;
	Исключение ЭтоГруппа = Ложь;
	КонецПопытки;
	// сначала получим список обязательных у нашего объекта....
	Реквизиты = ЭтотОбъект.ПолучитьОбязательныеРеквизиты(НЕ ЭтоГруппа, ЭтоГруппа);
	// и его метаданные
	ЭтотОбъектМетаданные = ЭтотОбъект.Метаданные();
	
	// добавим дополнительные реквизиты
	Если ДопРеквизиты <> Неопределено Тогда
		Для каждого ДопРеквизит Из ДопРеквизиты Цикл
			Реквизиты.Вставить(ДопРеквизит.Ключ, ДопРеквизит.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Проверим установим заранее владельца, чтобы ниже в циклах этим не заниматься
	ЭтоСправочник = Ложь; Владелец = НЕОПРЕДЕЛЕНО;
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭтотОбъект.Ссылка)) Тогда // Владелец только у справочников бывает
		ЭтоСправочник = Истина;
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ЭтотОбъект.Владелец) Тогда
			Владелец = ЭтотОбъект.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	// пройдемся по списку реквизитов с проверкой
	Для каждого Реквизит Из Реквизиты Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда
			// проверяем табличную часть
			ТабличнаяЧасть = ЭтотОбъект[Реквизит.Ключ];
			СписокНайденныхДублей = Новый СписокЗначений();
			// идем по табличной части
			Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
				// создадим структуру отбора для проверки уникальности реквизитов
				Если Уникальность Тогда СтруктураОтбора = Новый Структура(); КонецЕсли;
				// переберем обязательные реквизиты
				Для каждого РеквизитТаблицы Из Реквизит.Значение Цикл
					Если (Заполнение) И (РеквизитТаблицы.Значение <> 2) И (РеквизитТаблицы.Значение > 0) И уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы[РеквизитТаблицы.Ключ]) Тогда
						Результат = Ложь;
						Ошибки = Ошибки + "Таблица <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, , Реквизит.Ключ) + "> значение колонки <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, РеквизитТаблицы.Ключ, Реквизит.Ключ) + "> не заполнено ! Строка номер " + СокрЛП(СтрокаТаблицы.НомерСтроки) + Символы.ПС;
						Продолжить; // Если реквизит таблицы не заполнен, проверять его уникальность нет смысла
					КонецЕсли;
					// заполним структуру отбора для проверки уникальности реквизитов
					Если Уникальность И РеквизитТаблицы.Значение > 1 Тогда
						СтруктураОтбора.Вставить(СокрЛП(РеквизитТаблицы.Ключ), СтрокаТаблицы[РеквизитТаблицы.Ключ]);
					КонецЕсли;
				КонецЦикла;
				// проверка уникальности
				Если Уникальность И СтруктураОтбора.Количество() > 0 И СписокНайденныхДублей.НайтиПоЗначению(СтрокаТаблицы) = Неопределено Тогда
					// поищем строки удовлетворяющие структуре отбора
					НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
					// если нашли и их больше 1, то строки не уникальные
					Если НайденныеСтроки.Количество() > 1 Тогда
						// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
						Результат = Ложь;
						ДублирующиесяСтроки = ""; 
						// выведем строку сообщения...
						Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
							ДублирующиесяСтроки = ДублирующиесяСтроки + "," + СокрЛП(НайденнаяСтрока.НомерСтроки);
							// добавим строку в список найденных дублей, что бы не сообщать о ней еще раз
							СписокНайденныхДублей.Добавить(НайденнаяСтрока);
						КонецЦикла;
						СтрокаРеквизитов = "";
						Для каждого РеквизитТаблицы Из СтруктураОтбора Цикл
							СтрокаРеквизитов = СтрокаРеквизитов + ?(ПустаяСтрока(СтрокаРеквизитов), "", ",") + РеквизитТаблицы.Ключ;
						КонецЦикла;
						Ошибки = Ошибки + "Таблица <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, , Реквизит.Ключ) + "> значения колонки <" + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, РеквизитТаблицы.Ключ, Реквизит.Ключ) + "> не уникальны ! Строки: " + Сред(ДублирующиесяСтроки, 2) + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		Иначе // обычный реквизит справочника / ПВХ (не табличная часть)
			// Сначала проверим заполнение (параметры структуры 1 или 3)
			Если Заполнение 
				и ((Реквизит.Значение = 1) или (Реквизит.Значение = 3) или (Реквизит.Значение = Неопределено))
				и уатОбщегоНазначения.уатЗначениеНеЗаполнено(ЭтотОбъект[Реквизит.Ключ]) Тогда
				Результат = Ложь;
				Ошибки = Ошибки + "Реквизит """ + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные,Реквизит.Ключ) + """ не заполнен !" + Символы.ПС;
				Продолжить; // Если реквизит не заполнен, проверять его уникальность нет смысла
			КонецЕсли;
			// Теперь проверим уникальность (параметры структуры 2 или 3)
			// проверку сделаем прямым сравнением (а не >2) во избежание ошибки при не числовом типе значения.
			Если (Уникальность) и ((Реквизит.Значение = 2)ИЛИ(Реквизит.Значение = 3)) Тогда
				ИмяОбъекта = ЭтотОбъект.Метаданные().Имя;
				Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
					//имеем справочник
					Менеджер = Справочники[ЭтотОбъект.Метаданные().Имя];
				ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
					//имеем ПВХ
					Менеджер = ПланыВидовХарактеристик[ЭтотОбъект.Метаданные().Имя];
				ИначеЕсли Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
					//имеем ПВР
					Менеджер = ПланыВидовРасчета[ЭтотОбъект.Метаданные().Имя];
				Иначе
					//имеем ... ничего не имеем
				КонецЕсли;
				
				Если Реквизит.Ключ = "Наименование" Тогда
					Если ЭтоСправочник Тогда
						НайденнаяСсылка = Менеджер.НайтиПоНаименованию(ЭтотОбъект.Наименование, Истина, , Владелец);
					Иначе
						НайденнаяСсылка = Менеджер.НайтиПоНаименованию(ЭтотОбъект.Наименование, Истина);
					КонецЕсли;
				ИначеЕсли Реквизит.Ключ = "Код" Тогда
					Если ЭтоСправочник Тогда
						НайденнаяСсылка = Менеджер.НайтиПоКоду(ЭтотОбъект.Код, , , Владелец);
					Иначе
						НайденнаяСсылка = Менеджер.НайтиПоКоду(ЭтотОбъект.Код);
					КонецЕсли;
				Иначе // реквизит
					Если ЭтоСправочник Тогда
						НайденнаяСсылка = Менеджер.НайтиПоРеквизиту(Реквизит.Ключ, ЭтотОбъект[Реквизит.Ключ], , Владелец);
					Иначе
						НайденнаяСсылка = Менеджер.НайтиПоРеквизиту(Реквизит.Ключ, ЭтотОбъект[Реквизит.Ключ]);
					КонецЕсли;
				КонецЕсли;
				
				Если (НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(НайденнаяСсылка)) и (НайденнаяСсылка<>ЭтотОбъект.Ссылка) Тогда
					Результат=Ложь;
					Ошибки =  Ошибки + "Реквизит """ + уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, Реквизит.Ключ) + """ не уникален !";
					Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(Владелец) Тогда
						Ошибки = Ошибки + " (В пределах владельца: " + СокрЛП(Владелец) + ")";
					КонецЕсли;
					Ошибки = Ошибки + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


// Функция получает синоним реквизита в шапке или табличной части
//
// Параметры:
//  ЭтотОбъектМетаданные - объект синоним реквизита которого необходимо получить
//  ИмяРеквизита - Имя реквизита синоним которого необходимо получить
//  ИмяТабличнойЧасти - имя табличной части для реквизита которой необходимо 
//                 получить синоним
//
// Возвращаемое значение%
//  Синоним реквизита.
Функция уатПолучитьСинонимРеквизита(ЭтотОбъектМетаданные, ИмяРеквизита="", ИмяТабличнойЧасти="") Экспорт
	Если ТипЗнч(ЭтотОбъектМетаданные) <> Тип("ОбъектМетаданных") Тогда
		ЭтотОбъектМетаданные = ЭтотОбъектМетаданные.Метаданные();
	КонецЕсли; 
	СинонимРеквизита = ИмяРеквизита;
	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		Реквизит = ЭтотОбъектМетаданные.Реквизиты.Найти(ИмяРеквизита);
	Иначе
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			Реквизит = ЭтотОбъектМетаданные.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		Иначе
			Реквизит = ЭтотОбъектМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита);
		КонецЕсли;
	КонецЕсли; 
	Если Реквизит <> Неопределено Тогда
		СинонимРеквизита=Реквизит.Синоним;
	КонецЕсли; 
	Возврат СинонимРеквизита;
КонецФункции // уатПолучитьСинонимРеквизита()

// Преобразование имени права в ссылку на ПВХ 
// Так же поддерживается идентификация по коду ПВХ
// Параметры
//  Право – Строка, Число, ссылка на ПВХ ПраваИНастройки – имя или ссылка права
// Возвращаемое значение:
//   ссылка на ПВХ ПраваИНастройки или Неопределено для недопустимого имени ПВХ
Функция уатПолучитьСсылкуПВХПравИНастроек(Право) Экспорт
	ТипЗначения = ТипЗнч(Право);
	
	Если ТипЗначения = Тип("ПланВидовХарактеристикСсылка.уатПраваИНастройки") Тогда
		//Если право уже является ссылкой - вернем ее
		Возврат Право;
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		// Если право задано в виде имени - преобразуем его в ссылку на ПВХ
		// Если такого предопределенного элемента нет. Попробуем найти добавленный по наименованию
		Попытка		Возврат ПланыВидовХарактеристик.уатПраваИНастройки[СокрЛП(Право)];
		Исключение	Возврат ПланыВидовХарактеристик.уатПраваИНастройки.НайтиПоНаименованию(СокрЛП(Право), Истина);
		КонецПопытки; 
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		// Возможно, хотя и не рекомендуется использовать поиск по коду ПВХ
		Возврат ПланыВидовХарактеристик.уатПраваИНастройки.НайтиПоКоду(Право);
		
	Иначе Возврат ПланыВидовХарактеристик.уатПраваИНастройки.ПустаяСсылка();
		
	КонецЕсли;
КонецФункции

// Получить значение права по имени или значению
// Параметры:
//	ЗначенияПрав - список прав (типа соответствие), в котором надо произвести  
//	  поиск значения конкретного права (в этот параметр обычно будет передаваться 
//    глобальная переменная "глПраваУАТ", в которой кэшируются права пользователя)
//	Право - строка с именем или ссылка на ПВХ ПраваИНастройки искомого права
// Возвращаемое значение:   значение запрошенного права 
Функция уатПраво(Право, ЗначенияПрав = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	#Если Клиент Тогда
		Если ЗначенияПрав = Неопределено Тогда
			ЗначенияПрав = Обработки.уатЗащита.Создать().Права;
		КонецЕсли; 
	#КонецЕсли
	
	Если НЕ (ЗначенияПрав = Неопределено) Тогда
		// Если это дополнительное право доступа справочников или документов
		Если (ТипЗнч(Право) = Тип("Строка")) И Найти(Право, "Значения Право доступа") > 0 Тогда
			Возврат ЗначенияПрав[Право];
		КонецЕсли;
		// кеш с правами передан, попытаемся получить нужное право из него напрямую.
		ПравоСсылка = уатПолучитьСсылкуПВХПравИНастроек(Право);
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПравоСсылка) Тогда
			// Такого права нет в системе - явная ошибка. Нужен специалист
			Сообщить("Неизвестное право: " + Право, СтатусСообщения.Важное);
		Иначе
			Результат = ЗначенияПрав[ПравоСсылка];
		КонецЕсли;
	Иначе
		// Кэш прав не передан (вероятно мы на сервере), значит придется запрашивать данные из БД
		// Момент тонкий - чтобы не писать разные функции получения прав в кэш
		// и точечного получения, вызовем стандартную функцию с фильтром по праву.
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
		// Получаем ссылку на ПВХ по ее имени
		ПравоСсылка = уатПолучитьСсылкуПВХПравИНастроек(Право);
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПравоСсылка) Тогда
			// Такого права нет в системе - явная ошибка. Нужен специалист
			Сообщить("Неизвестное право: " + Право, СтатусСообщения.Важное);
			//Результат = Неопределено;
		Иначе
			Результат = уатПолучитьПраваИНастройкиПользователя(Пользователь, ПравоСсылка);
		КонецЕсли;
	КонецЕсли;
	// 
	Возврат(Результат);
	
КонецФункции

// Получает текущие значение прав и настроек для пользователя
// из регистра ПраваИНастройки. Кроме пользователя так же может фигурировать
// подразделение, организация, компания (пустая ссылка)
// Объект - ссылка на пользователя (или другой объект) для которого собрать права
// ТолькоЭтоПраво - ссылка на элемент ПВХ, если задан то накладывается фильтр для
// получения значения только именно этого права, по умолчанию НЕОПРЕДЕЛЕНО (все права)
// Возвращаемое значение: -Соответствие (в ключе ссылка на элемент ПВХ, а в значении оно и есть)
// 						   если параметр ТолькоЭтоПраво был не задан (неопределен), 
//						  -иначе возвращается текущее значение запрошенного права
// для группы прав доступа к справочникам и документам формируются записи соответствия вида:
// Ключ: "Значения <Имя права>"
// Значение: Соответствие, где ключ - значение доступа, значение - флаг доступа
// Примеры использования:  
//   Получение всего набора прав пользователя:
//   	глПраваУАТ = уатПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.ТекущийПользователь);
//   Получение одного права:
//   	Если обПолучитьПраваИНастройкиПользователя(ПараметрыСеанса.ТекущийПользователь,"ПроведениеЗаднимЧислом") Тогда
Функция уатПолучитьПраваИНастройкиПользователя(Объект, Знач ТолькоЭтоПраво = Неопределено) Экспорт
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланВидовХарактеристикПраваИНастройки.Ссылка,
	|	ПланВидовХарактеристикПраваИНастройки.ТипЗначения,
	|	ПланВидовХарактеристикПраваИНастройки.Назначение,
	|	ПланВидовХарактеристикПраваИНастройки.ЗначениеПоУмолчанию,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаКомпании,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаОрганизации,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаПодразделения,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаПользователя,
	|	РегистрСведенийПраваИНастройки1.Значение КАК ЗначениеПользователь,
	|	РегистрСведенийПраваИНастройки2.Значение КАК ЗначениеОрганизация,
	|	РегистрСведенийПраваИНастройки3.Значение КАК ЗначениеПодразделение,
	|	РегистрСведенийПраваИНастройки4.Значение КАК ЗначениеКомпания
	|ИЗ
	|	ПланВидовХарактеристик.уатПраваИНастройки КАК ПланВидовХарактеристикПраваИНастройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПраваИНастройки КАК РегистрСведенийПраваИНастройки1
	|		ПО ПланВидовХарактеристикПраваИНастройки.Ссылка = РегистрСведенийПраваИНастройки1.ПравоНастройка
	|			И (ВЫБОР
	|				КОГДА (РегистрСведенийПраваИНастройки1.ПравоНастройка.Родитель = &ГруппаПВХНастройкаДоступностиСправочники) ИЛИ (РегистрСведенийПраваИНастройки1.ПравоНастройка.Родитель = &ГруппаПВХНастройкаДоступностиДокументы)
	|					ТОГДА РегистрСведенийПраваИНастройки1.Объект = &ТекущийПользователь
	|				ИНАЧЕ РегистрСведенийПраваИНастройки1.Объект = &Пользователь
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПраваИНастройки КАК РегистрСведенийПраваИНастройки2
	|		ПО ПланВидовХарактеристикПраваИНастройки.Ссылка = РегистрСведенийПраваИНастройки2.ПравоНастройка
	|			И (РегистрСведенийПраваИНастройки2.Объект = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПраваИНастройки КАК РегистрСведенийПраваИНастройки3
	|		ПО (РегистрСведенийПраваИНастройки3.Объект = &Подразделение)
	|			И ПланВидовХарактеристикПраваИНастройки.Ссылка = РегистрСведенийПраваИНастройки3.ПравоНастройка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПраваИНастройки КАК РегистрСведенийПраваИНастройки4
	|		ПО ПланВидовХарактеристикПраваИНастройки.Ссылка = РегистрСведенийПраваИНастройки4.ПравоНастройка
	|			И (РегистрСведенийПраваИНастройки4.Объект = НЕОПРЕДЕЛЕНО)
	|ГДЕ";
	Если ТолькоЭтоПраво = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ПланВидовХарактеристикПраваИНастройки.ЭтоГруппа = ЛОЖЬ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	ПланВидовХарактеристикПраваИНастройки.Ссылка = &Право";
		Если ТипЗнч(ТолькоЭтоПраво) <> Тип("ПланВидовХарактеристикСсылка.уатПраваИНастройки") Тогда
			ТолькоЭтоПраво = уатПолучитьСсылкуПВХПравИНастроек(ТолькоЭтоПраво);
		КонецЕсли;
		Запрос.УстановитьПараметр("Право", ТолькоЭтоПраво);
	КонецЕсли; 
	
	Если ТипЗнч (Объект) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь		= Объект;
		ТекущийПользователь		= Пользователь;
		Подразделение			= Неопределено;
		Организация				= Неопределено;
	ИначеЕсли Метаданные.Справочники.Найти("ПодразделенияОрганизаций") <> Неопределено И ТипЗнч (Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Пользователь			= Неопределено;
		ТекущийПользователь		= Неопределено;
		Подразделение			= Объект;
		Организация				= Неопределено;
	ИначеЕсли ТипЗнч (Объект) = Тип("СправочникСсылка.Организации") Тогда
		Пользователь			= Неопределено;
		ТекущийПользователь		= Неопределено;
		Подразделение			= Неопределено;
		Организация				= Объект;
	Иначе	// Получим для компании
		Пользователь			= Неопределено;
		ТекущийПользователь		= Неопределено;
		Подразделение			= Неопределено;
		Организация				= Неопределено;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.УстановитьПараметр("ГруппаПВХНастройкаДоступностиСправочники",	уатПолучитьСсылкуПВХПравИНастроек("ПРАВА ДОСТУПА СПРАВОЧНИКОВ"));
	Запрос.УстановитьПараметр("ГруппаПВХНастройкаДоступностиДокументы",		уатПолучитьСсылкуПВХПравИНастроек("ПРАВА ДОСТУПА ДОКУМЕНТОВ"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Перебор полученных значений и формирование соответствия прав
	Пока Выборка.Следующий() Цикл
		// Попробуем получить значение права в соответствии с назначением
		Значение = Неопределено;
		Если Выборка.НастройкаКомпании И Объект = Неопределено Тогда
        	Значение = Выборка.ЗначениеКомпания;
        ИначеЕсли Выборка.НастройкаОрганизации И ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
            Значение = Выборка.ЗначениеОрганизация;
        ИначеЕсли Выборка.НастройкаПодразделения И Метаданные.Справочники.Найти("ПодразделенияОрганизаций") <> Неопределено И ТипЗнч(Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
            Значение = Выборка.ЗначениеПодразделение;
        ИначеЕсли Выборка.НастройкаПользователя И ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
            Значение = Выборка.ЗначениеПользователь;
		Иначе
			// Не указано назначение настройки - это аварийная ситуация, оставлено для совместимости
			// однако попробуем получить значение по порядку старшинства: Пользователь-Подразделение-Организация
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.ЗначениеПользователь) Тогда
				Значение = Выборка.ЗначениеПользователь;
			ИначеЕсли НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.ЗначениеПодразделение) Тогда
				Значение = Выборка.ЗначениеПодразделение;
			ИначеЕсли НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.ЗначениеОрганизация) Тогда
				Значение = Выборка.ЗначениеОрганизация;
			КонецЕсли; 
		КонецЕсли;
		
		// Если мы не смогли получить значения настройки, берем по умолчанию
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Значение) Тогда
			Если Значение = NULL ИЛИ Значение = Неопределено Тогда
				// Если не NULL, то это может быть "правильная" запись с пустым значением,
				// которая не должна заменяться значением по умолчанию.
				Значение = Выборка.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		// Если и по умолчанию ничего нет, то типизируем (на всякий случай)
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Значение) Тогда
			Значение = Выборка.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЕсли;
		
		Результат.Вставить(Выборка.Ссылка, Значение);
	КонецЦикла;
	
	// Запрос для кэширования дополнительных настроек доступа справочников и документов
	// из регистров сведений ДоступКСправочникам и ДоступКДокументам
	Если  (ТолькоЭтоПраво = Неопределено) Тогда
		Текст = "ВЫБРАТЬ
		|	ДоступКСправочникам.Объект КАК Объект,
		|	ДоступКСправочникам.ДоступЕсть КАК ДоступЕсть,
		|	ДоступКСправочникам.Право КАК Право
		|ИЗ
		|	РегистрСведений.уатПраваИНастройки КАК ПраваИНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатДоступКСправочникам КАК ДоступКСправочникам
		|		ПО ПраваИНастройки.Объект = ДоступКСправочникам.Пользователь
		|			И ПраваИНастройки.ПравоНастройка = ДоступКСправочникам.Право
		|ГДЕ
		|	ПраваИНастройки.Объект = &Пользователь
		|	И ПраваИНастройки.Значение = &ВыбЗначенияПравСправочников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоступКДокументам.Объект,
		|	ДоступКДокументам.ДоступЕсть,
		|	ДоступКДокументам.Право
		|ИЗ
		|	РегистрСведений.уатПраваИНастройки КАК ПраваИНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатДоступКДокументам КАК ДоступКДокументам
		|		ПО ПраваИНастройки.Объект = ДоступКДокументам.Пользователь
		|			И ПраваИНастройки.ПравоНастройка = ДоступКДокументам.Право
		|ГДЕ
		|	ПраваИНастройки.Объект = &Пользователь
		|	И ПраваИНастройки.Значение В(&ВыбЗначенияПравДокументов)
		|ИТОГИ
		|	МАКСИМУМ(ДоступЕсть)
		|ПО
		|	Право,
		|	Объект";
		
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("ВыбЗначенияПравСправочников", Перечисления.уатВидыПравДляСправочников.РедактированиеПоГруппам);
		масВидыПравДляДокументов = Новый Массив;
		масВидыПравДляДокументов.Добавить(Перечисления.уатВидыПравДляДокументов.РедактированиеПоПользователям); 
		Запрос.УстановитьПараметр("ВыбЗначенияПравДокументов", масВидыПравДляДокументов);
		РезультатПраво = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Перебор полученных значений и формирование соответствия прав
		Пока РезультатПраво.Следующий() Цикл
			РезультатОбъект = РезультатПраво.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СОбъектыПрава = Новый Соответствие;
			Пока РезультатОбъект.Следующий() Цикл
				СОбъектыПрава.Вставить(РезультатОбъект.Объект, РезультатОбъект.ДоступЕсть);
			КонецЦикла;
			Результат.Вставить("Значения " + РезультатПраво.Право.Наименование, СОбъектыПрава);
		КонецЦикла;
		Возврат Результат;
	Иначе
		Возврат Результат[ТолькоЭтоПраво];
	КонецЕсли;
	
КонецФункции // уатПолучитьПраваИНастройкиПользователя()


// Проверяет документы на право редактирования, чтения или доступности текущего
// вида документа, а так же на право, если оно установлено, редактирования или
// чтения объекта текущего вида документа, по автору или подразделению компании
//Параметры:
//  Объект - текущий ДокументОбъект. Обязательный для заполнения.
//  Отказ - результат работы процедуры, т.е. определяет текущую доступность данного объекта
//  ЭтаФорма - форма текущего объекта. Передается для проверки на редактирование или чтение 
//  объекта и соответственно для разрешения или запрещения редактирования формы объекта.
//  ЗначенияПрав - Кеш прав текущего пользователя. тип соответствие.
Процедура уатПроверкаПраваДоступаКДокументам(Объект, Отказ, ЭтаФорма = Неопределено, ЗначенияПрав = Неопределено) Экспорт
	
	//если уже отказ, то не проверяем
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = уатПраво("Право доступа " + Объект.Метаданные().Имя, ЗначенияПрав);
	
	Если Результат = Перечисления.уатВидыПравДляДокументов.РедактированиеВсе Тогда
		//если редактируем, то ничего не делаем
	ИначеЕсли Результат = Перечисления.уатВидыПравДляДокументов.НетДоступа Тогда
		Сообщить("Нет доступа к объектам вида "  + Объект.Метаданные().Представление(), СтатусСообщения.Важное); 
		Отказ = Истина;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляДокументов.ЧтениеВсе тогда
		// ЧТЕНИЕ
		Сообщить("Нет прав на редактирование объектов вида "  + Объект.Метаданные().Представление(), СтатусСообщения.Важное); 	
		// проверка на редактирование или просмотр объекта
		Если ЭтаФорма = Неопределено Тогда
			Отказ = Истина;
		Иначе
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляДокументов.РедактированиеПоПользователям Тогда
		//получаем значения доступа
		Если НЕ Объект.ЭтоНовый() И ПараметрыСеанса.ТекущийПользователь <> Объект.Ответственный Тогда
			Результат = Неопределено;
			ЗначениеДоступа = уатПраво("Значения Право доступа " + Объект.Метаданные().Имя, ЗначенияПрав);
			Если ЗначениеДоступа <> Неопределено Тогда
				Результат = ЗначениеДоступа[ПараметрыСеанса.ТекущийПользователь];
			КонецЕсли;
			Если (Результат = Неопределено) ИЛИ (Не Результат) Тогда
				Сообщить("Нет прав на редактирование объектов вида "  + Объект.Метаданные().Представление() + " по автору: " + Объект.Ответственный, СтатусСообщения.Важное);
				Если ЭтаФорма = Неопределено Тогда
					Отказ = Истина;
				Иначе
					ЭтаФорма.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе //можно все
		
	КонецЕсли;
КонецПроцедуры

// Проверяет справочники на право редактирования, чтения или доступности текущего
// вида справочника, а так же на право, если оно установлено, редактирования или
// чтения объекта текущего вида справочника, по ближайшему родителю, на которое
// установлено данное право  
//Параметры:
//  Объект - текущий СправочникОбъект. Обязательный для заполнения.
//  Отказ - результат работы процедуры, т.е. определяет текущую доступность данного объекта
//  ЭтаФорма - форма текущего объекта. Передается для проверки на редактирование или чтение 
//  объекта при открытии формы.
//  ЗначенияПрав - Соответствие, Кеш прав текущего пользователя.
Процедура уатПроверкаПраваДоступаКСправочникам(Объект, Отказ, ЭтаФорма = Неопределено, ЗначенияПрав = Неопределено) Экспорт
	
	//если уже Отказ, то и проверять не надо
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//если не справочник, то и делать нечего
	Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда	
		Возврат;
	КонецЕсли;
	
	Результат = уатПраво("Право доступа " + Объект.Метаданные().Имя, ЗначенияПрав);
	
	Если Результат = Перечисления.уатВидыПравДляСправочников.Редактирование Тогда
		// РЕДАКТИРОВАНИЕ 
	ИначеЕсли Результат = Перечисления.уатВидыПравДляСправочников.НетДоступа Тогда
		Сообщить("Нет доступа к объектам вида "  + Объект.Метаданные().Представление(), СтатусСообщения.Важное); 
		Отказ=Истина;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляСправочников.Чтение Тогда
		// ЧТЕНИЕ
		Сообщить("Нет прав на редактирование объектов вида "  + Объект.Метаданные().Представление(), СтатусСообщения.Важное); 	
		// проверка на редактирование или просмотр объекта
		Если ЭтаФорма = Неопределено Тогда 
			Отказ = Истина; 
		Иначе 
			ЭтаФорма.ТолькоПросмотр = Истина; 
		КонецЕсли;
	ИначеЕсли Результат = Перечисления.уатВидыПравДляСправочников.РедактированиеПоГруппам Тогда
		СоответствиеГруппДоступа = уатПраво("Значения Право доступа " + Объект.Метаданные().Имя, ЗначенияПрав);
		Если СоответствиеГруппДоступа = Неопределено Тогда 
			// ЧТЕНИЕ
			Сообщить("Нет прав на редактирование объектов вида "  + Объект.Метаданные().Представление(), СтатусСообщения.Важное);
			// проверка на редактирование или просмотр объекта
			Если ЭтаФорма = Неопределено Тогда 
				Отказ = Истина; 
			Иначе 
				ЭтаФорма.ТолькоПросмотр  =Истина; 
			КонецЕсли;
		Иначе //если не в корне, то определяем по дереву доступа
			Если (Объект.ЭтоГруппа) и (НЕ Объект.Ссылка.Пустая())  Тогда
				Родитель = Объект.Ссылка;
			Иначе
				Родитель = Объект.Родитель;
			КонецЕсли;
			//если родитель пустой, то уровня нет
			Попытка Уровень = Родитель.Уровень() Исключение Уровень = 0 КонецПопытки;
			//получаем для текущего уровня
			ЗначениеДоступа = СоответствиеГруппДоступа[Родитель];
			// Перебираем всех родителей объекта, пока не находим
			// любое значение доступности
			Для Ном=1 по Уровень Цикл
				Если ЗначениеДоступа <> Неопределено Тогда
					Прервать;
				КонецЕсли;
				Родитель = Родитель.Родитель;
				ЗначениеДоступа = СоответствиеГруппДоступа[Родитель];
			КонецЦикла;
			
			//или нашли значение доступа, или вышли из цикла, ничего не найдя
			Если (ЗначениеДоступа = Неопределено) ИЛИ (НЕ ЗначениеДоступа) Тогда
				Если Родитель.Пустая() Тогда
					стрРодитель = "корня"
				Иначе
					стрРодитель = "группы " + СокрЛП(Родитель);
				КонецЕсли;
				Сообщить("Нет прав на редактирование " + стрРодитель + " объектов вида "  + Объект.Метаданные().Представление(), СтатусСообщения.Важное);
				// проверка на редактирование или просмотр объекта
				Если ЭтаФорма = Неопределено Тогда 
					Отказ = Истина; 
				Иначе 
					ЭтаФорма.ТолькоПросмотр = Истина; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//если значения права нет, то можно редактировать
КонецПроцедуры

 // Процедура записывает значение для передаваемого объекта и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого записывается значение
//  Значение     - значение
//
// Возвращаемое значение:
//  Нет
//
Процедура уатУстановитьЗначение(Объект, Настройка, Значение) Экспорт

	МенеджерЗаписи = РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.ПравоНастройка = Настройка;
	МенеджерЗаписи.Значение = Значение;
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры // ПолучитьЗначениеПоУмолчанию()