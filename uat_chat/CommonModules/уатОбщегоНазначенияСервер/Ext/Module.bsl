// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриСозданииНаСервере" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ВидОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ПараметрОбъектКопирования 	   - указывает что документ создан копированием
//  ПараметрОснование 			   - ссылка на документ основание
Процедура ЗаполнитьШапкуДокумента(Объект,
	ВидОперации = "",
	ПараметрЗначениеКопирования = Неопределено,
	ПараметрОснование = Неопределено,
	СостояниеДокумента,
	КартинкаСостоянияДокумента,
	РазрешеноПроведение,
	ЗначенияЗаполнения = Неопределено) Экспорт
	
	Пользователь = глЗначениеПеременной("глТекущийПользователь");
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	
	Если МетаданныеДокумента.Имя = "ЧекККМ"
	 ИЛИ МетаданныеДокумента.Имя = "ЧекККМВозврат" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если (НЕ ЗначениеЗаполнено(ПараметрЗначениеКопирования)) Тогда
			
			Если ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) 
				И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ЗначенияЗаполнения.Организация))
				И НЕ (ЗначениеЗаполнено(ПараметрОснование)
				И ЗначениеЗаполнено(Объект.Организация)) Тогда
				ЗначениеНастройки = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
				Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
					Если Объект.Организация <> ЗначениеНастройки Тогда
						Объект.Организация = ЗначениеНастройки;
					КонецЕсли;
				Иначе
					Объект.Организация = Справочники.Организации.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента)
				И НЕ (ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Ответственный") И ЗначениеЗаполнено(ЗначенияЗаполнения.Ответственный))
				И НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойОтветственный");
			КонецЕсли;
			
			Если ЕстьРеквизитДокумента("ВидЦен", МетаданныеДокумента)
			   И ЗначениеЗаполнено(Объект.ВидЦен) 
			   И НЕ ЗначениеЗаполнено(ПараметрОснование) Тогда
				Если ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
					Объект.СуммаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
						
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента)

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Пользователь - текущий пользователь программы
//  Настройка    - признак, для которого возвращается значение по умолчанию
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка) Экспорт

	//Возврат Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";

	Выборка = Запрос.Выполнить().Выбрать();

	ПустоеЗначение = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();

	Если Выборка.Количество() = 0 Тогда
		
		Возврат ПустоеЗначение;

	ИначеЕсли Выборка.Следующий() Тогда

		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;

	Иначе
		Возврат ПустоеЗначение;

	КонецЕсли;

КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()


///////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ЦЕНООБРАЗОВАНИЕ

// Возвращает курсы валют на дату.
//
// Параметры:
//  Валюта       - СправочникСсылка.Валюты - Валюта (элемент справочника "Валюты")
//  ДатаКурса    - Дата - дата, на которую следует получить курс.
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс        - Число - курс валюты,
//   Кратность   - Число - кратность валюты.
//
Функция ПолучитьКурсыВалют(ВалютаНач, ВалютаКон, ДатаКурса) Экспорт
	
	СтруктураНач = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаНач));
	СтруктураКон = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ВалютаКон));
	
	СтруктураКон.Курс = ?(
		СтруктураКон.Курс = 0,
		1,
		СтруктураКон.Курс
	);
	СтруктураКон.Кратность = ?(
		СтруктураКон.Кратность = 0,
		1,
		СтруктураКон.Кратность
	);
	СтруктураКон.Вставить("КурсНач", ?(СтруктураНач.Курс      = 0, 1, СтруктураНач.Курс));
	СтруктураКон.Вставить("КратностьНач", ?(СтруктураНач.Кратность = 0, 1, СтруктураНач.Кратность));
	
	Возврат СтруктураКон;
	
КонецФункции // ПолучитьКурсыВалют()

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения.
//
// Параметры:
//  Сумма        - Число - сумма НДС
//  СуммаВключаетНДС - Булево - признак включения НДС в сумму
//  СтавкаНДС    - СправочникСсылка.СтавкиНДС - ссылка на ставку НДС.
//
// Возвращаемое значение:
//  Число        - пересчитанная сумма НДС.
//
Функция ПересчитатьСуммуПриИзмененииФлаговНДС(Сумма, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Ставка = СтавкаНДС.Ставка;
	
	Если СуммаВключаетНДС Тогда
		
		Сумма = (Сумма * (100 + Ставка)) / 100;
		
	Иначе
		
		Сумма = (Сумма * 100) / (100 + Ставка);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьСуммуПриИзмененииФлаговНДС()

// Выполняет пересчет документа после изменений в форме "Цены и валюта".
//
// Возвращаемое значение:
//  Число        - Полученная цена номенклатуры по прайсу.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) * ЕСТЬNULL(&Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&ДатаОбработки,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦенКонтрагента = &ВидЦенКонтрагента) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсВалютыВидЦен.Валюта,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаОбработки",	 	СтруктураДанных.ДатаОбработки);
	Запрос.УстановитьПараметр("Номенклатура",	 	СтруктураДанных.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",  	СтруктураДанных.Характеристика);
	Запрос.УстановитьПараметр("Коэффициент",	 	СтруктураДанных.Коэффициент);
	Запрос.УстановитьПараметр("ВалютаДокумента", 	СтруктураДанных.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	СтруктураДанных.ВидЦенКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	Пока Выборка.Следующий() Цикл
		
		Цена = Выборка.Цена;
		
		// Учитываем: сумма включает НДС.
		Если (СтруктураДанных.СуммаВключаетНДС И НЕ Выборка.ЦенаВключаетНДС)
		 ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И Выборка.ЦенаВключаетНДС) Тогда
			Цена = ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтруктураДанных.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
		
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;

	Сообщение.УстановитьДанные(ЭтотОбъект);
	Сообщение.Сообщить();

	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()


///////////////////////////////////////////////////////////////////////////////////////////////////
// КОНТРАГЕНТЫ И ДОГОВОРЫ

Функция ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, СтруктураПараметровДляПолученияДоговора) Экспорт
	ЗначенияДляЗаполнения = Новый Структура();
	ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(ДанныеДляЗаполнения.Организация, ДанныеДляЗаполнения.Контрагент, СтруктураПараметровДляПолученияДоговора);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЗначенияДляЗаполнения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	Иначе
		ЗначенияДляЗаполнения.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	Возврат ЗначенияДляЗаполнения;
КонецФункции

//Функция возвращает таблицу значений, содержащую перечень РАБОТАЮЩИХ сотрудников
//Поиск осуществяется по Табельному номеру или по Наименованию
//Используется при "Быстром выборе" в документах. Заменяет стандартную обработку
//Пример: "Дополнительные начисления", "Ремонтный лист"
Функция ПодборТолькоРаботающихСотрудников(Текст) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатСотрудники.Ссылка
	               |ИЗ
	               |	Справочник.уатСотрудники КАК уатСотрудники
	               |ГДЕ
	               |	(уатСотрудники.Наименование ПОДОБНО &Наименование + ""%""
	               |			ИЛИ уатСотрудники.Код ПОДОБНО ""%"" + &Код + ""%"")
	               |	И уатСотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |	И уатСотрудники.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Код", Текст);
	Запрос.УстановитьПараметр("Наименование", Текст);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат	РезультатЗапроса;
	
КонецФункции	
