
//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ ДЛЯ МЕХАНИЗМА ДОПРОЛНИТЕЛЬНОЙ ИНФОРМАЦИИ

// Открывает переданный файл на диске с учетом типа файлов. Файлы, с которыми 
// может работать 1С:Предприятие открываются в 1С:Предприятии. Остальные файлы
// пытаются открыться зарегистрированным для них в системе приложением.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура уатОткрытьФайлДополнительнойИнформации(ИмяКаталога, ИмяФайла) Экспорт

	ПолноеИмяФайла = уатПолучитьИмяФайла(ИмяКаталога, ИмяФайла);
	РасширениеФайла = Врег(уатПолучитьРасширениеФайла(ИмяФайла));

	Если РасширениеФайла = "MXL" Тогда

		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
		ТабличныйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));

	ИначеЕсли РасширениеФайла = "TXT" Тогда

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
		ТекстовыйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));

	ИначеЕсли РасширениеФайла = "EPF" Тогда

		ВнешняяОбработка = ВнешниеОбработки.Создать(ПолноеИмяФайла);
		ВнешняяОбработка.ПолучитьФорму().Открыть();

	Иначе

		ЗапуститьПриложение(ПолноеИмяФайла);

	КонецЕсли;

КонецПроцедуры  //уатОткрытьФайлДополнительнойИнформации()

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция уатПолучитьИмяФайла(ИмяКаталога, ИмяФайла) Экспорт

	Возврат ИмяКаталога + ?(ПустаяСтрока(ИмяФайла), "", "\" + ИмяФайла);

КонецФункции // уатПолучитьИмяФайла()

// Формирует строку фильтра для диалога выбора файла с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора файла.
//
Функция уатПолучитьФильтрФайлов() Экспорт

	Возврат "Все файлы (*.*)|*.*|"
	      + "Документ Microsoft Word (*.doc)|*.doc|"
	      + "Документ Microsoft Excell (*.xls)|*.xls|"
	      + "Документ Microsoft PowerPoint (*.ppt)|*.ppt|"
	      + "Документ Microsoft Visio (*.vsd)|*.vsd|"
	      + "Письмо электронной почты (*.msg)|*.msg|"
	      + "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"
	      + "Текстовый документ (*.txt)|*.txt|"
	      + "Табличный документ (*.mxl)|*.mxl|";

КонецФункции // уатПолучитьФильтрФайлов()

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора картинки.
//
Функция ПолучитьФильтрИзображений() Экспорт

	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	      + "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	      + "Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
		  + "Формат pdf  (*.pdf)|*.pdf|"
	      + "Формат tiff (*.tif)|*.tif|"
	      + "Формат gif (*.gif)|*.gif|"
	      + "Формат png (*.png)|*.png|"
	      + "Формат icon (*.ico)|*.ico|"
	      + "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";

КонецФункции // уатПолучитьФильтрИзображений()

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция уатПолучитьРасширениеФайла(ИмяФайла) Экспорт

	ПозицияПоследнейТочки = 0;
	РасширениеФайла = ИмяФайла;

	Пока 1 = 1 Цикл
	
		ПозицияПоследнейТочки = Найти(РасширениеФайла, ".");

		Если ПозицияПоследнейТочки = 0 Тогда

			Прервать;

		Иначе

			РасширениеФайла = Сред(РасширениеФайла, ПозицияПоследнейТочки + 1)

		КонецЕсли;

	КонецЦикла;

	Возврат ?(РасширениеФайла = ИмяФайла, "", РасширениеФайла);

КонецФункции // уатПолучитьРасширениеФайла()

// Формирует имя каталога для сохранения/чтения файлов. Для различных типов объектов возможны 
// различные алгоритмы определения каталога.
//
// Параметры
//  ОбъектФайла  – Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//
// Возвращаемое значение:
//   Строка – каталог файлов для указанного объекта и пользователя.
//
Функция уатПолучитьИмяКаталога(ТекущийПользователь) Экспорт

	// Получим рабочий каталог из свойств пользователя.
	РабочийКаталог = уатОбщегоНазначенияТиповые.уатПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");

	// Если рабочий каталог не указан получим каталог временных файлов программы
	Если ПустаяСтрока(РабочийКаталог) Тогда
		РабочийКаталог = КаталогВременныхФайлов();
	КонецЕсли;

	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если Прав(РабочийКаталог, 1) = "\" Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;

	Возврат РабочийКаталог;

КонецФункции // уатПолучитьИмяКаталога()

// Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Функция уатПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт

	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Ответ = Вопрос("Указанный каталог не существует. Создать каталог?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			СоздатьКаталог(ИмяКаталога);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

КонецФункции // уатПроверитьСуществованиеКаталога()

// Позволяет пользователю выбрать каталог на диске.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая начальный путь к каталогу на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция уатВыбратьКаталог(ИмяКаталога) Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Укажите каталог";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = ИмяКаталога;

	Если Диалог.Выбрать() Тогда
		ИмяКаталога = Диалог.Каталог;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Сохраняет файл на диске.
//
// Параметры
//  Хранилище    – ХранилищеЗначения, которое содержит объект типа 
//                 ДвоичныеДанные с файлом для записи на диск.
//  ИмяФайла     – Строка, содержащая полное имя файла.
//  ТолькоЧтение – Булево, признак установки записываемому файлу атрибута ТолькоЧтение.
//  ВопросОПерезаписи - запрашивать подтверждение о перезаписи файла
//  СпособПерезаписи – Строка. Параметр определяет способ перезаписи существующих
//                 файлов на диске. В зависимости от пришедшего параметра выдается или
//                 не выдается запрос на перезапись файлов. Может устанавливаться в теле
//                 функции, если это необходимо. Принимаемые значения:
//                 "" (пустая строка) - это означает, что диалог еще ни разу не задавался
//                 и при наличии существующего файла будет выдан диалог запроса перезаписи.
//                 ДА - предыдущий файл был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 НЕТ - предыдущий файл не был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 ДАДЛЯВСЕХ - предыдущий файл был перезаписан, и все последующие тоже 
//                 надо перезаписывать.
//                 НЕТДЛЯВСЕХ - предыдущий файл не был перезаписан, и все последующие тоже 
//                 не надо перезаписывать.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция уатСохранитьФайлНаДиске(Хранилище, ИмяФайла, ТолькоЧтение, СпособПерезаписи, ВопросОПерезаписи = Истина, ИмяСправочника = "уатХранилищеДополнительнойИнформации") Экспорт

	Попытка

		ФайлНаДиске = Новый Файл(ИмяФайла);
		КаталогНаДиске = Новый Файл(ФайлНаДиске.Путь);

		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ФайлНаДиске.Путь);
		КонецЕсли;

		Если ФайлНаДиске.Существует() И ВопросОПерезаписи = Истина Тогда

			Если СпособПерезаписи = ""
			 ИЛИ Врег(СпособПерезаписи) = "ДА"
			 ИЛИ Врег(СпособПерезаписи) = "НЕТ" Тогда

				ФормаЗапросаПерезаписиФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаЗапросаПерезаписиФайлов");
				ФормаЗапросаПерезаписиФайлов.ТекстПредупреждения = 
				    "На локальном диске уже существует файл:
				    |" + ИмяФайла + "
				    |Перезаписать имеющийся файл?";
				СпособПерезаписи = ФормаЗапросаПерезаписиФайлов.ОткрытьМодально();

				Если СпособПерезаписи = Неопределено
				 ИЛИ Врег(СпособПерезаписи) = "НЕТ"
				 ИЛИ Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда
					Возврат Ложь;
				КонецЕсли;

			ИначеЕсли Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда

				Возврат Ложь;

			КонецЕсли;

			// Если существующему файлу установлено ТолькоЧтение, отменим эту установку.
			Если ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;

		КонецЕсли;

		// Остались случаи когда:
		// - пользователь ответил Да или ДаДляВсех в текущем диалоге
		// - способ перезаписи уже пришел со значением ДаДляВсех
		Если ТипЗнч(Хранилище) <> Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = Хранилище.Получить();
		Иначе
			ДвоичныеДанные = Хранилище;
		КонецЕсли; 
		ДвоичныеДанные.Записать(ИмяФайла);
		ФайлНаДиске.УстановитьТолькоЧтение(ТолькоЧтение);

	Исключение

		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;

	КонецПопытки;

	Возврат Истина;

КонецФункции // уатСохранитьФайлНаДиске()

// Проверяет наличие запрещенных в среде MS Windows символов в имени файла.
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Булево – Истина, если есть запрещенные символы, Ложь, если нет.
//
Функция уатЕстьЗапрещенныеСимволыИмени(ИмяФайла) Экспорт

	Если Найти(ИмяФайла,  "\") > 0
	 ИЛИ Найти(ИмяФайла,  "/") > 0
	 ИЛИ Найти(ИмяФайла,  ":") > 0
	 ИЛИ Найти(ИмяФайла,  "*") > 0
	 ИЛИ Найти(ИмяФайла,  "&") > 0
	 ИЛИ Найти(ИмяФайла, """") > 0
	 ИЛИ Найти(ИмяФайла,  "<") > 0
	 ИЛИ Найти(ИмяФайла,  ">") > 0
	 ИЛИ Найти(ИмяФайла,  "|") > 0 Тогда

		Возврат Истина;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции // уатЕстьЗапрещенныеСимволыИмени()

// Проверяет возможность изменения расширения в имени файла. Выдает запрос пользователю
// на смену расширения.
//
// Параметры
//  ТекущееРасширение – Строка, содержащая текущее расширение файла, до изменения.
//  НовоеРасширение – Строка, содержащая новое расширение файла, после изменения.
//
// Возвращаемое значение:
//   Булево – Истина, если пользователь запретил изменение расширения, Ложь, если разрешил.
//
Функция уатНельзяИзменятьРасширение(ТекущееРасширение, НовоеРасширение) Экспорт

	Если Не ПустаяСтрока(ТекущееРасширение) И Не НовоеРасширение = ТекущееРасширение Тогда

		Ответ = Вопрос("Вы действительно хотите измерить расширение", РежимДиалогаВопрос.ДаНет);

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Возврат Ложь;

		Иначе

			Возврат Истина;

		КонецЕсли;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции // уатНельзяИзменятьРасширение()

// Создает и устанавливает реквизиты диалога выбора фала.
//
// Параметры
//  МножественныйВыбор – Булево, признак множественного выбора.
//  НачальныйКаталог – Строка, содержащая начальный каталог выбора файла.
//
// Возвращаемое значение:
//   ДиалогВыбораФайлов – созданный диалог.
//
Функция уатПолучитьДиалогВыбораФайлов(МножественныйВыбор, НачальныйКаталог = "") Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = НачальныйКаталог;
	Диалог.Заголовок = "Выберите файл...";
	Диалог.Фильтр = уатПолучитьФильтрФайлов();
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = МножественныйВыбор;

	Возврат Диалог;

КонецФункции // уатПолучитьДиалогВыбораФайлов()

// Выбор файлов пользователем на диске и добавление их объекту.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВидДанных    - ПеречислениеСсылка.ВидыДополнительнойИнформацииОбъектов содержащая вид
//                 дополнительной информации объекта.
//
Процедура уатДобавитьФайлы(ОбъектФайла, ТекущийПользователь, ВидДанных, ИмяСправочника = "уатХранилищеДополнительнойИнформации") Экспорт

	Если Не ОбъектФайла = Неопределено И ОбъектФайла.Пустая() Тогда
		Предупреждение("Необходимо записать объект, которому принадлежит файл.");
		Возврат;
	КонецЕсли;

	Диалог = уатПолучитьДиалогВыбораФайлов(Истина);

	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Для каждого ПолученноеИмяФайла Из Диалог.ВыбранныеФайлы Цикл

		ПолученныйФайл = Новый Файл(ПолученноеИмяФайла);
		Состояние("Добавляется файл: " + ПолученныйФайл.Имя);

		НачатьТранзакцию();
		
		Отказ = Ложь;
		
		НовыйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
		НовыйФайл.Объект = ОбъектФайла;
		НовыйФайл.ИмяФайла = ПолученныйФайл.Имя;
		Если ИмяСправочника = "уатХранилищеДополнительнойИнформации" Тогда
			НовыйФайл.ВидДанных = ВидДанных;
		КонецЕсли; 

		Попытка
			НовыйФайл.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());
			НовыйФайл.Записать();
		Исключение
			Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли; 

	КонецЦикла;

КонецПроцедуры // уатДобавитьФайлы()

// Сохранение на диск отмеченных файлов объекта.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ИмяКаталога - строка, имя каталога для сохранения файлов
//	ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВыделенныеСтроки - ВыделенныеСтроки табличного поля со справочником дополнительной
//                 информации.
//
Процедура уатСохранитьФайлы(ОбъектФайла, ТекущийПользователь, ВыделенныеСтроки, ИмяКаталога = Неопределено, ИмяСправочника = "уатХранилищеДополнительнойИнформации") Экспорт

	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ФормаСохраненияФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСохраненияФайлов");
	ФормаСохраненияФайлов.ИмяКаталога    = ИмяКаталога;
	ФормаСохраненияФайлов.ТолькоЧтение   = Ложь;

	Если ИмяКаталога = Неопределено Тогда
		ИмяКаталога = уатПолучитьИмяКаталога(ТекущийПользователь);
		ФормаСохраненияФайлов.ОткрытьКаталог = Истина;
	Иначе
		ФормаСохраненияФайлов.ОткрытьКаталог = Ложь;
	КонецЕсли; 

	СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не уатПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;

	СпособПерезаписи = "";

	Для каждого СсылкаФайл из ВыделенныеСтроки Цикл

		Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);

		ИмяФайла = уатПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, СсылкаФайл.ИмяФайла);
		уатСохранитьФайлНаДиске(СсылкаФайл.Хранилище, ИмяФайла, СтруктураПараметров.ТолькоЧтение, СпособПерезаписи);

		Если СпособПерезаписи = Неопределено Тогда
			Прервать;
		КонецЕсли; 

	КонецЦикла;

	Если СтруктураПараметров.ОткрытьКаталог Тогда
		ЗапуститьПриложение(СтруктураПараметров.ИмяКаталога);
	КонецЕсли;

КонецПроцедуры // уатСохранитьФайлы()

// Сохранение на диск отмеченных файлов объекта и их открытие.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы
//  ВопросОПерезаписи - запрашивать подтверждение о перезаписи файла
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВыделенныеСтроки - ВыделенныеСтроки табличного поля со справочником дополнительной
//                 информации.
//
Процедура уатОткрытьФайлы(ОбъектФайла, ТекущийПользователь, ВыделенныеСтроки = Неопределено, ВопросОПерезаписи = Истина) Экспорт

	Если ВыделенныеСтроки = Неопределено Тогда
		
		Если уатОтношенияСКлиентами.уатОткрытьФайлMSG(ОбъектФайла, ТекущийПользователь) Тогда
			Возврат;
		КонецЕсли; 
		
		ИмяКаталога = уатПолучитьИмяКаталога(ТекущийПользователь);
		ТолькоЧтение = Ложь;

		СпособПерезаписи = "";

		Состояние("Сохраняется файл: " + ОбъектФайла.ИмяФайла);

		ИмяФайла = уатПолучитьИмяФайла(ИмяКаталога, ОбъектФайла.ИмяФайла);
		уатСохранитьФайлНаДиске(ОбъектФайла.Хранилище, ИмяФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи);

		Если СпособПерезаписи = Неопределено Тогда
			Возврат;
		КонецЕсли;

		уатОткрытьФайлДополнительнойИнформации(ИмяКаталога, ОбъектФайла.ИмяФайла);
		
	Иначе
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		ИмяКаталога = уатПолучитьИмяКаталога(ТекущийПользователь);
		ТолькоЧтение = Ложь;

		СпособПерезаписи = "";

		Для каждого СсылкаФайл из ВыделенныеСтроки Цикл

			Если уатОтношенияСКлиентами.уатОткрытьФайлMSG(СсылкаФайл, ТекущийПользователь) Тогда
				Возврат;
			КонецЕсли; 
			
			Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);

			ИмяФайла = уатПолучитьИмяФайла(ИмяКаталога, СсылкаФайл.ИмяФайла);
			уатСохранитьФайлНаДиске(СсылкаФайл.Хранилище, ИмяФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи);

			Если СпособПерезаписи = Неопределено Тогда
				Прервать;
			КонецЕсли;

			уатОткрытьФайлДополнительнойИнформации(ИмяКаталога, СсылкаФайл.ИмяФайла);

		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // уатОткрытьФайлы()

// Получает индекс пиктограммы файла из коллекции пиктограмм в зависимости от расширения файла.
//
// Параметры
//  РасширениеФайла – Строка, содержащая расширение файла.
//
// Возвращаемое значение:
//   Число – индекс пиктограммы в коллекции.
//
Функция уатПолучитьИндексПиктограммыФайла(РасширениеФайла) Экспорт

	РасширениеФайла = Врег(РасширениеФайла);

	Если Найти(",1CD,CF,CFU,DT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 1;
	ИначеЕсли "MXL" = РасширениеФайла Тогда
		Возврат 2;
	ИначеЕсли "TXT" = РасширениеФайла Тогда
		Возврат 3;
	ИначеЕсли "EPF" = РасширениеФайла Тогда
		Возврат 4;
	ИначеЕсли Найти(",BMP,DIB,RLE,JPG,JPEG,TIF,GIF,PNG,ICO,WMF,EMF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 5;
	ИначеЕсли Найти(",HTM,HTML,MHT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 6;
	ИначеЕсли "DOC" = РасширениеФайла Тогда
		Возврат 7;
	ИначеЕсли "XLS" = РасширениеФайла Тогда
		Возврат 8;
	ИначеЕсли "PPT" = РасширениеФайла Тогда
		Возврат 9;
	ИначеЕсли "VSD" = РасширениеФайла Тогда
		Возврат 10;
	ИначеЕсли "MPP" = РасширениеФайла Тогда
		Возврат 11;
	ИначеЕсли "MDB" = РасширениеФайла Тогда
		Возврат 12;
	ИначеЕсли "XML" = РасширениеФайла Тогда
		Возврат 13;
	ИначеЕсли "MSG" = РасширениеФайла Тогда
		Возврат 14;
	ИначеЕсли Найти(",RAR,ZIP,ARJ,CAB,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 15;
	ИначеЕсли Найти(",EXE,COM,,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 16;
	ИначеЕсли "BAT" = РасширениеФайла Тогда
		Возврат 17;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // уатПолучитьИндексПиктограммыФайла()

// Получает картинку файла из библиотеки картинок в зависимости от расширения файла.
//
// Параметры
//  РасширениеФайла – Строка, содержащая расширение файла.
//
// Возвращаемое значение:
//   Картинка.
//
Функция уатПолучитьПиктограммуФайла(РасширениеФайла) Экспорт

	РасширениеФайла = Врег(РасширениеФайла);

	Если Найти(",1CD,CF,CFU,DT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_1С;
	ИначеЕсли "MXL" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MXL;
	ИначеЕсли "TXT" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_TXT;
	ИначеЕсли "EPF" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_EPF;
	ИначеЕсли Найти(",BMP,DIB,RLE,JPG,JPEG,TIF,GIF,PNG,ICO,WMF,EMF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_BMP;
	ИначеЕсли Найти(",HTM,HTML,MHT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_HTML;
	ИначеЕсли Найти(",DOC,RTF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_Word;
	ИначеЕсли "XLS" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_Excel;
	ИначеЕсли "PPT" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_PowerPoint;
	ИначеЕсли "VSD" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_VSD;
	ИначеЕсли "MPP" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MPP;
	ИначеЕсли "MDB" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MDB;
	ИначеЕсли "XML" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_XML;
	ИначеЕсли "MSG" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_MSG;
	ИначеЕсли Найти(",RAR,ZIP,ARJ,CAB,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_WinRar;
	ИначеЕсли Найти(",EXE,COM,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_EXE;
	ИначеЕсли "BAT" = РасширениеФайла Тогда
		Возврат БиблиотекаКартинок.ПиктограммаФайла_BAT;
	Иначе
		Возврат БиблиотекаКартинок.ПиктограммаФайла_НеОпределен;
	КонецЕсли;

КонецФункции // уатПолучитьПиктограммуФайла()

// Функция определяет, есть ли у объекта элементы в хранилище дополнительной информации
//
// Параметры
//  Объект - СправочникСсылка, ДокументСсылка, объект для которого определяем наличие файлов
//
// Возвращаемое значение:
//   Булево
//
Функция уатЕстьДополнительнаяИнформация(Объект, ИмяСправочника = "уатХранилищеДополнительнойИнформации") Экспорт

	ЗначениеНайдено = Ложь;
	
	Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатХранилищеДополнительнойИнформации.Ссылка,
		|	уатХранилищеДополнительнойИнформации.ЗначениеРазделенияДоступа,
		|	уатХранилищеДополнительнойИнформации.Объект
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК уатХранилищеДополнительнойИнформации
		|ГДЕ
		|	уатХранилищеДополнительнойИнформации.Объект = &Объект
		|";
		ЗначениеНайдено = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат ЗначениеНайдено;
	
КонецФункции

// Изменяет картинку у кнопки открытия формы списка файлов и изображений.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  СписокКнопокОткрытияФайлов -  Кнопки командной панели, по нажатию которой открывается
//  форма списка файлов и изображений.
//
Процедура уатПолучитьКартинкуКнопкиОткрытияФайлов(ОбъектФайла, СписокКнопокОткрытияФайлов) Экспорт

	КартинкаКнопки = ?(уатЕстьДополнительнаяИнформация(ОбъектФайла), БиблиотекаКартинок.ТолькоСкрепка, БиблиотекаКартинок.НевидимаяСкрепка);
	Для каждого КнопкаОткрытияФайлов Из СписокКнопокОткрытияФайлов Цикл
		КнопкаОткрытияФайлов.Значение.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КнопкаОткрытияФайлов.Значение.Картинка    = КартинкаКнопки;
	КонецЦикла; 

КонецПроцедуры // уатПолучитьКартинкуКнопкиОткрытияФайлов()

// Процедура открывает форму файлов и изображений по объекту отбора
// Параметры:
//	СтруктураДляСпискаИзображений  - структура - хранит список изображений
//  СтруктураДляСпискаДополнительныхФайлов   - структура - хранит список файлов
//  ОбязательныеОтборы - отборы, для списка отображаемых файлов и изображений
//  ФормаВладелец – Форма – определяет форму владельца открываемой формы
//  ИмяСправочника - справочник в котором размещаются файлы и изображения
//
Процедура уатОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ФормаВладелец, ИмяСправочника = "уатХранилищеДополнительнойИнформации") Экспорт

	ФормаФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСпискаФайловИИзображений", ФормаВладелец);
	
	// Изображения
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.Изображения.Отбор.Объект.Использование = СтруктураДляСпискаИзображений.ОтборОбъектИспользование;
		ФормаФайлов.Изображения.Отбор.Объект.Значение      = СтруктураДляСпискаИзображений.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаИзображений.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаИзображений.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаИзображений.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость = СтруктураДляСпискаИзображений.ВидимостьКолонкиОбъекта;
	КонецЕсли; 

	// Дополнительные файлы
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектИспользование;
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение      = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаДополнительныхФайлов.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость = СтруктураДляСпискаДополнительныхФайлов.ВидимостьКолонкиОбъекта;
	КонецЕсли; 
	
	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") И СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") Тогда
		Если СтруктураДляСпискаИзображений.ОтборОбъектЗначение = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение Тогда
			ФормаФайлов.Заголовок = "Хранилище дополнительной информации (" + СокрЛП(Строка(СтруктураДляСпискаИзображений.ОтборОбъектЗначение)) + ")";
		КонецЕсли;
	КонецЕсли; 
	
	ФормаФайлов.Открыть();

КонецПроцедуры

// Открывает форму основного изображения объекта
//
// Параметры
//  ФормаВладелец – Форма – определяет форму владельца открываемой формы
//  ОбъектВладелец - Объект – определяет владельца(объект) открываемой формы
//  ОсновноеИзображение – СправочникСсылка.уатХранилищеДополнительнойИнформации – содержит 
//                 ссылку на основное изображение объекта
//
Процедура уатОткрытьФормуИзображения(ФормаВладелец, ОсновноеИзображение, ОбъектВладелец) Экспорт

	Если ОсновноеИзображение = Неопределено ИЛИ ОсновноеИзображение.Пустая() Тогда
			
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Заголовок = "Выберите файл с изображением";
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
		ДиалогОткрытияФайла.Фильтр = ПолучитьФильтрИзображений();

		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВыбранноеИзображение = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла, Ложь);
		Иначе
			Возврат;
		КонецЕсли;
		
		НовыйОбъект = Справочники.уатХранилищеДополнительнойИнформации.СоздатьЭлемент();
		НовыйОбъект.ВидДанных = Перечисления.уатВидыДополнительнойИнформацииОбъектов.Изображение;
		НовыйОбъект.Хранилище = Новый ХранилищеЗначения(ВыбранноеИзображение, Новый СжатиеДанных);
		НовыйОбъект.Объект = ОбъектВладелец;
		
		ФормаИзображения = НовыйОбъект.ПолучитьФорму("ФормаИзображения");
		
	Иначе
		
		ФормаИзображения = ОсновноеИзображение.ПолучитьФорму("ФормаИзображения");
		
	КонецЕсли;
	
	ФормаИзображения.ВладелецФормы = ФормаВладелец;
	ФормаИзображения.РежимВыбора = Истина;
	ФормаИзображения.ЗакрыватьПриВыборе = Ложь;
	ФормаИзображения.Открыть();
	
КонецПроцедуры // уатОткрытьФормуИзображения()




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция уатИнициализироватьДеревоДополнительныхКнопок() Экспорт
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Функция добавляет новую строку в дерево кнопок
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, в который необходимо добавить новое описание кнопки
//	< Имя > (обязательный)
//		Тип: Строка. Имя создаваемой кнопки;
//	< ТипКнопки > (по умолчанию «Действие»)
//		Тип: ТипКнопкиКоманднойПанели. Тип создаваемой кнопки (Кнопка, разделитель, подменю);
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Действие > (по умолчанию «Не Определено»)
//		Тип: Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//	< Расшифровка > (по умолчанию не определено)
//		Тип: Произвольный.
//	< Пометка > (по умолчанию «Ложь»)
//		Тип: Булево.
//	< Подсказка > (по умолчанию пустая строка)
//		Тип: Строка. Подсказка создаваемой кнопки.
//	< Картинка > (по умолчанию «Не Определено»)
//		Тип: Картинка. Картинка создаваемой кнопки.
// Возвращаемое значение:
//		Тип: СтрокаДереваЗначений.
Функция уатДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, ИзменяетДанные = Ложь) Экспорт
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		 
	КонецЕсли; 
	
	СтрокаКнопки = СтрокаПодменю.Строки.Добавить();
	
	СтрокаКнопки.Имя              = Имя;
	СтрокаКнопки.ТипКнопки   	  = ТипКнопки;
	СтрокаКнопки.Текст       	  = Текст;
	СтрокаКнопки.Действие	      = Действие;
	СтрокаКнопки.Картинка    	  = Картинка;
	СтрокаКнопки.Подсказка   	  = Подсказка;
	СтрокаКнопки.Пометка     	  = Пометка;
	СтрокаКнопки.ИзменяетДанные   = ИзменяетДанные;
	СтрокаКнопки.Расшифровка 	  = Расшифровка;
	
	Возврат СтрокаКнопки;
	
КонецФункции

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура уатСформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			уатСформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка      = СтрокаКнопки.Подсказка;
		Кнопка.Пометка        = СтрокаКнопки.Пометка;
		
	КонецЦикла; 
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ИСПОЛЬЗУЕМЫЕ ДЛЯ ВЫЗОВА ИЗ ИНТЕРФЕЙСОВ

//Процедура открывает список выбора внешних обработок
Процедура уатОткрытьСписокВнешнихОбработок() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних обработок заполнения табличных частей
Процедура уатОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних печатных форм
Процедура уатОткрытьСписокВнешнихПечатныхФорм() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних отчетов
Процедура ОткрытьСписокВнешнихОтчетов() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // ОткрытьСписокВнешнихОтчетов() 

//Процедура открывает форму настройки формирования наименования агрегатов
Процедура ОткрытьФормуНастройкиНаименованияАгрегатов() Экспорт
	Форма = ПолучитьОбщуюФорму("уатНастройкаФормированияНаименованийАгрегатов");
	Форма.Открыть();
КонецПроцедуры // ОткрытьСписокВнешнихОтчетов() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ИЗ ВНЕШНИХ ОБРАБОТОК


// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура уатОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	Перем СсылкаНаВнешнююОбработку;
	Перем ДополнительныеПараметры;
	
	// Получить ссылку на внешнюю обработку
	СтрокаКнопки.Расшифровка.Свойство("СсылкаНаВнешнююОбработку", СсылкаНаВнешнююОбработку);
	
	// Получить дополнительные параметры внешней обработки
	СтрокаКнопки.Расшифровка.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ТипЗНЧ(СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = СсылкаНаВнешнююОбработку.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Попытка
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			
			// Передать внешней обработке дополнительные параметры
			Если ДополнительныеПараметры <> Неопределено Тогда
				
				// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
				Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
					Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
			
		КонецПопытки;
		
		Попытка
			
			Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
			
		Исключение
			
			Сообщить("Ошибка формата внешней обработки. Возможно выбрана обработка не для заполнения табличной части.", СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Функция уатСформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ДеревоКнопок = уатИнициализироватьДеревоДополнительныхКнопок();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	
	ДеревоТЧ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого КлючИЗначение Из СоответствиеТЧ Цикл
		ИмяТабличнойЧасти = КлючИЗначение.Ключ.Данные;
		
		СтрокаДереваТЧ = ДеревоТЧ.Строки.Найти(ИмяТабличнойЧасти,"ТабличнаяЧастьИмя");
		
		Если Не СтрокаДереваТЧ = Неопределено Тогда
			
			СтрокаПодменю  = уатДобавитьСтрокуВДеревоКнопок(ДеревоКнопок,ИмяТабличнойЧасти, ТипКнопкиКоманднойПанели.Действие , , , КлючИЗначение.Ключ, , , ,Истина);
			
			Для каждого ПодСтрокаДереваТЧ Из СтрокаДереваТЧ.Строки Цикл
				
				НомерКнопки = НомерКнопки + 1;
				
				СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, ДополнительныеПараметрыОбработки", ПодСтрокаДереваТЧ.Ссылка, ПодСтрокаДереваТЧ.ДополнительныеПараметрыОбработки.Получить());
				
				уатДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ПодСтрокаДереваТЧ.Наименование, Действие , СтруктураРасшифровки, , , ,Истина)
				
			КонецЦикла;
			
			ПодменюИлиКоманднаяПанель = КлючИЗначение.Значение;
				
			Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
					
				ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
					
			КонецЕсли;
			
			уатСформироватьПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель,Ложь,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоКнопок;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в механизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция уатИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(НЕ ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ()

// Функция получате строку дерева макетов для печати по умолчанию
//
// Параметры
//  ИмяМетаданных  - Ссылка, для которой необходимо напечатать документ
//  Деревокнопок   - Дерево значений, содержит дерево кнопок печати объекта
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция уатПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоКнопок)
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		
		СтрокаПоУмолчанию = Неопределено;
		
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ()

// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция уатПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	
	ДеревоКнопок = уатИнициализироватьДеревоДополнительныхКнопок();
	
	Если Не ВнутренниеПечатныеФормы = Неопределено Тогда
		уатДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие);
		
	КонецЕсли;
	
	уатДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);
	
	СтрокаПоУмолчанию = уатПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		
		СтрокаПоУмолчанию.Пометка = Истина;
		
	КонецЕсли;
	 
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура уатУстановитьПечатьПоУмолчанию(ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, ДействиеПечатьПоУмолчанию) Экспорт
	
	СтрокаПоУмолчанию = уатПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			
			ИмяКнопки = Строка (Новый УникальныйИдентификатор);
			
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;
			
			ПечатьПоУмолчанию.Подсказка = "Печать по умолчанию";
			
		КонецЕсли; 
		
		ПечатьПоУмолчанию.Текст       = СтрокаПоУмолчанию.Текст;
		ПечатьПоУмолчанию.Доступность = Истина; 
		
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		
		ПечатьПоУмолчанию.Текст       = "Печать по умолчанию не назначена"; 
		ПечатьПоУмолчанию.Доступность = Ложь; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура уатУстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	
	Если Не ПодменюПечати = Неопределено или  Не СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПодменю = Строка (Новый УникальныйИдентификатор);
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	Иначе
		КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	КонецЕсли;
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
			
	
КонецПроцедуры

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
// Параметры:
//    ДеревоМакетов: ДеревоЗначений, макетов печатных форм
//    Объект       : ДокументОбъект, СправочникОбъект, из формы которого вызвана процедура
//    Форма        : Форма, вызвавшая процедуру
//    ТекстКнопки  : Строка, заголовок нажатой кнопки
Процедура уатПечатьПоДополнительнойКнопке(УдалитьДеревоМакетов, Объект, Форма = Неопределено, ТекстКнопки) Экспорт
	
	Если Не Форма = Неопределено Тогда
		Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированностьВФорме(Объект, Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = уатПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ТабДокумент = уатНапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, 0, НаПринтер, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Объект.Ссылка, ""), Неопределено);
	Иначе
		Объект.Печать(СтрокаКнопки.Имя, 0, НаПринтер);
	КонецЕсли;
	
КонецПроцедуры // ПечатьПоДополнительнойКнопке()

// Процедура назначает макет по умолчанию
//
Функция уатНазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, ИмяМетаданных, Кнопка) Экспорт
	
	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
	
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Строка.Имя = Кнопка.Имя Тогда
			
			МакетПоУмолчанию = Строка.Текст;
			
		КонецЕсли; 
		
	
	КонецЦикла; 
	
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", Ложь);
		
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция уатНапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт

	Перем ДополнительныеПараметры;
	Перем Права;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не уатОбщегоНазначенияТиповые.ПроверитьМодифицированность(Ссылка.ПолучитьОбъект()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура уатДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие)
	
	СтрокиДерева = ДеревоМакетов.Строки;
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """"
	|			ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель = СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		ПорядковыйНомер = 0;
		Выборка = ВыборкаСсылок.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяОбработка = Неопределено;
			ОбработкаСтроки = Выборка.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, НомерСтроки, ДополнительныеПараметрыОбработки, ЗаменяемаяФорма", ВыборкаСсылок.Ссылка, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить(), Выборка.ЗаменяемаяПечатнаяФорма);
			
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета = уатИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если ЗначениеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.Имя = Выборка.Наименование;
				СтрокаДерева.Текст = Выборка.Наименование;
				СтрокаДерева.Расшифровка = СтруктураРасшифровки;
				СтрокаДерева.Подсказка = Подсказка;
				
				Продолжить;
				
			КонецЕсли; 
			
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				уатДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				БылРазделитель = Истина;
			КонецЕсли;
			
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			уатДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки,);
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы
//
Процедура уатДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие)

	Для каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			
			уатДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
			
		Иначе
			
			уатДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие);
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

// Процедура печатает документ по умолчанию
//
Функция уатНапечататьДокументПоУмолчанию(Объект, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	Попытка
		
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
		
	Исключение
		
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
		
	КонецПопытки;
	
	ДеревоМакетов = уатПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = уатПолучитьСтрокуДереваМакетовПоУмолчанию(Объект.Метаданные().Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Сообщить(Строка(Объект) + ": Печать по умолчанию не определена!", СтатусСообщения.Важное); 
		Возврат Ложь;
		
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаПоУмолчанию.Расшифровка) = Тип("Структура") Тогда
		
		ТабДокумент = уатНапечататьВнешнююФорму(Объект.Ссылка, СтрокаПоУмолчанию.Расшифровка);
		уатОбщегоНазначенияТиповые.уатНапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ?(ЭтоДокумент, уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Объект.Ссылка), Строка(Объект)), Неопределено);
		
	Иначе
		
		Объект.Печать(СтрокаПоУмолчанию.Имя, КоличествоЭкземпляров, НаПринтер);
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура уатНапечататьДокументИзФормыСписка(Ссылка) Экспорт
	
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	Если Не уатНапечататьДокументПоУмолчанию(Ссылка.ПолучитьОбъект(), 0, НаПринтер) Тогда
		
		Предупреждение("Операция не выполнена");
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьДокументИзФормыСписка()

// Открывает форму основного изображения объекта
//
// Параметры
//  ФормаВладелец – Форма – определяет форму владельца открываемой формы
//  МенеджерЗаписи – Тип("РегистрСведенийМенджерЗаписи.уатДокументыВодителей") либо
//                   Тип("РегистрСведенийМенджерЗаписи.уатДокументыТС")
//
Процедура ОткрытьОбщуюФормуИзображения(ФормаВладелец, МенеджерЗаписи) Экспорт

	Если МенеджерЗаписи.Изображение.Получить() = Неопределено Тогда
			
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Заголовок = "Выберите файл с изображением";
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
		ДиалогОткрытияФайла.Фильтр = ПолучитьФильтрИзображений();

		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ВыбранноеИзображение = Новый Картинка(ДиалогОткрытияФайла.ПолноеИмяФайла, Ложь);
		Иначе
			Возврат;
		КонецЕсли;
		
		МенеджерЗаписи.Изображение = Новый ХранилищеЗначения(ВыбранноеИзображение, Новый СжатиеДанных);
		
		ФормаИзображения = ПолучитьОбщуюФорму("уатФормаИзображения", ФормаВладелец);
		
	Иначе
		
		ФормаИзображения = ПолучитьОбщуюФорму("уатФормаИзображения", ФормаВладелец);
		
	КонецЕсли;
	
	ФормаИзображения.Запись = МенеджерЗаписи;
	ФормаИзображения.РежимВыбора = Истина;
	ФормаИзображения.ЗакрыватьПриВыборе = Ложь;
	ФормаИзображения.Открыть();
	
КонецПроцедуры // ОткрытьОбщуюФормуИзображения()
