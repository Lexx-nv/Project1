//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(ИмяЕдиницыИзмерения, МетаданныеДокумента, ИмяТабличнойЧасти)
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения].Владелец Тогда
		СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

// Процедура выполняет стандартные действия при изменении единицы цены
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения цены "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
					НовоеЗначениеКоэффициента  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
					
					Если НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента Тогда
						СтрокаТабличнойЧасти.Коэффициент = НовоеЗначениеКоэффициента;

						Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
							СтрокаТабличнойЧасти.Количество  = СтрокаТабличнойЧасти.Количество * СтароеЗначениеКоэффициента
							                                   / НовоеЗначениеКоэффициента;
						КонецЕсли;

						РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена *НовоеЗначениеКоэффициента 
							                            / СтароеЗначениеКоэффициента;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;

		// Установить коэффициент
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		// если в табличной части есть реквизит КоличествоМест, то цена задается не за ЕдиницуИзмерения,
		// а за базовую единицу хранения остатков. Т.е. цену пересчитывать не нужно
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			// надо обновить изменение к-ва в документе
			РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		Иначе
			// ПересчитатьЦену
			Если СтароеЗначениеКоэффициента > 0
				И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Коэффициент 
				                            / СтароеЗначениеКоэффициента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЕдиницыТабЧасти

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт

// устанавливаем стандартные запреты на изменение видимости колонок
Для каждого КолонкаТаблицы из Колонки Цикл
	КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
КонецЦикла;

КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//  Документобъект       - документ
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

// Процедура очищает значение нужного реквизита в переданной ТЧ.
//
// Параметры:
//  ТабЧасть      - табличная часть,
//  ИмяРеквизита - строка, имя реквизита.
//
Процедура ОчиститьРеквизитТЧ(ТабЧасть, ИмяРеквизита) Экспорт

	Для Каждого Строка Из ТабЧасть Цикл
		Если ЗначениеЗаполнено(Строка[ИмяРеквизита]) Тогда
			Строка[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //ОчиститьРеквизитТЧ()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАССЧЕТА СКИДОК ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ


//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАССЧЕТА ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//Заполнить СтавкаНДС
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Процедура заполняет способ списания товаров в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Процедура заполняет способ списания комплектующих в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти1(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.СпособСписания = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

КонецПроцедуры // ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  СпособРасчета        - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = 0;

	Если (СпособРасчета = Неопределено)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.СУчетомВсехСкидок)
	 Или (СпособРасчета = Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента,
											 ИмяТабличнойЧасти) Тогда
			СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
		КонецЕсли;

		//Если (СпособРасчета <> Перечисления.СпособРасчетаСуммыДокумента.БезУчетаРучнойСкидки)Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.Сумма = Сумма - СуммаСкидки;

КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Истина;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента ) Тогда
		УчитыватьНДС = ДокументОбъект.УчитыватьНДС;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента ) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	                                                   УчитыватьНДС, СуммаВключаетНДС,
	                                                   Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.СуммаНДСПередачи = Ценообразование.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПередачи,
	                                                   ДокументОбъект.УчитыватьНДС,
	                                                   ДокументОбъект.СуммаВключаетНДС,
	                                                   Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Рассчитывает количество исходя из количества мест
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

				
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения!
				                 |Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				Если СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда 
					Возврат;
				КонецЕсли;

				ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения мест!
				                 |Пересчет количества невозможен.");
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения цены "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения мест "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест;
					Иначе
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест
						                                  * СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент
						                                  / СтрокаТабличнойЧасти.Коэффициент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения "
				                 +СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Наименование+" не проставлен коэффициент!
				                 |Пересчет количества невозможен.");
			Иначе
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Коэффициент
				                                  / СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает количество мест исходя из количества
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти)
			 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица измерения цены!
				                 |Пересчет количества невозможен.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				СтрокаТабличнойЧасти.КоличествоМест = 0;
			Иначе
				Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения цены "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" у единицы измерения мест "
					                 +СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Наименование+" не проставлен коэффициент!
					                 |Пересчет количества невозможен.");
				Иначе
					Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест Тогда
						КоличествоМест = СтрокаТабличнойЧасти.Количество;
					Иначе
						КоличествоМест = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент
						                 / СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент;
					КонецЕсли;

					СтрокаТабличнойЧасти.КоличествоМест = ?(Цел(КоличествоМест) = КоличествоМест, КоличествоМест, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", МетаданныеДокумента, ИмяТабличнойЧасти)
			и СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для "+СтрокаТабличнойЧасти.Номенклатура.Наименование+" не выбрана единица хранения остатков!
				                 |Пересчет количества невозможен.");
			ИначеЕсли СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не проставлен коэффициент!
				                 |Пересчет количества мест невозможен.");
			Иначе
				СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.Количество 
				                                      * СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
				                                      / СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // РассчитатьКоличествоМестТабЧасти()

// Процедура выполняет проверку заполнения единицы измерения мест и количества мест
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется проверка
//
Процедура ПриЗаписиПроверитьЕдиницуИзмеренияМест(ТабличнаяЧасть) Экспорт

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест)
			 И СтрокаТабличнойЧасти.КоличествоМест = 0 Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриЗаписиПроверитьЕдиницуИзмеренияМест()

// Функция выполняет поиск первой, удовлетворяющей условию поиска, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()

// Рассчитывает цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоСуммеДокумента", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоСуммеДокумента <> 0)
		 Или (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоКоличествуТовара", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоКоличествуТовара <> 0)
		 Или (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоВидуОплаты", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоВидуОплаты <> 0)
		 Или (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СкидкаПоДисконтнойКарте", МетаданныеДокумента, ИмяТабличнойЧасти)
			  И СтрокаТабличнойЧасти.СкидкаПоДисконтнойКарте <> 0)
			Тогда
				//Невозможно рассчитать цену по сумме документа!!!
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры // РассчитатьЦенуТабЧасти()

//==================================================================================
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ 

#Если Клиент Тогда

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт

	// Добавляем обработчики в форму
	МетаданныеДокумента = ФормаДокумента.ДокументОбъект.Метаданные();

	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл

		Если ОбщегоНазначения.ЕстьРеквизитДокумента(ЭлементСтруктурыПараметров.Ключ, МетаданныеДокумента) Тогда

			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ЭлементСтруктурыПараметров.Ключ, "ОбновитьФормуПодбора", Ложь);

		КонецЕсли;

	КонецЦикла;

	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();

КонецПроцедуры // ОткрытьПодборНоменклатуры()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРЕТАСКИВАНИЕМ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА

// Функция выполняет проверку перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//
// Возвращаемое значение: 
//  Флаг проверки.
//
Функция ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Экспорт

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Возврат ПараметрыПеретаскивания.Значение.Свойство("ИзПодбора");
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПолучитьСтруктуруЗначенийПеретаскивания()

// Процедура проверки перетаскивания из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - стандартная обработка.
//  ДокументСсылка          - ссылка на документ.
//  ИмяТЧ                   - имя табличной части.
//
Процедура ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ДокументСсылка, ИмяТЧ) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ДокументСсылка = ПараметрыПеретаскивания.Значение.Владелец
	   И ИмяТЧ = ПараметрыПеретаскивания.Значение.ИмяТЧ Тогда

		Если (ИмяТЧ =  "Услуги" И НЕ ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга)
		 ИЛИ (ИмяТЧ <> "Услуги" И    ПараметрыПеретаскивания.Значение.ВыбСтрока.Услуга) Тогда
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Иначе
			ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // ПроверкаПеретаскиванияИзПодбора()

// Процедура подтверждающая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - стандартная обработка.
//
Процедура ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;

КонецПроцедуры // ПеретаскиваниеИзПодбора()

// Процедура отменяющая перетаскивание из подбора номенклатуры.
//
// Параметры:
//  ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка    - стандартная обработка.
//
Процедура ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка                       = Ложь;
	ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;

КонецПроцедуры // ПеретаскиваниеОтменить()

#КонецЕсли
