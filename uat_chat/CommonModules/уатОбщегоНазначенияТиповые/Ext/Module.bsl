#Если Клиент Тогда
		//=================================================================================
	// НАЧАЛО ВЫБОРА 
	
	// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
	//
	// Параметры:
	//  ДокументОбъект - объект редактируемого документа;
	//  ФормаДокумента - форма редактируемого документа;
	//  ЭлементФормы - элемент формы документа, который надо заполнить; 
	//  Контрагент  - ссылка на справочник, определяет контрагента по договору;
	//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента;
	//  ВидДоговораВзаиморасчетов - вид договора взаиморасчетов для отбора, значение 
	//                перечисления ВидыДоговоровКонтрагентов;
	//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события,
	//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязательный,
	//                ключ - имя отбора, значение - структура, определяющая отбор с ключами:
	//                ЗначениеОтбора (если не задан, то отбор не устанавливается), 
	//                ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
	//                ДоступностьОтбора (если не задан, то Ложь).
	//
	Процедура уатНачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
		ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
		СтруктураДополнительныхПараметров = Неопределено) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);
		
		// Владельца менять по умолчанию не даем.
		ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		
		Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда
			
			// Оставим в выборе только "правильные" договоры
			Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
			КонецЕсли;
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
			
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
			
		КонецЕсли;
		
		// Еще надо фильтровать по организации, если она заполнена
		Если уатЕстьРеквизитДокумента("Организация",МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
			ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ДокументОбъект.Организация;
			ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
			ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		КонецЕсли;
		
		// Добавим фильтры по дополнительным параметрам отбора
		Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
			ЭтоОбъединениеСБП = уатОбщегоНазначения.ЭтоОбъединениеСБП();
			Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл
				
				СтруктураОтбора = ЭлементСтруктуры.Значение;
				
				ЗначениеОтбора     = Неопределено;
				ВидСравненияОтбора = Неопределено;
				ДоступностьОтбора  = Неопределено;
				
				Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда
					
					Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
						// для работы С БП
						Если ЭтоОбъединениеСБП И ЭлементСтруктуры.Ключ = "ВедениеВзаиморасчетов" Тогда
							Продолжить;
						КонецЕсли;
						
						ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
					Иначе
						ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
					КонецЕсли;
					
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
					
					Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
						ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
					Иначе
						ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
		
		ФормаВыбора.Открыть();
		
	КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()
	
	// Процедура выполняет общие действия при изменении договора взаиморасчетов
	//
	// Параметры:
	//  ДокументОбъект - объект редактируемого документа,
	//  СпособЗаполненияЦен - значение перечисления "Способы заполнения цен", определяет по какому из 
	//                регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
	//  СтараяВалютаВзаиморасчетов - ссылка на справочник валют, определяет валюту взаиморасчетов 
	//                до изменения договора;
	//  ВалютаРегламентированногоУчета - валюта регламентированного учета
	//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа;
	//                если реквизит надо обрабатывать, то для него есть ключ в этой структуре
	//  ТипОперации - необязаетельный, строка вида операции ("Покупка" или "Продажа");
	//                если не передан, то реквизиты, зависящие от вида операции, не заполняются
	//  ИмяТабличнойЧасти - имя табличной части
	//  СтарыйДоговорКонтрагента - старый договор контрагента, который был до изменения
	//  СтруктураЗначений - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
	//
	Процедура уатПриИзмененииЗначенияДоговора(ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
		СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", ИмяТабличнойЧасти, 
		СтарыйДоговорКонтрагента = Неопределено,
		СтруктураЗначений = Неопределено,
		СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт
		
		Перем Договор, ТипЦенВДоговоре;
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		Договор = ДокументОбъект.ДоговорКонтрагента;
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Договор) Тогда
			
			// Если ДоговорКонтрагента не заполнен то не проводим никаких изменений.
			Возврат;
			
		Иначе
			
			// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
			// и договор взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
			// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
			// и договор взаиморасчетов имеет тип не договор покупателя
			МожноПродолжать = Истина;
			Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
				И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
				И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
				ИЛИ (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
				И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
				И Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
				МожноПродолжать = Ложь;
				СтрокаВозможныхВыборов = ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, "покупателями или с комиссионерами", "поставщиками или комитентами");
			КонецЕсли;
			
			Если НЕ МожноПродолжать Тогда
				
				Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) Тогда
					ДокументОбъект.ДоговорКонтрагента = Неопределено;
				Иначе
					ТекстПредупреждения = "В документе можно выбирать только договора с "
					+ СтрокаВозможныхВыборов + "!" + Символы.ПС;
					
					Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
						ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
						ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
					Иначе
						ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
						ДокументОбъект.ДоговорКонтрагента = Неопределено;
					КонецЕсли;
					
					Предупреждение(ТекстПредупреждения);
				КонецЕсли;
				
				Возврат; // дальше ничего пересчитывать не надо
				
			КонецЕсли;
		КонецЕсли;
		
		Если уатРаботаСМетаданными.уатЕстьРеквизитДокумента("Сделка", ДокументОбъект.Ссылка) Тогда
			ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			
			ДокументОбъект.Контрагент = Договор.Владелец;
			
		ИначеЕсли ЗначениеЗаполнено(Договор)
			И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать 
			                                                      //с контрагентом документа.
			
			Предупреждение("Выбранный договор принадлежит другому контрагенту. 
			|Будет восстановлен старый договор.");
			Договор = СтарыйДоговорКонтрагента;
			
		КонецЕсли;
		
		//Владелец нового договора должен совпадать с контрагентом документа.
		
		Если уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
			И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
			ДокументОбъект.Организация = Договор.Организация;
		КонецЕсли;
		
		// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
		НадоПересчитывать = Ложь;
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
				НадоПересчитывать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоПересчитывать = Ложь Тогда
			
			Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.ВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
				СтруктураКурсаДокумента = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				
				// В некоторых документах курс и кратность документа отсутствуют.
				Если уатЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
					ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
				КонецЕсли;
				Если уатЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
				КонецЕсли;
				Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
				КонецЕсли;
				Если уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
				КонецЕсли;
			КонецЕсли;
			
			Если уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
				Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
					ДокументОбъект.ТипЦен = Договор.ТипЦен;
					Если уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
						И уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
						И ДокументОбъект.УчитыватьНДС Тогда
						ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0
			
			// Если заполнен и по другим параметрам, то предварительно спрашиваем
			НеобходимоПересчитать = Ложь;
			ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
			|отличные от установленных в документе:";
			
			// Валюта документа
			Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
				И ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов) Тогда
				НовыйВалютаДокумента    = Договор.ВалютаВзаиморасчетов;
				СтруктураКурсаДокумента = ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
				Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
					СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
				КонецЕсли;
				Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
					СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
				КонецЕсли;
				
				Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
					НеобходимоПересчитать = Истина;
					ТекстВопроса = ТекстВопроса + Символы.ПС + 
					"Валюта документа: """ +
					?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента), "Не задана",СокрЛП(ДокументОбъект.ВалютаДокумента)) +
					""", договора: """ +  СокрЛП(НовыйВалютаДокумента) + """.";
				КонецЕсли;
			КонецЕсли;
			
			// Тип цен
			НадоПередаватьНовыйТипЦен = Ложь;
			Если уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
				НовыйТипЦен = ДокументОбъект.ТипЦен;
				Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
					НовыйТипЦен = Договор.ТипЦен;
				КонецЕсли;
				
				Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
					НеобходимоПересчитать = Истина;
					НадоПередаватьНовыйТипЦен = Истина;
					ТекстВопроса = ТекстВопроса + Символы.ПС +
					"Тип цен документа: """ +
					?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДокументОбъект.ТипЦен), "Не задан",СокрЛП(ДокументОбъект.ТипЦен)) +
					""", договора: """ + СокрЛП(НовыйТипЦен) + """.";
				КонецЕсли;
			КонецЕсли;
			
			Если НеобходимоПересчитать Тогда
				ТекстВопроса = ТекстВопроса + Символы.ПС + "Пересчитать документ в соответствии с договором?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					
					// Вызов общей формы "Цены и валюта" и пересчеты по результата выбора в этой форме
					СтруктураРеквизитовДокумента.Вставить("ВызовПриИзмененииЗначенияДоговора");
					уатИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,, СтруктураЗначений, ?(НадоПередаватьНовыйТипЦен, НовыйТипЦен, Неопределено), СтруктураНеобрабатываемыхТабличныхЧастей);
					
					// Если в форме "Цены и валюта" бала нажата кнопка отмена то проверим реквизиты
					// КурсВзаиморасчетов и КратностьВзаиморасчетов на заполнение
					ЕстьКурсВзаиморасчетов      = уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
					ЕстьКратностьВзаиморасчетов = уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
					Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда
						
						СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
						Если ЕстьКурсВзаиморасчетов И Не ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)Тогда
							ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
						КонецЕсли;
						Если ЕстьКратностьВзаиморасчетов И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДокументОбъект.КратностьВзаиморасчетов) Тогда
							ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ЕстьКурсВзаиморасчетов      = уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента);
					ЕстьКратностьВзаиморасчетов = уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
					Если ЕстьКурсВзаиморасчетов ИЛИ ЕстьКратностьВзаиморасчетов Тогда
						
						СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
						Если ЕстьКурсВзаиморасчетов Тогда
							ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
						КонецЕсли;
						Если ЕстьКратностьВзаиморасчетов Тогда
							ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				// Установим курс и кратность взаиморасчетов
				Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
					И ЗначениеЗаполнено(Договор.ВалютаВзаиморасчетов) Тогда
					СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(Договор.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
						ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					КонецЕсли;
					Если уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
						ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0
		
		// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной, 
		// очистим договор
		Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) 
			И ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
			И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтарыйДоговорКонтрагента) Тогда
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			Иначе
				ТекстПредупреждения = "Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!"
				+ Символы.ПС;
				
				Если СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
					ТекстПредупреждения               = ТекстПредупреждения + "Будет восстановлен старый договор.";
					ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
				Иначе
					ТекстПредупреждения               = ТекстПредупреждения + "Договор будет очищен.";
					ДокументОбъект.ДоговорКонтрагента = Неопределено;
				КонецЕсли;
				
				Предупреждение(ТекстПредупреждения);
			КонецЕсли;
			
			Возврат; // дальше ничего пересчитывать не надо
		КонецЕсли;
		
	КонецПроцедуры // ПриИзмененииЗначенияДоговора()
	
	// Процедура выполняет общие действия при изменении даты документа
	//
	// Параметры:
	//  ДокументОбъект                 - объект редактируемого документа
	//  ВалютаРегламентированногоУчета - валюта регламентированного учета
	//  ФлагИзмененияКурса             - валюта регламентированного учета
	//
	Процедура уатПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено) Экспорт
		
		МетаданныеДокумента            = ДокументОбъект.Метаданные();
		ЕстьВалютаДокумента            = уатЕстьРеквизитДокумента("ВалютаДокумента",    МетаданныеДокумента);
		ЕстьДоговорКонтрагента         = уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
		ПроверкаПоВалютеВзаиморасчетов = Ложь;
		ФлагИзмененияКурса             = Ложь;
		
		// В некоторых документах нет валюты документа и договора.
		Если ЕстьВалютаДокумента Тогда
			Если ЕстьДоговорКонтрагента Тогда
				Договор = ДокументОбъект.ДоговорКонтрагента;
				
				Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Договор) Тогда
					Валюта = Договор.ВалютаВзаиморасчетов;
					ПроверкаПоВалютеВзаиморасчетов = Истина;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Валюта = ДокументОбъект.ВалютаДокумента;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		СтруктураНовогоКурсаВалюты  = ПолучитьКурсВалюты(Валюта, ДокументОбъект.Дата);
		НовыйКурс                   = СтруктураНовогоКурсаВалюты.Курс;
		НоваяКратность              = СтруктураНовогоКурсаВалюты.Кратность;
		
		ЕстьКурсДокумента           = уатЕстьРеквизитДокумента("КурсДокумента",           МетаданныеДокумента);
		ЕстьКратностьДокумента      = уатЕстьРеквизитДокумента("КратностьДокумента",      МетаданныеДокумента);
		ЕстьКурсВзаиморасчетов      = уатЕстьРеквизитДокумента("КурсВзаиморасчетов",      МетаданныеДокумента);
		ЕстьКратностьВзаиморасчетов = уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);
		
		// В некоторых документах курс и кратность документа отсутствуют
		Если ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсВзаиморасчетов И ЕстьКратностьВзаиморасчетов Тогда
			СтарыйКурс      = ДокументОбъект.КурсВзаиморасчетов;
			СтараяКратность = ДокументОбъект.КратностьВзаиморасчетов;
		ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсДокумента И ЕстьКратностьДокумента Тогда
			СтарыйКурс      = ДокументОбъект.КурсДокумента;
			СтараяКратность = ДокументОбъект.КратностьДокумента;
		Иначе
			Возврат;
		КонецЕсли;
		
		// Если курс и кратность не изменились, то выход.
		Если НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность Тогда
			Возврат;
		КонецЕсли;
		
		ТекстВалюты     = ?(ПроверкаПоВалютеВзаиморасчетов, "взаиморасчетов ", "документа ");
		ТекстНовыйКурс  = СокрЛП(РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, НовыйКурс,  НоваяКратность,  ВалютаРегламентированногоУчета, Истина));
		ТекстСтарыйКурс = СокрЛП(РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, СтарыйКурс, СтараяКратность, ВалютаРегламентированногоУчета, Истина));
		ТекстВопроса    = "На дату документа у валюты "  + ТекстВалюты+ ТекстСтарыйКурс + " был задан другой курс."
		+ Символы.ПС+ "Установить курс " + ТекстВалюты+ ТекстНовыйКурс + " в соответствии с курсом валюты?";
		Ответ           = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если ЕстьКурсДокумента Тогда
				ДокументОбъект.КурсДокумента           = НовыйКурс;
			КонецЕсли;
			Если ЕстьКратностьДокумента Тогда
				ДокументОбъект.КратностьДокумента      = НоваяКратность;
			КонецЕсли;
			Если ЕстьКурсВзаиморасчетов Тогда
				ДокументОбъект.КурсВзаиморасчетов      = НовыйКурс;
			КонецЕсли;
			Если ЕстьКратностьВзаиморасчетов Тогда
				ДокументОбъект.КратностьВзаиморасчетов = НоваяКратность;
			КонецЕсли;
			
			ФлагИзмененияКурса = Истина;
		КонецЕсли;
		
	КонецПроцедуры // РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента()
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ
	
	// Формирует и устанавливает текст заголовка формы документа
	//
	// Параметры:
	//  СтрокаВидаОперации - строка вида операции документа, 
	//  ДокументОбъект     - объект документа, 
	//  ФормаДокумента     - форма документа.
	//
	Процедура уатУстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт
		
		ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
		
		Если ПустаяСтрока(СтрокаВидаОперации) Тогда
			Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
		Иначе
			Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоНовый() Тогда  
			Заголовок = Заголовок + "Новый";
		Иначе
			Если ДокументОбъект.Проведен Тогда
				Заголовок = Заголовок + "Проведен";
			ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
				Заголовок = Заголовок + "Не проведен";
			Иначе
				Заголовок = Заголовок + "Записан";
			КонецЕсли;
		КонецЕсли;
		
		ФормаДокумента.Заголовок = Заголовок;
		
	КонецПроцедуры // УстановитьЗаголовокФормыДокумента()
	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ
	
	// Функция формирует представление суммы прописью в указанной валюте
	//
	// Возвращаемое значение:
	//  Строка - сумма прописью
	//
	Функция уатСформироватьСуммуПрописью(Сумма, Валюта) Экспорт
		
		Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
			Возврат уатФорматСумм(Сумма);
		Иначе
			Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
		КонецЕсли;
		
	КонецФункции //уатСформироватьСуммуПрописью()

	// Функция по виду сравнения возвращает текстовый параметр для запроса.
	// 
	// Параметры
	//  ВидСравнения - Вид сравнения, для которого получается представление
	// 
	// Печатает документ полученный по нажатию кнопки в форме списка
	//
	// Параметры
	//  Документ - документ,который нужно отпечатать
	//
	Процедура уатНапечататьДокументИзФормыСписка(Документ, КоличествоЭкземпляров = 1) Экспорт
		
		Если Документ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			СоответствиеМакетов = Документ.ПолучитьСписокПечатныхФорм();
		Исключение
			Предупреждение("Документ не имеет печатных форм!");
			Возврат;
		КонецПопытки;
		
		НазваниеМакета = уатПолучитьПечатнуюФормуПоУмолчанию(Документ.Метаданные().Имя, СоответствиеМакетов);
		Попытка
			Документ.Печать(НазваниеМакета, КоличествоЭкземпляров);
		Исключение
			Документ.Печать(НазваниеМакета);
		КонецПопытки ;
	КонецПроцедуры // НапечататьДокументИзФормыСписка()
	
	// Получает из текущих настроек пользователя имя кнопки печати,
	// которая определяет макет печатной формы по умолчанию.
	// Если не найдено, то берется первый макет в структуре макетов печатных форм,
	// и сохраняется в настройках пользователя.
	//
	// Параметры: 
	//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
	//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
	//                        макетов печатных форм документа
	//
	Функция уатПолучитьПечатнуюФормуПоУмолчанию(ИмяОбъекта, СписокМакетов) Экспорт
		
		Перем НазваниеМакета;
		
		МакетПоУмолчанию = ВосстановитьЗначение(ИмяОбъекта + "МакетПечати");
		
		Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
			
			// Пытаемся найти форму в соответствии
			ИмяМакета = СписокМакетов[МакетПоУмолчанию];
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИмяМакета) Тогда
				
				// Текущая печатная форма еще не найдена
				// Установим по умолчанию первую из списка
				Для каждого Элемент Из СписокМакетов Цикл
					МакетПоУмолчанию = Элемент.Ключ;
					Прервать;
				КонецЦикла; 
				уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
			
			Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда			
				СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
				Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
					Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
						СтруктураМакета.Макет =  СтрокаМакетаВСписке.Значение;
						СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли МакетПоУмолчанию = Неопределено Тогда
				СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			Иначе			
				СтруктураМакета = МакетПоУмолчанию;
			КонецЕсли;
			
			Если СтруктураМакета.Макет = Неопределено Тогда
				Если СписокМакетов.Количество() <> 0 Тогда
					СтрокаМакетаВСписке = СписокМакетов[0];
					СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
					СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			МакетПоУмолчанию = СтруктураМакета.Макет;
			уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);		
			
		КонецЕсли;
		
		Возврат МакетПоУмолчанию;
		
		
	КонецФункции // ПолучитьПечатнуюФормуПоУмолчанию()
			
	// В зависимости от настроек текущего пользователя выводит для ДокументаОбъекта 
	// печатную форму по умолчанию на экран или на принтер.
	//
	// Параметры:
	//  ДокументОбъект - печатаемый документ.
	//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
	//                   которое совпадает с текстом на кнопке печати в диалоге.
	//  ФормаДокумента - форма печатаемого документа.
	//
	Функция уатНапечататьДокументПоУмолчанию(ДокументОбъект, Пользователь = Неопределено, НазваниеМакета = "", ФормаДокумента = Неопределено, НаПринтер = Ложь) Экспорт
		
		Попытка
			Права = ДокументОбъект.Права;
		Исключение
			Права = глПраваУАТ;
		КонецПопытки;
		
		Попытка
			СоответствиеМакетов = ДокументОбъект.ПолучитьСписокПечатныхФорм();
		Исключение
			Предупреждение("Документ не имеет печатных форм!");
			Возврат Ложь;
		КонецПопытки;
		
		ЭтоДокумент = Метаданные.Документы.Содержит(ДокументОбъект.Метаданные());
	
		Если ЭтоДокумент И ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить
			И (НЕ уатПраваИНастройки.уатПраво("ПечатьНепроведенных", Права)) Тогда
			
			Сообщить("Недостаточно полномочий для печати непроведенного документа!"); 
			Возврат Ложь;
		КонецЕсли;
				
		Если НазваниеМакета = "" Тогда
			НазваниеМакета = уатПолучитьПечатнуюФормуПоУмолчанию(ДокументОбъект.Метаданные().Имя, СоответствиеМакетов);
		КонецЕсли;
		
		Если Пользователь = Неопределено Тогда
			Пользователь = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		
		Если ФормаДокумента = Неопределено Тогда
			Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ПечатьДокументовБезПредварительногоПросмотра") Тогда
				ДокументОбъект.Печать(НазваниеМакета, , Истина);
			Иначе
				ДокументОбъект.Печать(НазваниеМакета);
			КонецЕсли;
		Иначе
			Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, "ПечатьДокументовБезПредварительногоПросмотра") Тогда
				ДокументОбъект.Печать(НазваниеМакета, , Истина, ФормаДокумента);
			Иначе
				ДокументОбъект.Печать(НазваниеМакета, , , ФормаДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
	КонецФункции // НапечататьДокументПоУмолчанию()
	
	// Сохраняет в настройках пользователя имя кнопки печати,
	// которая определяет макет печатной формы по умолчанию.
	//
	// Параметры:
	//  ИмяОбъекта     - строка, содержащая имя объекта, для которого ищется макет печатной формы
	//  НазваниеМакета - строка, определяет название текущего макета печатной формы,
	//                   которое совпадает с текстом на кнопке печати в диалоге.
	//
	Процедура уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, НазваниеМакета) Экспорт
		
		СохранитьЗначение(ИмяОбъекта + "МакетПечати", НазваниеМакета);
		
	КонецПроцедуры // СохранитьТекущуюКнопкуПечати()
	
	// Функция возвращает признак защищать таблицу от редактирования или нет.
	//
	// Параметры:
	//  нет.
	//
	// Возвращаемое значение:
	//  Истина - если таблицу необходимо защитить от редактирования, иначе Ложь.
	//
	Функция уатЗащитаТаблиц() Экспорт
		
		Возврат Ложь;
	КонецФункции // ЗащитаТаблиц()
	
#КонецЕсли

	// Выводит на печать подготовленный макет 
	//
	// Параметры:
	//  ПечДокумент           - ТабличныйДокумент, макет на печать,
	//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
	//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
	//  Заголовок             - Заголовок окна табличного документа
	//
	Процедура уатНапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Права = Неопределено) Экспорт
		
		
		Если ПечДокумент = Неопределено тогда
			Возврат;
		КонецЕсли;
		
		// Получить необходимое количество копий
		Если КоличествоЭкземпляров < 1 Тогда
			ПечДокумент.КоличествоЭкземпляров = 1;
		Иначе
			ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
		КонецЕсли;
		
		Если НЕ ПечДокумент.АвтоМасштаб
			И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
			ПечДокумент.АвтоМасштаб = Истина;
		КонецЕсли;
		
		Если НаПринтер Тогда
			
			ПечДокумент.Напечатать();
			
		Иначе
			
			// Отобразить печатный документ на экране
			ПечДокумент.ОтображатьЗаголовки = Ложь;
			ПечДокумент.ОтображатьСетку     = Ложь;
			
			Если Права <>  Неопределено тогда
				//ПечДокумент.Защита              = уатПраваИНастройки.уатПраво("ЗащитаПечатныхФорм", Права);
				ПечДокумент.ТолькоПросмотр      = уатПраваИНастройки.уатПраво("ОткрытиеПечатныхФормДокументовВРежимеПросмотра", Права);
			Иначе
				//ПечДокумент.Защита              = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(глЗначениеПеременной("глТекущийПользователь"), ПланыВидовХарактеристик.уатПраваИНастройки.ЗащитаПечатныхФорм);
				ПечДокумент.ТолькоПросмотр      = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(глЗначениеПеременной("глТекущийПользователь"), ПланыВидовХарактеристик.уатПраваИНастройки.ОткрытиеПечатныхФормДокументовВРежимеПросмотра);
			КонецЕсли;
				
			ПечДокумент.Показать(Заголовок);
			
		КонецЕсли;
		
		
	КонецПроцедуры // НапечататьДокумент()
		
	// Функция формирует представление заголовка документа
	//
	// Возвращаемое значение:
	//  Строка - представление номера документа
	//
	Функция уатСформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт
		Возврат НазваниеДокумента + " № " + уатПолучитьНомерНаПечать(ДокументОбъект)
		+ " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'");
	КонецФункции // СформироватьЗаголовокДокумента()
	
		// Процедура предназначена для преобразования номера документа.
	//
	// Параметры:
	//  Документ - (ДокументСсылка), документ, чей номер надо получить для печати.
	//
	// Возвращаемое значение.
	//  Строка - номер документа для печати
	//
	Функция уатПолучитьНомерНаПечать(Документ) Экспорт
		
		Если Документ = Неопределено Тогда 
			Возврат 0;
		КонецЕсли;
		
		Номер = СокрЛП(Документ.Номер);
		
		Префикс = "";
		Если ТипЗнч(Документ) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			Если ЗначениеЗаполнено(Документ.Организация) Тогда
				Префикс = СокрЛП(Документ.Организация.Префикс);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Документ) = Тип("Структура") Тогда
			
			Префикс     = СокрЛП(Документ.Организация.Префикс);
			
		Иначе
			
			МетаданныеДокумента = Документ.Метаданные();
			
			Если уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
				
				Если ЗначениеЗаполнено(Документ.Организация) Тогда
					Префикс = СокрЛП(Документ.Организация.Префикс);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// удаление префикса из номера документа
		Если Найти(Номер, Префикс)=1 Тогда 
			Номер = Сред(Номер, СтрДлина(Префикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер=Сред(Номер, 2);
		КонецЦикла;
		
		Возврат Номер;
		
	КонецФункции // уатПолучитьНомерНаПечать()
	
	// Функция формирует фамилию, имя и отчество одной строкой
	//
	// Параметры
	//  Фамилия  - фамилия физ. лица.
	//  Имя      - имя физ. лица.
	//  Отчество - отчество физ. лица.
	//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы,
	//                если Ложь - фамилию и полностью имя и отчество
	//
	// Возвращаемое значение 
	//  Фамилия, имя, отчество одной строкой.
	//
	Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт
		
		Если ФИОКратко Тогда
			Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
			?(НЕ ПустаяСтрока(Отчество) , 
			Лев(Отчество,1)+".", ""), ""), "");
		Иначе
			Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя + 
			?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
		КонецЕсли;
		
	КонецФункции // ПолучитьФамилиюИмяОтчество()
	
	// Получение представления для документа, удостоверяющего личность
	//
	// Параметры
	//  ДанныеФизЛица  – Коллекция данных физ. лица (структура, строка таблицы, ...), содержащая значения: 
	//                   ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан  
	//
	// Возвращаемое значение:
	//   Строка   – Представление документа, удостоверяющего личность
	//
	Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица) Экспорт
		
		Возврат Строка(ДанныеФизЛица.ДокументВид) + " серия " +
		ДанныеФизЛица.ДокументСерия       + ", номер " +
		ДанныеФизЛица.ДокументНомер       + ", выданный " +
		Формат(ДанныеФизЛица.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
		ДанныеФизЛица.ДокументКемВыдан;
		
	КонецФункции // ПолучитьПредставлениеДокументаФизЛица()
	
	// Функция возвращает совокупность данных о физическом лице в виде структуры, 
	// В совокупность данных входит ФИО, должность в заданной организации, 
	// паспортные данные и др.
	//
	// Параметры:
	//  Организация - СправочникСсылка.Организации - организация, по которой
	//                определяется должность и подразделение работника
	//  ФизЛицо     - СправочникСсылка.ФизическиеЛица - физическое лицо,
	//                по которому возвращается совокупность данных
	//  ДатаСреза   - Дата - дата, на которую считываются данные
	//  ФИОКратко   - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы,
	//                если Ложь - фамилию и полностью имя и отчество
	//
	// Возвращаемое значение:
	//  Структура    - Структура с совокупностью данных о физическом лице:
	//                 - Фамилия
	//                 - Имя
	//                 - Отчество
	//                 - Представление (Фамилия И.О.)
	//                 - Подразделение
	//                 - ДокументВид
	//                 - ДокументСерия
	//                 - ДокументНомер
	//                 - ДокументДатаВыдачи
	//                 - ДокументКемВыдан
	//                 - ДокументКодПодразделения
	//
	Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
		//TODO: Запрос дико долгий, 0.41 в файловой базе, тормозит
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
		ЗапросПоЛицам.Текст =
		"ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ТабельныйНомер,
		|	РаботникиОрганизацийСрезПоследних.Должность,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
		|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения
		|ИЗ
		|	(ВЫБРАТЬ Ссылка КАК ФизЛицо ИЗ Справочник.ФизическиеЛица ГДЕ Ссылка = &ФизЛицо) КАК ФизЛица
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
		|	ПО ФизЛица.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
		|	ПО ФизЛица.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		(ВЫБРАТЬ 
		|			РаботникиОрганизацийСрезПоследних.ТабельныйНомер КАК ТабельныйНомер,
		|			РаботникиОрганизацийСрезПоследних.Период,
		|			РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
		|			РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
		|			РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
		|		ИЗ
		|			РегистрСведений.уатСведенияОСотрудниках.СрезПоследних(&ДатаСреза, Сотрудник.ФизЛицо = &ФизЛицо 
		|                                                                           и (Сотрудник.ДатаУвольнения = ДатаВремя(1,1,1) или Сотрудник.ДатаУвольнения >= &ДатаСреза)
		|                                                                           И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
		|		) КАК РаботникиОрганизацийСрезПоследних
		|	ПО ФизЛица.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо
		|ORDER BY РаботникиОрганизацийСрезПоследних.Период desc
		|";
		
		Данные = ЗапросПоЛицам.Выполнить().Выбрать();
		Данные.Следующий();
		
		Результат = Новый Структура("Сотрудник,Фамилия, Имя, Отчество, Представление, 
		|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
		|ДокументВид, ДокументСерия, ДокументНомер,  
		|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, 
		|ПредставлениеДокумента");
		
		ЗаполнитьЗначенияСвойств(Результат, Данные);
		
		Результат.Представление          = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество, ФИОКратко);
		Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);
		
		Возврат Результат;
		
	КонецФункции // ДанныеФизЛица
	
#Если Клиент Тогда
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

	// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
	Функция ПроверитьМодифицированность(Документ) Экспорт

		Результат = Ложь;

		Если Документ.Модифицированность() Тогда

			Проведен    = Метаданные.Документы.Содержит(Документ.Метаданные()) И Документ.Проведен;
			СтрПроведен = ?(Проведен, " и провести","");

			Ответ = Вопрос("Документ изменен. Для печати его необходимо записать"+ СтрПроведен +".
			               |Записать" + СтрПроведен + "?",
			               РежимДиалогаВопрос.ОКОтмена, , 
			               КодВозвратаДиалога.Отмена,
			               "Документ изменен");

			Если Ответ = КодВозвратаДиалога.ОК Тогда

				Если Проведен Тогда

					ДатаДока = НачалоДня(Документ.Дата);
					ДатаДня  = НачалоДня(ТекущаяДата());

					Попытка
						
						Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
							Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
						Иначе
							Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;

					Исключение

						Предупреждение("Операция не выполнена!");
						Возврат Результат = Истина;

					КонецПопытки;

				Иначе
					Документ.Записать();
				КонецЕсли;

				Результат = Истина;

			КонецЕсли;

		Иначе
			Результат = Истина;
		КонецЕсли;

		Возврат Результат;

	КонецФункции // ПроверитьМодифицированность()

	
	//=================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ ПОДБОРА
	
	// Универсальная процедура, которая инициирует механизм подбора
	// номенклатуры в документы (открывает основную форму обработки подбор).
	//
	// Параметры:
	//  ФормаДокумента - форма документа, в который осуществляется подбор,
	//  СтруктураПараметров - параметры, которые передаются в форму подбора.
	//
	Процедура уатОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт
		
		МетаданныеДокумента = ФормаДокумента.ДокументОбъект.Метаданные();
		
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураПараметров.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
			// Добавляем обработчики в форму
					
			Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл
				Если уатЕстьРеквизитДокумента(ЭлементСтруктурыПараметров.Ключ, МетаданныеДокумента) Тогда
					ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ЭлементСтруктурыПараметров.Ключ, "ОбновитьФормуПодбора", Ложь);
				КонецЕсли;
			КонецЦикла;
			
			// Открываем форму подбора.
			ФормаПодбора = Обработки.уатПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
			ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
			ФормаПодбора.Открыть();
			
		ИначеЕсли Метаданные.НайтиПоПолномуИмени("Обработка.ПодборНоменклатуры") <> Неопределено Тогда
			Попытка
				ОбработкаТабличныхЧастей.ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора);
			Исключение
				РаботаСДиалогами.ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, МетаданныеДокумента, ФормаПодбора);
			КонецПопытки;	
		Иначе
			Предупреждение("Для возможности использования режима ""Подбор"",
			|в учетной политике УАТ должен быть установлен флажок
			|""Ведение складского учета средствами УАТ""");
		КонецЕсли;
		
	КонецПроцедуры // ОбработкаТабличныхЧастей.ОткрытьПодборНоменклатуры()
	
	// Процедура, которая обновляет параметры подбора номенклатуры и
	// инициирует обновление формы подбора, если она открыта
	//
	// Параметры:
	//  ДокументОбъект           - объект документа, в котором производится подбор.
	//  ФормаПодбораНоменклатуры - форма подбора номенклатуры,
	//  ПолноеИмяРеквизита       - полное имя реквизита, который изменился.
	//
	Процедура уатОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаПодбораНоменклатуры, ПолноеИмяРеквизита) Экспорт
		
		Если ФормаПодбораНоменклатуры.Открыта() Тогда
			
			ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");
			
			Если ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяРеквизита) Тогда
				
				ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяРеквизита, ДокументОбъект[ИмяРеквизита]);
				
				Родитель = ФормаПодбораНоменклатуры.ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры // уатОбновитьПараметрыИФормуПодбора
	
#КонецЕсли

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт
	
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // уатЕстьРеквизитДокумента()

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры: 
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ЕстьТабЧастьДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт
	
	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);
	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;
	Иначе
		Если ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Позволяет определить есть ли такой регистр сведения
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьДокумент(НаименованиеДокумента) Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("Документ."+СокрЛП(НаименованиеДокумента)) = Неопределено Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;;	
	
	Возврат Результат;
	
КонецФункции


// Позволяет определить есть ли такой регистр сведения
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьКонстанта(НаименованиеКонстанты) Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("Константа."+СокрЛП(НаименованиеКонстанты)) = Неопределено Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;;	
	
	Возврат Результат;
	
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки справочника
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьРеквизитСправочника(ИмяРеквизита, СправочникОбъект) Экспорт
	
	Попытка
		МетаданныеСправочника = СправочникОбъект.Метаданные();
		Если МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли; 
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции // ЕстьРеквизитСправочника()

// Позволяет определить есть ли среди реквизитов шапки справочника
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеСправочника - объект описания метаданных справочника, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция уатЕстьИзмерениеРегистра(ИмяРеквизита, Регистр) Экспорт
	
	Попытка
		Если Регистр.Метаданные().Измерения.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли; 
	Исключение
		Возврат Ложь;
	КонецПопытки;	
	
КонецФункции // 

// Процедура выполняет установку границ запрета изменения данных
//
Процедура уатУстановитьГраницыЗапретаИзмененияДанных() Экспорт
	
	//Если РольДоступна("ПолныеПрава") Тогда
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
	Возврат;
	
КонецПроцедуры

// Функция возвращает строковое представление отбора
// Параметры:
//   Отбор  	  - объект типа Отбор (напр.СправочникСписок.Отбор)
// Возвращаемое значение:
//   Строка       - Строковое представление отбора
//
Функция уатПолучитьПредставлениеОтбора(Отборы) Экспорт
	Результат = "";
	Для Каждого Отбор из Отборы Цикл
		Если Отбор.Использование Тогда
			
			Если Отбор.ТипЗначения = Новый ОписаниеТипов("Дата") и уатОбщегоНазначения.уатЗначениеНеЗаполнено(Отбор.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = Результат + " ";
			Результат = Результат + СтрЗаменить(Отбор.Представление, "_", " ")  + " ";
			
			Если Отбор.ВидСравнения = ВидСравнения.Равно Тогда
				Результат = Результат + "= " + СокрЛП(Отбор.Значение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Больше Тогда
				Результат = Результат + "> " + СокрЛП(Отбор.Значение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Меньше Тогда
				Результат = Результат + "< " + СокрЛП(Отбор.Значение);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.Интервал Тогда
				Результат = Результат + НСтр("ru=' > '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + НСтр("ru=' И < '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
				Результат = Результат + НСтр("ru=' >= '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + НСтр("ru=' И <= '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
				Результат = Результат + НСтр("ru=' >= '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + НСтр("ru=' И < '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
				Результат = Результат + НСтр("ru=' > '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеС);
				Результат = Результат + НСтр("ru=' И <= '");
				Результат = Результат + СокрЛП(Отбор.ЗначениеПо);
			ИначеЕсли Отбор.ВидСравнения = ВидСравнения.ВСписке
				Или Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
				Или Отбор.ВидСравнения = ВидСравнения.НеВСписке
				Или Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				Результат = Результат + Нрег(Отбор.ВидСравнения) + " (" + СокрЛП(Отбор.Значение) + ")";
			Иначе
				Результат = Результат + Нрег(Отбор.ВидСравнения) + " " + СокрЛП(Отбор.Значение);
			КонецЕсли;
			Результат = Результат + ";";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция уатФормаМножественногоЧисла(Слово1, Слово2, Слово3, ЦелоеЧисло) Экспорт
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;
	
КонецФункции

// Функция формирует список элементов перечисления
//
// Параметры
//  ИмяПеречисления - имя перечисления, как оно задано в конфигураторе
//
// Возвращаемое значение:
//   СписокЗначений - список элементов перечисления
//
Функция уатПолучитьСписокЭлементовПеречисления(ИмяПеречисления) Экспорт
	
	СписокЭлементовПеречисления = Новый СписокЗначений;
	
	Попытка
		КоллекцияЭлементовПеречисления = Перечисления[ИмяПеречисления];
	Исключение
		Возврат СписокЭлементовПеречисления;
	КонецПопытки;
	
	Для каждого ЭлементПеречисления Из КоллекцияЭлементовПеречисления Цикл
		СписокЭлементовПеречисления.Добавить(ЭлементПеречисления, Строка(ЭлементПеречисления));
	КонецЦикла;
	
	Возврат СписокЭлементовПеречисления;
	
КонецФункции // ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления()

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

 //Функция возвращает информацию об ответственных лицах организации и их должностях 
Функция уатОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Возврат уатОтветственныеЛицаОрганизации(Организация, ДатаСреза, Исполнитель);
КонецФункции // РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций()

//Функция возвращает информацию об ответственных лицах организации и их должностях 
Функция уатОтветственныеЛицаОрганизации(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт
	
	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");
	Если Метаданные.РегистрыСведений.Найти("ОтветственныеЛицаОрганизации") <> Неопределено Тогда
		ИмяОбъекта = "ОтветственныеЛицаОрганизации";
	Иначе
		ИмяОбъекта = "ОтветственныеЛицаОрганизаций";	
	КонецЕсли;
	
	Если Организация <> Неопределено тогда
		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = "
		|ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений." + ИмяОбъекта + ".СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			Если Выборка.ОтветственноеЛицо = Перечисления[ИмяОбъекта].Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления[ИмяОбъекта].ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления[ИмяОбъекта].Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;

			КонецЕсли;

		КонецЦикла;

		Если Исполнитель <> Неопределено тогда

			ЗапросПоИсполнителям = Новый Запрос();
			ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
			ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
			ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
			ЗапросПоИсполнителям.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
			ЗапросПоИсполнителям.Текст = "
			|ВЫБРАТЬ
			|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
			|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL ТОГДА
			|		РаботникиОрганизацииСрезПоследних.Физлицо.Наименование
			|	ИНАЧЕ
			|		ФИОФизЛицСрезПоследних.Фамилия
			|		+	ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА
			|				"" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ
			|				""""
			|			КОНЕЦ
			|		+ 	ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА
			|				"" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ
			|				""""
			|			КОНЕЦ
			|		КОНЕЦ КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.РаботникиОрганизации.СрезПоследних(&ДатаСреза, ПодразделениеОрганизации.Владелец = &Организация И ФизЛицо = &Исполнитель) КАК РаботникиОрганизацииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
			|		ПО РаботникиОрганизацииСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
			|
			|ГДЕ
			|	РаботникиОрганизацииСрезПоследних.Приказ.ВидЗанятости = &ОсновноеМестоРаботы";
			ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

			Если ВыборкаИсполнителей.Следующий() тогда
				Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
				Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации()

// Функция "расщепляет" строку на подстроки заданной длины.
//
//	Параметры: 
//		ИсходнаяСтрока - строка, которую необходимо разложить на подстроки. 
//						 Параметр передается по значению.
//		ДлинаПодстроки - число, длина требуемой подстроки.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция уатРазбитьСтрокуНаПодстроки(ИсходнаяСтрока, ДлинаПодстроки) Экспорт
	МассивСтрок = Новый Массив;
	СтрокаРазделителей = Новый Массив;
	СтрокаРазделителей.Добавить(",");
	СтрокаРазделителей.Добавить(".");
	СтрокаРазделителей.Добавить("-");
	СтрокаРазделителей.Добавить(":");
	СтрокаРазделителей.Добавить(";");
	
	Сч1 = ДлинаПодстроки;
	Пока СтрДлина(ИсходнаяСтрока) > ДлинаПодстроки Цикл
		НайденРазделитель = 0;
		ЧастьСтроки = Лев(ИсходнаяСтрока, ДлинаПодстроки);
		Пока Сч1 <> 1 Цикл
			Для Каждого Разделитель Из СтрокаРазделителей Цикл
				Если Найти(Сред(ЧастьСтроки, Сч1, 1), Разделитель) > 0 Тогда
					НайденРазделитель = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НайденРазделитель Тогда
				Прервать
			КонецЕсли;
			Сч1 = Сч1 - 1;
		КонецЦикла;
		Если НайденРазделитель Тогда
			МассивСтрок.Добавить(Лев(ИсходнаяСтрока, Сч1));
			ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Сч1 + 1, СтрДлина(ИсходнаяСтрока)));
		Иначе
			МассивСтрок.Добавить(Лев(ИсходнаяСтрока, ДлинаПодстроки-1) + "-");
			ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, ДлинаПодстроки, СтрДлина(ИсходнаяСтрока)));
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрок.Добавить(ИсходнаяСтрока);
	
	Возврат МассивСтрок;
КонецФункции

#Если Клиент Тогда
	
	// Заполняет список пунктов подменю выбора печатных форм значениями переданного соответствия.
	// Всем кнопкам назначается одно переданное действие.
	//
	// Параметры:
	//  ЭлементМеню            - кнопка командной панели формы, соответствующая подменю выбора печатных форм, 
	//                           которое надо заполнить, 
	//  СоответствиеМакетов    - соответствие, содержащее список макетов печатных форм 
	//                           объекта для заполнения пунктов подменю, 
	//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
	//
	Процедура уатУстановитьПодменюВыбораПечатнойФормы(ЭлементМеню, СписокМакетов, ОбъектОбработкиВыбора) Экспорт
		
		Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
			Для каждого ЭлементЗаполнения Из СписокМакетов Цикл
				ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Значение, ТипКнопкиКоманднойПанели.Действие, 
				ЭлементЗаполнения.Ключ, ОбъектОбработкиВыбора);
			КонецЦикла;
		ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
			Для каждого СтрокаМакетаВСписке Из СписокМакетов Цикл			
				Если СтрокаМакетаВСписке.Значение = Неопределено Тогда
					ЭлементМеню.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
				Иначе			
					Если ТипЗнч(СтрокаМакетаВСписке.Значение) = Тип("Строка") Тогда
						ЭлементМеню.Кнопки.Добавить(СтрокаМакетаВСписке.Значение, ТипКнопкиКоманднойПанели.Действие, 
						СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
					Иначе
						ЭлементМеню.Кнопки.Добавить(СтрЗаменить(СтрокаМакетаВСписке.Значение.УникальныйИдентификатор(), "-", "_"), ТипКнопкиКоманднойПанели.Действие, 
						СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
	КонецПроцедуры // уатУстановитьПодменюВыбораПечатнойФормы()
	
	// Получает из текущих настроек пользователя имя кнопки печати,
	// которая определяет макет печатной формы по умолчанию.
	// Если не найдено, то берется первый макет в структуре макетов печатных форм,
	// и сохраняется в настройках пользователя.
	//
	// Параметры: 
	//  ИмяОбъекта          - строка, содержащая имя объекта, для которого ищется макет печатной формы
	//  ФормаДиалога        - форма редактируемого объекта,
	//  СоответствиеМакетов - соответствие, содержащее названия (ключ) и имена (значение) 
	//                        макетов печатных форм документа
	//
	Процедура уатУстановитьКнопкуПечати(ИмяОбъекта, ФормаДиалога, СписокМакетов, МакетФормыПоУмолчанию = Неопределено) Экспорт
		
		Перем НазваниеМакета;
		
		МакетПоУмолчанию = ВосстановитьЗначение(ИмяОбъекта + "МакетПечати");
		
		Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
			// Пытаемся найти форму в соответствии
			ИмяМакета = СписокМакетов[МакетПоУмолчанию];
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИмяМакета) Тогда
				
				// Текущая печатная форма еще не найдена
				// Установим по умолчанию первую из сп иска
				Для каждого Элемент Из СписокМакетов Цикл
					МакетПоУмолчанию = Элемент.Ключ;
					Прервать;
				КонецЦикла; 
				уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, МакетПоУмолчанию);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
			
			Если ТипЗнч(МакетПоУмолчанию) = Тип("Строка") Тогда			
				СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
				Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
					Если СтрокаМакетаВСписке.Представление = МакетПоУмолчанию Тогда
						СтруктураМакета.Макет =  СтрокаМакетаВСписке.Значение;
						СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
						Прервать;
					КонецЕсли;
				КонецЦикла;   			
			ИначеЕсли ТипЗнч(МакетПоУмолчанию) = Тип("Структура") Тогда
				ЕстьВСписке = СписокМакетов.НайтиПоЗначению(МакетПоУмолчанию.Макет)<>Неопределено;
				Если ЕстьВСписке Тогда
					СтруктураМакета = МакетПоУмолчанию;
				Иначе
					СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
				КонецЕсли;
			Иначе			
				СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
			КонецЕсли;
			
			Если СтруктураМакета.Макет = Неопределено И СписокМакетов.Количество() > 0 Тогда			
				СтрокаМакетаВСписке = СписокМакетов[0];
				СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
				СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;
			КонецЕсли;
			
			уатСохранитьТекущуюКнопкуПечати(ИмяОбъекта, СтруктураМакета);
			МакетПоУмолчанию = СтруктураМакета.ПредставлениеМакета;
			
			МакетФормыПоУмолчанию = СтруктураМакета.Макет;
			
		КонецЕсли;
		
		// Изменим название кнопки печати
		ФормаДиалога.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = МакетПоУмолчанию;
		
	КонецПроцедуры // УстановитьКнопкуПечати()
	
	// Процедура дополняет список печатных форм объекта из справочника "Дополнительные печатные формы"
	Процедура уатДобавитьВСписокДополнительныеФормы(СписокМакетов, МетаданныеОбъекта) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Ссылка, Ссылка.Наименование 
		|ИЗ Справочник.уатДополнительныеПечатныеФормы.Принадлежность
		|ГДЕ НЕ Ссылка.ПометкаУдаления И СсылкаОбъекта = &Ссылка";
		
		Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
			Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		Иначе
			Возврат;
		КонецЕсли;
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		БылРазделитель = Ложь;
		Пока Выборка.Следующий() Цикл
			Если Не БылРазделитель Тогда
				СписокМакетов.Добавить(Неопределено);			
				БылРазделитель = Истина;
			КонецЕсли;
			СписокМакетов.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;	
		
	КонецПроцедуры // ДобавитьВСписокДополнительныеФормы()
	
	// Возвращает картинку, соответствующую представлению типу, переданному 
	// в функцию
	// 
	// Параметры:
	//  Тип - строка, представление типа
	//
	// Возвращаемое значение:
	//  Картинка, соответствующая переданному типу
	//
	Функция уатВернутьСтандартнуюКартинку(Тип) Экспорт
		
		Если Тип = "Справочник" Тогда
			Возврат БиблиотекаКартинок.СправочникОбъект;
		ИначеЕсли Тип = "Справочники" ИЛИ Тип="СправочникОбъект" Тогда
			Возврат БиблиотекаКартинок.Справочник;
		ИначеЕсли Тип = "Документ" ИЛИ Тип="ДокументОбъект" Тогда
			Возврат БиблиотекаКартинок.ДокументОбъект;
		ИначеЕсли Тип = "Документы" Тогда
			Возврат БиблиотекаКартинок.Документ;
		ИначеЕсли Тип = "ЖурналыДокументов" Или Тип = "ЖурналДокументов" Тогда
			Возврат БиблиотекаКартинок.ЖурналДокументов;
		ИначеЕсли Тип = "Отчеты" Или Тип = "Отчет" Тогда
			Возврат БиблиотекаКартинок.Отчет;
		ИначеЕсли Тип = "Обработки" Или Тип = "Обработка" Тогда
			Возврат БиблиотекаКартинок.Обработка;
		ИначеЕсли Тип = "ПланыВидовХарактеристик" Тогда
			Возврат БиблиотекаКартинок.ПланВидовХарактеристик;
		ИначеЕсли Тип = "ПланВидовХарактеристик" Тогда
			Возврат БиблиотекаКартинок.ПланВидовХарактеристикОбъект;
		ИначеЕсли Тип = "ПланыОбмена" Тогда
			Возврат БиблиотекаКартинок.ПланОбмена;
		ИначеЕсли Тип = "ПланОбмена" Тогда
			Возврат БиблиотекаКартинок.ПланОбменаОбъект;
		ИначеЕсли Тип = "ПланыСчетов" Тогда
			Возврат БиблиотекаКартинок.ПланСчетов;
		ИначеЕсли Тип = "ПланСчетов" Тогда
			Возврат БиблиотекаКартинок.ПланСчетовОбъект;
		ИначеЕсли Тип = "ПланыВидовРасчета" Тогда
			Возврат БиблиотекаКартинок.ПланВидовРасчета;
		ИначеЕсли Тип = "ПланВидовРасчета" Тогда
			Возврат БиблиотекаКартинок.ПланВидовРасчетаОбъект;
		ИначеЕсли Тип = "РегистрыСведений" Тогда
			Возврат БиблиотекаКартинок.РегистрСведений;
		ИначеЕсли Тип = "РегистрСведений" Тогда
			Возврат БиблиотекаКартинок.РегистрСведенийЗапись;
		ИначеЕсли Тип = "РегистрыНакопления" Или Тип = "РегистрНакопления" Тогда
			Возврат БиблиотекаКартинок.РегистрНакопления;
		ИначеЕсли Тип = "РегистрыБухгалтерии" Или Тип = "РегистрБухгалтерии " Тогда
			Возврат БиблиотекаКартинок.РегистрБухгалтерии;
		ИначеЕсли Тип = "РегистрыРасчета" Или Тип = "РегистрРасчета" Тогда
			Возврат БиблиотекаКартинок.РегистрРасчета;
		ИначеЕсли Тип = "БизнесПроцессы" Тогда
			Возврат БиблиотекаКартинок.БизнесПроцесс;
		ИначеЕсли Тип = "БизнесПроцесс" Или Тип = "Бизнес-процесс" Тогда
			Возврат БиблиотекаКартинок.БизнесПроцессОбъект;
		ИначеЕсли Тип = "Константы" ИЛИ Тип = "Константа" Тогда
			Возврат БиблиотекаКартинок.Константа;
		ИначеЕсли Тип = "Задачи" Тогда
			Возврат БиблиотекаКартинок.Задача;
		ИначеЕсли Тип = "Задача" Тогда
			Возврат БиблиотекаКартинок.ЗадачаОбъект;
		ИначеЕсли Тип = "Папка" Тогда
			Возврат БиблиотекаКартинок.уатПапка;
		ИначеЕсли Тип = "Избранное" Тогда
			Возврат БиблиотекаКартинок.уатИзбранное;
		ИначеЕсли Тип = "ТабличныйДокумент" Тогда
			Возврат БиблиотекаКартинок.ПиктограммаФайла_MXL;
		Иначе
			Возврат БиблиотекаКартинок.уатПредупреждение;
		КонецЕсли;
		
	КонецФункции // обВернутьСтандартнуюКартинку()
    	
	// Процедура вызывается для вывода сообщений пользователю
	//
	// Параметры:
	//  СсылкаСправочника - ссылка на справочник, объект которого проверяется;
	//  ИмяРеквизита - строка, имя реквизита, который не заполнен.
	//
	Процедура уатСообщитьПользователюНеЗаполненРеквизит(СсылкаСправочника, ИмяРеквизита) Экспорт

	ТекстСообщения = "Перед записью в элементе справочника """ + СсылкаСправочника.Метаданные().Синоним + """ необходимо заполнить """ + ИмяРеквизита + """!";
	
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);

КонецПроцедуры // уатСообщитьПользователюНеЗаполненРеквизит()

#КонецЕсли

//=================================================================================
//ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НУМЕРАЦИЕЙ И ПРЕФИКСАЦИЕЙ ОБЪЕКТОВ

// Процедура устанавливает значение префикса для документа
//
// Параметры:
//	ДокументОбъект - ссылка на документ, для которого требуется сформировать префикс
//	Префикс - параметры ссылка,для возврата значения префикса
//
Процедура уатДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	// Если  нет реквизита "Организация" или для нее не задан префикс, то 
	// используем пустой префикс,
	// иначе используем префикс организации.
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если Не уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	 Или НЕ ЗначениеЗаполнено(ДокументОбъект.Организация.Префикс) Тогда

		Префикс = "0";

	Иначе

		Префикс = ДокументОбъект.Организация.Префикс;

	КонецЕсли;
	
Конецпроцедуры

// Процедура выполняет добавление префикса узла
//
// Параметры:
//  Префикс      - добавляемый префикс
Процедура уатДобавитьПрефиксУзла(Префикс) Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("ПараметрСеанса.ИспользованиеРИБ") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПрефиксУзла = ПланыОбмена.уатПолный.ЭтотУзел().ПрефиксУзла;
	Если  СокрЛП(ПрефиксУзла)<>"" Тогда
		Префикс = ПрефиксУзла + Префикс;
	КонецЕСЛИ;
	
	ПрефиксУзла = ПланыОбмена.ДИСП.ЭтотУзел().ПрефиксУзла;
	Если  СокрЛП(ПрефиксУзла)<>"" Тогда
		Префикс = ПрефиксУзла + Префикс;
	КонецЕСЛИ;
	
КонецПроцедуры

//	Процедура очистки введенного кода/номера объекта
// Параметры
//  ЭтотОбъект  - объект.
//	КодНомер - имя обрабатываемого реквизита (Код или Номер)
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать 
//                 пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура уатСброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, КодНомер, ПодменюДействия = Неопределено, ПолеВводаНомера) Экспорт
	
	ОбъектМетаданные = ЭтотОбъект.Метаданные();
	
	Если ОбъектМетаданные.Реквизиты.Найти("Организация") = Неопределено Тогда
		ЭтотОбъект[КодНомер] = "";
	Иначе
		ДлинаПрефикса = СтрДлина(ЭтотОбъект.Организация.Префикс);
		Если ДлинаПрефикса = 0 ИЛИ Лев(ПолеВводаНомера.Значение, ДлинаПрефикса) <> ЭтотОбъект.Организация.Префикс Тогда
			ЭтотОбъект[КодНомер] = "";
		КонецЕсли;
	КонецЕсли;
	
	//Если ЭтотОбъект[КодНомер] = "" Тогда
	//	ОбновитьПодсказкуКодНомерОбъекта(ОбъектМетаданные, ПодменюДействия, ПолеВводаНомера);
	//КонецЕсли;
		
КонецПроцедуры // СброситьУстановленныйКодНомерОбъекта()

#Если Клиент Тогда
// Процедура программно добавляет в меню "Действия" кнопку редактирования номера документа
//
// Параметры:
//	ПодменюДействия - ссылка на элемент формы , меню в которое добавляется кнопка
//
Процедура уатДобавитьВМенюДействияКнопкуРедактированияНомера(ПодменюДействия) Экспорт
	
	уатДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "номер");
	
КонецПроцедуры

// Процедура программно добавляет в меню "Действия" кнопку редактирования кода объекта
//
// Параметры:
//	ПодменюДействия - ссылка на элемент формы , меню в которое добавляется кнопка
//
Процедура уатДобавитьВМенюДействияКнопкуРедактированияКода(ПодменюДействия) Экспорт
	
	уатДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, "код");
	
КонецПроцедуры

// Процедура добавляет кнопку редактирования кода/номера на форму
// Параметры:
//  ПодменюДействия - подменю формы куда будет производиться добавление
//  КодНомер     - текст 
Процедура уатДобавитьВМенюДействияКнопкуПоТипуОбъекта(ПодменюДействия, КодНомер)
	
	Обработчик = Новый Действие("ДействияФормыРедактировать" + КодНомер);
	Если ПодменюДействия.Кнопки.Найти("РазделительРедактированияКодаНомера") = Неопределено Тогда
		ПодменюДействия.Кнопки.Добавить("РазделительРедактированияКодаНомера", ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли;
	Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") = Неопределено Тогда
		Кнопка = ПодменюДействия.Кнопки.Добавить("РедактироватьКодНомер", ТипКнопкиКоманднойПанели.Действие, "Редактировать " + КодНомер, Обработчик);
		//Кнопка.ИзменяетДанные = Истина;
	КонецЕсли;	
	
КонецПроцедуры

//	Процедура установки флага ТолькоПросмотр для поля ввода кода/номера в зависимости от стратегии автонумерации объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта
//  ФормаОбъекта - форма объекта, табличное поле
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать 
//                 пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//
Процедура уатУстановитьДоступностьПоляВводаНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	
	Если ФормаОбъекта.Автонумерация = АвтонумерацияВФорме.Авто Тогда
		Возврат;
	КонецЕсли;	
	
	СтратегияРедактирования = уатПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта);
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.Доступно Тогда
		Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") <> Неопределено Тогда
			ПодменюДействия.Кнопки.Удалить(ПодменюДействия.Кнопки.РедактироватьКодНомер);
		КонецЕсли;
		ПолеВводаНомера.ТолькоПросмотр = Ложь;		
	КонецЕсли;
	
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;		
	уатУстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования);	
		
КонецПроцедуры // УстановитьДоступностьПоляВводаНомера()

//	Процедура установки флага ТолькоПросмотр для поля ввода кода в зависимости от стратегии автонумерации объекта
//
// Параметры:
//  МетаданныеОбъекта  - метаданные объекта
//  ФормаОбъекта - форма объекта, табличное поле
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать 
//                 пункт "Редактировать код"
//  ПолеВводаНомера - поле вводе, связанное с кодом объекта
//
Процедура уатУстановитьДоступностьКолонкиКодаВСписке(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, КолонкаКода, ЭлементСписок) Экспорт
	
	СтратегияРедактирования = уатПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта);
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.Доступно Тогда
		Если ПодменюДействия.Кнопки.Найти("РедактироватьКодНомер") <> Неопределено Тогда
			ПодменюДействия.Кнопки.Удалить(ПодменюДействия.Кнопки.РедактироватьКодНомер);
		КонецЕсли;
		КолонкаКода.ТолькоПросмотр = Ложь;
	ИначеЕсли СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.НеДоступно Тогда
		КолонкаКода.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры // уатУстановитьДоступностьКолонкиКодаВСписке()

//	Возвращает стратегию нумерации для объекта
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерации для объекта
//
Функция уатПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта) Экспорт
	КэшСтратегииАвтонумерации = глЗначениеПеременной("КэшСтратегииАвтонумерации");
	СтратегияРедактирования = КэшСтратегииАвтонумерации[МетаданныеОбъекта];
	Если СтратегияРедактирования = Неопределено Тогда
		СтратегияРедактирования = уатПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта);
		КэшСтратегииАвтонумерации.Вставить(МетаданныеОбъекта, СтратегияРедактирования);
	КонецЕсли;		
	Возврат СтратегияРедактирования;
КонецФункции // ПолучитьСтратегиюРедактированияНомераОбъекта()

//	Возвращает стратегию нумерации для объекта, сохраненную в соотв. регистре сведений
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//
// Возвращаемое значение 
//  Стратегия нумерации для объекта
//
Функция уатПолучитьСтратегиюАвтонумерацииДляОбъекта(МетаданныеОбъекта)
	
	Перем ТипОбъекта;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "Справочники";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "Документы";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ТипОбъекта = "ПланыВидовХарактеристик";
	Иначе
		Возврат Перечисления.СтратегияРедактированияНомеровОбъектов.Недоступно;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтратегияРедактированияНомераОбъекта КАК СтратегияРедактированияНомераОбъекта
	|ИЗ 
	|	РегистрСведений.СтратегииРедактированияНомеровОбъектов
	|ГДЕ
	|	ТипОбъекта = &ТипОбъекта
	|	И ВидОбъекта = &ВидОбъекта";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("ВидОбъекта", МетаданныеОбъекта.Имя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтратегияРедактированияНомераОбъекта;
	Иначе
		Возврат Перечисления.СтратегияРедактированияНомеровОбъектов.Недоступно;
	КонецЕсли;	
	
КонецФункции // ПолучитьСтратегиюАвтонумерацииДляОбъекта()

//	Процедура установки текста подсказки для поля ввода кода/номера в зависимости от стратегии редактирования
//	и введенного значения
//
// Параметры
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать 
//                 пункт "Редактировать код/номер"
//	СтратегияРедактирования - стратегия автонумерации объекта
//
Процедура уатУстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, СтратегияРедактирования)
		
	КодНомерСтрокой = ПолеВводаНомера.Данные;		
	
	Если ТипЗнч(ПолеВводаНомера) = Тип("ПолеВвода") Тогда
		ПолеВвода = ПолеВводаНомера;
	Иначе
		ПолеВвода = ПолеВводаНомера.ЭлементУправления;
	КонецЕсли;	
	
	Если ПустаяСтрока(ПолеВвода.Значение) Тогда
		ПолеВвода.Подсказка =  КодНомерСтрокой + " будет присвоен при записи объекта.";
	Иначе
		ПолеВвода.Подсказка =  "";
	КонецЕсли;
	
	Если СтратегияРедактирования = Перечисления.СтратегияРедактированияНомеровОбъектов.Недоступно
		И НЕ ПодменюДействия.Кнопки.РедактироватьКодНомер.Пометка Тогда
		ПолеВвода.Подсказка =  ПолеВвода.Подсказка + ?(ПустаяСтрока(ПолеВвода.Подсказка), "", " ") 
									 + "Для возможности редактирования " + ?(КодНомерСтрокой = "Номер", "номера", "кода") + " используйте подменю ""Действия"".";
	КонецЕсли;
	
	Если ПустаяСтрока(ПолеВвода.Подсказка) Тогда
		Если КодНомерСтрокой = "Номер" Тогда
			ПолеВвода.Подсказка = "Номер документа";
		Иначе
			ПолеВвода.Подсказка = "Код справочника";
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры // УстановитьПодсказкуПоляВводаКодаНомера()

// Процедура изменения доступности "ручного" изменения кода/номера объекта
//
// Параметры
//  МетаданныеОбъекта  - метаданные объекта.
//  ФормаОбъекта      - форма объекта.
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать 
//                 пункт "Редактировать код/номер"
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПолеВводаНомераДубль - необязательный параметр, необходим в случаях, когда код/номер одновременно 
//                 связан с двумя элементами формы
//  КодНомерСтрокой - необязательный параметр, позволяет задать переназначить имя кода/номера при выводе 
//                 запроса на подтверждение
//
Процедура уатИзменениеВозможностиРедактированияНомера(МетаданныеОбъекта, ФормаОбъекта, ПодменюДействия, ПолеВводаНомера, ПолеВводаНомераДубль = Неопределено, ТекстВопроса = "") Экспорт
	
	Кнопка = ПодменюДействия.Кнопки.РедактироватьКодНомер;
	Если НЕ Кнопка.Пометка Тогда
		
		Если ПустаяСтрока(ТекстВопроса) Тогда			
			Если ВРЕГ(ПолеВводаНомера.Данные) = ВРЕГ("Код") Тогда
				ТекстВопроса = "Код присваивается автоматически при записи элемента, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить код вручную?"
			Иначе
				ТекстВопроса = "Номер документу присваивается автоматически при записи, самостоятельное его редактирование может привести к нарушению в нумерации в системе. Вы действительно хотите установить номер вручную?"
			КонецЕсли;
		КонецЕсли;		
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;				
	КонецЕсли;
	Кнопка.Пометка = Не Кнопка.Пометка;
	ПолеВводаНомера.ТолькоПросмотр = НЕ Кнопка.Пометка;
	ПолеВводаНомера.ПропускатьПриВводе = ПолеВводаНомера.ТолькоПросмотр;	
	ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера);
	
	Если ПолеВводаНомераДубль <> Неопределено Тогда
		ПолеВводаНомераДубль.ТолькоПросмотр = ПолеВводаНомера.ТолькоПросмотр;
		ПолеВводаНомераДубль.ПропускатьПриВводе = ПолеВводаНомераДубль.ТолькоПросмотр;
		ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомераДубль);
	КонецЕсли;
	
	
КонецПроцедуры // ИзменениеВозможностиРедактированияНомера()

//	Процедура обновления текста подсказки для поля ввода кода/номера
//
// Параметры
//	МетаданныеОбъекта - метаданные объекта
//  ПолеВводаНомера - поле вводе, связанное с кодом/номером объекта
//  ПодменюДействия - меню "Действия" командной панели формы. В этот меню должен присутствовать 
//                 пункт "Редактировать код/номер"
//
Процедура ОбновитьПодсказкуКодНомерОбъекта(МетаданныеОбъекта, ПодменюДействия, ПолеВводаНомера) Экспорт
	уатУстановитьПодсказкуПоляВводаКодаНомера(ПолеВводаНомера, ПодменюДействия, уатПолучитьСтратегиюРедактированияНомераОбъекта(МетаданныеОбъекта));
КонецПроцедуры // ОбновитьПодсказкуКодНомерОбъекта()

#КонецЕсли


//=================================================================================
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБСЛУЖИВАНИЯ МЕХАНИЗМА НАСТРОЙКИ ПРАВ ДОСТУПА

// процедура выполняет проверку периода записей
//
// Параметры
//  НаборЗаписей - Проверяемый набор записей
//  Отказ        - признак отказа записи
Процедура уатПроверкаПериодаЗаписей(НаборЗаписей, Отказ) Экспорт
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	ЕСли СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = НаборЗаписей.Отбор.Регистратор.Значение.Метаданные();
	ИмяДокумента	 	= МетаданныеДокумента.ПолноеИмя();
	
	ЕстьОрганизация = (МетаданныеДокумента.Реквизиты.Найти("Организация")<>Неопределено);
	
	Запрос = Новый Запрос;
	ВложенныйЗапрос = "";
	ЕСли ЕстьОрганизация Тогда
		индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация"+индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета"+индекс, ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));
			индекс = индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СоответствиеГраницЗапрета[ПустаяОрганизация];
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода=Неопределено, NULL, ГраницаПериода));			
	КонецЕсли;			
	
	Запрос.Текст = "
	|ВЫБРАТЬ НаборЗаписей.Организация, НаборЗаписей.Дата, ДатыЗапрета.Организация, ДатыЗапрета.ДатаЗапрета
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(Дата) КАК Дата  ИЗ " + ИмяДокумента + " КАК Набор
	|ГДЕ Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Дата < ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Ссылка", НаборЗаписей.Отбор.Регистратор.Значение);				
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ТАЙПИНГА В ПОЛЕ ВВОДА
#Если Клиент Тогда
	
	// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
	//
	// Параметры
	//  РезультатЗапроса - РезультатЗапроса при тайпинге
	//  Текст - Строка, текст тайпинга
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	// Возвращаемое значение:
	//   Список значений
	//
	Функция уатСформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Знач Текст, ТипСправочника)
		
		ПустаяСсылка = Новый(ТипСправочника);
		КоллекцияЗначенийПоискаПоПодстроке = ПустаяСсылка.Метаданные().ВводПоСтроке;
		
		СписокВозврата = Новый СписокЗначений;
		
		Текст = ВРег(Текст);
		ДлинаТекста = СтрДлина(Текст);
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		
		ЕстьНаименование = (ТаблицаЗапроса.Колонки.Найти("Наименование") <> Неопределено);
		ЕстьКод          = (ТаблицаЗапроса.Колонки.Найти("Код") <> Неопределено);
		
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			
			Если ЕстьНаименование И КоллекцияЗначенийПоискаПоПодстроке.Найти("Наименование") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Наименование, ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + ?(ЕстьКод, (" (" + Строка(СтрокаТаблицы.Код) + ")"), "")));
				Продолжить;
			КонецЕсли;
			
			Если ЕстьКод И КоллекцияЗначенийПоискаПоПодстроке.Найти("Код") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Код, ДлинаТекста)) = Текст Тогда
				Если ЕстьНаименование Тогда
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, (СтрокаТаблицы.Наименование + " (" + Строка(СтрокаТаблицы.Код) + ")"));
				Иначе
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, Строка(СтрокаТаблицы.Код));
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
			Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
				
				Если Колонка.Имя = "Наименование" ИЛИ Колонка.Имя = "Код" ИЛИ Колонка.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНаименование, (" (" + Строка(СтрокаТаблицы.Наименование) + ")"), "")));
				КонецЕсли
				
			КонецЦикла; 
			
		КонецЦикла; 
		
		Возврат СписокВозврата;
		
	КонецФункции
	
	// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
	//
	// Параметры
	//  Текст - Строка, текст введенный в поле ввода вида контактной информации, по которому необходимо строить поиск
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
	//
	// Возвращаемое значение
	//  РезультатЗапроса
	//
	Функция уатПолучитьРезультатЗапросаАвтоподбора(Знач Текст, СтруктураПараметров, ТипСправочника, КоличествоЭлементов) Экспорт
		
		ПустаяСсылкаТипа = Новый(ТипСправочника);
		
		МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
		
		КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
		Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ИмяТаблицыСправочника = МетаданныеОбъекта.Имя;
		
		Запрос = Новый Запрос;
		
		Текст = СтрЗаменить(Текст, "~", "~~");
		Текст = СтрЗаменить(Текст, "%", "~%");
		Текст = СтрЗаменить(Текст, "_", "~_");
		Текст = СтрЗаменить(Текст, "[", "~[");
		Текст = СтрЗаменить(Текст, "-", "~-");
		Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (Текст + "%"));
		Попытка
			Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(Текст));
		Исключение
			Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
		КонецПопытки;
		
		СтрокаОтборовПоСтруктуре = "";
		Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
				|		И
				|		" + ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса.", "ТаблицаСправочника.") + ЭлементСтруктуры.Ключ + " В (&"+ ЭлементСтруктуры.Ключ + ") ";
			Иначе
				СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
				|		И
				|		" + ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса.", "ТаблицаСправочника.") + ЭлементСтруктуры.Ключ + " = &"+ ЭлементСтруктуры.Ключ;
			КонецЕсли;
		КонецЦикла; 
		
		СтрокаПолей = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
		|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
		|";
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка.Наименование КАК Наименование,";
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка.Код КАК Код,";
		КонецЕсли; 
		
		Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
			
			ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
			
			Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;
				ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
			Иначе
				Если ЭлементКоллекции.Имя = "Наименование" Тогда
					ТипЗначенияПоиска = Тип("Строка");
				Иначе
					Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
						ТипЗначенияПоиска = Тип("Строка");
					Иначе
						ТипЗначенияПоиска = Тип("Число");
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
			
			Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
			|ИЗ
			|	Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаВложенногоЗапроса
			|ГДЕ
			|	ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
			
		Иначе
			
			ПервыйЭлемент = Истина;
			СтрокаТаблиц = "";
			Для каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
				
				Если ЭлементКоллекции.Имя <> "Наименование" И ЭлементКоллекции.Имя <> "Код" Тогда
					СтрокаПолей = СтрокаПолей + "
					|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";
					ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
				Иначе
					Если ЭлементКоллекции.Имя = "Наименование" Тогда
						ТипЗначенияПоиска = Тип("Строка");
					Иначе
						Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
							ТипЗначенияПоиска = Тип("Строка");
						Иначе
							ТипЗначенияПоиска = Тип("Число");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
				
				Если НЕ ПервыйЭлемент Тогда
					СтрокаТаблиц = СтрокаТаблиц + "
					|	ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли; 
				ПервыйЭлемент = Ложь;
				
				СтрокаТаблиц = СтрокаТаблиц + "
				|	ВЫБРАТЬ
				|		ТаблицаСправочника.Ссылка КАК Ссылка
				|	ИЗ
				|		Справочник." + ИмяТаблицыСправочника + " КАК ТаблицаСправочника
				|	ГДЕ
				|		ТаблицаСправочника." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
				
			КонецЦикла; 
			
			Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
			|ИЗ
			|
			|	(
			|" + СтрокаТаблиц + "
			|	) КАК ТаблицаВложенногоЗапроса";
			
		КонецЕсли; 
		
		Возврат Запрос.Выполнить();
		
	КонецФункции
	
	// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
	//
	// Параметры
	//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
	//  Элемент - элемент управления в котором производится тайпинг
	//
	Процедура уатОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт
		
		Если ОбработкаТайпинга Тогда
			ЭтаФорма.ТекущийЭлемент = Элемент;
			Элемент.ВыделенныйТекст = ТекстТайпинга;
			ОбработкаТайпинга = Ложь;
			ТекстТайпинга = "";
		КонецЕсли; 
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
		Иначе
			Элемент.ЦветТекстаПоля = Новый Цвет;
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
	//
	// Параметры
	//  Элемент - поле ввода
	//  Текст - текст введенный в поле ввода Вид
	//  ТекстАвтоПодбора - текст автоподбора в поле Вид
	//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	Процедура уатАвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, ТипСправочника) Экспорт
		
		РезультатЗапроса = уатПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 2);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ПустаяСсылка = Новый(ТипСправочника);
				КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
				Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
					Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
						Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
							ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
						КонецЕсли;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
	// сведений Контактная информация.
	//
	// Параметры
	//  Элемент - поле ввода
	//  Текст - текст введенный в поле ввода Вид
	//  Значение - данные элемента управления поле ввода
	//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ЭтаФорма - форма записи регистра сведений контактная информация
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	Процедура уатОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, ТипСправочника, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт
		
		Если ПустаяСтрока(Текст) Тогда
			Значение = Новый(ТипСправочника);
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли; 
		
		РезультатЗапроса = уатПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, ТипСправочника, 51);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
			ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				ОбработкаТайпинга = Истина;
				ТекстТайпинга = Текст;
			Иначе
				Значение = Текст;
			КонецЕсли;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Значение = Выборка.Ссылка;
			ИначеЕсли Выборка.Количество() > 50 Тогда
				Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
				|Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
				Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
					Значение = Текст;
				Иначе
					Значение = ПоследнееЗначениеЭлементаТайпинга;
				КонецЕсли; 
			Иначе
				Если Выборка.Количество() = 0 Тогда
					ВыбранныйЭлемент = Неопределено;
				Иначе
					СписокВыбора = уатСформироватьСписокВыбораЗначенийТайпинга(РезультатЗапроса, Текст, ТипСправочника);
					ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
				КонецЕсли; 
				Если ВыбранныйЭлемент = Неопределено Тогда
					ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
					Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
						Значение = Текст;
					Иначе
						Значение = ПоследнееЗначениеЭлементаТайпинга;
					КонецЕсли; 
					Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
						ОбработкаТайпинга = Истина;
						ТекстТайпинга = Текст;
					КонецЕсли;
				Иначе
					Значение = ВыбранныйЭлемент.Значение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецПроцедуры
	
	// Функция формирует список выбора значений, для события ОкончаниеВводаТекста.
	//
	// Параметры
	//  РезультатЗапроса - РезультатЗапроса при тайпинге
	//  Текст - Строка, текст тайпинга
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	// Возвращаемое значение:
	//   Список значений
	//
	Функция уатСформироватьСписокВыбораЗначенийТайпингаДляДокумента(РезультатЗапроса, Знач Текст, ТипДокумента)
		
		ПустаяСсылка = Новый(ТипДокумента);
		КоллекцияЗначенийПоискаПоПодстроке = ПустаяСсылка.Метаданные().ВводПоСтроке;
		
		СписокВозврата = Новый СписокЗначений;
		
		Текст = ВРег(Текст);
		ДлинаТекста = СтрДлина(Текст);
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		
		ЕстьНомер = (ТаблицаЗапроса.Колонки.Найти("Номер") <> Неопределено);
		
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			
			Если ЕстьНомер И КоллекцияЗначенийПоискаПоПодстроке.Найти("Номер") <> Неопределено И ВРег(Лев(СтрокаТаблицы.Номер, ДлинаТекста)) = Текст Тогда
				СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Номер );
				Продолжить;
			КонецЕсли;
			
			
			Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
				
				Если Колонка.Имя = "Номер" ИЛИ Колонка.Имя = "Ссылка" Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ВРег(Лев(СтрокаТаблицы[Колонка.Имя], ДлинаТекста)) = Текст Тогда
					СписокВозврата.Добавить(СтрокаТаблицы.Ссылка, ("" + СтрокаТаблицы[Колонка.Имя] + ?(ЕстьНомер, (" (" + Строка(СтрокаТаблицы.Номер) + ")"), "")));
				КонецЕсли
				
			КонецЦикла; 
			
		КонецЦикла; 
		
		Возврат СписокВозврата;
		
	КонецФункции
	
	// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
	//
	// Параметры
	//  Текст - Строка, текст введенный в поле ввода вида контактной информации, по которому необходимо строить поиск
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
	//
	// Возвращаемое значение
	//  РезультатЗапроса
	//
	Функция уатПолучитьРезультатЗапросаАвтоподбораДляДокумента(Знач Текст, СтруктураПараметров,  ТипДокумента, КоличествоЭлементов) Экспорт
		
		ПустаяСсылкаТипа = Новый( ТипДокумента);
		
		МетаданныеОбъекта = ПустаяСсылкаТипа.Метаданные();
		
		КоллекцияПоискаПоПодстроке = МетаданныеОбъекта.ВводПоСтроке;
		Если КоллекцияПоискаПоПодстроке.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ИмяТаблицыДокумента = МетаданныеОбъекта.Имя;
		
		Запрос = Новый Запрос;
		
		Текст = СтрЗаменить(Текст, "~", "~~");
		Текст = СтрЗаменить(Текст, "%", "~%");
		Текст = СтрЗаменить(Текст, "_", "~_");
		Текст = СтрЗаменить(Текст, "[", "~[");
		Текст = СтрЗаменить(Текст, "-", "~-");
		Запрос.УстановитьПараметр("ТекстАвтоПодбора"     , (Текст + "%"));
		Попытка
			Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Число(Текст));
		Исключение
			Запрос.УстановитьПараметр("ТекстАвтоПодбораЧисло", Неопределено);
		КонецПопытки;
		
		СтрокаОтборовПоСтруктуре = "";
		Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
				|		И
				|		" + ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса.", "ТаблицаДокумента.") + ЭлементСтруктуры.Ключ + " В (&"+ ЭлементСтруктуры.Ключ + ") ";
			Иначе
				СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + "
				|		И
				|		" + ?(КоллекцияПоискаПоПодстроке.Количество() = 1, "ТаблицаВложенногоЗапроса.", "ТаблицаДокумента.") + ЭлементСтруктуры.Ключ + " = &"+ ЭлементСтруктуры.Ключ;
			КонецЕсли;
		КонецЦикла; 
		
		СтрокаПолей = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + "
		|	ТаблицаВложенногоЗапроса.Ссылка КАК Ссылка,
		|";
		
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			СтрокаПолей = СтрокаПолей + "
			|	ТаблицаВложенногоЗапроса.Ссылка.Номер КАК Номер,";
		КонецЕсли;
		
		
		Если КоллекцияПоискаПоПодстроке.Количество() = 1 Тогда
			
			ЭлементКоллекции = КоллекцияПоискаПоПодстроке[0];
			
			Если ЭлементКоллекции.Имя <> "Номер" Тогда
				СтрокаПолей = СтрокаПолей + "
				|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя;
				ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
			Иначе
				Если ЭлементКоллекции.Имя = "Номер" Тогда
					ТипЗначенияПоиска = Тип("Строка");
				КонецЕсли; 
			КонецЕсли;
			
			Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
			|ИЗ
			|	Документ." + ИмяТаблицыДокумента + " КАК ТаблицаВложенногоЗапроса
			|ГДЕ
			|	ТаблицаВложенногоЗапроса." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
			
		Иначе
			
			ПервыйЭлемент = Истина;
			СтрокаТаблиц = "";
			Для каждого ЭлементКоллекции Из КоллекцияПоискаПоПодстроке Цикл
				
				Если ЭлементКоллекции.Имя <> "Номер"  Тогда
					СтрокаПолей = СтрокаПолей + "
					|	ТаблицаВложенногоЗапроса.Ссылка." + ЭлементКоллекции.Имя + " КАК " + ЭлементКоллекции.Имя + ",";
					ТипЗначенияПоиска = МетаданныеОбъекта.Реквизиты[ЭлементКоллекции.Имя].Тип.Типы()[0];
				Иначе
					Если ЭлементКоллекции.Имя = "Номер" Тогда
						ТипЗначенияПоиска = Тип("Строка");
					Иначе
					КонецЕсли; 
				КонецЕсли;
				
				Если НЕ ПервыйЭлемент Тогда
					СтрокаТаблиц = СтрокаТаблиц + "
					|	ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли; 
				ПервыйЭлемент = Ложь;
				
				СтрокаТаблиц = СтрокаТаблиц + "
				|	ВЫБРАТЬ
				|		ТаблицаДокумента.Ссылка КАК Ссылка
				|	ИЗ
				|		Документ." + ИмяТаблицыДокумента + " КАК ТаблицаДокумента
				|	ГДЕ
				|		ТаблицаДокумента." + ЭлементКоллекции.Имя + ?(ТипЗначенияПоиска = Тип("Строка"), (" ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"""), (" =  &ТекстАвтоПодбораЧисло")) + СтрокаОтборовПоСтруктуре;
				
			КонецЦикла; 
			
			Запрос.Текст = Лев(СтрокаПолей, (СтрДлина(СтрокаПолей) - 1)) + "
			|ИЗ
			|
			|	(
			|" + СтрокаТаблиц + "
			|	) КАК ТаблицаВложенногоЗапроса";
			
		КонецЕсли; 
		
		Возврат Запрос.Выполнить();
		
	КонецФункции
	
	// Процедура обслуживает событие ОбновлениеОтображения в форме, где расположен ЭУ тайпинга.
	//
	// Параметры
	//  ЭтаФорма - Форма записи регистра сведений КонтактнаяИнформация
	//  Элемент - элемент управления в котором производится тайпинг
	//
	Процедура уатОбновлениеОтображенияВФормеПриТайпингеДляДокумента(ЭтаФорма, Элемент, ОбработкаТайпинга, ТекстТайпинга) Экспорт
		
		Если ОбработкаТайпинга Тогда
			ЭтаФорма.ТекущийЭлемент = Элемент;
			Элемент.ВыделенныйТекст = ТекстТайпинга;
			ОбработкаТайпинга = Ложь;
			ТекстТайпинга = "";
		КонецЕсли; 
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			Элемент.ЦветТекстаПоля = ЦветаСтиля.ТекстИнформационнойНадписи;
		Иначе
			Элемент.ЦветТекстаПоля = Новый Цвет;
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
	//
	// Параметры
	//  Элемент - поле ввода
	//  Текст - текст введенный в поле ввода Вид
	//  ТекстАвтоПодбора - текст автоподбора в поле Вид
	//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	Процедура уатАвтоПодборТекстаВЭлементеУправленияДляДокумента(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров,  ТипДокумента) Экспорт
		
		РезультатЗапроса = уатПолучитьРезультатЗапросаАвтоподбораДляДокумента(Текст, СтруктураПараметров,  ТипДокумента, 2);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ПустаяСсылка = Новый( ТипДокумента);
				КоллекцияЭлементовПоиска = ПустаяСсылка.Метаданные().ВводПоСтроке;
				Для каждого ЭлементКоллекции Из КоллекцияЭлементовПоиска Цикл
					Если Лев(Врег(Выборка[ЭлементКоллекции.Имя]), СтрДлина(Текст)) = ВРег(Текст) Тогда
						Если Врег(Текст) <> Врег(Выборка[ЭлементКоллекции.Имя]) Тогда
							ТекстАвтоподбора = Выборка[ЭлементКоллекции.Имя];
						КонецЕсли;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
	// сведений Контактная информация.
	//
	// Параметры
	//  Элемент - поле ввода
	//  Текст - текст введенный в поле ввода Вид
	//  Значение - данные элемента управления поле ввода
	//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
	//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
	//  ЭтаФорма - форма записи регистра сведений контактная информация
	//  ТипСправочника - Тип, тип справочника автоподбора текста
	//
	Процедура уатОкончаниеВводаТекстаВЭлементеУправленияДляДокумента(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма,  ТипДокумента, ОбработкаТайпинга = Неопределено, ТекстТайпинга = Неопределено, ПоследнееЗначениеЭлементаТайпинга = Неопределено, ПриОтсутствииЗначенияОставлятьТекст = Истина) Экспорт
		
		Если ПустаяСтрока(Текст) Тогда
			Значение = Новый( ТипДокумента);
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли; 
		
		РезультатЗапроса = уатПолучитьРезультатЗапросаАвтоподбораДляДокумента(Текст, СтруктураПараметров,  ТипДокумента, 51);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
		Если РезультатЗапроса.Пустой() И ПриОтсутствииЗначенияОставлятьТекст Тогда
			ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				ОбработкаТайпинга = Истина;
				ТекстТайпинга = Текст;
			Иначе
				Значение = Текст;
			КонецЕсли;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Значение = Выборка.Ссылка;
			ИначеЕсли Выборка.Количество() > 50 Тогда
				Предупреждение("Найдено более 50-ти значений, удовлетворяющих условиям выбора.
				|Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
				Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
					Значение = Текст;
				Иначе
					Значение = ПоследнееЗначениеЭлементаТайпинга;
				КонецЕсли; 
			Иначе
				Если Выборка.Количество() = 0 Тогда
					ВыбранныйЭлемент = Неопределено;
				Иначе
					СписокВыбора = уатСформироватьСписокВыбораЗначенийТайпингаДляДокумента(РезультатЗапроса, Текст,  ТипДокумента);
					ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
				КонецЕсли; 
				Если ВыбранныйЭлемент = Неопределено Тогда
					ОтветНаВопрос = Вопрос(("В элемент управления введены некорректные данные." + Символы.ПС + "Продолжить?"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
					Если ПоследнееЗначениеЭлементаТайпинга = Неопределено Тогда
						Значение = Текст;
					Иначе
						Значение = ПоследнееЗначениеЭлементаТайпинга;
					КонецЕсли; 
					Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
						ОбработкаТайпинга = Истина;
						ТекстТайпинга = Текст;
					КонецЕсли;
				Иначе
					Значение = ВыбранныйЭлемент.Значение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецПроцедуры
	
	
	// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//
	Процедура уатУстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации) Экспорт
	
		Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
			ПунктМеню = ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, ТипКнопкиКоманднойПанели.Действие, 
													ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
			ПунктМеню.ИзменяетДанные = Истина;
		КонецЦикла;
		
	КонецПроцедуры // уатУстановитьПодменюВыбораВидаОперации()

	
//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ УправлениеОтношениямиСПоставщикамиИПокупателями    //

	
	// Процедура перехватывает событие начала выбора прочего контактного лица
	//
	// Параметры
	//  Элемент - элемент управления, выбора контактного лица контрагента
	//  СтандартнаяОбработка - булево
	//  СтандартнаяОбработка - булево
	//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
	//
	Процедура уатНачалоВыбораПрочегоКонтактногоЛица(Элемент, СтандартнаяОбработка, Пользователь = Неопределено) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.КонтактныеЛица.ПолучитьФормуВыбора(, Элемент);
		Если ФормаВыбора.Открыта() Тогда
			ФормаВыбора.Отбор.Сбросить();
		КонецЕсли; 
		
		ФормаВыбора.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо;
		ФормаВыбора.Отбор.ВидКонтактногоЛица.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
		
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Пользователь) Тогда
			ФормаВыбора.Отбор.ОбъектВладелец.Значение      = Пользователь;
			ФормаВыбора.Отбор.ОбъектВладелец.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОбъектВладелец.Доступность = Ложь;
		КонецЕсли;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Ответственный";
		
		ФормаВыбора.Заголовок = "Справочник Прочие контактные лица";
		
		ФормаВыбора.Открыть();
		
	КонецПроцедуры
	
	// Процедура перехватывает событие начала выбора прочего контактного лица
	//
	// Параметры
	//  Элемент - элемент управления, выбора контактного лица контрагента
	//  СтандартнаяОбработка - булево
	//  СтандартнаяОбработка - булево
	//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
	//
	Процедура уатНачалоВыбораЛичныхКонтактов(Элемент, СтандартнаяОбработка) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.КонтактныеЛица.ПолучитьФормуВыбора(, Элемент);
		Если ФормаВыбора.Открыта() Тогда
			ФормаВыбора.Отбор.Сбросить();
		КонецЕсли; 
		
		ФормаВыбора.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт;
		ФормаВыбора.Отбор.ВидКонтактногоЛица.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Ответственный";
		ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.Видимость = Ложь;
		
		ФормаВыбора.Заголовок = "Справочник Личные контакты";
		
		ФормаВыбора.Открыть();
		
	КонецПроцедуры
	
	// Процедура обрабатывает событие ПередНачаломДобавления в форме списка
	// справочника КонтактныеЛицаКонтрагентов
	//
	Процедура уатПередНачаломДобавленияКонтактногоЛица(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, СправочникСписок, ЭтаФорма) Экспорт
		
		Если уатОбщегоНазначения.уатДоступностьКомпоненты("УАТПРОФ") тогда
			Если НЕ ЭтоГруппа
				И НЕ Копирование
				И ((СправочникСписок.Отбор.ОбъектВладелец.Использование И СправочникСписок.Отбор.ОбъектВладелец.ВидСравнения = ВидСравнения.Равно)
				ИЛИ (СправочникСписок.Отбор.ВидКонтактногоЛица.Использование И СправочникСписок.Отбор.ВидКонтактногоЛица.ВидСравнения = ВидСравнения.Равно)) Тогда
				
				Отказ = Истина;
				
				НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
				Если СправочникСписок.Отбор.ОбъектВладелец.Использование Тогда
					НовыйОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
					НовыйОбъект.ОбъектВладелец     = СправочникСписок.Отбор.ОбъектВладелец.Значение;
				Иначе
					НовыйОбъект.ВидКонтактногоЛица = СправочникСписок.Отбор.ВидКонтактногоЛица.Значение;
				КонецЕсли; 
				
				НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();
				
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
			// Процедура перехватывает уатСобытие начала выбора контактного лица контрагента
	//
	// Параметры
	//  Элемент - элемент управления, выбора контактного лица контрагента
	//  СтандартнаяОбработка - булево
	//  СтандартнаяОбработка - булево
	//  Контрагент - СправочникСсылка.Контрагенты, ,контрагент контактного лица
	//
	Процедура уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент = Неопределено) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Если Метаданные.Документы.Найти("ЗакрытиеЗаказовПокупателей") = Неопределено тогда
			
			ФормаВыбора = Справочники.КонтактныеЛица.ПолучитьФормуВыбора(, Элемент);
			Если ФормаВыбора.Открыта() Тогда
				ФормаВыбора.Отбор.Сбросить();
			КонецЕсли; 
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Контрагент) ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
				ФормаВыбора.Отбор.ВидКонтактногоЛица.Значение      = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
				ФормаВыбора.Отбор.ВидКонтактногоЛица.Использование = Истина;
				ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидКонтактногоЛица.Доступность = Ложь;
			Иначе
				ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.Видимость = Ложь;
				ФормаВыбора.Отбор.ОбъектВладелец.Значение      = Контрагент;
				ФормаВыбора.Отбор.ОбъектВладелец.Использование = Истина;
				ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОбъектВладелец.Доступность = Ложь;
			КонецЕсли; 
			
			ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ОбъектВладелец.ТекстШапки = "Контрагент";
			ФормаВыбора.ЭлементыФормы.СправочникСписок.Колонки.ВидКонтактногоЛица.Видимость = Ложь;
			
			ФормаВыбора.Заголовок = "Справочник Контактные лица контрагентов";
			
			ФормаВыбора.Открыть();
			
		Иначе
			
			ФормаВыбора = Справочники.КонтактныеЛицаКонтрагентов.ПолучитьФормуВыбора(,Элемент);
			
			Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
				ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
				ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение = Контрагент;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Элемент.Значение) И ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
				ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
			КонецЕсли;
			
			ФормаВыбора.РежимВыбора = Истина;
			ФормаВыбора.Заголовок = "Выбор контактного лица контрагента";
			ФормаВыбора.Открыть();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	
	// Процедура вызывается по событию НачалоВыбораИзСписка
	// у полей ввода, в которых редактируются даты со временем.
	// 
	//  Параметры
	//   ЭлементУправления - ПолеВвода, в котором редактируется значение даты
	//   ЭтаФорма - Форма
	//   Пользователь - СправочникСсылка.Пользователи
	//   СтандартнаяОбработка - булево
	//   ПолныйГод - Булево, представление года даты в списке выбора
	//
	Процедура уатВыбратьВремяИзСписка(ЭлементУправления, ЭтаФорма, Пользователь, СтандартнаяОбработка, ПолныйГод = Истина) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		ДатаВремени = ЭлементУправления.Значение;
		
		СтруктураРабочихВремен = уатОпределитьНачалоИОкончаниеРабочегоДняПользователя();
		
		СписокВремен = Новый СписокЗначений;
		НачалоРабочегоДня = НачалоДня(ДатаВремени)+Час(СтруктураРабочихВремен.ДатаНачала)*60*60+Минута(СтруктураРабочихВремен.ДатаНачала)*60;
		ОкончаниеРабочегоДня = НачалоДня(ДатаВремени)+Час(СтруктураРабочихВремен.ДатаОкончания)*60*60+Минута(СтруктураРабочихВремен.ДатаОкончания)*60 - 60*60;
		
		НачалоРабочегоДняДляСпискаВыбора = НачалоЧаса(НачалоРабочегоДня);
		а = 0;
		Пока 1=1 Цикл
			ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*30*60;
			Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
				Прервать;
			КонецЕсли;
			Если ПолныйГод Тогда
				СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
			Иначе
				СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
			КонецЕсли; 
			а = а + 1;
		КонецЦикла; 
		
		НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремени);
		Если НачальноеЗначение = Неопределено Тогда
			ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления);
		Иначе
			ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ЭлементУправления, НачальноеЗначение);
		КонецЕсли; 
		
		Если ВыбранноеВремя <> Неопределено Тогда
			ЭлементУправления.Значение = ВыбранноеВремя.Значение;
		КонецЕсли; 
		
	КонецПроцедуры
	
	
#КонецЕсли

//=================================================================================
// РЕГИСТРАЦИЯ ДАННЫХ НЕЗАРЕГИСТРИРОВАННЫХ КОНТРАГЕНТОВ, БЕЗ ДОБАВЛЕНИЯ В СПРАВОЧНИК

// Процедура выполняет запись данных незарегистрированного контрагентов 
//
Процедура уатЗаписатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента, Отказ) Экспорт
	
	ДанныеНезарегистрированногоКонтрагента.ОбъектРегистратор = Ссылка;
	
	Попытка
		ДанныеНезарегистрированногоКонтрагента.Записать(Истина);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать данные контрагента.");
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Процедура выполняет чтение данных незарегистрированного документа 
//
Процедура уатПрочитатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента) Экспорт
	
	Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Ссылка) Тогда
		ДанныеНезарегистрированногоКонтрагента.ОбъектРегистратор = Ссылка;
		ДанныеНезарегистрированногоКонтрагента.Прочитать();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет удаление данных незарегистрированного контрагента 
//
Процедура уатУдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ) Экспорт
	
	НаборЗаписей = РегистрыСведений.уатДанныеНезарегистрированныхКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРегистратор.Использование = Истина;
	НаборЗаписей.Отбор.ОбъектРегистратор.Значение      = Ссылка;
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет реквизиты предопределенных элементов справочника ВидыКонтактнойИнформации
//  и заполняет константу шаблонов телефонов.
Процедура уатЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации() Экспорт
	
	// Элементы справочника ВидыКонтактнойИнформации заполнились еще при переходе с 10.0.5 на 10.1.1
	
	Если ТипЗнч(Константы.ШаблоныТелефонныхНомеров.Получить().Получить()) <> Тип("Соответствие") Тогда
		
		ТаблицаСоответствий = Новый Соответствие;
		ТаблицаСоответствий.Вставить(7,"999-99-99");
		ТаблицаСоответствий.Вставить(6,"99-99-99");
		ТаблицаСоответствий.Вставить(5,"9-99-99");
		ТаблицаСоответствий.Вставить(4,"99-99");
		
		ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);
		
		Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);
		
	КонецЕсли;
	
КонецПроцедуры

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ СОБЫТИЙ И КАЛЕНДАРЕМ ПОЛЬЗОВАТЕЛЯ

// Процедура выполняется при проведении или отмене проведения документа уатСобытие
//  и переписывает записи регистра сведений СобытияКалендаряПользователя.
Процедура уатРаспределитьСобытияДня(ДатаРаспределения, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Событие КАК Событие,
	|	СобытияКалендаряПользователяОбобщенные.НомерНачальнойСтроки КАК НомерНачальнойСтроки,
	|	СобытияКалендаряПользователяОбобщенные.НомерКонечнойСтроки КАК НомерКонечнойСтроки
	|ИЗ
	|	РегистрСведений.уатСобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Дата = &ВыбДата
	|	И
	|	СобытияКалендаряПользователяОбобщенные.Пользователь = &ВыбПользователь
	|";
	
	Запрос.УстановитьПараметр("ВыбДата", ДатаРаспределения);
	Запрос.УстановитьПараметр("ВыбПользователь", Пользователь);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	НомерСтрокиНачало = 0;
	НомерСтрокиКонец  = 0;
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		КопияТаблицыЗапроса = ТаблицаЗапроса.Скопировать();
		
		КопияТаблицыЗапроса.Сортировать("НомерНачальнойСтроки ВОЗР");
		НомерСтрокиНачало = КопияТаблицыЗапроса[0].НомерНачальнойСтроки;
		
		КопияТаблицыЗапроса.Сортировать("НомерКонечнойСтроки УБЫВ");
		НомерСтрокиКонец = КопияТаблицыЗапроса[0].НомерКонечнойСтроки;
		
	КонецЕсли; 
	
	СписокЗначенийВремен = Новый СписокЗначений;
	
	Если НомерСтрокиНачало <> 0 И НомерСтрокиКонец <> 0 Тогда
		
		Для а=1 По 48 Цикл
			НовыйСписок = Новый СписокЗначений;
			СписокЗначенийВремен.Добавить(НовыйСписок);
		КонецЦикла;
		
		Для а=НомерСтрокиНачало По НомерСтрокиКонец Цикл
			
			НовыйСписок = СписокЗначенийВремен[а-1].Значение;
			
			ИндексСтрокиТаблицы = 0;
			Пока 1 = 1 Цикл
				
				Если ИндексСтрокиТаблицы > ТаблицаЗапроса.Количество() - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				СтрокаТаблицы = ТаблицаЗапроса[ИндексСтрокиТаблицы];
				
				Если СтрокаТаблицы.НомерНачальнойСтроки <= а И СтрокаТаблицы.НомерКонечнойСтроки >= а Тогда
					
					ЕстьСвободноеМесто = Ложь;
					
					Для каждого ЭлементНовогоСписка Из НовыйСписок Цикл
						
						Если ЭлементНовогоСписка.Значение = Неопределено Тогда
							
							ЭлементНовогоСписка.Значение = СтрокаТаблицы.Событие;
							
							ЕстьСвободноеМесто = Истина;
							ИндексСписка = НовыйСписок.Индекс(ЭлементНовогоСписка);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ ЕстьСвободноеМесто Тогда
						
						Если НовыйСписок.Количество() >= 18 Тогда
							Прервать;
						КонецЕсли; 
						
						ВновьВведенныйЭлемент = НовыйСписок.Добавить(СтрокаТаблицы.Событие);
						ИндексСписка = НовыйСписок.Индекс(ВновьВведенныйЭлемент);
						
					КонецЕсли;
					
					Если а <= СписокЗначенийВремен.Количество() Тогда
						
						ИндексТекущегоСписка = а - 1 + 1;
						Для б = а По СтрокаТаблицы.НомерКонечнойСтроки - 1 Цикл
							
							ТекущийСписок = СписокЗначенийВремен[б].Значение;
							
							Если ТекущийСписок.Количество() < (ИндексСписка + 1) Тогда
								
								Для с = (ТекущийСписок.Количество() + 1) По (ИндексСписка + 1) Цикл
									
									ТекущийСписок.Добавить(Неопределено);
									
								КонецЦикла;
								
							КонецЕсли;
							
							ТекущийСписок[ИндексСписка].Значение = СтрокаТаблицы.Событие;
							
						КонецЦикла; 
						
					КонецЕсли; 
					
					ТаблицаЗапроса.Удалить(СтрокаТаблицы);
					Продолжить;
					
				КонецЕсли;
				
				ИндексСтрокиТаблицы = ИндексСтрокиТаблицы + 1;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	
	// Очистим значения предыдущего распределения
	НаборЗаписейРегистра = РегистрыСведений.уатСобытияКалендаряПользователя.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
	НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
	НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
	НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
	НаборЗаписейРегистра.Прочитать();
	НаборЗаписейРегистра.Очистить();
	
	// Проведем распределение заново
	Для каждого СтрокаВремени Из СписокЗначенийВремен Цикл
		
		СписокТекущегоВремени = СтрокаВремени.Значение;
		
		Если ТипЗнч(СписокТекущегоВремени) = Тип("СписокЗначений") И СписокТекущегоВремени.Количество() > 0 Тогда
			
			Для каждого ЭлементДокумента Из СписокТекущегоВремени Цикл
				
				НоваяЗаписьРегистра = НаборЗаписейРегистра.Добавить();
				НоваяЗаписьРегистра.Событие = ЭлементДокумента.Значение;
				НоваяЗаписьРегистра.НомерСтрокиТаблицы = СписокЗначенийВремен.Индекс(СтрокаВремени) + 1;
				НоваяЗаписьРегистра.Дата = ДатаРаспределения;
				НоваяЗаписьРегистра.Пользователь = Пользователь;
				НоваяЗаписьРегистра.ПорядковыйНомерВДне = СписокТекущегоВремени.Индекс(ЭлементДокумента) + 1;
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	НаборЗаписейРегистра.Записать();
	
	Если ТипЗнч(КопияТаблицыЗапроса) = Тип("ТаблицаЗначений") Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(КопияТаблицыЗапроса.ВыгрузитьКолонку("Событие"));
		
		Для каждого ДокументСписка Из СписокДокументов Цикл
			
			НаборЗаписейРегистра = РегистрыСведений.уатСобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.Пользователь.Значение      = Пользователь;
			НаборЗаписейРегистра.Отбор.Пользователь.Использование = Истина;
			НаборЗаписейРегистра.Отбор.Дата.Значение              = ДатаРаспределения;
			НаборЗаписейРегистра.Отбор.Дата.Использование         = Истина;
			НаборЗаписейРегистра.Отбор.Событие.Значение           = ДокументСписка.Значение;
			НаборЗаписейРегистра.Отбор.Событие.Использование      = Истина;
			НаборЗаписейРегистра.Прочитать();
			
			Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
				КоличествоДокументов = 0;
				Для б = ЗаписьРегистра.НомерНачальнойСтроки - 1 По ЗаписьРегистра.НомерКонечнойСтроки - 1 Цикл
					ТекСписок = СписокЗначенийВремен[б].Значение;
					Если ТекСписок.Количество() > КоличествоДокументов Тогда
						КоличествоДокументов = ТекСписок.Количество();
					КонецЕсли; 
				КонецЦикла;
				ЗаписьРегистра.КоличествоОдновременныхДокументов = КоличествоДокументов;
				
			КонецЦикла;
			
			НаборЗаписейРегистра.Записать(Истина);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры


// Функция определяет начало и окончание рабочего дня пользователя, по его графику работы
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, пользователь по которому определяются
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция уатОпределитьНачалоИОкончаниеРабочегоДняПользователя() Экспорт
	ДатаНачала    = Константы.уатНачалоРабочегоДня.Получить();
	ДатаОкончания = Константы.уатОкончаниеРабочегоДня.Получить();
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = '00010101235959';
	КонецЕсли; 
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
КонецФункции

#Если Клиент тогда

// Процедура выполняет регистрацию нового контрагента
//
	Процедура уатРегистрироватьНовогоКонтрагента(Элемент, Текст, Значение, СтандартнаяОбработка, мТайпингКонтрагента, мТекстТайпингаКонтрагента, мПоследнееЗначениеЭлементаТайпингаКонтрагент, ЭтаФорма, Контрагент, КонтактноеЛицо, Модифицированность, ДанныеНезарегистрированногоКонтрагента) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(Элемент.Значение) <> Тип("Строка") Тогда
			
			ТекстВопроса = "Контрагент не найден. Зарегистрировать данные нового контрагента?";
			
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
			
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
					мТайпингКонтрагента = Истина;
					мТекстТайпингаКонтрагента = Текст;
				Иначе
					Значение = мПоследнееЗначениеЭлементаТайпингаКонтрагент;
				КонецЕсли; 
				Возврат;
			КонецЕсли;
			
			ОбработкаРедактирования = Обработки.уатРедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
			ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
			ФормаРегистрацииНовогоКонтрагента = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма);
			
			ФормаРегистрацииНовогоКонтрагента.ЗаполнитьНачальныеДанные();
			ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента = Текст;
			Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
				ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = КонтактноеЛицо;
			КонецЕсли; 
			
			ФормаРегистрацииНовогоКонтрагента.ОткрытьМодально();
			
			Значение       = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
			
			Модифицированность = Истина;
			
		Иначе
			
			Значение = Текст;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Функция Определяет индекс картинки
	//
	// Параметры
	//  ВидСобытия - ПеречислениеСсылка.ВидыСобытий
	//
	// Возвращаемое значение:
	//  Индекс - число
	//
	Функция уатОпределитьИндексКартинкиВидаСобытия(Напоминание) Экспорт
		
		Если ТипЗнч(Напоминание) = Тип("ДокументСсылка.уатСобытие") Тогда
			Если Напоминание.ВидСобытия = Перечисления.уатВидыСобытий.ТелефонныйЗвонок Тогда
				Возврат 1;
			ИначеЕсли Напоминание.ВидСобытия = Перечисления.уатВидыСобытий.ЛичнаяВстреча Тогда
				Возврат 2;
			ИначеЕсли Напоминание.ВидСобытия = Перечисления.уатВидыСобытий.ЭлектронноеПисьмо Тогда
				Возврат 3;
			ИначеЕсли Напоминание.ВидСобытия = Перечисления.уатВидыСобытий.ПочтовоеПисьмо Тогда
				Возврат 4;
			Иначе
				Возврат 0;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Напоминание) = Тип("ПеречислениеСсылка.уатВидыСобытий") Тогда
			Если Напоминание = Перечисления.уатВидыСобытий.ТелефонныйЗвонок Тогда
				Возврат 1;
			ИначеЕсли Напоминание = Перечисления.уатВидыСобытий.ЛичнаяВстреча Тогда
				Возврат 2;
			ИначеЕсли Напоминание = Перечисления.уатВидыСобытий.ЭлектронноеПисьмо Тогда
				Возврат 3;
			ИначеЕсли Напоминание = Перечисления.уатВидыСобытий.ПочтовоеПисьмо Тогда
				Возврат 4;
			Иначе
				Возврат 0;
			КонецЕсли;
			БиблиотекаКартинок.уатСтатусыЭлектронныхПисем.Формат()	
		ИначеЕсли ТипЗнч(Напоминание) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
			Если Напоминание.СтатусПисьма = Перечисления.уатСтатусыПисем.Исходящее ИЛИ 
				Напоминание.СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное Тогда
				Возврат 9;
			Иначе
				Возврат 10;
			КонецЕсли;
		Иначе
			Возврат 8;
		КонецЕсли;
		
	КонецФункции // уатОпределитьИндексКартинкиВидаСобытия()
	
	// Функция Определяет картинку для напоминания
	//
	// Параметры
	//  Напоминание - Произвольный, объект напоминания
	//
	// Возвращаемое значение:
	//  Картинка - Картинка
	//
	Функция уатПолучитьКартинкуНапоминания(Напоминание) Экспорт
		
		ИндексВозврата = уатОпределитьИндексКартинкиВидаСобытия(Напоминание);
		
		Если ИндексВозврата = 0 Тогда
			Возврат БиблиотекаКартинок.уатПрочееСобытие;
			
		ИначеЕсли ИндексВозврата = 1 Тогда
			Возврат БиблиотекаКартинок.уатТелефонныйЗвонок;
			
		ИначеЕсли ИндексВозврата = 2 Тогда
			Возврат БиблиотекаКартинок.уатЛичнаяВстреча;
			
		ИначеЕсли ИндексВозврата = 3 Тогда
			Возврат БиблиотекаКартинок.уатЭлектронноеПисьмо;
			
		ИначеЕсли ИндексВозврата = 4 Тогда
			Возврат БиблиотекаКартинок.уатПочтовоеПисьмо;
			
			//Дополнено
		ИначеЕсли ИндексВозврата = 8 Тогда
			Возврат БиблиотекаКартинок.уатНапоминания;
		ИначеЕсли ИндексВозврата = 9 Тогда
			Возврат БиблиотекаКартинок.уатОтправкаПочты;
		ИначеЕсли ИндексВозврата = 10 Тогда
			Возврат БиблиотекаКартинок.уатПолучениеПочты;
		Иначе
			Возврат БиблиотекаКартинок.уатВажно;
			
		КонецЕсли;
		
	КонецФункции //уатПолучитьКартинкуНапоминания()
	
	// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
	//
	// Параметры:
	//  Пользователь - текущий пользователь программы
	//  Настройка    - признак, для которого возвращается значение по умолчанию
	//
	// Возвращаемое значение:
	//  Значение по умолчанию для настройки.
	//
	Функция уатПолучитьЗначениеПоУмолчанию(Пользователь, Настройка) Экспорт
		ОбъектМетаданных = Метаданные.РегистрыСведений.уатНастройкаПользователей.Ресурсы.Найти(Настройка);
		Если ОбъектМетаданных = Неопределено Тогда
			Сообщить("Настройка пользователя """+Настройка+""" не найдена");	
			Возврат Неопределено;	
		КонецЕсли;
		Запись = РегистрыСведений.уатНастройкаПользователей.СоздатьМенеджерЗаписи();
		Запись.Пользователь = Пользователь;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Возврат Запись[Настройка];
		Иначе
			//типовая функция получения настроек
			Если Метаданные.ПланыВидовХарактеристик.Найти("НастройкиПользователей") <> Неопределено Тогда
				ПВХНастроек = ПланыВидовХарактеристик.НастройкиПользователей;
				Если ЗначениеЗаполнено(ПВХНастроек.НайтиПоНаименованию(Настройка)) Тогда
					Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователь, Настройка);
				КонецЕсли;
			КонецЕсли;
			
			Возврат ОбъектМетаданных.Тип.ПривестиЗначение();
		КонецЕсли;
	КонецФункции 
	
	// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
	//
	// Параметры:
	//  Пользователь - текущий пользователь программы
	//  Настройка    - признак, для которого записывается значение по умолчанию
	//  Значение     - значение по умолчанию
	//
	// Возвращаемое значение:
	//  Нет
	//
	Процедура уатУстановитьЗначениеПоУмолчанию(Пользователь, Настройка, Значение) Экспорт
		ОбъектМетаданных = Метаданные.РегистрыСведений.уатНастройкаПользователей.Ресурсы.Найти(Настройка);
		Если ОбъектМетаданных = Неопределено Тогда
			Сообщить("Настройка пользователя """+Настройка+""" не найдена");	
			Возврат;
		КонецЕсли;
		Запись = РегистрыСведений.уатНастройкаПользователей.СоздатьМенеджерЗаписи();
		Запись.Пользователь = Пользователь;
		Запись.Прочитать();
		Если не Запись.Выбран() Тогда
			Запись.Пользователь = Пользователь;	
		КонецЕсли;
		Запись[Настройка] = ОбъектМетаданных.Тип.ПривестиЗначение(Значение);
		Запись.Записать(Истина);
	КонецПроцедуры // УправлениеПользователями.ПолучитьЗначениеПоУмолчанию()
	
	// Открывает форму текущего пользователя для изменения его настроек.
	//
	// Параметры:
	//  Нет.
	//
	Процедура уатОткрытьФормуТекущегоПользователя() Экспорт
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ПараметрыСеанса.ТекущийПользователь) Тогда
			Предупреждение("Не задан текущий пользователь.");
		Иначе
			Запись = РегистрыСведений.уатНастройкаПользователей.СоздатьМенеджерЗаписи();
			Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Запись.Прочитать();
			Если НЕ Запись.Выбран() Тогда
				Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				Запись.Записать();
			КонецЕсли;
			
			Запись.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецПроцедуры // уатОткрытьФормуТекущегоПользователя()
	
#КонецЕсли

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

// Выполняет движение по регистру.
//
// Параметры:
//  НаборДвижений               - набор движений регистра,
//  ПустыеКолонкиСоставногоТипа - структура, содержащая имена измерений,ресурсов и
//  реквизитов составного типа, которые могут содержать пустые ссылки.
//
Процедура уатВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено,
	ПустыеКолонкиСоставногоТипа = Неопределено) Экспорт
	
	ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустыеКолонкиСоставногоТипа = Неопределено Тогда
		ПустыеКолонкиСоставногоТипа = Новый Структура;
	КонецЕсли;
	
	//
	КолонкиТаблицы = ТаблицаДвижений.Колонки;
	
	//
	МетаРег = НаборДвижений.Метаданные();
	ИзмеренияСостТипа = Новый Структура;
	ИзмеренияСостТипаСтр = "";
	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Если (МетаИзм.Тип.Типы().Количество() > 1)
			И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаИзм.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаИзм.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаИзм.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРек Из МетаРег.Реквизиты Цикл
		Если (МетаРек.Тип.Типы().Количество() > 1)
			И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРек.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРек.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРек.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРек.Имя;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Если (МетаРес.Тип.Типы().Количество() > 1)
			И НЕ (ПустыеКолонкиСоставногоТипа.Свойство(МетаРес.Имя)) Тогда
			Если не КолонкиТаблицы.Найти(МетаРес.Имя)=Неопределено Тогда
				ИзмеренияСостТипа.Вставить(МетаРес.Имя);
				ИзмеренияСостТипаСтр = ИзмеренияСостТипаСтр + ", " + МетаРес.Имя;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмеренияСостТипаСтр <> "" Тогда
		ИзмеренияСостТипаСтр = Сред(ИзмеренияСостТипаСтр, 3);
	КонецЕсли;
	
	ТипЧисло = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипДата = Тип("Дата");
	
	ЕстьПериод = НЕ ТаблицаДвижений.Колонки.Найти("Период") = Неопределено;
	
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		Движение = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения, ,ИзмеренияСостТипаСтр);
		
		Если ВидДвижения <> Неопределено Тогда
			Движение.ВидДвижения = ВидДвижения;
		КонецЕсли;
		
		Если ЕстьПериод И НЕ СтрокаДвижения.Период = '00010101000000' Тогда
			Движение.Период = СтрокаДвижения.Период;
		ИначеЕсли НаборДвижений.мПериод <> Неопределено Тогда
			Движение.Период = НаборДвижений.мПериод;
		КонецЕсли; 
		Движение.Активность = Истина;
		
		Для Каждого КлючИЗначение ИЗ ИзмеренияСостТипа Цикл
			ЗначениеВКолонке = СтрокаДвижения[КлючИЗначение.Ключ];
			
			Если ЗначениеВКолонке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияВКолонке = ТипЗнч(ЗначениеВКолонке);
			
			Если ТипЗначенияВКолонке = ТипЧисло Тогда
				Если ЗначениеВКолонке = 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипСтрока Тогда
				Если ЗначениеВКолонке = "" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗначенияВКолонке = ТипДата Тогда
				Если ЗначениеВКолонке = '00010101000000' Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗначениеВКолонке.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Движение[КлючИЗначение.Ключ] = ЗначениеВКолонке;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // уатВыполнитьДвижениеПоРегистру()

// Процедура формирует движение в регистр на основании данных в таблицах документов
//	Параметры:
//		- Движение - движение документа, в которое необходимо произвести добавление записей (т.е. регистр)
//		- ВидДвижения - вид движения накопления (приход/расход)
//		- СтруктТаблицДокумента - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//		- ДатаДвижения - дата на которую будут формироваться записи
//
Процедура уатЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктТаблицДокумента, ДатаДвижения) Экспорт
	
	Движение.мПериод = ДатаДвижения;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		Если ТабЧасть.Значение.Количество() = 0 Тогда
			Продолжить; // Пропускаем пустые табличные части
		КонецЕсли;
		
		Движение.мТаблицаДвижений = ТабЧасть.Значение;
		Если ВидДвижения = Неопределено Тогда // Регистр сведений
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Движение);
		Иначе // Регистр накопления
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(Движение, ВидДвижения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // уатЗаписатьТаблицыДокументаВРегистр()

// Процедура заполняет структуру таблиц документа, значением которое будет одинаковым для всех 
// таблиц (например значением шапки документа)
//	Параметры:
//  СтруктТаблицДокумента - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//  ИмяПоля - имя колонки в таблицах документа, в которую будет установлено новое значение
//  УстанавливаемоеЗначение - значение, которое надо установить в таблицы документа
//  СтрТабЧасти - имена таб. частей документа в которые необходимо установить новое значение. строка, в которой
//                 имена таб. частей разделены запятыми. необязательный параметр, по умолчанию - все таблицы.
//
Процедура уатУстановитьЗначениеВТаблицыДокумента(СтруктТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	СтруктТабЧасти = ?( ПустаяСтрока(СтрТабЧасти), СтруктТаблицДокумента, Новый Структура(СтрТабЧасти));
	Для Каждого ТабЧасть Из СтруктТабЧасти Цикл
		
		Если СтруктТаблицДокумента[ТабЧасть.Ключ].Количество() > 0 Тогда
			СтруктТаблицДокумента[ТабЧасть.Ключ].ЗаполнитьЗначения( УстанавливаемоеЗначение, ИмяПоля);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // уатУстановитьЗначениеВТаблицыДокумента()

// Функция загружает таблицы документа в таблицы соответствующие структуре регистров
// Параметры:
//  Движение - движение документа (т.е. регистр)
//  СтруктТаблицДокумента - структура содержащая таблицы документа. ключ - имя таблицы, 
//                    значение - таблица значений с данными документа.
//
// Возврат:
//  Структура, в которой ключ - это имя таблицы документа, соответствующий параметру СтруктТаблицДокумента,
//  значение - таблица значений, со структурой соответствующей структуре параметра (т.е. регистра) Движение
//  В таблицы значений данные загружаются по соответствию с имен полей.
//
Функция уатЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктТаблицДокумента) Экспорт
	
	ПустаяТабРегистра = Движение.Выгрузить();
	ПустаяТабРегистра.Очистить();
	
	СтруктДанных = Новый Структура;
	Для Каждого ТабЧасть Из СтруктТаблицДокумента Цикл
		
		ТабРегистра = ПустаяТабРегистра.Скопировать();
		
		Если ТабЧасть.Значение <> Неопределено И ТабЧасть.Значение.Количество() > 0 Тогда
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений( ТабЧасть.Значение, ТабРегистра);
		КонецЕсли;
		
		СтруктДанных.Вставить( ТабЧасть.Ключ, ТабРегистра);
		
	КонецЦикла;
	
	Возврат СтруктДанных;
	
КонецФункции // уатЗагрузитьТаблицыДокументаВСтруктуру()

// Процедура выполняет движения по регистрам накопления 
//
// Параметры :
//  ТаблицаПоВзаиморасчетам - таблица для передачи результата работы процедуры
//  ВидДвижения       - вид движения по регистрам накопления
//  ДокументОбъект - документ - регистратор
//  СтруктураШапкиДокумента - структура шапки документа - регистратора
//  СтруктураПараметров - структура параметров документа - регистратора
//  Отказ - флаг завершения работы процедуры с ошибкой
// 
Процедура ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ДокументОбъект, СтруктураШапкиДокумента, 
	                                                    СтруктураПараметров, ТаблицаПоВзаиморасчетам,  
	                                                    ВидДвижения, Отказ, Заголовок) Экспорт
												  
	// По регистру ВзаиморасчетыСКонтрагентами
	
	Если ТаблицаПоВзаиморасчетам.Количество() > 0 Тогда
		
		НаборДвиженийВзаиморасчеты = ДокументОбъект.Движения.уатВзаиморасчетыСКонтрагентами;
		
		ТаблицаДвижений = НаборДвиженийВзаиморасчеты.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВзаиморасчетам, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент        , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента, "ДоговорКонтрагента");
		
		НаборДвиженийВзаиморасчеты.мПериод          = СтруктураШапкиДокумента.Дата;
		НаборДвиженийВзаиморасчеты.мТаблицаДвижений = ТаблицаДвижений;
		
		// Проверка остатков при оперативном проведении
		ОтключитьКонтрольВзаиморасчетов = СтруктураШапкиДокумента.Свойство("ОтключитьКонтрольВзаиморасчетов") 
		                                И СтруктураШапкиДокумента.ОтключитьКонтрольВзаиморасчетов;
		Если СтруктураШапкиДокумента.РежимПроведения = РежимПроведенияДокумента.Оперативный
			И НЕ ОтключитьКонтрольВзаиморасчетов Тогда
			НаборДвиженийВзаиморасчеты.КонтрольОстатков(ДокументОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураШапкиДокумента, Отказ, Заголовок, "СуммаВзаиморасчетов");
		КонецЕсли;
		
		Если Не Отказ Тогда
			ОбщегоНазначения.ВыполнитьДвижениеПоРегистру(НаборДвиженийВзаиморасчеты, ВидДвижения);
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры
	
// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Функция ПолучитьТаблицуПлатежейУпр(ДатаДокумента,ВалютаДокумента,Документ, ВидПлатежногоДокумента) Экспорт
	
	КонтролироватьЗадолженности=(ВидПлатежногоДокумента = "ПлатежноеПоручениеИсходящее"
											ИЛИ ВидПлатежногоДокумента = "РасходныйКассовыйОрдер"
											ИЛИ ВидПлатежногоДокумента = "ПлатежноеТребованиеПолученное");										
											
	Запрос=Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасшифровкаПлатежаДок.НомерСтроки КАК НомерСтроки,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,";
	Если КонтролироватьЗадолженности Тогда
		Запрос.Текст=Запрос.Текст+"
		|	РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьСуммуЗадолженности КАК КонтролироватьСуммуЗадолженности,
		|	РасшифровкаПлатежаДок.ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности КАК КонтролироватьЧислоДнейЗадолженности,
		|	РасшифровкаПлатежаДок.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,";
	Иначе
		Запрос.Текст=Запрос.Текст+"
		|	ЛОЖЬ КАК КонтролироватьСуммуЗадолженности,
		|	ЛОЖЬ КАК КонтролироватьЧислоДнейЗадолженности,
		|	0 КАК ДопустимаяСуммаЗадолженности,";
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"
	|	РасшифровкаПлатежаДок.Сделка КАК Сделка,
	|	РасшифровкаПлатежаДок.СуммаПлатежа КАК СуммаПлатежа,
	|	РасшифровкаПлатежаДок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,";
	Если уатОбщегоназначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") тогда
		Запрос.Текст = Запрос.текст + "
		|	ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА &ВалютаДокумента=&ВалютаУпрУчета ТОГДА РасшифровкаПлатежаДок.СуммаПлатежа
		|		КОГДА (КурсыУпрУчета.Курс ЕСТЬ NULL) ИЛИ (КурсыДокумента.Курс ЕСТЬ NULL) ТОГДА 0
		|		КОГДА &ВалютаДокумента<>&ВалютаУпрУчета И КурсыДокумента.Курс <>0 И КурсыУпрУчета.Курс <>0 ТОГДА
		|			РасшифровкаПлатежаДок.СуммаПлатежа*КурсыДокумента.Курс * КурсыУпрУчета.Кратность 
		|			/ (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаУпр,";
	Иначе
		Запрос.Текст = Запрос.текст + "
		|	0 КАК СуммаУпр,";
	КонецЕсли;
	Запрос.Текст = Запрос.текст + "
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Курс КОНЕЦ Как КурсДокумента,
	|	ВЫБОР
	|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ КурсыДокумента.Кратность КОНЕЦ Как КратностьДокумента,";
	Если уатОбщегоназначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") тогда
    	Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Курс КОНЕЦ Как КурсУпрУчета,
		|	ВЫБОР
		|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ КурсыУпрУчета.Кратность КОНЕЦ Как КратностьУпрУчета,
		|	ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаУпрОстаток, 0) КАК СуммаУпрОстаток,";
	Иначе
    	Запрос.Текст = Запрос.Текст + "
		|	0 Как КурсУпрУчета,
		|	0 Как КратностьУпрУчета,
		|	0 КАК СуммаУпрОстаток,";
	КонецЕсли;
	Запрос.текст = Запрос.Текст + "
	|	ЕСТЬNULL(ОстаткиВзаиморасчетов.СуммаВзаиморасчетовОстаток, 0) КАК СуммаВзаиморасчетовОстаток
	|ИЗ
	|	Документ."+ВидПлатежногоДокумента+".РасшифровкаПлатежа КАК РасшифровкаПлатежаДок";
	Если уатОбщегоназначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") тогда
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаУпрУчета) КАК КурсыУпрУчета
		|	ПО ИСТИНА";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта=&ВалютаДокумента) КАК КурсыДокумента
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(,ДоговорКонтрагента В (
	|																			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|																				РасшифровкаПлатежаДокВнутр.ДоговорКонтрагента
	|																			ИЗ
	|																			Документ."+ВидПлатежногоДокумента+".РасшифровкаПлатежа КАК РасшифровкаПлатежаДокВнутр
	|																				ГДЕ РасшифровкаПлатежаДокВнутр.Ссылка = &Ссылка)
	|															) КАК ОстаткиВзаиморасчетов
	|	ПО РасшифровкаПлатежаДок.ДоговорКонтрагента = ОстаткиВзаиморасчетов.ДоговорКонтрагента
	|		И ВЫБОР КОГДА РасшифровкаПлатежаДок.Сделка = &ПустойЗаказГрузоотправителя ТОГДА Неопределено ИНАЧЕ РасшифровкаПлатежаДок.Сделка КОНЕЦ = ОстаткиВзаиморасчетов.Сделка
	|ГДЕ
	|	РасшифровкаПлатежаДок.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ДатаДокумента",ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ПустойЗаказГрузоотправителя",Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	Если уатОбщегоназначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") тогда
		Запрос.УстановитьПараметр("ВалютаУпрУчета",глЗначениеПеременной("ВалютаУправленческогоУчета"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаРеглУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Ссылка",Документ);
	Запрос.УстановитьПараметр("ПустойДоговор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПлатежей()

// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры: 
//  ДокументОбъект        - объект проводимого документа, 
//  ИмяТабличнойЧасти     - строка, имя табличной части,
//  СтруктураПолей        - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//  СтруктураСложныхПолей - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//                          необязательный параметр, служит для передачи конструкций типа "ВЫБОР" и т.д.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей,
                                           СтруктураСложныхПолей = Неопределено) Экспорт


	ТекстЗапроса = "";

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|Док." + Реквизит.Значение + 
		?(НЕ ЗначениеЗаполнено(Реквизит.Ключ), "", " КАК " + СокрЛП(Реквизит.Ключ));

	КонецЦикла;

	Если ТипЗнч(СтруктураСложныхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
	
		Для Каждого Элемент Из СтруктураСложныхПолей Цикл

			ТекстЗапроса  = ТекстЗапроса + ",
			| " + Элемент.Значение + 
			?(НЕ ЗначениеЗаполнено(Элемент.Ключ), "", " КАК " + СокрЛП(Элемент.Ключ));

		КонецЦикла;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	                | Док.НомерСтроки " + ТекстЗапроса + "
	                | ИЗ 
	                |      Документ." + ДокументОбъект.Метаданные().Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + 
	                " КАК Док 
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";


	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()


//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура уатУстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт
	
	// устанавливаем стандартные запреты на изменение видимости колонок
	Для каждого КолонкаТаблицы из Колонки Цикл
		КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
	КонецЦикла;
	
КонецПроцедуры // уатУстановитьИзменятьВидимостьКолонокТабЧасти()

// Изменяет видимость колонки табличного поля (например, табличной части документа).
// Если изменение видимости колонки запрещено, то предварительно разрешает изменять видимость колонки.
//
// Параметры:
//  Колонка   - колонка табличного поля, 
//  Видимость - булево, устанавливаемый флаг видимости колонки.
//
Процедура уатУстановитьВидимостьКолонкиТабЧасти(Колонка, Видимость) Экспорт
	
	Если Колонка.ИзменятьВидимость Тогда
		Колонка.Видимость = Видимость;
	Иначе // надо вначале разрешить менять видимость
		Колонка.ИзменятьВидимость = Истина;
		Колонка.Видимость = Видимость;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры // уатУстановитьВидимостьКолонкиТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура уатЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;
	КонецЕсли;
	
КонецПроцедуры // уатЗаполнитьСодержаниеТабЧасти()

// Процедура очищает значение нужного реквизита в переданной ТЧ.
//
// Параметры:
//  ТабЧаст      - табличная часть,
//  ИмяРеквизита - строка, имя реквизита.
//
Процедура уатОчиститьРеквизитТЧ(ТабЧасть, ИмяРеквизита) Экспорт
	
	Для Каждого Строка Из ТабЧасть Цикл
		Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(Строка[ИмяРеквизита]) Тогда
			Строка[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //уатОчиститьРеквизитТЧ()

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура уатПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ТекПользователь, РасчетАвтоматическихСкидок = Ложь) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Количество) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе	
		Если ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
			Если (ПересчитыватьСкидку И СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0) Тогда
				Если (СтрокаТабличнойЧасти.Цена = 0) Или (СтрокаТабличнойЧасти.Количество = 0) Тогда
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
					Если СтрокаТабличнойЧасти.Цена = 0 Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Цена равна 0, после изменения суммы установлена нулевая скидка!");
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Количество равно 0, после изменения суммы установлена нулевая скидка!");
					КонецЕсли;
				Иначе
					СуммаСоСкидками = СтрокаТабличнойЧасти.Сумма;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
					ПроцентСкидки   = 100 - (СуммаСоСкидками*100)/СуммаБезСкидок;
					ПроцентАвтоматическихСкидок = 0;
					Если ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки - ПроцентАвтоматическихСкидок;
				КонецЕсли;
			Иначе
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки >= 100 Тогда
					СтрокаТабличнойЧасти.Цена = 0;
					ОбщегоНазначения.СообщитьОбОшибке("Скидка равна 100%, после изменения суммы установлена нулевая цена!");
				Иначе
					ПроцентАвтоматическихСкидок = 0;
					Если ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
						ПроцентАвтоматическихСкидок = СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
					КонецЕсли;
					СуммаБезСкидок  = СтрокаТабличнойЧасти.Сумма * 100/
					(100 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки - ПроцентАвтоматическихСкидок);
					СтрокаТабличнойЧасти.Цена = СуммаБезСкидок / СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // уатПриИзмененииСуммыТабЧасти()   

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура уатЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	//Заполнить СтавкаНДС
	Если ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры // уатЗаполнитьСтавкуНДСТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа,
//  СпособРасчета        - "Со всеми скидками", сумма минус скидки;
//                         "Без учета ручной скидки", сумма минус автоматические скидки;
//                         "Без учета скидок", сумма (Цена * Количество);
//
Процедура уатРассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СпособРасчета = Неопределено) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	
КонецПроцедуры // уатРассчитатьСуммуТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура уатРассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	// Если в документе нет флагов учета НДС, то в конфигурации считается, что суммы включают НДС.
	УчитыватьНДС = Истина;
	СуммаВключаетНДС = Истина;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента ) Тогда
		УчитыватьНДС = ДокументОбъект.УчитыватьНДС;
	КонецЕсли;
	
	Если уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента ) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНДС = уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	УчитыватьНДС, СуммаВключаетНДС,
	уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры // уатРассчитатьСуммуНДСТабЧасти()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура уатРассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.СуммаНДСПередачи = уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаПередачи,
	ДокументОбъект.УчитыватьНДС,
	ДокументОбъект.СуммаВключаетНДС,
	уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
КонецПроцедуры // уатРассчитатьСуммуНДСТабЧасти()

// Функция выполняет поиск первой, удовлетворяющей условию поиска, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция уатНайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт
	
	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции // уатНайтиСтрокуТабЧасти()

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура уатЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт
	
	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СтруктураШапкиДокумента.Свойство("ТипЦен", ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",    ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",  ВалютаДокумента);
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",     УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	
	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	
	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 
		
		// берем из самого реквизита Номенклатура
		Если ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			СтрокаТабличнойЧасти.Цена             = 0;
		КонецЕсли;
		
	Иначе
		// из регистра
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		ТипЦен, ДатаДокумента,
		ВалютаДокумента, уатКурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 
		уатКратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		
		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			
			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС, СуммаВключаетНДС, 
				уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;
		
		// Если единица оказалась не заполненной, то заполняем ее основной единицей номенклатуры
		Если уатРаботаСМетаданными.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент = 1
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// если в документе существует реквизит КоличествоМест, то рассчитанная цена идет за него
	// вычислим цену за базовую единицу
	Если уатРаботаСМетаданными.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.Коэффициент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

// Функция возвращает признак можно ли пользователю изменять цены в расходных накладных или нет.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  Истина - если можно менять цены, иначе Ложь.
//
Функция уатРазрешитьРедактированиеЦенВДокументах() Экспорт
	Возврат Истина;
КонецФункции // уатРазрешитьРедактированиеЦенВДокументах()

// Проверяет, что в табличной части нет товаров.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура уатПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  Не СтрокаТаблицы.Номенклатура.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
					                   "Здесь могут быть только услуги!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПроверитьЧтоНетТоваров

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	Если (НЕ ТаблицаЗначений = Неопределено) И (ТаблицаЗначений.Количество() > 0) Тогда
		// Цикл по строкам таблицы значений.
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
					                   "Услуг здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	Иначе
		// Цикл по строкам табличной части документа.
		Для каждого СтрокаТаблицы Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТаблицы.Номенклатура)
			   И  СтрокаТаблицы.Номенклатура.Услуга Тогда

					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "содержится услуга. " +
					                   "Услуг здесь быть не должно!", Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры //ПроверитьЧтоНетУслуг()

// Функция производит поиск подчиненного документа
//
// Параметры:
//  ДокументСсылка - Документ для которого производиться поиск подчиненных документов
//  ВидДокумента - Строка - вид искомого подчиненного документа 
//  Реквизит     - имя реквизита документа значение которого проверяется
//  Значение     - значение проверяемого реквизита
//
// Возвращаемое значение:
//  НайденныйДокумент - документ ссылка.
Функция уатНайтиПодчиненныйДокумент(ДокументСсылка, ВидДокумента, Реквизит = Неопределено, Значение = Неопределено) Экспорт

	НайденныйДокумент = Неопределено;
	Если ЗначениеЗаполнено(ДокументСсылка) И ЗначениеЗаполнено(ВидДокумента) Тогда

		Запрос = Новый Запрос;

		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документ.Ссылка
		|ИЗ
		|	Документ."+ВидДокумента+" КАК Документ
		|ГДЕ
		|	Документ.ДокументОснование = &ДокументСсылка";
		
		Если Реквизит<>Неопределено И ЗначениеЗаполнено(Реквизит) Тогда
			Запрос.Текст = Запрос.Текст + " И Документ."+Реквизит+" = &"+Реквизит;
			Запрос.УстановитьПараметр(Реквизит,Значение);
		КонецЕсли;

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			НайденныйДокумент = Выборка.Ссылка;
		КонецЕсли;

	КонецЕсли;

	Возврат НайденныйДокумент;
	
КонецФункции // НайтиПодчиненныйДокумент()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС = уатПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100+ЗначениеСтавкиНДС);
	
КонецПроцедуры // ПересчитатьСуммуНДС()

//=================================================================================
// ПРОЦЕДУРЫ РАБОТЫ С ПЕРИОДАМИ

// Выравнивает дату по началу периода.
//
// Параметры:
//  ДатаПланирования  - выравниваемая дата
//  Периодичность     - тип интервала для выравнивания
//  НазваниеДаты 	  - наименование вида даты для вывода сообщения
//  ВыводитьСообщение - признак необходимости вывода сообщения о выравнивании
//
Процедура уатВыровнятьДатуПоНачалуПериода(ДатаПланирования, Периодичность, НазваниеДаты = "Дата начала периода ", ВыводитьСообщение=Ложь) Экспорт
	
	ДатаИзменена = Ложь;
	ДатаНачПериода = ДатаПланирования;
	уатВыровнятьПериод(ДатаНачПериода,, Периодичность);
	
	Если ДатаПланирования <> ДатаНачПериода Тогда
		
		ДатаПланирования = ДатаНачПериода;
		ДатаИзменена = Истина;
		
	КонецЕсли;
	
	Если ВыводитьСообщение и ДатаИзменена Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(НазваниеДаты + "изменена в соответствии с установленной периодичностью.");
		
	КонецЕсли;
	
КонецПроцедуры // ВыровнятьДатуПоНачалуПериода()

// Процедура выравнивает начальную и конечную даты по границам указанной периодичности
// 		ДатаНачПериода - дата, которую нужно выровнять по началу указанной периодичностью
// 		ДатаКонПериода - дата, которую нужно выровнять по окончанию указанной периодичностью
// 		Периодичность - периодичность, определяющая границы выравнивания
// 
Процедура уатВыровнятьПериод(ДатаНачПериода = Неопределено, ДатаКонПериода = Неопределено, Периодичность = Неопределено) Экспорт
	
	Если ТипЗнч(Периодичность) <> Тип("ПеречислениеСсылка.Периодичность") ИЛИ Периодичность = Перечисления.Периодичность.ПустаяСсылка() Тогда
		
		ТекущаяПериодичность = Перечисления.Периодичность.День;
		
	Иначе
		
		ТекущаяПериодичность = Периодичность;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&ДатаНач, " + Строка(ТекущаяПериодичность) + ") КАК ДатаНач,
	|	КОНЕЦПЕРИОДА(&ДатаКон, " + Строка(ТекущаяПериодичность) + ") КАК ДатаКон");
	
	Запрос.УстановитьПараметр("ДатаНач", ?(ТипЗнч(ДатаНачПериода) <> Тип("Дата"), Дата('00010101'), ДатаНачПериода));
	Запрос.УстановитьПараметр("ДатаКон", ?(ТипЗнч(ДатаКонПериода) <> Тип("Дата"), Дата('00010101'), ДатаКонПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДатаНачПериода = Выборка.ДатаНач;
	ДатаКонПериода = Выборка.ДатаКон;
	
КонецПроцедуры // ВыровнятьПериод()

// Выравнивает дату по окончанию периода.
//
// Параметры:
//  ДатаПланирования  - выравниваемая дата
//  Периодичность     - тип интервала для выравнивания
//  НазваниеДаты 	  - наименование вида даты для вывода сообщения
//  ВыводитьСообщение - признак необходимости вывода сообщения о выравнивании
//
Процедура уатВыровнятьДатуПоКонцуПериода(ДатаПланирования, Периодичность, НазваниеДаты = "Дата окончания периода ", ВыводитьСообщение = Ложь) Экспорт
	
	ДатаИзменена = Ложь;
	ДатаКонПериода = ДатаПланирования;
	уатВыровнятьПериод(, ДатаКонПериода, Периодичность);
	
	Если ДатаПланирования <> ДатаКонПериода Тогда
		
		ДатаПланирования = ДатаКонПериода;
		ДатаИзменена = Истина;
		
	КонецЕсли;
	
	Если ВыводитьСообщение и ДатаИзменена Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке(НазваниеДаты + "изменена в соответствии с установленной периодичностью.");
		
	КонецЕсли;
	
КонецПроцедуры // уатВыровнятьДатуПоКонцуПериода()

//=================================================================================
// !!!Удалить

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция уатПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");
		Если уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
			И уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
			И ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти)
			И ДокументОбъект.УчитыватьНДС
			И Не ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
		КонецЕсли; 
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("Сумма");
				Если уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
					И уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
					И ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя)
					И ДокументОбъект.УчитыватьНДС
					И Не ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СуммаНДС = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // ПолучитьСуммуДокументаСНДС()

// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция уатПолучитьСтавкуНДС(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Возврат 18;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ПолучитьСтавкуНДС()

// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
//
// Параметры: 
//  Сумма            - число, сумма от которой надо рассчитывать налоги, 
//  УчитыватьНДС     - булево, признак учета НДС в сумме, 
//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
//  СтавкаНДС        - число , процентная ставка НДС,
//
// Возвращаемое значение:
//  Число, полученная сумма НДС
//
Функция уатРассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт
	
	Если (УчитыватьНДС) И (СуммаВключаетНДС) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;
	
	Если УчитыватьНДС Тогда 
		Если НЕ СуммаВключаетНДС Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм всех документов.
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа,
//  ТекПользователь                - ссылка на справочник, определяет текущего пользователя  
//  ВалютаРегламентированногоУчета - валюта регламентированного учета,
//  ТипОперации                    - необязаетельный, строка вида операции ("Покупка" или "Продажа"),
//                                   если не передан, то реквизиты, зависящие от вида операции, не заполняются,
//  ПараметрОбъектКопирования      - ссылка на объект копирования,
//  ПараметрОснование              - ссылка на объект-основание.
//
Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, ТипОперации = "", ПараметрОбъектКопирования = Неопределено, ПараметрОснование = Неопределено) Экспорт

	Перем ТипЦен;

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ДатаДокумента = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.Дата),ОбщегоНазначения.ПолучитьРабочуюДату(),ДокументОбъект.Дата);
	
	// Заполним флаги принадлежности к учету исходя из значений по умолчанию.
	Если уатЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = ПараметрОбъектКопирования.ОтражатьВБухгалтерскомУчете;
		Иначе
			Попытка
				ДокументОбъект.ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если уатЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", МетаданныеДокумента) Тогда
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВУправленческомУчете = ПараметрОбъектКопирования.ОтражатьВУправленческомУчете;
		Иначе
			Попытка
				ДокументОбъект.ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВУправленческомУчете");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если уатЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДокументОбъект.ОтражатьВНалоговомУчете = ПараметрОбъектКопирования.ОтражатьВНалоговомУчете;
		Иначе
			Попытка
				ДокументОбъект.ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
			Исключение
				Попытка
					ДокументОбъект.ОтражатьВНалоговомУчете = НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "НеОтражатьДокументыВНалоговомУчете");
				Исключение
				КонецПопытки;	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
		ДокументОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяОрганизация");
	КонецЕсли;

	Попытка
		Если уатЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента) И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)) Тогда
			ДокументОбъект.ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если уатЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СтруктурнаяЕдиница) 
	   И уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		ДокументОбъект.СтруктурнаяЕдиница = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
	  ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации)) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Склад)) Тогда
		ДокументОбъект.Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ОбъектЗатрат", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ОбъектЗатрат)) Тогда
		ДокументОбъект.ОбъектЗатрат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОбъектЗатрат");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("СкладОрдер", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СкладОрдер) Тогда
		ДокументОбъект.СкладОрдер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("СтавкаНДС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС)) Тогда
		ДокументОбъект.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
		ДокументОбъект.СчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		ДокументОбъект.ВалютаДокумента = ДокументОбъект.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)) Тогда
	    СтруктураКурсаДокумента      = ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

		Если уатЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)) Тогда
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДокумента);
		ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;

		Если уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;
	КонецЕсли;
	
	флСуммаВключаетНДС = Истина;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда

		// Если тип цен оказался не заполненным, то берем его из установок пользователя
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) И ТипОперации = "Продажа" Тогда
			ДокументОбъект.ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойТипЦенПродажи");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда

			// Если ТипЦен - элемент справочника ТипыЦенНоменклатуры и цены выбранного типа расчетные, 
			// то флаги включения налогов надо брать из базовой цены
			Если ТипЗнч(ДокументОбъект.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") 
			   И уатЕстьРеквизитДокумента("БазовыйТипЦен",ДокументОбъект.ТипЦен.Метаданные()) 
			   И уатЕстьРеквизитДокумента("Рассчитывается",ДокументОбъект.ТипЦен.Метаданные()) И ДокументОбъект.ТипЦен.Рассчитывается Тогда
				флСуммаВключаетНДС = ДокументОбъект.ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
			Иначе
				флСуммаВключаетНДС = ДокументОбъект.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
	   И (Не ДокументОбъект.УчитыватьНДС) Тогда

		ДокументОбъект.УчитыватьНДС = Истина;

		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
			ДокументОбъект.СуммаВключаетНДС = флСуммаВключаетНДС;
		КонецЕсли;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ЗанимаемыхСтавок", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ЗанимаемыхСтавок)) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;

	Если уатЕстьРеквизитДокумента("ДатаС", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ДатаС)) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;
	
	# Если Клиент Тогда

	Если уатЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента)
	   И (НЕ ЗначениеЗаполнено(ДокументОбъект.ПериодРегистрации)) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(РабочаяДата);
	КонецЕсли;

	#КонецЕсли


КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция уатФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
	?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
	?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции // ФорматСумм()

// Процедура выполняет общие действия при изменении контрагента
//
// Параметры:
//  ДокументОбъект                          - объект редактируемого документа,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых видов взаиморасчетов, не обязательный.
//
Процедура уатПриИзмененииЗначенияКонтрагента(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ЕстьДоговорКонтрагента        = уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);

	Если ДокументОбъект.Контрагент = Неопределено Тогда
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
	Если ТипЗнч(ДокументОбъект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("Строка") Тогда
				КонтактноеЛицо = "";
			Иначе
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	Иначе
		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			Если  уатМожноИспользоватьДоговорДляДокумента(ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
				ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
			Иначе
				ДоговорКонтрагента = уатПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
			КонецЕсли;
		КонецЕсли;
		
		Если уатЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицо)
				ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
				КонтактноеЛицо = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
			Иначе
				Если ДокументОбъект.КонтактноеЛицо.Владелец <> ДокументОбъект.Контрагент Тогда
					КонтактноеЛицо = ДокументОбъект.Контрагент.ОсновноеКонтактноеЛицо;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) И ДоговорКонтрагента <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				ДокументОбъект.Организация = ДоговорКонтрагента.Организация;
			ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагента.Организация Тогда
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено; // Очистить старый договор
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если уатЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокумента) И КонтактноеЛицо <> Неопределено Тогда
		ДокументОбъект.КонтактноеЛицо = КонтактноеЛицо;
	КонецЕсли; 
	
	Если уатЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;
	
	Если уатЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
		И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
		И Не ДокументОбъект.ТипЦен.Владелец = ДокументОбъект.Контрагент Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Проверяет. можно ли использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, ложь - нельзя.
//
Функция уатМожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров"     , СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора"       , ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов"   , ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе не выбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено 
	   И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду взаиморасчетов.
	Если СписокДопустимыхВидовВзаиморасчетов <> Неопределено 
	   И СписокДопустимыхВидовВзаиморасчетов.НайтиПоЗначению(Договор.ВедениеВзаиморасчетов) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // МожноИспользоватьДоговорДляДокумента()

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента, а также переданным параметрам.
// Если всем параметрам удовлетворяет основной договор, то выбирается он.
//
// Параметры
//  Организация                             - организация, по которой определяется договор
//  Контрагент                              - контрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция уатПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если не передана организация, то проверим, можно ли использовать основной договор. 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Договор = Контрагент.ОсновнойДоговорКонтрагента;
		Если уатМожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарКонтрагент",          Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора",         СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов",   СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов",ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация",         Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|");

	Если ЗначениеЗаполнено(Организация) Тогда 

		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ПарВалютаВзаиморасчетов
		|")
		+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ПарВидДоговора)
		|")
		+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
		|")
		+ "
		|	         ТОГДА ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";

	ТаблицаДоговоров =  Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДоговоров.Количество() = 1 ИЛИ (ТаблицаДоговоров.Количество() И ТаблицаДоговоров[0].Приоритет = 1) Тогда
		Возврат ТаблицаДоговоров[0].Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьДоговорПоОрганизацииИКонтрагенту()


 // Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//		ДокументОбъект - объект документ в форме которого произошло событие
//
Процедура уатПриИзмененииЗначенияОрганизации(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если уатЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

		Если уатЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		   И Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДокументОбъект.Организация)
		   И Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДокументОбъект.ПодразделениеОрганизации)
		   И Не ДокументОбъект.ПодразделениеОрганизации.Владелец = ДокументОбъект.Организация Тогда

			ДокументОбъект.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			#Если Клиент Тогда
			Предупреждение("Выбранное подразделение не соответствует организации!");
            #КонецЕсли
		КонецЕсли;

		Если уатЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента)
					Или ДокументОбъект.ДоговорКонтрагента.Организация <> ДокументОбъект.Организация Тогда
					ДокументОбъект.ДоговорКонтрагента = уатПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, ДокументОбъект.Контрагент, СтруктураПараметровДляПолученияДоговора);
				КонецЕсли;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;

		Если уатЕстьРеквизитДокумента("БанковскийСчетОрганизации", МетаданныеДокумента) Тогда
			ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры //уатПриИзмененииЗначенияОрганизации()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция уатКратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Если есть реквизит КратностьДокумента - его и вернем
		Если уатЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьДокумента;
		КонецЕсли;
		
		// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КратностьВзаиморасчетов - его и вернем.
		Если уатЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КратностьВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // КратностьДокумента()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры: 
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция уатКурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт
	
	// Если валюта документа совпадает с валютой регл. учета, то курс 1.
	Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// Если есть реквизит КурсДокумента - его и вернем
		Если уатЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсДокумента;
		КонецЕсли;
		
		// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета, 
		// то такой документ может быть выписан только в валюте взаиморасчетов,
		// если есть реквизит КурсВзаиморасчетов - его и вернем.
		Если уатЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			Возврат ДокументОбъект.КурсВзаиморасчетов;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // КурсДокумента()

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция уатПредставлениеДокументаПриПроведении(Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	ВидОперацииСтр = "";
	Если уатЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента) Тогда
		ВидОперацииСтр = " (" + Документ.ВидОперации + ")";
	КонецЕсли;
	
	Возврат "Проведение документа: " + СокрЛП(Документ) + ВидОперацииСтр;
	
КонецФункции // ПредставлениеДокументаПриПроведении()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура уатПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	//ПроверитьПринадлежностьКВидамУчета();
	
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		
		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура уатПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
	Отказ, Заголовок) Экспорт
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	ТабличнаяЧасть = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

// Процедура вызывает сервисный механизм для изменения общих для
// всей табличной части Товары реквизитов, таких, например, как
// тип цен, валюта и т. д.
//
// Параметры:
//  ДокументОбъект                     - объект редактируемого документа; 
//  СпособЗаполненияЦен                - значение перечисления "Способы заполнения цен", определяет по какому из 
//                                       регистров ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр;
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураЗначений                  - для эмуляции ввода пользователем валюты, типа цен и пр. Применяется при
//                                       автоматическом заполнении документов.
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//  СтруктураНеобрабатываемыхТабличныхЧастей - структура, содержащая имена табличных частей, которые не надо 
//                                       обрабатывать при изменении цен/валюты;
//
Процедура уатИзменитьЦеныВалюту(ДокументОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, 
	СтруктураНеРедактируемыхРеквизитов = Неопределено, ИмяТабличнойЧасти,
	ВалютаРегламентированногоУчета,
	СкидкаУстановлена = Ложь,
	СтруктураЗначений = Неопределено,
	НовыйТипЦенДляУстановки = Неопределено,
	СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено) Экспорт
	
	// Откроем модально форму "Цены и Налоги" и получим структуру старых и новых значений реквизитов документа
	Автозаполнение = Ложь;
	Если СтруктураЗначений = Неопределено Тогда
		
		СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
		СтруктураНеРедактируемыхРеквизитов, ИмяТабличнойЧасти, НовыйТипЦенДляУстановки);
	Иначе
		
		Автозаполнение = Истина;
		
	КонецЕсли;
	
	// Если в форме отказались от изменений, то необходимо прекратить обработку
	Если СтруктураЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним нужные реквизиты документа
	Ценообразование.УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураЗначений, ДокументОбъект, СтруктураРеквизитовДокумента);
	
	//обрабатываем изменения Товаров, Услуг, ВозвратнойТары 
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Для Каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		ТекущееИмяТабличнойЧасти = ТЧОбъекта.Имя;
		Если (СтруктураНеобрабатываемыхТабличныхЧастей = Неопределено
			ИЛИ Не СтруктураНеобрабатываемыхТабличныхЧастей.Свойство(ТекущееИмяТабличнойЧасти))
			И (ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)
			ИЛИ ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТекущееИмяТабличнойЧасти)) Тогда
			
			Ценообразование.ОбработатьИзмененияПоКнопкеЦеныВалюта(ДокументОбъект,
			СпособЗаполненияЦен,
			СтруктураРеквизитовДокумента,
			ТекущееИмяТабличнойЧасти,
			ВалютаРегламентированногоУчета,
			СкидкаУстановлена,
			СтруктураЗначений,
			Автозаполнение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьЦеныВалюту()  

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПЕРСОНАЛОМ

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью 
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры:
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка 
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция уатФамилияИнициалыФизЛица(Объект = Неопределено, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда 
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.уатСотрудники") ИЛИ ТипОбъекта = Тип("СправочникОбъект.уатСотрудники") Тогда 
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
		Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
		"")
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
	Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
	"");
	
КонецФункции

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

// Формирует структуру дерева значений, содержащего имена полей, которые
// нужно заполнить в запросе по шапке документа.
//
// Возвращаемое значение:
//  Дерево значений.
//
Функция СформироватьДеревоПолейЗапросаПоШапке()  Экспорт
	
	ДеревоПолейЗапросаПоШапке = Новый ДеревоЗначений;
	ОписаниеТиповСтрока       = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Объект"   , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Поле"     , ОписаниеТиповСтрока);
	ДеревоПолейЗапросаПоШапке.Колонки.Добавить("Псевдоним", ОписаниеТиповСтрока);
	
	Возврат ДеревоПолейЗапросаПоШапке;
	
КонецФункции // СформироватьДеревоПолейЗапросаПоШапке()

// Вставляет строку в дерево полей запроса по шапке, если ее там еще нет,
// если есть, то ничего не делает.
//
// Параметры:
//  ДеревоПолейЗапросаПоШапке - дерево значений, содержащего имена полей, 
//                              которые нужно заполнить в запросе по шапке документа, 
//  ИмяОбъекта                - строка, имя объекта (справочник, регистр и т.д.), 
//  ИмяПоля                   - строка, имя поля объекта,
//  ИмяПсевдонима             - строка, имя псевдонима в запросе поля объекта (необязательный).
//
Процедура ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, ИмяОбъекта, ИмяПоля, ИмяПсевдонима = Неопределено) Экспорт
	
	// Поищем нужную строку.
	// Вначале ищем объект.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти(ИмяОбъекта, "Объект");
	
	Если СтрокаОбъекта = Неопределено Тогда // нужно добавить.
		
		СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Добавить();
		СтрокаОбъекта.Объект    = ИмяОбъекта;
		СтрокаОбъекта.Поле      = ИмяПоля;
		СтрокаОбъекта.Псевдоним = ИмяПсевдонима;
		
	КонецЕсли;
	
	// Ищем поле.
	СтрокаПоля = СтрокаОбъекта.Строки. Найти(ИмяПоля,"Поле");
	
	Если СтрокаПоля = Неопределено Тогда // нужно добавить
		
		СтрокаПоля = СтрокаОбъекта.Строки.Добавить();
		
		СтрокаПоля.Поле      = ИмяПоля;
		СтрокаПоля.Псевдоним = ИмяПсевдонима;
		
	КонецЕсли;
	
	// Ищем псевдоним.
	СтрокаПоля = СтрокаОбъекта.Строки.Найти( ИмяПсевдонима, "Псевдоним");
	
	Если СтрокаПоля = Неопределено Тогда // нужно добавить
		
		СтрокаПоля = СтрокаОбъекта.Строки.Добавить();
		
		СтрокаПоля.Поле      = ИмяПоля;
		СтрокаПоля.Псевдоним = ИмяПсевдонима;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДеревоПолейЗапросаПоШапке()

// Формирует запрос на дополнительные параметры, нужные при проведении документа.
//
// Параметры: 
//  ДокументОбъект                 - объект проводимого документа, 
//  ДеревоПолейЗапросаПоШапке      - дерево значений, содержащего имена полей, 
//                                   которые нужно заполнить в запросе по шапке документа.
//  СтруктураШапкиДокумента        - структура, содержащая значения реквизитов, относящихся к шапке документа,
//                                   необходимых для его проведения.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Дополненная по результату запроса структура СтруктураШапкиДокумента.
//
Функция СформироватьЗапросПоДеревуПолей(ДокументОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета)  Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ";

	СтрокиЗапроса           = "";
	ТаблицыЗапроса          = "";
	НуженКурсВалютыУпрУчета = Ложь;
	ЕстьУчетнаяПолитика     = Ложь;
	
	// Реквизиты договора взаиморасчетов.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентов", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагента." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты договора взаиморасчетов регл.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентовРегл", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагентаРегл." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты сделки.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Сделка", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Сделка." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Склад", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Склад." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОтправитель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОтправитель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПеремещения", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПеремещения." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументПередачи", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументПередачи." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-получателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладПолучатель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладПолучатель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада-ордера
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОрдер", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОрдер." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Заказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Заказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ВнутреннийЗаказ", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ВнутреннийЗаказ." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа покупателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказыПокупателей", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПокупателя." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты заказа поставщику
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ЗаказыПоставщикам", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ЗаказПоставщику." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты номенклатуры
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Номенклатура", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Номенклатура." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты документа основания
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументОснование", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для Каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументОснование." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Константы.
	ТаблицыЗапроса = ТаблицыЗапроса + ", Константы";

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Константы", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			Если СтрокаПоля.Поле = "КурсВалютыУправленческогоУчета" Тогда

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Курс КАК КурсВалютыУправленческогоУчета";
			
				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыУправленческогоУчета";
			
				НуженКурсВалютыУпрУчета = Истина;

			Иначе

				СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
				Символы.Таб + "Константы." + СокрЛП(СтрокаПоля.Поле) +
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("УчетнаяПолитика", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда
		ЕстьУчетнаяПолитика = Истина;
		
		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл
			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
			Символы.Таб + "УчетнаяПолитикаСрезПоследних." + СокрЛП(СтрокаПоля.Поле) +
				?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));
		КонецЦикла;
			
	КонецЕсли;

	// Надо добавить константу ВалютаРегламентированногоУчета
	СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС + 
	Символы.Таб + "Константы.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета";

	СтрокаЗапросаКурсВалютыУпрУчета = Символы.ПС + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента,) КАК КурсыВалютСрезПоследних
	|	ПО Константы."
	+ ?(Метаданные.Константы.Найти("ВалютаУправленческогоУчета") <> Неопределено, "ВалютаУправленческогоУчета", "ВалютаРегламентированногоУчета")
	+ " = КурсыВалютСрезПоследних.Валюта";

	Если Метаданные.РегистрыСведений.Найти("УчетнаяПолитикаОрганизаций") <> Неопределено Тогда
		СтрокаРегистраУчетнойПолитики = Символы.ПС + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних
		|	ПО Истина";
	Иначе
		СтрокаРегистраУчетнойПолитики = Символы.ПС + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика.СрезПоследних(&ДатаДокумента,) КАК УчетнаяПолитикаСрезПоследних
		|	ПО Истина";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ " + Сред(СтрокиЗапроса, 2) + "
	                | ИЗ 
	                |      Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док "+ ТаблицыЗапроса +
	                ?(НуженКурсВалютыУпрУчета, СтрокаЗапросаКурсВалютыУпрУчета,"") + Символы.ПС + 
	                ?(ЕстьУчетнаяПолитика, СтрокаРегистраУчетнойПолитики,"") + Символы.ПС + "
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", ДокументОбъект.Дата);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Для каждого Колонка из ТаблицаЗапроса.Колонки Цикл
		Если ТаблицаЗапроса.Количество() = 0 Тогда
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, Неопределено);
		Иначе
			СтруктураШапкиДокумента.Вставить(Колонка.Имя, ТаблицаЗапроса[0][Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		Если уатЕстьРеквизитДокумента("ВалютаДокумента", ДокументОбъект.Метаданные()) Тогда
			СтруктураШапкиДокумента.Вставить("КурсДокумента", 		уатКурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
			СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	уатКратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции // СформироватьЗапросПоДеревуПолей()

//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВАЛЮТАМИ

// Эта функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач 
// в валюту ВалютаКон по курсу ПоКурсуКон
//
// Параметры:      
//	Сумма          - сумма, которую следует пересчитать;
//	ВалютаНач      - ссылка на элемент справочника Валют;
//                   определяет валюты из которой надо пересчитывать;
//	ВалютаКон      - ссылка на элемент справочника Валют;
//                   определяет валюты в которую надо пересчитывать;
// 	ПоКурсуНач     - курс из которого надо пересчитать, может быть указана дата для валюты нач;
// 	ПоКурсуКон     - курс в который надо пересчитать, может быть указана дата для валюты кон;
// 	ПоКратностьНач - кратность из которого надо пересчитать (по умолчанию = 1);
// 	ПоКратностьКон - кратность в который надо пересчитать  (по умолчанию = 1);
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, Знач ПоКурсуНач, Знач ПоКурсуКон, Знач ПоКратностьНач = 1, Знач ПоКратностьКон = 1) Экспорт
	Если ВалютаНач = ВалютаКон Тогда
		// Считаем, что пересчет не нужен.
		Возврат Сумма;
	КонецЕсли;
	
	//если входные параметры - даты расчета курсов, то по ним курс и кратность считаем уже здесь
	Если ТипЗнч(ПоКурсуНач) = Тип("Дата") И ТипЗнч(ПоКурсуКон) = Тип("Дата") Тогда
		СтруктураНачКурс = ПолучитьКурсВалюты(ВалютаНач, ПоКурсуНач);
		ПоКурсуНач = СтруктураНачКурс.Курс;
		ПоКратностьНач = СтруктураНачКурс.Кратность;
		СтруктураКонКурс = ПолучитьКурсВалюты(ВалютаКон, ПоКурсуКон);
		ПоКурсуКон = СтруктураКонКурс.Курс;
		ПоКратностьКон = СтруктураКонКурс.Кратность;
	КонецЕсли;

	Если ПоКурсуНач = ПоКурсуКон И ПоКратностьНач = ПоКратностьКон Тогда
		// ну, тут и считать нечего...
		Возврат Сумма;
	КонецЕсли;
	
	Если ПоКурсуНач = 0 ИЛИ ПоКратностьНач = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При пересчете обнаружен нулевой курс или кратность валюты """ + ВалютаНач + """!");
		Возврат 0;
	КонецЕсли;
	Если ПоКурсуКон = 0 ИЛИ ПоКратностьКон = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("При пересчете обнаружен нулевой курс или кратность валюты """ + ВалютаКон + """!");
		Возврат 0;
	КонецЕсли;
	
	Возврат Окр((Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач), 2);	
КонецФункции //ПересчитатьИзВалютыВВалюту()

// Возвращает курс валюты на дату
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты")
//  ДатаКурса  - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты
//
Функция ПолучитьКурсВалюты(Валюта, Знач ДатаКурса) Экспорт
	
	Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	Возврат Структура;
	
КонецФункции // ПолучитьКурсВалюты()


//=================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДСИСТЕМЫ ВЗАИМОРАСЧЕТОВ

// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация           - ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента - ссылка на договор, выбранный в документе,
//  ДоговорОрганизация    - ссылка на Организацию, выбранную в договоре,
//  Отказ                 - флаг отказа в проведении.
//  Заголовок             - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
	                                                  ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся.
	Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(Организация) 
	   И Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДоговорКонтрагента)
	   И Организация <> ДоговорОрганизация Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

// Проверяет наличие установленного курс аи кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
//  Валюта - ссылка на элемент справочника Валют
//
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт
	
	ДатаКурса = Дата(1980, 1, 1);
	СтруктураКурса = ПолучитьКурсВалюты(Валюта, ДатаКурса);
	
	Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда
		
		// установим курс и кратность = 1 на 01.01.1980, чтобы не было ошибок при создании документов
		
		РегистрКурсыВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		
		РегистрКурсыВалют.Период    = ДатаКурса;
		РегистрКурсыВалют.Валюта    = Валюта;
		РегистрКурсыВалют.Курс      = 1;
		РегистрКурсыВалют.Кратность = 1;
		РегистрКурсыВалют.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьКурсаНа01_01_1980()

// Процедура возвращает паспортные данные физлица в виде строки
	//
	// Параметры: 
	//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которому необходимо
	//            получить паспортные данные.
	//
	// Возвращаемое значение:
	//  Строка с данными об удостоверении личности физического лица
	//
	Функция уатПолучитьПаспортныеДанныеСтрокой(ФизЛицо) Экспорт
		
		#Если Клиент Тогда
			ДатаПолучения = РабочаяДата;
		#Иначе
			ДатаПолучения = ТекущаяДата();
		#КонецЕсли
		
		СтруктураПаспортныхДанных	= РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(ДатаПолучения, Новый Структура("ФизЛицо",ФизЛицо));
		ВидДокумента				= СтруктураПаспортныхДанных.ДокументВид;
		Серия						= СтруктураПаспортныхДанных.ДокументСерия;
		Номер						= СтруктураПаспортныхДанных.ДокументНомер;
		ДатаВыдачи					= СтруктураПаспортныхДанных.ДокументДатаВыдачи;
		КемВыдан					= СтруктураПаспортныхДанных.ДокументКемВыдан;
		НомерПодразделения			= СтруктураПаспортныхДанных.ДокументКодПодразделения;
		
		Если НЕ (НЕ ЗначениеЗаполнено(ДатаВыдачи)
			И НЕ ЗначениеЗаполнено(ВидДокумента)
			И НЕ ЗначениеЗаполнено(Серия + Номер + КемВыдан + НомерПодразделения)) Тогда
			
			Возврат ?(ВидДокумента.Пустая(),"","" + ВидДокумента + ", ") 
			+ "Серия: " + Серия + ", № " + Номер 
			+ ", Выдан: " + Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'") + " года, " 
			+ КемВыдан + "; № подр. " + НомерПодразделения;
			
		Иначе
			Возврат "Отсутствуют данные об удостоверении личности."
		КонецЕсли;
		
	КонецФункции // ПолучитьПаспортныеДанныеСтрокой()

	
//=================================================================================
// РАБОТА С ДИАЛОГАМИ
	
#Если Клиент Тогда
	
	// Функция спрашивает пользователя записать ли объект, или нет, если он новый
	//
	// Параметры
	//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
	//
	// Возвращаемое значение:
	//   Булево - Объект записан или нет
	//
	Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт
		
		Если ФормаОбъекта.ЭтоНовый() Тогда
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
				ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
			Иначе // Справочник
				ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
			КонецЕсли; 
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			Иначе
				Если НЕ ФормаОбъекта.ПроверитьЗаполнение() Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Попытка
					Возврат ФормаОбъекта.ЗаписатьВФорме();
				Исключение
					ТекстСообщения = ИнформацияОбОшибке().Описание;
					ТекПричина = ИнформацияОбОшибке().Причина;
					Сч = 1; МаксСч = 10;
					Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
						ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
						ТекПричина = ТекПричина.Причина;
						Сч = Сч + 1;
					КонецЦикла;
					
					Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли; 
		
	КонецФункции // ЗаписатьНовыйОбъектВФорме()
	
	// Проверяет модифицированность документа перед печатью, и если необходимо 
	// записывает его
	// 
	// Параметры
	//  Документ - (ДокументОбъект.*) - проверяемый документ
	//  Форма    - форма проверяемого документа
	//
	Функция ПроверитьМодифицированностьВФорме(Документ, Форма) Экспорт
		
		Результат = Ложь;
		
		Если Форма.Модифицированность Тогда
			
			Проведен = ?(Документ.Проведен, " и провести","");
			
			Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ Проведен +".
			|Записать" + Проведен + "?",
			РежимДиалогаВопрос.ОКОтмена, , 
			КодВозвратаДиалога.Отмена,
			"Документ изменен");
			
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				Попытка
					Форма.ЗаписатьВФорме(?(Документ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;
				КонецПопытки;
				
				Результат = Истина;
			КонецЕсли;
			
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПроверитьМодифицированность()
	

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОГОВОРАМИ КОНТРАГЕНТОВ ПРИ ОБЪЕДИНЕНИИ С ТЛЭ

// Процедура выполняет стандартные действия при начале выбора сделки в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  ДоговорКонтрагента - ссылка на справочник, определяет договор контрагента по сделке;
//  Сделка                - ссылка на документ, определяет собственно сделку;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  СтрокаТипаЗаказа      - строка, содержащая тип заказа (поставщику или покупателя).
//  СтруктураОтбора       - структура отбора, которая будет передана в открываемую форму выбора.
//
Процедура НачалоВыбораЗначенияСделки(ДокументОбъект, ФормаДокумента, ЭлементФормы, ДоговорКонтрагента, Сделка,
	                          СтандартнаяОбработка, Знач СтрокаТипаЗаказа = "",СтруктураОтбора = Неопределено) Экспорт

	ЭлементФормыКонтрагент = ФормаДокумента.ЭлементыФормы.Найти("Контрагент");
	// Тип выбираемого значения зависит от договора.
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбран договор контрагента!");
		Если  ЭлементФормыКонтрагент<>неопределено Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементФормыКонтрагент;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Тип выбираемого значения зависит от договора.
	Если ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!");
		Если  ЭлементФормыКонтрагент<>неопределено Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементФормыКонтрагент;
		КонецЕсли;
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	Если (СтрокаТипаЗаказа = "уатЗаказПеревозчику_уэ") или (СтрокаТипаЗаказа = "уатЗаказГрузоотправителя") Тогда

		ТипДокументаСделки = СтрокаТипаЗаказа;
		ТипДокументаСчет = ?(СтрокаТипаЗаказа = "уатЗаказПеревозчику_уэ","уатСчетНаОплатуПоставщика","уатСчетНаОплатуПокупателю");

		Если ДокументОбъект.Метаданные().Реквизиты.Найти("Сделка") = Неопределено Тогда
			ЕстьТипСчет = Истина;
		Иначе
			ЕстьТипСчет = ДокументОбъект.Метаданные().Реквизиты.Сделка.Тип.СодержитТип( Тип("ДокументСсылка."+ТипДокументаСчет));
		КонецЕсли;
		Если ЕстьТипСчет Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

				ТипДокументаСделки = ТипДокументаСчет;

			ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			      Или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

				ТипДокументаСделки = СтрокаТипаЗаказа;

			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(Сделка) ИЛИ ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
				Сделка = Документы[ТипДокументаСделки].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	Иначе // сделка может быть только заказом (поставщику или покупателя)
		Если ТипЗнч(Сделка) <> Тип("ДокументСсылка." + СтрокаТипаЗаказа) Тогда
			Сделка = Документы[СтрокаТипаЗаказа].ПустаяСсылка();
		КонецЕсли;

		ТипДокументаСделки = СтрокаТипаЗаказа;
	КонецЕсли; 

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,ЭлементФормы,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.уатДокументыПоДоговоруКонтрагента_уэ.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.уатДокументыПоДоговоруКонтрагента_уэ.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.уатДокументыПоДоговоруКонтрагента_уэ.Доступность = Ложь;
	
	// Отфильруем список документов.
	Если НЕ СтруктураОтбора = Неопределено Тогда
		Если ТипЗнч(СтруктураОтбора) = Тип("ТаблицаЗначений") Тогда
			Для Каждого ТекОтбор Из СтруктураОтбора Цикл
				ФормаВыбора.Отбор[ТекОтбор.Имя].ВидСравнения  = ТекОтбор.ВидСравнения;
				ФормаВыбора.Отбор[ТекОтбор.Имя].Значение      = ТекОтбор.Значение;
				ФормаВыбора.Отбор[ТекОтбор.Имя].Использование = Истина;
				Если ТекОтбор.НеИзменять Тогда
					ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ТекОтбор.Имя].Доступность = НЕ ТекОтбор.НеИзменять;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
					ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
				КонецЕсли;
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
				ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка) И Сделка.ДоговорКонтрагента = ДоговорКонтрагента Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = Сделка;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСделки()

#КонецЕсли