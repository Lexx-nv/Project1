//===============================================
Функция глПробегАТ_Через_OLE(ТС,пДт,пДт1,ГСМ=0)  Экспорт     
	    
	
	Если  СокрлП(ТС.идАТ) = "" Тогда Возврат 0; КонецесЛИ;
	
	Если (пДт = пДт1) Тогда Возврат 0; КонецЕСЛИ; 
	
	//Состояние(""+ТС+" : "+пДт+" - "+пДт1);
	
	идТС  = ТС.идАТ;    
	грпАТ = ТС.грпАТ;
	
	Попытка
		
		АГ = Новый ComObject("AutoGRAPH.AutoGRAPHAutomation");
		ddd=АГ.WaitForInitializing();      
		
		АГ.SetGroupIndexByFileName(грпАТ);   
		
		
		АГ.WaitForComputing(грпАТ,СокрлП(идТС),пДт,пДт1,"GSM",0); 
		
		Если АГ.TripsNum > 0 Тогда
			АГ.TripIndex = АГ.TripsNum; 
		КонецЕСЛИ;                    
		
		ГСМ=ОКР(АГ.TripMotor1Fuel,0,1); 
		
		Возврат ОКР(АГ.TripDistance/1000,0,1);
		
	Исключение
		//Сообщить(ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	
КонецФункции
//=================================================== 
Функция ПробегАвтотрекер(ТС,пДт,пДт1,ГСМ=0) 
	СтрокаСоединения = "Driver={SQL Server};Server=172.16.40.144; Database=AT_NUTT1;Uid=sa;Pwd=SQLgfhjkm;";    // не работает
идТС  = ТС.идАТ;  
	
	Если  СокрлП(идТС) = "" Тогда Возврат 0; КонецесЛИ;
	
	Если (пДт = пДт1) Тогда Возврат 0; КонецЕСЛИ; 
	
	ВрГринвич = 0;//6 * 3600;
	
     йДт1 = ФОРМАТ(пДт - ВрГринвич,"ДФ='yyyyMMdd ЧЧ:мм'");
     йДт2 = ФОРМАТ(пДт1- ВрГринвич,"ДФ='yyyyMMdd ЧЧ:мм'");
	
	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);

 		
	
	ТекстЗапроса = "	
	
//|	  USE AT_NUTT1
	| DECLARE @res decimal(8,3)
	| DECLARE @begin datetime
	| SET @begin = CAST('"+йДт1+"' as DateTime)
	| DECLARE @end datetime
	| SET @end = CAST('"+йДт2+"' as DateTime)
	| EXEC RNT_Probeg
	| 'dbo',
	| @begin,
	| @end,
	| "+идТС+",
	| @res OUTPUT 
	| ;
	|
	| SELECT @res Prb
	| 
	| ";
	
	
	
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	
	Пока Записи.State = 0 Цикл
		Записи = Записи.NextRecordset();
	КонецЦикла;
	
	итПрб=0;
	Пока Записи.EOF() = 0 Цикл 
		Если Записи.Fields("Prb").Value<>NULL THEN
			итПрб = итПРб + Записи.Fields("Prb").Value;
		ENDIF;
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	Соединение.Close(); 
	 //Сообщить( итПрб);
	Возврат ОКР(итПрб,0,1);
	
	
	
КонецФункции
//=================================================== 
Процедура АвтографСоздатьТаблицыКоординат(идТС,пДт,пДт1,Соединение)
	
	
	ВрГринвич = 6 * 3600;
	
	Дт1 = ФОРМАТ(пДт - ВрГринвич,"ДФ='yyyyMMdd ЧЧ:мм'");
	Дт2 = ФОРМАТ(пДт1- ВрГринвич,"ДФ='yyyyMMdd ЧЧ:мм'");
	
	
	ТекстЗапроса = "	
	|	
	|If OBJECT_ID('TempDB..#Tbl1') IS NOT NULL  Drop Table #Tbl1
	|If OBJECT_ID('TempDB..#Tbl2') IS NOT NULL  Drop Table #Tbl2
	|If OBJECT_ID('TempDB..#Tbl3') IS NOT NULL  Drop Table #Tbl3
	|
	|SELECT 
	|Latitude,
	|Longtitude,
	|DataDateTime
	|INTO #Tbl1
	|	FROM [AG_1s].[dbo].[Coordinate] 
	|	WHERE DeviceID = "+идТС+" 
	|	AND DataDateTime >= CAST('"+Дт1+"' as DateTime)
	|	AND DataDateTime <  CAST('"+Дт2+"' as DateTime)
	|   AND Latitude <> 0
	|   AND Longtitude <> 0
	|	ORDER BY DataDateTime
	|;	
	|
	|SELECT 
	|T1.Latitude Lat1,
	|T1.Longtitude Long1,
	|T2.Latitude Lat2,
	|T2.Longtitude Long2,
	|
	|T1.DataDateTime Dt1,
	|T2.DataDateTime Dt2
	| 
	|INTO #Tbl2
	|FROM #Tbl1 T1
	|INNER JOIN #Tbl1 T2 ON T2.DataDateTime = (SELECT TOP 1 MIN(T3.DataDateTime) FROM #Tbl1 T3 WHERE T3.DataDateTime > T1.DataDateTime)
	|
	|;
	|
	|SELECT
	|T1.lat1,
	|T1.Long1,
	|T1.Lat2,
	|T1.Long2,
	|T1.Dt1
	|
	|INTO #Tbl3
	|FROM #Tbl2 T1
	|INNER JOIN (SELECT DISTINCT Dt1, MAX(Dt2) Dt2 FROM #Tbl2 T2 GROUP BY Dt1) T3 ON T3.Dt1 = T1.Dt1 AND T3.DT2 = T1.Dt2
	|
	| ";
	
	
	Cmd = Новый ComObject("ADODB.Command");
	Cmd.ActiveConnection = Соединение;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.Execute();
	
	
КонецПроцедуры

//=================================================== 
Функция ПробегАвтограф(ТС,пДт,пДт1,ГСМ=0)  
	
	идТС  = ТС.идАТ;    
	
	Если  СокрлП(идТС) = "" Тогда Возврат 0; КонецесЛИ;
	
	Если (пДт = пДт1) Тогда Возврат 0; КонецЕСЛИ; 
	    
	
	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.Open("Driver={SQL Server};Server=172.16.40.142\SQLEXPRESS;Uid=1s;Pwd=SQLgfhjkm;Database=AG_1s;");
	
	АвтографСоздатьТаблицыКоординат(идТС,пДт,пДт1,Соединение);
	
	ТекстЗапроса = "
	|
	|SELECT 
	|SUM(
	|ATAN(
	|SQRT(POWER(COS(PI()*Lat2/180)*SIN(PI()*Long2/180-PI()*Long1/180),2)
	|    +POWER(COS(PI()*Lat1/180)*SIN(PI()*Lat2/180)-SIN(PI()*Lat1/180)*COS(PI()*Lat2/180)*COS(ABS(PI()*Long2/180-PI()*Long1/180)),2))/
	|(SIN(Pi()*Lat1/180)*SIN(PI()*Lat2/180)+COS(PI()*Lat1/180)*COS(PI()*Lat2/180)*COS(ABS(PI()*Long2/180-PI()*Long1/180)))
	|    )*6372795
	|    )/1000 as Prb
	|    
	| FROM #Tbl3 T
	|";	
	
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	
	итПрб=0;
	Пока Записи.EOF() = 0 Цикл 
		Если Записи.Fields("Prb").Value<>NULL THEN
			итПрб = итПРб + Записи.Fields("Prb").Value;
		ENDIF;
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	Соединение.Close(); 
	
	Возврат ОКР(итПрб,0,1);
	
КонецФункции


//===============================================
Функция глПробегАТ(ТС,пДт,пДт1,ГСМ=0) Экспорт
	//Если у ТС не привязана система мониторинга, то ничего не делаем
	Если  СокрлП(ТС.ИДвСистемеНавигации) = "" Тогда
		Возврат Неопределено;
	КонецесЛИ;
	
	Если ТС.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автотрекер ТОгда
		Возврат ПробегАвтотрекер(ТС,пДт,пДт1,ГСМ=0);
	ИначеЕсли ТС.ВидСистемыGPS = Перечисления.ВидСистемыGPS.АвтографОЛЕ ТОгда
		Стк = Новый Структура("Пробег,Бак1Нач,Бак1Кон,Бак1Зап,Бак1слив,Бак1ЗапКол,Бак1сливКол,Бак2Нач,Бак2Кон,Бак2Зап,Бак2слив,Бак2ЗапКол,Бак2сливКол,ЧасыРаб,ХХ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
        Стк.Пробег = глПробегАТ_Через_OLE(ТС,пДт,пДт1);
		Возврат  Стк;
	ИначеЕсли ТС.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автограф ТОгда
		идАгр = СокрлП(ТС.ИДвСистемеНавигации);
		Обр = ОБработки.Автограф.Создать();
		Рез = Обр.Алга("GetTripsTotal?schemaID=chat&IDs="+идАгр+"&SD="+Формат(пДт,"ДФ=yyyyMMdd-HHmm")+"&ED="+Формат(пДт1,"ДФ=yyyyMMdd-HHmm")+"&tripSplitterIndex=-1");
		Возврат Рез;
	ИНАчеЕсли ТС.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Виалон ТОгда
		Обр = ОБработки.Автограф.Создать();
		Рез = Обр.АлгаВиалон(ТС.ИДвСистемеНавигации,пДт,пДт1);
		Возврат Рез;
	КонецеСЛИ;
	//Если ТС.ВидСистемыGPS = Перечисления.ВидСистемыGPS.АвтографОЛЕ ТОгда
	//	Стк = Новый Структура("Пробег,Бак1Нач,Бак1Кон,Бак1Зап,Бак1слив,Бак1ЗапКол,Бак1сливКол,Бак2Нач,Бак2Кон,Бак2Зап,Бак2слив,Бак2ЗапКол,Бак2сливКол,ЧасыРаб,ХХ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	//    Стк.Пробег = глПробегАТ_Через_OLE(ТС,пДт,пДт1);
	//	Возврат  Стк;
	//ИНАче
	//	Если  СокрлП(ТС.ИДвСистемеНавигации) = "" Тогда Возврат Неопределено; КонецесЛИ;
	//	
	//	идАгр = СокрлП(ТС.ИДвСистемеНавигации);
	//	Обр = ОБработки.Автограф.Создать();
	//	Рез = Обр.Алга("GetTripsTotal?schemaID=chat&IDs="+идАгр+"&SD="+Формат(пДт,"ДФ=yyyyMMdd-HHmm")+"&ED="+Формат(пДт1,"ДФ=yyyyMMdd-HHmm")+"&tripSplitterIndex=-1");
	//	Возврат Рез;
	//КонецеСЛИ;
КонецФункции
//===============================================
Процедура ЗаписатьТаблицуТОчекНаСервер() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатПунктыНазначения.Ссылка,
	|	уатПунктыНазначения.Наименование,
	|	уатПунктыНазначения.Лат,
	|	уатПунктыНазначения.Лон,
	|	уатПунктыНазначения.Лат1,
	|	уатПунктыНазначения.Лон1
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Лат <> 0
	|	И уатПунктыНазначения.Лон <> 0
	|	И уатПунктыНазначения.Лат1 <> 0
	|	И уатПунктыНазначения.Лон1 <> 0";
	
	ТБл = Запрос.Выполнить().Выгрузить();			   
	
	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.Open("Driver={SQL Server};Server=172.16.40.142\SQLEXPRESS;Uid=1s;Pwd=SQLgfhjkm;Database=AG_1s;");
	Cmd = Новый ComObject("ADODB.Command");
	Cmd.ActiveConnection = Соединение;
	
	
	ТекстЗапроса = "If OBJECT_ID('AG_1s.._1c_Points') IS NOT NULL  Drop Table _1c_Points ";
	Cmd.CommandText = ТекстЗапроса;
	Cmd.Execute();
	
	ТекстЗапроса = "
	|CREATE TABLE _1c_Points (
	|  ID Char(36) NOT NULL,
	|  name Char(99) NOT NULL,
	|  Lat1 float NOT NULL,
	|  Long1 float NOT NULL,
	|  Lat2 float NOT NULL,
	|  Long2 float NOT NULL
	|) ";
	Cmd.CommandText = ТекстЗапроса;
	Cmd.Execute();
	
	
	ТекстЗапроса="";
	Для каждого Стр из Тбл Цикл
		ТекстЗапроса = ТекстЗапроса+"
		|INSERT INTO _1c_Points (id,name,Lat1,long1,lat2,long2) values('"+Стр.ССылка.УникальныйИдентификатор()+"','"+Стр.Наименование+"', "+ФОРМАТ(Стр.Лат,"ЧРД=.; ЧГ=0")+", "+ФОРМАТ(Стр.Лон,"ЧРД=.; ЧГ=0")+", "+ФОРМАТ(Стр.Лат1,"ЧРД=.; ЧГ=0")+", "+ФОРМАТ(Стр.Лон1,"ЧРД=.; ЧГ=0")+")
		| ";
	КонецЦикла;
	Cmd.CommandText = ТекстЗапроса;
	Cmd.Execute();
	
	Соединение.Close(); 
	
	
	//Сообщить("Таблица координат на серевере автограф записана");
	
КонецПроцедуры
//===============================================
Функция глПробегПоТочкам(ТС,пДт,пДт1) Экспорт
	
	идТС  = ТС.идАТ;    
	
	Если  СокрлП(идТС) = "" Тогда Возврат 0; КонецесЛИ;
	Если (пДт = пДт1) Тогда Возврат 0; КонецЕСЛИ; 
	
	
	Тбл = Новый ТаблицаЗначений;
	Тбл.Колонки.Добавить("Точка1");
	Тбл.Колонки.Добавить("Точка2");
	Тбл.Колонки.Добавить("Дт");
	
	
	
	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.Open("Driver={SQL Server};Server=172.16.40.142\SQLEXPRESS;Uid=1s;Pwd=SQLgfhjkm;Database=AG_1s;");
	
	АвтографСоздатьТаблицыКоординат(идТС,пДт,пДт1,Соединение);
	
	ТекстЗапроса = "
	|
	|SElect
	|T1.Dt1,
	|T1.lat1,
	|T1.Long1,
	|T1.Lat2,
	|T1.Long2,
	|
	|ISNULL(T2.ID,' ') Point1,
	|ISNULL(T3.ID,' ') Point2 
	|
	|FROM #Tbl3 T1
	|left outer join _1c_Points T2 ON T1.Lat1  <= T2.Lat1  and T1.Lat1  >= T2.Lat2
	|                        and T1.Long1 >= T2.Long1 and T1.Long1 <= T2.Long2
	|                        
	|left outer join _1c_Points T3 ON T1.Lat2  <= T3.Lat1  and T1.Lat2  >= T3.Lat2
	|                        and T1.Long2 >= T3.Long1 and T1.Long2 <= T3.Long2                        
	| 
	| where ISNULL(T2.ID,' ') <> ISNULL(T3.ID,' ')
	|      
	|order by Dt1
	|";	
	
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	
	ВрГринвич = 6 * 3600;

	
	Пока Записи.EOF() = 0 Цикл 
		Стр = Тбл.Добавить();
		Стр.Дт = Записи.Fields("Dt1").Value + ВрГринвич;
		
		Если СокрЛП(Записи.Fields("Point1").Value) <> "" Тогда
			ГУИД = Новый УникальныйИдентификатор(Записи.Fields("Point1").Value);
			Стр.Точка1 = Справочники.уатПунктыНазначения.ПолучитьСсылку(ГУИД);
		КонецЕсЛИ;
		Если СокрЛП(Записи.Fields("Point2").Value) <> "" Тогда
			ГУИД = Новый УникальныйИдентификатор(Записи.Fields("Point2").Value);
			Стр.Точка2 = Справочники.уатПунктыНазначения.ПолучитьСсылку(ГУИД);
		КонецЕсЛИ;
		
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	Соединение.Close(); 
	
	
	
	Возврат Тбл;
	
	
КонецФункции
//==============================================


//********* 28.09.2018 г . *********

#Область ВспомогательныеПроцедурыИФункцииДляРаботыСФорматомJSON
//********** Вспомогательные процедуры и функции для работы с форматом json **********

//Функция преобразует многострочный текст в структуру, которая будет отражать данные,переданные через формат JSON
//Параметры:
//ТекстJSON - многострочный текст
//текА - начальная строка текста - 1
//СтрЧислоСтрок - число строк в многострочном тексте
//ТипЗн - !!! непонятный параметр - он в дальнейшем все равно обнуляется
Функция ЦиклСтрок(ТекстJSON,текА,СтрЧислоСтрок,ТипЗн)
	
	//Если многострочный текст пустой - то возвращиемся сразу - нечего раскладывать!!!
	Если текА > СтрЧислоСтрок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЗн = "";
	
	//Получаем первую строку из многострочного текста и анализируем ее
	ппп =  ТекстJSON.ПолучитьСтроку(текА);
	
	Рез = ПрочитатьДанные(ппп,ТипЗн);
	
	Если ТипЗн = "Массив" Тогда
		Для ТекА = ТекА+1 по СтрЧислоСтрок Цикл
			п =  ЦиклСтрок(ТекстJSON,текА,СтрЧислоСтрок,ТипЗн);
			Если п = Неопределено Тогда
				Продолжить;
			КонецеСЛИ;
			Если п = "]" ТОгда
				ПРервать;
			КонецЕСЛИ;
			Рез.Добавить(п);
		КонецЦикла;
	ИНачеЕсли ТипЗн = "Структура" Тогда
		Пока текА <= СтрЧислоСтрок Цикл
			пКлюч = Неопределено;
			пЗн = Неопределено;
			Есть2тчк = Ложь;
			Пока пЗн = Неопределено и текА <= СтрЧислоСтрок Цикл
				ТекА = ТекА+1;
				п = ЦиклСтрок(ТекстJSON,текА,СтрЧислоСтрок,ТипЗн);
				Если п = "}" ТОгда
					ПРервать;
				КонецЕСЛИ;
				если п = Неопределено ТОгда
					Продолжить;
				КонецеслИ;
				Если п=":" Тогда 
					Есть2тчк = Истина;
					продолжить;
				КонецЕсли;
				Если Есть2тчк Тогда
					пЗн = п;
				ИНаче
					п = СтрЗаменить(п," ","_");
					пКлюч = СтрЗаменить(п,"-","_");
				КонецеслИ;
			КонецЦикла;
			
			Если п = "}" ТОгда
				ПРервать;
			КонецЕСЛИ;
			Если пКлюч = Неопределено ТОгда
				пКлюч = "Value";
			КонецесЛИ;
			Попытка
				Рез.вставить(пКлюч,пЗн);
			Исключение
				//Сообщить(""+ТекА+" "+пКлюч);
			КОнецПопытки;
		КонецЦикла;
	КонецЕСЛИ;
	Возврат Рез;
КонецФункции

Функция ПрочитатьДанные(п,ТипЗн)
	
	ТипЗн = "";
	
	Если п = "" ТОгда
		Рез =Неопределено;
	ИНАчеЕсли п = "[" Тогда
		Рез = Новый Массив;
		ТипЗн = "Массив";
	ИНАчеЕсли п = "{" Тогда
		Рез = Новый Структура;
		ТипЗн = "Структура";
	ИНАчеЕсли Лев(п,6) = "\/Date" Тогда//    \/Date(1500145140000+0500)\/
		пДт = Число(сред(п,8,10));	
		п = СтрЗаменить(п,"+",Символы.ПС);	
		пДатаНачала = 0;
		Если СтрЧислоСтрок(п)>1 Тогда
			пДТ1 = Число(Лев(СтрПолучитьСтроку(п,2),2));	
		КонецЕСЛИ;
		Рез = Дата(1970,1,1)+пДт + 3600*пДатаНачала;
	ИНАче
		Рез = п;
	КонецЕСлИ;
	
	Возврат Рез;
	
КонецФункции

Функция НайтиЗн(ТекстJSON,СтрПск,конСтр="}")
	
	Рез = 0;
	
	п = Найти(ТекстJSON,СтрПск);
	Если п<>0 ТОгда
		
		пСтр = Сред(ТекстJSON,п+СтрДЛина(СтрПск));
		п = Найти(пСтр,конСтр);
		Зн = Лев(пСтр,п-1);
		Зн = СтрЗаменить(Зн,"""","");
		
		Если Лев(Зн,2) = "PT" Тогда //PT12H48M30S 
			
			
			пСтр = СтрЗаменить(Сред(Зн,3),"H","H"+Символы.ПС);
			пСтр = СтрЗаменить(пСтр,"M","M"+Символы.ПС);
			
			зн=0;
			ДЛя а=1 по СтрЧислоСтрок(п) Цикл
				п = СтрПолучитьСтроку(пСтр,а);
				Если Прав(п,1) = "H" Тогда
					Зн = Зн + Число(СтрЗаменить(п,"H",""));
				КонецеСЛИ;
				Если Прав(п,1) = "M" Тогда
					Зн = Зн + Число(СтрЗаменить(п,"M","")/60);
				КонецеСЛИ;
				
			Конеццикла;
			
			
		КонецЕСЛИ;
		
		Попытка
			Рез = Число(Зн);
		Исключение
			Рез = Зн;
		КонецПопытки;	
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция ПреобразоватьвСистему(Число10,система) Экспорт
	Если система > 36 или система < 2 тогда
		//Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
КонецФункции

Функция URLEncode(стр) Экспорт	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		если ((Знак>="a")и(Знак<="z")) или
			 ((Знак>="A")и(Знак<="Z")) или
			 ((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Итог;
КонецФункции

//********** Вспомогательные процедуры и функции для работы с форматом json **********
#КонецОбласти

#Область РаботаСФорматомJSON
//********** Работа с форматом json **********

Функция ПрочитатьJSONШтатно(ТекстОтвета) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Отчет = ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть();			
	Возврат Отчет;
КонецФункции   

Функция ПрочитатьJSONНеШтатно(Знач ТекстJSON) Экспорт
	Результат = Новый Структура;
	
	//Подготовим текст
	//Т.е. разложим формат JSON в многострочный текст для удобства
    ТекстJSON = СтрЗаменить(ТекстJSON,"[",Символы.ПС+"["+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"],",Символы.ПС+"]"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"]",Символы.ПС+"]"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"{",Символы.ПС+"{"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"},",Символы.ПС+"}"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"}",Символы.ПС+"}"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,""",",""""+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,",""",Символы.ПС+"""");	
    ТекстJSON = СтрЗаменить(ТекстJSON,"""Key"":","");	
    ТекстJSON = СтрЗаменить(ТекстJSON,"""Value"":",":");	
    ТекстJSON = СтрЗаменить(ТекстJSON,":",Символы.ПС+":"+Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,"""","");	
    ТекстJSON = СтрЗаменить(ТекстJSON,Символы.ПС+Символы.ПС,Символы.ПС);	
    ТекстJSON = СтрЗаменить(ТекстJSON,Символы.ПС+Символы.ПС,Символы.ПС);	
	
	
	тхтДок = Новый ТекстовыйДокумент;
	тхтДОк.УстановитьТекст(СокрЛП(ТекстJSON));
	
	//А теперь преобразуем полученный текст в структуру данных
	Результат = ЦиклСтрок(тхтДОк,1,тхтДОк.КоличествоСтрок(),"");
	
	
//	Результат = ЦиклСтрок(СокрЛП(ТекстJSON),1,СтрЧислоСтрок(ТекстJSON),"");
	
		
	Возврат Результат;
КонецФункции   


Функция ФорматСтрокиJSON(Стр)
	
	п = СтрЗаменить(Стр,"""","\""");
	Возврат п;
	
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект) Экспорт
	СтрокаJSON = "{"+символы.ПС;
	
	Для каждого Элемент Из Объект Цикл
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + ФорматСтрокиJSON(Элемент.Значение) + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ","+Символы.ПС;
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 2) = ","+Символы.ПС Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-2);
	КонецЕсли;
	
	Возврат СтрокаJSON +Символы.ПС+ "}";
КонецФункции

Функция СформироватьСтрокуJSONИзМассива(Объект)
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + ФорматСтрокиJSON(Элемент) + """";
		ИначеЕсли ТипЗнч(Элемент) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
КонецФункции

Функция СформироватьСтрокуJSON(Объект) Экспорт
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	КонецЕсли;
	
	Возврат СтрокаJSON;
КонецФункции


//********** Работа с форматом json **********
#КонецОбласти

Функция КорректировкаЧасовогоПояса(ИсходнаяДата, ЧасовойПояс = 0)
	КоррДата = ИсходнаяДата - ЧасовойПояс * 60 * 60;
	Возврат КоррДата;
КонецФункции


//Преобразует время в количество часов
//Время может быть в следующих форматах:
//"0:13:47"
//"01:13:47"
//Вместо ":" может быть любой разделитель - это роли не играет
Функция ВремяВЧисло(ВремяТекстом)
	Если СокрЛП(Строка(ВремяТекстом)) <> "" Тогда
		Если СтрДлина(ВремяТекстом) = 7 Тогда
			Возврат Окр(Число(Сред(ВремяТекстом,1,1))+Число(Сред(ВремяТекстом,3,2))/60,2); ;
		ИначеЕсли СтрДлина(ВремяТекстом) = 8 Тогда
			Возврат Окр(Число(Сред(ВремяТекстом,1,2))+Число(Сред(ВремяТекстом,4,2))/60,2);
		КонецЕсли;	
	КонецЕсли;	
	Возврат 0;
КонецФункции

Функция ПолучитьДлительность(ЧислоСекунд)
    Если ТипЗнч(ЧислоСекунд) = Тип("Строка") Тогда 
        Если СтрДлина(ЧислоСекунд) = 8 Тогда 
            Дней    = 0;
            Часов    = Число(Лев(ЧислоСекунд, 2));
            Минут    = Число(Сред(ЧислоСекунд, 4, 2));
            Секунд    = Число(Прав(ЧислоСекунд, 2));
        Иначе
        КонецЕсли;
    ИначеЕсли ТипЗнч(ЧислоСекунд) = Тип("Число") Тогда 
        Дней    = Цел(ЧислоСекунд / (3600 * 24));
        Часов    = Цел ((ЧислоСекунд - (Дней * 3600 * 24)) / 3600);
        Минут    = Цел((ЧислоСекунд - (Дней * 3600 * 24) - (Часов * 3600)) / 60);
        Секунд    = ЧислоСекунд - (Дней * 3600 * 24) - (Часов * 3600) - (Минут * 60);
    КонецЕсли;
    Возврат Дата(1, 1, Дней + 1, Часов, Минут, Секунд);
КонецФункции

Функция ПолучитьИДДанные(СистемаМониторинга,ЗакрытьСессию = Ложь) Экспорт
	АдресСервера = СистемаМониторинга.АдресСервера;
	Логин = СистемаМониторинга.Логин;
	Пароль = СистемаМониторинга.Пароль;
	Если СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автограф ТОгда
		//Так было по старому
		//ИДДанные = ПолучитьТОКЕН(СистемаМониторинга);
		ИДДанные = глСистемыМониторингаСервер.АвтоГРАФ5_СозданиеТокена(АдресСервера,Логин,Пароль);
	ИНАчеЕсли СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Виалон ТОгда
		ИДДанные = ПолучитьИДДанныеВиалон(СистемаМониторинга);
		Если ЗакрытьСессию Тогда
			ВиалонЗакрытьСесию(СистемаМониторинга,ИДДанные);
		КонецЕсли;	
	ИНАчеЕсли СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автотрекер ТОгда
		ИДДанные = ПолучитьСхемыWS(СистемаМониторинга);
	Иначе
		Возврат Неопределено;
	КонецеСЛИ;
	
	Возврат ИДДанные;
	
КонецФункции	

Функция ПолучитьДанныеПоТС(ТС,Дт1,Дт2,ИДДанные=Неопределено,ЗакрытьСессию = Истина) Экспорт
	
	//Если у ТС не привязана система мониторинга, то ничего не делаем
	Если Не ЗначениеЗаполнено(ТС.СистемаМониторинга) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ДатаНачала = КорректировкаЧасовогоПояса(Дт1, ТС.СистемаМониторинга.СдвигЧасовогоПояса);
	ДатаОкончания = КорректировкаЧасовогоПояса(Дт2, ТС.СистемаМониторинга.СдвигЧасовогоПояса);
	
	Если ТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автограф ТОгда
		идТС = ТС.ИДвСистемеНавигации;
		Схема = ТС.СистемаМониторинга.Параметр1;
		ТекстЗапроса = "GetTripsTotal?schemaID=" + Схема + "&IDs=" + идТС + "&SD="+Формат(ДатаНачала,"ДФ=yyyyMMdd-HHmm")+"&ED="+Формат(ДатаОкончания,"ДФ=yyyyMMdd-HHmm")+"&tripSplitterIndex=-1";
		Рез = ЗапросВАвтограф(ТекстЗапроса,ТС.СистемаМониторинга,Ложь,ИДДанные);
		Возврат Рез;
	ИНАчеЕсли ТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Виалон ТОгда
		Рез = ЗапросВВиалон(ТС,ТС.СистемаМониторинга,ДатаНачала,ДатаОкончания,ИДДанные,ЗакрытьСессию);
		Возврат Рез;
	ИНАчеЕсли ТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автотрекер ТОгда
		Рез = ЗапросВАвтограф_WS(ТС,ДатаНачала,ДатаОкончания,ИДДанные);
		Возврат Рез;
	КонецеСЛИ;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровРаботыТС()
	Стк = Новый Структура("Пробег,Бак1Нач,Бак1Кон,Бак1Зап,Бак1слив,Бак1ЗапКол,Бак1сливКол,Бак2Нач,Бак2Кон,Бак2Зап,Бак2слив,Бак2сливКол,Бак2ЗапКол,ЧасыРаб,ЧасыРабВО,ЧасыРабВОКол,ХХ,РасходПоДУТ");
	Стк.Пробег = 0;
	Стк.Бак1Нач = 0;
	Стк.Бак1Кон = 0;
	Стк.Бак1Зап = 0;
	Стк.Бак1слив = 0;
	Стк.Бак1ЗапКол = 0;
	Стк.Бак1сливКол = 0;
	Стк.Бак2Нач = 0;
	Стк.Бак2Кон = 0;
	Стк.Бак2Зап = 0;
	Стк.Бак2слив = 0;
	Стк.Бак2сливКол = 0;
	Стк.Бак2ЗапКол = 0;
	Стк.ЧасыРаб = "";
	Стк.ЧасыРабВО = "";
	Стк.ЧасыРабВОКол = 0;
	Стк.ХХ = "";
	Стк.РасходПоДУТ = 0;
	Возврат Стк;
КонецФункции	

Функция ВремяВКоличество(ВремяТекст) Экспорт
	п = СокрЛП(ВремяТекст);
	п = СтрЗаменить(п,":",Символы.ПС);
	Часы = СокрлП(СтрПолучитьСтроку(п,1));
	Мин = СокрлП(СтрПолучитьСтроку(п,2));
	Кол = Число(Часы) + Окр(Число(Мин)/60,2);
	Возврат Кол;
КонецФункции

Функция ПреобразоватьВЧисло(Парам = "")
	Парам = СтрЗаменить(Парам," lt","");
	Парам = СтрЗаменить(Парам," km","");
	Парам = СтрЗаменить(Парам,".",",");
	Попытка
		Парам = Число(Парам);
	Исключение
		Возврат Парам;
	КонецПопытки;	
	Возврат Парам;
КонецФункции	

//Возвращает параметры прокси-сервера. Необходимо для доступа в интернет независимо от настроек браузера
Функция СформироватьДанныеПроксиСервера() Экспорт
	АдресПрокси = СокрЛП(Константы.АдресПрокси.Получить());
	ПортПрокси = СокрЛП(Константы.ПортПрокси.Получить());
	ПроксиСервер = Новый ИнтернетПрокси;
	Если Не АдресПрокси = "" И Не ПортПрокси = "" Тогда
		ПроксиСервер.Установить("http", АдресПрокси, Число(ПортПрокси));
	КонецЕсли;	
	Возврат ПроксиСервер;
КонецФункции	

#Область РаботаСВиалоном

//Получаем идентификационные данные для подключения к веб-серверу Виалон:
//Возвращает структуру из двух параметров: СИД и ИДПользователя
Функция ПолучитьИДДанныеВиалон(СистемаМониторинга) Экспорт
	
	ИДДанные = Новый Структура();
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	
	АдресСервера = СокрЛП(СистемаМониторинга.АдресСервера);
	
	ТокенВиалон = СокрЛП(СистемаМониторинга.ТокенАвторизации);
	
	
	URL = "/wialon/ajax.html?svc=token/login&params={""token"":"""+ТокенВиалон+"""}";
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("GET " + URL + " HTTP/1.1");
	Заголовки.Вставить("Host", АдресСервера);
	
	ПроксиСервер = СформироватьДанныеПроксиСервера();
	
	HTTPСоединение = Новый HTTPСоединение(
										АдресСервера, // сервер (хост)
										80, // порт, по умолчанию для http используется 80, для https 443
										, // пользователь для доступа к серверу (если он есть)
										, // пароль для доступа к серверу (если он есть)
										ПроксиСервер, // здесь указывается прокси, если он есть
										, // таймаут в секундах, 0 или пусто - не устанавливать
										// защищенное соединение, если используется https
										);
	
	HTTPЗапрос = Новый HTTPЗапрос(URL,Заголовки);
	
	//Отправляет данные на указанный адрес для обработки при помощи HTTP-запроса POST
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос,имяВыходногоФайла);
	
	//Получает данные с HTTP-сервера, используя GET-запрос - тоже рабочий вариант - возвращает тот же самый текст - проверено 17.09.2018
	//Результат = HTTPСоединение.Получить(HTTPЗапрос, имяВыходногоФайла);	
	
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
	
	Если Найти(ТекстОтвета,"INVALID_AUTH_TOKEN") > 0 Тогда
		Возврат "ОшибкаТокена";
	КонецЕсли;	
	
	
	Если Результат.КодСостояния = 200 Тогда
		//Рез - это структура, одним из свойств которой является "eid" - это и есть СИД текущей сессии
		Рез = ПрочитатьJSONНеШтатно(ТекстОтвета);
		ИДДанные.Вставить("СИД",Рез.eid);
		ИДДанные.Вставить("ИДПользователя",Рез.user.bact);
		Возврат ИДДанные;
	ИНаче
		//Сообщить(ТекстОтвета);
		Возврат Неопределено;
	КонецеСЛИ;	
КонецФункции   

//ЕСли ТС = Неопределено, значит возвращается весь перечень ТС из системы мониторинга
//В противном случае возвращаются парпаметры работы по конкретной машинке
Функция ЗапросВВиалон(ТС = Неопределено,СистемаМониторинга = Неопределено,Дт1=Неопределено,Дт2=Неопределено,ИДДанные=Неопределено ,ЗакрытьСессию=Истина) Экспорт
	
	Если СистемаМониторинга = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ФаилЗапросаJSON = ПолучитьимяВременногоФайла("json");
	имяВыходногоФайла = ПолучитьимяВременногоФайла();

	// 1. Получим ИД данные сессии
	Если ИДДанные = Неопределено Тогда
		ИДДанные = ПолучитьИДДанныеВиалон(СистемаМониторинга);
	КонецЕсли;	
	Если ИДДанные = "ОшибкаТокена" Тогда
		ТекстПредупреждения = "Внимание! Ошибка токена. Обратитесь к провайдеру Wialon!
		|Невозможно получить идентификационные данные для подключения - СИД и ИД пользователя!!!";
		//Предупреждение(ТекстПредупреждения);
		Возврат Неопределено;
	ИначеЕсли ИДДанные = Неопределено Тогда
		//Предупреждение("Невозможно получить идентификационные данные для подключения - СИД и ИД пользователя!!!");
		Возврат Неопределено;
	КонецЕсли;	
	СИД = ИДДанные.СИД;
	ИДПользователя = ИДДанные.ИДПользователя;
	
	// 2. Создаем новое SSL соединение
	СерверАГ = СистемаМониторинга.АдресСервера;
	ИДОтчета = СистемаМониторинга.Параметр2;
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ПроксиСервер = СформироватьДанныеПроксиСервера();
	
	HTTPСоединение = Новый HTTPСоединение(
										СерверАГ, // сервер (хост)
										80, // порт, по умолчанию для http используется 80, для https 443
										, // пользователь для доступа к серверу (если он есть)
										, // пароль для доступа к серверу (если он есть)
										ПроксиСервер, // здесь указывается прокси, если он есть
										, // таймаут в секундах, 0 или пусто - не устанавливать
										// защищенное соединение, если используется https
										);
	
	// 3. Формируем текст запроса
	Если ТС = Неопределено ТОгда
		//Если в качестве параметра ТС не передано - 
		//это значит мы делаем общий запрос по всем ТС для определения ИД для тех ТС, который занесены в Виалон
		стрЗапрос = "?svc=core/search_items&params={""spec"":{
															|""itemsType"":""avl_unit"",
															|""propName"":""sys_name"",
															|""propValueMask"":""*"",
															|""sortType"":""sys_name""
															|},
														|""force"":1,
														|""flags"":""0x00000001"",
														|""from"":0,
														|""to"":0
														|}
														|&sid=" + СИД;
	ИНаче   
		//Если же ТС передано, то формируем запрос по конкретной машинке для получения отчета по пробегу и др. параметрам
		//В строке запроса указываем ИД машинки в системе Виалон (берется из карточки ТС), дату начала и дату окончания запроса и СИД текущей сессии.
		идТС = ТС.ИДвСистемеНавигации;
		пДТ1 = Формат(Дт1 - Дата(1970,1,1,1,0,0) - 3600*4, "ЧГ=0"); //tzOffset не отрабатывает, будем сами учитывать
		пДТ2 = Формат(Дт2 - Дата(1970,1,1,1,0,0) - 3600*4, "ЧГ=0");
		стрЗапрос = "?svc=report/exec_report&params=
					|{
					|""reportResourceId"":" + ИДПользователя + ",
					|""reportTemplateId"":" + ИДОтчета + ",
					|""reportObjectId"":"+идТС + ",
					|""reportObjectSecId"":0,
					|""interval"":
					|{""from"":"+пДТ1 + ",
					|""to"":"+пДТ2 + ",
					|""flags"":0
					|},
					|""tzOffset"":14400
					|}
					|&sid=" + СИД;
	КонецЕСЛИ;
	
	// 4. Выполняем запрос
	Результат = HTTPСоединение.Получить("wialon/ajax.html"+стрЗапрос+"", имяВыходногоФайла);
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
	
	
	// 5. Обрабатываем результат
	Если Результат.КодСостояния = 200 Тогда //Результат получен без ошибок
		Если ТС <> Неопределено Тогда
			//Стк - структура, в которой содержатся данные о пробеге и др. параметрах по конкретному ТС
			Стк = ПрочитатьJSONШтатно(ТекстОтвета);
			Если Не Стк = Неопределено Тогда
				Рез = РазложитьОтчетИзВиалон(Стк,ИДОтчета);
			КонецЕсли;	
		ИНАче // просто получим перечень всех машинок из "Виалон"
			//Стк - структура, в которой содержатся данные о всех ТС, которые заведены в системе Виалон
			Стк = ПрочитатьJSONШтатно(ТекстОтвета);
			//Стк.items - items - это массив, каждый элемент которого  - это структура:
					//nm - наименование тс. Например "1033 Камаз А200РТ89"
					//clc - не знаю, что за реквизит
					//id - ИД в системе Виалон
					//mu - не знаю, что за реквизит
					//uacl - не знаю, что за реквизит
			Рез = Стк.items;
		КонецЕСЛИ;
	Иначе
		//Сообщить("Произошла ошибка");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"{""detail"":""",Символы.ПС);	
		ТекстОтвета = СтрЗаменить(ТекстОтвета,""",""title"":""Invalid Attribute""}","");
		//Сообщить(ТекстОтвета);
		Рез = Неопределено;
	КонецЕсли;
	
	Если ЗакрытьСессию Тогда
		ВиалонЗакрытьСесию(СистемаМониторинга,ИДДанные);
	КонецЕсли;	
	УдалитьФайлы(имяВыходногоФайла);
	
	Возврат Рез;
	
КонецФункции	

Функция РазложитьОтчетИзВиалон(Отчет,ИДОтчетаВВиалон);
	
	Стр = глСистемыМониторингаСервер.ПолучитьСтруктуруПараметровРаботыТС();

	Если Отчет.reportResult.tables.Количество() > 0  Тогда
		Для а = 0 По Отчет.reportResult.tables.Количество()-1 Цикл
			Тбл = Отчет.reportResult.tables[а];
			ТблИмя = Отчет.reportResult.tables[а].label;
			
			Если ТблИмя = "Сводка" Тогда
				Для х=0 По Тбл.columns - 1 Цикл
					Показатель = Тбл.header[х];
					ЗначениеПоказателя = ПреобразоватьВЧисло(Тбл.total[х]);
					Если Показатель = "Пробег в поездках" Тогда
						Стр.Пробег = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Моточасы" Тогда
						Стр.ЧасыРаб = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Нач. уровень" Тогда
						Стр.Бак1Нач = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Кон. уровень" Тогда
						Стр.Бак1Кон = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Заправлено" Тогда
						Стр.Бак1Зап = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Слито" Тогда
						Стр.Бак1слив = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Потрачено по ДУТ" Тогда
						Стр.РасходПоДУТ = ЗначениеПоказателя;
					КонецЕсли;	
				КонецЦикла;	
			ИначеЕсли ТблИмя = "Поездки" Тогда
				Для х=0 По Тбл.columns - 1 Цикл
					Показатель = Тбл.header[х];
					ЗначениеПоказателя = ПреобразоватьВЧисло(Тбл.total[х]);
					Если Показатель = "Пробег" Тогда
						Стр.Пробег = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Потрачено по ДУТ" Тогда
						Стр.РасходПоДУТ = ЗначениеПоказателя;
					КонецЕсли;	
				КонецЦикла;	
			ИначеЕсли ТблИмя = "Моточасы" Тогда
				Для х=0 По Тбл.columns - 1 Цикл
					Показатель = Тбл.header[х];
					ЗначениеПоказателя = ПреобразоватьВЧисло(Тбл.total[х]);
					Если Показатель = "Холостой ход" Тогда
						Стр.ХХ = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Пробег" Тогда
						Стр.Пробег = ЗначениеПоказателя;
					ИначеЕсли Показатель = "Моточасы" Или Показатель = "Длительность" Тогда
						Стр.ЧасыРаб = ЗначениеПоказателя;
					КонецЕсли;	
				КонецЦикла;	
			ИначеЕсли ТблИмя = "РВО" Тогда
				Для х=0 По Тбл.columns - 1 Цикл
					Показатель = Тбл.header[х];
					ЗначениеПоказателя = ПреобразоватьВЧисло(Тбл.total[х]);
					Если Показатель = "Длительность" Тогда
						//"0:13:47" - так приходит из Виалона
						Стр.ЧасыРабВО = ВремяВЧисло(ЗначениеПоказателя);
						Стр.ЧасыРабВОКол = ВремяВЧисло(ЗначениеПоказателя);
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла	
	КонецЕсли;	
	
	Возврат Стр;
КонецФункции   

Процедура ВиалонЗакрытьСесию(СистемаМониторинга,ИДДанные) Экспорт
	
	Если ЗначениеЗаполнено(ИДДанные.СИД) = Ложь Тогда Возврат; КонецеСЛИ;
	
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	АдресСервера = СистемаМониторинга.АдресСервера;
	СИД = ИДДанные.СИД;
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ПроксиСервер = СформироватьДанныеПроксиСервера();
	
	HTTPСоединение = Новый HTTPСоединение(
										АдресСервера, // сервер (хост)
										80, // порт, по умолчанию для http используется 80, для https 443
										, // пользователь для доступа к серверу (если он есть)
										, // пароль для доступа к серверу (если он есть)
										ПроксиСервер, // здесь указывается прокси, если он есть
										, // таймаут в секундах, 0 или пусто - не устанавливать
										// защищенное соединение, если используется https
										);
	
	
	стрЗапрос = "?svc=core/logout&params={}&sid=" + СИД;
	Результат = HTTPСоединение.Получить("wialon/ajax.html"+стрЗапрос+"",имяВыходногоФайла);
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСАвтографом

Функция МасСтр(Мас)
	Стр = "";
	Для а = 0 по Мас.Количество()-3 Цикл
		Стр = Стр+Мас[а]+"/";
	КонецЦикла;
	Возврат Стр;
КонецФункции

Функция ТекЗн(Джс)
	
	Если ДЖс.ТипТекущегоЗначения = ТипЗначенияJSON.Число ТОгда
		Возврат ОКР(Джс.ТекущееЗначение,1);
	ИНАчеЕсли ДЖс.ТипТекущегоЗначения=ТипЗначенияJSON.Строка ТОгда
		Зн = Джс.ТекущееЗначение;
		Если Найти(Зн,":")<>0 Тогда
			пСтр = СтрЗаменить(Зн,":",Символы.ПС);
			Возврат Число(СтрПолучитьСтроку(пСтр,1))+ОКР(Число(СтрПолучитьСтроку(пСтр,2))/60,2,1);
		КонецеСЛИ;
	КонецеСЛИ;
	
	Возврат 0;
	
КонецФункции

Функция JSONвСтк(Джс,Стк) Экспорт
	
	ПОка ДЖс.Прочитать() Цикл
		Если Джс.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			пИмя = Джс.ТекущееЗначение;
			Джс.Прочитать();
			Если      пИмя = "TotalDistance" 		Тогда Стк.Пробег 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelLevel First" Тогда Стк.Бак1Нач 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelLevel Last" 	Тогда Стк.Бак1Кон 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelUpVol Diff" 	Тогда Стк.Бак1Зап 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelDnVol Diff" 	Тогда Стк.Бак1слив	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelUpCount" 	Тогда Стк.Бак1ЗапКол  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank1FuelDnCount" 	Тогда Стк.Бак1сливКол = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelLevel First" Тогда Стк.Бак2Нач 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelLevel Last" 	Тогда Стк.Бак2Кон 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelUpVol Diff" 	Тогда Стк.Бак2Зап 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelDnVol Diff" 	Тогда Стк.Бак2слив	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelUpCount" 	Тогда Стк.Бак2ЗапКол  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Tank2FuelDnCount" 	Тогда Стк.Бак2сливКол = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Engine1Motohours" 	Тогда Стк.ЧасыРаб 	  = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Engine2MHOnParks" 	Тогда Стк.ЧасыРабВО   = ТекЗн(Джс);  Стк.ЧасыРабВОКол   = ТекЗн(Джс); 
			ИНАчеЕсли пИмя = "Engine1MHOnParks" 	Тогда Стк.ХХ 		  = ТекЗн(Джс); 
			КонецеСЛИ;
		ИНАчеЕсли Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта или Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			прервать;
		КонецЕСЛИ;
	КонецЦикла;
	
	Возврат Стк;
	
КонецФункции

Функция РазложитьОтчетИзАвтограф(Знач ТекстJSON)
	
	//TotalDistance,Engine1Motohours,Engine2Motohours,Engine1MHOnParks


	Стк = ПолучитьСтруктуруПараметровРаботыТС();
	
	
	Мас = Новый Массив;
	СткДжс = Неопределено;
	
	Джс = Новый ЧтениеJSON;
	Джс.УстановитьСтроку(ТекстJSON);
	ПОка ДЖс.Прочитать() Цикл
		Если Джс.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
			пИмя=Джс.ТекущееЗначение;
		ИНАчеЕсли Джс.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта или Джс.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива Тогда
			Если пИмя = "Total" Тогда
				СткДжс = JSONвСтк(Джс,Стк);
				прервать;
			ИНачеЕсли МасСтр(Мас) = "/Trips/"	Тогда
				Джс.Пропустить();
				Если  Джс.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства Тогда
					пИмя=Джс.ТекущееЗначение;
				КонецЕсли;
				Продолжить;
			КонецЕСЛИ;
			Мас.Вставить(0,пИмя);
			пИмя = "";
		ИНАчеЕсли Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта или Джс.ТипТекущегоЗначения=ТипЗначенияJSON.КонецМассива Тогда
			Мас.Удалить(0);
			пИмя = "";
		КонецеСЛИ;
	КонецЦикла;
	Возврат Стк;
КонецФункции	

Функция ПолучитьТОКЕН(СистемаМониторинга) Экспорт
	
	
	//Авторизация
	ФаилJSONАвторизация = ПолучитьимяВременногоФайла("json");	
	СткJSON = Новый Структура;
	СткJSON.Вставить("UserName",СистемаМониторинга.Логин);
	СткJSON.Вставить("Password",СистемаМониторинга.Пароль);
	
	Тхт = Новый ЗаписьТекста(ФаилJSONАвторизация,,, Истина, Символы.ПС);
	Тхт.Записать(СформироватьСтрокуJSONИзСтруктуры(СткJSON));
	Тхт = Неопределено;
	
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/json");
	HTTPСоединение = Новый HTTPСоединение(СистемаМониторинга.АдресСервера,,,,,, );
	HTTPЗапрос = Новый HTTPЗапрос("/Login", Заголовки);
	HTTPЗапрос.УстановитьИмяФайлаТела(ФаилJSONАвторизация);
	
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, имяВыходногоФайла, Заголовки);
	
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		//Сообщить("Ошибка запроса авторизации");
	КонецЕсли;
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		//Сообщить("Ошибка сервера");
	КонецЕсли;
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		//Сообщить("Ошибка перенаправления сервера: " + Результат.КодСостояния );
	КонецЕсли;
	Если Результат.КодСостояния = 200 Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(имяВыходногоФайла, "UTF-8");
		Строка = Текст.ПолучитьСтроку(1);
		Токен = Строка;
		УдалитьФайлы(имяВыходногоФайла);
	Иначе
		Токен = Неопределено;
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

Функция ЗапросВАвтограф(ТекстЗапроса, СистемаМониторинга,ВсеТС = Ложь, Токен = Неопределено) Экспорт
	
	//1. Получаем токен - идентификатор подключения к системе "Автограф"
	Если Токен = Неопределено Или Токен = "" Тогда
		Токен = СистемаМониторинга.ТокенАвторизации;
		Если Токен = Неопределено Или Токен = "" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	ФаилЗапросаJSON = ПолучитьимяВременногоФайла("json");
	
	// 2. Создаем новое SSL соединение
	имяВыходногоФайла = ПолучитьимяВременногоФайла();
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("AG-TOKEN", Токен);
	Заголовки.Вставить("Content-Type", "text/json");
	HTTPСоединение = Новый HTTPСоединение(СистемаМониторинга.АдресСервера,,,,,, );
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	
	// 3. Выполняем запрос
	Результат = HTTPСоединение.Получить(HTTPЗапрос, имяВыходногоФайла);
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(имяВыходногоФайла, "UTF-8");
	ТекстОтвета = Ответ.ПолучитьТекст();
	
	
	// 4. Обрабатываем результат
	Если Результат.КодСостояния = 200 Тогда
		Если ВсеТС Тогда
			Стк = ПрочитатьJSONШтатно(ТекстОтвета);
			Рез = Стк.items;
		Иначе
			Рез = РазложитьОтчетИзАвтограф(ТекстОтвета);
		КонецЕсли;	
	Иначе
		//Сообщить("Произошла ошибка");
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"\/",Символы.ПС);
		ТекстОтвета = СтрЗаменить(ТекстОтвета,"{""detail"":""",Символы.ПС);	
		ТекстОтвета = СтрЗаменить(ТекстОтвета,""",""title"":""Invalid Attribute""}","");
		//Сообщить(ТекстОтвета);
		Рез = Неопределено;
	КонецЕсли;
	
	
	УдалитьФайлы(имяВыходногоФайла);
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти


#Область РаботаСАвтографом_WS

Функция СоздатьWSПрокси(СистемаМониторинга)
	Попытка
		//Доступ к Web сервису через WS ссылку, созданную в конфигурации
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
		
		// Создать WS-прокси на основании WS-определения
		ПроксиСервер = СформироватьДанныеПроксиСервера();
		Определение = Новый WSОпределения(СистемаМониторинга.АдресСервера + "?WSDL", СистемаМониторинга.Логин, СистемаМониторинга.Пароль,ПроксиСервер,, ssl);
		WSПрокси = Новый WSПрокси(Определение, "http://tempuri.org/", "AutoGRAPHSvc1C", "AutoGRAPHSvc1CSoap",,,,СистемаМониторинга.АдресСервера);		
		
		Если ТипЗнч(WSПрокси) = Тип("WSПрокси") Тогда 
			Если НЕ ПустаяСтрока(СистемаМониторинга.Логин) Тогда 
				WSПрокси.Пользователь	= СистемаМониторинга.Логин;
			КонецЕсли;
			Если НЕ ПустаяСтрока(СистемаМониторинга.Пароль) Тогда 
				WSПрокси.Пароль			= СистемаМониторинга.Пароль;
			КонецЕсли;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось создать WSПрокси";
			//Сообщение.Сообщить();
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		//Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат WSПрокси;
КонецФункции

//Убирает пробелы их гаражного номера для более точного поика
Функция ПолучитьНомер(ГосНомер) Экспорт
	
	п = Сокрлп(ГосНомер);
	
	
	п=СтрЗаменить(нрег(п)," ","");
	Если Найти(",186,189,138,",","+Прав(п,3)+",")<>0 Тогда
		п=Лев(п,СтрДлина(п)-3);
	ИНачеЕсли Найти(",86,89,38,",","+Прав(п,2)+",")<>0 Тогда
		п=Лев(п,СтрДлина(п)-2);
	КонецесЛИ;  
	
	ё=Найти(п,"(");
	Если ё>0 Тогда
		п=Лев(п,ё-1);
	КонецесЛИ;
	
	ё=Найти(п,"/");
	Если ё>0 Тогда
		п=Лев(п,ё-1);
	КонецесЛИ;
	
	Возврат п;
	
КонецФункции

//Возвращает СХЕМУ ИД и WSСсылка по логину и паролю
Функция ПолучитьСхемыWS(СистемаМониторинга) Экспорт
	
	ИДДанные = Новый Структура();
	WSСсылка = СоздатьWSПрокси(СистемаМониторинга);
	Если WSСсылка = Неопределено Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось создать WS Прокси";
		//Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	ТипПараметра = WSСсылка.ФабрикаXDTO.Тип("http://tempuri.org/", "EnumSchemas");
	ПСхемы = WSСсылка.ФабрикаXDTO.Создать(ТипПараметра);
	МассивСхем = WSСсылка.EnumSchemas(ПСхемы);
	Если МассивСхем.EnumSchemasResult.RSchema.Количество() > 0 тогда
		ИДДанные.Вставить("ИДСхемы",МассивСхем.EnumSchemasResult.RSchema[0].ID);
		ИДДанные.Вставить("ИмяСхемы",МассивСхем.EnumSchemasResult.RSchema[0].Name);
		ИДДанные.Вставить("WSСсылка",WSСсылка);
	КонецЕсли;
	
	Возврат ИДДанные;
	
КонецФункции

Функция СоздатьТЗТС_WS()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("СхемаNet",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ParentID",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Name",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ID",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("НомерТС",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Serial",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Делитель",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("НомерТСБезПробелов",Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("уатТС",Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	Возврат ТЗ;
КонецФункции	

Функция ЗапросВАвтографВсеТС_WS(СистемаМониторинга) Экспорт
	
	ИДДанные = ПолучитьСхемыWS(СистемаМониторинга);
	Если ИДДанные = Неопределено Тогда
		//Сообщить("Невозможно получить идентификационные данные из системы мониторинга!!!");
		Возврат Неопределено;
	КонецЕсли;	
	
	WSСсылка = ИДДанные.WSСсылка;
	ИДСхемы = ИДДанные.ИДСхемы;
	ИмяСхемы = ИДДанные.ИмяСхемы;
	
	Сериализатор = Новый СериализаторXDTO(WSСсылка.ФабрикаXDTO);
	ТипСпGuid	= WSСсылка.ФабрикаXDTO.Тип("http://tempuri.org/", "ArrayOfGuid");
	СписокGuid	= WSСсылка.ФабрикаXDTO.Создать(ТипСпGuid);
	ТипGuid		= WSСсылка.ФабрикаXDTO.Тип("http://microsoft.com/wsdl/types/", "guid");
	
	ТЗТС = СоздатьТЗТС_WS();
	
	Приборы = WSСсылка.EnumDevices(ИДСхемы);
	
	Мас = Приборы.Items.RDeviceItem;
	
	Для каждого Сп Из Приборы.Items.RDeviceItem Цикл			
		ДелительР = "";
		Если Сп.TripSplitters.RTripSplitter.Количество() > 1 Тогда 
			Для каждого СДелит Из Сп.TripSplitters.RTripSplitter Цикл
				ДелительР = ДелительР + СДелит.Name + " - " + СДелит.ID + ",";
			КонецЦикла; 
		КонецЕсли;
		НСтр = ТЗТС.Добавить();
		ЗаполнитьЗначенияСвойств(НСтр, сп);
		НСтр.СхемаNet = ИмяСхемы;
		НСтр.Делитель = ДелительР;
		Guid	= Сериализатор.ЗаписатьXDTO(Сп.ID);
		Сериализатор.Фабрика.Привести(ТипGuid, Guid);
		СписокGuid.guid.Добавить(Guid);
	КонецЦикла;
	
	// Получим гос. номера ТС
	НомераТС = WSСсылка.GetProperty(ИДСхемы, СписокGuid, "VehicleRegNumber");
	Для каждого Стр Из НомераТС.RPropertyItem1C Цикл
		НС = ТзТС.Найти(Стр.ID, "ID");
		Если НС <> Неопределено Тогда 
			НС.НомерТС = Стр.Value;
			НС.НомерТСБезПробелов =  ПолучитьНомер(Стр.Value);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗТС;
	
КонецФункции

Функция РазложитьОтчетИзАвтограф_WS(ТзРейсов)
	Стк = ПолучитьСтруктуруПараметровРаботыТС();
	Стк.Вставить("Пробег",Окр(ТзРейсов.Итог("Пробег"),2));
	Стк.Вставить("Бак1Нач",ТзРейсов.Итог("БакНач"));
	Стк.Вставить("Бак1Кон",ТзРейсов.Итог("БакКон"));
	 //VVK - не понял в чем различие этих колонок
	Стк.Вставить("ЧасыРабВОКол",Окр(ТзРейсов.Итог("МЧ1")/60/60,2));
	Стк.Вставить("ЧасыРабВО",Окр(ТзРейсов.Итог("МЧ1")/60/60,2));
	
	Возврат Стк

КонецФункции	

//Основноая функция
//Выбирает данные по переданному ID транспортного средства  в возвращает таблицу с пробегами....
Функция ПолучитьСписокРейсовТСWS(WSСсылка,СхемаID,ID, НачПериода,КонПериода) //ИДСхемы, ИДТС
	
	ДелительРейсов = "";
	//VVK 19/11/2018  Делитель рейсов стал обязательным полем
	ДелительРейсов = -1;    //-1 не разбивать по рейсам, по умолчанию 0
	//VVK 19/11/2018
	Сериализатор = Новый СериализаторXDTO(WSСсылка.ФабрикаXDTO);
	ТипСпGuid	= WSСсылка.ФабрикаXDTO.Тип("http://tempuri.org/", "ArrayOfGuid");
	СписокGuid	= WSСсылка.ФабрикаXDTO.Создать(ТипСпGuid);
	ТипGuid		= WSСсылка.ФабрикаXDTO.Тип("http://microsoft.com/wsdl/types/", "guid");
	Guid		= Сериализатор.ЗаписатьXDTO(ID);
	Сериализатор.Фабрика.Привести(ТипGuid, Guid);
	СписокGuid.guid.Добавить(Guid);
	
	РейсыТС = WSСсылка.GetTrips(СхемаID, СписокGuid, НачПериода, КонПериода, ДелительРейсов, Неопределено, Неопределено);
	тзРейсы = Новый ТаблицаЗначений;
	тзРейсы.Колонки.Добавить("Рейс",Новый ОписаниеТипов("Строка"));
	тзРейсы.Колонки.Добавить("ID",Новый ОписаниеТипов("Строка"));
	тзРейсы.Колонки.Добавить("ВремяДвижения",Новый ОписаниеТипов("Дата"));
	тзРейсы.Колонки.Добавить("ВремяРейса",Новый ОписаниеТипов("Дата"));
	тзРейсы.Колонки.Добавить("Пробег",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("СкорМакс",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("Скорость",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("БакНач",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("БакКон",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("Бак1",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("Бак2",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("НачРейса",Новый ОписаниеТипов("Дата"));
	тзРейсы.Колонки.Добавить("КонРейса",Новый ОписаниеТипов("Дата"));
	тзРейсы.Колонки.Добавить("МЧ1",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("МЧ2",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("Расход1",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("РасходКМ1",Новый ОписаниеТипов("Число"));
	тзРейсы.Колонки.Добавить("Водитель",Новый ОписаниеТипов("Строка"));
	тзРейсы.Колонки.Добавить("НачКТ",Новый ОписаниеТипов("Строка"));
	тзРейсы.Колонки.Добавить("КонКТ",Новый ОписаниеТипов("Строка"));
	
	Сообщение = Новый СообщениеПользователю;	
	
	СчРейсов = 1;
	Для каждого Стр Из РейсыТС.RTrips1C Цикл
		Для каждого СтрР Из Стр.Trips.RTrip1C Цикл
			НС = тзРейсы.Добавить(); 
			НС.Рейс			= СчРейсов;
			НС.ID			= ID;
			СчРейсов		= СчРейсов + 1;
			Для каждого Ср Из СтрР.Total.RObjectValue1C	Цикл 
				Если ТипЗнч(Ср.Value) = Тип("ОбъектXDTO") Тогда 
					Сообщение.Текст = "Не определен тип ОбъектXDTO " + Ср.Name;
					//Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;
				Если Ср.Name = "MoveDuration" Тогда 
					НС.ВремяДвижения = ПолучитьДлительность(Ср.Value);
				ИначеЕсли Ср.Name = "TotalDuration" Тогда 
					НС.ВремяРейса	= ПолучитьДлительность(Ср.Value);
				ИначеЕсли Ср.Name = "TotalDistance" Тогда 
					НС.Пробег		= Ср.Value;
				ИначеЕсли Ср.Name = "MaxSpeed" Тогда 
					НС.СкорМакс		= Ср.Value;
				ИначеЕсли Ср.Name = "MeanSpeed" Тогда 
					НС.Скорость		= Ср.Value;
				ИначеЕсли (Ср.Name = "Tank1FuelLevel First") ИЛИ (Ср.Name = "TankFuelLevel First") Тогда 
					НС.БакНач		= НС.БакНач + Ср.Value;
				ИначеЕсли (Ср.Name = "TankFuelLevel Last") ИЛИ (Ср.Name = "Tank1FuelLevel Last") Тогда 
					НС.БакКон		= НС.БакКон + Ср.Value;
				ИначеЕсли (Ср.Name = "TankFuelUpDnVol") ИЛИ (Ср.Name = "Tank1FuelUpDnVol") Тогда 
					НС.Бак1	= НС.Бак1 + Ср.Value;
				ИначеЕсли Ср.Name = "Tank2FuelUpDnVol" Тогда 
					НС.Бак2	= Ср.Value;
				ИначеЕсли Ср.Name = "DateTime First" Тогда 
					НС.НачРейса	= Ср.Value;
				ИначеЕсли Ср.Name = "DateTime Last" Тогда 
					НС.КонРейса	= Ср.Value;
				//ИначеЕсли (Ср.Name = "EngineMotohours") ИЛИ (Ср.Name = "Engine1Motohours")  ИЛИ (Ср.Name = "Engine2Motohours") Тогда 
				//	НС.МЧ1	= НС.МЧ1 + Ср.Value;
				//ИначеЕсли (Ср.Name = "EngineMHOnParks") ИЛИ (Ср.Name = "Engine1MHOnParks") ИЛИ (Ср.Name = "Engine2MHOnParks") Тогда 
				//	НС.МЧ2	= НС.МЧ2 + Ср.Value;
				//ИначеЕсли (Ср.Name = "EngineFuelConsum") ИЛИ (Ср.Name = "Engine1FuelConsum") Тогда 
				//	НС.Расход1		= НС.Расход1 + Ср.Value;
				//ИначеЕсли (Ср.Name = "EngineFuelConsumPer100km") ИЛИ (Ср.Name = "Engine1FuelConsumPer100km") Тогда 
				//	НС.РасходКМ1	= НС.РасходКМ1 + Ср.Value;
				
				
				//VVK
				ИначеЕсли Найти(Ср.Name,"Motohours") > 0 Тогда 
					НС.МЧ1	= НС.МЧ1 + ВремяВЧисло(Ср.Value);
				ИначеЕсли Найти(Ср.Name,"MHOnParks") > 0 Тогда 
					НС.МЧ2	= НС.МЧ2 + ВремяВЧисло(Ср.Value);
				ИначеЕсли Найти(Ср.Name,  "FuelConsum") > 0 Тогда 
					НС.Расход1		= НС.Расход1 + ВремяВЧисло(Ср.Value);
				ИначеЕсли Найти(Ср.Name, "FuelConsumPer100km") > 0 Тогда 
					НС.РасходКМ1	= НС.РасходКМ1 + ВремяВЧисло(Ср.Value);
				//VVK
				
				ИначеЕсли Ср.Name = "Tank4FlowmeterCard Last" Тогда			// Параметр водителя
					НС.Водитель	= Ср.Value;
				ИначеЕсли Ср.Name = "FirstLocation" Тогда 
					НС.НачКТ	= Ср.Value;
				ИначеЕсли Ср.Name = "LastLocation" Тогда 
					НС.КонКТ	= Ср.Value;
				Иначе
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла; 
	Возврат тзРейсы;
КонецФункции

Функция ЗапросВАвтограф_WS(ТС,Дт1,Дт2,ИДДанные=Неопределено) Экспорт
	
	Если ИДДанные = Неопределено Тогда
		ИДДанные = ПолучитьСхемыWS(ТС.СистемаМониторинга);
	КонецЕсли;	
	Если ИДДанные = Неопределено Тогда
		//Сообщить("Невозможно получить идентификационные данные из системы мониторинга!!!");
		Возврат Неопределено;
	КонецЕсли;	
	
	WSСсылка = ИДДанные.WSСсылка;
	ИДСхемы = ИДДанные.ИДСхемы;
	ИмяСхемы = ИДДанные.ИмяСхемы;
	
	ТзРейсов = ПолучитьСписокРейсовТСWS(WSСсылка,ИДСхемы,ТС.ИДвСистемеНавигации, Дт1,Дт2);
	
	Рез = РазложитьОтчетИзАвтограф_WS(ТзРейсов);
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти


//********* 28.09.2018 г . *********
