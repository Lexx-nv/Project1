#Если Клиент Тогда
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОЖИДАНИЯ

// Процедура выполняет отключение пользователей от информационной 
// базы в случае, если был запущен сеанс с параметром "ЗавершитьРаботуПользователей"
//
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт

	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ВремяОкончанияБлокировки = ТекущийРежим.Конец;
	
	ИнтервалПредупреждения    = 5 * 60;
	ИнтервалЗакрытьСЗапросом  = 0;
	ИнтервалЗакрытьБезЗапроса = - 1 * 60;
	ИнтервалПрекратить        = - 2 * 60;
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена Тогда
		
		Если ВремяОкончанияБлокировки <> '00010101' И ТекущийМомент > ВремяОкончанияБлокировки Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПрекратить Тогда
			
			ПрекратитьРаботуСистемы(Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьБезЗапроса Тогда
			Предупреждение("Работа системы завершается." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение), 30);
			
			ЗавершитьРаботуСистемы(Ложь, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьСЗапросом Тогда
			
			Предупреждение("Работа системы завершается." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение), 30);
			
			ЗавершитьРаботуСистемы(Истина, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПредупреждения Тогда
			
			Предупреждение("Работа системы будет завершена в " + ВремяНачалаБлокировки + "." + ?(ПустаяСтрока(ТекущийРежим.Сообщение), "", Символы.ПС + ТекущийРежим.Сообщение), 30);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрольРежимаЗавершенияРаботыПользователей

// Завершение работы только при условии удачной установки монопольного режима работы
// Вызывается, только при запуске системы от имени администратора с параметром запуска "ЗавершитьРаботуПользователей"
//
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		// Отключены все пользователи, кроме текущего сеанса
		// В последнюю очередь завершается сеанс, запущенный с параметром "ЗавершитьРаботуПользователей".
		// Такой порядок отключений необходим для обновления конфигурации с помощью пакетного файла
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;
	КонецЕсли; 
	
	// Получим текущее значение параметров блокировки
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
		
	ИнтервалОтключения    = - 5 * 60;
	
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена и
		(НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалОтключения) Тогда
			
		// через 5 минут после начала блокировки сеансы всех пользователей должны быть отключены	
		// если этого не произошло пробуем принудительно прервать соединение в клиент-серверном режиме работы.
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		ПодстрокиСтрокиСоединения  = уатОбщегоНазначенияТиповые.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(),";");
		
		Если ПодстрокиСтрокиСоединения.Количество()> 1 и Лев(ПодстрокиСтрокиСоединения[0], 5) = "Srvr=" и Лев(ПодстрокиСтрокиСоединения[1], 4) = "Ref=" Тогда
			
			ИмяСервера = Сред(ПодстрокиСтрокиСоединения[0],7, СтрДлина(ПодстрокиСтрокиСоединения[0]) - 7);
			ИмяИБ      = Сред(ПодстрокиСтрокиСоединения[1],6, СтрДлина(ПодстрокиСтрокиСоединения[1]) - 6);
			
			Попытка
				connector = Новый COMОбъект(уатОбщегоНазначения.уатИмяCOMСоединителя());
				server = connector.ConnectServer(ИмяСервера);
				
				ПодстрокиПараметровЗапуска = уатОбщегоНазначенияТиповые.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
				Если ПодстрокиПараметровЗапуска.Количество() > 2 и Врег(ПодстрокиПараметровЗапуска[0]) = Врег("ЗавершитьРаботуПользователей") Тогда
					server.AddAuthentication(ПодстрокиПараметровЗапуска[1], ПодстрокиПараметровЗапуска[2]);
				КонецЕсли;
				
				ibDesc = server.CreateInfoBaseInfo();
				ibDesc.Name = ИмяИБ;
				connections = server.GetIBConnections(ibDesc);
				
				Для каждого connection Из connections Цикл
					
					Если Не ИмяПользователя() = connection.userName Тогда
						server.Disconnect(connection);
					КонецЕсли; 
					
				КонецЦикла;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки; 
			
		КонецЕсли;
		
		Соединения = ПолучитьСоединенияИнформационнойБазы();
		Если Соединения.Количество() > 1 Тогда
			
			Сообщение = "Не удалось завершить работу пользователей:";
			
			Для каждого Соединение Из Соединения Цикл
				Если Не Соединение.НомерСоединения = НомерСоединенияИнформационнойБазы() Тогда
					Сообщение = Сообщение + Символы.ПС + " - " + Соединение;
				КонецЕсли;
			КонецЦикла; 
			
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		Иначе
			Сообщить("Завершение работы пользователей выполнено успешно.", СтатусСообщения.Информация);
		КонецЕсли;
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;		
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьРаботуПользователей

// Процедура перезапуска сеанса работы с программой
Процедура ПерезапуститьСеансРаботыСПрограммой() Экспорт
	глЗапрашиватьПодтверждениеПриЗакрытии = Ложь;
	
	ЗавершитьРаботуСистемы(Истина, Истина);
КонецПроцедуры
	
// Проверяет в конфигурации ИБ наличие изменений появившихся после старта сеанса
//
Процедура ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ() Экспорт

	// Если в конфигурации после старта текущего сеанса что-то изменилось
	Если КонфигурацияБазыДанныхИзмененаДинамически() Тогда


		// Завершим проверку обновления
		ЗавершитьПроверкуДинамическогоОбновленияИБ();

		// Спросим пользователя о его желании перезапустить сеанс
		ТекстВопроса = "В конфигурацию ИБ внесены изменения." + Символы.ПС +
						"Для работы с ними рекомендуется перезапустить программу." + Символы.ПС +
						"Перезапустить?";
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		// Если пользователь не хочет перезапускать сеанс
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			// Запустим проверку обновления опять
			НачатьПроверкуДинамическогоОбновленияИБ();
			Возврат;
		КонецЕсли;

	
		// Попробуем перезапустить
		ПерезапуститьСеансРаботыСПрограммой();

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ДИНАМИЧЕСКОГО ОБНОВЛЕНИЯ
//

// Начинает проверку динамического обновления конфигурации ИБ
//
Процедура НачатьПроверкуДинамическогоОбновленияИБ()Экспорт
	
	// проверка дин. обновления конфигурации каждые 20 мин.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ", 20 * 60);

КонецПроцедуры

// Завершает проверку динамического обновления конфигурации ИБ
//
Процедура ЗавершитьПроверкуДинамическогоОбновленияИБ()Экспорт

	// Отключим соответствующий обработчик ожидания
	ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ");

КонецПроцедуры

#КонецЕсли

// проверка того что БД "файловая"
//
// Параметры:
//  СтрокаСоединенияСБД - строка адреса расположения БД
//
// Возвращаемое значение:
//  Булево - признак файловой БД
Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции


#Если НЕ ВнешнееСоединение Тогда
	
// возвращает значение глобальной переменной по имени
 //
 // Параметры:
 //  Имя         - имя глобальной переменной
 //
 // Возвращаемое значение:
//  Значение переменной
Функция глЗначениеПеременной(ИмяПеременной) Экспорт
	
	Возврат РаботаСОбщимиПеременными.ПолучитьЗначениеПеременной(ИмяПеременной);
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры:
//  Имя          - строка, содержит имя переменной целиком
// Значение      - значение переменной
//  ОбновлятьВоВсехКэшах - обновлять кэши
//
Процедура глЗначениеПеременнойУстановить(ИмяПеременной, ЗначениеПеременной, ОбновитьКэшНаСервере = Ложь) Экспорт
	
	РаботаСОбщимиПеременными.УстановитьЗначениеПеременной(ИмяПеременной, ЗначениеПеременной, ОбновитьКэшНаСервере);
	
КонецПроцедуры

Функция СокрЛПСКД(Строка) Экспорт
    Возврат СокрЛП(Строка);
КонецФункции

#КонецЕсли
