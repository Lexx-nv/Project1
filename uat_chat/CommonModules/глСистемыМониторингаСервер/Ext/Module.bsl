//Возвращает параметры прокси-сервера. Необходимо для доступа в интернет независимо от настроек браузера
Функция СформироватьДанныеПроксиСервера() Экспорт
	АдресПрокси = СокрЛП(Константы.АдресПрокси.Получить());
	ПортПрокси = СокрЛП(Константы.ПортПрокси.Получить());
	ПроксиСервер = Новый ИнтернетПрокси;
	Если Не АдресПрокси = "" И Не ПортПрокси = "" Тогда
		ПроксиСервер.Установить("http", АдресПрокси, Число(ПортПрокси));
		ПроксиСервер.Установить("https", АдресПрокси, Число(ПортПрокси));
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	Возврат ПроксиСервер;
КонецФункции	

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

//Преобразует время в количество часов
//Время может быть в следующих форматах:
//"9:13:47"
//"11:13:47"
//Вместо ":" может быть любой разделитель - это роли не играет
Функция ВремяВЧисло(ВремяТекстом) Экспорт
	Час_ = 0;
	Минута_ = 0;
	Секунда_ = 0;
	Попытка
		Час_ = Число(Лев(ВремяТекстом, 2));
		Минута_ = Число(Сред(ВремяТекстом, 4, 2));
		Секунда_ = Число(Прав(ВремяТекстом, 2));
	Исключение
		Попытка
			Час_ = Число(Лев(ВремяТекстом, 1));
			ВремяТекстом = "0" + ВремяТекстом;
			Минута_ = Число(Сред(ВремяТекстом, 4, 2));
			Секунда_ = Число(Прав(ВремяТекстом, 2));
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецПопытки;
	Час_ = Час_ + (Минута_ / 60) + (Секунда_ / (60 * 60));
	
	Возврат (Окр(Час_, 3));
КонецФункции	

Функция ВыполнитьHTTPЗапрос(ПолныйАдресРесурса, Система, ТекстОшибки, стрЗапрос = Неопределено, ТелоPOST = "", Заголовки = Неопределено, HTTPМетод = "") Экспорт
	Попытка
		Если НРег(Лев(ПолныйАдресРесурса, 8)) = НРег("https://") Тогда
			ИспользоватьЗащищенноеСоединение = Истина;
		Иначе
			ИспользоватьЗащищенноеСоединение = Ложь;
		КонецЕсли;

		Если ИспользоватьЗащищенноеСоединение Тогда
			ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL;
		Иначе
			ЗащищенноеСоединениеOpenSSL = Неопределено;
		КонецЕсли;

		СтруктураURI = глСистемыМониторингаСервер.СтруктураURI(ПолныйАдресРесурса);
		ПроксиСервер = СформироватьДанныеПроксиСервера();
		HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост,				// сервер (хост)
												СтруктураURI.Порт,				// порт, по умолчанию для http используется 80, для https 443
												Неопределено,					// пользователь для доступа к серверу (если он есть)
												Неопределено,					// пароль для доступа к серверу (если он есть)
												ПроксиСервер, 					// здесь указывается прокси, если он есть
												Неопределено,					// таймаут в секундах, 0 или пусто - не устанавливать
												ЗащищенноеСоединениеOpenSSL);	// защищенное соединение, если используется https

		Если стрЗапрос <> Неопределено Тогда
			HTTPЗапрос = Новый HTTPЗапрос(стрЗапрос);
		Иначе
			Если Заголовки <> Неопределено Тогда
				HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
			Иначе
				HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
			КонецЕсли;
		КонецЕсли;

		Если HTTPМетод = "DELETE" Тогда
			HTTPОтвет = HTTPСоединение.Удалить(HTTPЗапрос);
		ИначеЕсли HTTPМетод = "PATCH" Тогда
			Если ЗначениеЗаполнено(ТелоPOST) Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоPOST, , ИспользованиеByteOrderMark.НеИспользовать);
			КонецЕсли;
			HTTPОтвет = HTTPСоединение.Изменить(HTTPЗапрос);
		ИначеЕсли HTTPМетод = "POST" Тогда
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ТелоPOST = "" И Не (HTTPМетод = "GET") Тогда
			Сообщить("Начало запроса - " + Строка(ТекущаяДата()));
			тДата = ТекущаяДата();
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			Сообщить("Время выполнения запроса - " + Строка(ТекущаяДата() - тДата));
			Сообщить("Окончание запроса - " + Строка(ТекущаяДата()));
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоPOST, , ИспользованиеByteOrderMark.НеИспользовать);//ИспользованиеByteOrderMark.НеИспользовать

			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("en='Error when connecting to the server. (For details, see event log)';ru='Ошибка при установке соединения с сервером. (Подробности см. в журнале регистрации)'");
		ЗаписьЖурналаРегистрации(Система, УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.глСистемыМониторингаСервер, , НСтр("en='Error when connecting to the server. Error description: ';ru='Ошибка при установке соединения с сервером.. Описание ошибки: '") + Символы.ПС + ОписаниеОшибки());
		Возврат 1;
	КонецПопытки;

	Возврат HTTPОтвет;

КонецФункции

//Функция возвращает фиксированную структуру - преречень используемых нами параметров работы транспортного соредства
Функция ПолучитьСтруктуруПараметровРаботыТС() Экспорт
	Стк = Новый Структура("ТС,
							|Пробег,
							|Бак1Нач,
							|Бак1Кон,
							|Бак1Зап,
							|Бак1слив,
							|Бак1ЗапКол,
							|Бак1сливКол,
							|Бак2Нач,
							|Бак2Кон,
							|Бак2Зап,
							|Бак2слив,
							|Бак2сливКол,
							|Бак2ЗапКол,
							|ЧасыРаб,
							|ЧасыРабВО,
							|ЧасыРабВОКол,
							|Отопитель,
							|ОтопительСухой,
							|ОтопительЖидкостной,
							|ХХ,
							|РасходПоДУТ,
							|РасходНа100км,
							|ПараметрыБСМТС");
	Стк.Пробег = 0;
	Стк.Бак1Нач = 0;
	Стк.Бак1Кон = 0;
	Стк.Бак1Зап = 0;
	Стк.Бак1слив = 0;
	Стк.Бак1ЗапКол = 0;
	Стк.Бак1сливКол = 0;
	Стк.Бак2Нач = 0;
	Стк.Бак2Кон = 0;
	Стк.Бак2Зап = 0;
	Стк.Бак2слив = 0;
	Стк.Бак2сливКол = 0;
	Стк.Бак2ЗапКол = 0;
	//Стк.ЧасыРаб = "";
	//Стк.ЧасыРабВО = "";
	Стк.ЧасыРабВОКол = 0;
	//Стк.ХХ = "";
	//Стк.Отопитель = 0;
	//Стк.Отопитель1 = 0;
	//Стк.Отопитель2 = 0;
	Стк.РасходПоДУТ = 0;
	Стк.РасходНа100км = 0;
	Возврат Стк;
КонецФункции	


#Область РаботаСАвтоГРАФ5

Функция АвтоГРАФ5_СозданиеТокена(Адрес, Логин, Пароль, ТекстОшибки = "") Экспорт
	Token = "";

	Если Прав(Адрес, 1) = "/" Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
	КонецЕсли;


	Если Не (НРег(Лев(Адрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(Адрес, 8)) = "https://") Тогда
			Адрес = "http://" + Адрес;
		КонецЕсли;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	//1. Вариант запроса POST - рабочий - логин и пароль это тело запроса
	//ТелоPOST = "{""UserName"": """ + Логин + """, ""Password"": """ + Пароль + """}";
	//HTTPОтвет = ВыполнитьHTTPЗапрос(Адрес + "/Login", "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , ТелоPOST, Заголовки);

	//2. Вариант запроса GET - рабочий - логин и пароль - это параметры запроса
	ТелоPOST = "";
	HTTPОтвет = ВыполнитьHTTPЗапрос(Адрес + "/Login?" + "UserName=" + Логин + "&Password=" + Пароль, "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , ТелоPOST, Заголовки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Token;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		Token = ResponseText;

		Возврат Token;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат Token;
	КонецЕсли;

КонецФункции

Функция АвтоГРАФ5_СписокСхем(Знач УчетнаяЗапись, ТекстОшибки = "", Ресурсы = Неопределено) Экспорт
	Ресурсы = Новый Массив;

	Token = УчетнаяЗапись.ТокенАвторизации;
	Адрес = УчетнаяЗапись.АдресСервера;


	Если Прав(Адрес, 1) = "/" Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
	КонецЕсли;


	Если Не (НРег(Лев(Адрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(Адрес, 8)) = "https://") Тогда
			Адрес = "http://" + Адрес;
		КонецЕсли;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);


	HTTPОтвет = ВыполнитьHTTPЗапрос(Адрес + "/EnumSchemas", "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);


	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		Response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Ресурсы = Response;

		Возврат 0;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции

Функция АвтоГРАФ5_СписокТС(МассивТС = Неопределено, Знач УчетнаяЗапись, ТекстОшибки = "") Экспорт
	
	МассивТС = Новый Массив;

	Token = УчетнаяЗапись.ТокенАвторизации;
	Адрес = УчетнаяЗапись.АдресСервера;
	chemaID = УчетнаяЗапись.Ресурс;

	Если Прав(Адрес, 1) = "/" Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(Адрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(Адрес, 8)) = "https://") Тогда
			Адрес = "http://" + Адрес;
		КонецЕсли;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);

	HTTPОтвет = ВыполнитьHTTPЗапрос(Адрес + "/EnumDevices?schemaID=" + chemaID, "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		Response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Items = Response.Получить("Items");
		Если ТипЗнч(Items) = Тип("Массив") Тогда
			МассивТС = Items;
		Иначе
			МассивТС = Неопределено;
			ТекстОшибки = НСтр("ru='Нет данных для заполнения'");
			Возврат 1;
		КонецЕсли;

		Возврат 0;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции

//ДанныеИзJSON - если "Истина", то функция возвратит текст в формате JSON, который прилетел ответом по запросу
//ВторойID - данные необходимо получить по второму ID (реквизит "ИДвСистемеНавигации1") у ТС.
Функция АвтоГРАФ5_ПолучитьДанныеДляПЛПоТС(ДатаС, ДатаПо, ТекТС, ТекстОшибки, УчетнаяЗаписьСистемыМониторинга = Неопределено, ДанныеИзJSON = Ложь, ResponseText = "",ВторойID = Ложь) Экспорт
	
	// 1. Теперь формируем пеечень ID, по которым будем делать запрос в систему Автограф. "ТекТС" - это может быть ТС (элемент справочника "уатТС"), либо строка - ИД через запятую.
	Если ТипЗнч(ТекТС) = Тип("Строка") И СокрЛП(ТекТС) <> "" Тогда
		МассивID = ТекТС;
	ИначеЕсли ТипЗнч(ТекТС) = Тип("СправочникСсылка.уатТС") Тогда
		ID1 = СтрЗаменить(ТекТС.ИДвСистемеНавигации, " ", ""); 
		Если ПустаяСтрока(ID1) Тогда
			ТекстОшибки = "Невозможно осуществить запрос. Не указан ИД для системы мониторинга у ТС с г/н " +  ТекТС.ГаражныйНомер;
			Возврат 1;
		КонецЕсли;
		Если Не (ТекТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автограф) Тогда
			ТекстОшибки = НСтр("en='Cannot execute request. Vehicle monitoring system';ru='Невозможно осуществить запрос. Система мониторинга  для ТС'") + " <" + ТекТС + "> " + НСтр("en='does not match AutoGRAPH system.';ru='не соответствует системе АвтоГРАФ.'");
			Возврат 1;
		КонецЕсли;
		МассивID = ID1;
		ID2 = СтрЗаменить(ТекТС.ИДвСистемеНавигации1, " ", "");
		Если Не ПустаяСтрока(ID2) Тогда
			МассивID = МассивID + "," + ID2;
			СписокТС = Истина;
		ИначеЕсли ВторойID Тогда
			ТекстОшибки = "Невозможно осуществить запрос. Не указан второй ИД для системы мониторинга у ТС с г/н " +  ТекТС.ГаражныйНомер;
			Возврат 1;
		КонецЕсли;	
			
	КонецЕсли;	

	// 2. Определяем необходимые параметры для запроса
	Token = УчетнаяЗаписьСистемыМониторинга.ТокенАвторизации;
	мАдрес = УчетнаяЗаписьСистемыМониторинга.АдресСервера;
	chemaID = УчетнаяЗаписьСистемыМониторинга.Ресурс;
	ЧасовойПояс = УчетнаяЗаписьСистемыМониторинга.СдвигЧасовогоПояса;
	мДатаС = глСистемыМониторингаСервер.АвтоГРАФ5_ПолучитьДатуСервера(ДатаС, ЧасовойПояс);
	мДатаПо = глСистемыМониторингаСервер.АвтоГРАФ5_ПолучитьДатуСервера(ДатаПо, ЧасовойПояс);


	Если Прав(мАдрес, 1) = "/" Тогда
		мАдрес = Лев(мАдрес, СтрДлина(мАдрес) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(мАдрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(мАдрес, 8)) = "https://") Тогда
			мАдрес = "http://" + мАдрес;
		КонецЕсли;
	КонецЕсли;

	// 3. Формируем запрос
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);
	Адрес = мАдрес + "/GetTripsTotal?schemaID=" + chemaID + "&IDs=" + МассивID + "&SD=" + мДатаС + "&ED=" + мДатаПо + "&tripSplitterIndex=-1";
	
	HTTPОтвет = глСистемыМониторингаСервер.ВыполнитьHTTPЗапрос(Адрес, "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);

    // 4. проверяем на наличие ошибок выполнение запроса
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	// 5. Если нет ошибок начинаем обрабатывать полученные данные - далее РезультатЗапроса
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		Response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		//Если СписокТС Тогда
		//	Возврат Response;
		//КонецЕсли;	

		//Response - это соответствие, ключ - это ID, значение - соответствие (инфа по запросу)
		//Если у ТС привязка по одному ID - то Response состоит из одного элемента, если привязка по двум ID, то из двух элементов
		//ДанныеТС - получаем из Response данные по ID
		Если ВторойID Тогда
			ДанныеТС = Response.Получить(ID2);
		Иначе
			ДанныеТС = Response.Получить(ID1);
		КонецЕсли;	
		
		Если ТипЗнч(ДанныеТС) <> Тип("Соответствие") Тогда
			ТекстОшибки = НСтр("en='Data is empty';ru='Система Автограф предоставила пустые основные данные по ТС за указанный период!!!'");
			Возврат 1;
		КонецЕсли;	
		
		//Trips - "поездки" это должен быть массив данных из блока ДанныеТС
		Trips = ДанныеТС.Получить("Trips");
		
		Если ТипЗнч(Trips) = Тип("Массив") И Trips.Количество() = 1 Тогда
			Trip = Trips[0];
			Total = Trip.Получить("Total");
			Если ТипЗнч(Total) = Тип("Соответствие") Тогда
				СтруктураПараметровРаботыТС = глСистемыМониторингаСервер.АвтоГРАФ5_ПолучитьСтруктуруПараметровРаботыТС(ТекТС,Total);
				Если ДанныеИзJSON = Истина Тогда
					Возврат Total;
				Иначе
					Возврат СтруктураПараметровРаботыТС;
				КонецЕсли;	
			КонецЕсли;
		Иначе	// Автограф возвратил пустые данные, так иногда бывает - "Trips" и "Total" пустые
			ТекстОшибки = НСтр("en='Data is empty';ru='Система Автограф не предоставила данные по ТС за указанный период!!!'") + КодСостояния;
			Возврат 1;
		КонецЕсли;

	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции

//Функция преобразует дату обыкновенного вида в дату необходимую для запроса в систему Автограф
Функция АвтоГРАФ5_ПолучитьДатуСервера(мДата, ЧасовойПоясКлиента) Экспорт
	Timestamp = мДата - Дата('19700101000000');
	Timestamp = Timestamp - ЧасовойПоясКлиента * 3600;

	Timestamp = Дата('19700101000000') + Timestamp;

	Возврат Формат(Timestamp, "ДФ=yyyyMMdd-HHmm");
КонецФункции

Функция АвтоГРАФ5_ПолучитьДатуКлиента(мДата, ЧасовойПоясКлиента) Экспорт
	Timestamp = мДата - Дата('19700101000000');
	Timestamp = Timestamp + ЧасовойПоясКлиента * 3600;

	Timestamp = Дата('19700101000000') + Timestamp;

	Возврат Timestamp;
КонецФункции

//Функция запрашивает данные об отрезках работы ТС
Функция АвтоГРАФ5_ЗагрузитьМестоположениеПоТС(ДатаС, ДатаПо, массивТС, ТекстОшибки, УчетнаяЗаписьСистемыМониторинга = Неопределено) Экспорт
	ДанныеПодключения = Неопределено;

	ТабТС = Новый ТаблицаЗначений;

	ТекстОписанияОшибки = "";
	
	// 1. Зачем-то получаем ВЕСЬ перечень ТС из Автограф
	Если глСистемыМониторингаСервер.АвтоГРАФ5_СписокТС(ТабТС, УчетнаяЗаписьСистемыМониторинга, ТекстОписанияОшибки) Тогда
		ТекстОшибки = НСтр("en='Error while getting vehicle list. (For details, see event log)';ru='Ошибка при получении списка ТС. (Подробности см. в журнале регистрации)'");
		ЗаписьЖурналаРегистрации("Мониторинг. АвтоГРАФ", УровеньЖурналаРегистрации.Ошибка, Метаданные.ОбщиеМодули.глСистемыМониторингаСервер, , НСтр("en='Error while getting vehicle list. Error description: ';ru='Ошибка при получении списка ТС. Описание ошибки: '") + Символы.ПС + ТекстОписанияОшибки);
		Возврат 1;
	КонецЕсли;

	// 2. Теперь формируем массив ТС, по которым будем делать запрос в систему Автограф
	МассивID = "";
	Для каждого ТекТС Из массивТС Цикл
		ТекИДGPS = СтрЗаменить(ТекТС.ИДвСистемеНавигации, " ", "");
		Если Не (ТекТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автограф) Тогда
			ТекстОшибки = НСтр("en='Cannot execute request. Vehicle monitoring system';ru='Невозможно осуществить запрос. Система мониторинга  для ТС'") + " <" + ТекТС + "> " + НСтр("en='does not match AutoGRAPH system.';ru='не соответствует системе АвтоГРАФ.'");
			Возврат 1;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекИДGPS) Тогда
			ТекстОшибки = НСтр("en='Cannot execute request. ID in vehicle monitoring system';ru='Невозможно осуществить запрос. ID в системе мониторинга для ТС'") + " <" + ТекТС + "> " + НСтр("en='not filled.';ru='не заполнено.'");
			Возврат 1;
		КонецЕсли;
		врТекИДGPS = ТекИДGPS;
		Попытка
			ТекИДGPS = Формат(Число(ТекИДGPS), "ЧН=0; ЧГ=0");
		Исключение
			ТекИДGPS = врТекИДGPS;
		КонецПопытки;
		НайдСтр = ТабТС.Найти(ТекИДGPS, "ID");
		Если НайдСтр = Неопределено Тогда
			ТекстОшибки = НСтр("en='Cannot execute request. Vehicle ID';ru='Невозможно осуществить запрос. ID ТС'") + " <" + ТекТС + "> " + НСтр("en='not found in satellite monitoring system.';ru='не найдено в системе спутникового мониторинга.'");
			Возврат 1;
		КонецЕсли;
		МассивID = ?(ЗначениеЗаполнено(МассивID), МассивID + ",", "") + ТекИДGPS;
	КонецЦикла;

	// 3. Определяем необходимые параметры для запроса
	Token = УчетнаяЗаписьСистемыМониторинга.ТокенАвторизации;
	мАдрес = УчетнаяЗаписьСистемыМониторинга.АдресСервера;
	chemaID = УчетнаяЗаписьСистемыМониторинга.Ресурс;
	ЧасовойПояс = УчетнаяЗаписьСистемыМониторинга.СдвигЧасовогоПояса;
	мДатаС = глСистемыМониторингаСервер.АвтоГРАФ5_ПолучитьДатуСервера(ДатаС, ЧасовойПояс);
	мДатаПо = глСистемыМониторингаСервер.АвтоГРАФ5_ПолучитьДатуСервера(ДатаПо, ЧасовойПояс);

	Если Прав(мАдрес, 1) = "/" Тогда
		мАдрес = Лев(мАдрес, СтрДлина(мАдрес) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(мАдрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(мАдрес, 8)) = "https://") Тогда
			мАдрес = "http://" + мАдрес;
		КонецЕсли;
	КонецЕсли;

	// 4. Формируем запрос
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);

	Адрес = мАдрес + "/GetTrips?schemaID=" + chemaID + "&IDs=" + МассивID + "&SD=" + мДатаС + "&ED=" + мДатаПо + "&tripSplitterIndex=1";
	HTTPОтвет = глСистемыМониторингаСервер.ВыполнитьHTTPЗапрос(Адрес, "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);

    // 5. проверяем на наличие ошибок выполнение запроса
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	// 6. Если нет ошибок начинаем обрабатывать полученные данные - далее РезультатЗапроса
	КодСостояния = HTTPОтвет.КодСостояния;
//	ТаблицаСобытий = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей().Выгрузить();
//	ТаблицаСобытий.Очистить();
	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		Response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Для каждого ТекТС Из массивТС Цикл
			//ДанныеТС - блок данных по текущему ТС из нашего массива
			//Блок получаем из РезультатЗапроса по реквизиту "ИДвСистемеНавигации" - это корневое значение в РезультатеЗапроса по каждому ТС
			ДанныеТС = Response.Получить(ТекТС.ИДвСистемеНавигации);
			
			
			Trips = ДанныеТС.Получить("Trips");
			ДатаСервер = ДанныеТС.Получить("SD");
			ЧасовойПоясСервер = Прав(ДатаСервер, 6);
			ЗнакЧасовойПоясСервер = Лев(ЧасовойПоясСервер, 1);
			ЧасовойПоясСервер = Число(Сред(ЧасовойПоясСервер, 2, 2));

			Если ТипЗнч(Trips) = Тип("Массив") И Trips.Количество() = 1 Тогда
				Trip = Trips[0];
				Stages = Trip.Получить("Stages");
				Если ТипЗнч(Trips) = Тип("Массив") Тогда
//					Для каждого Отрезок Из Stages Цикл
//						Имяотрезка = Отрезок.Получить("Name");
//						Если Имяотрезка <> "Motion" Тогда
//							Продолжить;
//						КонецЕсли;
//						Params = Отрезок.Получить("Params");
//						СоответствиеКолонок = Новый Соответствие;
//						Если ТипЗнч(Params) = Тип("Массив") Тогда
//							Индекс = 0;
//							Для каждого Параметры Из Params Цикл
//								СоответствиеКолонок.Вставить(Параметры, Индекс);
//								Индекс = Индекс + 1;
//							КонецЦикла;
//						КонецЕсли;

//						Items = Отрезок.Получить("Items");
//						Если ТипЗнч(Items) = Тип("Массив") Тогда
//							Индекс = 1;
//							Для каждого СтрокаОтрезка Из Items Цикл
//								Values = СтрокаОтрезка.Получить("Values");
//								Если Не (ТипЗнч(Values) = Тип("Массив")) Тогда
//									Продолжить;
//								КонецЕсли;

//								НовЗаписьСобытий = ТаблицаСобытий.Добавить();
//								Если СоответствиеКолонок.Получить("DateTime Last") = Неопределено Тогда
//									Продолжить;
//								КонецЕсли;

//								Период = Values[СоответствиеКолонок.Получить("DateTime Last")];
//								Попытка
//									НовЗаписьСобытий.Период = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Период, "T", ""), ":", ""), "-", ""));
//								Исключение
//									Продолжить;
//								КонецПопытки;

//								НовЗаписьСобытий.Период = АвтоГРАФ5_ПолучитьДатуКлиента(НовЗаписьСобытий.Период, ЧасовойПояс);
//								НовЗаписьСобытий.ТС = ТекТС;
//								Если СоответствиеКолонок.Получить("TotalDistance") <> Неопределено Тогда
//									НовЗаписьСобытий.Пробег = Окр(Values[СоответствиеКолонок.Получить("TotalDistance")], 3);
//								КонецЕсли;

//								Если СоответствиеКолонок.Получить("EngineMotohours") <> Неопределено Тогда
//									EngineMotohours = Values[СоответствиеКолонок.Получить("EngineMotohours")];
//									Попытка
//										Час_ = Число(Лев(EngineMotohours, 2));
//										Минута_ = Число(Сред(EngineMotohours, 4, 2));
//										Секунда_ = Число(Прав(EngineMotohours, 2));
//									Исключение
//										Попытка
//											Час_ = Число(Лев(EngineMotohours, 1));
//											EngineMotohours = "0" + EngineMotohours;
//											Минута_ = Число(Сред(EngineMotohours, 4, 2));
//											Секунда_ = Число(Прав(EngineMotohours, 2));
//										Исключение
//											Продолжить;
//										КонецПопытки;
//									КонецПопытки;
//									Час_ = Час_ + Минута_ / 60 + Секунда_ / 60 * 60;

//									НовЗаписьСобытий.ВремяРаботыДвигателя = Окр(Час_, 3);
//								КонецЕсли;
//								Если СоответствиеКолонок.Получить("EngineFuelConsum") <> Неопределено Тогда
//									НовЗаписьСобытий.РасходТоплива = Values[СоответствиеКолонок.Получить("EngineFuelConsum")];
//								КонецЕсли;
//								Если СоответствиеКолонок.Получить("TankFuelLevel Last") <> Неопределено Тогда
//									НовЗаписьСобытий.УровеньТоплива = Окр(Values[СоответствиеКолонок.Получить("TankFuelLevel Last")], 3);
//								КонецЕсли;
//							КонецЦикла;
//						КонецЕсли;
//					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

//		ТаблицаСобытий.Сортировать("ТС, Период");

//		Для каждого ТекСтрока Из ТаблицаСобытий Цикл
//			Если ОчиститьПробегРасходПоМониторингуВИнтервале(ТекСтрока.ТС, ДатаС, ДатаПо, ТекстОшибки) Тогда
//				Возврат 1;
//			КонецЕсли;
//		КонецЦикла;


//		НаборЗап = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
//		НаборЗап.Загрузить(ТаблицаСобытий);
//		НаборЗап.Записывать = Истина;
//		Попытка
//			НаборЗап.Записать(Ложь);
//		Исключение
//			ТекстОшибки = НСтр("en='Error occurred while saving set to register';ru='Возникла ошибка при записи набора в регистр.'") + Символы.ПС + ОписаниеОшибки();
//			Возврат 1;
//		КонецПопытки;

//		Возврат 0;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции

//Функция возвращает заполненную значениями фиксированную структуру, которая содержит в себе перечень значений параметров
//работы транспортного средства.
//Входящие параметры:
//ТС - ссылка на элемент справочника "Транспортные средства" ("уатТС")
//СтрИзАвтограф  - соответствие, полученное из ответа в формате JSON, блок "ID(Корень)-Trips[0]-Total"
Функция АвтоГРАФ5_ПолучитьСтруктуруПараметровРаботыТС(ТС,СтрИзАвтограф) Экспорт
	Стк = глСистемыМониторингаСервер.ПолучитьСтруктуруПараметровРаботыТС();
	Стк.ТС = ТС;
	Стк.ПараметрыБСМТС = СтрИзАвтограф;
	мПустаяДата = '00010101000000';
	Отопитель1 = Дата(1,1,1); 
	Отопитель2 = Дата(1,1,1); 
	Для Каждого ХХХ Из СтрИзАвтограф Цикл
		НаименованиеПараметра = ХХХ.Ключ;
		ЗначениеПараметра = ХХХ.Значение;
		Если ЗначениеПараметра = Неопределено Тогда //например это бывает в тех случаях, когда ТС не работало
			Продолжить;
		КонецЕсли;	
		Если      НаименованиеПараметра = "TotalDistance" 		    Тогда Стк.Пробег 	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank1FuelLevel First"    Тогда Стк.Бак1Нач 	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank1FuelLevel Last" 	Тогда Стк.Бак1Кон 	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank1FuelUpVol Diff" 	Тогда Стк.Бак1Зап 	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank1FuelDnVol Diff" 	Тогда Стк.Бак1слив	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank1FuelUpCount" 	    Тогда Стк.Бак1ЗапКол  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank1FuelDnCount" 	    Тогда Стк.Бак1сливКол = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank2FuelLevel First"    Тогда Стк.Бак2Нач 	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank2FuelLevel Last" 	Тогда Стк.Бак2Кон 	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank2FuelUpVol Diff" 	Тогда Стк.Бак2Зап 	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank2FuelDnVol Diff" 	Тогда Стк.Бак2слив	  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank2FuelUpCount" 	    Тогда Стк.Бак2ЗапКол  = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Tank2FuelDnCount" 	    Тогда Стк.Бак2сливКол = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Sensor40ON_dur" 	    Тогда
			Стк.ОтопительСухой  = ЗначениеПараметра;
			Отопитель1 = Дата("01.01.0001 "+ ЗначениеПараметра); 
		ИНАчеЕсли НаименованиеПараметра = "Sensor50ON_dur" 	    Тогда
			Стк.ОтопительЖидкостной = ЗначениеПараметра; 
			Отопитель2 = Дата("01.01.0001 "+ ЗначениеПараметра); 
		ИНАчеЕсли НаименованиеПараметра = "Engine1Motohours" 	    Тогда Стк.ЧасыРаб 	  = ЗначениеПараметра; 
		ИНАчеЕсли НаименованиеПараметра = "Sensor100ON_dur" 	    Тогда
			Стк.ЧасыРабВО   = ЗначениеПараметра;
			Стк.ЧасыРабВОКол   = ВремяВЧисло(ЗначениеПараметра); 
		ИНАчеЕсли НаименованиеПараметра = "Engine1MHOnParks" 	    Тогда Стк.ХХ = ЗначениеПараметра; 
		ИНАчеЕсли НаименованиеПараметра = "Tank30FuelLevel" 	    Тогда Стк.РасходПоДУТ = Окр(Число(ЗначениеПараметра),2); 
		ИНАчеЕсли НаименованиеПараметра = "Engine1FuelConsumPer100km" 	    Тогда 	Стк.РасходНа100км = Окр(Число(ЗначениеПараметра),2); 
		КонецеСЛИ;
		Стк.Отопитель = Прав("0" + Строка(Формат(мПустаяДата + (Отопитель1 - мПустаяДата) + (Отопитель2 - мПустаяДата),"ДЛФ=T")),8);
	КонецЦикла;		
	Возврат Стк;
КонецФункции

Функция ПолучитьДатуАктуальностиПоТС(пТС, пТекстОшибки) Экспорт
	Если пТС = Неопределено Или пТС.Пустая() Или пТС.СистемаМониторинга.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	мСистемаМониторинга = пТС.СистемаМониторинга;
	
	ТекИДGPS = СтрЗаменить(пТС.ИДвСистемеНавигации, " ", "");
	Если Не (пТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автограф) Тогда
		ТекстОшибки = НСтр("en='Cannot execute request. Vehicle monitoring system';ru='Невозможно осуществить запрос. Система мониторинга  для ТС'") + " <" + пТС + "> " + НСтр("en='does not match AutoGRAPH system.';ru='не соответствует системе АвтоГРАФ.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекИДGPS) Тогда
		ТекстОшибки = НСтр("en='Cannot execute request. ID in vehicle monitoring system';ru='Невозможно осуществить запрос. ID в системе мониторинга для ТС'") + " <" + пТС + "> " + НСтр("en='not filled.';ru='не заполнено.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// 3. Определяем необходимые параметры для запроса
	Token = мСистемаМониторинга.ТокенАвторизации;
	мАдрес = мСистемаМониторинга.АдресСервера;
	chemaID = мСистемаМониторинга.Ресурс;
	ЧасовойПояс = мСистемаМониторинга.СдвигЧасовогоПояса;
	
	Если Прав(мАдрес, 1) = "/" Тогда
		мАдрес = Лев(мАдрес, СтрДлина(мАдрес) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(мАдрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(мАдрес, 8)) = "https://") Тогда
			мАдрес = "http://" + мАдрес;
		КонецЕсли;
	КонецЕсли;

	// 4. Формируем запрос
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);
	Адрес = мАдрес + "/GetOnlineInfo?schemaID=" + chemaID + "&IDs=" + ТекИДGPS;
	HTTPОтвет = глСистемыМониторингаСервер.ВыполнитьHTTPЗапрос(Адрес, "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);
	
    // 5. проверяем на наличие ошибок выполнение запроса
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// 6. Если нет ошибок начинаем обрабатывать полученные данные - далее РезультатЗапроса
	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		Response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		//ДанныеТС - блок данных по текущему ТС из нашего массива
		//Блок получаем из РезультатЗапроса по реквизиту "ИДвСистемеНавигации" - это корневое значение в РезультатеЗапроса по каждому ТС
		ДанныеТС = Response.Получить(пТС.ИДвСистемеНавигации);
		Если ДанныеТС = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		мДатаПолученияКрайнихДанныхСтрокой = ДанныеТС.Получить("_LastData");
		Если мДатаПолученияКрайнихДанныхСтрокой = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		мДатаКонвертированная = Дата("19700101050000") + Число(СтрЗаменить(СтрЗаменить(мДатаПолученияКрайнихДанныхСтрокой, "/Date(", ""), "000+0500)/", ""));
		
		
		Возврат мДатаКонвертированная;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//Функция возвращает информацию о последнем местоположении устройств
Функция АвтоГРАФ5_GetOnlineInfo(МассивID, Знач УчетнаяЗапись,Response, ТекстОшибки = "", ResponseText = "") Экспорт
	
	Token = УчетнаяЗапись.ТокенАвторизации;
	Адрес = УчетнаяЗапись.АдресСервера;
	chemaID = УчетнаяЗапись.Ресурс;

	Если Прав(Адрес, 1) = "/" Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(Адрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(Адрес, 8)) = "https://") Тогда
			Адрес = "http://" + Адрес;
		КонецЕсли;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);
	
	Адрес = Адрес + "/GetOnlineInfo?schemaID=" + chemaID + "&IDs=" + МассивID[0];
	
	HTTPОтвет = глСистемыМониторингаСервер.ВыполнитьHTTPЗапрос(Адрес, "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		Response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Возврат 0;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции

Функция АвтоГРАФ5_GetOnlineInfoAll(Знач УчетнаяЗапись, Response, ТекстОшибки = "", ResponseText = "") Экспорт
	
	Token = УчетнаяЗапись.ТокенАвторизации;
	Адрес = УчетнаяЗапись.АдресСервера;
	chemaID = УчетнаяЗапись.Ресурс;

	Если Прав(Адрес, 1) = "/" Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(Адрес, 7)) = "http://") Тогда
		Если Не (НРег(Лев(Адрес, 8)) = "https://") Тогда
			Адрес = "http://" + Адрес;
		КонецЕсли;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("AG-TOKEN", Token);

	HTTPОтвет = глСистемыМониторингаСервер.ВыполнитьHTTPЗапрос(Адрес + "/GetOnlineInfoAll?schemaID=" + chemaID + "&finalParams=*", "Мониторинг. АвтоГРАФ 5", ТекстОшибки, , , Заголовки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ResponseText);
		Response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		Возврат 0;
	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции


#КонецОбласти


#Область РаботаСWialon

Функция Wialon_Авторизация(ДанныеАвторизации, ТекстОшибки, КодОшибкиWialon, УчетнаяЗаписьСистемыМониторинга = Неопределено)  Экспорт
	
	Перем АдресСервера;
	ТекстОшибки = "";

	ДанныеАвторизации = Новый Соответствие;
	ДанныеАвторизации.Вставить("sessionID", "");
	ДанныеАвторизации.Вставить("userID", "");
	ДанныеАвторизации.Вставить("resourceID", "");
	ДанныеАвторизации.Вставить("serverAddr", "");

	Токен = УчетнаяЗаписьСистемыМониторинга.ТокенАвторизации;
	АдресСервера = УчетнаяЗаписьСистемыМониторинга.АдресСервера;
	Ресурс = УчетнаяЗаписьСистемыМониторинга.Ресурс;

	Если Прав(АдресСервера, 1) = "/" Тогда
		АдресСервера = Лев(АдресСервера, СтрДлина(АдресСервера) - 1);
	КонецЕсли;

	Если Не (НРег(Лев(АдресСервера, 7)) = "http://") Тогда
		Если Не (НРег(Лев(АдресСервера, 8)) = "https://") Тогда
			АдресСервера = "http://" + АдресСервера;
		КонецЕсли;
	КонецЕсли;

	ДанныеАвторизации.Вставить("serverAddr", АдресСервера);

	HTTPОтвет = ВыполнитьHTTPЗапрос(АдресСервера + "/wialon/ajax.html?svc=token/login&params={""token"": """ + Токен + """}", "Мониторинг. Wialon", ТекстОшибки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		responseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(responseText);
		response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Если Wialon_ЕстьОшибка(response, ТекстОшибки, КодОшибкиWialon) Тогда
			Возврат 1;
		КонецЕсли;

		ДанныеАвторизации.Вставить("sessionID", response.Получить("eid"));
		ДанныеПользователя = response.Получить("user");
		ДанныеАвторизации.Вставить("userID",ДанныеПользователя.Получить("id"));
		Возврат 0;

	Иначе
		ТекстОшибки = НСтр("en='Web service authorization error. Server response code: ';ru='Ошибка при попытке авторизации в web-сервисе. Код ответа сервера: '") + КодСостояния;
		Возврат 1;
	КонецЕсли;

КонецФункции

Процедура Wialon_Деавторизация(Знач ДанныеАвторизации) Экспорт
	ТекстОшибки = "";
	HTTPОтвет = ВыполнитьHTTPЗапрос(ДанныеАвторизации.Получить("serverAddr") + "/wialon/ajax.html?sid=" + ДанныеАвторизации.Получить("sessionID") + "&svc=core/logout&params={}", "Мониторинг. Wialon", ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
		Возврат;
	КонецЕсли;
	Сообщить("Деавторизация выполнена успешно");
КонецПроцедуры

Функция Wialon_ПолучитьСписокРесурсов(Знач УчетнаяЗаписьСистемыМониторинга, ТекстОшибки = "", Ресурсы = Неопределено) Экспорт
	
	Ресурсы = Новый Массив;
	
	КодОшибкиWialon = "";

	ДанныеАвторизации = Неопределено;
	АдресСервера = УчетнаяЗаписьСистемыМониторинга.АдресСервера;
    РезультатАвторизации = Wialon_Авторизация(ДанныеАвторизации, ТекстОшибки, КодОшибкиWialon, УчетнаяЗаписьСистемыМониторинга);
	
	HTTPОтвет = ВыполнитьHTTPЗапрос(АдресСервера + "/wialon/ajax.html?sid=" + ДанныеАвторизации.Получить("sessionID") + "&svc=core/search_items&params={""spec"":{""itemsType"":""avl_resource"",""propName"":""sys_name"",""propValueMask"":"""",""sortType"":""sys_name"",""propType"":""property""},""force"":1,""flags"":1,""from"":0,""to"":0}", "Мониторинг. Wialon", ТекстОшибки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния = 200 Тогда
		responseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(responseText);
		response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		Wialon_Деавторизация(ДанныеАвторизации);

		Если Wialon_ЕстьОшибка(response, ТекстОшибки) Тогда
			Возврат 1;
		КонецЕсли;
		
		Ресурсы = response.Получить("items");

		Возврат 0;
		
	Иначе
		Возврат 1;
	КонецЕсли;

КонецФункции

Функция Wialon_ПолучитьСписокОтчетов(Знач ДанныеАвторизации, МассивОтчетов, ТекстОшибки, КодОшибкиWialon) Экспорт
	Перем HTTPОтвет;
	ТекстОшибки = "";
	МассивОтчетов.Очистить();
	
	HTTPОтвет = ВыполнитьHTTPЗапрос(ДанныеАвторизации.Получить("serverAddr") + "/wialon/ajax.html?svc=core/search_items&params={""spec"":{""itemsType"":""avl_resource"",""propName"":""reporttemplates"",""propValueMask"":""*"",""sortType"":""reporttemplates""},""force"":1,""flags"":""0x00002001"",""from"":0,""to"":0}&sid=" + ДанныеАвторизации.Получить("sessionID") , "Мониторинг. Wialon", ТекстОшибки);
																							
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 200 Тогда
		responseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(responseText);
		response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Если Wialon_ЕстьОшибка(response, ТекстОшибки, КодОшибкиWialon) Тогда
			Возврат Ложь;
		КонецЕсли;

		спРесурсы = response.Получить("items");
		Для каждого Рес Из спРесурсы Цикл
			Ресурс = Рес.Получить("nm");
			
			спОтчеты = Рес.Получить("rep");
			Для Каждого ХХХ Из спОтчеты Цикл
				
				От = ХХХ.Значение;
				
				НаименованиеОтчета = От.Получить("n");
				ИДОтчета = От.Получить("id");
				
				ДанныеПоОтчету = Новый Структура;
				ДанныеПоОтчету.Вставить("Ресурс", Ресурс);
				ДанныеПоОтчету.Вставить("НаименованиеОтчета", НаименованиеОтчета);
				ДанныеПоОтчету.Вставить("ИДОтчета", Формат(ИДОтчета, "ЧН=0; ЧГ=0"));
				МассивОтчетов.Добавить(ДанныеПоОтчету);
				
			КонецЦикла;	

		КонецЦикла;

		Возврат Истина;
	Иначе

		ТекстОшибки = НСтр("en='Error while getting vehicle list. Server response code: ';ru='Ошибка при получении списка ТС. Код ответа сервера: '") + КодСостояния;
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция Wialon_ПолучитьСписокТС(Знач ДанныеАвторизации, МассивТС, ТекстОшибки, КодОшибкиWialon) Экспорт
	Перем HTTPОтвет;
	ТекстОшибки = "";
	МассивТС.Очистить();

	HTTPОтвет = ВыполнитьHTTPЗапрос(ДанныеАвторизации.Получить("serverAddr") + "/wialon/ajax.html?sid=" + ДанныеАвторизации.Получить("sessionID") + "&svc=core/search_items&params={""spec"":{""itemsType"":""avl_unit"",""propName"":""sys_id"",""propValueMask"":""*"",""sortType"":""sys_id"",""propType"":""guid""},""force"":1,""flags"":1,""from"":0,""to"":0}", "Мониторинг. Wialon", ТекстОшибки);

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат 1;
	КонецЕсли;

	КодСостояния = HTTPОтвет.КодСостояния;
	Если КодСостояния = 200 Тогда
		responseText = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(responseText);
		response = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();

		Если Wialon_ЕстьОшибка(response, ТекстОшибки, КодОшибкиWialon) Тогда
			Возврат Ложь;
		КонецЕсли;

		Для каждого ТекЭлемент Из response.Получить("items") Цикл
			ДанныеТС = Новый Структура;
			ДанныеТС.Вставить("name", ТекЭлемент.Получить("nm"));
			ДанныеТС.Вставить("id", Формат(ТекЭлемент.Получить("id"), "ЧН=0; ЧГ=0"));

			МассивТС.Добавить(ДанныеТС);
		КонецЦикла;

		Возврат Истина;
	Иначе

		ТекстОшибки = НСтр("en='Error while getting vehicle list. Server response code: ';ru='Ошибка при получении списка ТС. Код ответа сервера: '") + КодСостояния;
		Возврат Ложь;
	КонецЕсли;

КонецФункции


Функция Wialon_ЕстьОшибка(Знач Ответ, ТекстОшибки, КодОшибкиWialon = "") Экспорт
	КодОшибкиWialon = 0;

	Если Не (ТипЗнч(Ответ) = Тип("Соответствие")) Или (Ответ.Получить("error") = Неопределено Или Ответ.Получить("error") = 0) Тогда
		ТекстОшибки = "";
		Возврат Ложь;
	КонецЕсли;

	КодыОшибок = Новый Соответствие;
	КодыОшибок.Вставить("1", НСтр("en='Disabled session';ru='Недействительная сессия'"));
	КодыОшибок.Вставить(1, НСтр("en='Disabled session';ru='Недействительная сессия'"));
	КодыОшибок.Вставить("2", НСтр("en='Invalid service name';ru='Неверное имя сервиса'"));
	КодыОшибок.Вставить(2, НСтр("en='Invalid service name';ru='Неверное имя сервиса'"));
	КодыОшибок.Вставить("3", НСтр("en='Incorrect result';ru='Неверный результат'"));
	КодыОшибок.Вставить(3, НСтр("en='Incorrect result';ru='Неверный результат'"));
	КодыОшибок.Вставить("4", НСтр("en='Invalid data entered';ru='Неверный ввод'"));
	КодыОшибок.Вставить(4, НСтр("en='Invalid data entered';ru='Неверный ввод'"));
	КодыОшибок.Вставить("5", НСтр("en='Error while executing request';ru='Ошибка выполнения запроса'"));
	КодыОшибок.Вставить(5, НСтр("en='Error while executing request';ru='Ошибка выполнения запроса'"));
	КодыОшибок.Вставить("6", НСтр("en='Unknown error';ru='Неизвестная ошибка'"));
	КодыОшибок.Вставить(6, НСтр("en='Unknown error';ru='Неизвестная ошибка'"));
	КодыОшибок.Вставить("7", НСтр("en='Access denied';ru='Доступ запрещен'"));
	КодыОшибок.Вставить(7, НСтр("en='Access denied';ru='Доступ запрещен'"));
	КодыОшибок.Вставить("8", НСтр("en='Invalid user name or password';ru='Неверный пароль или имя пользователя'"));
	КодыОшибок.Вставить(8, НСтр("en='Invalid user name or password';ru='Неверный пароль или имя пользователя'"));
	КодыОшибок.Вставить("9", НСтр("en='Authorization server is unavailable, please retry your request later';ru='Сервер авторизации недоступен, пожалуйста попробуйте повторить запрос позже'"));
	КодыОшибок.Вставить(9, НСтр("en='Authorization server is unavailable, please retry your request later';ru='Сервер авторизации недоступен, пожалуйста попробуйте повторить запрос позже'"));
	КодыОшибок.Вставить("10", НСтр("en='Concurrent requests limit exceeded';ru='Превышен лимит одновременных запросов'"));
	КодыОшибок.Вставить(10, НСтр("en='Concurrent requests limit exceeded';ru='Превышен лимит одновременных запросов'"));
	КодыОшибок.Вставить("11", НСтр("en='Error while executing password reset request';ru='Ошибка во время выполнения запроса на сброс пароля'"));
	КодыОшибок.Вставить(11, НСтр("en='Error while executing password reset request';ru='Ошибка во время выполнения запроса на сброс пароля'"));
	КодыОшибок.Вставить("14", НСтр("ru='Ошибка биллинга'"));
	КодыОшибок.Вставить(14, НСтр("ru='Ошибка биллинга'"));
	КодыОшибок.Вставить("1001", НСтр("en='No messages available for selected interval';ru='Нет сообщений для выбранного интервала'"));
	КодыОшибок.Вставить(1001, НСтр("en='No messages available for selected interval';ru='Нет сообщений для выбранного интервала'"));
	КодыОшибок.Вставить("1002", НСтр("en='Item with this unique property already exists or cannot be created due to billing restrictions';ru='Элемент с таким уникальным свойством уже существует или невозможно создать элемент в связи с ограничениями биллинга'"));
	КодыОшибок.Вставить(1002, НСтр("en='Item with this unique property already exists or cannot be created due to billing restrictions';ru='Элемент с таким уникальным свойством уже существует или невозможно создать элемент в связи с ограничениями биллинга'"));
	КодыОшибок.Вставить("1003", НСтр("en='Only one request is allowed at this moment of time';ru='Только один запрос разрешается в данный момент времени'"));
	КодыОшибок.Вставить(1003, НСтр("en='Only one request is allowed at this moment of time';ru='Только один запрос разрешается в данный момент времени'"));
	КодыОшибок.Вставить("1004", НСтр("ru='Превышено ограничение по числу сообщений'"));
	КодыОшибок.Вставить(1004, НСтр("ru='Превышено ограничение по числу сообщений'"));
	КодыОшибок.Вставить("1005", НСтр("ru='Ограничение по времени выполнения было превышено'"));
	КодыОшибок.Вставить(1005, НСтр("ru='Ограничение по времени выполнения было превышено'"));
	КодыОшибок.Вставить("1006", НСтр("ru='Превышение лимита попыток ввода кода двухфакторной авторизации'"));
	КодыОшибок.Вставить(1006, НСтр("ru='Превышение лимита попыток ввода кода двухфакторной авторизации'"));
	КодыОшибок.Вставить("1011", НСтр("ru='Время сессии истекло либо IP клиента изменился'"));
	КодыОшибок.Вставить(1011, НСтр("ru='Время сессии истекло либо IP клиента изменился'"));
	КодыОшибок.Вставить("2014", НСтр("en='Current user cannot be selected when creating user account';ru='Текущий пользователь не может быть выбран при создании учетной записи'"));
	КодыОшибок.Вставить(2014, НСтр("en='Current user cannot be selected when creating user account';ru='Текущий пользователь не может быть выбран при создании учетной записи'"));
	КодыОшибок.Вставить("2015", НСтр("ru='Удаление датчика запрещено по причине использования в другом датчике или дополнительных свойствах объекта'"));
	КодыОшибок.Вставить(2015, НСтр("ru='Удаление датчика запрещено по причине использования в другом датчике или дополнительных свойствах объекта'"));

	КодОшибки = Ответ.Получить("error");

	Если ТипЗнч(КодОшибки) = Тип("Число") Тогда
		КодОшибкиWialon = Формат(КодОшибки, "ЧН=0; ЧГ=0");
	КонецЕсли;

	КодОшибкиWialon = СокрЛП(СтрЗаменить(КодОшибкиWialon, " ", ""));

	стрОшибка = КодыОшибок.Получить(КодОшибки);

	Если стрОшибка = Неопределено Тогда
		ТекстОшибки = НСтр("en='Undefined error';ru='Неопределенная ошибка'");
	Иначе
		ТекстОшибки = стрОшибка;
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти


Функция ПолучитьДанныеПоТС(ТекТС,ДатаС,ДатаПо,ИДДанные=Неопределено,ЗакрытьСессию = Истина, ТекстОшибки = "") Экспорт
	
	//Если у ТС не привязана система мониторинга, то ничего не делаем
	Если Не ЗначениеЗаполнено(ТекТС.СистемаМониторинга) Тогда
		Возврат 1;
	КонецЕсли;	
	
	//Для Автографа это сделано в самом запросе
	//ДатаНачала = КорректировкаЧасовогоПояса(Дт1, ТС.СистемаМониторинга.СдвигЧасовогоПояса);
	//ДатаОкончания = КорректировкаЧасовогоПояса(Дт2, ТС.СистемаМониторинга.СдвигЧасовогоПояса);
	
	Если ТекТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автограф ТОгда
		Рез = АвтоГРАФ5_ПолучитьДанныеДляПЛПоТС(ДатаС, ДатаПо, ТекТС, ТекстОшибки, ТекТС.СистемаМониторинга);
		Возврат Рез;
	ИНАчеЕсли ТекТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Виалон ТОгда
		Рез = глАвтограф.ЗапросВВиалон(ТекТС,ТекТС.СистемаМониторинга,ДатаС,ДатаПо,ИДДанные,ЗакрытьСессию);
		Возврат Рез;
	ИНАчеЕсли ТекТС.СистемаМониторинга.ВидСистемыGPS = Перечисления.ВидСистемыGPS.Автотрекер ТОгда
		Рез = глАвтограф.ЗапросВАвтограф_WS(ТекТС,ДатаС,ДатаПо,ИДДанные);
		Возврат Рез;
	КонецеСЛИ;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИспользоватьДанныеБСМТСВУчетеПЛ(ТС,ДатаЗапроса) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДанныхВПЛПоБСМТССрезПоследних.ИспользоватьДанныеБСМТС КАК ИспользоватьДанныеБСМТС
		|ИЗ
		|	РегистрСведений.УчетДанныхВПЛПоБСМТС.СрезПоследних(&ДатаЗапроса, ТС = &ТС) КАК УчетДанныхВПЛПоБСМТССрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИспользоватьДанныеБСМТС;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	


#Область РегламентныеПроцедурыИФункции

Процедура ПолучениеДанныхИзБСМТСДляОКО() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция фзПолучениеДанныхИзБСМТС(ПутевойЛист,ЧислоСекунд) Экспорт
	Если ЗначениеЗаполнено(ПутевойЛист) Тогда
		Обработки.ПолучениеДанныхИзБСМТС.ПолучитьДанныеБСМТС(ПутевойЛист);
	КонецЕсли;	
КонецФункции	

#КонецОбласти
