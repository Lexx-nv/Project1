  Функция ВычислитьШтрихКод(ШтрихКод)
// Вычисляет контрольный разряд и
// возвращает правильный штрихкод
  Четн   = 0;
  Нечетн = 0;
  КоличествоИтераций = 6;
    
  Для Индекс = 1 По КоличествоИтераций Цикл
    Четн   = Четн   + Число(Сред(ШтрихКод, 2 * Индекс, 1));
    Нечетн = Нечетн + Число(Сред(ШтрихКод, 2 * Индекс - 1, 1));
  КонецЦикла;
  Четн = Четн * 3;
  КонтЦифра = 10 - (Четн + Нечетн) % 10;
  Если  КонтЦифра = 10
    Тогда КонтЦифра  = 0;
  КонецЕсли;

  Возврат Лев(ШтрихКод,12) + СокрЛП(Строка(КонтЦифра));
   
//	Возврат ШтрихКод - ШтрихКод + КонтЦифра;
КонецФункции
//===============================================
Функция ПолучитьКомбинацию(ИсхЧисло,Тип="X")
  
  // Символы из таблицы для нижнего расположения
  Если Тип = "A"	Тогда
    Возврат(Строка(ИсхЧисло));
  
  ИначеЕсли Тип = "B" Тогда
    Возврат(Символ(ИсхЧисло + 65));
  
  ИначеЕсли Тип = "C" Тогда
    Возврат(Символ(ИсхЧисло + 97));
  Иначе
    Возврат(Символ(ИсхЧисло + 35));
  КонецЕсли;
    
КонецФункции 
//===============================================
Функция ПолучитьШтрихКод (ШКИсх) Экспорт
// Возвращает печатный штрих-код
// для переданной строки символов
  
//	ШК = Число (ШКИсх);
  ШК = ВычислитьШтрихКод (ШКИсх);
  
 
  СтрокаШК ="";
   
  // EAN13
    
  СтрокаШК =
  ПолучитьКомбинацию(Число(Сред(ШК,1,1)));      //13
    
  СтрокаШК = СтрокаШК +  "!";
  СтрокаШК = СтрокаШК	+
  ПолучитьКомбинацию(Число(Сред(ШК,2,1)),"A");  //12
        
  Если Число(Сред(ШК,1,1)) < 4 Тогда            //11
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,3,1)),"A");
  Иначе
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,3,1)),"B");
  КонецЕсли;
                                           //10
  Если ((Число(Сред(ШК,1,1)) = 0) ИЛИ
      (Число(Сред(ШК,1,1)) = 4) ИЛИ
 	      (Число(Сред(ШК,1,1)) = 7) ИЛИ
          (Число(Сред(ШК,1,1)) = 8)) Тогда
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,4,1)),"A");
  Иначе
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,4,1)),"B");
  КонецЕсли;
                                          //09
  Если ((Число(Сред(ШК,1,1)) = 0) ИЛИ
        (Число(Сред(ШК,1,1)) = 1) ИЛИ
 	      (Число(Сред(ШК,1,1)) = 4) ИЛИ
          (Число(Сред(ШК,1,1))  =5) ИЛИ
          (Число(Сред(ШК,1,1))  =9)) Тогда
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,5,1)),"A");
  Иначе
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,5,1)),"B");
  КонецЕсли;
      
                                          //08
  Если ((Число(Сред(ШК,1,1)) = 0) ИЛИ
        (Число(Сред(ШК,1,1)) = 2) ИЛИ
 	      (Число(Сред(ШК,1,1)) = 5) ИЛИ
          (Число(Сред(ШК,1,1)) = 6) ИЛИ
          (Число(Сред(ШК,1,1)) = 7 )) Тогда
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,6,1)),"A");
  Иначе
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,6,1)),"B");
  КонецЕсли;
                                         //07
  Если ((Число(Сред(ШК,1,1)) = 0) ИЛИ
        (Число(Сред(ШК,1,1)) = 3) ИЛИ
 	      (Число(Сред(ШК,1,1)) = 6) ИЛИ
          (Число(Сред(ШК,1,1)) = 8) ИЛИ
          (Число(Сред(ШК,1,1)) = 9)) Тогда
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,7,1)),"A");
  Иначе
    СтрокаШК = СтрокаШК	+
    ПолучитьКомбинацию(Число(Сред(ШК,7,1)),"B");
  КонецЕсли;
      
  СтрокаШК = СтрокаШК	+
        	"-" +
        ПолучитьКомбинацию(Число(Сред(ШК,8,1)), "C") +  // 08
        ПолучитьКомбинацию(Число(Сред(ШК,9,1)), "C") +  // 09
        ПолучитьКомбинацию(Число(Сред(ШК,10,1)),"C") +  // 10
        ПолучитьКомбинацию(Число(Сред(ШК,11,1)),"C") +  // 11
        ПолучитьКомбинацию(Число(Сред(ШК,12,1)),"C") +  // 12
        ПолучитьКомбинацию(Число(Сред(ШК,13,1)),"C") +  // 13
        	"!";
      
  Возврат(СтрокаШК);
    
КонецФункции
//===============================================
Функция ПолучитьМасУслуг(Организация) Экспорт
	
	Мас = Новый Массив;
	Возврат Мас;
	Для а=1 по 4 Цикл
		п = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки["Услуга"+а]);
		Если ЗначениеЗаполнено(п) = Ложь ТОгда Продолжить; конецЕсли;
		Мас.Добавить(п);
	КонецЦикла;
	Возврат Мас;
	
КонецФункции
//===============================================
// Таб = Элемент формы таблица, в которой будут отображаться колонки
// СпецРек = Имя колонки ТАб, которая будет отображаться в случае выбора спец услуги
// Номенклатура = спец. услуга

Процедура СформироватьКолонкиУслуг(Таб,Номенклатура,Организация,СпецРек="Цена",ЕстьТарифы=Ложь) Экспорт
	
	//Если ЗначениеЗаполнено(Номенклатура) ТОгда
	//	Таб.Колонки["Цена"].Видимость = Истина;
	//	Таб.Колонки[СпецРек].Видимость = Истина;
	//	Для а=1 по 4 Цикл
	//		Таб.Колонки["Услуга"+а].Видимость = Ложь;
	//	КонецЦикла;
	//ИНаче
		Таб.Колонки["Цена"].Видимость = Ложь;
		Таб.Колонки[СпецРек].Видимость = Ложь;
		Мас = ПолучитьМасУслуг(Организация);
		
		ДЛя а=1 по Мас.Количество() Цикл
			Таб.Колонки["Услуга"+а].Видимость = Истина;
			Таб.Колонки["Услуга"+а].ТекстШапки = Мас[а-1].Наименование;
		КонецЦикла;
	//КонецЕСЛИ;
	
КонецПроцедуры
//===============================================
Функция ПолучитьПродолжительностьДняПоГрафику(Сотрудник,дата,Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикРаботы.ПродолжительностьДня  ДлинаРабДня
	               |ИЗ                                                    
	               |	РегистрСведений.СведенияОГрафиках.СрезПоследних(&Дт, ФизЛицо = &ФЛ) КАК СведенияОГрафиках
				   |WHERE ГрафикРаботы.ПродолжительностьДня<>0";
				   Запрос.УстановитьПараметр("ФЛ",Сотрудник.ФизЛицо);
				   Запрос.УстановитьПараметр("Дт",Дата);
				   Тбл =Запрос.Выполнить().Выгрузить();
				   Если Тбл.Количество()>0 Тогда
					   Возврат Тбл[0].ДлинаРабДня;
				   ИНаче
					   Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПродолжительностьРабДняПриСделке);
				   КонецЕСЛи;
				   
	
КонецФункции
//===============================================
Функция ПроверкаУволенных(Зн,Дт=Неопределено,Дт1=Неопределено,Отказ=ЛОжь) Экспорт
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.КонтрольНеработающихВодителей)=ЛОжь ТОгда Возврат Ложь КонецЕСли;
	
	Если ТИпЗнч(Зн)<>Тип("ТаблицаЗначений") ТОгда
		ДокТбл = Новый ТаблицаЗначений;
		ДокТбл.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.уатСотрудники"));
		ДокТбл.Колонки.Добавить("Начало",Новый ОписаниеТипов("Дата"));
		
		Если ТИпЗнч(Зн)<>Тип("Массив") ТОгда
			Мас = Новый Массив;
			Мас.Добавить(Зн);
		ИНАче
			Мас = Зн;
		КонецЕСЛИ;
		
		ДЛя каждого Эл из Мас Цикл
			Стр = ДокТбл.Добавить();
			Стр.Сотрудник = Эл;
			Стр.Начало = Дт;
			
			Стр = ДокТбл.Добавить();
			Стр.Сотрудник = Эл;
			Стр.Начало = Дт1;
		КонецЦикла;
	ИНАче
		ДокТбл = Зн;
	КонецЕСЛИ;

	
	
	Запрос = Новый Запрос;
	Запрос.Текст = " SELECT * INTO ВРТбл FROM &Тбл Тбл;
				|
				| SELECT
				|  Сотрудник,
				|  Сотрудник.ДатаПриема ДатаПриема,
				|  Сотрудник.ДатаУвольнения ДатаУвольнения,
				|  Т.НачДт,
				|  Т.КонДт,
				|  CASE WHEN Сотрудник.ДатаПриема = ДатаВремя(1,1,1) THEN 1
				|       WHEN Сотрудник.ДатаПриема > НачДт THEN 2
				|       ELSE 3 END Причина
				|
				| FROM 
				| (
				| SELECT 
				|    Сотрудник,
				|    MAX(Начало) КонДт,
				|    MIN(Начало) НачДт
				| FROM ВРТбл Т1
				| WHERE Т1.Сотрудник.Родитель <> Значение(Справочник.уатСотрудники.Сторонние)
				| GROUP BY Сотрудник
				| ) Т
				|
				|WHERE НачалоПериода(Сотрудник.ДатаПриема,День) > НачДт или Сотрудник.ДатаПриема = ДатаВремя(1,1,1)
				|  или (КонецПериода(Сотрудник.ДатаУвольнения,День) < КонДт и Сотрудник.ДатаУвольнения <> ДатаВремя(1,1,1))
				|   ";
	Запрос.УстановитьПараметр("Тбл",ДокТбл);
	ТБл = Запрос.Выполнить().Выгрузить();
	ошСтр="";
	Для каждого Стр из Тбл Цикл
		Если Стр.Причина = 1 ТОгда
			ошСтр = ошСтр + " У сотрудника "+Стр.Сотрудник+"  нет приказа о приеме!"+Символы.ПС;
		ИНачеЕсли Стр.Причина = 2 ТОгда
			ошСтр = ошСтр + "Сотрудник "+Стр.Сотрудник+" принят с "+Стр.ДатаПриема+" и на дату "+Стр.НачДТ+" не работает!"+Символы.ПС;
		ИНаче
			ошСтр = ошСтр + "Сотрудник "+Стр.Сотрудник+" уволен с "+Стр.ДатаУвольнения+" и на дату "+Стр.КонДТ+" не работает!"+Символы.ПС;
		КонецЕСЛИ;
		Отказ = Истина;
	КонецЦикла;
				
	Если ошСтр<>"" ТОгда
		#Если Клиент Тогда
			Предупреждение(ошСтр);
		#КонецЕсли	
	КонецЕСЛИ;
	
	Возврат ОТказ
	
КонецФункции
//===============================================
Функция ПроверкаРазрешенияНаВыпискуПЛ(Организация,Дт,ТС,Отказ=ЛОжь) Экспорт
	
	Если  уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПроверкаРазрешенияНаВыпискуПЛ)=ЛОжь ТОгда Возврат Ложь КонецЕСли;
	Если ЗначениеЗаполнено(ТС) = Ложь Тогда Возврат Ложь; КонецЕСЛИ;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМестонахождениеТССрезПоследних.Состояние Состояние,
	               |	уатМестонахождениеТССрезПоследних.Состояние.ЗапретитьВыпискуПЛ Инд
	               |ИЗ
	               |	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
	              Запрос.УстановитьПараметр("Дт",КонецДня(Дт));
	              Запрос.УстановитьПараметр("ТС",ТС);
				  ТБл = Запрос.Выполнить().Выгрузить();
				  Если Тбл.Количество()>0 Тогда
					  Если Тбл[0].Инд=Ложь Тогда
						  Возврат Ложь;
					  ИНаче
						  Сообщить("Автомобилю в состоянии <"+ТБл[0].Состояние+"> запрещено выписывать документ");
					  КонецеСЛИ;
					 ИНаче
						  Сообщить("Автомобилю не введеному в эксплуатацию запрещено выписывать документ");
				  КонецЕСЛИ;
				  
				  
	Отказ = Истина;			  
	Возврат Отказ;
	
КонецФункции
//===============================================
//Дт - дата нчала ремонта. В общем случае может не совпадать с датой документа
Функция ПроверкаРазрешенияНаВыпискуРЛ(Организация,ДатаДок,ДатаНачала,ДатаОкончания,ТС,Работы,Ссылка) Экспорт
	
	ЭтоНовый = Не ЗначениеЗаполнено(Ссылка); 
	
	//Нельзя добавлять новый документ в закрытый период
	Если ЭтоНовый Тогда
		Если глОбщий.ЕстьРасходГСМзаМесяц(ДатаДок,Ложь) ТОгда
			Сообщить("Вы пытаетесь создать новый документ в закрытом периоде. Запись ремонтного листа невозможна!!!");
			Возврат Истина;
		КонецЕСЛИ;
	ИначеЕсли НачалоМесяца(Ссылка.Дата) <> НачалоМесяца(ДатаДок) Тогда	
		Сообщить("Вы пытаетесь изменить дату документа на другой месяц. Запись ремонтного листа невозможна!!!");
		Возврат Истина;
	КонецЕсли;	
	
	//ФлагИзмененияДатыОкончания - "Истина" - если при редактировании была изменена "ДатаОкончания"
	ФлагИзмененияДатыОкончания = Не (ДатаОкончания = Ссылка.ДатаОкончания);
	ФлагИзмененияДатыНачала = Не (ДатаНачала = Ссылка.ДатаНачала);
	
	//Проверяем все последовательно
	
	//1. Указан ли вообще объект ремонта (машинка, прицеп или что-то другое) в документе
	Если Не ЗначениеЗаполнено(ТС)Тогда
		Сообщить("Вы не указали то, что собираетесь ремонтировать. Запись ремонтного листа невозможна!!!");
		Возврат Истина;
	КонецЕСЛИ;
	
	//2. Проверим дату начала ремонта
	Если ДатаНачала = Дата(1, 1, 1) Тогда // вообще не указана
		Сообщить("Вы не указали дату начала ремонта. Запись ремонтного листа невозможна!!!");
		Возврат Истина;
 	КонецЕсли;

	//3. Блок проверки по заполненному реквизиту "ДатаОкончания"
	Если (ДатаОкончания <> ДАТА(1, 1, 1, 0, 0, 0)) Тогда
		
		//1.Дата окончания ремонта не должна быть из закрытого (ГСМ) периода
		Если глОбщий.ЕстьРасходГСМзаМесяц(ДатаОкончания,Ложь) ТОгда
			Сообщить("Вы указали дату окончания ремонта из закрытого периода. Запись ремонтного листа невозможна!!!");
			Возврат Истина;
		КонецЕСЛИ;
		
		//2.Дата окончания ремонта не должна быть раньше 1 дня от текущей
		//Исключение только для роли "ЮралсДПК"
		РазницаВДняхДо = (НачалоДня(ТекущаяДата()) - НачалоДня(ДатаОкончания)) / (60 * 60 * 24);	
		Если ФлагИзмененияДатыОкончания = Истина И РазницаВДняхДо > 1 И Не РольДоступна("ЮралсДПК") Тогда
			Сообщить("Вы указали дату окончания ремонта ранее одного дня от текущей. Запись ремонтного листа невозможна!!!");
			Возврат Истина;
		КонецЕсли;
		
		//3. Дата окончания ремонта не должна быть позже 7 дней от текущей
		РазницаВДняхПосле = (НачалоДня(ДатаОкончания) - НачалоДня(ТекущаяДата())) / (60 * 60 * 24);	
		Если РазницаВДняхПосле > 7 Тогда
			Сообщить("Вы указали дату окончания ремонта далее семи дней от текущей. Запись ремонтного листа невозможна!!!");
			Возврат Истина;
		КонецЕсли;
		
		//4. Обязательно должны быть выбраны какие-то работы
		Если Работы.Количество() = 0 Тогда
			Сообщить("Вы ставите дату закрытия ремонтного листа без указания работ! Так нельзя! Изменения записаны не будут!");
			Возврат Истина;			  
		КонецЕсли;	
		
		//5. Во всех строках табличной части "Работы" должны быть указаны фактические работы
		КолФР = 0;
		Для каждого ХХХ Из Работы Цикл
			Если  ЗначениеЗаполнено(ХХХ.РаботаФакт) Тогда
				КолФР = КолФР + 1;
			КонецЕсли;	;
		КонецЦикла;	
		Если Работы.Количество() <> КолФР Тогда
			Сообщить("Вы не указали все фактически выполненные работы! Так нельзя! Изменения записаны не будут!");
			Возврат Истина;			  
		КонецЕсли;
		
	КонецЕсли;	
	
	//4. Проверим состояние самого ТС
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатМестонахождениеТССрезПоследних.ТС,
		|	уатМестонахождениеТССрезПоследних.Состояние,
		|	уатМестонахождениеТССрезПоследних.Состояние.ЗапретитьВыпискуПЛ КАК ЗапретитьВыпискуПЛ,
		|	уатМестонахождениеТССрезПоследних.Состояние.ЭтоПривленный КАК ФлагПривлеченный
		|ИЗ
		|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаЗапроса, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних";
		//|				И Организация = &Организация
	
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаНачала);
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЗапретитьВыпискуПЛ Или Выборка.ФлагПривлеченный Тогда //В карточке МестонахождениеТС стоит галка "ЗапретитьВыпискуПЛ" или "Привлеченный"
			Сообщить("Для указанного транспортного средства запрещена выписка путевых листов и других документов (Местонахождение ТС). Запись ремонтного листа невозможна!!!");
			Возврат Истина;
		КонецЕсли;	
	Иначе	// местонахождение ТС на дату начала ремонта не указано
		Сообщить("Для указанного транспортного средства не определено подразделение. Запись ремонтного листа невозможна!!!");
		Возврат Истина;
	КонецЕсли;
	
	//6. Контроль дублирования и незакрытых ремонтных листов по машинке
	//Выбираем только те ремонтные листы по текущей машинке, которые:
	//1. Не помечены на удаление
	//2. Этого же года что и текущий РЛ
	
	//3. Существует РЛ с такой же или более поздней датой начала
	//					ИЛИ
	//   Существует РЛ у которого датаначала раньше, но ДатаОкончания позже текущей даты начала
	//					ИЛИ
	//   Существует РЛ у которого датаначала раньше, но ПУСТАЯ ДатаОкончания
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатРемонтныйЛист.Ссылка
		|ИЗ
		|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
		|ГДЕ
		|	уатРемонтныйЛист.ТС = &ТС
		|	И уатРемонтныйЛист.Ссылка <> &Ссылка
		|	И уатРемонтныйЛист.ПометкаУдаления = ЛОЖЬ
		|	И ГОД(уатРемонтныйЛист.Дата) = ГОД(&ДатаДок)
		|	И &ФлагИзмененияДатыНачала = ИСТИНА
		|	И (уатРемонтныйЛист.ДатаНачала >= &ДатаНачала
		|			ИЛИ уатРемонтныйЛист.ДатаОкончания > &ДатаНачала
		|			ИЛИ уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДок", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ТС", ТС);
	Запрос.УстановитьПараметр("ФлагИзмененияДатыНачала", ФлагИзмененияДатыНачала);
	
	
	ТБл = Запрос.Выполнить().Выгрузить();
	Если Тбл.Количество() > 0 Тогда // В выборке есть незакрытые ремонтные листы текущего года
		ПереченьПЛ = "";
		Для Каждого ХХХ Из Тбл Цикл
			Причина = "Неизвестно";
			Если ХХХ.Ссылка.ДатаНачала >= НачалоДня(ДатаНачала) Тогда
				Причина = " - дата начала такая же или позже! (" + Строка(ХХХ.Ссылка.ДатаНачала) + ")";
			ИначеЕсли ХХХ.Ссылка.ДатаОкончания > НачалоДня(ДатаНачала) Тогда
				Причина = " - более поздняя дата окончания! (" + Строка(ХХХ.Ссылка.ДатаОкончания) + ")";
			ИначеЕсли ХХХ.Ссылка.ДатаОкончания = Дата(1,1,1)  Тогда
				Причина = " - незакрытый ремонтный лист!";
			КонецЕсли;	
			ПереченьПЛ = ПереченьПЛ + Строка(ХХХ.Ссылка) + Причина + Символы.ПС;
		КонецЦикла;	
		Сообщить("По автомобилю " + ТС + " сущестуют незакрытые / перекрестные ремонтные листы текущего года:" + Символы.ПС + ПереченьПЛ + "Выписка еще одного ремонтного листа невозможна!!!");
		Возврат Истина;			  
	КонецЕСЛИ;
	
	Возврат Ложь;
КонецФункции
//===============================================
Процедура УатМеханикДействие() Экспорт
	Форма = Документы.уатЗаправкаГСМ.ПолучитьФорму("Форма");
	Форма.Открыть();
КонецПроцедуры
//===============================================

Функция КэшПрейскурантаЗапрос(ДтДок,ТекСтрока,ТранспортноеСредство,ТипТС=Неопределено,ОднуСтроку=Истина,Прицеп=Неопределено,Контрагент = Неопределено,ЦехКонтрагента = Неопределено) Экспорт
	
	врТБл="";
	Запрос = глОбщий.ИерархияСправочника("ЦехаКонтрагента",врТБл);
	
	
	
	Запрос.Текст = " //Соберем прейскурант
	|SELECT	TOP 1
	|	Рег.Период,
	|	Рег.Цена    Тариф,
	|	Рег.ЦенаКм  ТарифКм,
	|	Рег.Услуга1 Тариф1,
	|	Рег.Услуга2 Тариф2,
	|	Рег.Услуга3 Тариф3,
	|	Рег.Услуга4 Тариф4,
	|	Рег.Услуга5 Тариф5,
	|	Рег.Услуга6 Тариф6,
	
	|	Рег.Номенклатура1 Услуга1,
	|	Рег.Номенклатура2 Услуга2,
	|	Рег.Номенклатура3 Услуга3,
	|	Рег.Номенклатура4 Услуга4,
	|	Рег.Номенклатура5 Услуга5,
	|	Рег.Номенклатура6 Услуга6,
	
	|	Рег.Номенклатура1.БазоваяЕдиницаИзмерения ЕдИзм1,
	|	Рег.Номенклатура2.БазоваяЕдиницаИзмерения ЕдИзм2,
	|	Рег.Номенклатура3.БазоваяЕдиницаИзмерения ЕдИзм3,
	|	Рег.Номенклатура4.БазоваяЕдиницаИзмерения ЕдИзм4,
	|	Рег.Номенклатура5.БазоваяЕдиницаИзмерения ЕдИзм5,
	|	Рег.Номенклатура6.БазоваяЕдиницаИзмерения ЕдИзм6,
	
	|	Рег.Номенклатура1.СпособЗаполненияУслугиПЛ Способ1,
	|	Рег.Номенклатура2.СпособЗаполненияУслугиПЛ Способ2,
	|	Рег.Номенклатура3.СпособЗаполненияУслугиПЛ Способ3,
	|	Рег.Номенклатура4.СпособЗаполненияУслугиПЛ Способ4,
	|	Рег.Номенклатура5.СпособЗаполненияУслугиПЛ Способ5,
	|	Рег.Номенклатура6.СпособЗаполненияУслугиПЛ Способ6,
	
	|	CASE WHEN Рег.Номенклатура1.ВидЧасовОплатыВодителю=0 THEN истина ELSE Ложь END ОсновныеЧасы1,
	|	CASE WHEN Рег.Номенклатура2.ВидЧасовОплатыВодителю=0 THEN истина ELSE Ложь END ОсновныеЧасы2,
	|	CASE WHEN Рег.Номенклатура3.ВидЧасовОплатыВодителю=0 THEN истина ELSE Ложь END ОсновныеЧасы3,
	|	CASE WHEN Рег.Номенклатура4.ВидЧасовОплатыВодителю=0 THEN истина ELSE Ложь END ОсновныеЧасы4,
	|	CASE WHEN Рег.Номенклатура5.ВидЧасовОплатыВодителю=0 THEN истина ELSE Ложь END ОсновныеЧасы5,
	|	CASE WHEN Рег.Номенклатура6.ВидЧасовОплатыВодителю=0 THEN истина ELSE Ложь END ОсновныеЧасы6,
	
	|	CASE WHEN Рег.Номенклатура1.ВидЧасовОплатыВодителю=1 THEN истина ELSE Ложь END РзрЧасы1,
	|	CASE WHEN Рег.Номенклатура2.ВидЧасовОплатыВодителю=1 THEN истина ELSE Ложь END РзрЧасы2,
	|	CASE WHEN Рег.Номенклатура3.ВидЧасовОплатыВодителю=1 THEN истина ELSE Ложь END РзрЧасы3,
	|	CASE WHEN Рег.Номенклатура4.ВидЧасовОплатыВодителю=1 THEN истина ELSE Ложь END РзрЧасы4,
	|	CASE WHEN Рег.Номенклатура5.ВидЧасовОплатыВодителю=1 THEN истина ELSE Ложь END РзрЧасы5,
	|	CASE WHEN Рег.Номенклатура6.ВидЧасовОплатыВодителю=1 THEN истина ELSE Ложь END РзрЧасы6,
	
	//+Lexx по тех.ожиданию	
	|	CASE WHEN Рег.Номенклатура1.ВидЧасовОплатыВодителю=2 THEN истина ELSE Ложь END ТехОжЧасы1,
	|	CASE WHEN Рег.Номенклатура2.ВидЧасовОплатыВодителю=2 THEN истина ELSE Ложь END ТехОжЧасы2,
	|	CASE WHEN Рег.Номенклатура3.ВидЧасовОплатыВодителю=2 THEN истина ELSE Ложь END ТехОжЧасы3,
	|	CASE WHEN Рег.Номенклатура4.ВидЧасовОплатыВодителю=2 THEN истина ELSE Ложь END ТехОжЧасы4,
	|	CASE WHEN Рег.Номенклатура5.ВидЧасовОплатыВодителю=2 THEN истина ELSE Ложь END ТехОжЧасы5,
	|	CASE WHEN Рег.Номенклатура6.ВидЧасовОплатыВодителю=2 THEN истина ELSE Ложь END ТехОжЧасы6,

	
	|	Рег.Контрагент,
	|	Рег.ЦехКонтрагента,
	|	Рег.Номенклатура,
	|	Рег.Модель,
	|	Рег.Договор,
	|	Рег.НомерСтрокиДокумента,
	|	Рег.Регистратор ПРейскурант
	|	
	|FROM 	
	|	РегистрСведений.уатПрейскурантыТС.СрезПоследних(&Дт,   Модель         = &ТС 
	|    												   	OR Модель         = &Мод	
	|    													OR Модель         = &Тип	
	|    													OR Модель         в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка) ))  КАК Рег
	|WHERE
	|      (Контрагент     = &КА  OR Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
	|  and (КонтрагентГенЗаказчик = Значение(Справочник.Контрагенты.ПустаяСсылка))
	|  and (Номенклатура   = &Ном OR Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка) OR &ОднуСтроку = Ложь) 
	|
	|  and (ЦехКонтрагента в (&МасЦех)  
	|    OR ЦехКонтрагента = &Мст  
	|    OR ЦехКонтрагента = &МстРод  
	|    OR ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка))   )  
	|
	|  AND (Модель         = &ТС 
	|    OR Модель         = &Мод	
	|    OR Модель         = &Тип	
	|    OR Модель         в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка) ))  
	|	
	|ORDER BY	
	
	
	|	  CASE WHEN  Контрагент = &КА           THEN 1000 ELSE 0 END
	
	|	+ CASE WHEN  ЦехКонтрагента = &Цех      THEN 400 
	|	       WHEN  ЦехКонтрагента = &ЦехРод   THEN 350 
	|	       WHEN  ЦехКонтрагента в (&МасЦех) THEN 300 
	|	       WHEN  ЦехКонтрагента = &Мст      THEN 200 
	|	       WHEN  ЦехКонтрагента = &МстРод   THEN 100 ELSE 0 END
	
	|	+ CASE WHEN  Номенклатура   = &Ном      THEN 10 ELSE 0 END
	
	|	+ CASE WHEN  Модель = &ТС      THEN 3
	|	       WHEN  Модель = &Мод     THEN 2 
	|	       WHEN  Модель  = &Тип    THEN 1 ELSE 0 END DESC
	
	|	
	|";
	
	Если Контрагент<>Неопределено 
		и ЗначениеЗаполнено(Контрагент) ТОгда
		Запрос.УстановитьПараметр("КА",Контрагент);
		Запрос.УстановитьПараметр("Цех",ЦехКонтрагента);
		Запрос.УстановитьПараметр("ЦехРод",ЦехКонтрагента);
		
	ИНаче
		Запрос.УстановитьПараметр("КА",ТекСтрока.Контрагент);
		Запрос.УстановитьПараметр("Цех",ТекСтрока.ЦехКонтрагента);
		
		Если ЗначениеЗаполнено(ТекСтрока.ЦехКонтрагента.Родитель) Тогда
			Запрос.УстановитьПараметр("ЦехРод",ТекСтрока.ЦехКонтрагента.Родитель);
		ИНаче
			Запрос.УстановитьПараметр("ЦехРод",ТекСтрока.ЦехКонтрагента);
		КонецЕСЛИ;
	КонецЕСЛИ;
	
	Мас = Новый Массив;
	Мас.Добавить(ТекСтрока.ЦехКонтрагента);
	пЦех = ТекСтрока.ЦехКонтрагента.родитель; 
	Пока пЦех.Пустая()=Ложь Цикл
		Мас.Добавить(пЦех);
		пЦех = пЦех.родитель;
	КонецЦиклА;
	Запрос.УстановитьПараметр("МасЦех",Мас);
	
	Если ЗначениеЗаполнено(ТекСтрока.Месторождение) Тогда
		ТекМесторождение = ТекСтрока.Месторождение;
	ИНаче
		ТекМесторождение = ТекСтрока.ЦехКонтрагента.Месторождение;
	КонецЕСли;
	Запрос.УстановитьПараметр("Мст",ТекМесторождение);
	Если ЗначениеЗаполнено(ТекМесторождение.Родитель) Тогда
		Запрос.УстановитьПараметр("МстРод",ТекМесторождение.Родитель);
	ИНаче
		Запрос.УстановитьПараметр("МстРод",ТекМесторождение);
	КонецЕСЛИ;
	
	Запрос.УстановитьПараметр("Ном",ТекСтрока.Номенклатура);
	Запрос.УстановитьПараметр("ТС",ТранспортноеСредство);
	Запрос.УстановитьПараметр("Мод",ТранспортноеСредство.Модель);
	Если ТипТС = Неопределено или ТипТС = Справочники.уатТипыТС.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("Тип",ТранспортноеСредство.ТипТС);
	ИНаче
		Запрос.УстановитьПараметр("Тип",ТипТС);
	КонецеСЛИ;
	Запрос.УстановитьПараметр("Дт",КонецДня(ДтДок));
	Запрос.УстановитьПараметр("ОднуСтроку",ОднуСтроку);
	
	Если ОднуСтроку = Ложь ТОгда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"TOP 1","");
	КонецЕСЛИ;
	
	Тбл = Запрос.Выполнить().Выгрузить();
	
	//Заплатка для расчета прицепов ПЕРЕПИСАТЬ!
	Если Тбл.Количество()=0 
		и (Прицеп<>Неопределено и Прицеп <> Справочники.уатТС.ПустаяСсылка())Тогда
		Возврат КэшПрейскурантаЗапрос(ДтДок,ТекСтрока,Прицеп,ТипТС,ОднуСтроку);
	КонецесЛИ;
	
	Возврат Тбл;
	
	
КонецФункции


Функция РасчетПРейскурантаСубподрядчика(Запрос,СсылкаНаОбъект) Экспорт
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СсылкаНаОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.РассчитыватьСубподрядВДекРеестре)=Ложь Тогда
		//Экономим время, сумма будет считать вдокументе реестр услуг по субподряду 
		ТекстЗапроса ="
		|		
		|SELECT 
		|   Т1.ПутевойЛист,
		|   Т1.ИдСтроки,
		|  0   Сумма,
		|  0 СуммаКм,
		|  0  Сумма1,
		|  0  Сумма2,
		|  0  Сумма3,
		|  0  Сумма4,
		|  0  Сумма5,
		|  0  Сумма6
		| INTO врСуб	
		|		
		| FROM Документ.РеестрУслуг.Услуги Т1
		|	 WHERE Т1.ссылка = &сс и 1=0		
		|	";	
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("сс",СсылкаНаОбъект.ссылка);	
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецеСЛИ;
	
	
	
	Запрос.УстановитьПараметр("сс",СсылкаНаОбъект.ссылка);	
	Запрос.УстановитьПараметр("Дт",КонецДня(СсылкаНаОбъект.Дата));
	
	Запрос.УстановитьПараметр("Дт1",КонецМесяца(СсылкаНаОбъект.Дата));
	Запрос.УстановитьПараметр("ДтДляПодр",КонецДня(СсылкаНаОбъект.Дата - 60 *3600*24));
	
	ТекстЗапроса ="
	|	SELECT DISTINCT ПутевойЛист.ТранспортноеСредство ТС
	|	  INTO врТбТС
	|	  FROM Документ.РеестрУслуг.Услуги Д
	|	 WHERE Д.ссылка = &сс
	|	
|	
|;	
|ВЫБРАТЬ
|		уатМестонахождениеТССрезПоследних.ТС,
|		уатМестонахождениеТССрезПоследних.Подразделение пПодразделение,
|		уатМестонахождениеТССрезПоследних.Состояние,
|		уатМестонахождениеТССрезПоследних.Владелец КаВладелец,
|		НачалоПериода(уатМестонахождениеТССрезПоследних.Период,День) Период
|		INTO ВРТблС
|	ИЗ
|		РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДтДляПодр,ТС в (SELECT ТС FROM врТбТС Т) ) КАК уатМестонахождениеТССрезПоследних
|		
|	UNION ALL
|		
|	ВЫБРАТЬ
|		уатМестонахождениеТС.ТС,
|		уатМестонахождениеТС.Подразделение,
|		уатМестонахождениеТС.Состояние,
|		уатМестонахождениеТС.Владелец,
|		НачалоПериода(уатМестонахождениеТС.Период,День)
|	ИЗ
|		РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
|		WHERE Период > &ДтДляПодр 
|		    и Период < &Дт1
|		  and ТС в (SELECT ТС FROM врТбТС Т)
|	;
|		
|	SELECT  DISTINCT
|		Тбл.ТС,
|		Тбл.пПодразделение,
|		Тбл.Состояние,
|		Тбл.КаВладелец,
|		Тбл.Период,
|		MIN(ISNULL(Т.Период,&Дт1)) ПериодКон,
|		Тбл.Период изначДт
|	INTO ВРТблС1	
|	FROM ВРТблС Тбл 
|	LEFT OUTER JOIN ВРТблС Т ON Т.ТС = Тбл.ТС и Т.Период > Тбл.Период
|	GROUP BY		
|		Тбл.ТС,
|		Тбл.пПодразделение,
|		Тбл.Состояние,
|		Тбл.КаВладелец,
|		Тбл.Период
|	;	
|	SELECT DISTINCT
|		Тбл.ТС,
|		Тбл.пПодразделение,
|		Тбл.Состояние,
|		Тбл.КаВладелец Владелец,
|		Тбл.Период,
|		Тбл.ПериодКон
|	INTo ВРПодр
|	FROM ВРТблС1 Тбл
|	INNER JOIN (SELECT ТС,Период,MAX(изначДт) изНачДт FROM ВРТблС1 Т1 GROUP BY ТС,Период) Т ON Т.ТС = Тбл.ТС и Т.Период = ТБл.Период и Т.ИзначДт = Тбл.ИзначДт
|	
|	;
|	////////////////////////////////////////////////////
|
|
|
|	
|	
	|	
	| ВЫБРАТЬ
	|	Док.ТС ТранспортноеСредство,
	|	Док.ТС Модель,
	|	Док.ТС.ТипТС ТипТС,
	|	ТблПодр.Владелец Контрагент,
	|	Док.ссылка.Контрагент Заказчик,
	|	Док.ЦехКонтрагента,
	|	Док.ЦехКонтрагента.Родитель РодЦех,
	|	Док.ЦехКонтрагента.МЕсторождение Месторождение,
	|	Док.ЦехКонтрагента.МЕсторождение.РОдитель РодМст,
	|	Док.ПутевойЛист,
	|	Док.ПутевойЛист.ДатаВыезда ДатаВыезда,
	|	Док.Количество Количество,
	|	Док.КоличествоКм КоличествоКм,
	|	Док.Количество1,
	|	Док.Количество2,
	|	Док.Количество3,
	|	Док.Количество4,
	|	Док.Количество5,
	|	Док.Количество6,
	|	Док.идСтроки идСтроки,
	|	Док.Сумма + Док.СуммаКм + Док.Сумма1 + Док.Сумма2 + Док.Сумма3 + Док.Сумма4 ДокСумма,
	|	Док.Номенклатура
	|  INTO ВрДокСуб
	|ИЗ
	|	Документ.РеестрУслуг.Услуги Док  
	|  INNER JOIN  ВРПодр КАК ТблПодр  ON ТблПодр.ТС = Док.ТС
	|                                   и Док.ПутевойЛист.ДатаВыезда >= ТблПодр.Период 
	|									и Док.ПутевойЛист.ДатаВыезда <  ТблПодр.ПериодКон 
	|
	| 	WHERE Док.ссылка = &сс  
	|     AND ТблПодр.Состояние = Значение(Справочник.уатСостояниеТС.Привлеченный)
	
	|;
	
//Соберем прейскурант
|SELECT	
|	Рег.Период,
|	Рег.Цена    Тариф,
|	Рег.ЦенаКм  ТарифКм,
|	Рег.Услуга1 Тариф1,
|	Рег.Услуга2 Тариф2,
|	Рег.Услуга3 Тариф3,
|	Рег.Услуга4 Тариф4,
|	Рег.Услуга5 Тариф5,
|	Рег.Услуга6 Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.Регистратор ПРейскурант
|	INTO ВрРег0Суб
|FROM 	
|	РегистрСведений.уатПрейскурантыТССубПодряд  КАК Рег
|WHERE
|      (Контрагент     в (SELECT DISTINCT Контрагент     Из ВрДокСуб как тбДок1) OR Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
|  and (Номенклатура   в (SELECT DISTINCT Номенклатура   Из ВрДокСуб как тбДок3) OR Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)) 
|
|  and (ЦехКонтрагента в (SELECT DISTINCT ЦехКонтрагента Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT РодЦех Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT Месторождение Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT Заказчик Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT РодМст Из ВрДокСуб как тбДок2)  
|    OR ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка),Значение(Справочник.Контрагенты.ПустаяСсылка))   )  
|
|  AND (Модель         в (SELECT DISTINCT ТранспортноеСредство Из ВрДокСуб как тбДок4 UNION ALL 
|                         SELECT DISTINCT Модель               Из ВрДокСуб как тбДок6 UNION ALL
|                         SELECT DISTINCT ТипТС                Из ВрДокСуб как тбДок7 
|                         )
|    OR Модель         в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка) ))  
| 
|;                          
|SELECT	
|	MIN(ISNULL(Рег0.Период,&Дт1)) ПериодКон,
|	Рег.Период,
|	Рег.Период ИзначДт,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.ПРейскурант
|INTO ВрРег1Суб	
|FROM ВрРег0Суб Рег	
|LEFT OUTER JOIN ВрРег0Суб Рег0 ON Рег.Период < Рег0.Период	
|	                     и Рег.Контрагент = Рег0.Контрагент
|	                     и Рег.ЦехКонтрагента = Рег0.ЦехКонтрагента
|	                     и Рег.Номенклатура = Рег0.Номенклатура
|	                     и Рег.Модель = Рег0.Модель
|GROUP BY	
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.ПРейскурант
|	
|;	
	
|SELECT	
|	Рег.ПериодКон,
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.Процент,
|	Рег.ПРейскурант
|INTO ВрРегСуб	
|FROM ВрРег1Суб Рег	
|INNER JOIN (SELECT Период,Контрагент,ЦехКонтрагента,Номенклатура,Модель,MAX(ИзначДт) ИзначДт  FROM ВрРег1Суб Рг
|																							   GROUP BY Период,Контрагент,ЦехКонтрагента,Номенклатура,Модель 
|           ) Рег0 ON Рег.Период = Рег0.Период	
|	                и Рег.ИзначДт = Рег0.ИзначДт
|	                и Рег.Контрагент = Рег0.Контрагент
|	                и Рег.ЦехКонтрагента = Рег0.ЦехКонтрагента
|	                и Рег.Номенклатура = Рег0.Номенклатура
|	                и Рег.Модель = Рег0.Модель
|	
|;

//Соеденим с документом
|/////////////	
|	ВЫБРАТЬ
|   Док.ПутевойЛист,
|   Док.ИдСтроки,

|   Док.Количество,
|   Док.КоличествоКм,
|   Док.Количество1,
|   Док.Количество2,
|   Док.Количество3,
|   Док.Количество4,
|   Док.Количество5,
|   Док.Количество6,

|   Док.ДокСумма,

|	ISNULL(Рег.Процент,0) Процент,
|	ISNULL(Рег.Тариф,0) Тариф,
|	ISNULL(Рег.ТарифКм,0) ТарифКм,
|	ISNULL(Рег.Тариф1,0)  Тариф1,
|	ISNULL(Рег.Тариф2,0)  Тариф2,
|	ISNULL(Рег.Тариф3,0)  Тариф3,
|	ISNULL(Рег.Тариф4,0)  Тариф4,
|	ISNULL(Рег.Тариф5,0)  Тариф5,
|	ISNULL(Рег.Тариф6,0)  Тариф6,
|	  CASE WHEN  Док.Контрагент = Рег.Контрагент              THEN 1000 ELSE 0 END

|	+ CASE WHEN  Док.ЦехКонтрагента = Рег.ЦехКонтрагента      THEN 400 
|	       WHEN  Док.РодЦех         = Рег.ЦехКонтрагента      THEN 300 
|	       WHEN  Док.Заказчик       = Рег.ЦехКонтрагента      THEN 250 
|	       WHEN  Док.Месторождение  = Рег.ЦехКонтрагента      THEN 200 
|	       WHEN  Док.РодМст         = Рег.ЦехКонтрагента      THEN 100 ELSE 0 END

|	+ CASE WHEN  Док.Номенклатура = Рег.Номенклатура          THEN 10 ELSE 0 END

|	+ CASE WHEN  Док.ТранспортноеСредство = Рег.Модель        THEN 3
|	       WHEN  Док.Модель = Рег.Модель                      THEN 2 
|	       WHEN  Док.ТипТС  = Рег.Модель                      THEN 1 ELSE 0 END Инд
|	
|	INTO ВрТблСуб
|ИЗ
|	 ВрДокСуб КАК Док
|	
|LEFT OUTER JOIN ВрРегСуб Рег	ПО  (Рег.Контрагент = Док.Контрагент OR Рег.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
|       and (Рег.Номенклатура = Док.Номенклатура OR Рег.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)) 
|	
|       and (Рег.ЦехКонтрагента = Док.ЦехКонтрагента 
|	        OR Рег.ЦехКонтрагента = Док.РодЦех
|	        OR Рег.ЦехКонтрагента = Док.Месторождение
|	        OR Рег.ЦехКонтрагента = Док.Заказчик
|	        OR Рег.ЦехКонтрагента = Док.РодМст
|    		OR Рег.ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка),Значение(Справочник.Контрагенты.ПустаяСсылка))   )  
|	
|       and (Рег.Модель   = Док.ТранспортноеСредство 
|			OR Рег.Модель = Док.Модель 
|			OR Рег.Модель = Док.ТипТС 
|    		OR Рег.Модель в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка)) )  
|	
|	    and (Рег.Период <= Док.ДатаВыезда и Рег.ПериодКон > Док.ДатаВыезда)
|	
| 
|;
|SELECT
|   Т1.ПутевойЛист,
|   Т1.ИдСтроки,

|  Тариф  * Количество + Выразить(ДокСумма*Процент/100 как Число(17,2))  Сумма,
|  ТарифКм* КоличествоКм СуммаКм,
|  Тариф1 * Количество1  Сумма1,
|  Тариф2 * Количество2  Сумма2,
|  Тариф3 * Количество3  Сумма3,
|  Тариф4 * Количество4  Сумма4,
|  Тариф5 * Количество5  Сумма5,
|  Тариф6 * Количество6  Сумма6
|
|INTO врСуб
|
|FROM ВрТблСуб Т1
|INNER JOIN (SELECT ПутевойЛист,ИдСтроки, Max(Инд) Инд FROM ВрТблСуб Т2 GROUP BY ПутевойЛист,ИдСтроки) Т2 ON Т2.ПутевойЛист = Т1.ПутевойЛист 
|																					  					и Т2.ИдСтроки = Т1.ИдСтроки 
|																					  					и Т2.ИНд = Т1.ИНд
|";
Запрос.Текст = ТекстЗапроса;

 Запрос.Выполнить();
	
Возврат Истина;

КонецФункции

Функция РасчетПРейскуранта(СсылкаНаОбъект,КонтрагентГенЗаказчик=Неопределено,МасПачка=Неопределено) Экспорт
	
	
	врТБл="";
	Запрос = глОбщий.ИерархияСправочника("ЦехаКонтрагента",врТБл);
	
	СтрФлтДог="";
	
	Запрос.УстановитьПараметр("МесторождениеИзЦеха",уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СсылкаНаОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьМестрождениеДляРасчетаТОлькоИзЦеха));
	
	Если ТИПЗНч(ССылкаНаОбъект) = Тип("ДокументСсылка.уатПутевойЛист") ТОгда
		
		Запрос.УстановитьПараметр("Ном",Справочники.Номенклатура.ПустаяСсылка());
		Запрос.УстановитьПараметр("Дт",КонецДня(СсылкаНаОбъект.Дата));
		Запрос.УстановитьПараметр("сс",СсылкаНаОбъект);
		
		ТекстЗапроса = "
		|	
		| ВЫБРАТЬ
		|	ДокШапка.ТранспортноеСредство ТранспортноеСредство,
		|	ДокШапка.ТранспортноеСредство.Модель Модель,
		|	CASE WHEN ДокШапка.ТИПТС = Значение(Справочник.уатТипыТС.Пустаяссылка) THEN ДокШапка.ТранспортноеСредство.ТипТС ELSE ДокШапка.ТИПТС END ТипТС,
		|	ДокПЛ.Контрагент,
		|	Значение(Справочник.Контрагенты.ПустаяСсылка) КонтрагентГенЗаказчик,
		|	ДокПЛ.ЦехКонтрагента,
		|	ДокПЛ.ЦехКонтрагента.Родитель РодЦех,
		|	CASE WHEN  ДокПл.Месторождение = Значение(Справочник.Месторождения.ПустаяСсылка) или &МесторождениеИзЦеха = Истина THEN ДокПЛ.ЦехКонтрагента.МЕсторождение ELSE ДокПл.Месторождение END Месторождение,
		|	CASE WHEN  ДокПл.Месторождение = Значение(Справочник.Месторождения.ПустаяСсылка) или &МесторождениеИзЦеха = Истина THEN ДокПЛ.ЦехКонтрагента.МЕсторождение.Родитель ELSE ДокПл.Месторождение.Родитель END РодМст,
		|	ДокПЛ.Ссылка ПутевойЛист,
		|	ДокШапка.ДатаВыезда ДатаВыезда,
		|	ДокПЛ.КоличествоЧасов,
		|	ДокПЛ.Услуга1 Количество1,
		|	ДокПЛ.Услуга2 Количество2,
		|	ДокПЛ.Услуга3 Количество3,
		|	ДокПЛ.Услуга4 Количество4,
		|	ДокПЛ.Услуга5 Количество5,
		|	ДокПЛ.Услуга6 Количество6,
		|	1 Талон,
		|	ДокПЛ.идСтроки идСтроки,
		|	ДокПЛ.КоличествоКмСпец5 ПробегОбщий,
		|	CASE WHEN ДокШапка.ТранспортноеСредство.Модель.НаличиеСпидометра = Ложь THEN 0 ELSE ДокПЛ.КоличествоКмПорожний END КоличествоКмПорожний,
		|	ДокПЛ.КоличествоКмГруз,
		|	ДокПЛ.Объем,
		|	ДокПЛ.Номенклатура,
		|	ДокПЛ.КоличествоТонн,	
		|	ДокШапка.НомерПачки,
		|	ISNULL(ДокПрц.ТС,Значение(Справочник.уатТС.ПустаяСсылка)) Прицеп,	
		|	ISNULL(ДокПрц.ТС.Модель,Значение(Справочник.уатМоделиТС.ПустаяСсылка)) МодельПрц,
		|	ISNULL(ДокПрц.ТС.типТС,Значение(Справочник.уатТипыТС.ПустаяСсылка)) ТипПрц	
		|  
		|  INTO ВрДок
		|ИЗ
		|	Документ.уатПутевойЛист КАК ДокШапка
		|   INNER JOIN Документ.уатПутевойЛист.Задание как ДокПЛ ON ДокПЛ.Ссылка = ДокШапка.Ссылка 
		|	                                                    and ДокШапка.Ссылка = &сс
		
		|   LEFT OUTER JOIN Документ.уатПутевойЛист.Прицепы как ДокПрц ON ДокПрц.Ссылка = ДокШапка.Ссылка 
		|	                                                    and ДокПрц.НомерСтроки = 1
		|	
		|	
		|UNION ALL	
		|	
		| ВЫБРАТЬ
		|	ДокШапка.ТранспортноеСредство ТранспортноеСредство,
		|	ДокШапка.ТранспортноеСредство.Модель Модель,
		|	CASE WHEN ДокШапка.ТИПТС = Значение(Справочник.уатТипыТС.Пустаяссылка) THEN ДокШапка.ТранспортноеСредство.ТипТС ELSE ДокШапка.ТИПТС END ТипТС,
		|	ДокШапка.Организация,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ДокПЛ.Ссылка ПутевойЛист,
		|	ДокШапка.ДатаВыезда ДатаВыезда,
		|	ДокПЛ.КоличествоЧасов,
		|	0 Количество1,
		|	0 Количество2,
		|	0 Количество3,
		|	0 Количество4,
		|	0 Количество5,
		|	0 Количество6,
		|	1 Талон,
		|	ДокПЛ.идСтроки идСтроки,
		|	ДокПЛ.КоличествоКмСпец5 ПробегОбщий,
		|	ДокПЛ.КоличествоКмПорожний,
		|	ДокПЛ.КоличествоКмГруз,
		|	ДокПЛ.Объем,
		|	ДокПЛ.Номенклатура,
		|	ДокПЛ.КоличествоТонн,	
		|	ДокШапка.НомерПачки,
		|	ISNULL(ДокПрц.ТС,Значение(Справочник.уатТС.ПустаяСсылка)) Прицеп,	
		|	ISNULL(ДокПрц.ТС.Модель,Значение(Справочник.уатМоделиТС.ПустаяСсылка)) МодельПрц,
		|	ISNULL(ДокПрц.ТС.типТС,Значение(Справочник.уатТипыТС.ПустаяСсылка)) ТипПрц	
		|  
		|ИЗ
		|	Документ.уатПутевойЛист КАК ДокШапка
		|   INNER JOIN Документ.уатПутевойЛист.Работа как ДокПЛ ON ДокПЛ.Ссылка = ДокШапка.Ссылка 
		|	                                                    and ДокШапка.Ссылка = &сс
		
		|   LEFT OUTER JOIN Документ.уатПутевойЛист.Прицепы как ДокПрц ON ДокПрц.Ссылка = ДокШапка.Ссылка 
		|	                                                    and ДокПрц.НомерСтроки = 1
		|;	
		|		

		|";
		
	ИНаче // Реестр услуг
		
		//Субподряд
		//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		//РасчетПРейскурантаСубподрядчика(Запрос,СсылкаНаОбъект);
		
		
		СтрФлтЦех="";
		Если ЗначениеЗаполнено(СсылкаНаОбъект.ЦО) Тогда
			Если СсылкаНаОбъект.ЦО.ЭтоГруппа Тогда
				СтрФлтЦех = " и ДокПЛ.ЦехКонтрагента В ИЕРАРХИИ (&Цех)";
			ИНаче
				СтрФлтЦех = " и ДокПЛ.ЦехКонтрагента = &Цех";
			КонецЕСЛИ;
		КонецЕСЛИ;
		
		СтрФлтПачка = "";
		Если МасПачка <> Неопределено Тогда
			СтрФлтПачка = " и ДокПлШапка.НомерПачки в (&МасПачка)";
			Запрос.УстановитьПараметр("МасПачка",МасПачка);
		КонецеСЛИ;
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект.ТипТС) Тогда
			Если СсылкаНаОбъект.ТипТС.ЭтоГруппа Тогда
				СтрФлтРег = " и ПутевойЛист.ТранспортноеСредство.ТипТС В ИЕРАРХИИ (&ТипТС)";
			ИНаче
				СтрФлтРег = " и ПутевойЛист.ТранспортноеСредство.ТипТС = &ТипТС";
			КонецЕСЛИ;
		КонецЕСЛИ;
		
		Если ЗначениеЗаполнено(Константы.ксПериодЗакрытияРеестров.Получить()) Тогда
			//СтрФлтЦех = СтрФлтЦех + " и ПутевойЛист.ДатаЗакрытия < &Дт";
		КонецЕСЛИ;
		Если ЗначениеЗаполнено(СсылкаНаОбъект.Подразделение) ТОгда
			Если СсылкаНаОбъект.ПодрВидСравнения = false ТОгда
				СтрФлтПодр =  "INNER JOIN РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт) РегМст ON РегМст.ТС = ДокПЛ.Ссылка.ТранспортноеСредство 
				|																              И РегМст.Подразделение = &Подр ";
			ИНаче
				СтрФлтПодр =  "INNER JOIN РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт) РегМст ON РегМст.ТС = ДокПЛ.Ссылка.ТранспортноеСредство 
				|																              И  РегМст.Подразделение <> &Подр ";
			КонецЕслИ;
			
			Запрос.УстановитьПараметр("Подр",СсылкаНаОбъект.Подразделение);
		КонецеСЛИ;
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект.Договор) ТОгда
			СтрФлтДог = " WHERE (Т1.Договор = &Дог или Т1.Договор = Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))";
			Запрос.УстановитьПараметр("Дог",СсылкаНаОбъект.Договор);
		КонецеСЛИ;
		
		Запрос.УстановитьПараметр("Цех",СсылкаНаОбъект.ЦО);
		Запрос.УстановитьПараметр("ТипТС",СсылкаНаОбъект.ТипТС);
		//Запрос.УстановитьПараметр("Ном",СсылкаНаОбъект.Номенклатура);
		Запрос.УстановитьПараметр("Дт",КонецДня(СсылкаНаОбъект.Дата));
		Запрос.УстановитьПараметр("КА",СсылкаНаОбъект.Контрагент);
		Если ЗначениеЗаполнено(КонтрагентГенЗаказчик) ТОгда
			Запрос.УстановитьПараметр("КАГенЗкз",КонтрагентГенЗаказчик);
		ИНаче
			Запрос.УстановитьПараметр("КАГенЗкз",Справочники.Контрагенты.ПустаяСсылка());
		КонецеСЛИ;
		
		ТекстЗапроса = "
		|	
		| ВЫБРАТЬ
		|	ДокПЛ.Ссылка.ТранспортноеСредство ТранспортноеСредство,
		|	ДокПЛ.Ссылка.ТранспортноеСредство.Модель Модель,
		|	CASE WHEN ДокПЛ.Ссылка.ТИПТС = Значение(Справочник.уатТипыТС.Пустаяссылка) THEN ДокПЛ.Ссылка.ТранспортноеСредство.ТипТС ELSE ДокПЛ.Ссылка.ТИПТС END ТипТС,
		|	РаботаТСОстатки.Контрагент,
		|	&КАГенЗкз КонтрагентГенЗаказчик,
		|	ДокПЛ.ЦехКонтрагента,
		|	ДокПЛ.ЦехКонтрагента.Родитель РодЦех,
		|	CASE WHEN  ДокПл.Месторождение = Значение(Справочник.Месторождения.ПустаяСсылка) или &МесторождениеИзЦеха = Истина THEN ДокПЛ.ЦехКонтрагента.МЕсторождение ELSE ДокПл.Месторождение END Месторождение,
		|	CASE WHEN  ДокПл.Месторождение = Значение(Справочник.Месторождения.ПустаяСсылка) или &МесторождениеИзЦеха = Истина THEN ДокПЛ.ЦехКонтрагента.МЕсторождение.Родитель ELSE ДокПл.Месторождение.Родитель END РодМст,
		|	ДокПЛ.Ссылка ПутевойЛист,
		|	ДокПЛ.Ссылка.ДатаВыезда ДатаВыезда,
		|	ДокПЛ.КоличествоЧасов,
		|	ДокПЛ.Услуга1 Количество1,
		|	ДокПЛ.Услуга2 Количество2,
		|	ДокПЛ.Услуга3 Количество3,
		|	ДокПЛ.Услуга4 Количество4,
		|	ДокПЛ.Услуга5 Количество5,
		|	ДокПЛ.Услуга6 Количество6,
		|	1 Талон,
		|	ДокПЛ.идСтроки идСтроки,
		|	// + Алексей 24.01.2020 изменено в связи с новым алгоритмом распределения пробега, БСМТС и ручные - в КоличествоКмПорожний, общий по одометру (если не суб-чик, для субчиков - БСМТС) - в КоличествоКмСпец5 (на форме пробег общий)
		|	ДокПЛ.КоличествоКмСпец5 ПробегОбщий,
		|	// + Алексей
		|	CASE WHEN ДокПЛ.Ссылка.ТранспортноеСредство.Модель.НаличиеСпидометра = Ложь THEN 0 ELSE ДокПЛ.КоличествоКмПорожний END КоличествоКмПорожний,
		|	ДокПЛ.КоличествоКмГруз,
		|	ДокПЛ.Объем,
		|	ДокПЛ.Номенклатура,
		|	ДокПЛ.КоличествоТонн,	
		|	ДокПлШапка.НомерПачки,	
		|	тбПрц.ТС Прицеп,	
		|	тбПрц.ТС.Модель МодельПрц,	
		|	тбПрц.ТС.ТипТС  ТипПрц	
		|  INTO ВрДок
		|ИЗ
		|	РегистрНакопления.РаботаТС.Остатки(, Контрагент = &КА  "+СтрФлтРег+"
		//|	и (Номенклатура = &Ном OR &Ном =Значение(Справочник.Номенклатура.ПустаяСсылка))
		|	) КАК РаботаТСОстатки
		|        INNER JOIN Документ.уатПутевойЛист.Задание как ДокПЛ ON ДокПЛ.Ссылка = РаботаТСОстатки.ПутевойЛист 
		| 															   и ДокПЛ.идСтроки = РаботаТСОстатки.идСтроки
		| 															   и РаботаТСОстатки.ТалонОстаток > 0
		|	 														   "+СтрФлтЦех+" 
		| 															  
		| 		 INNER JOIN Документ.уатПутевойЛист как ДокПЛшапка ON ДокПлШапка.ССылка = ДокПЛ.ССылка 													  
		| 															и ДокПлШапка.Дата <= &Дт  
		| 															"+СтрФлтПачка+"   
		| 															  
		|        LEFT OUTER JOIN Документ.уатПутевойЛист.Прицепы как тбПрц ON тбПрц.Ссылка = РаботаТСОстатки.ПутевойЛист 
		| 															   и тбПрц.НомерСтроки = 1
		| 															  
		|    "+СтрФлтПодр+"
		|;	";
		
		
	КонецЕСлИ;	
	
	
	
	
	
	
	
	ТекстЗапроса = ТекстЗапроса +"

//Соберем прейскурант
|SELECT	
|	Рег.Период,
|	Рег.Цена    Тариф,
|	Рег.ЦенаКм  ТарифКм,
|	Рег.Услуга1 Тариф1,
|	Рег.Услуга2 Тариф2,
|	Рег.Услуга3 Тариф3,
|	Рег.Услуга4 Тариф4,
|	Рег.Услуга5 Тариф5,
|	Рег.Услуга6 Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.КонтрагентГенЗаказчик,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.ТипТСнаПечать,
|	Рег.Лимит,
|	Рег.Регистратор ПРейскурант
|	INTO ВрРег0
|FROM 	
|	РегистрСведений.уатПрейскурантыТС  КАК Рег
|WHERE
|      (Контрагент           в (SELECT DISTINCT Контрагент           Из ВРДок как тбДок1) OR Контрагент          = Значение(Справочник.Контрагенты.ПустаяСсылка))
|  and (КонтрагентГенЗаказчик  в (SELECT DISTINCT КонтрагентГенЗаказчик  Из ВРДок как тбДок1))
|  and (Номенклатура         в (SELECT DISTINCT Номенклатура         Из ВРДок как тбДок3) OR Номенклатура        = Значение(Справочник.Номенклатура.ПустаяСсылка)) 
|
|  and (ЦехКонтрагента в (SELECT DISTINCT ЦехКонтрагента Из ВРДок как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT тбРод.Родитель Из ВРДок как тбДок2  
|                                                INNER JOIN "+врТбл+" тбРод ON тбРод.ссылка = РодЦех)
|
|    OR ЦехКонтрагента в (SELECT DISTINCT Месторождение Из ВРДок как тбДок2)  
|    OR ЦехКонтрагента в (SELECT DISTINCT РодМст Из ВРДок как тбДок2)  
|    OR ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка))   )  
|
|  AND (Модель         в (SELECT DISTINCT ТранспортноеСредство Из ВРДок как тбДок4 UNION ALL 
|                         SELECT DISTINCT Прицеп               Из ВРДок как тбДок5 UNION ALL
|                         SELECT DISTINCT Модель               Из ВРДок как тбДок6 UNION ALL
|                         SELECT DISTINCT ТипТС                Из ВРДок как тбДок7 UNION ALL
|                         SELECT DISTINCT МодельПрц            Из ВРДок как тбДок8 UNION ALL
|                         SELECT DISTINCT ТипПРц               Из ВРДок как тбДок9)
|    OR Модель         в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка) ))  
| 
|;                          
|SELECT	
|	MIN(ISNULL(Рег0.Период,&Дт)) ПериодКон,
|	Рег.Период,
|	Рег.Период ИзначДт,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.КонтрагентГенЗаказчик,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.ТипТСнаПечать,
|	Рег.Лимит,
|	Рег.ПРейскурант
|INTO ВрРег1	
|FROM ВрРег0 Рег	
|LEFT OUTER JOIN ВрРег0 Рег0 ON Рег.Период < Рег0.Период	
|	                     и Рег.Контрагент = Рег0.Контрагент
|	                     и Рег.КонтрагентГенЗаказчик = Рег0.КонтрагентГенЗаказчик
|	                     и Рег.ЦехКонтрагента = Рег0.ЦехКонтрагента
|	                     и Рег.Номенклатура = Рег0.Номенклатура
|	                     и Рег.Модель = Рег0.Модель
|GROUP BY	
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.КонтрагентГенЗаказчик,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.ТипТСнаПечать,
|	Рег.Лимит,
|	Рег.ПРейскурант
|	
|;	
	
|SELECT	
|	Рег.ПериодКон,
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Контрагент,
|	Рег.КонтрагентГенЗаказчик,
|	Рег.ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.ТипТСнаПечать,
|	Рег.Лимит,
|	Рег.ПРейскурант
|INTO ВрРег2	
|FROM ВрРег1 Рег	
|INNER JOIN (SELECT Период,Контрагент,КонтрагентГенЗаказчик,ЦехКонтрагента,Номенклатура,Модель,MAX(ИзначДт) ИзначДт  FROM ВрРег1 Рг
|																							   GROUP BY Период,Контрагент,КонтрагентГенЗаказчик,ЦехКонтрагента,Номенклатура,Модель 
|           ) Рег0 ON Рег.Период = Рег0.Период	
|	                и Рег.ИзначДт = Рег0.ИзначДт
|	                и Рег.Контрагент = Рег0.Контрагент
|	                и Рег.КонтрагентГенЗаказчик = Рег0.КонтрагентГенЗаказчик
|	                и Рег.ЦехКонтрагента = Рег0.ЦехКонтрагента
|	                и Рег.Номенклатура = Рег0.Номенклатура
|	                и Рег.Модель = Рег0.Модель
|	
|;	

//Соединим с группами цехов

|SELECT	
|	Рег.ПериодКон,
|	Рег.Период,
|	Рег.Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Номенклатура1.СпособЗаполненияУслугиПЛ Способ1,
|	Рег.Номенклатура2.СпособЗаполненияУслугиПЛ Способ2,
|	Рег.Номенклатура3.СпособЗаполненияУслугиПЛ Способ3,
|	Рег.Номенклатура4.СпособЗаполненияУслугиПЛ Способ4,
|	Рег.Номенклатура5.СпособЗаполненияУслугиПЛ Способ5,
|	Рег.Номенклатура6.СпособЗаполненияУслугиПЛ Способ6,
|	Рег.Контрагент,
|	Рег.КонтрагентГенЗаказчик,
|	ISNULL(тбРодЦех.Ссылка,Рег.ЦехКонтрагента) ЦехКонтрагента,
|	Рег.Номенклатура,
|	Рег.Модель,
|	Рег.Договор,
|	Рег.БезПрицепа,
|	Рег.ТипТСнаПечать,
|	Рег.Лимит,
|	Рег.ПРейскурант,
|	ISNULL(тбРодЦех.Уровень,0) Уровень
|	
|INTO ВрРег	
|FROM ВрРег2 Рег	
|LEFT OUTER JOIN "+врТбл+" тбРодЦех ON тбРодЦех.Родитель = Рег.ЦехКонтрагента
|
|
|
|
|
|;


//Соединим с документом по прицепу
|/////////////	
|	ВЫБРАТЬ DISTINCT
|   Док.ПутевойЛист,
|   Док.ИдСтроки,
|   Док.Прицеп,
|   Док.ТипПрц,

|	Рег.Тариф Тариф,
|	Рег.ТарифКм,
|	Рег.Тариф1,
|	Рег.Тариф2,
|	Рег.Тариф3,
|	Рег.Тариф4,
|	Рег.Тариф5,
|	Рег.Тариф6,
|	Рег.Номенклатура1,
|	Рег.Номенклатура2,
|	Рег.Номенклатура3,
|	Рег.Номенклатура4,
|	Рег.Номенклатура5,
|	Рег.Номенклатура6,
|	Рег.Способ1,
|	Рег.Способ2,
|	Рег.Способ3,
|	Рег.Способ4,
|	Рег.Способ5,
|	Рег.Способ6,
|	Рег.Договор,
|	Рег.ТипТСнаПечать,
|	Рег.ПРейскурант,
|	  CASE WHEN  Док.Контрагент = Рег.Контрагент               
|             и  Док.КонтрагентГенЗаказчик = Рег.КонтрагентГенЗаказчик  THEN 10000 ELSE 0 END

|	+ CASE WHEN  Рег.ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка))   THEN 0 
|	       WHEN  Док.ЦехКонтрагента = Рег.ЦехКонтрагента      THEN 4000 
|	       WHEN  Док.РодЦех         = Рег.ЦехКонтрагента      THEN 3000 + Рег.Уровень*100
|	       WHEN  Док.Месторождение  = Рег.ЦехКонтрагента      THEN 2000 
|	       WHEN  Док.РодМст         = Рег.ЦехКонтрагента      THEN 1000 ELSE 0 END

|	+ CASE WHEN  Док.Номенклатура = Рег.Номенклатура          THEN 10 ELSE 0 END

|	+ CASE WHEN  Док.ТранспортноеСредство = Рег.Модель        THEN 3
|	       WHEN  Док.Модель = Рег.Модель                      THEN 2 
|	       WHEN  Док.ТипТС  = Рег.Модель                      THEN 1 ELSE 0 END Инд
|	
|	INTO ВрТблПрц
|ИЗ
|	 ВРДок КАК Док
|	
|LEFT OUTER JOIN ВрРег Рег	ПО  (Рег.Контрагент = Док.Контрагент OR Рег.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
|	    and  Рег.КонтрагентГенЗаказчик = Док.КонтрагентГенЗаказчик
|       and (Рег.Номенклатура = Док.Номенклатура OR Рег.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)) 
|	
|       and (Рег.ЦехКонтрагента = Док.ЦехКонтрагента 
|	        OR Рег.ЦехКонтрагента = Док.РодЦех
|	        OR Рег.ЦехКонтрагента = Док.Месторождение
|	        OR Рег.ЦехКонтрагента = Док.РодМст
|    		OR Рег.ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка))   )  
|	
|       and (Рег.Модель   = Док.Прицеп 
|			OR Рег.Модель = Док.МодельПрц 
|			OR Рег.Модель = Док.ТипПрц 
//|    		OR Рег.Модель в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка))
|           )  
|	
|	    and (Рег.Период <= Док.ДатаВыезда и Рег.ПериодКон > Док.ДатаВыезда)
|WHERE 	Док.Прицеп <> Значение(Справочник.уатТС.ПустаяСсылка)
|	
|;
|SELECT
|   Т1.ПутевойЛист,
|   Т1.ИдСтроки,
|   Т1.Прицеп,
|   Т1.ТипПрц,

|  Тариф,
|  ТарифКм,
|  Тариф1,
|  Тариф2,
|  Тариф3,
|  Тариф4,
|  Тариф5,
|  Тариф6,

|  Номенклатура1,
|  Номенклатура2,
|  Номенклатура3,
|  Номенклатура4,
|  Номенклатура5,
|  Номенклатура6,

|  Способ1,
|  Способ2,
|  Способ3,
|  Способ4,
|  Способ5,
|  Способ6,

|	Т1.Прейскурант,
|	Т1.ТипТСнаПечать,
|	Т1.Договор

|INTO ВРпрц
|FROM ВрТблПрц Т1
|INNER JOIN (SELECT ПутевойЛист,ИдСтроки, Max(Инд) Инд FROM ВрТблПрц Т2 GROUP BY ПутевойЛист,ИдСтроки) Т2 ON Т2.ПутевойЛист = Т1.ПутевойЛист 
|																					  					и Т2.ИдСтроки = Т1.ИдСтроки 
|																					  					и Т2.ИНд = Т1.ИНд
|"+СтрФлтДог+"
|
|; 

//Соеденим с документом
|/////////////	
|	ВЫБРАТЬ
|   Док.ПутевойЛист,
|   Док.ДатаВыезда,
|   Док.ИдСтроки,
|   Док.Объем,
|   Док.КоличествоТонн,
|   Док.КоличествоКмПорожний,
|	// + Алексей 24.01.2020 изменено в связи с новым алгоритмом распределения пробега, БСМТС и ручные - в КоличествоКмПорожний, общий по одометру (если не суб-чик, для субчиков - БСМТС) - в КоличествоКмСпец5 (на форме пробег общий)
|	Док.ПробегОбщий,
|	// + Алексей 
|   Док.КоличествоКмГруз,
|   Док.КоличествоЧасов,
|   Док.ТранспортноеСредство,
|   CASE WHEN Рег.ТипТСнаПечать = Значение(Справочник.уатТипыТС.ПустаяССЫлка) THEN  ISNULL(тбПрц.ТипПрц,Док.ТипТС) ELSE Рег.ТипТСнаПечать END ТипТС,
|   тбПрц.Прицеп,
|   Док.Контрагент,
|   Док.КонтрагентГенЗаказчик,
|   Док.ЦехКонтрагента,
|   Док.Месторождение,
|   Док.Номенклатура,
|   Док.НомерПачки,

|   Рег.Лимит,

|   CASE WHEN рстПрейс.Цена IS NULL THEN Док.КоличествоЧасов ELSE Док.Объем END Количество,
|   Док.КоличествоКмПорожний КоличествоКм,
|   Док.Количество1,
|   Док.Количество2,
|   Док.Количество3,
|   Док.Количество4,
|   Док.Количество5,
|   Док.Количество6,

|	ISNULL(рстПрейс.Цена, ISNULL(Рег.Тариф,0) )+ISNULL(тбПРц.Тариф,0) Тариф,
|	ISNULL(Рег.ТарифКм,0)+ISNULL(тбПРц.ТарифКм,0) ТарифКм,
|	ISNULL(Рег.Тариф1,0) +ISNULL(тбПРц.Тариф1,0)  Тариф1,
|	ISNULL(Рег.Тариф2,0) +ISNULL(тбПРц.Тариф2,0)  Тариф2,
|	ISNULL(Рег.Тариф3,0) +ISNULL(тбПРц.Тариф3,0)  Тариф3,
|	ISNULL(Рег.Тариф4,0) +ISNULL(тбПРц.Тариф4,0)  Тариф4,
|	ISNULL(Рег.Тариф5,0) +ISNULL(тбПРц.Тариф5,0)  Тариф5,
|	ISNULL(Рег.Тариф6,0) +ISNULL(тбПРц.Тариф6,0)  Тариф6,
|	ISNULL(Рег.Номенклатура1,тбПРц.Номенклатура1) Номенклатура1,
|	ISNULL(Рег.Номенклатура2,тбПРц.Номенклатура2) Номенклатура2,
|	ISNULL(Рег.Номенклатура3,тбПРц.Номенклатура3) Номенклатура3,
|	ISNULL(Рег.Номенклатура4,тбПРц.Номенклатура4) Номенклатура4,
|	ISNULL(Рег.Номенклатура5,тбПРц.Номенклатура5) Номенклатура5,
|	ISNULL(Рег.Номенклатура6,тбПРц.Номенклатура6) Номенклатура6,
|	ISNULL(Рег.Способ1,тбПРц.Способ1) Способ1,
|	ISNULL(Рег.Способ2,тбПРц.Способ2) Способ2,
|	ISNULL(Рег.Способ3,тбПРц.Способ3) Способ3,
|	ISNULL(Рег.Способ4,тбПРц.Способ4) Способ4,
|	ISNULL(Рег.Способ5,тбПРц.Способ5) Способ5,
|	ISNULL(Рег.Способ6,тбПРц.Способ6) Способ6,
|	ISNULL(Рег.Договор,тбПРц.Договор) Договор,
|	ISNULL(Рег.ПРейскурант,тбПРц.ПРейскурант) ПРейскурант,
|	  CASE WHEN  Док.Контрагент = Рег.Контрагент              
|             и  Док.КонтрагентГенЗаказчик = Рег.КонтрагентГенЗаказчик  THEN 10000 ELSE 0 END

|	+ CASE WHEN  Рег.ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка))   THEN 0 
|	       WHEN  Док.ЦехКонтрагента = Рег.ЦехКонтрагента      THEN 4000 
|	       WHEN  Док.РодЦех         = Рег.ЦехКонтрагента      THEN 3000 + Рег.Уровень*100 
|	       WHEN  Док.Месторождение  = Рег.ЦехКонтрагента      THEN 2000 
|	       WHEN  Док.РодМст         = Рег.ЦехКонтрагента      THEN 1000 ELSE 0 END

|	+ CASE WHEN  Док.Номенклатура = Рег.Номенклатура          THEN 10 ELSE 0 END

|	+ CASE WHEN  Док.ТранспортноеСредство = Рег.Модель        THEN 3
|	       WHEN  Док.Модель = Рег.Модель                      THEN 2 
|	       WHEN  Док.ТипТС  = Рег.Модель                      THEN 1 ELSE 0 END Инд
|	
|	INTO ВрТбл
|ИЗ
|	 ВРДок КАК Док
|	
|LEFT OUTER JOIN ВрРег Рег	ПО  (Рег.Контрагент = Док.Контрагент OR Рег.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка))
|	    and  Рег.КонтрагентГенЗаказчик = Док.КонтрагентГенЗаказчик
|       and (Рег.Номенклатура = Док.Номенклатура OR Рег.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)) 
|	
|       and (Рег.ЦехКонтрагента = Док.ЦехКонтрагента 
|	        OR Рег.ЦехКонтрагента = Док.РодЦех
|	        OR Рег.ЦехКонтрагента = Док.Месторождение
|	        OR Рег.ЦехКонтрагента = Док.РодМст
|    		OR Рег.ЦехКонтрагента в (неопределено,Значение(Справочник.Месторождения.ПустаяСсылка),Значение(Справочник.ЦехаКонтрагента.ПустаяСсылка))   )  
|	
|       and (Рег.Модель   = Док.ТранспортноеСредство 
|			OR Рег.Модель = Док.Модель 
|			OR Рег.Модель = Док.ТипТС 
|    		OR Рег.Модель в (неопределено,Значение(Справочник.уатТС.ПустаяСсылка),Значение(Справочник.уатМоделиТС.ПустаяСсылка),Значение(Справочник.уатТипыТС.ПустаяСсылка)) )  
|	
|	    and (Рег.Период <= Док.ДатаВыезда и Рег.ПериодКон > Док.ДатаВыезда)
|	
|LEFT OUTER JOIN Документ.ПРейскурант.НаРасстояние рстПрейс ON рстПрейс.ССылка = Рег.Прейскурант
|                                                           и  рстПрейс.КоличествоКмГруз = Док.КоличествоКмГруз
| 
|LEFT OUTER JOIN ВрПрц тбПрц ON  тбПрц.ПутевойЛист = Док.ПутевойЛист 
|                              и тбПрц.ИдСтроки = Док.ИдСтроки
|                              и (тбПрц.Прейскурант = Рег.Прейскурант или Рег.Прейскурант IS NULL)
|                              и (Рег.БезПрицепа = Ложь или Рег.БезПрицепа IS NULL)
|;
|SELECT
|   Т1.ПутевойЛист,
|   Т1.ПутевойЛист.Номер,
|   Т1.Контрагент,
|   Т1.КонтрагентГенЗаказчик,
|   Т1.ЦехКонтрагента,
|   Т1.Месторождение,
|   Т1.НомерПачки,
|   НачалоПериода(Т1.ДатаВыезда,День) ДатаВыезда,
|   Т1.ТранспортноеСредство ТС,
|   Т1.Прицеп,
|   Т1.ТипТС,
|   Т1.ИдСтроки,
|	// + Алексей, БЫЛО: Т1.КоличествоКмПорожний
|   Т1.ПробегОбщий Пробег,
|   // + Алексей
|   Т1.КоличествоКмГруз,
|   Т1.КоличествоТонн,

|	Т1.Количество,
|	CASE WHEN ТарифКм = 0 THEN 0 ELSE Т1.КоличествоКм END КоличествоКм,
|   Т1.Количество1,
|   Т1.Количество2,
|   Т1.Количество3,
|   Т1.Количество4,
|   Т1.Количество5,
|   Т1.Количество6,

|  CASE WHEN Количество  =0 THEN 0 ELSE Тариф   END Тариф,
//|  CASE WHEN КоличествоКм=0 THEN 0 ELSE ТарифКм END ТарифКм,
|  ТарифКм ТарифКм,
|  CASE WHEN Количество1 =0 и Способ1 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Тариф1  END Тариф1,
|  CASE WHEN Количество2 =0 и Способ2 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Тариф2  END Тариф2,
|  CASE WHEN Количество3 =0 и Способ3 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Тариф3  END Тариф3,
|  CASE WHEN Количество4 =0 и Способ4 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Тариф4  END Тариф4,
|  CASE WHEN Количество5 =0 и Способ5 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Тариф5  END Тариф5,
|  CASE WHEN Количество6 =0 и Способ6 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Тариф6  END Тариф6,

|  CASE WHEN Количество1 =0 и Способ1 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Номенклатура1  END Номенклатура1,
|  CASE WHEN Количество2 =0 и Способ2 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Номенклатура2  END Номенклатура2,
|  CASE WHEN Количество3 =0 и Способ3 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Номенклатура3  END Номенклатура3,
|  CASE WHEN Количество4 =0 и Способ4 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Номенклатура4  END Номенклатура4,
|  CASE WHEN Количество5 =0 и Способ5 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Номенклатура5  END Номенклатура5,
|  CASE WHEN Количество6 =0 и Способ6 <> Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) THEN 0 ELSE Номенклатура6  END Номенклатура6,

|  CASE WHEN Количество1 =0 THEN 0 ELSE Способ1  END Способ1,
|  CASE WHEN Количество2 =0 THEN 0 ELSE Способ2  END Способ2,
|  CASE WHEN Количество3 =0 THEN 0 ELSE Способ3  END Способ3,
|  CASE WHEN Количество4 =0 THEN 0 ELSE Способ4  END Способ4,
|  CASE WHEN Количество5 =0 THEN 0 ELSE Способ5  END Способ5,
|  CASE WHEN Количество6 =0 THEN 0 ELSE Способ6  END Способ6,

|  Тариф  * Количество   Сумма,
|  ТарифКм* КоличествоКм СуммаКм,
|  CASE WHEN Способ1 = Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) 
|       THEN (Тариф  * Количество + ТарифКм* КоличествоКм) * Тариф1/100
|       ELSE Тариф1 * Количество1 END Сумма1,
|  CASE WHEN Способ2 = Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) 
|       THEN (Тариф  * Количество + ТарифКм* КоличествоКм) * Тариф2/100
|       ELSE Тариф2 * Количество2 END  Сумма2,
|  CASE WHEN Способ3 = Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) 
|       THEN (Тариф  * Количество + ТарифКм* КоличествоКм) * Тариф3/100
|       ELSE Тариф3 * Количество3 END  Сумма3,
|  CASE WHEN Способ4 = Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) 
|       THEN (Тариф  * Количество + ТарифКм* КоличествоКм) * Тариф4/100
|       ELSE Тариф4 * Количество4 END  Сумма4,
|  CASE WHEN Способ5 = Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) 
|       THEN (Тариф  * Количество + ТарифКм* КоличествоКм) * Тариф5/100
|       ELSE Тариф5 * Количество5 END  Сумма5,
|  CASE WHEN Способ6 = Значение(Перечисление.СпособЗаполненияУслугиПЛ.ЧасыИКм) 
|       THEN (Тариф  * Количество + ТарифКм* КоличествоКм) * Тариф6/100
|       ELSE Тариф6 * Количество6 END  Сумма6,

| 0 СуммаСуб,

|	Т1.Прейскурант,
|	Т1.Номенклатура,
|	Т1.Лимит,
|	Т1.Договор

|
|FROM ВрТбл Т1
|INNER JOIN (SELECT ПутевойЛист,ИдСтроки, Max(Инд) Инд FROM ВрТбл Т2 GROUP BY ПутевойЛист,ИдСтроки) Т2 ON Т2.ПутевойЛист = Т1.ПутевойЛист 
|																					  					и Т2.ИдСтроки = Т1.ИдСтроки 
|																					  					и Т2.ИНд = Т1.ИНд
|
|"+СтрФлтДог+"
//|ORDER BY Т1.ПутевойЛист.Номер,Т1.ТранспортноеСредство
|ORDER BY Т1.ПутевойЛист.Дата,Т1.ТранспортноеСредство
|";
Запрос.Текст = ТекстЗапроса;

Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции
//===============================================
&НаКлиенте
Процедура ПериодОтчета(ДТ,Дт1,УстДату=ЛОжь) Экспорт
	
	Если УстДату ТОгда
		СохранитьЗначение("ДатаНачалаОтчета",Дт);
		СохранитьЗначение("ДатаОкончанияОтчета",Дт1);
	ИНаче
		п = восстановитьЗначение("ДатаНачалаОтчета");
		Если п=неопределено ТОгда
			Дт = НачалоМесяца(ТекущаяДата());
		ИНаче
			Дт = п;
		КонецЕСЛИ;
		
		п = восстановитьЗначение("ДатаОкончанияОтчета");
		Если п=неопределено ТОгда
			Дт1 = КонецМесяца(ТекущаяДата());
		ИНаче
			Дт1 = п;
		КонецЕСЛИ;
	КонецеСЛИ;
	
КонецПроцедуры
//===============================================
Функция ПолучитьГрузоподъемностьИОбъемМоделиТС(Модель,Груз) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕдиницыИзмерения.Объем коэфОбъем,
	               |	ЕдиницыИзмерения.Вес коэфВес,
	               |	уатМоделиТС.ОбъемКузова * CASE WHEN Объем=0 THEN 1 ELSE Объем END * ЕдиницыИзмерения.Вес Грузоподъемность,
	               |	уатМоделиТС.ОбъемКузова * ЕдиницыИзмерения.Объем ОбъемКузова
	               |ИЗ
	               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО ЕдиницыИзмерения.Владелец = Номенклатура.Ссылка
	               |			И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения,
	               |	Справочник.уатМоделиТС КАК уатМоделиТС
	               |ГДЕ
	               |	Номенклатура.Ссылка = &Груз
	               |	И уатМоделиТС.Ссылка = &Мод";
				   Запрос.УстановитьПараметр("Мод",Модель);
				   Запрос.УстановитьПараметр("Груз",Груз);
	               ТБл = Запрос.Выполнить().Выгрузить();
				   
				   
	Стк=Новый Структура("коэфОбъем,коэфВес,Грузоподъемность,ОбъемКузова",1,1,0,0);
	Если Тбл.Количество()>0 Тогда
		ЗаполнитьЗначенияСвойств(стк,тбл[0]);
		Стк.Грузоподъемность = ОКР(Стк.Грузоподъемность,0,1);
		Стк.ОбъемКузова      = ОКР(Стк.ОбъемКузова,0,1);
	КонецЕСЛИ;
	
	Возврат Стк;
	
КонецФункции
//===============================================
Функция ПроверитьПодключениеКИнтернету() Экспорт
	Возврат 0;
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	name = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.АдресДляПроверкиИнтернета);	
	//name = "91.203.9.34";
	
	scrptCtrl=New COMОбъект("MSScriptControl.ScriptControl");
	scrptCtrl.language="vbscript";
	scrptCtrl.addcode("
	|Function Avaible()
	|Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}"")
	|Set objPing = objWMIService.ExecQuery(""select * from Win32_PingStatus where address = '"+name+"'"")
	|For Each objStatus in objPing
	|If IsNull(objStatus.StatusCode) Or objStatus.StatusCode <> 0 Then
	|   Avaible = 0
	|Else
	|   Avaible = 1
	|End If
	|Next
	|End function
	|");
	
	Попытка
		Рез = ScrptCtrl.Run("Avaible");
	Исключение
		Сообщить(ОписаниеОшибки());
		Рез=0;
	КонецПопытки;
	
	Если Рез=0 Тогда
		Сообщить("Подключение к интернету отсутсвует. Проверочный адрес : "+name);
	EndIf;
	
	Возврат Рез;
	
КонецФункции
//===============================================
Функция ЭтоПривлеченноеТС(ТС,ДТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ
	                |	уатМестонахождениеТССрезПоследних.Состояние Рез
	                |ИЗ
	                |	РегистрСведений.уатМестонахождениеТС.СрезПоследних(&дт, ТС = &тс) КАК уатМестонахождениеТССрезПоследних";
					Запрос.УстановитьПараметр("ТС",ТС);
					Запрос.УстановитьПараметр("Дт",КонецДня(Дт));
	ТБл =Запрос.Выполнить().Выгрузить();
	Если Тбл.Количество()>0 ТОгда
		Если Тбл[0].Рез = Справочники.уатСостояниеТС.Привлеченный Тогда
			Возврат Истина;
		КонецеСЛИ;
	КонецЕСЛИ;
	
	Возврат Ложь;
	
	
КонецФункции
//=======================================================
// Возвращает запрос со временной таблицой Групп справочника со всеми подчиненными папками
// ВидСпр - Название справочника
// ИмяВременнойТаблицы - Переменная, в которой вернется название временной таблицы
Функция ИерархияСправочника(ВидСпр,ИмяВременнойТаблицы,ТекстЗапроса="") Экспорт
	
	//ВидСпр = "СтатьиЗатрат";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|SELECT
	|      Спр.Ссылка Родитель,
	|      Спр.Ссылка,
	|      0 Уровень,
	|      1 Инд
	| INTO врИерархТбл1
	| FROM  Справочник."+ВидСпр+" Спр
	| WHERE Спр.ЭтоГруппа
	|     и Спр.Родитель = Значение(Справочник."+ВидСпр+".ПустаяСсылка)
	|";
	Т = Запрос.Выполнить().Выгрузить();
	ТекстЗапроса = ТекстЗапроса+ Запрос.Текст;
	
	КолСтр = Т[0].Количество;
	
	ДЛя а=1 по 99 Цикл
		
		Запрос.Текст = "
		|SELECT
		|	Родитель,
		|	Ссылка,
		|	Уровень,
		|	0 Инд
		|INTO врИерархТбл"+(а+1)+"
		|FROM врИерархТбл"+а+" Т
		| 
		|UNION ALL
		|
		| SELECT
		|      ТБл.Родитель,
		|      Спр.Ссылка,
		|	   Уровень,
		|      0 Инд
		|  FROM  Справочник."+ВидСпр+" Спр
		|INNER JOIN врИерархТбл"+а+" Тбл ON ТБл.ссылка = Спр.РОдитель и Спр.ЭтоГруппа
		| WHERE Спр.ЭтоГруппа и Спр.РОдитель в (Выбрать ссылка из врИерархТбл"+а+" Т WHERE Инд = 1)
		| 
		|UNION ALL
		|
		| SELECT
		|      Спр.Ссылка,
		|      Спр.Ссылка,
		|	   "+а+" Уровень,
		|      1 Инд
		|FROM  Справочник."+ВидСпр+" Спр
		| WHERE Спр.ЭтоГруппа и Спр.РОдитель в (Выбрать ссылка из врИерархТбл"+а+" Т WHERE Инд = 1)
		|
		|";
		
		Т = Запрос.Выполнить().Выгрузить();
		ТекстЗапроса = ТекстЗапроса+ Запрос.Текст;

		Если КолСтр = Т[0].Количество ТОгда
			ИмяВременнойТаблицы = "врИерархТбл"+(а+1);
			ПРервать;
		КонецеСЛИ;
		
		КолСтр = Т[0].Количество;
		
	КонецЦикла;
	

      Возврат Запрос;

				   
КонецФункции
//=======================================================
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента,ПоГруппам=Истина) Экспорт
	
	Сумма = 0;
	Соо = Новый Соответствие;
	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					обНОмСтр = Формат(ИндексСтрока, "ЧГ=0");
					обНОмКол = Формат(ИндексКолонка, "ЧГ=0");
					ТекНомГРп="";
					
					Если поГруппам ТОгда
						
						Попытка
							ТекНомГРп = СтрЗаменить(ПолеТабличногоДокумента.Область("R" + обНомСтр + "C1") .Текст, " ", "");
						Исключение
							продолжить;
						КонецПопытки;
						
						Если ТекНомГРп="" ТОгда
							Продолжить;
						КонецесЛИ;
					КонецеСЛИ;
						
						Если Соо.Количество()=0 ТОгда
							Соо.Вставить(ТекНомГрп,0);
						ИНАчеЕсли Соо.Получить(ТекНомГрп)=Неопределено ТОгда
							Продолжить;
						КонецЕСЛИ;
						
						
					
					Попытка
						Соо[ТекНомГрп] = Соо[ТекНомГрп]+Число(СтрЗаменить(ПолеТабличногоДокумента.Область("R" + обНомСтр + "C" + обНОмКол) .Текст, " ", ""));
					Исключение
					КонецПопытки;
					
					
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДЛя каждого эл из Соо Цикл
		Если Эл.Значение = 0 ТОгда
			Соо.Удалить(Эл.Ключ);
		КонецЕСЛИ;
	КонецЦикла;
	
	Возврат Соо;
	
КонецФункции
//=======================================================
//пример : ПолучитьХарактеристику(СсылкаНаОбъект,"Комиссия Ввод в эксплуатацию","Строка",Истина)
//пример : ПолучитьХарактеристику(СсылкаНаОбъект,"Принял Ввод в эксплуатацию","СправочникСсылка.ФизическиеЛица")
 Функция ПолучитьХарактеристику(СсылкаНаОбъект,Имя_Св_во,ТипСв_ва,ЭтоГУИД=Ложь,ПервыйНеПустой=Ложь) Экспорт
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ЗначенияСвойствОбъектов.Объект,
	 |	ЗначенияСвойствОбъектов.Свойство,
	 |	ЗначенияСвойствОбъектов.Значение
	 |ИЗ
	 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	 |WHERE Объект = &Обк и Свойство = &Св";
	 Запрос.УстановитьПараметр("Обк",СсылкаНаОбъект);
	 Если ТипСв_ва = "" Тогда
		 Запрос.УстановитьПараметр("Св",ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка());
	 ИНаче
		 ссХар =   ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(Имя_Св_во);
		 Если ссХар.Пустая() ТОгда
			 СоздатьХарактеристику(СсылкаНаОбъект,Имя_Св_во,ТипСв_ва);	
			 ссХар =   ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(Имя_Св_во);
		 КонеЦЕСЛИ;
		 
		 Запрос.УстановитьПараметр("Св",ссХар);
	 КонецЕСЛИ;
	 
	 Тбл =Запрос.Выполнить().Выгрузить();
	 Если Тбл.Количество()>0 ТОгда
		 Если ЭтоГУИД Тогда
			 Возврат Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(Тбл[0].Значение));
		 ИНаче
			 Возврат Тбл[0].Значение;
		 КонецеСЛИ;
	 ИНаче
		 
		 
		 
		 Запрос.Текст = "ВЫБРАТЬ TOP 1
		 |	ЗначенияСвойствОбъектов.Объект,
		 |	ЗначенияСвойствОбъектов.Свойство,
		 |	ЗначенияСвойствОбъектов.Значение
		 |ИЗ
		 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		 |WHERE Значение <> &Зн и Свойство = &Св
		 |";
		 Если ТипСв_ва="Строка" ТОгда	 
			 Запрос.УстановитьПараметр("Зн","");
		 ИНаче
			 пСС = Новый(Тип(ТипСв_ва));
			 Запрос.УстановитьПараметр("Зн",пСС);
		 КонецЕСЛИ;
		 
		 Тбл =Запрос.Выполнить().Выгрузить();
		 Если Тбл.Количество()>0 ТОгда
			 Если ЭтоГУИД и Имя_Св_во = "Комиссия Ввод в эксплуатацию" Тогда
				 Попытка
					 Возврат Справочники.Комиссии.ПолучитьСсылку(Новый УникальныйИдентификатор(Тбл[0].Значение));
				 Исключение
					 Возврат Справочники.Комиссии.ПустаяСсылка();
				 КонецПопытки;
			 ИНачеЕсли ЭтоГУИД Тогда
				 Попытка
					 Возврат Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(Тбл[0].Значение));
				 Исключение
					 Возврат Неопределено;
				 КонецПопытки;
				 
			 ИНаче
				 Возврат Тбл[0].Значение;
			 КонецеСЛИ;
		 ИНаче
			 
			 Возврат Неопределено;
		 КонецЕСЛИ;
	 КонецЕСЛИ;
	 
 КонецФункции
//=======================================================
 Процедура СоздатьХарактеристику(СсылкаНаОбъект,Имя_Св_во,ТипСв_ва) Экспорт
	 
	 Эл = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
	 Эл.Наименование = Имя_Св_во;
	 Эл.ТипЗначения = Новый ОписаниеТипов(ТипСв_ва);
	 Мета = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	 Если Мета = "Справочник.ДолжностиОрганизаций" Тогда
		 Эл.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДолжностиОрганизаций;
	 ИначеЕсли Мета = "Справочник.ФизическиеЛица" Тогда
		 Эл.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	 ИначеЕсли Найти(Мета,"Документ")<>0 Тогда
		 Эл.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	 ИНАче
		 Эл.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники;
	 КонецеСЛИ;
	 Эл.Записать();
	 
	 Сообщить("Создана дополнительная характеристика "+Имя_Св_во);
	 
	 
 КонецПроцедуры
//=======================================================
Функция ТекстЗапросаПодразделения() Экспорт
	
	Возврат  "ВЫБРАТЬ
|		уатМестонахождениеТССрезПоследних.ТС,
|		уатМестонахождениеТССрезПоследних.Подразделение пПодразделение,
|		уатМестонахождениеТССрезПоследних.Владелец КаВладелец,
//|		НачалоПериода(уатМестонахождениеТССрезПоследних.Период,День) Период
|		ДатаВремя(1,1,1,0,0,0) Период
|		INTO ВРТбл
|	ИЗ
|		РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДтДляПодр) КАК уатМестонахождениеТССрезПоследних
|		
|	UNION ALL
|		
|	ВЫБРАТЬ
|		уатМестонахождениеТС.ТС,
|		уатМестонахождениеТС.Подразделение,
|		уатМестонахождениеТС.Владелец,
|		НачалоПериода(уатМестонахождениеТС.Период,День)
|	ИЗ
|		РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
|		WHERE Период > &ДтДляПодр и Период < &Дт1
|	;
|		
|	SELECT  DISTINCT
|		Тбл.ТС,
|		Тбл.пПодразделение,
|		Тбл.КаВладелец,
|		Тбл.Период,
|		MIN(ISNULL(Т.Период,&Дт1)) ПериодКон,
|		Тбл.Период изначДт
|	INTO ВРТбл1	
|	FROM ВРТбл Тбл 
|	LEFT OUTER JOIN ВРТбл Т ON Т.ТС = Тбл.ТС и Т.Период > Тбл.Период
|	GROUP BY		
|		Тбл.ТС,
|		Тбл.пПодразделение,
|		Тбл.КаВладелец,
|		Тбл.Период
|	;	
|	SELECT DISTINCT
|		Тбл.ТС,
|		Тбл.пПодразделение Подразделение,
|		Тбл.КаВладелец Владелец,
|		Тбл.Период,
|		Тбл.ПериодКон
|	INTo ВРПодр
|	FROM ВРТбл1 Тбл
|	INNER JOIN (SELECT ТС,Период,MAX(изначДт) изНачДт FROM ВРТбл1 Т1 GROUP BY ТС,Период) Т ON Т.ТС = Тбл.ТС и Т.Период = ТБл.Период и Т.ИзначДт = Тбл.ИзначДт
|	
|	;
|	////////////////////////////////////////////////////
|
|
|";
	
	
	
КонецФункции
//=======================================================
Функция глУровеньДоступа(ЭтаФорма) Экспорт
	
	Обк = ЭтаФорма.ДокументОбъект;
	Если Обк.ЭтоНовый() Тогда 
		Обк.СтрПроверено = "";
		Обк.Проверил = Неопределено;
	КонецесЛИ;
	
	ЭтаФорма.ЭлементыФормы.Проверено.Значение = ЗначениеЗаполнено(Обк.Проверил);
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ТекУровень = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "УровеньДоступа");
	Если ТекУровень>=Число(обк.Метаданные().Пояснение) ТОгда
		
		//Проверим у кого больше прав
		Если ЗначениеЗаполнено(Обк.Проверил) ТОгда
			ЕСли ТекПользователь <> Обк.Проверил Тогда
				п = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Обк.Проверил, "УровеньДоступа");
				Если п>ТекУровень ТОгда
					Возврат Ложь;
				КонецесЛИ;
			КонецЕСЛИ;
		КонецеСЛИ;
		
		ЭтаФорма.ЭлементыФормы.Проверено.Доступность = Истина;
		Возврат Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Обк.Проверил) ТОгда	
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
	КонецеслИ;
	
	Возврат Ложь;
	
	
КонецФункции
//=======================================================
Процедура ПриВыбореПроверено(Элемент,Обк,НадоЗаписать=Истина) Экспорт
	
	ПОпытка
		Если Элемент.Значение Тогда
			Обк.СтрПроверено = глОбщий.ВремяМестоСобытия();
			Обк.Проверил = глЗначениеПеременной("глТекущийПользователь");
			Если НадоЗаписать Тогда
				Обк.Записать(РежимЗаписиДокумента.Проведение);
			КонецеСЛИ;
		ИНАче
			Обк.СтрПроверено = "";
			Обк.Проверил = Неопределено;
			Если НадоЗаписать Тогда
				Обк.Записать();
			КонецеСЛИ;
		КонецЕслИ;
	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
//=======================================================
Функция ВремяМестоСобытия() Экспорт
	
	Возврат СокрЛП(ТекущаяДата())+" "+ИмяПользователя()+" "+ИмяКомпьютера();
	
КонецФункции
//=======================================================

Функция КомпонентаФормированияQRКода(Отказ)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Платформа = СистемнаяИнформация.ТипПлатформы;
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода'");
	
	Попытка
		Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", "QR") Тогда
			QRCodeGenerator = Новый("AddIn.QR.QRCodeExtension");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЕсли
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат QRCodeGenerator;
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
//  ТекстОшибки      - Строка - в этот параметр помещается описание возникшей ошибки (если возникла).
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Отказ = Ложь;
	
	ГенераторQRКода = КомпонентаФормированияQRКода(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции
//=======================================================
//Функция проверяет, есть ли за месяц, куда входит Дата проведенный документ "РасходГСМЗАМесяц"
//ВыводитьСообщение - не всегда при этом необходимо выводить соответствующее сообщение
Функция ЕстьРасходГСМзаМесяц(Дата,ВыводитьСообщение = Истина) Экспорт 
	Выборка = Документы.РасходГСМзаМесяц.Выбрать(НачалоМЕсяца(Дата),КонецМесяца(Дата));
	ПОка Выборка.Следующий() Цикл
		Если Выборка.Проведен ТОгда
			Если ВыводитьСообщение Тогда
				Сообщить("В текущем месяце есть проведенный документ Расход ГСМ. Редактирование производственных документов запрещено!");
			КонецЕсли;	
			ВозвраТ Истина;
		КонецЕСЛИ;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
//=======================================================
Функция ЗакрытПериодПоСубподряду(Дата)  Экспорт

	Выборка = Документы.ЗакрытиеПериодаПоСубподряду.Выбрать(НачалоМЕсяца(Дата),КонецМесяца(Дата));
	ПОка Выборка.Следующий() Цикл
		Если Выборка.Проведен ТОгда
			ВозвраТ Истина;
		КонецЕСЛИ;
	КонецЦикла;

	Возврат Ложь;
	
КонецФункции
//=======================================================
	
	// Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение
	//
	Функция ИмяCOMСоединителя() Экспорт
		СисИнфо = Новый СистемнаяИнформация;
		ПодстрокиВерсии = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");
		Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	КонецФункции 

//=======================================================
//Зн - строка с фильтром поиска
//ТекОтбор - Тип("Отбор") списка объекта
Процедура ФильтрСпискаПоСтроке(ИмяСпр,Зн,ТекОтбор,ТекРек="Наименование") Экспорт
	
	Если СокрЛП(Зн)="" ТОгда
		ТекОтбор.ссылка.Использование = Ложь;
		Возврат;
	КонеЦЕСЛИ;
	
	//сс = Новый(ТекОтбор.Ссылка.ТипЗначения.Типы()[0]).метаданные().ПолноеИмя();
	//ИмяСпр = сс.метаданные().ПолноеИмя();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатТС.Ссылка
	               |ИЗ
	               |	Справочник."+ИмяСпр+" КАК уатТС
	               |ГДЕ
	               |	уатТС."+ТекРек+" ПОДОБНО &Фильтр";
				   Запрос.УстановитьПараметр("Фильтр","%"+СокрЛП(Зн)+"%");
				   ТБл = Запрос.Выполнить().Выгрузить();
				   
				   Спк = Новый СписокЗначений;
				   Спк.ЗагрузитьЗначения(Тбл.ВыгрузитьКолонку("ссылка"));
				   
				   ТекОтбор.Ссылка.видСравнения = ВидСравнения.ВСписке;
				   ТекОтбор.Ссылка.Значение = Спк;
				   ТекОтбор.ссылка.Использование = Истина;
	
Конецпроцедуры
//=======================================================


Процедура СканерПодключить() Экспорт
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	НомерПорта = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "НомерКомПорта");
	Если НомерПорта = 0 ТОгда
		Сообщить("У пользователя не указан номер com порта");
		Возврат;
	КонецЕслИ;
	
	ПутьКДрайверу = "ScanOPOS.dll"; 
	Порт = НомерПорта; // 0 - в том случае, если сканер подключается в разрезе клавиатуры, иначе необходимо указать номер используемого com-порта 
	БитДанных = 8; // возможные значения от 1 до 8 (должно соответствовать настройкам сканера) 
	Скорость = 9600; // возможные значения: 110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 56000, 57600, 115200, 128000, 256000 (должно соответствовать настройкам сканера) 
	Суффикс = "13"; // должно соответствовать настройкам сканера 
	
	ЗагрузитьВнешнююКомпоненту(ПутьКДрайверу); 
	ОбъектДрайвер = Новый("AddIn.Scanner"); 
	
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для сканера штрих кода'");
	
	//Попытка
	//	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаРаботыСоСканеромШтрихКода","Сканер") Тогда
	//		ОбъектДрайвер = Новый("AddIn.Сканер.Scanner"); 
	//	Иначе
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , );
	//		Возврат;
	//	КонецЕсли
	//Исключение
	//	Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	Возврат;
	//КонецПопытки;
	
	
	Если ОбъектДрайвер.Подсоединить("Сканер штрихкода") <> 0 Тогда
		Результат = "мОшибкаПриПодключении";
	КонецЕсли;
	
	ОбъектДрайвер.БитДанных  = БитДанных;
	ОбъектДрайвер.Порт       = Порт;
	ОбъектДрайвер.Скорость   = Скорость;
	//	ОбъектДрайвер.СтопБит    = Объект.Параметры.СтопБит;
	ОбъектДрайвер.СтопСимвол = Суффикс;
	
	ОбъектДрайвер.ИмяСобытия = "ПолученШтрихкод";
	
	Если ОбъектДрайвер.Занять(1) = 0 Тогда
		ОбъектДрайвер.УстройствоВключено = 1;
		ОбъектДрайвер.ПосылкаДанных      = 1;
		ОбъектДрайвер.ОчиститьВход();
		ОбъектДрайвер.ОчиститьВыход();
		Если ОбъектДрайвер.УстройствоВключено <> 1 Тогда
			СканерОтключить(ОбъектДрайвер);
			Сообщить("мОшибкаПриПодключении");
		КонецЕсли;
	Иначе
		//СканерОтключить(ОбъектДрайвер);
		Сообщить("Порт уже занят");
	КонецЕсли;
	
КонецПроцедуры

Процедура СканерОтключить(ОбъектДрайвер) Экспорт

	ОбъектДрайвер.УстройствоВключено = 0;
	ОбъектДрайвер.Освободить();
	ОбъектДрайвер.Отсоединить();

КонецПроцедуры // Отключить()

Процедура ВывестиКУ(Область,Верх = 0,Лево = 0,Высота = 25,Ширина = 25) Экспорт
	
	
	
	КУ = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	КУ.Картинка = БиблиотекаКартинок["плКУ"];
	КУ.Верх = Верх;
	КУ.Лево = Лево;
	КУ.Высота = Высота;
	КУ.Ширина = Ширина;
КонецПроцедуры

//Возвращает "Истина", если в имени пользователя есть "1c" - "c" - в английской и русской раскладке
Функция ИмяПользователяС1С(ВыводитьПредупреждение = Ложь) Экспорт
	Если (Найти(Строка(ИмяПользователя()),"1с") = 0) И (Найти(Строка(ИмяПользователя()),"1c") = 0) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции	

//Возвращает самого верхнего родителя для элемента справочника
Функция глРодитель(Элем) Экспорт
    Возврат ?(ЗначениеЗаполнено(Элем.Родитель),глРодитель(Элем.Родитель),Элем);
КонецФункции

//Возвращает "Истина", если передаваемое ТС имеет тип ТС "Прицеп", "Ложь" - в противном случае
Функция ЭтоПрицеп(ТС) Экспорт
	пВид = ТС.ТипТС.ВидТС;
	Если    пВид=Перечисления.уатВидыТС.Полуприцеп
		или пВид=Перечисления.уатВидыТС.Прицеп
		или пВид=Перечисления.уатВидыТС.ПрицепСамосвал
		или пВид=Перечисления.уатВидыТС.ПрицепЦистерна ТОгда
		Возврат Истина;
	ИНаче
		Возврат Ложь;
	КонецЕСли;
КонецФункции

#Область ФоновыеЗадания

// функция-обертка, облегчает вызов
//быстрый набросов, поддерживается только вызов функции, для процедур можно написать функцию-обертку и не передавать 3 параметр - Адрес
// либо дописать процедуру ВызватьПроцедуруКонфигурации с использованием Выполнить(...) вместо Вычислить(...)
Функция ЗапуститьФоновоеЗадание(пИмяМетода, пМассивПараметровФункции, пИдентификаторФормыИлиАдресХранилища, пКлючФоновогоЗадания) Экспорт
	пПараметры = Новый Структура;
	пПараметры.Вставить("ИмяФукнции", пИмяМетода);
	пПараметры.Вставить("МассивПараметровФункции", пМассивПараметровФункции);
	Если ЗначениеЗаполнено(пИдентификаторФормыИлиАдресХранилища) Тогда
		пАдресХранилищаРезультата = ПоместитьВоВременноеХранилище(Неопределено, пИдентификаторФормыИлиАдресХранилища);
		пПараметры.Вставить("АдресРезультата", пАдресХранилищаРезультата);
	КонецЕсли;
	пМассивПараметров = Новый Массив;
	пМассивПараметров.Добавить(пПараметры);
	мФоновоеЗадание = ФоновыеЗадания.Выполнить("глОбщий.ВыполнитьСКонтекстомКлиента", пМассивПараметров, пКлючФоновогоЗадания, пКлючФоновогоЗадания);
	Возврат мФоновоеЗадание.УникальныйИдентификатор;
КонецФункции

//эта процедура запускается в фоне
Процедура ВыполнитьСКонтекстомКлиента(ВсеПараметры) Экспорт
	//результат функции вызывается через Вычислить(...)
	мРезультат = ВызватьФункциюКонфигурации(ВсеПараметры.ИмяФукнции, ВсеПараметры.МассивПараметровФункции);
	Если ВсеПараметры.Свойство("АдресРезультата") И ЗначениеЗаполнено(ВсеПараметры.АдресРезультата) Тогда
		//если задан адрес - помещаем в него результат
		ПоместитьВоВременноеХранилище(мРезультат, ВсеПараметры.АдресРезультата);
	КонецЕсли;
КонецПроцедуры

Функция ВызватьФункциюКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	Возврат Вычислить(ИмяМетода + "(" + ПараметрыСтрока + ")"); // АПК:488 Исполняемый код безопасен.
КонецФункции

Функция ФоновоеЗаданиеЗавершено(пИдентификаторФоновогоЗадания) Экспорт
	мЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(пИдентификаторФоновогоЗадания);
	Возврат (мЗадание <> Неопределено И (мЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Или мЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно));
КонецФункции

#КонецОбласти
