//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ ДЛЯ НУЖД ЭЛЕКТРОННОЙ ПОЧТЫ//
//==================================================================================

// Функция определяет адрес электронной почты объекта
//
// Параметры
//  Объект - СправочникСсылка, для которого необходимо определить адрес электронной почты
//
Функция уатОпределитьАдресПолучателя(Объект) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|";
	
	Адрес = "";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		СтрокаПоУмолчанию = ТаблицаЗапроса.Найти(Истина, "ЗначениеПоУмолчанию");
		Если СтрокаПоУмолчанию <> Неопределено Тогда
			Адрес = СтрокаПоУмолчанию.Представление;
		Иначе
			Адрес = ТаблицаЗапроса[0].Представление;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭЛЕКТРОННЫМИ ПИСЬМАМИ

// устанавливает текст электронного письма
// Параметры
// ИнтернетПисьмо - ИнтернетПочтовоеСообщение 
// ПисьмоОбъект - Письмо,элемент базы данных 1С
// УстанавливатьВидТекстаПисьма -  флаг установки вида текста письма
//
Процедура уатУстановитьТекстПисьма(ИнтернетПисьмо, ПисьмоОбъект, УстанавливатьВидТекстаПисьма = Истина) Экспорт
	
	ХТМЛ_Текст = "";
	Простой_Текст = "";
	Прочий_Текст = "";
	
	Для каждого ТекстПочтовогоСообщения Из ИнтернетПисьмо.Тексты Цикл
		Если ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			ХТМЛ_Текст = ТекстПочтовогоСообщения.Текст;
		ИначеЕсли ТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Простой_Текст = ТекстПочтовогоСообщения.Текст;
		Иначе
			Прочий_Текст = ТекстПочтовогоСообщения.Текст;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ХТМЛ_Текст) Тогда
		Если УстанавливатьВидТекстаПисьма Тогда
			ПисьмоОбъект.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML;
		КонецЕсли; 
		НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
		НовыйHTMLДокумент.open("text/html");
		НовыйHTMLДокумент.write(ХТМЛ_Текст);
		НовыйHTMLДокумент.close();
		ТегиКартинок = НовыйHTMLДокумент.all.tags("img");
		Для а = 0 По ТегиКартинок.length - 1 Цикл
			ИсточникКартинки = ТегиКартинок.item(а).src;
			Если Найти(ИсточникКартинки, "cid:") = 1 Тогда
				ИсточникКартинки = Сред(ИсточникКартинки, 5);
				ТегиКартинок.item(а).src = ИсточникКартинки;
			КонецЕсли;
		КонецЦикла;
		ПисьмоОбъект.ТекстПисьма = НовыйHTMLДокумент.all.tags("html").item(0).outerHTML;
	ИначеЕсли НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Простой_Текст) Тогда
		Если УстанавливатьВидТекстаПисьма Тогда
			ПисьмоОбъект.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.Текст;
		КонецЕсли; 
		ПисьмоОбъект.ТекстПисьма = СтрЗаменить(Простой_Текст, Символ(13), "");
	ИначеЕсли НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Прочий_Текст) Тогда
		Если УстанавливатьВидТекстаПисьма Тогда
			ПисьмоОбъект.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.Прочее;
		КонецЕсли; 
		ПисьмоОбъект.ТекстПисьма = Прочий_Текст;
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьТекстПисьма()

#Если Клиент Тогда
	
	// Функция проверяет наличие доступных учетных записей для отправки писем
	// для текущего пользователя, и при отсутствии таковых позволяет ввести новую.
	//
	// Параметры
	//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
	//  Отказ - Булево, параметр отказа от выполнения операции
	//
	// Возвращаемое значение:
	//   СписокДоступныхЗаписей - СписокЗначений, список доступных учетных записей для отправки электронных писем
	//
	Функция уатПроверитьУчетныеЗаписиДляОтправкиПисем(ТекущийПользователь, Отказ = Ложь) Экспорт
		
		СписокДоступныхЗаписей = уатПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Отправка;
		Если СписокДоступныхЗаписей.Количество() = 0 Тогда
			ОтветНаВопрос = Вопрос("У вас нет ни одной доступной учетной записи для отправки писем из встроенного почтового клиента.
			|Создать новую?", РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат СписокДоступныхЗаписей;
			КонецЕсли;
			
			Справочники.уатУчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент().ПолучитьФорму().ОткрытьМодально();
			СписокДоступныхЗаписей = уатПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Отправка;
			Если СписокДоступныхЗаписей.Количество() = 0 Тогда
				Предупреждение("У вас нет ни одной доступной учетной записи для отправки писем из встроенного почтового клиента.");
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат СписокДоступныхЗаписей;
		
	КонецФункции
	
	// Процедура открывает форму списка электронных писем с отбором по
	// определенному объекту
	//
	// Параметры
	//  Ссылка - ссылка на объект, по которому необходимо просмотреть письма
	//
	Процедура уатОткрытьЭлектронныеПисьмаПоОбъекту(Ссылка) Экспорт
		
		Если НЕ Константы.уатИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
			Предупреждение("Данная операция доступна только при использовании встроенного почтового клиента.");
			Возврат;
		КонецЕсли;
		
		СписокПисем = Обработки.уатПоискЭлектронныхПисемПоОбъектам.Создать();
		
		Если ТипЗнч(Ссылка) = Тип("СписокЗначений") Тогда
			Если Ссылка.Количество() = 1 Тогда
				СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.ВидСравнения = ВидСравнения.Равно;
				СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.Значение = Ссылка[0].Значение;
			Иначе // Предполагается что > 1
				СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.ВидСравнения = ВидСравнения.ВСписке;
				СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.Значение = Ссылка;
			КонецЕсли; 
		Иначе
			СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.ВидСравнения = ВидСравнения.Равно;
			СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.Значение = Ссылка;
		КонецЕсли; 
		
		ФормаСписка = СписокПисем.ПолучитьФорму();
		СписокПисем.ОбновитьТаблицуПисем(ФормаСписка.ЭлектронныеПисьмаСписок);
		ФормаСписка.Открыть();
		
	КонецПроцедуры
	
	// Процедура открывает форму нового письма встроенного почтового клиента
	// и проставляет в качестве получателя переданный в качестве параметра объект
	//
	// СправочникСсылка - получатель письма
	// глТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
	//
	Процедура уатНаписатьПисьмоОбъекту(Объект, ТекущийПользователь) Экспорт
		
		Адрес = уатОпределитьАдресПолучателя(Объект);
		
		Если НЕ Константы.уатИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Адрес", Адрес);
			СтруктураПараметров.Вставить("Представление", Объект.Наименование);
			уатОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров);
			
		Иначе
			
			СтруктураНовогоПисьма = Новый Структура;
			Если НЕ ПустаяСтрока(Адрес) Тогда
				СписокКому = Новый СписокЗначений;
				СписокКому.Добавить(Адрес, Объект.Наименование);
				СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
			КонецЕсли; 
			
			уатНаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,, (НЕ ПустаяСтрока(Адрес)));
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	// Процедура выполняет команду системы mailto с переданными параметрами
	//
	// Параметры
	//  СтруктураПараметров - структура параметров для команды mailto
	//
	//
	Процедура уатОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров) Экспорт
		
		Перем Адрес;
		Перем Представление;
		Перем Тема;
		Перем Текст;
		
		Если НЕ СтруктураПараметров.Свойство("Адрес", Адрес) Тогда
			Адрес = "";
		КонецЕсли; 
		Если НЕ СтруктураПараметров.Свойство("Представление", Представление) Тогда
			Представление = "";
		КонецЕсли; 
		Если НЕ СтруктураПараметров.Свойство("Тема", Тема) Тогда
			Тема = "";
		КонецЕсли; 
		Если НЕ СтруктураПараметров.Свойство("Текст", Текст) Тогда
			Текст = "";
		КонецЕсли; 
		
		ТекстСообщения = СтрЗаменить(Текст, Символы.ПС, Символы.ВТаб);
		
		СтрокаВыполнения = "mailto:";
		СтрокаВыполнения = СтрокаВыполнения + Представление + "<" + Адрес + ">";
		СтрокаВыполнения = СтрокаВыполнения + "?subject=" + ?(ПустаяСтрока(СокрЛП(Тема))," ",СокрЛП(Тема));
		СтрокаВыполнения = СтрокаВыполнения + "&body=" + СокрЛП(Текст);
		
		WshShell = Новый COMObject("WScript.Shell");
		
		// Максимально допустимое число символов строки при использовании данного COM-объекта равно 2021
		Попытка
			WshShell.Run("""" + СтрокаВыполнения + """");
		Исключение
			ОбщаяДлинаСистемнойСтрокиВыполнения = СтрДлина(СтрокаВыполнения);
			ОбщаяДлинаСлужебныхСимволов = СтрДлина(СтрокаВыполнения) - СтрДлина(СокрЛП(ТекстСообщения));
			ПревышениеСтроки = ОбщаяДлинаСистемнойСтрокиВыполнения - 2021;
			ДопустимаяДлинаТекста = 2021 - ОбщаяДлинаСлужебныхСимволов;
			ОбщегоНазначения.СообщитьОбОшибке("Вы можете ввести в текст текущего письма только " + ДопустимаяДлинаТекста + " символов, а у вас - " + СтрДлина(СокрЛП(ТекстСообщения)));
			СтрокаВопроса = "Количество символов в тексте письма превышает допустимое." + Символы.ПС + "Отбросить последние " + ПревышениеСтроки + " символов и оправить?";
			ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				СтрокаВыполнения = Лев(СтрокаВыполнения, (ОбщаяДлинаСистемнойСтрокиВыполнения - ПревышениеСтроки));
				Попытка
					WshShell.Run("""" + СтрокаВыполнения + """");
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
		КонецПопытки;
		
	КонецПроцедуры
	
	// Процедура производит отправку пачки электронных писем
	//
	// Параметры
	//  МассивПисем - массив, электронные письма к отправке
	//  СоответствиеТекстовЭлектронныхПисем, соответствие, требуется для передачи в качестве параметра в процедуру отправки
	//  ТекущийПользователь - СправочникСсылка.Пользователи
	//
	Процедура уатОтправитьПисьма(МассивПисем, СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь) Экспорт
		
		Если ТипЗнч(МассивПисем) <> Тип("Массив") Тогда
			Возврат;
		КонецЕсли; 
		
		ИзмененныйМассивПисем = Новый Массив;
		
		ДоступныеУчетныеЗаписи = уатПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь);
		Для каждого Письмо Из МассивПисем Цикл
			
			Если Письмо.СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное ИЛИ Письмо.СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное Тогда
				Сообщить("" + СокрЛП(Письмо) + " исключено из списка отправки, отправлять можно только сохраненные или исходящие письма.");
				Продолжить;;
			КонецЕсли;
			
			Если Письмо.ПометкаУдаления Тогда
				Сообщить("" + СокрЛП(Письмо) + " исключено из списка отправки, письмо помечено на удаление.");
				Продолжить;
			КонецЕсли;
			
			Если Письмо.КомуТЧ.Количество() = 0 Тогда
				Сообщить("" + СокрЛП(Письмо) + " исключено из списка отправки, не указан ни один получатель.");
				Продолжить;
			КонецЕсли;
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Письмо.УчетнаяЗапись) Тогда
				Сообщить("" + СокрЛП(Письмо) + " исключено из списка отправки, не указана учетная запись.");
				Продолжить;
			КонецЕсли;
			
			Если ДоступныеУчетныеЗаписи.Транспорт.НайтиПоЗначению(Письмо.УчетнаяЗапись) = Неопределено Тогда
				Сообщить("" + СокрЛП(Письмо) + " исключено из списка отправки, Вам запрещено осуществлять транспорт электронных писем с учетной записью """ + Письмо.УчетнаяЗапись.Наименование + """.");
				Продолжить;
			КонецЕсли;
			
			ОбъектПисьмо = Письмо.ПолучитьОбъект();
			
			ОбъектПисьмо.СтатусПисьма = Перечисления.уатСтатусыПисем.Исходящее;
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбъектПисьмо.Ответственный) Тогда
				ОбъектПисьмо.Ответственный = ТекущийПользователь;
			КонецЕсли; 
			
			Попытка
				ОбъектПисьмо.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (СокрЛП(Письмо) + " исключено из списка отправки."));
				Продолжить;;
			КонецПопытки;
			
			ИзмененныйМассивПисем.Добавить(ОбъектПисьмо.Ссылка);
			
		КонецЦикла;
		
		Если ИзмененныйМассивПисем.Количество() > 0 Тогда
			уатПолучениеОтправкаПисем(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, , ИзмененныйМассивПисем, Истина);
		КонецЕсли; 
		
	КонецПроцедуры
	
#КонецЕсли

// Функция создает новый объект Документ.уатЭлектронноеПисьмо и заполняет
// его данными из объекта ИнтернетПочтовоеСообщение, только без вложений
//
// Параметры
//  ИнтернетПисьмо - ИнтернетПочтовоеСообщение
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписи, учетная запись письма
//  ТекущийПользователь - СправочникСсылка.Пользователи
//  мРазделительАдресов - Строка, разделитель адресов
//  ИсключениеТранзакции - булево, флаг ошибки
//
// Возвращаемое значение:
//   ДокументОбъект.уатЭлектронноеПисьмо
//
Функция уатПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(ИнтернетПисьмо, УчетнаяЗапись = Неопределено, ТекущийПользователь, мРазделительАдресов = ",", ИсключениеТранзакции = Ложь)
	
	Письмо = Документы.уатЭлектронноеПисьмо.СоздатьДокумент();
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.уатУчетныеЗаписиЭлектроннойПочты") Тогда
		УчетнаяЗапись = Справочники.уатУчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент();
	Иначе
		Письмо.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли; 
	
	ТаблицаАдресов = Новый ТаблицаЗначений;
	ТаблицаАдресов.Колонки.Добавить("ПредставлениеОбъекта" , Новый ОписаниеТипов("Строка"));
	ТаблицаАдресов.Колонки.Добавить("АдресЭлектроннойПочты", Новый ОписаниеТипов("Строка"));
	
	Для каждого Получатель Из ИнтернетПисьмо.Получатели Цикл
		Если Получатель.Адрес = УчетнаяЗапись.АдресЭлектроннойПочты Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТаблицы = ТаблицаАдресов.Добавить();
		СтрокаТаблицы.АдресЭлектроннойПочты = Получатель.Адрес;
	КонецЦикла;
	
	Для каждого Получатель Из ИнтернетПисьмо.Копии Цикл
		Если Получатель.Адрес = УчетнаяЗапись.АдресЭлектроннойПочты Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТаблицы = ТаблицаАдресов.Добавить();
		СтрокаТаблицы.АдресЭлектроннойПочты = Получатель.Адрес;
	КонецЦикла;
	
	ТаблицаКонтактнойИнформации = уатПоискВКонтактнойИнформации(ТаблицаАдресов);
	
	Для каждого Получатель Из ИнтернетПисьмо.Получатели Цикл
		
		СтрокаТЧ = Письмо.КомуТЧ.Добавить();
		СтрокаТЧ.АдресЭлектроннойПочты = Получатель.Адрес;
		
		Если НЕ ПустаяСтрока(Письмо.Кому) Тогда
			Письмо.Кому = Письмо.Кому + мРазделительАдресов + " ";
		КонецЕсли;
		
		Если Получатель.Адрес = УчетнаяЗапись.АдресЭлектроннойПочты Тогда
			
			СтрокаТЧ.Представление = УчетнаяЗапись.Наименование;
			Письмо.Кому = Письмо.Кому + СтрокаТЧ.Представление + " <" + СтрокаТЧ.АдресЭлектроннойПочты + ">";
			
		Иначе
			
			СтрокиТаблицыКонтактнойИнформации = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Представление", Получатель.Адрес));
			Если СтрокиТаблицыКонтактнойИнформации.Количество() = 1 Тогда
				СтрокаТЧ.Представление = СтрокиТаблицыКонтактнойИнформации[0].ПредставлениеОбъекта;
			Иначе
				СтрокаТЧ.Представление = "";
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаТЧ.Представление) Тогда
				Письмо.Кому = Письмо.Кому + СтрокаТЧ.АдресЭлектроннойПочты;
			Иначе
				Письмо.Кому = Письмо.Кому + СтрокаТЧ.Представление + " <" + СтрокаТЧ.АдресЭлектроннойПочты + ">";
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого Получатель Из ИнтернетПисьмо.Копии Цикл
		
		СтрокаТЧ = Письмо.КопииТЧ.Добавить();
		СтрокаТЧ.АдресЭлектроннойПочты = Получатель.Адрес;
		
		Если НЕ ПустаяСтрока(Письмо.Копии) Тогда
			Письмо.Копии = Письмо.Копии + мРазделительАдресов + " ";
		КонецЕсли;
		
		Если Получатель.Адрес = УчетнаяЗапись.АдресЭлектроннойПочты Тогда
			
			СтрокаТЧ.Представление = УчетнаяЗапись.Наименование;
			Письмо.Копии = Письмо.Копии + СтрокаТЧ.Представление + " <" + СтрокаТЧ.АдресЭлектроннойПочты + ">";
			
		Иначе
			
			СтрокиТаблицыКонтактнойИнформации = ТаблицаКонтактнойИнформации.НайтиСтроки(Новый Структура("Представление", Получатель.Адрес));
			Если СтрокиТаблицыКонтактнойИнформации.Количество() = 1 Тогда
				СтрокаТЧ.Представление = СтрокиТаблицыКонтактнойИнформации[0].ПредставлениеОбъекта;
			Иначе
				СтрокаТЧ.Представление = "";
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаТЧ.Представление) Тогда
				Письмо.Копии = Письмо.Копии + СтрокаТЧ.АдресЭлектроннойПочты;
			Иначе
				Письмо.Копии = Письмо.Копии + СтрокаТЧ.Представление + " <" + СтрокаТЧ.АдресЭлектроннойПочты + ">";
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Письмо.ГруппаУчетнойЗаписи = УчетнаяЗапись.ГруппаВходящие;
	Если ТипЗнч(ИнтернетПисьмо.Отправитель) = Тип("Строка") Тогда
		Письмо.ОтправительАдресЭлектроннойПочты = ИнтернетПисьмо.Отправитель;
	Иначе
		Письмо.ОтправительАдресЭлектроннойПочты = ИнтернетПисьмо.Отправитель.Адрес;
	КонецЕсли;
	
	Письмо.ОтправительИмя = ИнтернетПисьмо.ИмяОтправителя;
	
	Если ПустаяСтрока(Письмо.ОтправительИмя) Тогда
		Письмо.ОтправительПредставление = Письмо.ОтправительАдресЭлектроннойПочты;
	Иначе
		Письмо.ОтправительПредставление = Письмо.ОтправительИмя + " <" + Письмо.ОтправительАдресЭлектроннойПочты + ">";
	КонецЕсли;
	
	Письмо.Тема = ИнтернетПисьмо.Тема;
	Если Письмо.Предмет = Неопределено Тогда
		Письмо.Предмет = "";
	КонецЕсли; 
	
	Письмо.СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное;
	Письмо.Дата            = ТекущаяДата();
	Письмо.ДатаОтправления = ИнтернетПисьмо.ДатаОтправления;
	Письмо.ДатаТранспорта  = ТекущаяДата();
	
	уатУстановитьТекстПисьма(ИнтернетПисьмо, Письмо);
	
	Если ИнтернетПисьмо.Вложения.Количество() = 0 Тогда
		уатОчиститьПисьмо(ИнтернетПисьмо);
		Письмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ИнтернетПисьмо, Новый СжатиеДанных());
	КонецЕсли; 
	
	Письмо.НеРассмотрено = Ложь;
	
	Если ИнтернетПисьмо.Вложения.Количество() > 0 И НЕ ИсключениеТранзакции Тогда
		Для каждого Вложение Из ИнтернетПисьмо.Вложения Цикл
			Если НЕ ПустаяСтрока(Вложение.Идентификатор) Тогда
				Письмо.ЕстьВложения = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Письмо.ИдентификаторПисьма = ИнтернетПисьмо.ИдентификаторСообщения;
	
	Возврат Письмо;
	
КонецФункции

// Функция определяет, надо ли принимать письмо для случаев, когда в настройках
//  учетной записи установлено, что письма не удалять с сервера
//
// Параметры
//  УчетнаяЗапись - СправочникСсылка.уатУчетныеЗаписиЭлектроннойПочты
//  ИнтернетПисьмо - ИнтернетПисьмо, которое анализируем
//  МассивПисемДляУдаления - Массив, который заполняем, если письмо необходимо удалить с сервера
//
// Возвращаемое значение:
//   Булево
//
Функция уатНадоПриниматьПисьмо(УчетнаяЗапись, ИнтернетПисьмо, МассивПисемДляУдаления)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИнтернетПисьмо.ИдентификаторСообщения);
	Запрос.УстановитьПараметр("ДатаОтправления"       , ИнтернетПисьмо.ДатаОтправления);
	Запрос.УстановитьПараметр("УчетнаяЗапись"         , УчетнаяЗапись);
	Запрос.УстановитьПараметр("Полученное"            , Перечисления.уатСтатусыПисем.Полученное);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатЭлектронноеПисьмо.Дата              КАК ДатаРегистрацииПисьма,
	|	уатЭлектронноеПисьмо.ПочтовоеСообщение КАК ОбъектЭлектронноеПисьмо
	|	
	|ИЗ
	|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
	|ГДЕ
	|	уатЭлектронноеПисьмо.СтатусПисьма = &Полученное
	|	И
	|	уатЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись
	|";
	
	Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИнтернетПисьмо.ДатаОтправления) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И
		|	уатЭлектронноеПисьмо.ДатаОтправления = &ДатаОтправления
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|	И
	|	уатЭлектронноеПисьмо.ИдентификаторПисьма = &ИдентификаторСообщения
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			Если НЕ УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере Тогда
				ОбъектЭлектронноеПисьмо = ВыборкаЗапроса.ОбъектЭлектронноеПисьмо.Получить();
				Если ТипЗнч(ОбъектЭлектронноеПисьмо) = Тип("ИнтернетПочтовоеСообщение") Тогда
					МассивПисемДляУдаления.Добавить(ОбъектЭлектронноеПисьмо);
				КонецЕсли; 
			Иначе
				Если УчетнаяЗапись.УдалятьПисьмаССервераЧерез Тогда
					Если УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера = 0 Тогда
						ОбъектЭлектронноеПисьмо = ВыборкаЗапроса.ОбъектЭлектронноеПисьмо.Получить();
						Если ТипЗнч(ОбъектЭлектронноеПисьмо) = Тип("ИнтернетПочтовоеСообщение") Тогда
							МассивПисемДляУдаления.Добавить(ОбъектЭлектронноеПисьмо);
						КонецЕсли;
					Иначе
						Если (НачалоДня(ВыборкаЗапроса.ДатаРегистрацииПисьма) + УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера*24*60*60) < НачалоДня(ТекущаяДата()) Тогда
							ОбъектЭлектронноеПисьмо = ВыборкаЗапроса.ОбъектЭлектронноеПисьмо.Получить();
							Если ТипЗнч(ОбъектЭлектронноеПисьмо) = Тип("ИнтернетПочтовоеСообщение") Тогда
								МассивПисемДляУдаления.Добавить(ОбъектЭлектронноеПисьмо);
							КонецЕсли;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

// Процедура осуществляет транспорт писем
//
// Параметры
//  СоответствиеТекстовЭлектронныхПисем - Соответствие, текстов писем и ДокументСсылка.уатЭлектронноеПисьмо
//  ТекущийПользователь - СправочникСсылка.Пользователи, Текущий пользователь системы
//  МассивУчетныхЗаписей - Массив, учетные записи по которым необходимо осуществить транспорт
//  МассивПисем - Массив, документы уатЭлектронноеПисьмо, которые необходимо отправить
//  Отправить - Булево, действие "отправить письма"
//  Получить - Булево, действие "получить письма"
//  ПоказыватьОкноВыполнения - Булево, показывать окно выполнения получения/отправки писем
//
// Возвращаемое значение:
//   НЕТ
//
Процедура уатПолучениеОтправкаПисем(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, МассивУчетныхЗаписей = Неопределено, МассивПисем = Неопределено, Отправить = Ложь, Получить = Ложь, ПоказыватьОкноВыполнения = Истина) Экспорт
	
	Перем мРазделительАдресов;
	
	Если НЕ Константы.уатИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		Сообщить("В настройках учета не установлено использование встроенного почтового клиента. Действие отправка/получение писем не выполнено.");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	мРазделительАдресов = ",";
	
	СписокДоступныхУчетныхЗаписей = уатПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Транспорт;
	
	ТекстОшибок = "";
	
	// Получим соответствие всех учетных записей, по которым надо производить действия отправки и получения
	СоответствиеУчетныхЗаписейВсего = Новый Соответствие;
	
	Если Отправить Тогда
		
		Запрос = Новый Запрос;
		
		// Дерево на отправку
		Если МассивПисем = Неопределено И МассивУчетныхЗаписей = Неопределено Тогда
			
			Запрос.УстановитьПараметр("Исходящее", Перечисления.уатСтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	уатЭлектронноеПисьмо.Ссылка        КАК Письмо
			|ИЗ
			|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
			|
			|ГДЕ
			|	уатЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И
			|	уатЭлектронноеПисьмо.УчетнаяЗапись В (&СписокВладельцев)
			|
			|ИТОГИ ПО
			|	УчетнаяЗапись
			|";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		ИначеЕсли ТипЗнч(МассивПисем) = Тип("Массив") И МассивУчетныхЗаписей = Неопределено Тогда
			
			Запрос.УстановитьПараметр("Исходящее", Перечисления.уатСтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокПисем", МассивПисем);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	уатЭлектронноеПисьмо.Ссылка        КАК Письмо
			|ИЗ
			|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
			|
			|ГДЕ
			|	уатЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И
			|	уатЭлектронноеПисьмо.Ссылка В (&СписокПисем)
			|	И
			|	уатЭлектронноеПисьмо.УчетнаяЗапись В (&СписокВладельцев)
			|
			|ИТОГИ ПО
			|	УчетнаяЗапись
			|";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		ИначеЕсли МассивПисем = Неопределено И ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
			
			Запрос.УстановитьПараметр("Исходящее", Перечисления.уатСтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	уатЭлектронноеПисьмо.Ссылка        КАК Письмо
			|ИЗ
			|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
			|
			|ГДЕ
			|	уатЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И
			|	уатЭлектронноеПисьмо.УчетнаяЗапись В (&СписокВладельцевМассив)
			|	И
			|	уатЭлектронноеПисьмо.УчетнаяЗапись В (&СписокВладельцев)
			|
			|ИТОГИ ПО
			|	УчетнаяЗапись
			|";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		ИначеЕсли ТипЗнч(МассивПисем) = Тип("Массив") И ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
			
			Запрос.УстановитьПараметр("Исходящее", Перечисления.уатСтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СписокПисем", МассивПисем);
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	уатЭлектронноеПисьмо.Ссылка        КАК Письмо
			|ИЗ
			|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
			|
			|ГДЕ
			|	уатЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И
			|	уатЭлектронноеПисьмо.Ссылка В (&СписокПисем)
			|	И
			|	уатЭлектронноеПисьмо.УчетнаяЗапись В (&СписокВладельцевМассив)
			|	И
			|	уатЭлектронноеПисьмо.УчетнаяЗапись В (&СписокВладельцев)
			|
			|ИТОГИ ПО
			|	УчетнаяЗапись
			|";
			
			ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			
		Иначе
			Возврат;
		КонецЕсли;
		
		МассивУчетныхЗаписейОтправка = ДеревоУчетныхЗаписейИПисем.Строки.ВыгрузитьКолонку("УчетнаяЗапись");
		Для каждого ЭлементМассива Из МассивУчетныхЗаписейОтправка Цикл
			СоответствиеУчетныхЗаписейВсего.Вставить(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если Получить Тогда
		
		// Заполним массив учетных записей на получение писем
		Если ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
			Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатУчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
			|ИЗ
			|	Справочник.уатУчетныеЗаписиЭлектроннойПочты КАК уатУчетныеЗаписиЭлектроннойПочты
			|
			|ГДЕ
			|	уатУчетныеЗаписиЭлектроннойПочты.Ссылка В(&СписокВладельцевМассив)
			|	И
			|	уатУчетныеЗаписиЭлектроннойПочты.Ссылка В(&СписокВладельцев)
			|";
			
			МассивУчетныхЗаписейПолучение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
			
		ИначеЕсли МассивУчетныхЗаписей = Неопределено Тогда
			МассивУчетныхЗаписейПолучение = СписокДоступныхУчетныхЗаписей.ВыгрузитьЗначения();
		Иначе
			Возврат;
		КонецЕсли;
		
		Для каждого ЭлементМассива Из МассивУчетныхЗаписейПолучение Цикл
			СоответствиеУчетныхЗаписейВсего.Вставить(ЭлементМассива, ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	// Определим те учетные записи, которые были заявлены во входящих параметрах
	// и проверим их на возможность отправки, что бы пользователю было понятно
	// почему некоторые письма не отправились
	
	СоответствиеЗаявленныхУчетныхЗаписей = Новый Соответствие;
	
	Если ТипЗнч(МассивПисем) = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Исходящее", Перечисления.уатСтатусыПисем.Исходящее);
		Запрос.УстановитьПараметр("СписокПисем", МассивПисем);
		Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);
		Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
		|
		|ГДЕ
		|	уатЭлектронноеПисьмо.Ссылка В (&СписокПисем)
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеЗаявленныхУчетныхЗаписей.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗапись);
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив") Тогда
		Для каждого ЭлементМассива Из МассивУчетныхЗаписей Цикл
			СоответствиеЗаявленныхУчетныхЗаписей.Вставить(ЭлементМассива, ЭлементМассива);
		КонецЦикла; 
	КонецЕсли;
	
	#Если Клиент Тогда
		// Пора показывать форму состояния отправки/получения
		ФормаПрогрессора = ПолучитьОбщуюФорму("уатФормаИндикацииПроцессаПолученияОтправкиПисемЭлектроннойПочты",,"УникальнаяФорма");
		ФормаПрогрессора.Задачи.Очистить();
		
		Если ПоказыватьОкноВыполнения Тогда
			// Выведем те учетные записи, которые не прошли по заявленным
			Для каждого ЭлементСоответствия Из СоответствиеЗаявленныхУчетныхЗаписей Цикл
				
				Если СписокДоступныхУчетныхЗаписей.НайтиПоЗначению(ЭлементСоответствия.Ключ) = Неопределено Тогда
					
					ТекстОшибок = Символы.ПС + ТекстОшибок + ("Заявлена " + ЭлементСоответствия.Значение.Наименование + " <" + ЭлементСоответствия.Значение.АдресЭлектроннойПочты + ">" + " - нет прав доступа для транспорта писем.");
					
					НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
					НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
					НоваяЗадача.Состояние = Перечисления.уатСостоянияСобытий.Отменено;
					Если Отправить И Получить Тогда
						НоваяЗадача.Задача    = "Отправка и получение";
					ИначеЕсли Отправить Тогда
						НоваяЗадача.Задача    = "Отправка";
					ИначеЕсли Получить Тогда
						НоваяЗадача.Задача    = "Получение";
					КонецЕсли; 
					
					Продолжить;
					
				КонецЕсли;
				
				Если СоответствиеУчетныхЗаписейВсего.Получить(ЭлементСоответствия.Ключ) = Неопределено Тогда
					НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
					НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
					НоваяЗадача.Состояние = Перечисления.уатСостоянияСобытий.Завершено;
					Если Отправить И Получить Тогда
						НоваяЗадача.Задача    = "Отправка и получение";
					ИначеЕсли Отправить Тогда
						НоваяЗадача.Задача    = "Отправка";
					ИначеЕсли Получить Тогда
						НоваяЗадача.Задача    = "Получение";
					КонецЕсли; 
				КонецЕсли;
				
			КонецЦикла;
			
			// Покажем в таблице значений учетные записи, по которым нет писем, но они должны обрабатываться, как обработанные
			Если МассивУчетныхЗаписей = Неопределено Тогда
				Для каждого ЭлементСписка Из СписокДоступныхУчетныхЗаписей Цикл
					Если СоответствиеУчетныхЗаписейВсего.Получить(ЭлементСписка.Значение) = Неопределено И ФормаПрогрессора.Задачи.Найти(ЭлементСписка.Значение, "Объект") = Неопределено Тогда
						НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
						НоваяЗадача.Объект    = ЭлементСписка.Значение;
						НоваяЗадача.Состояние = Перечисления.уатСостоянияСобытий.Завершено;
						Если Отправить И Получить Тогда
							НоваяЗадача.Задача    = "Отправка и получение";
						ИначеЕсли Отправить Тогда
							НоваяЗадача.Задача    = "Отправка";
						ИначеЕсли Получить Тогда
							НоваяЗадача.Задача    = "Получение";
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЕсли;
		
		ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ФормаПрогрессора.ЭлементыФормы.ПолеОшибок.УстановитьТекст("");
		
	#КонецЕсли
	
	Если СоответствиеУчетныхЗаписейВсего.Количество() > 0 Тогда
		
		Если ПоказыватьОкноВыполнения Тогда
			
			#Если Клиент Тогда
				Для каждого ЭлементСоответствия Из СоответствиеУчетныхЗаписейВсего Цикл
					НоваяЗадача = ФормаПрогрессора.Задачи.Добавить();
					НоваяЗадача.Объект    = ЭлементСоответствия.Ключ;
					НоваяЗадача.Состояние = Перечисления.уатСостоянияСобытий.Запланировано;
					Если Отправить И Получить Тогда
						НоваяЗадача.Задача    = "Отправка и получение";
					ИначеЕсли Отправить Тогда
						НоваяЗадача.Задача    = "Отправка";
					ИначеЕсли Получить Тогда
						НоваяЗадача.Задача    = "Получение";
					КонецЕсли;
				КонецЦикла;
				
				ФормаПрогрессора.Открыть();
			#КонецЕсли
			
		КонецЕсли; 
		
		Для каждого ЭлементСоответствия Из СоответствиеУчетныхЗаписейВсего Цикл
			
			УчетнаяЗапись = ЭлементСоответствия.Значение;
			#Если Клиент Тогда
				Если ПоказыватьОкноВыполнения Тогда
					СтрокаТаблицыСостояния = ФормаПрогрессора.Задачи.Найти(УчетнаяЗапись, "Объект");
				КонецЕсли; 
				
				ФормаПрогрессора.ЭлементыФормы.Индикатор.МинимальноеЗначение = 0;
				ФормаПрогрессора.ЭлементыФормы.Индикатор.Значение = 0;
				ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.Заголовок = "Подключение к " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
			#КонецЕсли
			
			// Пробуем подключиться
			Профиль = Новый ИнтернетПочтовыйПрофиль;
			
			Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
			Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
			Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
				Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
			КонецЕсли; 
			Профиль.Пароль           = УчетнаяЗапись.Пароль;
			Профиль.Пользователь     = УчетнаяЗапись.Логин;
			Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
			Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
			
			Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
				Профиль.ПарольSMTP         = УчетнаяЗапись.ПарольSMTP;
				Профиль.ПользовательSMTP   = УчетнаяЗапись.ЛогинSMTP;
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login; 
			Иначе
				Профиль.ПарольSMTP       = УчетнаяЗапись.Пароль;
				Профиль.ПользовательSMTP = УчетнаяЗапись.Логин;
			КонецЕсли; 
			
			ИнтернетПочта = Новый ИнтернетПочта;
			
			Попытка
				ИнтернетПочта.Подключиться(Профиль);
			Исключение
				Если ПоказыватьОкноВыполнения Тогда
					#Если Клиент Тогда
						СтрокаТаблицыСостояния.Состояние = Перечисления.уатСостоянияСобытий.Отменено;
					#КонецЕсли
					ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
				КонецЕсли; 
				Продолжить;
			КонецПопытки;
			
			// Сначала проверим отправку
			Если Отправить Тогда
				
				#Если Клиент Тогда
					ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.Заголовок = "Отправка сообщений " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
				#КонецЕсли
				
				Если ТипЗнч(ДеревоУчетныхЗаписейИПисем) = Тип("ДеревоЗначений") Тогда
					
					СтрокаДереваУчетнойЗаписи = ДеревоУчетныхЗаписейИПисем.Строки.Найти(УчетнаяЗапись, "УчетнаяЗапись");
					
					Если СтрокаДереваУчетнойЗаписи <> Неопределено Тогда
						
						#Если Клиент Тогда
							ФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = СтрокаДереваУчетнойЗаписи.Строки.Количество();
							ФормаПрогрессора.ЭлементыФормы.Индикатор.МинимальноеЗначение = 0;
							ФормаПрогрессора.ЭлементыФормы.Индикатор.Значение = 0;
						#КонецЕсли
						
						Для каждого СтрокаПисьма Из СтрокаДереваУчетнойЗаписи.Строки Цикл
							
							#Если Клиент Тогда
								ФормаПрогрессора.ЭлементыФормы.Индикатор.Значение = СтрокаДереваУчетнойЗаписи.Строки.Индекс(СтрокаПисьма) + 1;
								
								Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаПисьма.Письмо.ИмяФайлаРедактированияХТМЛТекста) Тогда
									Сообщить("У письма " + СокрЛП(СтрокаПисьма.Письмо) + " не закончено редактирование текста внешним HTML редактором. Письмо не отправлено.");
									Продолжить;
								КонецЕсли; 
								
							#КонецЕсли
							ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
							
							Письмо = СтрокаПисьма.Письмо;
							
							// Вложения
							Запрос = Новый Запрос;
							
							Запрос.УстановитьПараметр("ВыбОбъект", Письмо);
							Запрос.УстановитьПараметр("ПустаяСтрока", "");
							
							Запрос.Текст = "
							|ВЫБРАТЬ РАЗРЕШЕННЫЕ
							|	уатВложенияЭлектронныхПисем.Ссылка       КАК Ссылка,
							|	уатВложенияЭлектронныхПисем.Наименование КАК Наименование,
							|	уатВложенияЭлектронныхПисем.ИмяФайла     КАК ИмяФайла,
							|	уатВложенияЭлектронныхПисем.Хранилище    КАК ХранилищеЗначения
							|ИЗ
							|	Справочник.уатВложенияЭлектронныхПисем КАК уатВложенияЭлектронныхПисем
							|ГДЕ
							|	уатВложенияЭлектронныхПисем.Объект = &ВыбОбъект
							|	И
							|	уатВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма = &ПустаяСтрока
							|";
							
							Выборка = Запрос.Выполнить().Выбрать();
							Пока Выборка.Следующий() Цикл
								ИмяФайла = "";
								Если НЕ ПустаяСтрока(Выборка.ИмяФайла) Тогда
									ИмяФайла = Выборка.ИмяФайла;
								ИначеЕсли НЕ ПустаяСтрока(Выборка.Наименование) Тогда
									ИмяФайла = Выборка.Наименование;
								КонецЕсли;
								ДвоичныеДанные = Выборка.ХранилищеЗначения.Получить();
								Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
									ПочтовоеСообщение.Вложения.Добавить(Выборка.ХранилищеЗначения.Получить(), ИмяФайла);
								КонецЕсли; 
							КонецЦикла; 
							
							// Общие свойства письма
							ПочтовоеСообщение.ИмяОтправителя  = Письмо.ОтправительИмя;
							ПочтовоеСообщение.Отправитель     = Письмо.ОтправительАдресЭлектроннойПочты;
							ПочтовоеСообщение.Тема            = Письмо.Тема;
							
							Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
								ПочтовоеСообщение.Получатели.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
							КонецЦикла; 
							Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
								ПочтовоеСообщение.Копии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
							КонецЦикла; 
							Для каждого СтрокаТЧ Из Письмо.СкрытыеКопииТЧ Цикл
								ПочтовоеСообщение.СлепыеКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты);
							КонецЦикла;
							
							ТекстПисьмаИД = Письмо.ТекстПисьма;
							Если Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
								ПочтовоеСообщение.Тексты.Добавить(уатПропарситьHTMLИДВ_ТекстКартинки(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Письмо, ТекстПисьмаИД), ТипТекстаПочтовогоСообщения.HTML);
							ИначеЕсли Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML Тогда
								ПочтовоеСообщение.Тексты.Добавить(ТекстПисьмаИД, ТипТекстаПочтовогоСообщения.HTML);
							Иначе
								ПочтовоеСообщение.Тексты.Добавить(ТекстПисьмаИД, ТипТекстаПочтовогоСообщения.ПростойТекст);
							КонецЕсли; 
							
							Попытка
								
								ИнтернетПочта.Послать(ПочтовоеСообщение);
								ОбъектПисьмо = Письмо.ПолучитьОбъект();
								ОбъектПисьмо.СтатусПисьма    = Перечисления.уатСтатусыПисем.Отправленное;
								ОбъектПисьмо.ДатаТранспорта  = ТекущаяДата();
								ОбъектПисьмо.ДатаОтправления = ТекущаяДата();
								
								уатОчиститьПисьмо(ПочтовоеСообщение);
								
								ОбъектПисьмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ПочтовоеСообщение, Новый СжатиеДанных());
								
								Попытка
									ОбъектПисьмо.Записать();
								Исключение
								КонецПопытки;
								
							Исключение
								
								Если ПоказыватьОкноВыполнения Тогда
									#Если Клиент Тогда
										СтрокаТаблицыСостояния.Состояние = Перечисления.уатСостоянияСобытий.Отменено;
									#КонецЕсли
									ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
								КонецЕсли; 
								Продолжить;
								
							КонецПопытки;
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли;
			
			// Теперь проверим получение
			Если Получить Тогда
				
				МассивПисемДляУдаления = Новый Массив;
				
				#Если Клиент Тогда
					ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.Заголовок = "Получение сообщений с сервера " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
					ФормаПрогрессора.ЭлементыФормы.Индикатор.МинимальноеЗначение = 0;
					ФормаПрогрессора.ЭлементыФормы.Индикатор.Значение = 0;
				#КонецЕсли
				
				НачатьТранзакцию();
				ИсключениеТранзакции = Ложь;
				ОшибкаИсключенияТранзакции = "";
				
				Попытка
					МассивПисем = ИнтернетПочта.Выбрать(НЕ УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере);
				Исключение
					МассивПисем = Новый Массив;
					Если ПоказыватьОкноВыполнения Тогда
						#Если Клиент Тогда
							СтрокаТаблицыСостояния.Состояние = Перечисления.уатСостоянияСобытий.Отменено;
						#КонецЕсли
						ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОписаниеОшибки());
					КонецЕсли; 
				КонецПопытки;
				
				#Если Клиент Тогда
					ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.Заголовок = "Регистрация сообщений " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
					ФормаПрогрессора.ЭлементыФормы.Индикатор.МаксимальноеЗначение = МассивПисем.Количество();
					ФормаПрогрессора.ЭлементыФормы.Индикатор.МинимальноеЗначение = 0;
					ФормаПрогрессора.ЭлементыФормы.Индикатор.Значение = 0;
				#КонецЕсли
				
				ЭлементМассива = 0;
				
				Для каждого ИнтернетПисьмо Из МассивПисем Цикл
					
					Если НЕ уатНадоПриниматьПисьмо(УчетнаяЗапись, ИнтернетПисьмо, МассивПисемДляУдаления) Тогда
						Продолжить;
					КонецЕсли; 
					
					#Если Клиент Тогда
						ФормаПрогрессора.ЭлементыФормы.Индикатор.Значение = ФормаПрогрессора.ЭлементыФормы.Индикатор.Значение + 1;
					#КонецЕсли
					
					Письмо = уатПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(ИнтернетПисьмо, УчетнаяЗапись, ТекущийПользователь, мРазделительАдресов, ИсключениеТранзакции);
					Если ТипЗнч(Письмо) <> Тип("ДокументОбъект.уатЭлектронноеПисьмо") Тогда
						Продолжить;
					КонецЕсли;
					
					уатПрименитьФильтрыКПисьму(Письмо, ТекущийПользователь);
					
					Если (Письмо.УчетнаяЗапись.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма
						ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет
						ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма
						ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма)
						И НЕ ПустаяСтрока(Письмо.Тема) Тогда
						уатНайтиИПроставитьОснованиеПисьма(Письмо);
					КонецЕсли;
					
					Попытка
						Письмо.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ИсключениеТранзакции = Истина;
						ОшибкаИсключенияТранзакции = ОписаниеОшибки();
						Продолжить;
					КонецПопытки;
					
					// Вложения
					Если ИнтернетПисьмо.Вложения.Количество() > 0 И НЕ ИсключениеТранзакции Тогда
						
						Для каждого Вложение Из ИнтернетПисьмо.Вложения Цикл
							
							Если Вложение.Данные = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							НовоеВложение = Справочники.уатВложенияЭлектронныхПисем.СоздатьЭлемент();
							Если НЕ ПустаяСтрока(Вложение.Идентификатор) Тогда
								Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками;
							КонецЕсли; 
							НовоеВложение.ИДФайлаПочтовогоПисьма = Вложение.Идентификатор;
							Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
								НовоеВложение.ИмяФайла = ?(ПустаяСтрока(Вложение.Имя), (ИнтернетПисьмо.ИдентификаторСообщения), Вложение.Имя) + ".msg";
							Иначе
								НовоеВложение.ИмяФайла = Вложение.Имя;
							КонецЕсли; 
							НовоеВложение.Объект    = Письмо.Ссылка;
							НовоеВложение.Хранилище = Новый ХранилищеЗначения(Вложение.Данные, Новый СжатиеДанных());
							Попытка
								НовоеВложение.Записать();
							Исключение
								ИсключениеТранзакции = Истина;
								ОшибкаИсключенияТранзакции = ОписаниеОшибки();
								Прервать;
							КонецПопытки;
							
						КонецЦикла;
						
						Если НЕ ИсключениеТранзакции Тогда
							
							уатОчиститьПисьмо(ИнтернетПисьмо);
							
							Письмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ИнтернетПисьмо, Новый СжатиеДанных());
							
							Попытка
								Письмо.Записать();
							Исключение
								ИсключениеТранзакции = Истина;
								ОшибкаИсключенияТранзакции = ОписаниеОшибки();
								Прервать;
							КонецПопытки;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ИсключениеТранзакции Тогда
						Если ПоказыватьОкноВыполнения Тогда
							#Если Клиент Тогда
								СтрокаТаблицыСостояния.Состояние = Перечисления.уатСостоянияСобытий.Отменено;
							#КонецЕсли
							ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОшибкаИсключенияТранзакции);
						КонецЕсли; 
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ИсключениеТранзакции Тогда
					ОтменитьТранзакцию();
				Иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
				Если МассивПисемДляУдаления.Количество() > 0 Тогда
					#Если Клиент Тогда
						ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.Заголовок = "Удаление сообщений с сервера " + УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + "> ...";
					#КонецЕсли
					Попытка
						ИнтернетПочта.УдалитьСообщения(МассивПисемДляУдаления);
					Исключение
						ТекстОшибок = Символы.ПС + ТекстОшибок + (Строка(УчетнаяЗапись) + ". " + ОшибкаИсключенияТранзакции);
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли; 
			
			ИнтернетПочта.Отключиться();
			
			Если ПоказыватьОкноВыполнения Тогда
				#Если Клиент Тогда
					Если СтрокаТаблицыСостояния.Состояние <> Перечисления.уатСостоянияСобытий.Отменено Тогда
						СтрокаТаблицыСостояния.Состояние = Перечисления.уатСостоянияСобытий.Завершено;
					КонецЕсли; 
				#КонецЕсли
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ПоказыватьОкноВыполнения Тогда
		
		#Если Клиент Тогда
			ФормаПрогрессора.ЭлементыФормы.ПолеОшибок.УстановитьТекст(СокрЛП(ТекстОшибок));
			
			Если НЕ ФормаПрогрессора.Открыта() Тогда
				ФормаПрогрессора.Открыть();
			КонецЕсли;
			
			Если ПустаяСтрока(ФормаПрогрессора.ЭлементыФормы.ПолеОшибок.ПолучитьТекст()) Тогда
				ФормаПрогрессора.Закрыть();
			Иначе
				ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.Заголовок = "Задачи завершены с ошибками";
				ФормаПрогрессора.ЭлементыФормы.СтатикСостояния.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
				ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.Страницы.Ошибки.Заголовок = "Ошибки(!)";
				ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.ТекущаяСтраница = ФормаПрогрессора.ЭлементыФормы.ПанельЗадач.Страницы.Ошибки;
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

// Функция очищает от данных объект ИнтернетПисьмо, перед его сохранением в документе уатЭлектронноеПисьмо
//
// Параметры
//  Письмо - ИнтернетПисьмо
//
// Возвращаемое значение:
//   НЕТ
//
Процедура уатОчиститьПисьмо(Письмо)
	
	Письмо.Вложения.Очистить();
	Письмо.Копии.Очистить();
	Письмо.Получатели.Очистить();
	Письмо.СлепыеКопии.Очистить();
	
КонецПроцедуры

#Если Клиент Тогда
	
	// Функция обрабатывает пользовательское событие - создание нового электронного письма.
	// 
	// Параметры:
	//  ТекущийПользователь          - СправочникСсылка.Пользователи, текущий пользователь
	//  СтруктураНовогоПисьма        - Структура с данными нового письма
	//    Ключи структуры:
	//     Тело                 - строка, текст письма (простой текст, или текст в формате ХТМЛ)
	//     Тема                 - Строка
	//     ВидТекста            - ПеречислениеСсылка.ВидыТекстовЭлектронныхПисем, вид текста нового письма
	//     СписокФайловВложений - СписокЗначений, где значения - структура параметров и значений для создания
	//                            нового элемента справочника уатВложенияЭлектронныхПисем, ключи структуры
	//                            соответствуют именам реквизитов справочника уатВложенияЭлектронныхПисем
	//     УчетнаяЗапись        - СправочникСсылка.УчетнаяЗапись, учетная запись нового письма
	//     Кому                 - Список значений, значение - адрес эл.почты, представление - представление получателя
	//     Копии                - Список значений, значение - адрес эл.почты, представление - представление получателя
	//     СкрытыеКопии         - Список значений, значение - адрес эл.почты, представление - представление получателя
	//     Основание            - ДокументСсылка.уатЭлектронноеПисьмо, ДокументСсылка.Событие
	//     ГруппаУчетнойЗаписи  - элемент справочника уатГруппыПисемЭлектроннойПочты, группа писем для нового письма
	//     Ответственный        - элемент справочника Пользователи, ответственный для заполнения в письме
	//
	//  ПеренестиВложенияИзОснования - Булево, переносить ли вложения письма из основания
	//									(действует для копирования и пересылки)
	//  Копирование                  - булево, признак копирования электронного письма
	//  ТекущийЭлементХТМЛ           - Булево, устанавливать в качестве активного элемента в открытой форме
	//									письма поле ХТМЛ(Текстового) документа
	//  Дополнительно                - Строка, "Ответ", "Переадресация", вид действия при создании нового письма
	//  ФормаВладелец                - Форма, владелец для открываемой формы нового письма
	//  ПодписьПодТекстом            - Булево, устанавливать подпись в письме "после" или "перед" текстом.
	//  ОткрыватьПисьмо              - Булево, открывать форму письма или записывать письмо и не открывать форму
	//
	//  ВозвращаемоеЗначение
	//   СтруктураПараметров - Структура
	//     Ключи структуры:
	//     Письмо       - ДокументОбъект.уатЭлектронноеПисьмо, новое электронное письмо
	//     Форма        - Форма, форма нового электронного письма
	//     ПисьмоСсылка - ДокументСсылка.уатЭлектронноеПисьмо, новое электронное письмо
	//
	Функция уатНаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма = Неопределено, ПеренестиВложенияИзОснования = Ложь, Копирование = Ложь,
		ТекущийЭлементХТМЛ = Ложь, Дополнительно = Неопределено, ФормаВладелец = Неопределено, ПодписьПодТекстом = Ложь,
		ОткрыватьПисьмо = Истина) Экспорт
		
		Перем УчетнаяЗапись;
		Перем Тема;
		Перем Тело;
		Перем ВидТекста;
		Перем СписокФайловВложений;
		Перем ГруппаУчетнойЗаписи;
		Перем Кому;
		Перем Копии;
		Перем СкрытыеКопии;
		Перем Основание;
		Перем Ответственный;
		Перем Предмет;
		
		Если СтруктураНовогоПисьма = Неопределено Тогда
			СтруктураНовогоПисьма = Новый Структура;
		КонецЕсли; 
		
		// Определим учетную запись для создания письма
		
		СписокДоступныхЗаписей = уатПроверитьУчетныеЗаписиДляОтправкиПисем(ТекущийПользователь);
		Если СписокДоступныхЗаписей.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		СтруктураНовогоПисьма.Свойство("УчетнаяЗапись", УчетнаяЗапись);
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(УчетнаяЗапись) И СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
			УчетнаяЗапись = Справочники.уатУчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		КонецЕсли;
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
			УчетнаяЗапись = уатОбщегоНазначенияТиповые.уатПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяУчетнаяЗапись");
			Если СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
				УчетнаяЗапись = Неопределено;
			КонецЕсли; 
		КонецЕсли;
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
			УчетнаяЗапись = СписокДоступныхЗаписей[0].Значение;
		КонецЕсли;
		
		Письмо = Документы.уатЭлектронноеПисьмо.СоздатьДокумент();
		Письмо.Дата                             = ТекущаяДата();
		Письмо.УчетнаяЗапись                    = УчетнаяЗапись;
		Письмо.ОтправительИмя                   = УчетнаяЗапись.Наименование;
		Письмо.ОтправительАдресЭлектроннойПочты = УчетнаяЗапись.АдресЭлектроннойПочты;
		Письмо.ОтправительПредставление         = УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";
		
		СтруктураНовогоПисьма.Свойство("Тело", Тело);
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Тело) Тогда
			Письмо.ТекстПисьма = Тело;
		КонецЕсли; 
		
		СтруктураНовогоПисьма.Свойство("Тема", Тема);
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Тема) Тогда
			Письмо.Тема = Тема;
		КонецЕсли; 
		
		СтруктураНовогоПисьма.Свойство("СписокФайловВложений", СписокФайловВложений);
		
		ОписаниеТиповПредмета = Новый ОписаниеТипов("Строка,СправочникСсылка.ФизическиеЛица");
		
		СтруктураНовогоПисьма.Свойство("Основание", Основание);
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Основание) Тогда
			Письмо.Основание = Основание;
			Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам Тогда
				СтруктураНовогоПисьма.Свойство("Предмет", Предмет);
				Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Предмет) И ОписаниеТиповПредмета.СодержитТип(ТипЗнч(Предмет)) Тогда
					Письмо.Предмет = Предмет;
				Иначе
					Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам И ТипЗнч(Основание) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
						Письмо.Предмет = Основание.Предмет;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Основание)
			И УчетнаяЗапись.ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного
			И ТипЗнч(Основание) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
			ВидТекста = Основание.ВидТекстаПисьма;
		Иначе
			СтруктураНовогоПисьма.Свойство("ВидТекста", ВидТекста);
		КонецЕсли;
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВидТекста) Тогда
			Письмо.ВидТекстаПисьма = УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Письмо.ВидТекстаПисьма) Тогда
				Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML;
			КонецЕсли;
		Иначе
			Письмо.ВидТекстаПисьма = ВидТекста;
		КонецЕсли;
		
		Если Дополнительно = "Ответ" Тогда
			Письмо.Ответ         = Истина;
		ИначеЕсли Дополнительно = "Переадресация" Тогда
			Письмо.Переадресация = Истина;
		КонецЕсли; 
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.уатСобытие") Тогда
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатСобытие") Тогда
				
				Если Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
					Тело = "<HTML><HEAD>
					|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
					|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
					|<BODY>" + СтрЗаменить(Основание.СодержаниеСобытия, Символы.ПС, "<BR>") + "</BODY></HTML>";
				Иначе
					Тело = Основание.СодержаниеСобытия;
				КонецЕсли
				
			Иначе
				
				Тело = Основание.ТекстПисьма;
				
				Если ((Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками)
					И Основание.ВидТекстаПисьма <> Перечисления.уатВидыТекстовЭлектронныхПисем.HTML И Основание.ВидТекстаПисьма <> Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками)
					ИЛИ ((Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.Текст ИЛИ Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.Прочее)
					И Основание.ВидТекстаПисьма <> Перечисления.уатВидыТекстовЭлектронныхПисем.Текст И Основание.ВидТекстаПисьма <> Перечисления.уатВидыТекстовЭлектронныхПисем.Прочее) Тогда
					
					Если Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
						
						Тело = "<HTML><HEAD>
						|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
						|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
						|<BODY>" + СтрЗаменить(Тело, Символы.ПС, "<BR>") + "</BODY></HTML>";
						
					Иначе
						
						Тело = уатПреобразоватьТекстИзХТМЛФорматаВПростой(Тело);
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Письмо.ТекстПисьма = Тело;
			
		КонецЕсли;
		
		СтруктураНовогоПисьма.Свойство("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись Тогда
			Письмо.ГруппаУчетнойЗаписи = ГруппаУчетнойЗаписи;
		Иначе
			Письмо.УказатьГруппуПоУмолчанию();
		КонецЕсли; 
		
		СтруктураНовогоПисьма.Свойство("Ответственный", Ответственный);
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Ответственный) Тогда
			Письмо.Ответственный = Ответственный;
		Иначе
			Письмо.Ответственный = ТекущийПользователь;
		КонецЕсли; 
		
		СтруктураНовогоПисьма.Свойство("Кому", Кому);
		Если ТипЗнч(Кому) = Тип("СписокЗначений") Тогда
			Для каждого ЭлементСписка Из Кому Цикл
				Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаТЧ = Письмо.КомуТЧ.Добавить();
				СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
				СтрокаТЧ.Представление         = ЭлементСписка.Представление;
				Если НЕ ПустаяСтрока(Письмо.Кому) Тогда
					Письмо.Кому = Письмо.Кому + ", ";
				КонецЕсли;
				Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
					Письмо.Кому = Письмо.Кому + ЭлементСписка.Значение;
				Иначе
					Письмо.Кому = Письмо.Кому + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		
		СтруктураНовогоПисьма.Свойство("Копии", Копии);
		Если ТипЗнч(Копии) = Тип("СписокЗначений") Тогда
			Для каждого ЭлементСписка Из Копии Цикл
				Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаТЧ = Письмо.КопииТЧ.Добавить();
				СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
				СтрокаТЧ.Представление         = ЭлементСписка.Представление;
				Если НЕ ПустаяСтрока(Письмо.Копии) Тогда
					Письмо.Копии = Письмо.Копии + ", ";
				КонецЕсли;
				Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
					Письмо.Копии = Письмо.Копии + ЭлементСписка.Значение;
				Иначе
					Письмо.Копии = Письмо.Копии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		
		СтруктураНовогоПисьма.Свойство("СкрытыеКопии", СкрытыеКопии);
		Если ТипЗнч(СкрытыеКопии) = Тип("СписокЗначений") Тогда
			Для каждого ЭлементСписка Из СкрытыеКопии Цикл
				Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаТЧ = Письмо.СкрытыеКопииТЧ.Добавить();
				СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
				СтрокаТЧ.Представление         = ЭлементСписка.Представление;
				Если НЕ ПустаяСтрока(Письмо.СкрытыеКопии) Тогда
					Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ", ";
				КонецЕсли;
				Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
					Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Значение;
				Иначе
					Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		
		Если ФормаВладелец <> Неопределено Тогда
			ФормаПисьма = Письмо.ПолучитьФорму(, ФормаВладелец);
		Иначе
			ФормаПисьма = Письмо.ПолучитьФорму();
		КонецЕсли; 
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ТекСсылка"   , Основание);
			Запрос.УстановитьПараметр("ПустаяСтрока", "");
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатВложенияЭлектронныхПисем.ИмяФайла               КАК ИмяФайла,
			|	уатВложенияЭлектронныхПисем.Хранилище              КАК Хранилище,
			|	уатВложенияЭлектронныхПисем.Наименование           КАК Наименование,
			|	уатВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма
			|ИЗ
			|	Справочник.уатВложенияЭлектронныхПисем КАК уатВложенияЭлектронныхПисем
			|ГДЕ
			|	уатВложенияЭлектронныхПисем.Объект = &ТекСсылка
			|	И
			|	НЕ уатВложенияЭлектронныхПисем.ПометкаУдаления
			|";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ПустаяСтрока(Выборка.ИДФайлаПочтовогоПисьма) Тогда
						Если ПеренестиВложенияИзОснования Тогда
							СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
							СтрокаТЗ.ИмяФайла     = Выборка.ИмяФайла;
							СтрокаТЗ.Наименование = Выборка.Наименование;
							СтрокаТЗ.Данные       = Выборка.Хранилище;
						КонецЕсли; 
					Иначе
						СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗСкрытые.Добавить();
						СтрокаТЗ.ИмяФайла               = Выборка.ИмяФайла;
						СтрокаТЗ.Наименование           = Выборка.Наименование;
						СтрокаТЗ.Данные                 = Выборка.Хранилище;
						СтрокаТЗ.ИДФайлаПочтовогоПисьма = Выборка.ИДФайлаПочтовогоПисьма;
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			
		КонецЕсли;
		
		// Сформируем текст письма для ответа или переадресации
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") И НЕ Копирование Тогда
			
			ТекстПисьма = Письмо.ТекстПисьма;
			
			Если Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				
				НачалоТела = Найти(ТекстПисьма, "<BODY");
				
				ДатаИсходногоПисьма = Основание.Дата;
				Если (Основание.СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное ИЛИ Основание.СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное) И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Основание.Дата) Тогда
					ДатаИсходногоПисьма = Основание.Дата;
				КонецЕсли;
				
				СтрокаОтправителя = "Отправитель: ";
				Если НЕ ПустаяСтрока(Основание.ОтправительИмя) Тогда
					СтрокаОтправителя = СтрокаОтправителя + СокрЛП(Основание.ОтправительИмя) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(Основание.ОтправительИмя, """", "")) + "<" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + "</A>&gt";
				Иначе
					СтрокаОтправителя = СтрокаОтправителя + "&lt<A href=" + """" + "mailto:" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + """" + ">" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + "</A>&gt";
				КонецЕсли;
				
				СтрокаКому = "";
				Для каждого СтрокаТЧ Из Основание.КомуТЧ Цикл
					
					Если НЕ ПустаяСтрока(СтрокаКому) Тогда
						СтрокаКому = СтрокаКому + ", ";
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
						СтрокаКому = СтрокаКому + СокрЛП(СтрокаТЧ.Представление) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(СтрокаТЧ.Представление, """", "")) + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
					Иначе
						СтрокаКому = СтрокаКому + "&lt<A href=" + """" + "mailto:" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
					КонецЕсли; 
					
				КонецЦикла;
				
				Если НЕ ПустаяСтрока(СтрокаКому) Тогда
					СтрокаКому = "Получатели: " + СтрокаКому;
				КонецЕсли; 
				
				СтрокаКопии = "";
				Для каждого СтрокаТЧ Из Основание.КопииТЧ Цикл
					
					Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
						СтрокаКопии = СтрокаКопии + ", ";
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
						СтрокаКопии = СтрокаКопии + СокрЛП(СтрокаТЧ.Представление) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(СтрокаТЧ.Представление, """", "")) + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
					Иначе
						СтрокаКопии = СтрокаКопии + "&lt<A href=" + """" + "mailto:" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
					КонецЕсли; 
					
				КонецЦикла;
				
				Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
					СтрокаКопии = "Копии: " + СтрокаКопии;
				КонецЕсли; 
				
				Если НачалоТела > 0 Тогда
					
					// Ищем конец начала тела
					а = НачалоТела;
					КонецНачалаТела = 0;
					Пока 1 = 1 Цикл
						Если Сред(ТекстПисьма, а, 1) = ">" Тогда
							КонецНачалаТела = а;
							Прервать;
						Иначе
							а = а + 1;
							Продолжить;
						КонецЕсли; 
					КонецЦикла; 
					
					НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела) + "<PRE><BR></PRE>" + 
					"<BLOCKQUOTE dir=ltr style=" + """" + "PADDING-LEFT: 15px; MARGIN-LEFT: 5px; BORDER-LEFT: #000000 2px solid; MARGIN-RIGHT: 0px" + """" + ">" + 
					"<P><A href="+ """" + Строка(Основание.УникальныйИдентификатор()) + """" + ">--- Исходное сообщение --- </A>" + 
					"<BR>Дата: " + Формат(ДатаИсходногоПисьма, "ДЛФ=DT") +
					"<BR>" + СтрокаОтправителя;
					
					Если НЕ ПустаяСтрока(СтрокаКому) Тогда
						НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКому;
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
						НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКопии;
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(Основание.Тема) Тогда
						НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + "Тема: " + Основание.Тема;
					КонецЕсли;
					
					НовыйТекстПисьма = НовыйТекстПисьма + "</P><P><BR></P>";
					
					КонецТела = Найти(ТекстПисьма, "</BODY");
					Если КонецТела > 0 Тогда
						НовыйТекстПисьма = НовыйТекстПисьма + Сред(ТекстПисьма, (КонецНачалаТела + 1), (КонецТела - КонецНачалаТела - 1)) + "</BLOCKQUOTE>" + Сред(ТекстПисьма, КонецТела);
						Письмо.ТекстПисьма = НовыйТекстПисьма;
					КонецЕсли;
				КонецЕсли; 
				
			Иначе
				
				НовыйТекстПисьма = Новый ТекстовыйДокумент;
				
				НовыйТекстПисьма.УстановитьТекст(ТекстПисьма);
				
				НовыйТекстПисьма.ВставитьСтроку(1, "--- Исходное сообщение ---");
				ПоследняяСтрока = 1;
				
				ДатаИсходногоПисьма = Основание.Дата;
				Если (Основание.СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное ИЛИ Основание.СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное) И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Основание.Дата) Тогда
					ДатаИсходногоПисьма = Основание.Дата;
				КонецЕсли;
				НовыйТекстПисьма.ВставитьСтроку(2, "Дата: " + Формат(ДатаИсходногоПисьма, "ДЛФ=DT"));
				ПоследняяСтрока = 2;
				
				СтрокаОтправителя = "Отправитель: ";
				Если НЕ ПустаяСтрока(Основание.ОтправительИмя) Тогда
					СтрокаОтправителя = СтрокаОтправителя + СокрЛП(Основание.ОтправительИмя) + " <" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">";
				Иначе
					СтрокаОтправителя = СтрокаОтправителя + "<" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">";
				КонецЕсли;
				НовыйТекстПисьма.ВставитьСтроку(3, СтрокаОтправителя);
				ПоследняяСтрока = 3;
				
				СтрокаКому = "";
				Для каждого СтрокаТЧ Из Основание.КомуТЧ Цикл
					
					Если НЕ ПустаяСтрока(СтрокаКому) Тогда
						СтрокаКому = СтрокаКому + ", ";
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
						СтрокаКому = СтрокаКому + СокрЛП(СтрокаТЧ.Представление) + " <" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
					Иначе
						СтрокаКому = СтрокаКому + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
					КонецЕсли; 
					
				КонецЦикла;
				
				Если НЕ ПустаяСтрока(СтрокаКому) Тогда
					НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Получатели: " + СтрокаКому);
					ПоследняяСтрока = ПоследняяСтрока + 1;
				КонецЕсли; 
				
				СтрокаКопии = "";
				Для каждого СтрокаТЧ Из Основание.КопииТЧ Цикл
					
					Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
						СтрокаКопии = СтрокаКопии + ", ";
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтрокаТЧ.Представление) Тогда
						СтрокаКопии = СтрокаКопии + СокрЛП(СтрокаТЧ.Представление) + " <" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
					Иначе
						СтрокаКопии = СтрокаКопии + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
					КонецЕсли; 
					
				КонецЦикла;
				
				Если НЕ ПустаяСтрока(СтрокаКопии) Тогда
					НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Копии: " + СтрокаКопии);
					ПоследняяСтрока = ПоследняяСтрока + 1;
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(Основание.Тема) Тогда
					НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Тема: " + Основание.Тема);
					ПоследняяСтрока = ПоследняяСтрока + 1;
				КонецЕсли;
				
				НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "");
				
				Для а = 1 по НовыйТекстПисьма.КоличествоСтрок() Цикл
					НовыйТекстПисьма.ЗаменитьСтроку(а, ("> " + НовыйТекстПисьма.ПолучитьСтроку(а)));
				КонецЦикла;
				
				НовыйТекстПисьма.ВставитьСтроку(1, "");
				НовыйТекстПисьма.ВставитьСтроку(1, "");
				
				Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// Проставим при необходимости подпись
		Если НЕ Копирование И ((УчетнаяЗапись.ДобавлятьПодписьКИсходящимПисьмам И Дополнительно = Неопределено)
			ИЛИ ((Дополнительно = "Ответ" ИЛИ Дополнительно = "Переадресация") И УчетнаяЗапись.ДобавлятьПодписьКОтветамИПересылкам = Истина)) Тогда
			
			Отказ = Ложь;
			
			НовыйКом = Новый COMОбъект("HtmlFile");
			НовыйКом.open("text/html");
			НовыйКом.write(УчетнаяЗапись.ТекстПодписи);
			НовыйКом.close();
			
			Если Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				
				ТекстПисьма = Письмо.ТекстПисьма;
				
				Если ПустаяСтрока(ТекстПисьма) Тогда
					ТекстПисьма = "<HTML><HEAD>
					|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
					|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
					|<BODY></BODY></HTML>";
				Иначе
					Если Найти(ТекстПисьма, "<BODY") = 0 тогда
						ТекстПисьма = "<HTML><HEAD>
						|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
						|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
						|<BODY>" + СтрЗаменить(ТекстПисьма, Символы.ПС, "<BR>") + "</BODY></HTML>";
					КонецЕсли; 
				КонецЕсли; 
				
				НачалоТела = Найти(ТекстПисьма, "<BODY");
				КонецНачалаТела = 0;
				а = НачалоТела;
				Пока 1 = 1 Цикл
					Если Сред(ТекстПисьма, а, 1) = ">" Тогда
						КонецНачалаТела = а;
						Прервать;
					Иначе
						а = а + 1;
					КонецЕсли; 
				КонецЦикла;
				
				Если НачалоТела = 0 ИЛИ КонецНачалаТела = 0 Тогда
					Отказ = Истина;
				КонецЕсли;
				
				ТегBODY = НовыйКом.all.Tags("BODY");
				Если ТегBODY.length > 0 Тогда
					ХТМЛПодписи = ТегBODY.item(0).innerHTML;
					Если ПустаяСтрока(ХТМЛПодписи) Тогда
						Отказ = Истина;
					Иначе
						ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "<PRE>", "");
						ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "</PRE>", "<BR>");
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли; 
				
				Если НЕ Отказ Тогда
					Если ПодписьПодТекстом Тогда
						НачалоКонцаТела = Найти(ТекстПисьма, "</BODY");
						Если НачалоКонцаТела > 0 Тогда
							НовыйТекстПисьма = Лев(ТекстПисьма, НачалоКонцаТела - 1);
							НовыйТекстПисьма  = НовыйТекстПисьма + "<BR>" + ХТМЛПодписи + Сред(ТекстПисьма, НачалоКонцаТела);
							Письмо.ТекстПисьма = НовыйТекстПисьма;
						КонецЕсли; 
					Иначе
						НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела);
						НовыйТекстПисьма  = НовыйТекстПисьма + "<P>&nbsp;</P>" + ХТМЛПодписи + Сред(ТекстПисьма, (КонецНачалаТела + 1));
						Письмо.ТекстПисьма = НовыйТекстПисьма;
					КонецЕсли; 
				КонецЕсли; 
				
			Иначе
				
				ТекстПодписи = Новый ТекстовыйДокумент;
				ТекстПодписи.УстановитьТекст(СтрЗаменить(НовыйКом.all.item(0).innerText, Символ(13), ""));
				
				Если ТекстПодписи.КоличествоСтрок() > 0 Тогда
					
					НовыйТекстПисьма = Новый ТекстовыйДокумент;
					НовыйТекстПисьма.УстановитьТекст(Письмо.ТекстПисьма);
					
					Если НовыйТекстПисьма.КоличествоСтрок() > 0 Тогда
						ПерваяСтрока = НовыйТекстПисьма.ПолучитьСтроку(1);
						Если ПустаяСтрока(ПерваяСтрока) Тогда
							НовыйТекстПисьма.УдалитьСтроку(1);
						КонецЕсли; 
					КонецЕсли; 
					
					Для а = 1 По ТекстПодписи.КоличествоСтрок() Цикл
						Если ПодписьПодТекстом Тогда
							НовыйТекстПисьма.ДобавитьСтроку(ТекстПодписи.ПолучитьСтроку(а));
						Иначе
							НовыйТекстПисьма.ВставитьСтроку(а, ТекстПодписи.ПолучитьСтроку(а));
						КонецЕсли;
					КонецЦикла;
					
					НовыйТекстПисьма.ВставитьСтроку(1, "");
					Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ОткрыватьПисьмо Тогда
			
			ФормаПисьма.Открыть();
			
			// Установим удобный элемент управления в форме письма - текущим
			Если ТекущийЭлементХТМЛ Тогда
				Если Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
					ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеHTMLДокумента;
				Иначе
					ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеТекстовогоДокумента;
				КонецЕсли; 
			Иначе
				ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.Кому;
			КонецЕсли;
			
			СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
			
		Иначе
			
			Попытка
				Письмо.Записать();
			Исключение
				Возврат ОписаниеОшибки();
			КонецПопытки;
			
			Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
				
				ЗначениеСтруктурыВозврата = Неопределено;
				
				Для каждого ЭлементСписка Из СписокФайловВложений Цикл
					
					НовоеВложение = Справочники.уатВложенияЭлектронныхПисем.СоздатьЭлемент();
					НовоеВложение.Объект = Письмо.Ссылка;
					
					ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
					Если ЗначениеСтруктурыВозврата = Неопределено Тогда
						Продолжить;
					Иначе
						Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
							НовоеВложение.Хранилище = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
						ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
							НовоеВложение.Хранилище = ЗначениеСтруктурыВозврата;
						ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
							НовоеВложение.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
						Иначе
							Продолжить;
						КонецЕсли; 
						ЗначениеСтруктурыВозврата = Неопределено;
					КонецЕсли; 
					
					ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
					Если ЗначениеСтруктурыВозврата = Неопределено Тогда
						НовоеВложение.ИмяФайла = "";
					Иначе
						НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
						ЗначениеСтруктурыВозврата = Неопределено;
					КонецЕсли; 
					
					ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
					Если ЗначениеСтруктурыВозврата = Неопределено Тогда
						НовоеВложение.Наименование = "";
					Иначе
						НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
						ЗначениеСтруктурыВозврата = Неопределено;
					КонецЕсли; 
					
					Попытка
						НовоеВложение.Записать();
					Исключение
						Возврат ОписаниеОшибки();
					КонецПопытки;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
			СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
			
		КонецЕсли; 
		
		Возврат СтруктураВозврата;
		
	КонецФункции
	
	// Процедура обрабатывает событие пользователя "Ответить на письмо".
	// 
	// Параметры:
	//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
	//  Письмо              - ДокументСсылка.уатЭлектронноеПисьмо, письма для которого надо создать ответ
	//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
	// 
	Процедура уатОтветитьНаПисьмо(ТекущийПользователь, Письмо, ФормаВладелец = Неопределено) Экспорт
		
		СтруктураПисьма = Новый Структура;
		
		СтруктураПисьма.Вставить("Тема"         , ("Re: " + Письмо.Тема));
		СтруктураПисьма.Вставить("УчетнаяЗапись", Письмо.УчетнаяЗапись);
		СтруктураПисьма.Вставить("Основание"    , Письмо);
		СтруктураПисьма.Вставить("Предмет"      , Письмо.Предмет);
		Если Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
			СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);
		Иначе
			СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.УчетнаяЗапись.ГруппаИсходящие);
		КонецЕсли; 
		
		СписокКому = Новый СписокЗначений;
		СписокКому.Добавить(Письмо.ОтправительАдресЭлектроннойПочты, Письмо.ОтправительИмя);
		СтруктураПисьма.Вставить("Кому", СписокКому);
		
		уатНаписатьПисьмо(ТекущийПользователь, СтруктураПисьма,,, Истина, "Ответ", ФормаВладелец);
		
	КонецПроцедуры
	
	// Процедура обрабатывает событие пользователя "Ответить на письмо всем".
	// 
	// Параметры:
	//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
	//  Письмо              - ДокументСсылка.уатЭлектронноеПисьмо, письма для которого надо создать ответ
	//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
	// 
	Процедура уатОтветитьВсемНаПисьмо(ТекущийПользователь, Письмо, ФормаВладелец = Неопределено) Экспорт
		
		СтруктураПисьма = Новый Структура;
		
		СтруктураПисьма.Вставить("Тема"         , ("Re: " + Письмо.Тема));
		СтруктураПисьма.Вставить("УчетнаяЗапись", Письмо.УчетнаяЗапись);
		СтруктураПисьма.Вставить("Основание"    , Письмо);
		СтруктураПисьма.Вставить("Предмет"      , Письмо.Предмет);
		Если Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
			СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);
		Иначе
			СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.УчетнаяЗапись.ГруппаИсходящие);
		КонецЕсли; 
		
		СписокКому = Новый СписокЗначений;
		СписокКому.Добавить(Письмо.ОтправительАдресЭлектроннойПочты, Письмо.ОтправительИмя);
		Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
			Если СтрокаТЧ.АдресЭлектроннойПочты = Письмо.УчетнаяЗапись.АдресЭлектроннойПочты Тогда
				Продолжить;
			КонецЕсли; 
			СписокКому.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
		КонецЦикла; 
		СтруктураПисьма.Вставить("Кому", СписокКому);
		
		СписокКопии = Новый СписокЗначений;
		Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
			Если СтрокаТЧ.АдресЭлектроннойПочты = Письмо.УчетнаяЗапись.АдресЭлектроннойПочты Тогда
				Продолжить;
			КонецЕсли; 
			СписокКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
		КонецЦикла; 
		СтруктураПисьма.Вставить("Копии", СписокКопии);
		
		уатНаписатьПисьмо(ТекущийПользователь, СтруктураПисьма,,, Истина, "Ответ", ФормаВладелец);
		
	КонецПроцедуры
	
	// Процедура обрабатывает событие пользователя "Переслать письмо" а так же событие копирования писем.
	// 
	// Параметры:
	//  ТекущийПользователь - СправочникСсылка.Пользователи - текущий пользователь
	//  Письмо              - ДокументСсылка.уатЭлектронноеПисьмо - письмо,
	//							для которого надо создать переадресацию или основание для копирования
	//  Копирование         - Булево - признак копирования электронного письма
	//  ФормаВладелец       - Форма - владелец для открываемой формы нового письма
	// 
	Процедура уатПереадресоватьПисьмо(ТекущийПользователь, Письмо, Копирование = Ложь, ФормаВладелец = Неопределено) Экспорт
		
		СтруктураПисьма = Новый Структура;
		
		Если Копирование Тогда
			СтруктураПисьма.Вставить("Тема", Письмо.Тема);
			СписокКому = Новый СписокЗначений;
			Для каждого СтрокаТЧ Из Письмо.КомуТЧ Цикл
				СписокКому.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
			КонецЦикла; 
			СтруктураПисьма.Вставить("Кому", СписокКому);
			
			СписокКопии = Новый СписокЗначений;
			Для каждого СтрокаТЧ Из Письмо.КопииТЧ Цикл
				СписокКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
			КонецЦикла; 
			СтруктураПисьма.Вставить("Копии", СписокКопии);
			
			СписокСкрытыеКопии = Новый СписокЗначений;
			Для каждого СтрокаТЧ Из Письмо.СкрытыеКопииТЧ Цикл
				СписокСкрытыеКопии.Добавить(СтрокаТЧ.АдресЭлектроннойПочты, СтрокаТЧ.Представление);
			КонецЦикла; 
			СтруктураПисьма.Вставить("СкрытыеКопии", СписокСкрытыеКопии);
		Иначе
			СтруктураПисьма.Вставить("Тема", ("Fw: " + Письмо.Тема));
		КонецЕсли;
		
		Если Копирование Тогда
			СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);
		Иначе
			Если Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
				СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);
			Иначе
				СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.УчетнаяЗапись.ГруппаИсходящие);
			КонецЕсли; 
		КонецЕсли; 
		СтруктураПисьма.Вставить("УчетнаяЗапись", Письмо.УчетнаяЗапись);
		СтруктураПисьма.Вставить("Основание"    , Письмо);
		СтруктураПисьма.Вставить("Предмет"      , Письмо.Предмет);
		
		уатНаписатьПисьмо(ТекущийПользователь, СтруктураПисьма, Истина, Копирование, , ?(НЕ Копирование, "Переадресация", Неопределено), ФормаВладелец);
		
	КонецПроцедуры
	
#КонецЕсли

// Процедура определяет для входящих электронных писем, в основном для ответов и переадресаций
// предмет и документ основание по теме письма
// 
// Параметры
//  Письмо - ДокументОбъект.уатЭлектронноеПисьмо, для которого определяем основание
// 
Процедура уатНайтиИПроставитьОснованиеПисьма(Письмо) Экспорт
	
	// Предполагаем что в теме письма могут быть префиксы типа FW, FWD или RE
	
	ТемаВрег = Врег(Письмо.Тема);
	
	СписокВозможныхПрефиксов = Новый СписокЗначений;
	СписокВозможныхПрефиксов.Добавить("FW");
	СписокВозможныхПрефиксов.Добавить("FWD");
	СписокВозможныхПрефиксов.Добавить("RE");
	
	ПерваяПозицияТемы = 0;
	
	Для каждого ЭлементСписка Из СписокВозможныхПрефиксов Цикл
		
		Пока СтрЧислоВхождений(ТемаВрег, ЭлементСписка.Значение) > 0 Цикл
			
			ПозицияСимвола = Найти(ТемаВрег, ЭлементСписка.Значение);
			
			Для а = ПозицияСимвола По СтрДлина(ТемаВрег) Цикл
				Если Сред(ТемаВрег, а, 1) = ":" Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			ПерваяПозицияТемы = ПерваяПозицияТемы + а;
			
			ТемаВрег = Сред(ТемаВрег, (а + 1));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПерваяПозицияТемы > 0 И ПерваяПозицияТемы < СтрДлина(Письмо.Тема) Тогда
		ПреобразованнаяТема = СокрЛП(Сред(Письмо.Тема, (ПерваяПозицияТемы + 1)));
	Иначе
		ПреобразованнаяТема = СокрЛП(Письмо.Тема);
	КонецЕсли;
	
	Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет
		ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма
		ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма Тогда
		
		ТаблицаИсходныхДанных = Новый ТаблицаЗначений;
		ТаблицаИсходныхДанных.Колонки.Добавить("АдресЭлектроннойПочты", Новый ОписаниеТипов("Строка"));
		ТаблицаИсходныхДанных.Колонки.Добавить("ПредставлениеОбъекта" , Новый ОписаниеТипов("Строка"));
		
		СтрокаТаблицы = ТаблицаИсходныхДанных.Добавить();
		СтрокаТаблицы.АдресЭлектроннойПочты = Письмо.ОтправительАдресЭлектроннойПочты;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПреобразованнаяТема", ("%" + ПреобразованнаяТема));
		Запрос.УстановитьПараметр("Параметр"           , Письмо.ОтправительАдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("УчетнаяЗапись"      , Письмо.УчетнаяЗапись);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка                     КАК Ссылка,
		|	уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Предмет             КАК Предмет,
		|	уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ГруппаУчетнойЗаписи КАК ГруппаУчетнойЗаписи,
		|	уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ДатаТранспорта      КАК ДатаТранспортаТаблицы
		|ИЗ
		|	КритерийОтбора.уатЭлектронныеПисьмаПоАдресуЭлектроннойПочты(&Параметр) КАК уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица
		|
		|ГДЕ
		|	уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Тема ПОДОБНО &ПреобразованнаяТема
		|	И
		|	уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
		|	И
		|	НЕ уатЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПометкаУдаления
		|";
		
		РезультатыПоиска = уатПоискВКонтактнойИнформации(ТаблицаИсходныхДанных);
		
		Если РезультатыПоиска.Количество() > 0 Тогда
			
			СписокОбъектов = Новый СписокЗначений;
			Для каждого СтрокаРезультатаПоиска Из РезультатыПоиска Цикл
				Если СписокОбъектов.НайтиПоЗначению(СтрокаРезультатаПоиска.Объект) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СписокОбъектов.Добавить(СтрокаРезультатаПоиска.Объект);
			КонецЦикла;
			
			Если СписокОбъектов.Количество() > 0 Тогда
				
				ЗапросДопИнформации = Новый Запрос;
				ЗапросДопИнформации.УстановитьПараметр("Тип"           , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				ЗапросДопИнформации.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
				ЗапросДопИнформации.Текст = "
				|ВЫБРАТЬ
				|	КонтактнаяИнформация.Представление
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|	И
				|	КонтактнаяИнформация.Объект В(&СписокОбъектов)
				|";
				
				ВыборкаДопЗапроса = ЗапросДопИнформации.Выполнить().Выбрать();
				
				Счетчик = 0;
				Пока ВыборкаДопЗапроса.Следующий() Цикл
					
					Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаДопЗапроса.Представление) ИЛИ Врег(ВыборкаДопЗапроса.Представление) = Врег(Письмо.ОтправительАдресЭлектроннойПочты) Тогда
						Продолжить;
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
					Запрос.УстановитьПараметр(("Параметр" + СокрЛП(Строка(Счетчик))), ВыборкаДопЗапроса.Представление);
					Запрос.Текст = Запрос.Текст + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка                     КАК Ссылка,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Предмет             КАК Предмет,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ГруппаУчетнойЗаписи КАК ГруппаУчетнойЗаписи,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ДатаТранспорта      КАК ДатаТранспортаТаблицы
					|ИЗ
					|	КритерийОтбора.уатЭлектронныеПисьмаПоАдресуЭлектроннойПочты(&Параметр" + СокрЛП(Строка(Счетчик)) + ") КАК ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица
					|
					|ГДЕ
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Тема ПОДОБНО &ПреобразованнаяТема
					|	И
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
					|	И
					|	НЕ ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПометкаУдаления
					|
					|";
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ДатаТранспортаТаблицы УБЫВ
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет Тогда
				Письмо.Предмет   = Выборка.Предмет;
			КонецЕсли; 
			Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма Тогда
				Письмо.ГруппаУчетнойЗаписи = Выборка.ГруппаУчетнойЗаписи;
			КонецЕсли; 
			Если Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма Тогда
				Письмо.Основание = Выборка.Ссылка;
			КонецЕсли; 
			
		ИначеЕсли Письмо.УчетнаяЗапись.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма Тогда
			
			Письмо.Предмет = ПреобразованнаяТема;
			
		КонецЕсли;
		
	ИначеЕсли Письмо.УчетнаяЗапись.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма Тогда
		
		Письмо.Предмет = ПреобразованнаяТема;
		
	КонецЕсли; 
	
КонецПроцедуры

#Если Клиент Тогда
	
	// Процедура обрабатывает событие ПриВыводеСтроки в списках электронных писем.
	//
	Процедура уатПриВыводеСтрокиЭлектронногоПисьма(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьТекст  = Ложь;
		ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьФлажок = Ложь;
		Если ДанныеСтроки = Неопределено Тогда
			ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьКартинку = Ложь;
		Иначе
			// Покажем наличие вложений
			ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.ЕстьВложения.ИндексКартинки = ?(ДанныеСтроки.ЕстьВложения, 0, 2);
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПисьма = Перечисления.уатСтатусыПисем.Сохраненное Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.уатСтатусыПисем.Исходящее Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.ТусклоРозовый;
		КонецЕсли; 
		
		// Рассмотренность писем
		ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьФлажок   = Ложь;
		Если ДанныеСтроки.НеРассмотрено Тогда
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 0;
		Иначе
			ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 1;
		КонецЕсли;
		
		// Статусы писем
		ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьФлажок   = Ложь;
		Если ДанныеСтроки.СтатусПисьма = Перечисления.уатСтатусыПисем.Исходящее Тогда
			ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 3;
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное Тогда
			ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 2;			
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.уатСтатусыПисем.Полученное Тогда
			ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 1;
		ИначеЕсли ДанныеСтроки.СтатусПисьма = Перечисления.уатСтатусыПисем.Сохраненное Тогда
			ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 0;
		КонецЕсли;
		
		// Наличие потомков писем
		ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьФлажок   = Ложь;
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДанныеСтроки.СостояниеПотомкаПисьма) Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 0;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ОтветСохранен Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 4;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ОтветОтправлен Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 3;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ПереадресацияСохранена Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 2;
		ИначеЕсли ДанныеСтроки.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ПереадресацияОтправлена Тогда
			ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 1;
		КонецЕсли; 
		
	КонецПроцедуры
	
	//==================================================================================
	// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТЕКСТАМИ ЭЛЕКТРОННЫХ ПИСЕМ И ХТМЛ ТЕКСТАМИ
	

// Функция выполняет открытие файла внешним XML редактором, указанным в
// настройках пользователя.
//
// Параметры:
//  ИмяФайла     - Имя открываемого файла
//
// Возвращаемое значение:
//  Признак того, удалось открыть файл или нет
//
	Функция уатОткрытьФайлДляРедактированияВнешнимХТМЛРедактором(ИмяФайла) Экспорт
		
		Файл = Новый Файл(ИмяФайла);
		Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка открытия файла. Файл не найден на диске.");
			Возврат Ложь;
		КонецЕсли;
		
		ИмяПриложения = уатОбщегоНазначенияТиповые.уатПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"КоманднаяСтрокаДляЗапускаВнешнегоХТМЛРедактора");
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИмяПриложения) ИЛИ ТипЗнч(ИмяПриложения) <> Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("У пользователя не указана командная строка для запуска внешнего HTML редактора текстов.",, "Редактирование невозможно.");
			Возврат Ложь;
		КонецЕсли;
		
		ИмяПриложения = Врег(ИмяПриложения);
		Если Найти(ИмяПриложения, "[FILENAME]") = 0 ИЛИ СтрЧислоВхождений(ИмяПриложения, "[FILENAME]") > 1 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В настройках пользователя некорректно задана командная строка для запуска внешнего HTML редактора текстов.
			|Необходимо один раз указать место для подстановки имени файла в виде шаблона [FileName].",, "Редактирование невозможно.");
			Возврат Ложь;
		КонецЕсли;
		
		ИмяПриложения = СтрЗаменить(ИмяПриложения, "[FILENAME]", """" + ИмяФайла + """");
		
		ПолноеИмяBatФайла = КаталогВременныхФайлов() + "EditHTML.bat";
		ТекстBatФайла = Новый ТекстовыйДокумент;
		ТекстBatФайла.УстановитьТекст("START" + " """ + """ " + ИмяПриложения);
		ТекстBatФайла.Записать(ПолноеИмяBatФайла, КодировкаТекста.OEM);
		
		Попытка
			ЗапуститьПриложение(ПолноеИмяBatФайла);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Невозможно запустить внешнее приложение.");
			Возврат Ложь;
		КонецПопытки;
		
		Возврат Истина;
		
	КонецФункции
	
	// Процедура добавляет префикс в тэги
	//
	// Параметры:
	//	Структура - структура тега
	//  ИмяТега - имя тега
	//  
	Процедура уатНайтиИДобавитьПрефиксВТеги(Структура, ИмяТега)
		
		а = 0;
		НайденоОтступов = 0;
		Пока а < Структура.length Цикл
			Если Структура.item(а).nodeName = ИмяТега Тогда
				НайденоОтступов = НайденоОтступов + 1;
				уатНайтиИДобавитьПрефиксВТеги(Структура.item(а).all, ИмяТега);
				ТекстДляЗамены = Структура.item(а).innerText;
				Структура.item(а).innerText = "> " + СтрЗаменить(ТекстДляЗамены, Символы.ПС, (Символы.ПС + "> "));
			КонецЕсли; 
			а = а + 1;
		КонецЦикла; 
		
	КонецПроцедуры
	
	// <Описание функции>
	//
	// Параметры
	//  <Параметр1>  – <Тип.Вид> – <описание параметра>
	//                 <продолжение описания параметра>
	//  <Параметр2>  – <Тип.Вид> – <описание параметра>
	//                 <продолжение описания параметра>
	//
	// Возвращаемое значение:
	//   <Тип.Вид>   – <описание возвращаемого значения>
	//
	Функция уатПреобразоватьТекстИзХТМЛФорматаВПростой(ТекстВФорматеХТМЛ) Экспорт
		
		НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
		НовыйHTMLДокумент.open("text/html");
		НовыйHTMLДокумент.write(ТекстВФорматеХТМЛ);
		НовыйHTMLДокумент.close();
		
		уатНайтиИДобавитьПрефиксВТеги(НовыйHTMLДокумент.all, "BLOCKQUOTE");
		
		Возврат СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");
		
	КонецФункции
	
	// Процедура обрабатывает событие OnClick элемента управления ПолеHTMLДокумента
	// и в некоторых случаях подменяет стандартные действия
	//
	// Параметры
	//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь системы
	//  Элемент - ЭлементУправления ПолеHTMLДокумента
	//  pEvtObj - COMОбъект
	//  УчетнаяЗапись - СправочникСсылка.уатУчетныеЗаписиЭлектроннойПочты,
	//		с которой при необходимости будет отправлено письмо
	//  ГруппаУчетнойЗаписи - группа учетной записи, в которую помещать письмо
	//  ФормаВладелец - форма, владелец для формы нового письма
	//
	// Возвращаемое значение
	//  НЕТ
	//
	Процедура уатОбработкаСобытияOnClickПоляHTML(ТекущийПользователь, Элемент, pEvtObj, УчетнаяЗапись = Неопределено, ГруппаУчетнойЗаписи = Неопределено, ФормаВладелец = Неопределено, уатЭлектронноеПисьмо = Неопределено) Экспорт
		
		СтандартнаяОбработка = Ложь;
		
		Узел = pEvtObj.srcElement;
		
		href = "";
		
		Пока 1 = 1 Цикл
			Если Узел = Неопределено Тогда
				Прервать;	
			КонецЕсли;
			
			Попытка
				ИмяЦели = Узел.tagName
			Исключение
				Прервать;
			КонецПопытки;
			
			Если ИмяЦели = "A" Тогда
				Попытка
					href = Узел.href;
				Исключение
				КонецПопытки;
				Прервать;
			КонецЕсли; 
			
			Узел = Узел.parentElement;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(href) Тогда
			
			Если (ТипЗнч(уатЭлектронноеПисьмо) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") ИЛИ ТипЗнч(уатЭлектронноеПисьмо) = Тип("ДокументОбъект.уатЭлектронноеПисьмо"))
				И СтрЧислоВхождений(href, "ИмяФайлаРедактированияХТМЛТекста") > 0 
				И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(уатЭлектронноеПисьмо) Тогда
				
				Если ИмяКомпьютера() <> уатЭлектронноеПисьмо.ИмяКомпьютераРедактированияХТМЛТекста Тогда
					Сообщить("Файл редактируется на компьютере""" + уатЭлектронноеПисьмо.ИмяКомпьютераРедактированияХТМЛТекста + """" + ". Редактирование на текущем компьютере невозможно.");
				Иначе
					уатОткрытьФайлДляРедактированияВнешнимХТМЛРедактором(уатЭлектронноеПисьмо.ИмяФайлаРедактированияХТМЛТекста);
				КонецЕсли; 
				
			Иначе
				
				Если СтрЧислоВхождений(НРег(href), "mailto:") = 0 Тогда
					
					Если СтрЧислоВхождений(НРег(href), "about:blank") > 0 Тогда
						
						НайденаСсылка = Истина;
						
						Копия_href = СтрЗаменить(href, "about:blank", "");
						
						Попытка
							UUID = Новый УникальныйИдентификатор(Копия_href);
							Для каждого Документ Из Метаданные.Документы Цикл
								Ссылка = Документы[Документ.Имя].ПолучитьСсылку(UUID);
								Если Ссылка.ПолучитьОбъект() <> Неопределено Тогда
									Прервать;
								Иначе
									Ссылка = Неопределено;
								КонецЕсли; 
							КонецЦикла; 
						Исключение
							НайденаСсылка = Ложь;
						КонецПопытки;
						
						Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Ссылка) ИЛИ НЕ НайденаСсылка Тогда
							Если Найти(href, "www") = 0 И Найти(href, "http") = 0 Тогда
								СтандартнаяОбработка = Истина;
							Иначе
								Попытка
									ЗапуститьПриложение(СокрЛП(href));
								Исключение
									ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли; 
						Иначе
							Ссылка.ПолучитьФорму().Открыть();
						КонецЕсли; 
						
					Иначе
						
						Попытка
							ЗапуститьПриложение(СокрЛП(href));
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
						КонецПопытки;
						
					КонецЕсли;
					
				Иначе
					
					ТемаПисьма      = "";
					ТелоПисьма      = "";
					ИмяПолучателя   = "";
					АдресПолучателя = "";
					
					href = СокрЛП(СтрЗаменить(href, "mailto:", ""));
					href = СокрЛП(СтрЗаменить(href, "%20", " "));
					
					// Есть ли поле тема и тело письма
					Если СтрЧислоВхождений(НРег(href), "?subject=") > 0 Тогда
						НачалоТемы = Найти(НРег(href), "?subject=");
						Если СтрЧислоВхождений(НРег(href), "&body=") > 0 Тогда
							НачалоТела = Найти(НРег(href), "&body=");
							ТемаПисьма = Сред(href, (НачалоТемы + 9), (НачалоТела - НачалоТемы - 9));
							ТелоПисьма = Сред(href, (НачалоТела + 6));
						Иначе
							ТемаПисьма = Сред(href, (НачалоТемы + 9));
						КонецЕсли;
						href = СтрЗаменить(href, Сред(href, НачалоТемы), "");
					КонецЕсли;
					
					// Может есть имя получателя
					Если (Найти(href, "<") > 0 ИЛИ Найти(href, "[") > 0) И (Найти(href, ">") > 0 ИЛИ Найти(href, "]") > 0) Тогда
						ИмяПолучателя   = Сред(href, 1, (Макс(Найти(href, "<"), Найти(href, "[")) - 1));
						АдресПолучателя = Сред(href, (Макс(Найти(href, "<"), Найти(href, "[")) + 1), (Макс(Найти(href, ">"), Найти(href, "]")) - Макс(Найти(href, "<"), Найти(href, "[")) - 1));
					Иначе
						АдресПолучателя = СокрЛП(href);
					КонецЕсли;
					
					Если ПустаяСтрока(АдресПолучателя) Тогда
						Возврат;
					КонецЕсли; 
					
					СтруктураНовогоПисьма = Новый Структура;
					
					Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
						СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);
						Если НЕ УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу Тогда
							СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", УчетнаяЗапись.ГруппаИсходящие);
						Иначе
							Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись Тогда
								СтруктураНовогоПисьма.Вставить("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли;
					СтруктураНовогоПисьма.Вставить("Тело", ТелоПисьма);
					СтруктураНовогоПисьма.Вставить("Тема", ТемаПисьма);
					
					СписокПолучателей = Новый СписокЗначений;
					СписокПолучателей.Добавить(АдресПолучателя, ИмяПолучателя);
					СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);
					
					уатНаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,, Истина,, ФормаВладелец);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если НЕ СтандартнаяОбработка Тогда
				pEvtObj.returnValue  = Ложь;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	// Процедура обрабатывает событие пользователя перехода по ссылке
	// из поля текстового документа
	//
	// Параметры
	//  ВыделенныйТекст - текст ссылки для перехода
	//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
	//  ФормаВладелец - Форма, владелец для возможно новой открытой формы письма
	//
	Процедура уатПерейтиПоСсылкеИзХТМЛПоля(Знач ВыделенныйТекст, ТекущийПользователь, ФормаВладелец, УчетнаяЗапись) Экспорт
		
		Если ПустаяСтрока(ВыделенныйТекст) Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрЧислоВхождений(ВыделенныйТекст, "@") = 1 И СтрЧислоВхождений(ВыделенныйТекст, "http://") = 0 Тогда
			
			СтруктураНовогоПисьма = Новый Структура;
			
			Если Найти(ВыделенныйТекст, "mailto:") > 0 Тогда
				ВыделенныйТекст = СтрЗаменить(ВыделенныйТекст, "mailto:", "");
			КонецЕсли; 
			
			СписокПолучателей = Новый СписокЗначений;
			СписокПолучателей.Добавить(СокрЛП(ВыделенныйТекст), СокрЛП(ВыделенныйТекст));
			СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);
			Если УчетнаяЗапись <> Неопределено Тогда
				СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);
			КонецЕсли; 
			
			уатНаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,, Истина,, ФормаВладелец);
			
		Иначе
			
			Попытка
				ЗапуститьПриложение(СокрЛП(ВыделенныйТекст));
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	// Функция заменяет в ХТМЛ тексте ссылку на файл с картинкой на диске на некий УникальныйИдентификатор
	// по которому потом в Хранилище доп.информации ищутся необходимые картинки, сохраняются на диске
	// и ссылки на них подставляют в ХТМЛ текст вместо уникальных идентификаторов.
	//
	// Параметры
	//  ДокументCOMОбъект - COM Объект, ХТМЛ
	//  Письмо - ДокументСсылка.уатЭлектронноеПисьмо
	//  СоответствиеПисемИТекстов - Соответствие, соответствие уже преобразованных в текущей сессии текстов писем
	//
	// Возвращаемое значение:
	//   Структура, Преобразованный ХТМЛ текст, таблица вложений
	//
	Функция уатПропарситьHTMLТекстКартинкаВ_ИД(ДокументCOMОбъект, Письмо = Неопределено, СоответствиеПисемИТекстов) Экспорт
		
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Письмо) Тогда
			
			НайденноеСоответствие = СоответствиеПисемИТекстов.Получить(Письмо);
			
			// Найдем старые картинки от ХТМЛ
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("ПустаяСтрока", "");
			Запрос.УстановитьПараметр("Письмо", Письмо);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатВложенияЭлектронныхПисем.Ссылка                 КАК Ссылка,
			|	уатВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма,
			|	уатВложенияЭлектронныхПисем.ИмяФайла               КАК ИмяФайла
			|	
			|ИЗ
			|	Справочник.уатВложенияЭлектронныхПисем КАК уатВложенияЭлектронныхПисем
			|
			|ГДЕ
			|	уатВложенияЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
			|	И
			|	уатВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма <> &ПустаяСтрока
			|	И
			|	уатВложенияЭлектронныхПисем.Объект = &Письмо
			|";
			
			ТаблицаСуществующихФайлов = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли; 
		
		ТаблицаСоответствий = Новый ТаблицаЗначений;
		ТаблицаСоответствий.Колонки.Добавить("ИД"          , Новый ОписаниеТипов("Строка"));
		ТаблицаСоответствий.Колонки.Добавить("Файл"        , Новый ОписаниеТипов("Файл"));
		ТаблицаСоответствий.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		
		ПолученнаяСтрокаТекста = "";
		
		ТегиКартинок = ДокументCOMОбъект.all.tags("img");
		Для а = 0 По ТегиКартинок.length - 1 Цикл
			
			ИсточникКартинки = ТегиКартинок.item(а).src;
			Если Найти(ИсточникКартинки, "file:///") = 1 Тогда
				ИсточникКартинки = Сред(ИсточникКартинки, 9);
			ИначеЕсли Найти(ИсточникКартинки, "file:") = 1 Тогда
				ИсточникКартинки = Сред(ИсточникКартинки, 6);
			КонецЕсли;
			ИсточникКартинки = СтрЗаменить(ИсточникКартинки, "%20", " ");
			
			Файл = Новый Файл(ИсточникКартинки);
			Если НЕ Файл.Существует() Тогда
				Продолжить;
			КонецЕсли; 
			
			ИмяФайлаБезПути = Строка(ТегиКартинок.item(а).nameProp);
			ИД = "";
			Если НЕ ПустаяСтрока(ИмяФайлаБезПути) И ТипЗнч(ТаблицаСуществующихФайлов) = Тип("ТаблицаЗначений") Тогда
				Если СтрЧислоВхождений(ИмяФайлаБезПути, ".") = 1 Тогда
					ИмяФайлаБезПути = Лев(ИмяФайлаБезПути, (Найти(ИмяФайлаБезПути, ".") - 1));
					СтрокаТаблицы = ТаблицаСуществующихФайлов.Найти(ИмяФайлаБезПути, "ИДФайлаПочтовогоПисьма");
					Если СтрокаТаблицы <> Неопределено Тогда
						ИД = СтрокаТаблицы.ИДФайлаПочтовогоПисьма;
						ТаблицаСуществующихФайлов.Удалить(СтрокаТаблицы);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
			
			Если ПустаяСтрока(ИД) Тогда
				ИД = Строка(Новый УникальныйИдентификатор);
				НоваяСтрокаТаблицы = ТаблицаСоответствий.Добавить();
				НоваяСтрокаТаблицы.ИД   = ИД;
				НоваяСтрокаТаблицы.Файл = Файл;
				Если ТегиКартинок.item(а).alt <> "null" Тогда
					НоваяСтрокаТаблицы.Наименование = ТегиКартинок.item(а).alt;
				КонецЕсли; 
			КонецЕсли; 
			
			ТегиКартинок.item(а).src = ИД;
			
		КонецЦикла;
		
		// Удалим ненужные картинки
		Если ТипЗнч(ТаблицаСуществующихФайлов) = Тип("ТаблицаЗначений") И ТаблицаСуществующихФайлов.Количество() > 0 Тогда
			Если НайденноеСоответствие <> Неопределено Тогда
				СоответствиеПисемИТекстов.Удалить(Письмо);
			КонецЕсли; 
			Для каждого СтрокаТаблицы Из ТаблицаСуществующихФайлов Цикл
				Попытка
					СтрокаТаблицы.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				Исключение
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли; 
		
		СтруктураВозврата = Новый Структура("ТекстПисьма, ТаблицаСоответствий", ДокументCOMОбъект.all.tags("html").item(0).outerHTML, ТаблицаСоответствий);
		
		Возврат СтруктураВозврата;
		
	КонецФункции
	
#КонецЕсли

// Функция заменяет в ХТМЛ тексте уникальные идентификаторы на ссылки на картинки на диске,
// и при необходимости сохраняет файлы из приложений письма на диск
//
// Параметры
//  СоответствиеТекстовЭлектронныхПисем - Соответствие, письма и ХТМЛ тексты,
//		которые уже были преобразованы в текущем сеансе
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  Письмо - ДокументСсылка.уатЭлектронноеПисьмо или таблица значений с приложениями письма
//  ТекстПисьма - Строка, текст для преобразования
//
// Возвращаемое значение:
//   Строка, преобразованный текст
//
Функция уатПропарситьHTMLИДВ_ТекстКартинки(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Письмо, ТекстПисьма) Экспорт
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
		
		ВременноеЗначение = СоответствиеТекстовЭлектронныхПисем.Получить(Письмо);
		Если ВременноеЗначение <> Неопределено Тогда
			ТекстПисьма = ВременноеЗначение;
			Возврат ТекстПисьма;
		КонецЕсли;
		
		Если Письмо.ВидТекстаПисьма <> Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			ТекстПисьма = Письмо.ТекстПисьма;
			СоответствиеТекстовЭлектронныхПисем.Вставить(Письмо, ТекстПисьма);
			Возврат ТекстПисьма;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		Запрос.УстановитьПараметр("Письмо", Письмо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВложенияЭлектронныхПисем.Хранилище              КАК Данные,
		|	уатВложенияЭлектронныхПисем.ИмяФайла               КАК ИмяФайла,
		|	уатВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма
		|ИЗ
		|	Справочник.уатВложенияЭлектронныхПисем КАК уатВложенияЭлектронныхПисем
		|
		|ГДЕ
		|	уатВложенияЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|	И
		|	уатВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма <> &ПустаяСтрока
		|	И
		|	уатВложенияЭлектронныхПисем.Объект = &Письмо
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат ТекстПисьма;
		КонецЕсли;
		
		ТаблицаДанных = РезультатЗапроса.Выгрузить();
		
	ИначеЕсли ТипЗнч(Письмо) = Тип("ТаблицаЗначений") Тогда
		ТаблицаДанных = Письмо.Скопировать();
	Иначе
		Возврат ТекстПисьма;
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла();
		
		Попытка
			СтрокаТаблицы.Данные.Получить().Записать(ПутьКФайлу);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, СтрокаТаблицы.ИДФайлаПочтовогоПисьма, ПутьКФайлу);
		
	КонецЦикла;
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.уатЭлектронноеПисьмо") Тогда
		СоответствиеТекстовЭлектронныхПисем.Вставить(Письмо, ТекстПисьма);
	КонецЕсли; 
	
	Возврат ТекстПисьма;
	
КонецФункции // уатПропарситьHTMLИДВ_ТекстКартинки()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ФИЛЬТРАЦИИ ЭЛЕКТРОННЫХ ПИСЕМ

// Процедура вызывается при получении письма, и при необходимости
// отрабатывает фильтры, настроенные в учетной записи письма
// 
// Параметры:
//  Письмо - ДокументОбъект.уатЭлектронноеПисьмо
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
// 
Процедура уатПрименитьФильтрыКПисьму(Письмо, ТекущийПользователь, ЗаписыватьОбъект = Ложь) Экспорт
	
	Если ТипЗнч(Письмо) <> Тип("ДокументОбъект.уатЭлектронноеПисьмо") Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = Письмо.УчетнаяЗапись;
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.уатУчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаФильтров = Справочники.уатФильтрыДляЭлектронныхПисем.Выбрать(, УчетнаяЗапись, Новый Структура("Использование", Истина), "Порядок ВОЗР");
	ПодходящийФильтр = Неопределено;
	Пока ВыборкаФильтров.Следующий() Цикл
		
		Если ПодходящийФильтр <> Неопределено
			И ПодходящийФильтр.ДействияФильтра.Найти(Перечисления.уатВидыДействийФильтровЭлектронныхПисем.ПродолжитьДальнейшуюОбработкуПравил, "ДействиеФильтра") = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если ВыборкаФильтров.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРезультатовОперацийСтрокТЧ = Новый СписокЗначений;
		
		Для каждого СтрокаТЧ Из ВыборкаФильтров.УсловияФильтра Цикл
			
			ЗначениеАргументаУсловия = уатПолучитьЗначениеАргументаУсловияФильтра(Письмо, СтрокаТЧ.Условие);
			
			Если ЗначениеАргументаУсловия = Неопределено Тогда
				СписокРезультатовОперацийСтрокТЧ.Добавить(Ложь);
				Продолжить;
			КонецЕсли;
			
			СписокРезультатовОперацийСтрокТЧ.Добавить(уатПроверитьУсловиеФильтра(ЗначениеАргументаУсловия, СтрокаТЧ.ОтрицаниеУсловия, СтрокаТЧ.ЗначениеУсловия));
			
		КонецЦикла;
		
		Если ВыборкаФильтров.ОперацияУсловия Тогда
			// Соединение условий по "И"
			Если СписокРезультатовОперацийСтрокТЧ.НайтиПоЗначению(Ложь) = Неопределено Тогда
				ПодходящийФильтр = ВыборкаФильтров.Ссылка;
			КонецЕсли; 
		Иначе
			// Соединение условий по "ИЛИ"
			Если СписокРезультатовОперацийСтрокТЧ.НайтиПоЗначению(Истина) <> Неопределено Тогда
				ПодходящийФильтр = ВыборкаФильтров.Ссылка;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ПодходящийФильтр <> Неопределено Тогда
		уатПрименитьДействиеФильтра(Письмо, ПодходящийФильтр, ТекущийПользователь);
		Если ЗаписыватьОбъект Тогда
			Попытка
				Письмо.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет значение для фильтра, по которому происходит фильтрация
//
// Параметры
//  Письмо - ДокументОбъект.уатЭлектронноеПисьмо
//  УсловиеФильтра - ПеречислениеСсылка.УсловияФильтровЭлектронныхПисем, условие фильтрации
//
// Возвращаемое значение:
//   Строка
//
Функция уатПолучитьЗначениеАргументаУсловияФильтра(Письмо, УсловиеФильтра)
	
	ЗначениеВозврата = Неопределено;
	
	Если УсловиеФильтра = Перечисления.уатУсловияФильтровЭлектронныхПисем.ПолеКомуСодержит Тогда
		ЗначениеВозврата = Письмо.Кому;
	ИначеЕсли УсловиеФильтра = Перечисления.уатУсловияФильтровЭлектронныхПисем.ПолеКопииСодержит Тогда
		ЗначениеВозврата = Письмо.Копии;
	ИначеЕсли УсловиеФильтра = Перечисления.уатУсловияФильтровЭлектронныхПисем.ПолеОтправительСодержит Тогда
		ЗначениеВозврата = Письмо.ОтправительПредставление;
	ИначеЕсли УсловиеФильтра = Перечисления.уатУсловияФильтровЭлектронныхПисем.ТекстПисьмаСодержит Тогда
		ЗначениеВозврата = Письмо.ТекстПисьма;
	ИначеЕсли УсловиеФильтра = Перечисления.уатУсловияФильтровЭлектронныхПисем.ТемаПисьмаСодержит Тогда
		ЗначениеВозврата = Письмо.Тема;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

// Функция проверяет, удовлетворяет ли данное письмо текущему фильтру.
//
// Параметры
//  ЗначениеДляПроверки - Строка, значение одного из реквизитов письма
//  ОтрицаниеУсловия - Булево, отрицание условия - это истина
//  ЗначениеФильтра - Неопределено, значение указанное в параметрах фильтра для проверки
//
// Возвращаемое значение:
//   Булево, удовлетворяет или нет текущему фильтру
//
Функция уатПроверитьУсловиеФильтра(ЗначениеДляПроверки, ОтрицаниеУсловия, ЗначениеФильтра)
	
	РезультатПроверки = Неопределено;
	
	Если СтрЧислоВхождений(ЗначениеДляПроверки, ЗначениеФильтра) > 0 Тогда
		РезультатПроверки = Истина;
	Иначе
		РезультатПроверки = Ложь;
	КонецЕсли; 
	
	Если ОтрицаниеУсловия Тогда
		РезультатПроверки = НЕ РезультатПроверки;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Процедура изменяет параметры письма в соответствии с походящим фильтром.
//
// Параметры:
//  Письмо - ДокументОбъект.уатЭлектронноеПисьмо, значения реквизитов которого необходимо изменить
//  ПодходящийФильтр - СправочникСсылка.уатФильтрыДляЭлектронныхПисем, фильтр найденный для текущего письма
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//
Процедура уатПрименитьДействиеФильтра(Письмо, ПодходящийФильтр, ТекущийПользователь)
	
	Для каждого СтрокаТЧ Из ПодходящийФильтр.ДействияФильтра Цикл
		
		Если СтрокаТЧ.ДействиеФильтра = Перечисления.уатВидыДействийФильтровЭлектронныхПисем.ПоместитьПисьмоВПапку И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(СтрокаТЧ.ГруппаПисем) Тогда
			Если СтрокаТЧ.ГруппаПисем = ПодходящийФильтр.Владелец.ГруппаУдаленные Тогда
				Письмо.ПометкаУдаления = Истина;
			Иначе
				Письмо.ГруппаУчетнойЗаписи = СтрокаТЧ.ГруппаПисем;
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.ДействиеФильтра = Перечисления.уатВидыДействийФильтровЭлектронныхПисем.УстановитьПисьмуФлагРассмотрено Тогда
			Письмо.НеРассмотрено = Ложь;
			Письмо.ОТветственный = ТекущийПользователь;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#Если Клиент Тогда
	
	// Функция открывает форму письма из объекта ИнтернетПочтовогоСообщения
	// для целей, когда письмо является приложением другого письма
	//
	// Параметры
	//  ОбъектФайла - СправочникСсылка.уатВложенияЭлектронныхПисем
	//  ТекущийПользователь - СправочникСсылка.Пользователи
	//
	// Возвращаемое значение
	//  Булево - успешное завершение операции
	//  
	Функция уатОткрытьФайлMSG(ОбъектФайла, ТекущийПользователь) Экспорт
		
		Если ТипЗнч(ОбъектФайла) <> Тип("СправочникСсылка.уатВложенияЭлектронныхПисем") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Данные = ОбъектФайла.Хранилище.Получить();
		Если ТипЗнч(Данные) <> Тип("ИнтернетПочтовоеСообщение") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(Данные.Отправитель) = Тип("Строка") Тогда
			Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Данные.Отправитель);
		Иначе
			Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Данные.Отправитель.Адрес);
		КонецЕсли;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатУчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.уатУчетныеЗаписиЭлектроннойПочты КАК уатУчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	уатУчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			УчетнаяЗапись = Выборка.Ссылка;
		КонецЕсли; 
		
		ДокументПисьмо = уатПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(Данные, УчетнаяЗапись, ТекущийПользователь,,);
		
		ДокументПисьмо.СтатусПисьма = Перечисления.уатСтатусыПисем.Отправленное;
		ДокументПисьмо.мРежимБезЗаписи = Истина;
		
		ФормаПисьма = ДокументПисьмо.ПолучитьФорму();
		
		Для каждого Вложение Из Данные.Вложения Цикл
			
			Если Вложение.Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Вложение.Идентификатор) Тогда
				ДокументПисьмо.ВидТекстаПисьма = Перечисления.уатВидыТекстовЭлектронныхПисем.HTMLСКартинками;
				НоваяСтрока = ФормаПисьма.ВложенияПисьмаТЗСкрытые.Добавить();
				НоваяСтрока.ИДФайлаПочтовогоПисьма = Вложение.Идентификатор;
			Иначе
				НоваяСтрока = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
			КонецЕсли; 
			
			Если ТипЗнч(Вложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
				НоваяСтрока.ИмяФайла = ?(ПустаяСтрока(Вложение.Имя), (Данные.ИдентификаторСообщения), Вложение.Имя) + ".msg";
			Иначе
				НоваяСтрока.ИмяФайла = Вложение.Имя;
			КонецЕсли; 
			НоваяСтрока.Данные = Новый ХранилищеЗначения(Вложение.Данные, Новый СжатиеДанных());
			
		КонецЦикла;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(УчетнаяЗапись, УчетнаяЗапись);
		ФормаПисьма.ЭлементыФормы.УчетнаяЗапись.СписокВыбора = СписокВыбора;
		
		ФормаПисьма.Открыть();
		
		Возврат Истина;
		
	КонецФункции
	
	// Процедура ищет потомка письма (ответ или переадресацию) и открывает его форму
	//
	// Параметры
	//  ДокументСсылка - ДокументСсылка.уатЭлектронноеПисьмо, потомков которого надо искать
	//
	//
	Процедура уатНайтиИОткрытьПотомкаПисьма(ДокументСсылка) Экспорт
		
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДокументСсылка.СостояниеПотомкаПисьма) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		СтатусыПисем = Неопределено;
		Если ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ОтветОтправлен Тогда
			Запрос.УстановитьПараметр("СтатусПисьма" , Перечисления.уатСтатусыПисем.Отправленное);
			Запрос.УстановитьПараметр("Переадресация", ЛОЖЬ);
			Запрос.УстановитьПараметр("Ответ"        , ИСТИНА);
		ИначеЕсли ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ПереадресацияОтправлена Тогда
			Запрос.УстановитьПараметр("СтатусПисьма" , Перечисления.уатСтатусыПисем.Отправленное);
			Запрос.УстановитьПараметр("Переадресация", ИСТИНА);
			Запрос.УстановитьПараметр("Ответ"        , ЛОЖЬ);
		ИначеЕсли ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ОтветСохранен Тогда
			СтатусыПисем = Новый Массив;
			СтатусыПисем.Добавить(Перечисления.уатСтатусыПисем.Сохраненное);
			СтатусыПисем.Добавить(Перечисления.уатСтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СтатусПисьма" , СтатусыПисем);
			Запрос.УстановитьПараметр("Переадресация", ЛОЖЬ);
			Запрос.УстановитьПараметр("Ответ"        , ИСТИНА);
		ИначеЕсли ДокументСсылка.СостояниеПотомкаПисьма = Перечисления.уатСостоянияПотомковЭлектронныхПисем.ПереадресацияСохранена Тогда
			СтатусыПисем = Новый Массив;
			СтатусыПисем.Добавить(Перечисления.уатСтатусыПисем.Сохраненное);
			СтатусыПисем.Добавить(Перечисления.уатСтатусыПисем.Исходящее);
			Запрос.УстановитьПараметр("СтатусПисьма" , СтатусыПисем);
			Запрос.УстановитьПараметр("Переадресация", ИСТИНА);
			Запрос.УстановитьПараметр("Ответ"        , ЛОЖЬ);
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("Основание", ДокументСсылка);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатЭлектронноеПисьмо.Ссылка
		|ИЗ
		|	Документ.уатЭлектронноеПисьмо КАК уатЭлектронноеПисьмо
		|
		|ГДЕ
		|	уатЭлектронноеПисьмо.Основание = &Основание
		|	И
		|	уатЭлектронноеПисьмо.СтатусПисьма" + ?(ТипЗнч(СтатусыПисем) = Тип("Массив"), " В(&СтатусПисьма)", " = &СтатусПисьма") + "
		|	И
		|	уатЭлектронноеПисьмо.Переадресация = &Переадресация
		|	И
		|	уатЭлектронноеПисьмо.Ответ = &Ответ
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатЭлектронноеПисьмо.Дата УБЫВ
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Выборка.Ссылка.ПолучитьФорму().Открыть();
		Иначе
			Предупреждение("Письмо-потомок не найдено, возможно оно было удалено.");
		КонецЕсли; 
		
	КонецПроцедуры
	
#КонецЕсли

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ НАСТРОЙКИ ПОРЯДКА ЭЛЕМЕНТОВ СПРАВОЧНИКА

// Процедура изменяет порядок следования объектов с настраиваемым из ВЯ
// порядком следования.
// 
// Параметры:
//  ЭлементСсылка - СправочникСсылка, элемент для которого необходимо изменить порядок
//  НаправлениеПорядка - Строка, "Вверх" или "Вниз"
//
Процедура уатИзменитьПорядок(ЭлементСсылка, НаправлениеПорядка) Экспорт
	
	ЭлементЗамены = уатОпределитьНовыйПорядок(ЭлементСсылка, НаправлениеПорядка);
	
	Если ЭлементЗамены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйПорядокЗамены   = ЭлементЗамены.Порядок;
	НовыйПорядокЭлемента = ЭлементСсылка.Порядок;
	
	Если НаправлениеПорядка = "Вверх" Тогда
		Если НовыйПорядокЗамены < НовыйПорядокЭлемента Тогда
			ПромежуточныйПорядок = НовыйПорядокЗамены;
			НовыйПорядокЗамены   = НовыйПорядокЭлемента;
			НовыйПорядокЭлемента = ПромежуточныйПорядок;
		Иначе
			НовыйПорядокЭлемента = НовыйПорядокЗамены + 1;
		КонецЕсли; 
	Иначе
		Если НовыйПорядокЗамены > НовыйПорядокЭлемента Тогда
			ПромежуточныйПорядок = НовыйПорядокЗамены;
			НовыйПорядокЗамены   = НовыйПорядокЭлемента;
			НовыйПорядокЭлемента = ПромежуточныйПорядок;
		Иначе
			НовыйПорядокЭлемента = НовыйПорядокЗамены - 1;
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ФиксироватьТранзакцию = Истина;
	
	Если НовыйПорядокЗамены <> ЭлементЗамены.Порядок Тогда
		ОбъектЗамены = ЭлементЗамены.ПолучитьОбъект();
		ОбъектЗамены.Порядок = НовыйПорядокЗамены;
		ОбъектЗамены.КонтролироватьПорядок = Ложь;
		Попытка
			ОбъектЗамены.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			ФиксироватьТранзакцию = Ложь;
		КонецПопытки;
	КонецЕсли; 
	
	Если ФиксироватьТранзакцию Тогда
		ОбъектЭлемента = ЭлементСсылка.ПолучитьОбъект();
		ОбъектЭлемента.Порядок = НовыйПорядокЭлемента;
		Попытка
			ОбъектЭлемента.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			ФиксироватьТранзакцию = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ФиксироватьТранзакцию Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет элемент справочника, с которым необходимо
// произвести "рокировку" текущего элемента
//
// Параметры
//  ЭлементСсылка - СправочникСсылка, элемент для изменения порядка
//  НаправлениеПорядка - Строка, "Вверх" или "Вниз"
//
// Возвращаемое значение:
//   СправочникСсылка
//
Функция уатОпределитьНовыйПорядок(ЭлементСсылка, НаправлениеПорядка)
	
	ТекущийПорядок = ЭлементСсылка.Порядок;
	
	ИмяТаблицы = ЭлементСсылка.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущийПорядок", ТекущийПорядок);
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникПорядка.Ссылка
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК СправочникПорядка
	|ГДЕ
	|	СправочникПорядка.Порядок " + ?(НаправлениеПорядка = "Вверх", "<", ">") + " &ТекущийПорядок " + уатПолучитьДополнениеЗапроса(ЭлементСсылка, Запрос) + "
	|УПОРЯДОЧИТЬ ПО
	|	СправочникПорядка.Порядок " + ?(НаправлениеПорядка = "Вверх", "УБЫВ", "ВОЗР") + "
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	Иначе
		// Текущий элемент или первый (при движении вверх)
		// или последний (при движении вниз)
		// или вообще единственный
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущийПорядок", ТекущийПорядок);
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникПорядка.Ссылка
		|ИЗ
		|	Справочник." + ИмяТаблицы + " КАК СправочникПорядка
		|ГДЕ
		|	СправочникПорядка.Порядок " + ?(НаправлениеПорядка = "Вверх", ">", "<") + " &ТекущийПорядок " + уатПолучитьДополнениеЗапроса(ЭлементСсылка, Запрос) + "
		|УПОРЯДОЧИТЬ ПО
		|	СправочникПорядка.Порядок " + ?(НаправлениеПорядка = "Вверх", "УБЫВ", "ВОЗР") + "
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецФункции

// Вспомогательная функция для определения условий запроса в механизме
// изменения порядка следования элементов. Ставит условия на родителя и владельца
//
// Параметры
//  Элемент - СправочникСсылка, для которого необходимо изменить порядок
//  Запрос - Запрос, в который дописываем условия
// 
//  Возвращаемое значение:
//   Строка - условие запроса
// 
Функция уатПолучитьДополнениеЗапроса(Элемент, Запрос, БезПервогоИ = Ложь)
	
	ТекстЗапроса = "";
	
	Если Элемент.Метаданные().Иерархический = Истина Тогда
		Запрос.УстановитьПараметр("ТекущийРодитель", Элемент.Родитель);
		Если НЕ БезПервогоИ Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И
			|";
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + "
		|	СправочникПорядка.Родитель = &ТекущийРодитель
		|";
	КонецЕсли; 
	
	Если Элемент.Метаданные().Владельцы.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТекущийВладелец", Элемент.Владелец);
		Если НЕ (ПустаяСтрока(ТекстЗапроса) И БезПервогоИ) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И
			|";
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + "
		|	СправочникПорядка.Владелец = &ТекущийВладелец
		|";
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает значение порядка для нового элемента справочника.
//
// Параметры
//  ЭлементОбъект - СправочникОбъект - новый объект
//
// Возвращаемое значение:
//   Число - новый порядок
//
Функция уатНазначитьНовыйПорядок(ЭлементОбъект)
	
	ИмяТаблицы = ЭлементОбъект.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СправочникПорядка.Порядок
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК СправочникПорядка";
	
	ДополнениеЗапроса = уатПолучитьДополнениеЗапроса(ЭлементОбъект, Запрос, Истина);
	
	Если НЕ ПустаяСтрока(ДополнениеЗапроса) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|" + ДополнениеЗапроса + "
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	СправочникПорядка.Порядок УБЫВ
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат (Выборка.Порядок + 1)
	КонецЕсли; 
	
КонецФункции

// Процедура вызывается перед записью объекта, для которого необходимо
// контролировать порядок элементов.
// 
// Параметры
//  Отказ - Булево, отказ от записи объекта
//  ЭтотОбъект - СправочникОбъект
//  КонтролироватьПорядок - Булево, контролировать порядок при записи объекта или нет
//
Процедура уатПередЗаписьюОбъектаПорядка(Отказ, ЭтотОбъект, КонтролироватьПорядок) Экспорт
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		ЭтотОбъект.Порядок = уатНазначитьНовыйПорядок(ЭтотОбъект);
	Иначе
		Если ЭтотОбъект.Ссылка.Родитель <> ЭтотОбъект.Родитель ИЛИ ЭтотОбъект.Ссылка.Владелец <> ЭтотОбъект.Владелец Тогда
			ЭтотОбъект.Порядок = уатНазначитьНовыйПорядок(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если КонтролироватьПорядок Тогда
		
		ИмяТаблицы = ЭтотОбъект.Метаданные().Имя;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущийПорядок", ЭтотОбъект.Порядок);
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникПорядка.Порядок
		|ИЗ
		|	Справочник." + ИмяТаблицы + " КАК СправочникПорядка
		|ГДЕ
		|	СправочникПорядка.Порядок = &ТекущийПорядок
		|";
		
		Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
			Запрос.УстановитьПараметр("ТекущаяСсылка", ЭтотОбъект.Ссылка);
			Запрос.Текст = Запрос.Текст + "
			|И
			|	СправочникПорядка.Ссылка <> &ТекущаяСсылка
			|";
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + уатПолучитьДополнениеЗапроса(ЭтотОбъект, Запрос);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;
			#Если Клиент Тогда
				Сообщить("Не уникальный порядок элемента справочника.");
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры


//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УЧЕТНЫМИ ЗАПИСЯМИ ЭЛЕКТРОННОЙ ПОЧТЫ

// Функция определяет для текущего пользователя учетные записи, доступ к которым разрешен
//
// Параметры
//  Пользователь - СправочникСсылка.Пользователи, текущий пользователь
//
// Возвращаемое значение:
//   СтруктураВозврата - структура
//   Ключи:
//    - Чтение, список значений, учетные записи доступные для чтения
//    - Отправка, список значений, учетные записи доступные для отправки
//    - Транспорт, список значений, учетные записи доступные для транспорта писем
//    - ГруппыВходящие, список значений, группы писем электронной почты, как входящие в учетной записи
//    - ГруппыИсходящие, список значений, группы писем электронной почты, как исходящие в учетной записи
//    - ГруппыУдаленные, список значений, группы писем электронной почты, как удаленные в учетной записи
//
Функция уатПолучитьДоступныеУчетныеЗаписи(Пользователь) Экспорт
	
	СписокЧтение    = Новый СписокЗначений;
	СписокОтправка  = Новый СписокЗначений;
	СписокТранспорт = Новый СписокЗначений;
	СписокДоступ    = Новый СписокЗначений;
	
	ГруппыВходящие  = Новый Соответствие;
	ГруппыИсходящие = Новый Соответствие;
	ГруппыУдаленные = Новый Соответствие;
	ГруппыЧерновики = Новый Соответствие;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.уатУчетныеЗаписиЭлектроннойПочты) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекПользователь", Пользователь);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка                       КАК УчетнаяЗапись,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.Наименование          КАК УчетнаяЗаписьНаименование,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.АдресЭлектроннойПочты КАК УчетнаяЗаписьАдресЭлектроннойПочты,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.ГруппаВходящие        КАК УчетнаяЗаписьГруппаВходящие,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.ГруппаИсходящие       КАК УчетнаяЗаписьГруппаИсходящие,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.ГруппаУдаленные       КАК УчетнаяЗаписьГруппаУдаленные,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.ГруппаЧерновики       КАК УчетнаяЗаписьГруппаЧерновики,
		|	ИСТИНА                                                                         КАК Чтение,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Отправка                     КАК Отправка,
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Транспорт                    КАК Транспорт,
		|	(уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Отправка ИЛИ уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Транспорт) КАК Доступ
		|ИЗ
		|	Справочник.уатУчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи КАК уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи
		|
		|ГДЕ
		|	уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Пользователь = &ТекПользователь
		|	И
		|	НЕ уатУчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.ПометкаУдаления
		|	
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Чтение = Истина Тогда
				СписокЧтение.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));
			КонецЕсли; 
			
			Если Выборка.Отправка = Истина Тогда
				СписокОтправка.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));
			КонецЕсли; 
			
			Если Выборка.Транспорт = Истина Тогда
				СписокТранспорт.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));
			КонецЕсли; 
			
			Если Выборка.Доступ = Истина Тогда
				СписокДоступ.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));
			КонецЕсли; 
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.УчетнаяЗаписьГруппаВходящие) Тогда
				ГруппыВходящие.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаВходящие);
			КонецЕсли; 
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.УчетнаяЗаписьГруппаИсходящие) Тогда
				ГруппыИсходящие.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаИсходящие);
			КонецЕсли; 
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.УчетнаяЗаписьГруппаУдаленные) Тогда
				ГруппыУдаленные.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаУдаленные);
			КонецЕсли; 
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.УчетнаяЗаписьГруппаЧерновики) Тогда
				ГруппыЧерновики.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаЧерновики);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("Чтение, Отправка, Транспорт, Доступ, ГруппыВходящие, ГруппыИсходящие, ГруппыУдаленные, ГруппыЧерновики", СписокЧтение, СписокОтправка, СписокТранспорт, СписокДоступ, ГруппыВходящие, ГруппыИсходящие, ГруппыУдаленные ,ГруппыЧерновики);
	
КонецФункции

// Функция осуществляет поиск данных в контактной информации по адресам электронной почты
//
// Параметры
//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
//  ТаблицаПредставленийКонтактнойИнформации - таблица с исходными данными для поиска по контактной информации
//  ПоИмениОбъекта - Булево, осуществлять поиск по имени или по адресу электронной почты объекта
//
// Возвращаемое значение:
//   ТаблицаЗапроса - ТаблицаЗначений, результат поиска
//
Функция уатПоискВКонтактнойИнформации(ТаблицаПредставленийКонтактнойИнформации, ПоИмениОбъекта = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	СтрокаУсловий = "";
	СтрокаУсловийГде = "";
	ИндексУсловия = 0;
	Для каждого СтрокаТаблицы Из ТаблицаПредставленийКонтактнойИнформации Цикл
		СтрокаИндексаУсловия = СтрЗаменить(Строка(ИндексУсловия), Символы.НПП, "");
		Если НЕ ПоИмениОбъекта Тогда
			Если ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ПустаяСтрока(СтрокаУсловий) Тогда
				СтрокаУсловий = СтрокаУсловий + Символы.ПС + " ИЛИ " + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				СтрокаУсловий = СтрокаУсловий + "(Представление ПОДОБНО &ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия + 
				" И Объект.Наименование ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия + ")";
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.АдресЭлектроннойПочты)) + "%"));
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.ПредставлениеОбъекта)) + "%"));
			ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				СтрокаУсловий = СтрокаУсловий + "(Объект.Наименование ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия + ")";
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.ПредставлениеОбъекта)) + "%"));
			ИначеЕсли ПустаяСтрока(СтрокаТаблицы.ПредставлениеОбъекта) И НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭлектроннойПочты) Тогда
				СтрокаУсловий = СтрокаУсловий + "Представление ПОДОБНО &ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия;
				Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформацииАдрес" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.АдресЭлектроннойПочты)) + "%"));
			КонецЕсли; 
		Иначе
			Если НЕ ПустаяСтрока(СтрокаУсловийГде) Тогда
				СтрокаУсловийГде = СтрокаУсловийГде + Символы.ПС + " ИЛИ " + Символы.ПС;
			КонецЕсли;
			СтрокаУсловийГде = СтрокаУсловийГде + "КонтактнаяИнформация.Объект.Наименование ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия +
			" ИЛИ КонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия;
			Запрос.УстановитьПараметр(("ПредставлениеКонтактнойИнформации" + СтрокаИндексаУсловия), (СокрЛП(Строка(СтрокаТаблицы.ПредставлениеОбъекта)) + "%"));
		КонецЕсли;
		ИндексУсловия = ИндексУсловия + 1;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаУсловий) Тогда
		СтрокаУсловий = " И (" + СтрокаУсловий + ")";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Тип"                , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ДатаСреза"          , ТекущаяДата());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект.Наименование КАК ПредставлениеОбъекта,
	|	КонтактнаяИнформация.Объект              КАК Объект,
	|	КонтактнаяИнформация.Вид                 КАК Вид,
	|	КонтактнаяИнформация.Представление       КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип" + СтрокаУсловий + "
	|";
	
	Если Не ПустаяСтрока(СтрокаУсловийГде) Тогда
		Запрос.Текст = Запрос.Текст + "
		|И
		|	(" + СтрокаУсловийГде + ")
		|";
	КонецЕсли; 
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из ТаблицаЗапроса Цикл
		Строка.ПредставлениеОбъекта = СтрЗаменить(Строка.ПредставлениеОбъекта, ",", "");
		Строка.Представление        = СтрЗаменить(Строка.Представление, ",", "");
	КонецЦикла; 
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОбъектыКонтактнойИнформации()

// Процедура вызывается по событию НачалоВыбораИзСписка
// у полей ввода, в которых редактируются даты со временем.
// 
//  Параметры
//   ЭлементУправления - ПолеВвода, в котором редактируется значение даты
//   ЭтаФорма - Форма
//   Пользователь - СправочникСсылка.Пользователи
//   СтандартнаяОбработка - булево
//   ПолныйГод - Булево, представление года даты в списке выбора
//
Процедура уатВыбратьОтложенноеВремяИзСписка(ЭлементУправления) Экспорт
	
	СписокВремен  = ЭлементУправления.СписокВыбора;
	Если СписокВремен.Количество() > 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокВремен.Добавить("Через30минут"          , "Через 30 минут");
	СписокВремен.Добавить("ЧерезЧас"              , "Через 1 час");
	СписокВремен.Добавить("Через2Часа"            , "Через 2 часа");
	СписокВремен.Добавить("Завтра"                , "Завтра");
	СписокВремен.Добавить("Послезавтра"           , "Послезавтра");
	СписокВремен.Добавить("НачалоСледующейНедели" , "Начало следующей недели");
	СписокВремен.Добавить("ЧерезНеделю"           , "Через неделю");
	СписокВремен.Добавить("Через2Недели"          , "Через 2 недели");
	СписокВремен.Добавить("НачалоСледующегоМесяца", "Начало следующего месяца");
	СписокВремен.Добавить("ЧерезМесяц"            , "Через месяц");
	
КонецПроцедуры

// Процедура - обработчик события выбора времени из списка
//
// Параметры:
//	ЭлементУправления -элемент,для которого вызван обработчик события
//	ВыбранноеЗначение - выбранное значение времени
//  СтандартнаяОбработка - флаг использования стандартной обработки события
// 
Процедура уатОбработкаВыбораВремениИзСписка(ЭлементУправления, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение = "Через30минут" Тогда
			ЭлементУправления.Значение = ТекущаяДата() + 60*30;
		ИначеЕсли ВыбранноеЗначение = "ЧерезЧас" Тогда
			ЭлементУправления.Значение = ТекущаяДата() + 60*60;
		ИначеЕсли ВыбранноеЗначение = "Через2Часа" Тогда
			ЭлементУправления.Значение = ТекущаяДата() + 60*60*2;
		ИначеЕсли ВыбранноеЗначение = "Завтра" Тогда
			ЭлементУправления.Значение = КонецДня(ТекущаяДата()) + 1;
		ИначеЕсли ВыбранноеЗначение = "Послезавтра" Тогда
			ЭлементУправления.Значение = КонецДня(ТекущаяДата() + 60*60*24) + 1;
		ИначеЕсли ВыбранноеЗначение = "НачалоСледующейНедели" Тогда
			ЭлементУправления.Значение = КонецНедели(ТекущаяДата()) + 1;
		ИначеЕсли ВыбранноеЗначение = "ЧерезНеделю" Тогда
			ЭлементУправления.Значение = НачалоДня(ТекущаяДата() + 60*60*24*7);
		ИначеЕсли ВыбранноеЗначение = "Через2Недели" Тогда
			ЭлементУправления.Значение = НачалоДня(ТекущаяДата() + 60*60*24*7*2);
		ИначеЕсли ВыбранноеЗначение = "НачалоСледующегоМесяца" Тогда
			ЭлементУправления.Значение = КонецМесяца(ТекущаяДата()) + 1;
		ИначеЕсли ВыбранноеЗначение = "ЧерезМесяц" Тогда
			ЭлементУправления.Значение = НачалоДня(ДобавитьМесяц(ТекущаяДата(), 1));
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

//==================================================================================
//       ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С НАПОМИНАНИЯМИ И СОБЫТИЯМ            //
//==================================================================================

#Если Клиент Тогда
	// Процедура проверяет и при необходимости подключает обработчик ожидания
	// на запуск процедуры ПроверитьНапоминания()
	//
	// Параметры:
	//  Нет.
	//
	Процедура уатПроверитьПодключениеОбработчикаОжидания() Экспорт
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		ИнтервалПроверкиНапоминанийВСекундах = Константы.уатИнтервалПроверкиНапоминанийВСекундах.Получить();
		Если ТекущийПользователь <> Неопределено
			И ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
			И НЕ ТекущийПользователь.Пустая()
			И уатОбщегоНазначенияТиповые.уатПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ИспользоватьНапоминания")
			И ИнтервалПроверкиНапоминанийВСекундах > 0 Тогда
			ПодключитьОбработчикОжидания("уатПроверитьНапоминания", ИнтервалПроверкиНапоминанийВСекундах);
			уатПроверитьНапоминанияПользователя(ТекущийПользователь);
		Иначе
			ОтключитьОбработчикОжидания("уатПроверитьНапоминания");
		КонецЕсли; 
	КонецПроцедуры
	
	//// Процедура проверяет Напоминания
	////
	//Процедура уатПроверитьНапоминания() Экспорт
	//	уатПроверитьНапоминанияПользователя(ПараметрыСеанса.ТекущийПользователь);
	//КонецПроцедуры
	
	// Процедура проверяет Напоминания из регистра.
	// 
	//  Параметры
	//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
	//
	Процедура уатПроверитьНапоминанияПользователя(ВыбПользователь) Экспорт
		Запрос = Новый Запрос;
		//удалим записи с истекшим сроком актуальности	
		Запрос.Текст="ВЫБРАТЬ
		|	Напоминания.Пользователь,
		|	Напоминания.Автор,
		|	Напоминания.Завершено,
		|	Напоминания.РеальнаяДатаОповещения КАК РеальнаяДатаОповещения,
		|	Напоминания.Объект,
		|	Напоминания.ДатаНачала,
		|	Напоминания.Тема,
		|	Напоминания.Описание,
		|	Напоминания.ДатаАктуальности,
		|	Напоминания.Автонапоминание
		|ИЗ
		|	РегистрСведений.уатНапоминания КАК Напоминания
		|ГДЕ
		|	Напоминания.Пользователь = &Пользователь
		|	И Напоминания.Завершено = ЛОЖЬ
		|	И Напоминания.ДатаАктуальности <> &ПустаяДата
		|	И Напоминания.ДатаАктуальности < &РеальнаяДатаОповещения
		|";
		
		Запрос.УстановитьПараметр("Пользователь",ВыбПользователь);
		Запрос.УстановитьПараметр("РеальнаяДатаОповещения",ТекущаяДата());
		Запрос.УстановитьПараметр("ПустаяДата",Дата("00010101"));
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				//удалим записи с истекшим сроком актуальности
				РегистрСведенийМенеджерЗаписи = РегистрыСведений.уатНапоминания.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи,Выборка);
				РегистрСведенийМенеджерЗаписи.Прочитать();
				Если НЕ РегистрСведенийМенеджерЗаписи.УдалитьПоИстеченииСрока Тогда
					РегистрСведенийМенеджерЗаписи.Завершено = Истина;
					РегистрСведенийМенеджерЗаписи.Записать();
				Иначе
					РегистрСведенийМенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЦикла;
			Оповестить("ОбновитьНапоминания");
		КонецЕсли;
		
		//Проверим напоминания	
		Запрос.Текст="ВЫБРАТЬ
		|	Напоминания.Пользователь,
		|	Напоминания.Автор,
		|	Напоминания.Завершено,
		|	Напоминания.РеальнаяДатаОповещения КАК РеальнаяДатаОповещения,
		|	Напоминания.Объект,
		|	Напоминания.ДатаНачала,
		|	Напоминания.Тема,
		|	Напоминания.Описание,
		|	Напоминания.ДатаАктуальности,
		|	Напоминания.Автонапоминание
		|ИЗ
		|	РегистрСведений.уатНапоминания КАК Напоминания
		|ГДЕ
		|	Напоминания.Пользователь = &Пользователь
		|	И Напоминания.Завершено = ЛОЖЬ
		|	И Напоминания.РеальнаяДатаОповещения < &РеальнаяДатаОповещения
		|УПОРЯДОЧИТЬ ПО
		|	РеальнаяДатаОповещения УБЫВ
		|";
		
		Запрос.УстановитьПараметр("Пользователь",ВыбПользователь);
		Запрос.УстановитьПараметр("РеальнаяДатаОповещения",ТекущаяДата());
		Запрос.УстановитьПараметр("ПустаяДата",Дата("00010101"));
		
		Результат = Запрос.Выполнить();
		
		РезультирующаяТаблица = Новый ТаблицаЗначений;
		РезультирующаяТаблица.Колонки.Добавить("ДатаНапоминания");
		РезультирующаяТаблица.Колонки.Добавить("Контрагент");
		РезультирующаяТаблица.Колонки.Добавить("КонтактноеЛицо");
		РезультирующаяТаблица.Колонки.Добавить("ТекстНапоминания");
		РезультирующаяТаблица.Колонки.Добавить("ФлагДеньРождения");
		
		РезультирующаяТаблица.Колонки.Добавить("Завершено");
		РезультирующаяТаблица.Колонки.Добавить("РеальнаяДатаОповещения");
		РезультирующаяТаблица.Колонки.Добавить("Объект");
		РезультирующаяТаблица.Колонки.Добавить("Автор");
		РезультирующаяТаблица.Колонки.Добавить("Автонапоминание");
		РезультирующаяТаблица.Колонки.Добавить("Тема");
		РезультирующаяТаблица.Колонки.Добавить("Пользователь");
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаРезТаблицы = РезультирующаяТаблица.Добавить();
				СтрокаРезТаблицы.Объект = Выборка.Объект;
				СтрокаРезТаблицы.Пользователь = Выборка.Пользователь;
				СтрокаРезТаблицы.ДатаНапоминания = Выборка.ДатаНачала;
				СтрокаРезТаблицы.Тема = Выборка.Тема;
				
				Если Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(Выборка.Объект) Тогда
					
					Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
						СтрокаРезТаблицы.КонтактноеЛицо = Выборка.Объект;
						Если ТипЗнч(Выборка.Объект.ОбъектВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
							СтрокаРезТаблицы.Контрагент = Выборка.Объект.ОбъектВладелец;
						КонецЕсли; 
					ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
						СтрокаРезТаблицы.Контрагент = Выборка.Объект;
						
					Иначе
						ОбъектМетаданные = Выборка.Объект.Метаданные();
						Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Контрагент", ОбъектМетаданные) Тогда
							СтрокаРезТаблицы.Контрагент = Выборка.Объект.Контрагент
						КонецЕсли;
						
						Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Заказчик", ОбъектМетаданные)  Тогда
							Если ТипЗнч(Выборка.Объект.Заказчик)=Тип("СправочникСсылка.Контрагенты") Тогда
								СтрокаРезТаблицы.Контрагент = Выборка.Объект.Заказчик;	
							Иначе
								СтрокаРезТаблицы.Контрагент = Строка(Выборка.Объект.Заказчик);
							КонецЕсли;
						КонецЕсли;
						
						Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("КонтактноеЛицо", ОбъектМетаданные) Тогда
							СтрокаРезТаблицы.КонтактноеЛицо = Выборка.Объект.КонтактноеЛицо
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				
				ФлагДеньРождения = Ложь;
				Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
					ФлагДеньРождения = (Выборка.Автонапоминание ИЛИ Найти(Выборка.Тема,"День рождения") ИЛИ Найти(Выборка.Описание,"День рождения"));
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.уатСобытие") Тогда
					ФлагДеньРождения =  СтрЧислоВхождений(Выборка.Объект.ОписаниеСобытия, "День рождения") > 0 
				КонецЕсли;
				
				СтрокаРезТаблицы.ТекстНапоминания = Выборка.Описание;
				
				СтрокаРезТаблицы.ФлагДеньРождения = ФлагДеньРождения;
				
				СтрокаРезТаблицы.Завершено = Выборка.Завершено;
				СтрокаРезТаблицы.РеальнаяДатаОповещения = Выборка.РеальнаяДатаОповещения;
				СтрокаРезТаблицы.Автор = Выборка.Автор;
				СтрокаРезТаблицы.Автонапоминание = Выборка.Автонапоминание;
				
			КонецЦикла;
			
		КонецЕсли;
		
		уатОбработкаСпискаНапоминаний(РезультирующаяТаблица);
		
	КонецПроцедуры // УправлениеОтношениямиСПоставщикамиИПокупателями.ПроверитьНапоминанияПользователя()
	
	
	//	Процедура вызывается при добавлении нового напоминания из форм объектов
	//
	Процедура уатСоздатьНапоминание(Форма,НеОткрыватьФормуНапоминания = Ложь) Экспорт
		
		ОбъектНапоминания = Форма.ЭтотОбъект;
		
		Если ОбъектНапоминания.ЭтоНовый() Тогда
			
			ТекстВопроса = "Перед добавлением напоминания необходимо записать объект. Записать?";
			РезультатВопроса = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			
			Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
				Если НЕ Форма.ЗаписатьВФорме()Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		уатДобавитьНапоминание(ОбъектНапоминания,НеОткрыватьФормуНапоминания);
		
	КонецПроцедуры
	
	//	Процедура 
	//
	Процедура уатДобавитьНапоминание(ОбъектНапоминания,НеОткрыватьФормуНапоминания = Истина,Параметры = Неопределено) Экспорт
		
		ОбъектМетаданных = ОбъектНапоминания.Метаданные();
		Менеджер = РегистрыСведений.уатНапоминания.СоздатьМенеджерЗаписи();
		
		
		Если  уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Ответственный", ОбъектМетаданных) Тогда
			Ответственный = ОбъектНапоминания.Ответственный;
		КонецЕсли;
		
		
		Если  ТипЗнч(ОбъектНапоминания)= Тип("ДокументОбъект.уатСобытие") Тогда
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбъектНапоминания.НачалоСобытия) Тогда
				ДатаНапоминания = ОбъектНапоминания.НачалоСобытия;
			Иначе
				ДатаНапоминания = ТекущаяДата();
			КонецЕсли;
			
			ИнтервалНапоминанияДоНачалаСобытия = уатОбщегоНазначенияТиповые.уатПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ИнтервалНапоминанияДоНачалаСобытия");
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ИнтервалНапоминанияДоНачалаСобытия) Тогда
				Менеджер.СрокДоНачала = ИнтервалНапоминанияДоНачалаСобытия*60;
			КонецЕсли;
		КонецЕсли;
		
		Ответственный = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(Ответственный),ПараметрыСеанса.ТекущийПользователь,Ответственный);
		ДатаНапоминания = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДатаНапоминания),ТекущаяДата(),ДатаНапоминания);
		
		Менеджер.Объект = ОбъектНапоминания.Ссылка;
		уатПолучитьТемуИОписаниеНапоминания(ОбъектНапоминания,,Менеджер.Тема,Менеджер.Описание);
		Менеджер.Автонапоминание = Ложь;
		//Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Ответственный) И уатПроверитьПолучателяНапоминаний(Ответственный)Тогда
		Менеджер.Пользователь = Ответственный;
		//КонецЕсли;
		
		Если Не НеОткрыватьФормуНапоминания Тогда
			ФормаНапоминания = Менеджер.ПолучитьФорму();
			ФормаНапоминания.ДатаНачалаНового = ДатаНапоминания;
			ФормаНапоминания.Открыть();
		Иначе
			Менеджер.Автор = ПараметрыСеанса.ТекущийПользователь;
			Менеджер.ДатаНачала = ДатаНапоминания;
			Менеджер.ДатаОповещения = ДатаНапоминания;
			Менеджер.РеальнаяДатаОповещения = ДатаНапоминания;
			Менеджер.УдалитьПоИстеченииСрока = Истина;
			Менеджер.Записать();
			
			Оповестить("ОбновитьНапоминания");
			
		КонецЕсли;
		
	КонецПроцедуры
#КонецЕсли

// возвращает строку представления объекта
Функция уатСформироватьПредставлениеНапоминания(Ссылка) Экспорт
	
	текЗаголовок = "Создать напоминание";
	Если Ссылка.Пустая() тогда
		Возврат текЗаголовок;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Напоминания.Пользователь,
	|	Напоминания.Автор,
	|	Напоминания.Завершено,
	|	Напоминания.РеальнаяДатаОповещения КАК РеальнаяДатаОповещения,
	|	Напоминания.Объект,
	|	Напоминания.ДатаОповещения,
	|	Напоминания.Тема,
	|	Напоминания.Автонапоминание КАК Автонапоминание
	|ИЗ
	|	РегистрСведений.уатНапоминания КАК Напоминания
	|ГДЕ
	|	Напоминания.Объект = &Объект
	|	И (НЕ Напоминания.Завершено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Автонапоминание УБЫВ,
	|	РеальнаяДатаОповещения";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		текДата = Формат(Результат.РеальнаяДатаОповещения, "ДЛФ=D");
		текЗаголовок = "Напомнить " + текДата+", "+СокрЛП(Результат.Пользователь);
		Если Результат.Количество() >= 2 Тогда
			текЗаголовок = текЗаголовок + " (всего "+Строка(Результат.Количество())+")";
		КонецЕсли;
		Прервать;
	КонецЦикла;
	Возврат текЗаголовок;
КонецФункции


// Процедура формирует тему и описание напоминания
//
Процедура уатПолучитьТемуИОписаниеНапоминания(Объект,ФлагДеньРождения = Ложь,ТемаНапоминания,ОписаниеНапоминания)Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КонтактныеЛица") Тогда
		Если ФлагДеньРождения Тогда
			
			ТемаНапоминания = "День рождения";
			
			Если Объект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
				ОписаниеНапоминания = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Роль),"","Роль: " + Объект.Роль + Символы.ПС)
				+ ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Должность),"","Должность: " + Объект.Должность + Символы.ПС);
			КонецЕсли; 
			ОписаниеНапоминания = ОписаниеНапоминания + "Дата рождения: " + Формат(Объект.ДатаРождения, "ДФ=dd.MM.yyyy");
		Иначе
			ТемаНапоминания = Строка(Объект);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Контрагенты") Тогда
		ТемаНапоминания = Строка(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.уатСобытие")  Тогда
		
		ТемаНапоминания = Строка(Объект.ВидСобытия);
		
		ОписаниеНапоминания = Объект.ОписаниеСобытия + Символы.ПС + "с " + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.НачалоСобытия),
		"Не задано",Формат(Объект.НачалоСобытия, "ДФ='dd.MM.yyyy (HH:mm)'")) + " по " 
		+ ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.ОкончаниеСобытия), "Не задано",
		Формат(Объект.ОкончаниеСобытия, "ДФ='dd.MM.yyyy (HH:mm)'"));
		
		//добавление в описание телефонов
		Если Объект.ВидСобытия = Перечисления.уатВидыСобытий.ТелефонныйЗвонок Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Представление,
			|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	(КонтактнаяИнформация.Объект = &ОбъектКонтактнойИнформации1
			|			ИЛИ КонтактнаяИнформация.Объект = &ОбъектКонтактнойИнформации2)
			|	И КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗначениеПоУмолчанию УБЫВ";
			
			Запрос.УстановитьПараметр("ОбъектКонтактнойИнформации1", Объект.Контрагент);
			Запрос.УстановитьПараметр("ОбъектКонтактнойИнформации2", Объект.КонтактноеЛицо);
			Запрос.УстановитьПараметр("ТипКонтактнойИнформации",    Перечисления.ТипыКонтактнойИнформации.Телефон);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Количество()>0 Тогда
				ТелефоныСтрокой = Символы.ПС + "Телефоны:" + Символы.ПС;
			КонецЕсли;
			
			ТелефоныКонтрагента = "";
			ТелефоныКонтактногоЛица = "";
			Пока Результат.Следующий() Цикл
				Если ТипЗнч(Результат.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
					ТелефоныКонтрагента = ТелефоныКонтрагента+Результат.Представление+", ";
				ИначеЕсли ТипЗнч(Результат.Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
					ТелефоныКонтактногоЛица = ТелефоныКонтактногоЛица+Результат.Представление+", ";
				КонецЕсли;
			КонецЦикла;
			
			Если Прав(ТелефоныКонтрагента,2) = ", " Тогда
				ТелефоныКонтрагента = Лев(ТелефоныКонтрагента,СтрДлина(ТелефоныКонтрагента)-2);
			КонецЕсли;
			
			Если Прав(ТелефоныКонтактногоЛица,2) = ", " Тогда
				ТелефоныКонтактногоЛица = Лев(ТелефоныКонтактногоЛица,СтрДлина(ТелефоныКонтактногоЛица)-2);
			КонецЕсли;
			
			Если НЕ ТелефоныКонтрагента = "" Тогда
				ТелефоныСтрокой = ТелефоныСтрокой + Строка(Объект.Контрагент) + ": " + ТелефоныКонтрагента +Символы.ПС;
			КонецЕсли;
			
			Если НЕ ТелефоныКонтактногоЛица = "" Тогда
				ТелефоныСтрокой = ТелефоныСтрокой + Строка(Объект.КонтактноеЛицо) + ": " + ТелефоныКонтактногоЛица;
			КонецЕсли;
			
			ОписаниеНапоминания = ОписаниеНапоминания + ТелефоныСтрокой;
			
		КонецЕсли;
	ИначеЕсли  ТипЗнч(Объект) = Тип("ДокументОбъект.уатЭлектронноеПисьмо")  Тогда
		
		ТемаНапоминания = Объект.Тема;
		
	Иначе
		ТемаНапоминания = Объект.Метаданные().Синоним;
		ОбъектМетаданных = Объект.Метаданные();
		
		Если  уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("Склад", ОбъектМетаданных) Тогда
			ОписаниеНапоминания = "Склад: " + Строка(Объект.Склад) + Символы.ПС;	
		КонецЕсли;
		
		Если  уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("СтруктурнаяЕдиница", ОбъектМетаданных) Тогда
			ОписаниеНапоминания = ОписаниеНапоминания + "Банк/Касса: " + Строка(Объект.СтруктурнаяЕдиница) + Символы.ПС;
		КонецЕсли;
		
		Попытка
			СуммаДокумента = уатОбщегоНазначенияТиповые.уатФорматСумм(уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(Объект, "Товары"));
			ОписаниеНапоминания = ОписаниеНапоминания + "Сумма заказа: " + СуммаДокумента + Символы.ПС;
		Исключение КонецПопытки;
		
		Если  уатОбщегоНазначенияТиповые.уатЕстьРеквизитДокумента("ВалютаДокумента", ОбъектМетаданных) Тогда
			ОписаниеНапоминания = ОписаниеНапоминания + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.ВалютаДокумента),"",СокрЛП(Объект.ВалютаДокумента) + Символы.ПС);	
		КонецЕсли;
		ОписаниеНапоминания = ОписаниеНапоминания + Строка(Объект);
	КонецЕсли;
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТемаНапоминания) Тогда
		ТемаНапоминания = Объект.Метаданные().Синоним;
	КонецЕсли;
	
КонецПроцедуры

// Процедура показывает формы Напоминаний.
// 
//  Параметры
//   ТаблицаНапоминаний - ТаблицаЗначений, с Напоминаниями
//
Процедура уатОбработкаСпискаНапоминаний(ТаблицаНапоминаний)
	
	ФормаНапоминания = ПолучитьОбщуюФорму("уатФормаНапоминания",,"Уникум");
	
	Если  ТаблицаНапоминаний.Количество() = 0 И НЕ ФормаНапоминания.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНапоминания.ОбновитьТаблицуНапоминаний(ТаблицаНапоминаний);
	
	Если не ФормаНапоминания.Открыта() Тогда
		ФормаНапоминания.Открыть();
	КонецЕсли;
	
КонецПроцедуры // уатОбработкаСпискаНапоминаний()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ НАПОМИНАНИЙ
//==================================================================================

#Если Клиент Тогда
	
// Функция выполняет проверку получателя напоминания и при необходимости
// выводит предупреждающее сообщение.
//
// Параметры:
//  Ответственный - получатель напоминания
//
// Возвращаемое Значение:
//  Признак заполнения получателя
	Функция уатПроверитьПолучателяНапоминаний(Ответственный) Экспорт
		
		Если Ответственный.Пустая() Тогда
			
			Предупреждение("Выберите получателя напоминания!");
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НЕ уатОбщегоНазначенияТиповые.уатПолучитьЗначениеПоУмолчанию(Ответственный,"ИспользоватьНапоминания") Тогда
			
			Предупреждение("Для пользователя " + СокрЛП(Ответственный) + " недоступна система напоминаний!");
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
#КонецЕсли

// Процедура выполняет удаление автонапоминания для заданного объекта
//
// Параметры:
//  Объект       - Объект для которого происходит удаление автонапоминаний
Процедура уатУдалитьАвтонапоминание(Объект) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		
		Попытка
			
			ОбъектДокументаНапоминания = Объект.ПолучитьОбъект();
			
			ОбъектДокументаНапоминания.Заблокировать();
			
			ОбъектДокументаНапоминания.НапомнитьОСобытии = Ложь;
			ОбъектДокументаНапоминания.ВремяНапоминания = Дата('000101010000');
			
			ОбъектДокументаНапоминания.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			
			Сообщить(""+ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Попытка
			
			ОбъектДокументаНапоминания = Объект.ПолучитьОбъект();
			ОбъектДокументаНапоминания.Заблокировать();
			ОбъектДокументаНапоминания.НапоминатьОДнеРождения = Ложь;
			ОбъектДокументаНапоминания.Записать();
			
		Исключение
			
			Сообщить(""+ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры


#Если Клиент Тогда
	// Процедура выбора и открытия нужного оповещения. 
	// Или для создания нового, если выбран пункт меню "создать"
	// Объект:				объект для которого выбирается/создается напоминание
	// ДопПараметры: 		структура, для создания нового напоминания
	// Форма:				форма объекта
	// Элемент:				элемент формы, рядом с которым выводится меню выбора из списка
	Процедура уатВыборОповещения(Форма, Элемент,ДопПараметры = Неопределено) Экспорт
		
		Объект = Форма.ЭтотОбъект;
		
		СписокОповещений = Новый СписокЗначений;
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Напоминания.Пользователь,
			|	Напоминания.Автор,
			|	Напоминания.Завершено,
			|	Напоминания.РеальнаяДатаОповещения КАК РеальнаяДатаОповещения,
			|	Напоминания.Объект,
			|	Напоминания.ДатаОповещения,
			|	Напоминания.Тема,
			|	Напоминания.Автонапоминание КАК Автонапоминание
			|ИЗ
			|	РегистрСведений.уатНапоминания КАК Напоминания
			|ГДЕ
			|	Напоминания.Объект = &Объект
			|	И (НЕ Напоминания.Завершено)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Автонапоминание УБЫВ,
			|	РеальнаяДатаОповещения";
			
			Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Для каждого Строка Из Результат Цикл
				
				текОповещение = Новый Структура;
				
				Для каждого Колонка Из Результат.Колонки Цикл
					текОповещение.Вставить(Колонка.Имя,Строка[Колонка.Имя]);
				КонецЦикла; 
				
				текДата = Формат(текОповещение.РеальнаяДатаОповещения, "ДЛФ=D");
				текЗаголовок = текДата+" "+СокрЛП(текОповещение.Пользователь);
				СписокОповещений.Добавить(текОповещение, текЗаголовок,,БиблиотекаКартинок.уатНапоминаниеИзменить);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СписокОповещений.Добавить(Неопределено, "Создать новое напоминание",,БиблиотекаКартинок.уатНапоминания);
		
		текДействие = "Создать";
		//	текДанные = ДопПараметры;
		
		Если СписокОповещений.Количество() > 1 Тогда // иначе нужно создать новое
			РезВыбора = Форма.ВыбратьИзМеню(СписокОповещений, Элемент);
			Если РезВыбора = Неопределено Тогда
				возврат;
			ИначеЕсли РезВыбора.Значение <> Неопределено тогда // выбран НЕ пункт "создать"
				текДействие = "Изменить";
				Оповещение = РезВыбора.Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если текДействие = "Создать" Тогда
			уатСоздатьНапоминание(Форма);
		ИначеЕсли текДействие = "Изменить" Тогда
			уатОткрытьОповещение(Оповещение);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура открытия текущего оповещения 
	// Или для создания нового, если выбран пункт меню "создать"
	// Объект:				объект для которого выбирается/создается напоминание
	// ДопПараметры: 		структура, для создания нового напоминания
	// Форма:				форма объекта
	// Элемент:				элемент формы, рядом с которым выводится меню выбора из списка
	Процедура уатВыборТекущегоОповещения(Форма) Экспорт
		
		Объект = Форма.ЭтотОбъект;
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Напоминания.Пользователь,
			|	Напоминания.Автор,
			|	Напоминания.Завершено,
			|	Напоминания.РеальнаяДатаОповещения КАК РеальнаяДатаОповещения,
			|	Напоминания.Объект,
			|	Напоминания.ДатаОповещения,
			|	Напоминания.Тема,
			|	Напоминания.Автонапоминание КАК Автонапоминание
			|ИЗ
			|	РегистрСведений.уатНапоминания КАК Напоминания
			|ГДЕ
			|	Напоминания.Объект = &Объект
			|	И (НЕ Напоминания.Завершено)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Автонапоминание УБЫВ,
			|	РеальнаяДатаОповещения";
			
			Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Для каждого Строка Из Результат Цикл
				
				текОповещение = Новый Структура;
				
				Для каждого Колонка Из Результат.Колонки Цикл
					текОповещение.Вставить(Колонка.Имя,Строка[Колонка.Имя]);
				КонецЦикла; 
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		Если текОповещение = Неопределено Тогда
			уатСоздатьНапоминание(Форма);
		Иначе
			уатОткрытьОповещение(текОповещение);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура для открытия нужного оповещения
	Процедура уатОткрытьОповещение(Оповещение) Экспорт
		
		Если НЕ ТипЗнч(Оповещение) = Тип("Структура") Тогда
			Возврат
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.уатНапоминания.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Оповещение);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ПолучитьФорму().Открыть();
		
	КонецПроцедуры
	
#КонецЕсли



