//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТОБРАЖЕНИЯ КИ В ФОРМАХ ОБЪЕКТОВ

// Процедура считывает контактную информацию из ИБ в набор записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо заполнить КИ
//
Процедура уатПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка) Экспорт

	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли; 
	
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ТаблицаНабора.Сортировать("Тип ВОЗР, Вид ВОЗР");
	НаборЗаписей.Загрузить(ТаблицаНабора);
	
	МассивВидов = НаборЗаписей.ВыгрузитьКолонку("Вид");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", уатВидОбъектаКИ(Ссылка));
	Запрос.УстановитьПараметр("МассивВидов"                   , МассивВидов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка     КАК Вид,
	|	ВидыКонтактнойИнформации.Ссылка.Тип КАК Тип
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации
	|	И
	|	НЕ ВидыКонтактнойИнформации.Ссылка В(&МассивВидов)
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Сортировать("Тип ВОЗР, Вид ВОЗР");
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Вид    = СтрокаТаблицы.Вид;
		ЗаписьРегистра.Тип    = СтрокаТаблицы.Тип;
		ЗаписьРегистра.Объект = Ссылка;
	КонецЦикла; 

КонецПроцедуры

// Процедура записывает контактную информацию в ИБ из набора записей регистра сведений.
//
// Параметры:
//  НаборЗаписей - набор записей регистра сведений
//  Ссылка - Объект, по которому необходимо записать КИ
//  Отказ - Булево
//
Процедура уатЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Отказ) Экспорт

	ТаблицаНабора = НаборЗаписей.Выгрузить();
	
	Индекс = 0;
	Пока 1 = 1 Цикл
		
		Если Индекс > НаборЗаписей.Количество() - 1 Тогда
			Прервать;
		КонецЕсли; 
		
		Запись = НаборЗаписей[Индекс];
		
		Если Не ЗначениеЗаполнено(Запись.Представление) Тогда
			НаборЗаписей.Удалить(Запись);
			Продолжить;
		КонецЕсли;
		
		Запись.Объект = Ссылка;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записана контактная информация."));
		НаборЗаписей.Загрузить(ТаблицаНабора);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	уатПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка)
	
КонецПроцедуры

#Если Клиент Тогда

// Процедура выполняется при активизации строки табличного поля, в котором
// отображается контактная информация объектов в их формах, и управляет
// доступностью кнопки командной панели установки значения по умолчанию.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  КнопкаУстановитьОсновным - Кнопка командной панели
//
Процедура уатКонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, КнопкаУстановитьОсновным) Экспорт

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
			КнопкаУстановитьОсновным.Пометка     = Истина;
			КнопкаУстановитьОсновным.Доступность = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) Тогда
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Ложь;
		Иначе
			КнопкаУстановитьОсновным.Пометка     = Ложь;
			КнопкаУстановитьОсновным.Доступность = Истина;
		КонецЕсли; 
	Иначе
		КнопкаУстановитьОсновным.Пометка     = Ложь;
		КнопкаУстановитьОсновным.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняется при выводе строки табличного поля, в котором
// отображается контактная информация объектов в их формах.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  ОформлениеСтроки - Оформление строки табличного поля
//  ДанныеСтроки - данные строки табличного поля
//
Процедура уатКонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	Если ДанныеСтроки.ЗначениеПоУмолчанию Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ТипЗнч(ДанныеСтроки.Вид) = Тип("Строка") Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
	ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ДанныеСтроки);
	
	ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = ПолучитьИндексКартинкиКИ(ДанныеСтроки.Тип, ДанныеСтроки.Представление, ПредставлениеАдреса);

КонецПроцедуры

// Процедура устанавливает запись контактной информации определенного типа и вида основной
// для объекта в пространстве одного типа.
//
// Параметры:
//  СтруктураПараметров - структура, параметры записи, для которой надо установить признак основной
//   Ключи:
//    Объект, СправочникСсылка, значение измерения Объект регистра сведений
//    Тип, ПеречислениеСсылка.ТипыКонтактнойИнформации
//    Вид, СправочникСсылка.ВидыКонтактнойИнформации
//
Процедура уатУстановитьЗаписьОсновной(НаборЗаписей, ТабличноеПоле, Кнопка) Экспорт

	Если ТабличноеПоле.ТекущиеДанные <> Неопределено
	   И ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Представление) Тогда
	
		Если ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
		
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
			Кнопка.Пометка = Ложь;
			
		Иначе
			
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если ЗаписьНабора.Тип = ТабличноеПоле.ТекущиеДанные.Тип Тогда
					ЗаписьНабора.ЗначениеПоУмолчанию = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ТабличноеПоле.ТекущиеДанные.ЗначениеПоУмолчанию = Истина;
			Кнопка.Пометка = Истина;
		
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередУдалением" табличного поля набора записей.
//
// Параметры:
//  Элемент - Табличное поле
//  Отказ - Булево
//
Процедура уатУдалитьЗаписьКонтактнойИнформации(Элемент, Отказ) Экспорт

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление) ИЛИ ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка")) Тогда
	
		ОтветНаВопрос = Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ТекущиеДанные.Вид) = Тип("Строка") Тогда
			Элемент.Значение.Удалить(Элемент.ТекущиеДанные);
		Иначе
			Элемент.ТекущиеДанные.Представление       = "";
			Элемент.ТекущиеДанные.ЗначениеПоУмолчанию = Ложь;
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Функция формирует структуру записи регистра.
//
// Параметры:
//  Запись - запись набора записей регистра сведений
//
Функция уатПолучитьСтруктуруЗаписиРегистра(Запись) Экспорт

	Если ТипЗнч(Запись) = Тип("РегистрСведенийЗапись.КонтактнаяИнформация")
	 ИЛИ ТипЗнч(Запись) = Тип("РегистрСведенийМенеджерЗаписи.КонтактнаяИнформация") Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Объект"       , Запись.Объект);
		СтруктураЗаписи.Вставить("Тип"          , Запись.Тип);
		СтруктураЗаписи.Вставить("Вид"          , Запись.Вид);
		СтруктураЗаписи.Вставить("Представление", Запись.Представление);
		СтруктураЗаписи.Вставить("Комментарий"  , Запись.Комментарий);
		Для а = 1 По 10 Цикл
			СтруктураЗаписи.Вставить("Поле" + Строка(а), Запись["Поле" + Строка(а)]);
		КонецЦикла;
		СтруктураЗаписи.Вставить("ТипДома"  	, Запись.ТипДома);
		СтруктураЗаписи.Вставить("ТипКорпуса"  	, Запись.ТипКорпуса);
		СтруктураЗаписи.Вставить("ТипКвартиры"  , Запись.ТипКвартиры);		
		Возврат СтруктураЗаписи;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

// Процедура контролирует возможность редактирования текста в поле ввод представления КИ.
//
Процедура уатУстановитьВозможностьРедактированияТекстаКИ(Элемент) Экспорт

	Если Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
	   И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Представление)
	   И (УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Элемент.ТекущиеДанные) = Элемент.ТекущиеДанные.Представление) Тогда
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Ложь;
	Иначе
		Элемент.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриНачалеРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура уатКонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, ПоследнееЗначениеЭлементаТайпингаВидаКИ) Экспорт

	Если НоваяСтрока Тогда
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Элемент.ТекущиеДанные.Тип) Тогда
			Элемент.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		КонецЕсли; 
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Элемент.ТекущиеДанные.Вид) Тогда
			Элемент.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	ПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.ТекущиеДанные.Вид;
	
КонецПроцедуры

// Обработчик события "ПередОкончаниемРедактирования" табличного поля
// набора записей регистра сведений
//
Процедура уатКонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ) Экспорт
	
	Если мОбработкаТайпингаВидаКИ И НЕ НоваяСтрока Тогда
		мОбработкаТайпингаВидаКИ = Ложь;
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.Вид;
		Элемент.Колонки.Вид.ЭлементУправления.ВыделенныйТекст = мТекстТайпингаВидаКИ;
		мТекстТайпингаВидаКИ = "";
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПриИзменении" представления КИ табличного поля
// набора записей регистра сведений
//
Процедура уатКонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ТабличноеПоле) Экспорт

	Если ТабличноеПоле.ТекущиеДанные.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		СтруктураПолей = УправлениеКонтактнойИнформацией.РазложитьТелефонПоПолям(Элемент.Значение);
		ТабличноеПоле.ТекущиеДанные.Поле3 = СтруктураПолей.СамТелефон;
		ТабличноеПоле.ТекущиеДанные.Поле1 = СтруктураПолей.КодСтраны;
		ТабличноеПоле.ТекущиеДанные.Поле2 = СтруктураПолей.КодГорода;
		
		УправлениеКонтактнойИнформацией.СформироватьПредставлениеТелефона(ТабличноеПоле.ТекущиеДанные);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" табличного поля
// набора записей регистра сведений
//
Процедура уатКонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ТабличноеПоле, НаборКонтактнойИнформации, ДоступностьОбъекта = Истина) Экспорт

	Если Не Копирование Тогда
		Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
			Отказ = Истина;
			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации);
		Иначе
			ТабличноеПоле.Колонки.Представление.ЭлементУправления.РедактированиеТекста = Истина;
		КонецЕсли;
	Иначе
		Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
			Отказ = Истина;
			ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
			ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
			ОбработкаРедактирования.РедактироватьЗапись(НаборКонтактнойИнформации,,, уатПолучитьСтруктуруЗаписиРегистра(ТабличноеПоле.ТекущиеДанные));
		Иначе
			уатУстановитьВозможностьРедактированияТекстаКИ(ТабличноеПоле);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПередНачаломИзменения" табличного поля
// набора записей регистра сведений
//
Процедура уатКонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, ДоступностьОбъекта = Истина) Экспорт

	Если мКнопкаРедактироватьКИВДиалоге.Пометка Тогда
		Отказ = Истина;
		ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
		ОбработкаРедактирования.ДоступностьОбъекта = ДоступностьОбъекта;
		ОбработкаРедактирования.РедактироватьЗапись(Элемент.ТекущиеДанные);
	Иначе
		уатУстановитьВозможностьРедактированияТекстаКИ(Элемент);
	КонецЕсли; 

КонецПроцедуры

// Обработчик события "ПриИзменении" Типа КИ табличного поля
// набора записей регистра сведений
//
Процедура уатКонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ТабличноеПоле) Экспорт

	Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТабличноеПоле.ТекущиеДанные)
	   И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТабличноеПоле.ТекущиеДанные.Вид)
	   И ТипЗнч(ТабличноеПоле.ТекущиеДанные.Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И ТабличноеПоле.ТекущиеДанные.Вид.Тип <> Элемент.Значение Тогда
	
		ТабличноеПоле.ТекущиеДанные.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	КонецЕсли; 

КонецПроцедуры

// Процедура открывает форму справочника ВидыКонтактнойИнформации для выбора.
//
// Параметры:
//  РежимВыбора - булево, задает режим выбора для открываемой формы.
//  ВладелецФормы - задает владельца для открываемой формы.
//  ЗначениеОтбораПоТипу - задает значение отбора по типу конт.инф.
//  ЗначениеОтбораПоВидуОбъектаКИ - задает значение отбора по виду объекта конт.инф.
Процедура уатОткрытьФормуВыбораВидаКИ(РежимВыбора, ВладелецФормы, ЗначениеОтбораПоТипу = Неопределено,
                                     ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Экспорт

	ВыбФорма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаВыбора", ВладелецФормы);
	ВыбФорма.РежимВыбора = РежимВыбора;
	
	Если ЗначениеОтбораПоТипу <> Неопределено Тогда
		ВыбФорма.Отбор.Тип.Значение = ЗначениеОтбораПоТипу;
		ВыбФорма.Отбор.Тип.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность = Ложь;
	КонецЕсли; 
	
	Если ЗначениеОтбораПоВидуОбъектаКИ <> Неопределено Тогда
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Значение = ЗначениеОтбораПоВидуОбъектаКИ;
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы.Значение) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
	   И НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВладелецФормы.Значение) Тогда
		ВыбФорма.ПараметрТекущаяСтрока = ВладелецФормы.Значение;
	КонецЕсли; 
	
	ВыбФорма.Открыть();
	
КонецПроцедуры

// Функция получает индекс картинки КИ из коллекции БиблиотекаКартинок.КонтактнаяИнформация по типу КИ
//
Функция ПолучитьИндексКартинкиКИ(Тип, Представление = Неопределено, ПредставлениеАдреса = Неопределено) Экспорт
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если ПредставлениеАдреса = Представление И Представление <> Неопределено Тогда
			// Формат МНС
			Если ЗначениеЗаполнено(Представление) Тогда
				ИндексКартинки = 2;
			Иначе
				ИндексКартинки = 8;
			КонецЕсли; 
		Иначе
			Если ЗначениеЗаполнено(Представление) Тогда
				ИндексКартинки = 1;
			Иначе
				ИндексКартинки = 7;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если ЗначениеЗаполнено(Представление) Тогда
			ИндексКартинки = 3;
		Иначе
			ИндексКартинки = 9;
		КонецЕсли; 
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Если ЗначениеЗаполнено(Представление) Тогда
			ИндексКартинки = 4;
		Иначе
			ИндексКартинки = 10;
		КонецЕсли; 
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Если ЗначениеЗаполнено(Представление) Тогда
			ИндексКартинки = 0;
		Иначе
			ИндексКартинки = 6;
		КонецЕсли; 
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Если ЗначениеЗаполнено(Представление) Тогда
			ИндексКартинки = 5;
		Иначе
			ИндексКартинки = 11;
		КонецЕсли; 
	Иначе
		ИндексКартинки = 11;
	КонецЕсли;
	
	Возврат ИндексКартинки;
КонецФункции

#КонецЕсли

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Функция возвращает пустое значение определенного типа,
//  в соответствии с видом объекта контактной информации
//
// Параметры
//  ВидОбъектаКонтактнойИнформации - ПеречислениеСсылка.ВидыОбъектовКонтактнойИнформации
//
// Возвращаемое значение:
//   СправочникСсылка (пустая) или Неопределено
//
Функция уатПолучитьПустоеЗначениеОбъектаКонтактнойИнформации(ВидОбъектаКонтактнойИнформации) Экспорт

	Если ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица Тогда
		Возврат Справочники.КонтактныеЛица.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции // ()

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция уатВидОбъектаКИ(ОбъектСсылка) Экспорт

	Если ОбъектСсылка = Неопределено Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	Иначе
		Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции // ВидОбъектаКИ()

// Функция вызывается при начале выбора объекта контактной информации
//
// Параметры
//  ФормаЗаписи - форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент формы записи регистра сведений КонтактнаяИнформация,
//  значение которого выбирается.
//
// Возвращаемое значение:
//   Булево - продолжить стандартную операцию выбора или нет.
//
Функция уатНачалоВыбораОбъектаКИ(ФормаЗаписи, Элемент, ТекущийПользователь, ТолькоВнешниеОбъекты = Ложь) Экспорт

	Если Элемент.Значение <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокТиповОбъектов = Новый СписокЗначений;

	МассивТипов = ?(Элемент.ОграничениеТипа.Типы().Количество()>0, Элемент.ОграничениеТипа.Типы(), Элемент.ТипЗначения.Типы());
	Для каждого Тип Из МассивТипов Цикл
		НовыйТип = Новый(Тип);
		Если ТолькоВнешниеОбъекты И (Тип = Тип("СправочникСсылка.Пользователи") ИЛИ Тип = Тип("СправочникСсылка.Организации")) Тогда
			Продолжить;
		КонецЕсли; 
		СписокТиповОбъектов.Добавить(НовыйТип.Ссылка.Метаданные().Имя, НовыйТип.Ссылка.Метаданные().Синоним);
	КонецЦикла;

	Если СписокТиповОбъектов.Количество() = 1 Тогда
		ВыбранноеЗначениеСписка = СписокТиповОбъектов[0];
	Иначе
		ВыбранноеЗначениеСписка = ФормаЗаписи.ВыбратьИзСписка(СписокТиповОбъектов, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначениеСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Элемент.Значение = Справочники[ВыбранноеЗначениеСписка.Значение].ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;

КонецФункции


//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция уатПолучитьПредставлениеАдреса(Запись) Экспорт

	ТекПредставление = "";

	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;

	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;

	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", дом " + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", корпус " + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", кв." + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

// Процедура ищет единственное ТС среди всех ТС по началу его номера
//
// Параметры
//  Текст 		- строка - начало номера
//
// Возвращаемое значение
//  строка - номер найденного ТС, если он единственный
//
Функция уатПодобратьУлицу(Знач Текст) Экспорт
	
	ТекстАвтоПодбора = "";
	Запрос = Новый Запрос;
	
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		               |	АдресныйКлассификатор.Наименование
		               |ИЗ
		               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		               |ГДЕ
		               |	АдресныйКлассификатор.Наименование ПОДОБНО &парамТекст
		               |	И АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента";
	
	Запрос.Текст = ТекстЗапроса;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	//Текст = "%"+сокрЛП(Текст)+"%";
	Текст = сокрЛП(Текст)+"%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 5);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;
	
	Возврат ТекстАвтоПодбора
	
КонецФункции // уатОбщегоНазначения.уатПодобратьНомерТС()

// Процедура ищет ТС по номеру 
//
// Параметры
//  Текст 		- строка - начало гос. или гаражного номера
//  НачальноеЗначение	- СправочникСсылка.ОсновныеСредства - значение по умолчанию
//
// Возвращаемое значение
//  СправочникСсылка.ОсновныеСредства - возвращается значение по умолчанию, если 
//									не найдено ни одного подходящего ТС
//  СписокЗначений - список подходящих ТС, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих ТС
//
Функция уатПодобратьСписокУлиц(Знач Текст, НачальноеЗначение) Экспорт
	
	Запрос = Новый Запрос;
	
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		               |	АдресныйКлассификатор.Наименование
		               |ИЗ
		               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		               |ГДЕ
		               |	АдресныйКлассификатор.Наименование ПОДОБНО &парамТекст
		               |	И АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента";
		
		Запрос.Текст = ТекстЗапроса;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = сокрЛП(Текст)+"%";
	
	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 5);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		//Предупреждение("В поле ввода неверно задан номер ТС!");
		Возврат НачальноеЗначение;
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Наименование, Выборка.Наименование);
		КонецЦикла;
		Возврат Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // уатЗащищенныеФункции.уатПодобратьСписокТС()

//==================================================================================
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ КОНТРАГЕНТОВ И АДРЕСОВ

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция уатПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	Если Не ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Поле10
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Результат = уатПолучитьПредставлениеАдреса(РезультатЗапроса.Выгрузить()[0]);
	КонецЕсли;

	Возврат Результат;
КонецФункции // УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации()

//Функция возвращает результат запроса с адресами
//
Функция уатАдресаКонтрагентов(Контрагент = Неопределено, ВидАдреса = Неопределено) Экспорт
	
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КонтактнаяИнформация.Поле1,
		               |	КонтактнаяИнформация.Поле2,
		               |	КонтактнаяИнформация.Поле3,
		               |	КонтактнаяИнформация.Поле4,
		               |	КонтактнаяИнформация.Поле5,
		               |	КонтактнаяИнформация.Поле6,
		               |	КонтактнаяИнформация.Поле7,
		               |	КонтактнаяИнформация.Поле8,
		               |	КонтактнаяИнформация.Поле9,
		               |	КонтактнаяИнформация.Поле10,
		               |	КонтактнаяИнформация.Объект,
		               |	КонтактнаяИнформация.Тип,
		               |	КонтактнаяИнформация.Вид
		               |ИЗ
		               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |ГДЕ
		               |	КонтактнаяИнформация.Тип = &Тип";
					   
		Если Контрагент <> Неопределено Тогда
			
			Запрос.Текст = СокрЛП(Запрос.Текст) + "
		               |	И КонтактнаяИнформация.Объект = &Объект";
			Запрос.УстановитьПараметр("Объект"   , Контрагент);
		Иначе	
			
			Запрос.Текст = СокрЛП(Запрос.Текст) + "
		               |	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты";
		КонецЕсли;		   
		
		Если ВидАдреса <> Неопределено Тогда
			
			Запрос.Текст = СокрЛП(Запрос.Текст) + "
		               |	И КонтактнаяИнформация.Вид = &Вид";
			Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
			
		КонецЕсли;		   
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		ТаблицаАдресов = Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаАдресов;
	
КонецФункции
