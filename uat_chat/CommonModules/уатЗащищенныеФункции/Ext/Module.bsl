

Функция уатПроверкаЗащиты1(парОбработкаЗащиты = Неопределено, СпорныйОбъект = Ложь) Экспорт
	Результат = Ложь;

	ЭтоОбъединеннаяКонфигурация = уатОбщегоНазначения.ЭтоОбъединеннаяКонфигурация();
	ЭтоОбъединениеСТЛЭ = уатОбщегоНазначения.ЭтоОбъединениеСТЛЭ();

	Если СпорныйОбъект И уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ") И уатПраваИНастройки.уатПраво("РазрешитьРаботуСУЭ") Тогда
		мОбр = "";
		Выполнить("Результат = уатЗащищенныеФункции_уэ.уэПроверкаЗащиты(мОбр)");
		ОбработкаЗащиты = мОбр;
	Иначе
		уатОбщегоНазначения.уатИнициализацияСеанса();

		Если Не ЭтоОбъединеннаяКонфигурация И Не ЭтоОбъединениеСТЛЭ Или уатПраваИНастройки.уатПраво("РазрешитьРаботуСУАТ") Тогда
			ОбработкаЗащиты = Обработки.уатЗащита.Создать();
			Попытка
				Результат = ОбработкаЗащиты.Компонента.УправлениеАктивно();
			Исключение
			КонецПопытки;
		Иначе
			Предупреждение("Доступ к системе УАТ запрещен!
			|Для разрешения доступа необходимо пользователю в обработке ""Установка прав и настроек (УАТ)"" установить право ""Разрешить работу с УАТ"".
			|Обработка находится в меню ""Сервис -> Настройки (УАТ) -> Установка прав и настроек (УАТ)"".", 10);
			Возврат Ложь;

		КонецЕсли;
	КонецЕсли;

	Если Не Результат Тогда
		Сообщить("Не обнаружен ключ защиты типового решения!", СтатусСообщения.ОченьВажное);
		ЗавершитьРаботуСистемы(Истина);
	КонецЕсли;

	Если парОбработкаЗащиты <> Неопределено Тогда
		парОбработкаЗащиты = ОбработкаЗащиты;
	КонецЕсли;


	Возврат Результат;

КонецФункции


Функция уатПроверкаЗащиты(парОбработкаЗащиты = Неопределено, СпорныйОбъект = Ложь) Экспорт
		уатОбщегоНазначения.уатИнициализацияСеанса();
	Возврат Истина;
КонецФункции

Процедура уатФормаПередОткрытиемЖурналаДокументов(ЭтаФорма, Отказ, СтандартнаяОбработка, СпорныйОбъект = Ложь) Экспорт

КонецПроцедуры

Процедура уатФормаПередОткрытиемДокумента(ЭтаФорма, Отказ, СтандартнаяОбработка, СпорныйОбъект = Ложь) Экспорт

	Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам", ЭтаФорма.ЭтотОбъект.Права) Тогда
		уатПраваИНастройки.уатПроверкаПраваДоступаКДокументам(ЭтаФорма.ЭтотОбъект, Отказ, ЭтаФорма, ЭтаФорма.ЭтотОбъект.Права);
	КонецЕсли;

КонецПроцедуры

Процедура уатФормаПередОткрытиемОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, СпорныйОбъект = Ложь) Экспорт
КонецПроцедуры

Процедура уатФормаПередОткрытиемСправочника(ЭтаФорма, Отказ, СтандартнаяОбработка, СпорныйОбъект = Ложь) Экспорт
КонецПроцедуры

Процедура уатФормаПередОткрытиемЭлементаСправочника(ЭтаФорма, Отказ, СтандартнаяОбработка, СпорныйОбъект = Ложь) Экспорт

	//Если уатПраваИНастройки.уатПраво("ПроверкаДоступаКСправочникамИДокументам", ЭтаФорма.ЭтотОбъект.Права) Тогда
	//	уатПраваИНастройки.уатПроверкаПраваДоступаКСправочникам(ЭтаФорма.ЭтотОбъект, Отказ, ЭтаФорма, ЭтаФорма.ЭтотОбъект.Права);
	//КонецЕсли;
КонецПроцедуры

Процедура уатФормаПередОткрытиемОбработки(ЭтаФорма, Отказ, СтандартнаяОбработка, СпорныйОбъект = Ложь) Экспорт
КонецПроцедуры

Процедура уатКонтрольВводаВремени(Время) Экспорт
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 100;
	Если Минуты > 59 Тогда
		Предупреждение("Введено неправильное значение!");
		Время = 0;
	КонецЕсли;
КонецПроцедуры

Процедура уатДиалогВыбораТС(ВладелецФормы = Неопределено, ПараметрыОтбора = Неопределено, НачальноеЗначениеВыбора = Неопределено) Экспорт
	
	Форма = Справочники.уатТС.ПолучитьФормуВыбора(,ВладелецФормы,ВладелецФормы);
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		ДЛя каждого Эл из ПараметрыОтбора Цикл
			Форма.СправочникСписок.Отбор[Эл.Ключ].Значение = Эл.Значение;
			Форма.СправочникСписок.Отбор[Эл.Ключ].Использование = Истина;
		КонецЦикла;
	КонецеСЛИ;
	Форма.ЭлементыФормы.СправочникСписок.текущаястрока =  НачальноеЗначениеВыбора;
	Форма.Открыть();
	

КонецПроцедуры

Функция НайтиТС(Текст,ПараметрыОтбора) экспорт
	
	Запрос = Новый Запрос;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = сокрЛП(Текст);
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	уатТС.Ссылка,
	|	уатТС.Наименование,
	|	уатТС.ГосударственныйНомер,
	|	уатТС.ГаражныйНомер,
	|   ГаражныйНомер Рек
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	| ГДЕ 	уатТС.ГаражныйНомер = &СтрПск
	|";
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		ДЛя каждого Эл из ПараметрыОтбора Цикл
        	Запрос.Текст = Запрос.Текст +" и "+ЭЛ.Ключ+" = "+Эл.Значение;
		КонецЦикла;
	КонецЕСЛИ;
	
	Запрос.УстановитьПараметр("СтрПск",""+Текст+"");	
	ТБл = Запрос.Выполнить().Выгрузить();
	Если Тбл.Количество()>0 ТОгда
		Возврат Тбл;
	КонецеСЛИ;	
	
	
	
	//ПО госномеру
	Запрос.Текст = "ВЫБРАТЬ
	|	уатТС.Ссылка,
	|	уатТС.Наименование,
	|	уатТС.ГосударственныйНомер,
	|	уатТС.ГаражныйНомер,
	|   ГосударственныйНомер Рек
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	| ГДЕ 	уатТС.ГосударственныйНомер ПОДОБНО &СтрПск
	|";
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		ДЛя каждого Эл из ПараметрыОтбора Цикл
        	Запрос.Текст = Запрос.Текст +" и "+ЭЛ.Ключ+" = "+Эл.Значение;
		КонецЦикла;
	КонецЕСЛИ;
	
	Запрос.УстановитьПараметр("СтрПск","%"+Текст+"%");	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция уатПодобратьСписокТС(Организация, Знач Текст, НачальноеЗначение, СтруктураДопПараметров = Неопределено,РекПоиска="ГаражныйНомер") Экспорт
	
	ТБл = НайтиТС(Текст,СтруктураДопПараметров);
	
	Спк = Новый СписокЗначений;
	Для каждого Стр из Тбл Цикл
		Спк.Добавить(Стр.ССылка,СокрЛП(Стр.ГосударственныйНомер)+" (№"+Стр.ГаражныйНомер+") - "+СокрЛП(Стр.Наименование));
	КонецЦикла;
	
	Возврат Спк;

КонецФункции

Функция уатСписокГСМдляТС(Организация, ТС, ГруппаГСМ, БезАналогов = Ложь) Экспорт
	 
	 ГСМ="";
	 уатВыбратьГСМ(ГСМ,ГруппаГСМ);
	 Возврат Новый Структура("ГСМ",ГСМ);
	 
КонецФункции

Функция уатЭкипажТС(ТС,Дт=Неопределено) Экспорт
	
	спЭкипаж = Новый СписокЗначений;
	Если Дт = Неопределено ТОгда
		ВыборкаЭкипаж = РегистрыСведений.уатЭкипажТС.Выбрать(Новый Структура("ТС", ТС));
		Пока ВыборкаЭкипаж.Следующий() Цикл
			спЭкипаж.Добавить(ВыборкаЭкипаж.Сотрудник, уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаЭкипаж.Сотрудник))
		КонецЦикла;
	ИНаче
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ DISTINCT
		               |	уатПутевойЛист.Водитель1 Водитель
		               |ИЗ
		               |	Документ.уатПутевойЛист КАК уатПутевойЛист
		               |ГДЕ
		               |	уатПутевойЛист.ДатаВыезда МЕЖДУ &Дт И &Дт1
					   |  и ТранспортноеСредство = &ТС
					   |  и уатПутевойЛист.Водитель1 <> Значение(Справочник.уатСотрудники.ПустаяССылка)
					   |
					   |UNION ALL
					   |
					   |ВЫБРАТЬ DISTINCT
		               |	уатПутевойЛист.Водитель2
		               |ИЗ
		               |	Документ.уатПутевойЛист КАК уатПутевойЛист
		               |ГДЕ
		               |	уатПутевойЛист.ДатаВыезда МЕЖДУ &Дт И &Дт1
					   |  и ТранспортноеСредство = &ТС
					   |  и уатПутевойЛист.Водитель2 <> Значение(Справочник.уатСотрудники.ПустаяССылка)
					   |";
					   Запрос.УстановитьПараметр("Дт",Дт- 45 * 24*3600);
					   Запрос.УстановитьПараметр("Дт1",Дт);
					   Запрос.УстановитьПараметр("ТС",ТС);
					   Тбл = Запрос.Выполнить().Выгрузить();
					   Тбл.Свернуть("Водитель","");
					   
					   спЭкипаж.ЗагрузитьЗначения(Тбл.ВыгрузитьКолонку("Водитель"));
		
	КонецЕСЛИ;
	
	Возврат спЭкипаж;

КонецФункции

Функция уатЭкипажТСсУчетомГрафика(ТС, ДатаСреза = Неопределено, Организация = Неопределено, Смена = Неопределено) Экспорт
	//ОбработкаЗащиты = "";


	//Если Не уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
	//	Возврат Ложь;
	//КонецЕсли;

	//мОрганизация = Организация;
	//мТС = ТС;
	//мДата = ДатаСреза;
	//мСмена = Смена;



	//Рез = ОбработкаЗащиты.Компонента.уатЭкипажТСсУчетомГрафика(мТС, мДата, мОрганизация, мСмена);

	Возврат Новый Структура("Водитель,Водитель2,Сотрудник,Сотрудник2",Неопределено,Неопределено,Неопределено,Неопределено);

КонецФункции

Функция уатЭкипажТССписок(ТС,Дт=Неопределено) Экспорт
	Возврат уатЭкипажТС(ТС,Дт);
КонецФункции

Процедура уатВыбратьГСМ(РеквизитДляЗаполнения, Знач ГруппаГСМ = Неопределено) Экспорт
	 
	Если ГруппаГСМ = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	уатГруппыГСМ.Ссылка
		|ИЗ
		|	Перечисление.уатГруппыГСМ КАК уатГруппыГСМ");
		мсвВсеГруппы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ГруппаГСМ = Новый СписокЗначений;
		ГруппаГСМ.ЗагрузитьЗначения(мсвВсеГруппы);
	КонецЕсли;

	мГруппаГСМ = ГруппаГСМ;
	
	Форма = РегистрыСведений.уатНоменклатураГСМ.ПолучитьФорму("ФормаВыбора");
	Если ТипЗнч(мГруппаГСМ) = Тип("СписокЗначений") Тогда
		Форма.РегистрСведенийСписок.Отбор.ГруппаГСМ.ВидСравнения = ВидСравнения.ВСписке;
	ИНаче
		Форма.РегистрСведенийСписок.Отбор.ГруппаГСМ.ВидСравнения = ВидСравнения.Равно;
	КонецеСЛИ;
	Форма.РегистрСведенийСписок.Отбор.ГруппаГСМ.Значение = мГруппаГСМ;
	Форма.РегистрСведенийСписок.Отбор.ГруппаГСМ.Использование = Истина;
    Рез = Форма.ОткрытьМодально();
	Если Рез<>Неопределено ТОгда
		  РеквизитДляЗаполнения = Рез;
	КонецЕСЛИ;

КонецПроцедуры

Процедура уатВыбратьТопливо(РеквизитДляЗаполнения) Экспорт
	уатВыбратьГСМ(РеквизитДляЗаполнения, Перечисления.уатГруппыГСМ.Топливо);
КонецПроцедуры




















































































 //********************
Функция РасчитатьРасходГСМПоНорме(_вхПЛ, _вхТС, _вхГСМ, _вхОрганизация, Отказ, СписокНормРасход = Неопределено, ЭтоУкрРешение = Ложь) Экспорт
	ОбработкаЗащиты = "";
	
	Возврат 0;

	Если Не уатЗащищенныеФункции.уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат 0;
	КонецЕсли;

	м_вхПЛ = _вхПЛ;
	м_вхТС = _вхТС;
	м_вхГСМ = _вхГСМ;
	м_вхОрганизация = _вхОрганизация;
	м_вхОтказ = Отказ;
	мСписокНорм = СписокНормРасход;


	Рез = ОбработкаЗащиты.Компонента.РасчитатьРасходГСМПоНорме(м_вхПЛ, м_вхТС, м_вхГСМ, м_вхОрганизация, Отказ, СписокНормРасход, Ложь);




	Возврат Рез;

КонецФункции






Процедура уатДиалогВыбораСотрудника(ВладелецФормы = Неопределено, ПараметрыОтбора = Неопределено, НачальноеЗначениеВыбора = Неопределено) Экспорт
	
	Форма = Справочники.уатСотрудники.ПолучитьФормуВыбора(,ВладелецФормы,ВладелецФормы);
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		ДЛя каждого Эл из ПараметрыОтбора Цикл
			Форма.СправочникСписок.Отбор[Эл.Ключ].Значение = Эл.Значение;
			Форма.СправочникСписок.Отбор[Эл.Ключ].Использование = Истина;
		КонецЦикла;
	КонецеСЛИ;
	Форма.ЭлементыФормы.СправочникСписок.текущаястрока =  НачальноеЗначениеВыбора;
	Форма.Открыть();

КонецПроцедуры

Процедура уатДиалогВыбораГруза(Элемент, Номенклатура, ВладелецФормы = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = РегистрыСведений.уатНоменклатураГрузов.ПолучитьФорму("ФормаВыбора",ВладелецФормы,ВладелецФормы);
	Форма.ФлВсяНоменклатура = Ложь;
	Форма.Открыть();
	
КонецПроцедуры












 //****************************
Функция уатПолучитьЦветПокраскиУровняМаршрута(Ячейка) Экспорт
	ОбработкаЗащиты = "";
	Если Не уатПроверкаЗащиты(ОбработкаЗащиты, Истина) Тогда
		Возврат Новый Структура("ЦветФона, ЦветТекста", Новый Цвет, Новый Цвет);
	КонецЕсли;

	Возврат ОбработкаЗащиты.Компонента.уатПолучитьЦветПокраскиУровняМаршрута(Ячейка);
КонецФункции












Процедура уатДобавитьВидыПЛСТ(мСписокВидовПЛ) Экспорт
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ1, "ЭСМ1 (рапорт о работе башенного крана)");
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ3, "ЭСМ3 (рапорт о работе строительной машины)");

КонецПроцедуры







Функция уатПечать_ЭСМ1(СсылкаНаОбъект, ИмяМакета, ФлагПечати = "") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;
	ТабДокумент = Новый ТабличныйДокумент;

	ОбработкаЗащиты = "";

	Если Не уатЗащищенныеФункции.уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат ТабДокумент;
	КонецЕсли;

	Макет = СсылкаНаОбъект.ПолучитьМакет(ИмяМакета + "_стм");

	мМаксСтрок = 10;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ1";


	рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(СсылкаНаОбъект.ТранспортноеСредство);

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;


	Если ФлагПечати <> 2 Тогда
		Обл = Макет.ПолучитьОбласть("Лицевая");

		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(СсылкаНаОбъект);
		Обл.Параметры.Номер = мНомерПЛ;
		ФорматДаты = "ДЛФ='Д'";
		Обл.Параметры.ДатаВыписки = Формат(СсылкаНаОбъект.ДатаВыписки, ФорматДаты);
		Обл.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(СсылкаНаОбъект.ТранспортноеСредство);
		Обл.Параметры.ТранспортноеСредствоГосНомер = рсТранспортноеСредство.ГосударственныйНомер;
		Обл.Параметры.ТранспортноеСредствоГарНомер = рсТранспортноеСредство.ГаражныйНомер;
		Обл.Параметры.Колонна = рсТранспортноеСредство.Колонна.Код;

		Обл.Параметры.КодПоОКПО = СсылкаНаОбъект.Организация.КодПоОКПО;
		Обл.Параметры.ДатаВыезда = Формат(СсылкаНаОбъект.ДатаВыезда, "ДФ=дд.ММ.гг");
		Обл.Параметры.ДатаВозвращения = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=дд.ММ.гг");

		Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель1.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Водитель1, СсылкаНаОбъект.ДатаВыписки, , СсылкаНаОбъект.Организация);
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.ВодительКод1 = мРеквизитыВодителя1.ТабельныйНомер;
			Обл.Параметры.КлассВодителя1 = мРеквизитыВодителя1.Класс;
		КонецЕсли;

		Если ЗначениеЗаполнено(СсылкаНаОбъект.Водитель2) Тогда
			Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель2.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
			мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Водитель2, СсылкаНаОбъект.ДатаВыписки, , СсылкаНаОбъект.Организация);
			Если мРеквизитыВодителя2 <> Неопределено Тогда
				Обл.Параметры.ВодительКод2 = мРеквизитыВодителя2.ТабельныйНомер;
				Обл.Параметры.КлассВодителя2 = мРеквизитыВодителя2.Класс;
			КонецЕсли;
		КонецЕсли;

		Если СсылкаНаОбъект.Задание.Количество() > 0 Тогда

			Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
			Набор.Отбор.Объект.Значение = СсылкаНаОбъект.Задание[0].Контрагент;
			Набор.Отбор.Вид.Значение = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			Набор.Отбор.Объект.Использование = Истина;
			Набор.Прочитать();

			Если Набор.Количество() > 0 Тогда
				Запись = Набор.Получить(0);
				Обл.Параметры.Заказчик = СсылкаНаОбъект.Задание[0].Контрагент.НаименованиеПолное + ", " + Запись.Представление;
				Обл.Параметры.ЗаказчикКодПоОКПО = СсылкаНаОбъект.Задание[0].Контрагент.КодПоОКПО;
				Обл.Параметры.Объект = СсылкаНаОбъект.Задание[0].ОбъектСтроительства;
			КонецЕсли;

		КонецЕсли;

		ТабДокумент.Вывести(Обл);

	КонецЕсли;

	Если ФлагПечати = 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;


	Если ФлагПечати <> 1 Тогда

		Обл = Макет.ПолучитьОбласть("Оборотная");
		Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель1.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель2.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		ТабДокумент.Вывести(Обл);

	КонецЕсли;
	Возврат ТабДокумент;

КонецФункции







Функция уатПечать_ЭСМ3(СсылкаНаОбъект, ИмяМакета, ФлагПечати = "") Экспорт
	ТабДокумент = Новый ТабличныйДокумент;

	ОбработкаЗащиты = "";

	Если Не уатЗащищенныеФункции.уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат ТабДокумент;
	КонецЕсли;

	Макет = СсылкаНаОбъект.ПолучитьМакет(ИмяМакета + "_стм");

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ3";

	рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(СсылкаНаОбъект.ТранспортноеСредство);

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;


	Если ФлагПечати <> 2 Тогда
		Обл = Макет.ПолучитьОбласть("Лицевая");

		мМаксСтрок = 10;

		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(СсылкаНаОбъект);
		Обл.Параметры.Номер = мНомерПЛ;
		ФорматДаты = "ДЛФ='Д'";
		Обл.Параметры.ДатаВыписки = Формат(СсылкаНаОбъект.ДатаВыписки, ФорматДаты);
		Обл.Параметры.Организация = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(СсылкаНаОбъект.ТранспортноеСредство);
		Обл.Параметры.ТранспортноеСредствоГосНомер = рсТранспортноеСредство.ГосударственныйНомер;
		Обл.Параметры.ТранспортноеСредствоГарНомер = рсТранспортноеСредство.ГаражныйНомер;
		Обл.Параметры.Колонна = рсТранспортноеСредство.Колонна.Код;
		Обл.Параметры.ДатаСостДень = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=дд");
		Обл.Параметры.ДатаСостМесяц = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=ММ");
		Обл.Параметры.ДатаСостГод = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=гг");

		Обл.Параметры.КодПоОКПО = СсылкаНаОбъект.Организация.КодПоОКПО;
		Обл.Параметры.ДатаВыезда = Формат(СсылкаНаОбъект.ДатаВыезда, "ДФ=дд.ММ.гг");
		Обл.Параметры.ДатаВозвращения = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=дд.ММ.гг");

		Водители = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель1.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		Если ЗначениеЗаполнено(СсылкаНаОбъект.Водитель2) Тогда
			Обл.Параметры.Водители = СокрЛП(Водители) + ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель2.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		Иначе
			Обл.Параметры.Водители = Водители;
		КонецЕсли;
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Водитель1, СсылкаНаОбъект.ДатаВыписки, , СсылкаНаОбъект.Организация);
		Если мРеквизитыВодителя1 <> Неопределено Тогда
			Обл.Параметры.ВодительКод = мРеквизитыВодителя1.ТабельныйНомер;
		КонецЕсли;

		ТекИндекс = 0;
		ТЗЗадание = СсылкаНаОбъект.Задание.Выгрузить();
		ТЗЗадание.Колонки.Добавить("ЧислоМесяца");
		Для каждого ТекСтрока Из ТЗЗадание Цикл
			ТекСтрока.ЧислоМесяца = День(ТекСтрока.ВремяПрибытия);
		КонецЦикла;
		ТЗЗадание.Свернуть("ОбъектСтроительства, АдресПрибытия, Контрагент, ЧислоМесяца", "КоличествоЧасов");
		Для каждого ТекСтрока Из ТЗЗадание Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.ОбъектСтроительства) Тогда
				Продолжить;
			КонецЕсли;

			ТекИндекс = ТекИндекс + 1;

			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;

			Если ТекИндекс = 1 Тогда

				Обл.Параметры.Заказчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ТекСтрока.Контрагент, ТекущаяДата()), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
				Обл.Параметры.ЗаказчикКодПоОКПО = ТекСтрока.Контрагент.КодПоОКПО;

			КонецЕсли;

			Обл.Параметры["Дата" + ТекИндекс] = ТекСтрока.ЧислоМесяца;
			ТекстОбъекта = ТекСтрока.ОбъектСтроительства.Наименование + ", " + ТекСтрока.АдресПрибытия;
			Если Прав(ТекстОбъекта, 2) = ", " Тогда
				ТекстОбъекта = Сред(ТекстОбъекта, 1, СтрДлина(ТекстОбъекта) - 2);
			КонецЕсли;
			Обл.Параметры["Объект" + ТекИндекс] = ТекстОбъекта;
			Обл.Параметры["ВремяРаботы" + ТекИндекс] = ТекСтрока.КоличествоЧасов;

		КонецЦикла;

		ТабДокумент.Вывести(Обл);

	КонецЕсли;

	Если ФлагПечати = 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;


	Если ФлагПечати <> 1 Тогда

		мМаксСтрок = 4;

		Обл = Макет.ПолучитьОбласть("Оборотная");
		Обл.Параметры.Водитель1 = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.Водитель1);

		ТекИндекс = 0;
		Для каждого ТекСтрока Из СсылкаНаОбъект.Задание Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.ОбъектСтроительства) Тогда
				Продолжить;
			КонецЕсли;

			ТекИндекс = ТекИндекс + 1;

			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;

			Обл.Параметры["ЧислоМесяцаПрибытие" + ТекИндекс] = День(ТекСтрока.ВремяПрибытия);
			Обл.Параметры["ВремяПрибытия" + ТекИндекс] = ТекСтрока.ВремяПрибытия;
			Обл.Параметры["ВремяУбытия" + ТекИндекс] = ТекСтрока.ВремяУбытия;
			Обл.Параметры["Отработно" + ТекИндекс] = ТекСтрока.КоличествоЧасов;
			ТекстОбъекта = ТекСтрока.ОбъектСтроительства.Наименование + ", " + ТекСтрока.АдресПрибытия;
			Если Прав(ТекстОбъекта, 2) = ", " Тогда
				ТекстОбъекта = Сред(ТекстОбъекта, 1, СтрДлина(ТекстОбъекта) - 2);
			КонецЕсли;
			Обл.Параметры["ОбъектОб" + ТекИндекс] = ТекстОбъекта;

		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатПутевойЛистФактическиОтработанноеВремя.Дата КАК Дата
		|ИЗ
		|	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатПутевойЛистФактическиОтработанноеВремя
		|ГДЕ
		|	уатПутевойЛистФактическиОтработанноеВремя.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатПутевойЛистФактическиОтработанноеВремя.Ссылка,
		|	уатПутевойЛистФактическиОтработанноеВремя.Дата КАК Дата,
		|	уатПутевойЛистФактическиОтработанноеВремя.Сотрудник КАК Сотрудник,
		|	уатПутевойЛистФактическиОтработанноеВремя.ВремяДневное КАК ВремяДневное,
		|	уатПутевойЛистФактическиОтработанноеВремя.ВремяНочное КАК ВремяНочное,
		|	уатСведенияОСотрудникахСрезПоследних.ТабельныйНомер КАК ТабельныйНомер
		|ИЗ
		|	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатПутевойЛистФактическиОтработанноеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСведенияОСотрудниках.СрезПоследних КАК уатСведенияОСотрудникахСрезПоследних
		|		ПО уатПутевойЛистФактическиОтработанноеВремя.Сотрудник = уатСведенияОСотрудникахСрезПоследних.Сотрудник
		|			И уатПутевойЛистФактическиОтработанноеВремя.Ссылка.Организация = уатСведенияОСотрудникахСрезПоследних.Организация
		|ГДЕ
		|	уатПутевойЛистФактическиОтработанноеВремя.Ссылка = &Ссылка
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Дата),
		|	СУММА(ВремяДневное),
		|	СУММА(ВремяНочное),
		|	МИНИМУМ(ТабельныйНомер)
		|ПО
		|	Сотрудник";
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.Ссылка);

		ТекИндекс = 1;
		СоответствиеДатыИЯчейки = Новый Соответствие;
		ВыборкаДат = Запрос.ВыполнитьПакет()[0].Выбрать();
		Пока ВыборкаДат.Следующий() Цикл
			Обл.Параметры["ЧислоМесяца" + ТекИндекс] = День(ВыборкаДат.Дата);
			СоответствиеДатыИЯчейки.Вставить(ВыборкаДат.Дата, ТекИндекс);
			ТекИндекс = ТекИндекс + 1;
		КонецЦикла;

		мМаксСтрок = 10;
		ТекИндексСтроки = 1;
		ВыборкаСотрудник = Запрос.ВыполнитьПакет()[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСотрудник.Следующий() Цикл
			Обл.Параметры["Сотрудник" + ТекИндексСтроки] = ВыборкаСотрудник.Сотрудник;
			Обл.Параметры["ТабНомер" + ТекИндексСтроки] = ВыборкаСотрудник.ТабельныйНомер;
			Обл.Параметры["КолЧасов" + ТекИндексСтроки] = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВыборкаСотрудник.ВремяДневное);
			Обл.Параметры["КолНочныхЧасов" + ТекИндексСтроки] = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВыборкаСотрудник.ВремяНочное);
			Обл.Параметры["КолДней" + ТекИндексСтроки] = ВыборкаСотрудник.Дата;

			ВыборкаДень = ВыборкаСотрудник.Выбрать();
			Пока ВыборкаДень.Следующий() Цикл
				ТекИндексСтолбца = СоответствиеДатыИЯчейки.Получить(ВыборкаДень.Дата);
				ОбщееВремя = ВыборкаДень.ВремяДневное + ВыборкаДень.ВремяНочное;
				Обл.Параметры["Яч" + ТекИндексСтроки + ТекИндексСтолбца] = ОбщееВремя / 3600;
			КонецЦикла;
			ТекИндексСтроки = ТекИндексСтроки + 1;

			Если ТекИндексСтроки > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТабДокумент.Вывести(Обл);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции







Функция уатПечать_уатЭСМ7(СсылкаНаОбъект, ИмяМакета, ФлагПечати = "") Экспорт
	ТабДокумент = Новый ТабличныйДокумент;

	ОбработкаЗащиты = "";

	Если Не уатЗащищенныеФункции.уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат ТабДокумент;
	КонецЕсли;

	Макет = ПолучитьОбщийМакет(ИмяМакета);


	мМаксСтрок = 7;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ7";

	рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(СсылкаНаОбъект.ТранспортноеСредство);

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;

	Обл = Макет.ПолучитьОбласть("Лицевая");

	мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(СсылкаНаОбъект);
	Обл.Параметры.НомерСПравки = мНомерПЛ;
	ФорматДаты = "ДЛФ='Д'";
	Обл.Параметры.ДатаВыписки = Формат(СсылкаНаОбъект.ДатаВыписки, ФорматДаты);
	Обл.Параметры.Организация = СсылкаНаОбъект.Организация;
	Обл.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
	Обл.Параметры.МодельТСПредставление = уатОбщегоНазначения.уатПредставлениеМоделиТС(СсылкаНаОбъект.ТранспортноеСредство);
	Обл.Параметры.ТранспортноеСредствоГосНомер = рсТранспортноеСредство.ГосударственныйНомер;

	Обл.Параметры.КодПоОКПО = СсылкаНаОбъект.Организация.КодПоОКПО;
	Обл.Параметры.ДатаВыезда = Формат(СсылкаНаОбъект.ДатаВыезда, "ДФ=дд.ММ.гг");
	Обл.Параметры.ДатаВозвращения = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=дд.ММ.гг");
	Обл.Параметры.ДатаСостДень = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=дд");
	Обл.Параметры.ДатаСостМесяц = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=ММ");
	Обл.Параметры.ДатаСостГод = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=гг");

	Водители = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель1.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Водитель2) Тогда
		Обл.Параметры.Водители = СокрЛП(Водители) + ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель2.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
	Иначе
		Обл.Параметры.Водители = Водители;
	КонецЕсли;

	Для каждого СтрокаЗадания Из СсылкаНаОбъект.Задание Цикл
		Если Не ЗначениеЗаполнено(СтрокаЗадания.ОбъектСтроительства) Тогда
			Продолжить;
		КонецЕсли;

		Обл.Параметры.Заказчик = СтрокаЗадания.Контрагент;
		мЗаказчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтрокаЗадания.Контрагент, СсылкаНаОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");

		Обл.Параметры.ЗаказчикПредставление = мЗаказчик;
		Если СтрДлина(мЗаказчик) > 65 Тогда
			Обл.Области.ОбластьЗаказчикПредставление.Шрифт = Новый Шрифт(Обл.Области.ОбластьЗаказчикПредставление.Шрифт, Неопределено, 7);
		КонецЕсли;

		Обл.Параметры.Объект = СтрокаЗадания.ОбъектСтроительства;
		Обл.Параметры.ЗаказчикКодПоОКПО = СтрокаЗадания.Контрагент.КодПоОКПО;


		мЗапрос = Новый Запрос;
		мЗапрос.Текст = "ВЫБРАТЬ
		|	КонтактныеЛицаКонтрагентов.Ссылка,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
		|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_иректор""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтрагентов.Ссылка,
		|	2
		|ИЗ
		|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
		|ГДЕ
		|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
		|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_л% бухгалтер""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.ОсновноеКонтактноеЛицо,
		|	3
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Владелец
		|	И НЕ Контрагенты.ОсновноеКонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.Пустаяссылка)
		|	И НЕ Контрагенты.ОсновноеКонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.Пустаяссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";

		мЗапрос.УстановитьПараметр("Владелец", СтрокаЗадания.Контрагент);
		выборка = мЗапрос.Выполнить().Выбрать();

		Если выборка.Следующий() Тогда
			Обл.Параметры.ДолжностьЗаказчика = выборка.Ссылка.Должность;
			Обл.Параметры.ФИОЗаказчика = выборка.Ссылка.Наименование;
		КонецЕсли;

		мСтроки = СсылкаНаОбъект.Задание.НайтиСтроки(Новый Структура("ОбъектСтроительства", СтрокаЗадания.ОбъектСтроительства));
		мВремяРаботы = 0;
		Для каждого ТекСтрока Из мСтроки Цикл
			мВремяРаботы = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяРаботы, ТекСтрока.КоличествоЧасов);
		КонецЦикла;

		Обл.Параметры.Количество1 = мВремяРаботы;
		ОтработаноПрописью = "";
		Если ЗначениеЗаполнено(Цел(мВремяРаботы)) Тогда
			ОтработаноПрописью = СтрЗаменить(ЧислоПрописью(Цел(мВремяРаботы), "L=ru_RU", "час, часа, часов, м"), " 00", "");
		КонецЕсли;
		Если ЗначениеЗаполнено(мВремяРаботы - Цел(мВремяРаботы)) Тогда
			ОтработаноПрописью = ОтработаноПрописью + СтрЗаменить(ЧислоПрописью((мВремяРаботы - Цел(мВремяРаботы)) * 100, "L=ru_RU; FN=Ложь", "минута, минуты, минут, ж"), " 00", "");
		КонецЕсли;
		Обл.Параметры.ОтработаноМашиноЧасов = ОтработаноПрописью;

		Прервать;

	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений." + ?(Метаданные.РегистрыСведений.Найти("ОтветственныеЛицаОрганизаций") <> Неопределено, "ОтветственныеЛицаОрганизаций", "ОтветственныеЛицаОрганизации") + ".СрезПоследних(
	|		&Дата,
	|		СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|		    И ОтветственноеЛицо = &Директор) КАК ОтветственныеЛицаОрганизацииСрезПоследних";

	Запрос.УстановитьПараметр("Дата", СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаОбъект.Организация);
	Запрос.УстановитьПараметр("Директор", Перечисления.ОтветственныеЛицаОрганизации.Руководитель);
	Результат = Запрос.Выполнить();
	выборка = Результат.Выбрать();

	Если выборка.Следующий() Тогда
		ДанныеФизЛица = уатОбщегоНазначенияТиповые.ДанныеФизЛица(СсылкаНаОбъект.Организация, выборка.ФизическоеЛицо, СсылкаНаОбъект.Дата);
		Руководитель = ДанныеФизЛица.Представление;
		Должность = выборка.Должность;

		Обл.Параметры.ФИОРуководителя = Руководитель;
		Обл.Параметры.Должность = Должность;
	Иначе
		Обл.Параметры.ФИОРуководителя = СсылкаНаОбъект.Организация;
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции






Функция уатПечать_ТТД_ЭСМ7(ДокументОбъект, ИмяМакета, ФлагПечати = "") Экспорт
	ТабДокумент = Новый ТабличныйДокумент;


	Если ДокументОбъект.Стоимость.Количество() = 0 Тогда
		Сообщить("Не расчитана стоимость услуг!");
		Возврат ТабДокумент;
	Иначе
		Если ДокументОбъект.Стоимость[0].ПутЛист.Пустая() Тогда
			Сообщить("Не указан путевой лист на закладке ""Стоимость услуг""!");
			Возврат ТабДокумент;
		КонецЕсли;
	КонецЕсли;

	ОснПутевойЛист = ДокументОбъект.Стоимость[0].ПутЛист;

	ОбработкаЗащиты = "";

	Если Не уатЗащищенныеФункции.уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат ТабДокумент;
	КонецЕсли;


	Макет = ПолучитьОбщийМакет(ИмяМакета);

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТД_ЭСМ7";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;

	Обл = Макет.ПолучитьОбласть("Лицевая");

	рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ОснПутевойЛист.ТранспортноеСредство);

	Обл.Параметры.НомерСправки = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(ДокументОбъект);
	ФорматДаты = "ДЛФ='Д'";
	Обл.Параметры.ДатаВыписки = Формат(ДокументОбъект.Дата, ФорматДаты);
	Обл.Параметры.Организация = ДокументОбъект.Организация;
	Обл.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДокументОбъект.Организация, ДокументОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
	Обл.Параметры.МодельТСПредставление = уатОбщегоНазначения.уатПредставлениеМоделиТС(ОснПутевойЛист.ТранспортноеСредство);
	Обл.Параметры.МодельТС = рсТранспортноеСредство.Модель;
	Обл.Параметры.ТранспортноеСредствоГосНомер = рсТранспортноеСредство.ГосударственныйНомер;
	Обл.Параметры.ТранспортноеСредство = ОснПутевойЛист.ТранспортноеСредство;

	Обл.Параметры.КодПоОКПО = ДокументОбъект.Организация.КодПоОКПО;
	Обл.Параметры.ЗаказчикКодПоОКПО = ДокументОбъект.Контрагент.КодПоОКПО;
	Обл.Параметры.ДатаВыезда = Формат(ОснПутевойЛист.ДатаВыезда, "ДФ=дд.ММ.гг");
	Обл.Параметры.ДатаВозвращения = Формат(ОснПутевойЛист.ДатаВозвращения, "ДФ=дд.ММ.гг");
	Обл.Параметры.ДатаСостДень = Формат(ОснПутевойЛист.ДатаВозвращения, "ДФ=дд");
	Обл.Параметры.ДатаСостМесяц = Формат(ОснПутевойЛист.ДатаВозвращения, "ДФ=ММ");
	Обл.Параметры.ДатаСостГод = Формат(ОснПутевойЛист.ДатаВозвращения, "ДФ=гг");

	Водители = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(ОснПутевойЛист.Водитель1.ФизЛицо, ОснПутевойЛист.ДатаВыписки);
	Если ЗначениеЗаполнено(ОснПутевойЛист.Водитель2) Тогда
		Обл.Параметры.Водители = СокрЛП(Водители) + ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(ОснПутевойЛист.Водитель2.ФизЛицо, ОснПутевойЛист.ДатаВыписки);
	Иначе
		Обл.Параметры.Водители = Водители;
	КонецЕсли;

	Обл.Параметры.Заказчик = ДокументОбъект.Контрагент;
	мЗаказчикПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДокументОбъект.Контрагент, ДокументОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");

	Если СтрДлина(мЗаказчикПредставление) > 65 Тогда
		Обл.Области.ОбластьЗаказчикПредставление.Шрифт = Новый Шрифт(Обл.Области.ОбластьЗаказчикПредставление.Шрифт, Неопределено, 7);
	КонецЕсли;
	Обл.Параметры.ЗаказчикПредставление = мЗаказчикПредставление;

	Если ДокументОбъект.Стоимость.Количество() > 0 Тогда
		Обл.Параметры.Объект = ДокументОбъект.Стоимость[0].ОбъектСтроительства;
	КонецЕсли;

	мсвСтрокПЛ = ДокументОбъект.Стоимость.НайтиСтроки(Новый Структура("ПутЛист, ОбъектСтроительства", ДокументОбъект.Стоимость[0].ПутЛист, ДокументОбъект.Стоимость[0].ОбъектСтроительства));


	СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Сч = 1;
	КоличИтого = 0;
	СуммаИтого = 0;
	СуммаНДСИтого = 0;
	мВремяРаботы = 0;
	Для каждого ТекСтрокаСтоимости Из мсвСтрокПЛ Цикл
		Если Сч = 8 Тогда
			Прервать;
		КонецЕсли;
		Если Не (ТекСтрокаСтоимости.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Или ТекСтрокаСтоимости.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяСпециальнойРаботы) Тогда

			Продолжить;
		КонецЕсли;

		ТекСтрокаСтоимости_Сумма = ТекСтрокаСтоимости.Сумма;
		ТекСтрокаСтоимости_Цена = ТекСтрокаСтоимости.Цена;
		ТекСтрокаСтоимости_СуммаНДС = ТекСтрокаСтоимости.СуммаНДС;

		Если ДокументОбъект.ВалютаДокумента <> ВалютаРеглУчета Тогда
			ТекСтрокаСтоимости_Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаСтоимости.Сумма, ДокументОбъект.ВалютаДокумента, ВалютаРеглУчета, СтруктураКурсаДокумента.Курс, 1, СтруктураКурсаДокумента.Кратность, 1);





			ТекСтрокаСтоимости_Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаСтоимости.Цена, ДокументОбъект.ВалютаДокумента, ВалютаРеглУчета, СтруктураКурсаДокумента.Курс, 1, СтруктураКурсаДокумента.Кратность, 1);





			ТекСтрокаСтоимости_СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаСтоимости.СуммаНДС, ДокументОбъект.ВалютаДокумента, ВалютаРеглУчета, СтруктураКурсаДокумента.Курс, 1, СтруктураКурсаДокумента.Кратность, 1);





		КонецЕсли;

		Обл.Параметры["Услуга" + Сч] = ТекСтрокаСтоимости.НоменклатураУслуги;
		Обл.Параметры["НаименованиеРаботы" + Сч] = ТекСтрокаСтоимости.НоменклатураУслуги.Наименование;
		Обл.Параметры["КодРаботы" + Сч] = ТекСтрокаСтоимости.НоменклатураУслуги.Код;
		Обл.Параметры["Количество" + Сч] = ТекСтрокаСтоимости.Количество;
		Обл.Параметры["Цена" + Сч] = ТекСтрокаСтоимости_Цена;
		Обл.Параметры["Сумма" + Сч] = ТекСтрокаСтоимости_Сумма;

		КоличИтого = КоличИтого + ТекСтрокаСтоимости.Количество;
		СуммаИтого = СуммаИтого + ТекСтрокаСтоимости_Сумма;
		СуммаНДСИтого = СуммаНДСИтого + ТекСтрокаСтоимости_СуммаНДС;

		мВремяРаботы = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяРаботы, ТекСтрокаСтоимости.Количество);

		Сч = Сч + 1;
	КонецЦикла;

	Обл.Параметры.КоличествоИтого = мВремяРаботы;
	Обл.Параметры.СуммаИтого = СуммаИтого;
	Обл.Параметры.СуммаНДСИтого = СуммаНДСИтого;
	Обл.Параметры.Всего = ?(ДокументОбъект.СуммаВключаетНДС, СуммаИтого, СуммаИтого + СуммаНДСИтого);

	ОтработаноПрописью = "";
	Если ЗначениеЗаполнено(Цел(мВремяРаботы)) Тогда
		ОтработаноПрописью = СтрЗаменить(ЧислоПрописью(Цел(мВремяРаботы), "L=ru_RU", "час, часа, часов, м"), " 00", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(мВремяРаботы - Цел(мВремяРаботы)) Тогда
		ОтработаноПрописью = ОтработаноПрописью + СтрЗаменить(ЧислоПрописью((мВремяРаботы - Цел(мВремяРаботы)) * 100, "L=ru_RU; FN=Ложь", "минута, минуты, минут, ж"), " 00", "");
	КонецЕсли;
	Обл.Параметры.ОтработаноМашиноЧасов = ОтработаноПрописью;


	Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизации(ДокументОбъект.Организация, ДокументОбъект.Дата);

	Обл.Параметры.ФИОРуководителя = Руководители.Руководитель;
	Обл.Параметры.Должность = Руководители.РуководительДолжность;


	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
	|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_иректор""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка,
	|	2
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
	|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_л% бухгалтер""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.ОсновноеКонтактноеЛицо,
	|	3
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Владелец
	|	И НЕ Контрагенты.ОсновноеКонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.Пустаяссылка)
	|	И НЕ Контрагенты.ОсновноеКонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.Пустаяссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	мЗапрос.УстановитьПараметр("Владелец", ДокументОбъект.Контрагент);
	выборка = мЗапрос.Выполнить().Выбрать();

	Если выборка.Следующий() Тогда
		Обл.Параметры.ДолжностьЗаказчика = выборка.Ссылка.Должность;
		Обл.Параметры.ФИОЗаказчика = выборка.Ссылка.Наименование;
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции









Функция уатПечать_ЭСМ7_за_период(Выборка, ДатаНач, ДатаКон, ДатаВыписки) Экспорт
	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТД_ЭСМ7";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;

	НачатьТранзакцию();

	мПериодНумерации = ?(ЗначениеЗаполнено(ДатаВыписки), НачалоГода(ДатаВыписки), НачалоГода(РабочаяДата));
	СоответствиеНомеров = ПолучитьНачальныеНомераДляПечатнойФормы(мПериодНумерации);


	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.уатНумерацияОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

	ВыборкаОбъект = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаФизЛицаОрг = Неопределено;
	Пока ВыборкаОбъект.Следующий() Цикл
		ВыборкаКонтрагент = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МассивВодителей = Новый Массив;

		Пока ВыборкаКонтрагент.Следующий() Цикл

			Водители = "";

			ВыборкаРегистратор = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Макет = ПолучитьОбщийМакет("уатЭСМ7");

			мМаксСтрок = 7;


			Обл = Макет.ПолучитьОбласть("Лицевая");

			Если ВыборкаФизЛицаОрг = Неопределено Тогда
				ВыборкаФизЛицаОрг = ПечатьЭСМ7ЗаПериодПолучитьВыборкуОтветственныхЛиц(ВыборкаКонтрагент, ДатаВыписки);
			КонецЕсли;

			ПечатьЭСМ7ЗаПериодЗаполнитьШапку(Обл, ДатаНач, ДатаКон, ДатаВыписки, СоответствиеНомеров, ВыборкаКонтрагент, ВыборкаФизЛицаОрг);

			Сч = 1;
			КоличИтого = 0;
			СуммаИтого = 0;
			СуммаНДСИтого = 0;
			Всего = 0;

			Пока ВыборкаРегистратор.Следующий() Цикл

				ВыборкаУслуга = ВыборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ВыборкаУслуга.Следующий() Цикл

					Напечатали = Ложь;

					Обл.Параметры.Объект = ВыборкаУслуга.ОбъектСтроительства;

					Обл.Параметры["Услуга" + Сч] = ВыборкаУслуга.НоменклатураУслуги;
					Обл.Параметры["НаименованиеРаботы" + Сч] = ВыборкаУслуга.НоменклатураУслуги.Наименование;
					Обл.Параметры["КодРаботы" + Сч] = ВыборкаУслуга.НоменклатураУслуги.Код;
					Обл.Параметры["Количество" + Сч] = ВыборкаУслуга.КоличествоОборот;
					Обл.Параметры["Цена" + Сч] = ВыборкаУслуга.Суммаоборот / ВыборкаУслуга.КоличествоОборот;
					Обл.Параметры["Сумма" + Сч] = ВыборкаУслуга.СуммаОборот;

					КоличИтого = уатЗащищенныеФункцииСервер.СложитьВремя(КоличИтого, ВыборкаУслуга.КоличествоОборот);
					СуммаИтого = СуммаИтого + ВыборкаУслуга.СуммаОборот;
					СуммаНДСИтого = СуммаНДСИтого + ВыборкаУслуга.СуммаНДСОборот;

					Сч = Сч + 1;
					мМаксСтрок = мМаксСтрок - 1;

					ВыборкаВодителей = ВыборкаУслуга.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВодителей.Следующий() Цикл
						Водитель1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(ВыборкаВодителей.ПутЛист.Водитель1.ФизЛицо, ДатаВыписки);
						Если МассивВодителей.Найти(Водитель1) = Неопределено Тогда
							МассивВодителей.Добавить(Водитель1);
						КонецЕсли;
						Если ЗначениеЗаполнено(ВыборкаВодителей.ПутЛист.Водитель2) И МассивВодителей.Найти(уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(ВыборкаВодителей.ПутЛист.Водитель2.ФизЛицо, ДатаВыписки)) = Неопределено Тогда
							МассивВодителей.Добавить(уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(ВыборкаВодителей.ПутЛист.Водитель2.ФизЛицо, ДатаВыписки));
						КонецЕсли;
					КонецЦикла;

					Если мМаксСтрок = 0 Тогда
						ПечатьЭСМ7ЗаПериодЗаполнитьПодвал(Обл, КоличИтого, СуммаИтого, СуммаНДСИтого, Всего, МассивВодителей);

						ТабДокумент.Вывести(Обл);
						ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

						Макет = ПолучитьОбщийМакет("уатЭСМ7");

						мМаксСтрок = 7;

						Обл = Макет.ПолучитьОбласть("Лицевая");

						ПечатьЭСМ7ЗаПериодЗаполнитьШапку(Обл, ДатаНач, ДатаКон, ДатаВыписки, СоответствиеНомеров, ВыборкаКонтрагент, ВыборкаФизЛицаОрг);

						Сч = 1;
						КоличИтого = 0;
						СуммаИтого = 0;
						СуммаНДСИтого = 0;
						Всего = 0;
						Напечатали = Истина;

					КонецЕсли;

				КонецЦикла;

				Всего = ?(ВыборкаРегистратор.СуммаВключаетНДС, СуммаИтого, СуммаИтого + СуммаНДСИтого);

			КонецЦикла;

			Если Не Напечатали Тогда
				ПечатьЭСМ7ЗаПериодЗаполнитьПодвал(Обл, КоличИтого, СуммаИтого, СуммаНДСИтого, Всего, МассивВодителей);

				Водители = "";

				ТабДокумент.Вывести(Обл);
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			КонецЕсли;

			Водители = "";
			МассивВодителей.Очистить();

		КонецЦикла;

	КонецЦикла;

	УстановитьНомераОбъектов(СоответствиеНомеров, мПериодНумерации);
	ЗафиксироватьТранзакцию();

	Возврат ТабДокумент;

КонецФункции


Процедура ПечатьЭСМ7ЗаПериодЗаполнитьШапку(Обл, ДатаНач, ДатаКон, ДатаВыписки, СоответствиеНомеров, ВыборкаКонтрагент, ВыборкаФизЛица)
	Обл.Параметры.ДатаВыезда = Формат(ДатаНач, "ДФ=дд.ММ.гг");
	Обл.Параметры.ДатаВозвращения = Формат(ДатаКон, "ДФ=дд.ММ.гг");
	Обл.Параметры.ДатаСостДень = Формат(ДатаВыписки, "ДФ=дд");
	Обл.Параметры.ДатаСостМесяц = Формат(ДатаВыписки, "ДФ=ММ");
	Обл.Параметры.ДатаСостГод = Формат(ДатаВыписки, "ДФ=гг");

	мПрефикс = "";
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксУзла(мПрефикс);
	мПрефикс = мПрефикс + ВыборкаКонтрагент.Организация.Префикс;

	мНомерСправки = СоответствиеНомеров[ВыборкаКонтрагент.Организация] + 1;
	мФормат = 11 - СтрДлина(мПрефикс);
	Обл.Параметры.НомерСправки = мПрефикс + Формат(мНомерСправки, "ЧЦ=" + мФормат + "; ЧРГ=0; ЧВН=; ЧГ=0");
	СоответствиеНомеров[ВыборкаКонтрагент.Организация] = СоответствиеНомеров[ВыборкаКонтрагент.Организация] + 1;

	ФорматДаты = "ДЛФ='Д'";
	Обл.Параметры.ДатаВыписки = Формат(ДатаВыписки, ФорматДаты);
	Обл.Параметры.Организация = ВыборкаКонтрагент.Организация;
	Обл.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаКонтрагент.Организация, ДатаВыписки), "ПолноеНаименование,ЮридическийАдрес,Телефоны");

	Обл.Параметры.МодельТСПредставление = уатОбщегоНазначения.уатПредставлениеМоделиТС(ВыборкаКонтрагент.ТС);
	Обл.Параметры.МодельТС = ВыборкаКонтрагент.ТС.Модель;
	Обл.Параметры.ТранспортноеСредствоГосНомер = ВыборкаКонтрагент.ТС.ГосударственныйНомер;
	Обл.Параметры.ТранспортноеСредство = ВыборкаКонтрагент.ТС;
	Обл.Параметры.КодПоОКПО = ВыборкаКонтрагент.Организация.КодПоОКПО;

	Обл.Параметры.Заказчик = ВыборкаКонтрагент.Контрагент;
	мЗаказчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ВыборкаКонтрагент.Контрагент, ДатаВыписки), "ПолноеНаименование,ЮридическийАдрес,Телефоны");

	Обл.Параметры.ЗаказчикПредставление = мЗаказчик;
	Если СтрДлина(мЗаказчик) > 65 Тогда
		Обл.Области.ОбластьЗаказчикПредставление.Шрифт = Новый Шрифт(Обл.Области.ОбластьЗаказчикПредставление.Шрифт, Неопределено, 7);
	КонецЕсли;
	Обл.Параметры.ЗаказчикКодПоОКПО = ВыборкаКонтрагент.Контрагент.КодПоОКПО;

	ВыборкаФизЛица.сбросить();
	Если ВыборкаФизЛица.Следующий() Тогда
		ДанныеФизЛица = уатОбщегоНазначенияТиповые.ДанныеФизЛица(ВыборкаКонтрагент.Организация, ВыборкаФизЛица.ФизическоеЛицо, ДатаВыписки);
		Руководитель = ДанныеФизЛица.Представление;
		Должность = ВыборкаФизЛица.Должность;

		Обл.Параметры.ФИОРуководителя = Руководитель;
		Обл.Параметры.Должность = Должность;
	Иначе
		Обл.Параметры.ФИОРуководителя = ВыборкаКонтрагент.Организация;
	КонецЕсли;



	мЗапросКЛ = Новый Запрос;
	мЗапросКЛ.Текст = "ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
	|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_иректор""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтрагентов.Ссылка,
	|	2
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец = &Владелец
	|	И КонтактныеЛицаКонтрагентов.Должность ПОДОБНО ""_л% бухгалтер""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.ОсновноеКонтактноеЛицо,
	|	3
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Владелец
	|	И НЕ Контрагенты.ОсновноеКонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаКонтрагентов.Пустаяссылка)
	|	И НЕ Контрагенты.ОсновноеКонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.Пустаяссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	мЗапросКЛ.УстановитьПараметр("Владелец", ВыборкаКонтрагент.Контрагент);
	выборкаКЛ = мЗапросКЛ.Выполнить().Выбрать();

	Если выборкаКЛ.Следующий() Тогда
		Обл.Параметры.ДолжностьЗаказчика = выборкаКЛ.Ссылка.Должность;
		Обл.Параметры.ФИОЗаказчика = выборкаКЛ.Ссылка.Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ПечатьЭСМ7ЗаПериодЗаполнитьПодвал(Обл, КоличИтого, СуммаИтого, СуммаНДСИтого, Всего, МассивВодителей)
	Обл.Параметры.КоличествоИтого = КоличИтого;
	Обл.Параметры.СуммаИтого = СуммаИтого;
	Обл.Параметры.СуммаНДСИтого = СуммаНДСИтого;
	Обл.Параметры.Всего = Всего;

	ОтработаноПрописью = "";
	Если ЗначениеЗаполнено(Цел(КоличИтого)) Тогда
		ОтработаноПрописью = СтрЗаменить(ЧислоПрописью(Цел(КоличИтого), "L=ru_RU", "час, часа, часов, м"), " 00", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(КоличИтого - Цел(КоличИтого)) Тогда
		ОтработаноПрописью = ОтработаноПрописью + СтрЗаменить(ЧислоПрописью((КоличИтого - Цел(КоличИтого)) * 100, "L=ru_RU; FN=Ложь", "минута, минуты, минут, ж"), " 00", "");
	КонецЕсли;
	Обл.Параметры.ОтработаноМашиноЧасов = ОтработаноПрописью;
	Водители = "";
	Для каждого ЭлементМассива Из МассивВодителей Цикл
		Водители = Водители + ", " + ЭлементМассива;
	КонецЦикла;

	МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Сред(Водители, 3, СтрДлина(Водители)), 100);
	Если Прав(МассивСтрок[0], 1) = "," Тогда
		Обл.Параметры.Водители = Лев(МассивСтрок[0], СтрДлина(МассивСтрок[0]) - 1);
	Иначе
		Обл.Параметры.Водители = МассивСтрок[0];
	КонецЕсли;
КонецПроцедуры


Функция ПечатьЭСМ7ЗаПериодПолучитьВыборкуОтветственныхЛиц(ВыборкаКонтрагент, ДатаВыписки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений." + ?(Метаданные.РегистрыСведений.Найти("ОтветственныеЛицаОрганизаций") <> Неопределено, "ОтветственныеЛицаОрганизаций", "ОтветственныеЛицаОрганизации") + ".СрезПоследних(
	|		&Дата,
	|		СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|		    И ОтветственноеЛицо = &Директор) КАК ОтветственныеЛицаОрганизацииСрезПоследних";

	Запрос.УстановитьПараметр("Дата", ДатаВыписки);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ВыборкаКонтрагент.Организация);
	Перечисление_ОтветственныеЛицаОрганизации = ?(Метаданные.Перечисления.Найти("ОтветственныеЛицаОрганизаций") <> Неопределено, Перечисления.ОтветственныеЛицаОрганизаций, Перечисления.ОтветственныеЛицаОрганизации);
	Запрос.УстановитьПараметр("Директор", Перечисление_ОтветственныеЛицаОрганизации.Руководитель);
	Результат = Запрос.Выполнить();
	ВыборкаФизЛица = Результат.Выбрать();

	Возврат ВыборкаФизЛица;

КонецФункции




Функция ПолучитьНачальныеНомераДляПечатнойФормы(мГодНумерации)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(уатНумерацияОбъектов.ПоследнийНомер, 0) КАК ПоследнийНомер
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатНумерацияОбъектов.Год КАК Год,
	|			уатНумерацияОбъектов.Организация КАК Организация,
	|			уатНумерацияОбъектов.ПоследнийНомер КАК ПоследнийНомер
	|		ИЗ
	|			РегистрСведений.уатНумерацияОбъектов КАК уатНумерацияОбъектов
	|		ГДЕ
	|			уатНумерацияОбъектов.Год = &Год) КАК уатНумерацияОбъектов
	|		ПО (уатНумерацияОбъектов.Организация = Организации.Ссылка)";

	мЗапрос.УстановитьПараметр("Год", НачалоГода(мГодНумерации));
	Выборка = мЗапрос.Выполнить().Выбрать();
	СоответствиеНомеров = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеНомеров.Вставить(Выборка.Организация, Выборка.ПоследнийНомер);
	КонецЦикла;

	Возврат СоответствиеНомеров;

КонецФункции


Процедура УстановитьНомераОбъектов(СоответствиеНомеров, мГодНумерации)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(уатНумерацияОбъектов.ПоследнийНомер, 0) КАК ПоследнийНомер
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатНумерацияОбъектов.Год КАК Год,
	|			уатНумерацияОбъектов.Организация КАК Организация,
	|			уатНумерацияОбъектов.ПоследнийНомер КАК ПоследнийНомер
	|		ИЗ
	|			РегистрСведений.уатНумерацияОбъектов КАК уатНумерацияОбъектов
	|		ГДЕ
	|			уатНумерацияОбъектов.Год = &Год) КАК уатНумерацияОбъектов
	|		ПО (уатНумерацияОбъектов.Организация = Организации.Ссылка)";

	мЗапрос.УстановитьПараметр("Год", НачалоГода(мГодНумерации));
	Выборка = мЗапрос.Выполнить().Выбрать();
	мНаборЗаписей = РегистрыСведений.уатНумерацияОбъектов.СоздатьНаборЗаписей();
	мНаборЗаписей.Отбор.Год.Установить(НачалоГода(мГодНумерации));

	Пока Выборка.Следующий() Цикл
		Если Выборка.ПоследнийНомер = 0 И Выборка.ПоследнийНомер = СоответствиеНомеров[Выборка.Организация] Тогда
			Продолжить;
		КонецЕсли;

		НовЗапись = мНаборЗаписей.Добавить();
		НовЗапись.Организация = Выборка.Организация;
		НовЗапись.Год = НачалоГода(мГодНумерации);
		НовЗапись.ПоследнийНомер = СоответствиеНомеров[Выборка.Организация];
	КонецЦикла;
	Попытка
		мНаборЗаписей.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры











Функция уатПечать_уатАвтокран(СсылкаНаОбъект, ИмяМакета, ФлагПечати = "") Экспорт
	ТабДокумент = Новый ТабличныйДокумент;

	ОбработкаЗащиты = "";

	Если Не уатЗащищенныеФункции.уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат ТабДокумент;
	КонецЕсли;


	Макет = СсылкаНаОбъект.ПолучитьМакет(ИмяМакета + "_стм");
	мМаксСтрок = 7;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_Автокран";


	рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(СсылкаНаОбъект.ТранспортноеСредство);

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;

	Обл = Макет.ПолучитьОбласть("Лицевая");

	мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(СсылкаНаОбъект);
	Обл.Параметры.Номер = мНомерПЛ;
	ФорматДаты = "ДЛФ='Д'";
	Обл.Параметры.ДатаВыписки = Формат(СсылкаНаОбъект.ДатаВыписки, ФорматДаты);
	Обл.Параметры.Организация = СсылкаНаОбъект.Организация;
	Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(СсылкаНаОбъект.ТранспортноеСредство);
	Обл.Параметры.ТранспортноеСредствоГосНомер = рсТранспортноеСредство.ГосударственныйНомер;
	Обл.Параметры.ТранспортноеСредствоГарНомер = рсТранспортноеСредство.ГаражныйНомер;

	Водители = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель1.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Водитель2) Тогда
		Обл.Параметры.Водители = СокрЛП(Водители) + ", " + уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель2.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
	Иначе
		Обл.Параметры.Водители = Водители;
	КонецЕсли;
	мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Водитель1, СсылкаНаОбъект.ДатаВыписки, , СсылкаНаОбъект.Организация);
	Если мРеквизитыВодителя1 <> Неопределено Тогда
		Обл.Параметры.ВодительКод = мРеквизитыВодителя1.ТабельныйНомер;
	КонецЕсли;

	Обл.Параметры.ВремяВыезда = Формат(СсылкаНаОбъект.ДатаВыезда, "ДФ=ЧЧ:мм");
	Обл.Параметры.СпидометрВыезда = СсылкаНаОбъект.СпидометрВыезда;

	Для каждого ТекСтрока Из СсылкаНаОбъект.РасходГСМ Цикл
		рсТС = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТекСтрока.ТС);
		Если ТекСтрока.ТС = СсылкаНаОбъект.ТранспортноеСредство Тогда
			Если ТекСтрока.ГСМ = рсТС.Модель.ОсновноеТопливо Тогда
				Обл.Параметры.ГСМ1 = ТекСтрока.ГСМ;
				Обл.Параметры.ОстатокПриВыезде1 = ТекСтрока.ОстатокПриВыезде;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Обл.Параметры.ВыдалДиспетчер = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.ВыдалДиспетчер);



	Обл.Параметры.ВодительПринял = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.Водитель1);

	Для каждого ТекСтрока Из СсылкаНаОбъект.Задание Цикл
		ТекИндекс = СсылкаНаОбъект.Задание.Индекс(ТекСтрока) + 1;

		Если ТекИндекс > мМаксСтрок Тогда
			Прервать;
		КонецЕсли;

		стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
		Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.Наименование;

		стрОбласть = "Откуда" + Строка(ТекИндекс);
		Обл.Область(стрОбласть).Текст = ТекСтрока.АдресПрибытия;
		стрОбласть = "Куда" + Строка(ТекИндекс);
		Обл.Область(стрОбласть).Текст = ТекСтрока.АдресУбытия;

	КонецЦикла;

	ТабДокумент.Вывести(Обл);

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	Обл = Макет.ПолучитьОбласть("Оборотная");

	ТабДокумент.Вывести(Обл);


	Возврат ТабДокумент;

КонецФункции







Функция уатПечать_КС2(СсылкаНаОбъект) Экспорт
	ТабДокумент = Новый ТабличныйДокумент;

	ОбработкаЗащиты = "";

	Если Не уатЗащищенныеФункции.уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат ТабДокумент;
	КонецЕсли;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КС2";
	Макет = ПолучитьОбщийМакет("уатКС2_стм");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Контрагент, СсылкаНаОбъект.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.ОбъектСтроительства = СсылкаНаОбъект.ОбъектСтроительства;
	ОбластьМакета.Параметры.КодПоОКПО = СсылкаНаОбъект.Организация.КодПоОКПО;
	ОбластьМакета.Параметры.КодПоОКПОЗаказчика = СсылкаНаОбъект.Контрагент.КодПоОКПО;

	ОбластьМакета.Параметры.Заказчик = СсылкаНаОбъект.Контрагент;
	ОбластьМакета.Параметры.Подрядчик = СсылкаНаОбъект.Организация;
	ОбластьМакета.Параметры.Объект = СсылкаНаОбъект.ОбъектСтроительства;

	ОбластьМакета.Параметры.Дата = СсылкаНаОбъект.Дата;
	ОбластьМакета.Параметры.Номер = СсылкаНаОбъект.Номер;
	ОбластьМакета.Параметры.ДатаНач = ?(СсылкаНаОбъект.ДатаНач > '00010101000000', Формат(СсылкаНаОбъект.ДатаНач, "ДФ=""дд.ММ.гг """) + "г.", "");
	ОбластьМакета.Параметры.ДатаКон = ?(СсылкаНаОбъект.ДатаКон > '00010101000000', Формат(СсылкаНаОбъект.ДатаКон, "ДФ=""дд.ММ.гг """) + "г.", "");

	Попытка
		Если СсылкаНаОбъект.ДоговорКонтрагента.Дата > '00010101000000' Тогда
			ОбластьМакета.Параметры.ДоговорДата = "от " + Формат(СсылкаНаОбъект.ДоговорКонтрагента.Дата, "ДФ=""дд.ММ.гггг """) + "г.";
		Иначе
			ОбластьМакета.Параметры.ДоговорДата = "";
		КонецЕсли;
		ОбластьМакета.Параметры.ДоговорНомер = СсылкаНаОбъект.ДоговорКонтрагента.Номер;
	Исключение
	КонецПопытки;

	Сумма = СсылкаНаОбъект.Услуги.Итог("Сумма");
	СуммаНДС = СсылкаНаОбъект.Услуги.Итог("СуммаНДС");

	СуммаСНДС = ?(СсылкаНаОбъект.СуммаВключаетНДС, Сумма, Сумма + СуммаНДС);

	ОбластьМакета.Параметры.Сумма = уатОбщегоНазначенияТиповые.уатФорматСумм(СсылкаНаОбъект.СметнаяСтоимость);

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	НомерСтроки = 0;
	Для каждого СтрокаТабличнойЧасти Из СсылкаНаОбъект.Услуги Цикл
		НомерСтроки = НомерСтроки + 1;

		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Сумма = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("НаклРасх");
	ОбластьМакета.Параметры.НакладныеРасходы = уатОбщегоНазначенияТиповые.уатФорматСумм(СсылкаНаОбъект.НакладныеРасходы);
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПланНак");
	ОбластьМакета.Параметры.ПлановыеНакопления = уатОбщегоНазначенияТиповые.уатФорматСумм(СсылкаНаОбъект.ПлановыеНакопления);
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("НДС");
	ОбластьМакета.Параметры.СуммаНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.Сумма = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаСНДС + СсылкаНаОбъект.НакладныеРасходы + СсылкаНаОбъект.ПлановыеНакопления);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизации(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата);

	ОбластьМакета.Параметры.ФИОРуководителя = Руководители.Руководитель;
	ОбластьМакета.Параметры.Должность = Руководители.РуководительДолжность;


	Если ЗначениеЗаполнено(СсылкаНаОбъект.Контрагент.ОсновноеКонтактноеЛицо) Тогда
		ОбластьМакета.Параметры.ФИОЗаказчика = СсылкаНаОбъект.Контрагент.ОсновноеКонтактноеЛицо.Наименование;
		ОбластьМакета.Параметры.ДолжностьЗаказчика = СсылкаНаОбъект.Контрагент.ОсновноеКонтактноеЛицо.Должность;
	Иначе
		ОбластьМакета.Параметры.ФИОЗаказчика = СсылкаНаОбъект.Контрагент.Наименование;
	КонецЕсли;

	СуммаКПрописи = СуммаСНДС + СсылкаНаОбъект.НакладныеРасходы + СсылкаНаОбъект.ПлановыеНакопления;
	ОбластьМакета.Параметры.СуммаПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить());
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции




Процедура уатСписокПутЛистовЭСМ() Экспорт
	мСписокВидПЛ = Новый СписокЗначений;
	мСписокВидПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ1);
	мСписокВидПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ2);
	мСписокВидПЛ.Добавить(Перечисления.уатВидыПЛ._ЭСМ3);

	ФормаСпискаПЛ = Документы.уатПутевойЛист.ПолучитьФормуСписка("ФормаСписка", , "стм");
	ФормаСпискаПЛ.ДокументСписок.Отбор.ВидПЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаСпискаПЛ.ДокументСписок.Отбор.ВидПЛ.Значение = мСписокВидПЛ;
	ФормаСпискаПЛ.ДокументСписок.Отбор.ВидПЛ.Использование = Истина;
	ФормаСпискаПЛ.Заголовок = "Путевые листы строительной техники";
	ФормаСпискаПЛ.ЭлементыФормы.ОтборВидПЛ.Доступность = Ложь;
	ФормаСпискаПЛ.Открыть();

КонецПроцедуры












Процедура уатДобавитьВидыПЛПП(мСписокВидовПЛ) Экспорт
	мСписокВидовПЛ.Добавить(Перечисления.уатВидыПЛ._6, "6 (автобус общего пользования)");

КонецПроцедуры








Функция уатПечать_6(СсылкаНаОбъект, ИмяМакета, ФлагПечати = "") Экспорт
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;
	ТабДокумент = Новый ТабличныйДокумент;

	ОбработкаЗащиты = "";

	Если Не уатПроверкаЗащиты(ОбработкаЗащиты) Тогда
		Возврат ТабДокумент;
	КонецЕсли;

	Макет = СсылкаНаОбъект.ПолучитьМакет(ИмяМакета);

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_6";

	рсТранспортноеСредство = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(СсылкаНаОбъект.ТранспортноеСредство);

	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСнизу = 0;
	ТабДокумент.ПолеСправа = 0;


	Если ФлагПечати <> 2 Тогда

		мМаксСтрок = 2;

		Обл = Макет.ПолучитьОбласть("Лицевая");

		мНомерПЛ = уатОбщегоНазначенияТиповые.уатПолучитьНомерНаПечать(СсылкаНаОбъект);
		Обл.Параметры.Номер = мНомерПЛ;
		ФорматДаты = "ДЛФ='Д'";
		Обл.Параметры.ДатаВыписки = Формат(СсылкаНаОбъект.ДатаВыписки, ФорматДаты);
		Обл.Параметры.Организация = СсылкаНаОбъект.Организация.НаименованиеПолное;
		Обл.Параметры.МодельТС = уатОбщегоНазначения.уатПредставлениеМоделиТС(СсылкаНаОбъект.ТранспортноеСредство);
		Обл.Параметры.ТранспортноеСредствоГосНомер = рсТранспортноеСредство.ГосударственныйНомер;
		Обл.Параметры.ТранспортноеСредствоГарНомер = рсТранспортноеСредство.ГаражныйНомер;

		Обл.Параметры.КодПоОКПО = СсылкаНаОбъект.Организация.КодПоОКПО;
		Обл.Параметры.ЛицензионнаяКарточка = рсТранспортноеСредство.ЛицензионнаяКарточка;
		Обл.Параметры.НомерЛицензионнойКарточки = рсТранспортноеСредство.НомерЛицензионнойКарточки;
		Обл.Параметры.СерияЛицензионнойКарточки = рсТранспортноеСредство.СерияЛицензионнойКарточки;
		Обл.Параметры.ВремяВыезда = Формат(СсылкаНаОбъект.ДатаВыезда, "ДФ=ЧЧ:мм");
		Обл.Параметры.ВремяВозвращения = Формат(СсылкаНаОбъект.ДатаВозвращения, "ДФ=ЧЧ:мм");

		СсылкаНаОбъект.РасчетВремени();
		Обл.Параметры.КоличествоЧасовРаботы = Формат(СсылкаНаОбъект.мВремяВНаряде / 3600, "ЧДЦ = 1");
		Обл.Параметры.КоличествоЧасовПробег = Формат(СсылкаНаОбъект.мВремяВРаботе / 3600, "ЧДЦ = 1");
		Обл.Параметры.КоличествоЧасовНочное = Формат(СсылкаНаОбъект.мВремяНочь / 3600, "ЧДЦ = 1");
		Обл.Параметры.НулевойПробег = СсылкаНаОбъект.НулевойПробегВыезда;

		Обл.Параметры.Водитель1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель1.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.Водитель2 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Водитель2.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.Сотрудник1 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Сотрудник1.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.Сотрудник2 = уатОбщегоНазначения.уатФИОФизЛицаПолноеСтрокой(СсылкаНаОбъект.Сотрудник2.ФизЛицо, СсылкаНаОбъект.ДатаВыписки);
		мРеквизитыВодителя1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Водитель1, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.ВодительКод1 = мРеквизитыВодителя1.ТабельныйНомер;
		уатОбщегоНазначения.уатУдостоверениеВодителя(СсылкаНаОбъект.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);
		Обл.Параметры.НомерУдостоверенияВодителя1 = мВодительскоеУдНомер;
		мРеквизитыВодителя2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Водитель2, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.ВодительКод2 = мРеквизитыВодителя2.ТабельныйНомер;
		уатОбщегоНазначения.уатУдостоверениеВодителя(СсылкаНаОбъект.Водитель2, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);
		Обл.Параметры.НомерУдостоверенияВодителя2 = мВодительскоеУдНомер;
		мРеквизитыСотрудника1 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Сотрудник1, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.СотрудникКод1 = мРеквизитыСотрудника1.ТабельныйНомер;
		мРеквизитыСотрудника2 = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СсылкаНаОбъект.Сотрудник2, СсылкаНаОбъект.ДатаВыписки);
		Обл.Параметры.СотрудникКод2 = мРеквизитыСотрудника2.ТабельныйНомер;

		Обл.Параметры.ВыпустилМеханик = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.ВыпустилМеханик);
		Обл.Параметры.ПринялМеханик = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.ПринялМеханик);
		Обл.Параметры.ВодительСдал = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.Водитель1);
		Обл.Параметры.ВодительПринял = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.Водитель1);
		Обл.Параметры.ВыдалДиспетчер = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(СсылкаНаОбъект.ВыдалДиспетчер);

		Обл.Параметры.СпидометрВыезда = СсылкаНаОбъект.СпидометрВыезда;

		Для каждого ТекСтрока Из СсылкаНаОбъект.РасходГСМ Цикл
			рсТС = уатОбщегоНазначения.уатПрочитатьРеквизитыТС(ТекСтрока.ТС);
			Если ТекСтрока.ТС = СсылкаНаОбъект.ТранспортноеСредство Тогда
				Обл.Параметры.ОстатокПриВыезде = ТекСтрока.ОстатокПриВыезде;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если СсылкаНаОбъект.Задание.Количество() > 0 Тогда
			Обл.Параметры.НаименованиеМаршрута = СсылкаНаОбъект.Задание[0].Маршрут.Наименование;
			Обл.Параметры.НомерМаршрута = СсылкаНаОбъект.Задание[0].Маршрут.НомерМаршрута;
		КонецЕсли;

		Для каждого ТекСтрока Из СсылкаНаОбъект.Задание Цикл
			ТекИндекс = СсылкаНаОбъект.Задание.Индекс(ТекСтрока) + 1;

			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;

			стрОбласть = "Заказчик" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.Наименование;

		КонецЦикла;

		ТабДокумент.Вывести(Обл);

	КонецЕсли;

	Если ФлагПечати = 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;


	Если ФлагПечати <> 1 Тогда

		мМаксСтрок = 40;

		Обл = Макет.ПолучитьОбласть("Оборотная");

		мВыводитьПунктОтправленияВПечатнойФорме6_пп = Ложь;//уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СсылкаНаОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВыводитьПунктОтправленияВПечатнойФорме6);

		Для каждого ТекСтрока Из СсылкаНаОбъект.Задание Цикл
			ТекИндекс = СсылкаНаОбъект.Задание.Индекс(ТекСтрока) + 1;

			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;

			стрОбласть = "М" + Строка(ТекИндекс);
			Если мВыводитьПунктОтправленияВПечатнойФорме6_пп Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.АдресПрибытия;
			Иначе
				Обл.Область(стрОбласть).Текст = ТекСтрока.Маршрут.Наименование;
			КонецЕсли;

			стрОбласть = "ВОП" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, "ДФ = ЧЧ:мм");

			стрОбласть = "ВПП" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, "ДФ = ЧЧ:мм");

		КонецЦикла;

		ТабДокумент.Вывести(Обл);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции























Функция уатПолучитьБилетныеЛистыДляПЛ(ПутевойЛист) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Выручка.Ссылка.Дата КАК Дата,
	|	Выручка.Ссылка.Номер,
	|	Выручка.ПутевойЛист,
	|	Выручка.Ссылка,
	|	Выручка.Ссылка.ТС,
	|	Выручка.Ссылка.Склад,
	|	Выручка.Ссылка.Сотрудник,
	|	Выручка.Маршрут,
	|	Выручка.Билет,
	|	Выручка.НомерНачальный,
	|	Выручка.НомерКонечный,
	|	Выручка.НомерСтроки,
	|	Выручка.Количество,
	|	Выручка.Сумма
	|ИЗ
	|	Документ.уатБилетныйЛист.Билеты КАК Выручка
	|ГДЕ
	|	Выручка.ПутевойЛист = &ПутевойЛист
	|	И Выручка.ПутевойЛист <> &ПустойПутевойЛист
	|	И Выручка.Ссылка.ПометкаУдаления = &ПометкаУдаления";


	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ПустойПутевойЛист", Документы.уатПутевойЛист.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции























Функция уатПолучитьПосадочныеВедомостиДляПЛ(ПутевойЛист) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Выручка.Ссылка.Дата КАК Дата,
	|	Выручка.Ссылка.Номер,
	|	Выручка.ПутевойЛист,
	|	Выручка.Ссылка,
	|	Выручка.Ссылка.ТС,
	|	Выручка.Ссылка.Автостанция,
	|	Выручка.Ссылка.Сотрудник,
	|	Выручка.Маршрут,
	|	Выручка.Билет,
	|	Выручка.НомерСтроки,
	|	Выручка.Количество,
	|	Выручка.Сумма
	|ИЗ
	|	Документ.уатПосадочнаяВедомость.Билеты КАК Выручка
	|ГДЕ
	|	Выручка.ПутевойЛист = &ПутевойЛист
	|	И Выручка.ПутевойЛист <> &ПустойПутевойЛист
	|	И Выручка.Ссылка.ПометкаУдаления = &ПометкаУдаления";


	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ПустойПутевойЛист", Документы.уатПосадочнаяВедомость.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции























Функция уатПолучитьВыручкуДляПЛ(ПутевойЛист) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Выручка.Дата КАК Дата,
	|	Выручка.Номер,
	|	Выручка.ПутевойЛист,
	|	Выручка.Ссылка,
	|	Выручка.Сотрудник,
	|	Выручка.Маршрут,
	|	Выручка.Количество,
	|	Выручка.Сумма
	|ИЗ
	|	Документ.уатВыручкаВодителей КАК Выручка
	|ГДЕ
	|	Выручка.ПутевойЛист = &ПутевойЛист
	|	И Выручка.ПутевойЛист <> &ПустойПутевойЛист
	|	И Выручка.ПометкаУдаления = &ПометкаУдаления";


	Запрос.УстановитьПараметр("ПутевойЛист", ПутевойЛист);
	Запрос.УстановитьПараметр("ПустойПутевойЛист", Документы.уатПутевойЛист.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции




Процедура уатСписокПутЛистов6() Экспорт
	мСписокВидПЛ = Новый СписокЗначений;
	мСписокВидПЛ.Добавить(Перечисления.уатВидыПЛ._6);
	мСписокВидПЛ.Добавить(Перечисления.уатВидыПЛ._6С);

	ФормаСпискаПЛ = Документы.уатПутевойЛист.ПолучитьФормуСписка("ФормаСписка", , 1);
	ФормаСпискаПЛ.ДокументСписок.Отбор.ВидПЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаСпискаПЛ.ДокументСписок.Отбор.ВидПЛ.Значение = мСписокВидПЛ;
	ФормаСпискаПЛ.ДокументСписок.Отбор.ВидПЛ.Использование = Истина;
	ФормаСпискаПЛ.Заголовок = "Путевые листы автобусов";
	ФормаСпискаПЛ.Открыть();

КонецПроцедуры















Функция ЗагрузитьМестоположениеТСDynafleet(Логин, Пароль, Период, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	ОтветСервера = "";


	Попытка
		xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
	Исключение
		ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
	КонецПопытки;

	АдресСервисаDynafleet = Константы.уатАдресСервисаDynafleet.Получить();

	Порт = АдресСервисаDynafleet + "/ports/Login";

	xmlhttp.open("POST", Порт, 0);
	xmlhttp.setRequestHeader("Content-Type", "text/xml");

	СодержимоеЗапроса = "
	|	<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|      <typ:login>
	|         <Api_LoginLoginTO_1>
	|            <gmtOffset>
	|               <value>2</value>
	|            </gmtOffset>
	|            <password>" + Пароль + "</password>
	|            <username>" + Логин + "</username>
	|         </Api_LoginLoginTO_1>
	|      </typ:login>
	|   </soapenv:Body>
	|</soapenv:Envelope>";

	Попытка
		xmlhttp.send(СодержимоеЗапроса);
	Исключение
		ОтветСервера = ОписаниеОшибки();
	КонецПопытки;

	Если xmlhttp.status = 200 Тогда

		НоваяСтрока = Новый ЧтениеXML;
		НоваяСтрока.УстановитьСтроку(xmlhttp.responseText);
		Пока НоваяСтрока.Прочитать() Цикл
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "id" Тогда
				НоваяСтрока.Прочитать();
				ИдентификаторСессии = НоваяСтрока.Значение;
			КонецЕсли;
		КонецЦикла;


		Попытка
			xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
		Исключение
			ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
		КонецПопытки;

		Порт = АдресСервисаDynafleet + "/ports/Notification";

		xmlhttp.open("POST", Порт, 0);
		xmlhttp.setRequestHeader("Content-Type", "text/xml");

		СодержимоеЗапроса = "
		|		<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
		|   <soapenv:Header/>
		|  <soapenv:Body>
		|      <typ:checkNotificationFlags>
		|    <Api_SessionId_1>
		|        <id>" + ИдентификаторСессии + "</id>
		|      </Api_SessionId_1>
		|    </typ:checkNotificationFlags>
		|  </soapenv:Body>
		|</soapenv:Envelope>";

		Попытка
			xmlhttp.send(СодержимоеЗапроса);
		Исключение
			ОтветСервера = ОписаниеОшибки();
		КонецПопытки;

		Если xmlhttp.status = 200 Тогда

			НоваяСтрока = Новый ЧтениеXML;
			НоваяСтрока.УстановитьСтроку(xmlhttp.responseText);

			Пока НоваяСтрока.Прочитать() Цикл
				Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "newTrackingData" Тогда
					НоваяСтрока.Прочитать();
					ЕстьНовыеДанные = НоваяСтрока.Значение;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

		Если ЕстьНовыеДанные = "true" Тогда


			Попытка
				xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
			Исключение
				ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
			КонецПопытки;

			Порт = АдресСервисаDynafleet + "/ports/Tracking";

			xmlhttp.open("POST", Порт, 0);
			xmlhttp.setRequestHeader("Content-Type", "text/xml");

			СодержимоеЗапроса = "
			|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
			|<soapenv:Header/>
			|<soapenv:Body>
			|<typ:getNewTrackingDataV2>
			|<Api_SessionId_1>
			|<id>" + ИдентификаторСессии + "</id>
			|</Api_SessionId_1>
			|</typ:getNewTrackingDataV2>
			|</soapenv:Body>
			|</soapenv:Envelope>";

			Попытка
				xmlhttp.send(СодержимоеЗапроса);
			Исключение
				ОтветСервера = ОписаниеОшибки();
			КонецПопытки;

			Если xmlhttp.status = 200 Тогда

				ТЗ = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей().Выгрузить();
				ТЗ.Очистить();

				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Строка"));
				ПараметрыСтроки = Новый КвалификаторыСтроки(100);

				ДопустимыйТип = Новый ОписаниеТипов(МассивТипов, Неопределено, ПараметрыСтроки);

				ТЗ.Колонки.Добавить("ТСид", ДопустимыйТип);

				НоваяСтрока = Новый ЧтениеXML;
				НоваяСтрока.УстановитьСтроку(xmlhttp.responseText);

				Пока НоваяСтрока.Прочитать() Цикл
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "accumulatedFuelConsumption" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение = ТЗ.Добавить();
						СтрокаМестоположение.ЗначениеДатчика3 = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "currentFuelLevel" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.ЗначениеДатчика2 = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "latitude" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.Лат = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "longitude" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.Лон = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "momentaneousVehicleSpeed" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.Скорость = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "odometer" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.ЗначениеДатчика1 = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "vehicleId" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						СтрокаМестоположение.ТСид = НоваяСтрока.Значение;
					КонецЕсли;
					Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "timestamp" Тогда
						НоваяСтрока.Прочитать();
						НоваяСтрока.Прочитать();
						сДата = НоваяСтрока.Значение;
						СтрокаМестоположение.Период = ИзСтрокиW3CВДату(сДата);
					КонецЕсли;

				КонецЦикла;

				Если ТЗ.Количество() Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ТЗ.ТСид КАК ТСид,
					|	ТЗ.Период,
					|	ТЗ.Лат,
					|	ТЗ.Лон,
					|	ТЗ.Скорость,
					|	ТЗ.ЗначениеДатчика1,
					|	ТЗ.ЗначениеДатчика2,
					|	ТЗ.ЗначениеДатчика3
					|ПОМЕСТИТЬ ТЗн
					|ИЗ
					|	&ТЗ КАК ТЗ
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	уатТС.Ссылка
					|ИЗ
					|	ТЗн КАК ТЗн
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
					|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
					|ГДЕ
					|	уатТС.Ссылка ЕСТЬ NULL 
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТЗн.Период КАК Период,
					|	ТЗн.Лат,
					|	ТЗн.Лон,
					|	ТЗн.Скорость,
					|	ТЗн.ЗначениеДатчика1,
					|	ТЗн.ЗначениеДатчика2,
					|	ТЗн.ЗначениеДатчика3,
					|	уатТС.Ссылка КАК ТС
					|ИЗ
					|	ТЗн КАК ТЗн
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
					|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
					|
					|УПОРЯДОЧИТЬ ПО
					|	Период
					|ИТОГИ ПО
					|	ТС";

					Запрос.УстановитьПараметр("ТЗ", ТЗ);

					ВремТЗ = Запрос.ВыполнитьПакет()[1].Выгрузить();
					Если ВремТЗ.Количество() Тогда
						Режим = РежимДиалогаВопрос.ДаНет;
						Текст = "В ходе загрузки получены данные для ТС, идентификатор которых не совпадает ни с одним из имеющихся в справочнике ""ТС"".
						|Эта информация не будет загружена в систему.
						|Сохранить файл с данными во временный каталог для последующей загрузки?";
						Ответ = Вопрос(Текст, Режим, 0);
						Если Ответ = КодВозвратаДиалога.Да Тогда

							СтрокаДаты = Строка(ТекущаяДата());
							СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
							СтрокаДаты = СтрЗаменить(СтрокаДаты, ":", "");
							СтрокаДаты = СтрЗаменить(СтрокаДаты, ".", "");
							ВременныйКаталог = КаталогВременныхФайлов() + "DynafleetData" + СтрокаДаты + Строка(Новый УникальныйИдентификатор) + ".xml";

							XMLФайл = Новый ТекстовыйДокумент;
							XMLФайл.УстановитьТекст(xmlhttp.responseText);
							XMLФайл.Записать(ВременныйКаталог);

							Сообщить("Файл с данными сохранен в " + ВременныйКаталог);
						КонецЕсли;
					КонецЕсли;

					ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ВыборкаТС.Следующий() Цикл
						НаборЗаписей = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей();
						ПредДата = 0;
						Выборка = ВыборкаТС.Выбрать();
						Пока Выборка.Следующий() Цикл
							Если ПредДата = 0 Или Выборка.Период - (ПредДата + Период * 60) > 0 Тогда

								Запись = НаборЗаписей.Добавить();
								Запись.Период = Выборка.Период;
								Запись.ТС = Выборка.ТС;
								Запись.Лат = Выборка.Лат;
								Запись.Лон = Выборка.Лон;
								Запись.Скорость = Выборка.Скорость;
								Запись.ЗначениеДатчика1 = Выборка.ЗначениеДатчика1;
								Запись.ЗначениеДатчика2 = Выборка.ЗначениеДатчика2;
								Запись.ЗначениеДатчика3 = Выборка.ЗначениеДатчика3;

								ПредДата = Выборка.Период;
							Иначе
								Продолжить;
							КонецЕсли;

						КонецЦикла;

						Попытка
							НаборЗаписей.Записать(Ложь);
						Исключение

						КонецПопытки;

					КонецЦикла;
				Иначе

					ТекстОшибки = "Нет новых данных.";
					Возврат 1;
				КонецЕсли;

			КонецЕсли;
		Иначе

			ТекстОшибки = "С момента последнего вызова не появилось новых данных.";
			Возврат 1;
		КонецЕсли;


		Попытка
			xmlhttp = Новый COMОбъект("Microsoft.XMLHTTP");
		Исключение
			ОтветСервера = "Не удалось подключить COM-объект ""XMLHTTP"". Убедитесь что у вас установлена данная библиотека";
		КонецПопытки;

		Порт = АдресСервисаDynafleet + "/ports/Login";

		xmlhttp.open("POST", Порт, 0);
		xmlhttp.setRequestHeader("Content-Type", "text/xml");

		СодержимоеЗапроса = "
		|<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:typ=""http://wirelesscar.com/dynafleet/api/types"">
		|   <soapenv:Header/>
		|   <soapenv:Body>
		|      <typ:logout>
		|         <Api_SessionId_1>
		|            <id>" + ИдентификаторСессии + "</id>
		|         </Api_SessionId_1>
		|      </typ:logout>
		|   </soapenv:Body>
		|</soapenv:Envelope>";

		Попытка
			xmlhttp.send(СодержимоеЗапроса);
		Исключение
			ОтветСервера = ОписаниеОшибки();
		КонецПопытки;

		Если Не (xmlhttp.status = 200) Тогда
			ТекстОшибки = "На сервере произошла ошибка. Возможно передан неправильный идентификатор сессии";
			Возврат 1;
		КонецЕсли;
	Иначе

		ТекстОшибки = "На сервере произошла ошибка авторизации. Возможно неправильно введен логин и пароль";
		Возврат 1;
	КонецЕсли;

	Возврат 0;
КонецФункции






Функция ИзСтрокиW3CВДату(Дата)
	мГод = Лев(Дата, 4);
	мМесяц = Сред(Дата, 6, 2);
	мДень = Сред(Дата, 9, 2);
	мЧас = Сред(Дата, 12, 2);
	мМинута = Сред(Дата, 15, 2);
	мСекунда = Сред(Дата, 18, 2);

	мДата = Дата(мГод, мМесяц, мДень, мЧас, мМинута, мСекунда);

	Возврат мДата;

КонецФункции








Функция ЗагрузитьМестоположениеТСизФайла(Период, ПутьФайла, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	Перем ТЗ;
	ТЗ = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей().Выгрузить();
	ТЗ.Очистить();

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(100);

	ДопустимыйТип = Новый ОписаниеТипов(МассивТипов, Неопределено, ПараметрыСтроки);

	ТЗ.Колонки.Добавить("ТСид", ДопустимыйТип);

	Попытка
		НоваяСтрока = Новый ЧтениеXML;
		НоваяСтрока.ОткрытьФайл(ПутьФайла);

		Пока НоваяСтрока.Прочитать() Цикл
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "accumulatedFuelConsumption" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение = ТЗ.Добавить();
				СтрокаМестоположение.ЗначениеДатчика3 = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "currentFuelLevel" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.ЗначениеДатчика2 = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "latitude" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.Лат = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "longitude" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.Лон = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "momentaneousVehicleSpeed" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.Скорость = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "odometer" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.ЗначениеДатчика1 = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "vehicleId" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				СтрокаМестоположение.ТСид = НоваяСтрока.Значение;
			КонецЕсли;
			Если НоваяСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента И НоваяСтрока.Имя = "timestamp" Тогда
				НоваяСтрока.Прочитать();
				НоваяСтрока.Прочитать();
				сДата = НоваяСтрока.Значение;
				СтрокаМестоположение.Период = ИзСтрокиW3CВДату(сДата);
			КонецЕсли;

		КонецЦикла;

		Если ТЗ.Количество() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ТЗ.ТСид КАК ТСид,
			|	ТЗ.Период,
			|	ТЗ.Лат,
			|	ТЗ.Лон,
			|	ТЗ.Скорость,
			|	ТЗ.ЗначениеДатчика1,
			|	ТЗ.ЗначениеДатчика2,
			|	ТЗ.ЗначениеДатчика3
			|ПОМЕСТИТЬ ТЗн
			|ИЗ
			|	&ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	уатТС.Ссылка
			|ИЗ
			|	ТЗн КАК ТЗн
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
			|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
			|ГДЕ
			|	уатТС.Ссылка ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТЗн.Период КАК Период,
			|	ТЗн.Лат,
			|	ТЗн.Лон,
			|	ТЗн.Скорость,
			|	ТЗн.ЗначениеДатчика1,
			|	ТЗн.ЗначениеДатчика2,
			|	ТЗн.ЗначениеДатчика3,
			|	уатТС.Ссылка КАК ТС
			|ИЗ
			|	ТЗн КАК ТЗн
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
			|		ПО ТЗн.ТСид = уатТС.ИДвСистемеНавигации
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ ПО
			|	ТС";

			Запрос.УстановитьПараметр("ТЗ", ТЗ);

			ВыборкаТС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаТС.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.уатМестоположениеGPS.СоздатьНаборЗаписей();
				ПредДата = 0;
				Выборка = ВыборкаТС.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ПредДата = 0 Или Выборка.Период - (ПредДата + Период * 60) > 0 Тогда

						Запись = НаборЗаписей.Добавить();
						Запись.Период = Выборка.Период;
						Запись.ТС = Выборка.ТС;
						Запись.Лат = Выборка.Лат;
						Запись.Лон = Выборка.Лон;
						Запись.Скорость = Выборка.Скорость;
						Запись.ЗначениеДатчика1 = Выборка.ЗначениеДатчика1;
						Запись.ЗначениеДатчика2 = Выборка.ЗначениеДатчика2;
						Запись.ЗначениеДатчика3 = Выборка.ЗначениеДатчика3;

						ПредДата = Выборка.Период;
					Иначе
						Продолжить;
					КонецЕсли;

				КонецЦикла;

				Попытка
					НаборЗаписей.Записать(Ложь);
				Исключение

				КонецПопытки;

			КонецЦикла;
		Иначе

			ТекстОшибки = "Нет новых данных.";
			Возврат 1;
		КонецЕсли;
	Исключение
		ТекстОшибки = "Загружен некорректный файл.";
		Возврат 1;
	КонецПопытки;

	Возврат 0;
КонецФункции





Функция ПеревестиДату1СВДатуOmnicomm(Дата) Экспорт
	мДата = Дата - Дата('19700101000000');
	мДата = (мДата * 1000 - 1230768000000) / 1000;
	мДата = Формат(мДата, "ЧГ=0");

	Возврат мДата;
КонецФункции





Функция ПеревестиДатуOmnicommВДату1С(Дата) Экспорт
	мДата = (Дата * 1000 + 1230768000000) / 1000;
	мДата = Дата('19700101000000') + мДата;

	Возврат мДата;
КонецФункции













Функция ЗагрузитьМестоположениеТСOmnicommВРегистр(Логин, Пароль, Сервер, ИмяБД, Драйвер, ИмяPIPE, ИмяDSN, СпособПодключения, ДатаС, ДатаПо, ТС, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	Соединение = Новый COMОбъект("ADODB.Connection");

	Если СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.СтандартноеПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Database=" + ИмяБД + ";DataSource=" + Сервер + ";UID=" + Логин + ";PWD=" + Пароль + ";";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.PIPEПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Server=" + Сервер + ";Socket=" + ИмяPIPE + ";Database=" + ИмяБД + ";UID=" + Логин + ";PWD=" + Пароль + ";OPTION=3;";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.DSNПодключение Тогда
		СтрокаСоединения = "DSN=" + ИмяDSN;
	Иначе
		ТекстОшибки = "Необходимо указать способ подключения к системе Omnicomm.";
		Возврат 1;
	КонецЕсли;

	Соединение.ConnectionString = СтрокаСоединения;

	Попытка
		Соединение.Open();
	Исключение
		ТекстОшибки = "Невозможно подключиться к базе. Проверьте корректность параметров подключения.";
		Возврат 1;
	КонецПопытки;

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("vehicleID");
	ТаблицаСобытий.Колонки.Добавить("eventDate");
	ТаблицаСобытий.Колонки.Добавить("mileage");
	ТаблицаСобытий.Колонки.Добавить("fuelRate");
	ТаблицаСобытий.Колонки.Добавить("engineWork");
	ТаблицаСобытий.Колонки.Добавить("extrasWork");
	ТаблицаСобытий.Колонки.Добавить("fuelVolume");

	Если Соединение.state Тогда
		НаборЗаписей = Новый COMОбъект("ADODB.Recordset");
		НаборЗаписей.CursorType = 3;

		НаборЗаписей.ActiveConnection = Соединение;
		ТекстЗапроса = "SELECT * FROM hourquarters";

		Если ТС.Количество() = 1 Тогда
			ТСВЗапрос = " WHERE vehicleID = " + ТС[0].ИдВСистемеНавигации;
		Иначе

			ТСМассив = ТС.ВыгрузитьКолонку("ИдВСистемеНавигации");
			СтрокаТС = "";
			Для каждого ЭлементМассива Из ТСМассив Цикл
				СтрокаТС = СтрокаТС + ЭлементМассива + ", ";
			КонецЦикла;
			СтрокаТС = Лев(СтрокаТС, СтрДлина(СтрокаТС) - 2);

			ТСВЗапрос = " WHERE vehicleID IN (" + СтрокаТС + ")";

		КонецЕсли;

		Если ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);
			ДатаПоЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаПо);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + " AND eventDate BETWEEN " + ДатаСЗапрос + " AND " + ДатаПоЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли ЗначениеЗаполнено(ДатаС) И Не ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + " AND eventDate >= " + ДатаСЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли Не ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + " AND eventDate <= " + ДатаСЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;
		Иначе


			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос);
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		КонецЕсли;

		Если НаборЗаписей.BOF И НаборЗаписей.EOF Тогда
			ТекстОшибки = "Невозможно рассчитать данные. Проверьте правильность выбранного ТС и период получения данных.";
			Возврат 1;
		Иначе
			НаборЗаписей.MoveFirst();
			Пока НаборЗаписей.EOF() = 0 Цикл
				НоваяСтрока = ТаблицаСобытий.Добавить();
				НоваяСтрока.vehicleId = НаборЗаписей.Fields("vehicleID").Value;
				НоваяСтрока.eventDate = НаборЗаписей.Fields("eventDate").Value;
				НоваяСтрока.mileage = НаборЗаписей.Fields("mileage").Value;
				НоваяСтрока.fuelRate = НаборЗаписей.Fields("fuelRate").Value;
				НоваяСтрока.engineWork = НаборЗаписей.Fields("engineWork").Value;
				НоваяСтрока.extrasWork = НаборЗаписей.Fields("extrasWork").Value;
				НоваяСтрока.fuelVolume = НаборЗаписей.Fields("fuelVolume").Value;

				НаборЗаписей.MoveNext();
			КонецЦикла;
		КонецЕсли;

		НаборЗаписей.Close();
		Соединение.Close();
	КонецЕсли;

	Если Не ТаблицаСобытий.Количество() Тогда
		ТекстОшибки = "Нет новых данных.";
		Возврат 1;
	Иначе

		Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

			МенеджерЗаписи = РегистрыСведений.уатМестоположениеGPS.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ПеревестиДатуOmnicommВДату1С(СтрокаТаблицы.eventDate);
			НайденноеТС = Справочники.уатТС.НайтиПоРеквизиту("ИДвСистемеНавигации", Формат(СтрокаТаблицы.vehicleID, "ЧГ=0"));
			МенеджерЗаписи.ТС = НайденноеТС;
			МенеджерЗаписи.ЗначениеДатчика1 = СтрокаТаблицы.mileage / 10;
			Если СтрокаТаблицы.fuelRate <> - 1 И СтрокаТаблицы.fuelRate <> 0 Тогда
				МенеджерЗаписи.ЗначениеДатчика3 = СтрокаТаблицы.fuelRate / 10;
			КонецЕсли;
			Если СтрокаТаблицы.fuelVolume <> - 1 И СтрокаТаблицы.fuelVolume <> 0 Тогда
				МенеджерЗаписи.ЗначениеДатчика4 = СтрокаТаблицы.fuelVolume / 10;
			КонецЕсли;

			Если МенеджерЗаписи.ЗначениеДатчика1 = 0 И МенеджерЗаписи.ЗначениеДатчика3 = 0 Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;

			Попытка
				МенеджерЗаписи.Записать();
			Исключение

			КонецПопытки;

		КонецЦикла;

	КонецЕсли;

	Возврат 0;
КонецФункции













Функция ЗагрузитьДополнительныеСведенияТСOmnicommВРегистр(Логин, Пароль, Сервер, ИмяБД, Драйвер, ИмяPIPE, ИмяDSN, СпособПодключения, ДатаС, ДатаПо, ТС, ТекстОшибки, СтруктураДопПараметров = Неопределено) Экспорт
	Соединение = Новый COMОбъект("ADODB.Connection");

	Если СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.СтандартноеПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Database=" + ИмяБД + ";DataSource=" + Сервер + ";UID=" + Логин + ";PWD=" + Пароль + ";";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.PIPEПодключение Тогда
		СтрокаСоединения = "DRIVER=" + Драйвер + ";Server=" + Сервер + ";Socket=" + ИмяPIPE + ";Database=" + ИмяБД + ";UID=" + Логин + ";PWD=" + Пароль + ";OPTION=3;";
	ИначеЕсли СпособПодключения = Перечисления.уатСпособПодключенияКOmnicomm.DSNПодключение Тогда
		СтрокаСоединения = "DSN=" + ИмяDSN;
	Иначе
		ТекстОшибки = "Необходимо указать способ подключения к системе Omnicomm.";
		Возврат 1;
	КонецЕсли;

	Соединение.ConnectionString = СтрокаСоединения;

	Попытка
		Соединение.Open();
	Исключение
		ТекстОшибки = "Невозможно подключиться к базе. Проверьте корректность параметров подключения.";
		Возврат 1;
	КонецПопытки;

	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("vehicleID");
	ТаблицаСобытий.Колонки.Добавить("eventDate");
	ТаблицаСобытий.Колонки.Добавить("eventTypeID");
	ТаблицаСобытий.Колонки.Добавить("volume");
	ТаблицаСобытий.Колонки.Добавить("driverCode");
	ТаблицаСобытий.Колонки.Добавить("eventDuration");
	ТаблицаСобытий.Колонки.Добавить("eventParameter");
	ТаблицаСобытий.Колонки.Добавить("limitValue");
	ТаблицаСобытий.Колонки.Добавить("address");

	Если Соединение.state Тогда
		НаборЗаписей = Новый COMОбъект("ADODB.Recordset");
		НаборЗаписей.CursorType = 3;

		НаборЗаписей.ActiveConnection = Соединение;
		ТекстЗапроса = "SELECT * FROM events";

		Если ТС.Количество() = 1 Тогда
			ТСВЗапрос = " WHERE vehicleID = " + ТС[0].ИдВСистемеНавигации;
		Иначе

			ТСМассив = ТС.ВыгрузитьКолонку("ИдВСистемеНавигации");
			СтрокаТС = "";
			Для каждого ЭлементМассива Из ТСМассив Цикл
				СтрокаТС = СтрокаТС + ЭлементМассива + ", ";
			КонецЦикла;
			СтрокаТС = Лев(СтрокаТС, СтрДлина(СтрокаТС) - 2);

			ТСВЗапрос = " WHERE vehicleID IN (" + СтрокаТС + ")";

		КонецЕсли;

		УсловиеСобытийВЗапрос = " AND eventTypeID IN (1,3,12,14,24)";

		Если ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);
			ДатаПоЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаПо);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " AND eventDate BETWEEN " + ДатаСЗапрос + " AND " + ДатаПоЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли ЗначениеЗаполнено(ДатаС) И Не ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " AND eventDate >= " + ДатаСЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		ИначеЕсли Не ЗначениеЗаполнено(ДатаС) И ЗначениеЗаполнено(ДатаПо) Тогда
			ДатаСЗапрос = ПеревестиДату1СВДатуOmnicomm(ДатаС);

			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " AND eventDate <= " + ДатаСЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;
		Иначе


			Попытка
				НаборЗаписей.Open(ТекстЗапроса + ТСВЗапрос + УсловиеСобытийВЗапрос + " ORDER BY vehicleID, eventDate");
			Исключение
				ТекстОшибки = "Невозможно осуществить запрос. Проверьте правильность выбранных ТС.";
				Возврат 1;
			КонецПопытки;

		КонецЕсли;

		Если НаборЗаписей.BOF И НаборЗаписей.EOF Тогда
			ТекстОшибки = "Невозможно рассчитать данные. Проверьте правильность выбранного ТС и период получения данных.";
			Возврат 1;
		Иначе
			НаборЗаписей.MoveFirst();
			Пока НаборЗаписей.EOF() = 0 Цикл
				НоваяСтрока = ТаблицаСобытий.Добавить();
				НоваяСтрока.vehicleId = НаборЗаписей.Fields("vehicleID").Value;
				НоваяСтрока.eventDate = НаборЗаписей.Fields("eventDate").Value;
				НоваяСтрока.eventTypeID = НаборЗаписей.Fields("eventTypeID").Value;
				НоваяСтрока.volume = НаборЗаписей.Fields("volume").Value;
				НоваяСтрока.driverCode = НаборЗаписей.Fields("driverCode").Value;
				НоваяСтрока.eventDuration = НаборЗаписей.Fields("eventDuration").Value;
				НоваяСтрока.eventParameter = НаборЗаписей.Fields("eventParameter").Value;
				НоваяСтрока.limitValue = НаборЗаписей.Fields("limitValue").Value;
				НоваяСтрока.address = НаборЗаписей.Fields("address").Value;

				НаборЗаписей.MoveNext();
			КонецЦикла;
		КонецЕсли;

		НаборЗаписей.Close();
		Соединение.Close();
	КонецЕсли;

	Если Не ТаблицаСобытий.Количество() Тогда
		ТекстОшибки = "Нет новых данных.";
		Возврат 1;
	Иначе

		Для каждого СтрокаТаблицы Из ТаблицаСобытий Цикл

			МенеджерЗаписи = РегистрыСведений.уатДополнительныеСведенияПоOmnicomm.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = ПеревестиДатуOmnicommВДату1С(СтрокаТаблицы.eventDate);
			НайденноеТС = Справочники.уатТС.НайтиПоРеквизиту("ИДвСистемеНавигации", Формат(СтрокаТаблицы.vehicleID, "ЧГ=0"));
			МенеджерЗаписи.ТС = НайденноеТС;

			Если СтрокаТаблицы.eventTypeID = 1 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.ЗаправкаГСМ;
				МенеджерЗаписи.Значение = СтрокаТаблицы.volume / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 3 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.СливГСМ;
				МенеджерЗаписи.Значение = СтрокаТаблицы.volume / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 12 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.МгновенноеПревышениеСкорости;
				МенеджерЗаписи.ДлительностьСобытия = СтрокаТаблицы.eventDuration;
				МенеджерЗаписи.Значение = СтрокаТаблицы.eventParameter / 10;
				МенеджерЗаписи.ПредельноеЗначение = СтрокаТаблицы.limitValue / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 14 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.ДлительноеПревышениеСкорости;
				МенеджерЗаписи.ДлительностьСобытия = СтрокаТаблицы.eventDuration;
				МенеджерЗаписи.Значение = СтрокаТаблицы.eventParameter / 10;
				МенеджерЗаписи.ПредельноеЗначение = СтрокаТаблицы.limitValue / 10;
			ИначеЕсли СтрокаТаблицы.eventTypeID = 24 Тогда
				МенеджерЗаписи.ТипСобытия = Перечисления.уатТипСобытияGPS.НарушениеПредельныхЗначенийДатчиков;
			КонецЕсли;

			Попытка
				МенеджерЗаписи.Записать();
			Исключение

			КонецПопытки;

		КонецЦикла;

	КонецЕсли;

	Возврат 0;
КонецФункции




