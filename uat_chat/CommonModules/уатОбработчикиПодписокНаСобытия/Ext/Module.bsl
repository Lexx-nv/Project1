///////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ
///////////////////////////////////////////////////////////////////////////////////////

// Процедура вызывает обработчик, устанавливающий префикс номера документа 
// в зависимости от организации
//  Парам.
//  СтандартнаяОбработка - использование стандартной обработки
//  Источник - источник события
//  Префикс - префикс организации
Процедура уатПриУстановкеНовогоНомераДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.уатПутевойЛист") Тогда
		Префикс = Прав(СокрЛП(Год(Источник.Дата)),1);
	КонецЕСЛИ;
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксОрганизации(Источник, Префикс);
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

// Процедура вызывает обработчик, устанавливающий префикс кода справочника
//  Парам.
//  СтандартнаяОбработка - использование стандартной обработки
//  Источник - источник события
//  Префикс - префикс организации  
Процедура уатПриУстановкеНовогоКодаСправочникаПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	уатОбщегоНазначенияТиповые.уатДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

// Проверка возможности изменения записей регистров накопления (дата запрета изменения данных)
//
Процедура уатПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ);
	Если Отказ Тогда
		#Если Клиент Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // уатПередЗаписьюРегистраНакопленийПроверкаДоступностиПериода

// Проверка возможности изменения записей регистров сведений (дата запрета изменения данных)
//
Процедура уатПередЗаписьюРегистраСведенийПроверкаДоступностиПериода(Источник, Отказ, Замещение) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаЗаписейРегистров(Источник, Отказ);
	Если Отказ Тогда
		#Если Клиент Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // уатПередЗаписьюРегистраСведенийПроверкаДоступностиПериода

// Проверка возможности записи данных документа с учетом даты запрета изменения данных (даты запрета редактирования)
//
Процедура уатПередЗаписьюДокументаПроверкаДоступностиПериода(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаПериодаДокумента(Источник, Отказ, РежимЗаписи);
	#Если Клиент Тогда
		Если Отказ Тогда
			Сообщить("Редактирование данных этого периода запрещено. Изменения не могут быть записаны...", СтатусСообщения.Важное);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // уатПередЗаписьюДокументаПроверкаДоступностиПериода

// В зависимости от настроек учетной политики процедура регистрирует основания 
// на основании которых в дальнейшем могут быть сформированы документы
// Заказ на ТС.
//
// Параметры:
//  Источник     	 - документ объект 
//  Отказ       	 - признак отказа от записи
//  РежимПроведения	 - режим проведения документа
// 
Процедура уатПриПроведенииОснованияЗаказаНаТСОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	ЗарегистрироватьОснованиеДляЗаказаНаТС(Источник, Отказ, РежимПроведения);	
КонецПроцедуры

// Вызов данное процедуры происходит перед записью элемента типовых справочников
// Когда необходимо выполнить какие-либо проверки на возможность записи.
//
// Параметры:
//  Источник     - справочник объект - записываемый договор
//  Отказ        - признак отказа от записи.
//
Процедура уатПередЗаписьюЭлементаТиповыхСправочников(Источник,Отказ) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") тогда
		Источник.ДополнительныеСвойства.Вставить("мЭтоНовый",Источник.ЭтоНовый());
	КонецЕсли;
КонецПроцедуры

// Вызов данное процедуры происходит перед записью элемента типовых справочников
// Когда необходимо выполнить какие-либо проверки на возможность записи.
//
// Параметры:
//  Источник     - справочник объект - записываемый договор
//  Отказ        - признак отказа от записи.
//
Процедура уатПриЗаписиЭлементаТиповыхСправочников(Источник,Отказ) Экспорт
	ИдетЗагрузкаДанных = Ложь;
	Попытка	ИдетЗагрузкаДанных = Источник.ОбменДанными.Загрузка;
	Исключение КонецПопытки; 
	Если ИдетЗагрузкаДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") тогда
		//установка настроек пользователя УАТ по умолчанию
		Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатНастройкаПользователей)
		   И ПравоДоступа("Добавление", Метаданные.РегистрыСведений.уатНастройкаПользователей) тогда

			МенеджерЗаписи = РегистрыСведений.уатНастройкаПользователей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = Источник.Ссылка;
			МенеджерЗаписи.Прочитать();
			Если НЕ МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Пользователь = Источник.Ссылка;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатПраваИНастройки)
		 ИЛИ НЕ ПравоДоступа("Добавление", Метаданные.РегистрыСведений.уатПраваИНастройки) тогда
			Возврат;
		КонецЕсли;

		//установка права "Разрешить работу с УАТ"           
		мЗнач = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("мЭтоНовый",мЗнач) И мЗнач = Истина 
		   И НЕ Источник.ОбменДанными.Загрузка тогда
			#Если Клиент тогда
				Если уатОбщегоНазначения.уатДоступностьКомпоненты("УАТ") И НЕ уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ") 
				   И Метаданные.Документы.Найти("АктСверкиВзаиморасчетов") = Неопределено Тогда //установлен чистый УАТ
				
					МенЗаписи = РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
					МенЗаписи.Объект         = Источник.Ссылка;
					МенЗаписи.ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРаботуСУАТ;
					МенЗаписи.Значение       = Истина;
					Попытка 
						МенЗаписи.Записать();
					Исключение
					КонецПопытки;
				ИначеЕсли уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ") И НЕ уатОбщегоНазначения.уатДоступностьКомпоненты("УАТ") 
				   И Метаданные.Документы.Найти("АктСверкиВзаиморасчетов") = Неопределено Тогда //установлен чистый УЭ
					
					МенЗаписи = РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
					МенЗаписи.Объект         = Источник.Ссылка;
					МенЗаписи.ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРаботуСУЭ;
					МенЗаписи.Значение       = Истина;
					Попытка 
						МенЗаписи.Записать();
					Исключение
					КонецПопытки;
				Иначе //какие-то варианты объедиения
					
					НаборЗаписей = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
					Если уатОбщегоНазначения.уатДоступностьКомпоненты("УАТ") тогда
						Ответ = Вопрос("Разрешить пользователю " + Источник.Ссылка.Наименование + " работу с компонентами решения Управление автотранспортом",
						               РежимДиалогаВопрос.ДаНет,
						               30,
						               КодВозвратаДиалога.Нет,
						               "Разрешить работу с УАТ");
						Если Ответ = КодВозвратаДиалога.Да тогда
							НовЗапись = НаборЗаписей.Добавить();
							НовЗапись.Объект         = Источник.Ссылка;
							НовЗапись.ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРаботуСУАТ;
							НовЗапись.Значение       = Истина;
						КонецЕсли;
					КонецЕсли;
					Если уатОбщегоНазначения.уатДоступностьКомпоненты("УЭ") тогда
						Ответ = Вопрос("Разрешить пользователю " + Источник.Ссылка.Наименование + " работу с компонентами решения Транспортная логистика и экспедирование",
						               РежимДиалогаВопрос.ДаНет,
						               30,
						               КодВозвратаДиалога.Нет,
						               "Разрешить работу с УЭ");
						Если Ответ = КодВозвратаДиалога.Да тогда
							НовЗапись = НаборЗаписей.Добавить();
							НовЗапись.Объект         = Источник.Ссылка;
							НовЗапись.ПравоНастройка = ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРаботуСУЭ;
							НовЗапись.Значение       = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если НаборЗаписей.Количество() тогда
						Попытка
							НаборЗаписей.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////////////

// Процедура выполняет проверку возможности записи регистров сведений и регистров накопления
// с учетом даты запрета изменения данных (даты запрета редактирования)
// 
// Параметры:
//  НаборЗаписей - набор записей регистра
//  Отказ        - признак отказа
//
Процедура ПроверкаПериодаЗаписейРегистров(НаборЗаписей, Отказ)
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеНабора = НаборЗаписей.Метаданные();		
	ЕстьОрганизация = (МетаданныеНабора.Измерения.Найти("Организация")<>Неопределено);
	
	// Проверку существующих записей выполняем только для регистров сведений, подчиненных регистратору,
	// регистрам накопления и регистрам бухгалтерии.
	// Проверка необходима, так как удаление записей прошлого периода (в результате перезаписи набора)
	// тоже допускать нельзя.
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СоответствиеГраницЗапрета", 	СоответствиеГраницЗапрета);
	СтруктураПараметров.Вставить("МетаданныеНабора", 			МетаданныеНабора);
	СтруктураПараметров.Вставить("ЕстьОрганизация", 			ЕстьОрганизация);
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеНабора) И НЕ МетаданныеНабора.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		ПроверкаСуществующихЗаписейРегистраСОтборомПоИзмерениям(НаборЗаписей, СтруктураПараметров, Отказ);
	Иначе
		ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ);
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0 И НЕ Отказ Тогда
		Отказ = Ложь;
		Если ЕстьОрганизация Тогда
			Для Каждого Запись ИЗ НаборЗаписей Цикл
				ГраницаПоОрганизации = СоответствиеГраницЗапрета[Запись.Организация];
				ЕСли ГраницаПоОрганизации <> Неопределено 
					И Запись.Период <= ГраницаПоОрганизации Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];
			Если ГраницаПериода <> Неопределено Тогда
				Для Каждого Запись ИЗ НаборЗаписей Цикл
					ЕСли Запись.Период <= ГраницаПериода Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаПериодаЗаписейРегистров

// Процедура проверяет существование записей регистра с учетом границ запрета редактирования.
//
// Параметры:
//	НаборЗаписей - проверяемый набор записей;
//	СтруктураПараметров - структура параметров проверки.
//		Элементы структуры - МетаданныеНабора, ЕстьОрганизация, СоответствиеГраницЗапрета;
//	Отказ - флаг успешной проверки.
//
Процедура ПроверкаСуществующихЗаписейРегистра(НаборЗаписей, СтруктураПараметров, Отказ)
	
	ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
	
	Запрос = Новый Запрос;
	ВложенныйЗапрос = "";
	ЕСли СтруктураПараметров.ЕстьОрганизация Тогда
		индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ") +"
			|ВЫБРАТЬ &Организация"+индекс+" КАК Организация, &ДатаЗапрета" + Формат(индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация" + Индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета" + Индекс, ?(ГраницаПериода = Неопределено, NULL, ГраницаПериода));
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода = Неопределено, NULL, ГраницаПериода));			
	КонецЕсли;			
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(Период) КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	|ГДЕ Регистратор = &Регистратор
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);				
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		//Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаСуществующихЗаписейРегистра()

// Процедура проверяет существование записей регистра с отбором по измерениям
//	с учетом границ запрета редактирования.
//
// Параметры:
//	НаборЗаписей - проверяемый набор записей;
//	СтруктураПараметров - структура параметров проверки.
//		Элементы структуры - МетаданныеНабора, ЕстьОрганизация, СоответствиеГраницЗапрета;
//	Отказ - флаг успешной проверки.
//
Процедура ПроверкаСуществующихЗаписейРегистраСОтборомПоИзмерениям(НаборЗаписей, СтруктураПараметров, Отказ)
	
	ИмяРегистра = СтруктураПараметров.МетаданныеНабора.ПолноеИмя();
	
	// Формируем текст условия блока ГДЕ основного запроса,
	// в соответствии с установленным отбором для набора записей
	
	Запрос = Новый Запрос;
	
	СписокПолейУсловияОтбораТекст = "";
	Итерация = 0;
	Для каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл                
		Если не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;                
		
		Если НЕ Итерация = 0  Тогда            
			СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст  + " И ";
		КонецЕсли;        
		
		СписокПолейУсловияОтбораТекст = СписокПолейУсловияОтбораТекст +" Набор." + ЭлементОтбора.Имя + " = &" + ЭлементОтбора.Имя;                       
		Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);        
		
		Итерация = 1;
	КонецЦикла; 
	
	Если Итерация = 1 Тогда
		СписокПолейУсловияОтбораТекст = " ГДЕ " + СписокПолейУсловияОтбораТекст;    	            
	КонецЕсли;                   
	
	ВложенныйЗапрос = "";
	Если СтруктураПараметров.ЕстьОрганизация Тогда
		Индекс = 1;
		ИмяПоляОрганизации = "Организация";
		Для Каждого КлючИЗначение ИЗ СтруктураПараметров.СоответствиеГраницЗапрета Цикл
			ВложенныйЗапрос = ВложенныйЗапрос + ?(ВложенныйЗапрос = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ") +"
			|ВЫБРАТЬ &Организация" + Индекс + " КАК Организация, &ДатаЗапрета" + Формат(Индекс, "ЧГ=0") + " КАК ДатаЗапрета";
			Запрос.УстановитьПараметр("Организация" + Индекс, КлючИЗначение.Ключ);
			ГраницаПериода = КлючИЗначение.Значение;
			Запрос.УстановитьПараметр("ДатаЗапрета" + Индекс, ?(ГраницаПериода = Неопределено, NULL, ГраницаПериода));
			Индекс = Индекс + 1;
		КонецЦикла;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ИмяПоляОрганизации = "&ПустаяОрганизация";
		ВложенныйЗапрос = "ВЫБРАТЬ &ПустаяОрганизация КАК Организация, &ДатаЗапрета КАК ДатаЗапрета";
		Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
		ГраницаПериода = СтруктураПараметров.СоответствиеГраницЗапрета[ПустаяОрганизация];
		Запрос.УстановитьПараметр("ДатаЗапрета", ?(ГраницаПериода = Неопределено, NULL, ГраницаПериода));			
	КонецЕсли;			    
	
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|(
	|ВЫБРАТЬ " + ИмяПоляОрганизации + " КАК Организация, МИНИМУМ(Период) КАК Период  ИЗ " + ИмяРегистра + " КАК Набор
	| "+ СписокПолейУсловияОтбораТекст + "
	|СГРУППИРОВАТЬ ПО " + ИмяПоляОрганизации + "
	|) КАК НаборЗаписей
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(" + ВложенныйЗапрос + "		
	|) КАК ДатыЗапрета
	|ПО НаборЗаписей.Организация = ДатыЗапрета.Организация
	|ГДЕ НаборЗаписей.Период <= ДатыЗапрета.ДатаЗапрета ИЛИ ДатыЗапрета.ДатаЗапрета ЕСТЬ NULL";      
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаСуществующихЗаписейРегистраСОтборомПоИзмерениям()

// Процедура проверки возможности записи (изменения) данных документа с учетом даты запрета изменения данных
//(даты запрета редактирования)
//
// Параметры:
//  ДокументОбъект - Документ для которого выполняется проверка
//  Отказ        - признак отказа
//  РежимЗаписи  - режим записи документа
//
Процедура ПроверкаПериодаДокумента(ДокументОбъект, Отказ, РежимЗаписи = Неопределено)
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиДокумента = ПолучитьПараметрыПроверкиДокумента(ДокументОбъект);
	
	Если Не ДокументОбъект.ЭтоНовый() Тогда
		СтараяВерсияДокумента = ПолучитьВерсиюДокументаПередИзменением(ДокументОбъект, ПараметрыПроверкиДокумента);
		ПроверитьВерсиюДокумента(СтараяВерсияДокумента, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ, РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаПериодаДокумента

// Функция возвращает структуру с параметрами проверки документа по умолчанию
//
Функция ПолучитьПараметрыПроверкиДокумента(ДокументОбъект)
	
	ПараметрыПроверкиДокумента = Новый Структура;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ПараметрыПроверкиДокумента.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	
	// если  в документе есть реквизит организация, дата запрета определяется с учетом организации
	ПараметрыПроверкиДокумента.Вставить("ЕстьОрганизация", 			(МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено));
	ПараметрыПроверкиДокумента.Вставить("ЕстьУправленческийУчет",	(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено));
	ПараметрыПроверкиДокумента.Вставить("ЕстьБухгалтерскийУчет", 	(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено));
	ПараметрыПроверкиДокумента.Вставить("ПроверятьУправленческуюДатуЗапрета",  Истина);
	ПараметрыПроверкиДокумента.Вставить("ПроверятьРегламентированнуюДатуЗапрета", 	ПараметрыПроверкиДокумента.ЕстьОрганизация);	
	
	// Если для документа проведение запрещено, проверка на дату запрета редактирования
	//проверяется без учета проведенности
	ПараметрыПроверкиДокумента.Вставить("ПроверятьПроведениеДокумента", (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить));
	
	Возврат ПараметрыПроверкиДокумента;
	
КонецФункции // ПолучитьПараметрыПроверкиДокумента()

// Функция возвращает из БД версию документа до его изменения
//
// Параметры:
//  ДокументОбъект - Документ объект
//  ПараметрыПроверкиДокумента - Параметры проверки документа
Функция ПолучитьВерсиюДокументаПередИзменением(ДокументОбъект, ПараметрыПроверкиДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|Дата" 
	+ ?(ПараметрыПроверкиДокумента.ЕстьОрганизация, "," + Символы.ПС + "Организация КАК Организация", "")
	+ ?(ПараметрыПроверкиДокумента.ЕстьУправленческийУчет, "," + Символы.ПС + "ОтражатьВУправленческомУчете КАК ОтражатьВУправленческомУчете", "")
	+ ?(ПараметрыПроверкиДокумента.ЕстьБухгалтерскийУчет, "," + Символы.ПС + "ОтражатьВБухгалтерскомУчете КАК ОтражатьВБухгалтерскомУчете", "")
	+ ?(ПараметрыПроверкиДокумента.ПроверятьПроведениеДокумента, "," + Символы.ПС + "Проведен КАК Проведен", "") + "	
	|ИЗ Документ." + ПараметрыПроверкиДокумента.МетаданныеДокумента.Имя + "
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции // ПолучитьВерсиюДокументаПередИзменением()

// Процедура проверки версии документа на нарушение даты запрета
// 
// Параметры:
//  ДокументОбъект - Документ объект
//  ПараметрыПроверкиДокумента - Параметры проверки документа
//  СоответствиеГраницЗапрета - структура соответствия границ запрета
//  Отказ        - Признак отказа
//  РежимЗаписи  - Режим записи документа
//
Процедура ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, Отказ, РежимЗаписи = Неопределено)
	
	Если ПараметрыПроверкиДокумента.ПроверятьПроведениеДокумента Тогда		
		ДокументПроведен = ДокументОбъект.Проведен ИЛИ ?(РежимЗаписи = Неопределено, ЛОЖЬ, РежимЗаписи = РежимЗаписиДокумента.Проведение);
		Если Не ДокументПроведен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Не выполняется проверка дат запрета редактирования
	Если НЕ ПараметрыПроверкиДокумента.ПроверятьУправленческуюДатуЗапрета и
		НЕ ПараметрыПроверкиДокумента.ПроверятьРегламентированнуюДатуЗапрета Тогда
		
		Возврат;
	КонецЕсли;	
	
	// Проверка регламентированной даты запрета
	Если ПараметрыПроверкиДокумента.ПроверятьРегламентированнуюДатуЗапрета Тогда	
		ГраницаПоОрганизации = СоответствиеГраницЗапрета[ДокументОбъект.Организация];
		
		// Если регламентированная дата запрета для регламентного документа не определена
		// то используется общая дата запрета изменения данных
		Если ГраницаПоОрганизации = Неопределено Тогда
			ГраницаПоОрганизации = СоответствиеГраницЗапрета["ОбщаяДатаЗапретаРедактирования"];
		КонецЕсли;
		
		Если НЕ ГраницаПоОрганизации = Неопределено 
			И ДокументОбъект.Дата <= ГраницаПоОрганизации Тогда 
			
			Отказ = Истина;			
		КонецЕсли;		
	КонецЕсли;
	
	// Проверка управленческой даты запрета
	Если ПараметрыПроверкиДокумента.ПроверятьУправленческуюДатуЗапрета Тогда        
		ГраницаПериода = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];       
		// Если управленческая дата запрета для управленческого документа не определена
		// то используется общая дата запрета изменения данных
		Если ГраницаПоОрганизации = Неопределено Тогда
			ГраницаПоОрганизации = СоответствиеГраницЗапрета[Справочники.Организации.ПустаяСсылка()];    
		КонецЕсли;
		
		Если ГраницаПериода <> Неопределено Тогда
			
			Если ДокументОбъект.Дата <= ГраницаПериода Тогда
				Отказ = Истина;				
			КонецЕсли;         			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВерсиюДокумента()

// Процедура, в зависимости от настроек учетной политики, выполняет регистрацию
// оснований для последующего формирования документов "Заказ на ТС". Процедура 
// вызывается при проведении документов "Заказ покупателя" и "Реализация товаров 
// и услуг" конфигураций бухгалтерия предприятия и Управление торговлей. 
//
// Параметры:
//  Источник     - документ объект, проведение которого инициировало вызов данной
//                 процедуры
//  Отказ        - признак проведения документа
//  РежимПроведения - режим проведения документа
//
Процедура ЗарегистрироватьОснованиеДляЗаказаНаТС(Источник, Отказ, РежимПроведения)
	
	#Если Клиент тогда
	ПараметрРегистрации = Неопределено;
	ПараметрРегистрации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Источник.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.РегистрироватьЗаявкиНаЗаказыНаТС);
	
	Если ПараметрРегистрации = Неопределено ИЛИ ПараметрРегистрации = Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.НеРегистрировать Тогда
		Возврат;
	ИначеЕсли ПараметрРегистрации = Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.РегистрироватьНаОснованииРеализацииТоваровИУслуг И ТипЗнч(Источник) <> Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Возврат;
	ИначеЕсли Метаданные.Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.ЗначенияПеречисления.Найти("РегистрироватьНаОснованииЗаказовПокупателей") <> Неопределено Тогда
		Если ПараметрРегистрации = Перечисления.уатРегистрироватьЗаявкиНаЗаказыГрузоотправителей.РегистрироватьНаОснованииЗаказовПокупателей И уатОбщегоНазначенияТиповые.уатЕстьДокумент("ЗаказПокупателя") И ТипЗнч(Источник) <> Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатРегистрацияОснованийДляЗаказовГрузоотправителей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
	НаборЗаписей.Прочитать();
	Если НЕ НаборЗаписей.Количество() тогда
		НовЗапись = НаборЗаписей.Добавить();    
		НовЗапись.Период    = Источник.Дата;
		НовЗапись.Документ  = Источник.Ссылка;
		НовЗапись.Статус    = Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.Открыта;
		НаборЗаписей.Записать(Истина);		
	ИначеЕсли НаборЗаписей.Количество() = 1 тогда
		НовЗапись = НаборЗаписей[0];
		НовЗапись.Период    = Источник.Дата;
		НовЗапись.Документ  = Источник.Ссылка;
		НовЗапись.Статус    = Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.Открыта;
		НаборЗаписей.Записать(Истина);
	ИначеЕсли НаборЗаписей.Количество() тогда
		Для каждого ТекЗапись ИЗ НаборЗаписей цикл
			Если ТекЗапись.Статус = Перечисления.уатСтатусыЗаявокЗаказГрузоотправителя.СформированЗаказНаТС тогда       
				//Создаем напоминание
				МенЗаписи = РегистрыСведений.уатНапоминания.СоздатьМенеджерЗаписи();
				МенЗаписи.Пользователь              = Источник.Ответственный;
				МенЗаписи.Завершено                 = ЛожЬ;
				МенЗаписи.РеальнаяДатаОповещения	= ТекущаяДата();
				МенЗаписи.Объект                    = Источник.Ссылка;
				МенЗаписи.Автор                     = глЗначениеПеременной("глТекущийПользователь");
				МенЗаписи.Автонапоминание           = Истина;
				МенЗаписи.ДатаАктуальности          = Дата("00010101");
				МенЗаписи.ДатаНачала                = ТекущаяДата();
				МенЗаписи.ДатаОповещения            = ТекущаяДата();
				МенЗаписи.ТипПериода                = "00";
				МенЗаписи.УдалитьПоИстеченииСрока	= Ложь;
				МенЗаписи.Редактирование            = Ложь;
				МенЗаписи.СрокДоНачала              = 0;
				МенЗаписи.Тема                      = "Перепроведение документа ";
				МенЗаписи.Описание                  = "На основании перепроведенного документа имеется сформированный 'Заказ на ТС' (" + ТекЗапись.ЗаказНаТС  + "). " ;
				МенЗаписи.Записать();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры



#Область ПоискПутевогоРемонтного 

Функция НайтиРемонтныйЛист(Ссылка) Экспорт
	
	#Если Клиент тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатРемонтныйЛист.Ссылка
		|ИЗ
		|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
		|ГДЕ
		|	уатРемонтныйЛист.Проведен = ЛОЖЬ
		|	И уатРемонтныйЛист.Выполнен = ЛОЖЬ
		|	И уатРемонтныйЛист.ТС = &ТС
		|	И уатРемонтныйЛист.Дата <= &ДатаПЛ
		|	И уатРемонтныйЛист.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатРемонтныйЛист.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаПЛ", КонецДня(Ссылка.ДатаВыезда));
	Запрос.УстановитьПараметр("ТС", Ссылка.ТранспортноеСредство);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		Текст = "Внимание!!!
		|По ТС - " + Ссылка.ТранспортноеСредство + " на дату путевого листа еще не закрыт:
		|" + Строка(ТЗ[0].Ссылка) +  "
		|Вы хотите продолжить?";
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	#КонецЕсли
	Возврат Ложь; 
КонецФункции	

Функция НайтиПутевойЛист(Ссылка) Экспорт
	#Если Клиент тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатПутевойЛист.Ссылка
		|ИЗ
		|	Документ.уатПутевойЛист КАК уатПутевойЛист
		|ГДЕ
		|	уатПутевойЛист.ТранспортноеСредство = &ТС
		|	И &Дата МЕЖДУ НАЧАЛОПЕРИОДА(уатПутевойЛист.ДатаВыезда, ДЕНЬ) И КОНЕЦПЕРИОДА(уатПутевойЛист.ДатаВозвращения, ДЕНЬ)
		|	И уатПутевойЛист.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Дата", Ссылка.Дата);
	Запрос.УстановитьПараметр("ТС", Ссылка.ТС);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() > 0 Тогда
		Текст = "Внимание!!!
		|По ТС - " + Ссылка.ТС + " на дату ремонтного листа выписан:
		|" + Строка(ТЗ[0].Ссылка) +  "
		|Вы хотите продолжить?";
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	#КонецЕсли
	
	Возврат Ложь; 
КонецФункции	

Процедура ПередЗаписьюПечатьюПЛ_РЛ(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда Возврат; КонецЕсли;
	
	Если глОбщий.ИмяПользователяС1С() Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		//Отказ = НайтиРемонтныйЛист(Источник);
	Иначе
		Отказ = НайтиПутевойЛист(Источник);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

Функция КонтрольДокументовТСИВодителя(ТранспортноеСредство,Сотрудник,Контрагент,ДатаЗапроса) Экспорт
	
	#Если Клиент тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтрольДокументов.ВидДокумента,
		|	ЕСТЬNULL(уатДокументыВодителей.ДатаОкончания, ""Не указана"") КАК ДатаОкончания,
		|	&ТипТС КАК ТипТС,
		|	уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля
		|ИЗ
		|	Справочник.Контрагенты.КонтрольДокументов КАК КонтрагентыКонтрольДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатДокументыВодителей КАК уатДокументыВодителей
		|		ПО КонтрагентыКонтрольДокументов.ВидДокумента = уатДокументыВодителей.ВидДокумента
		|			И (уатДокументыВодителей.Сотрудник = &Сотрудник)
		|			И (уатДокументыВодителей.Архив = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыДДД.ИсключаемыеОбъектыКонтроля КАК уатВидыДДДИсключаемыеОбъектыКонтроля
		|		ПО КонтрагентыКонтрольДокументов.ВидДокумента = уатВидыДДДИсключаемыеОбъектыКонтроля.Ссылка
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатТипыТС)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &ТипТС
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатМоделиТС)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &МодельТС
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатТС)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &ТС
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатСотрудники)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &Сотрудник
		|			КОНЕЦ)
		|ГДЕ
		|	КонтрагентыКонтрольДокументов.Ссылка = &Контрагент
		|	И (уатДокументыВодителей.ДатаОкончания < &ДатаЗапроса
		|			ИЛИ уатДокументыВодителей.ДатаОкончания ЕСТЬ NULL)
		|	И уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля ЕСТЬ NULL
		|	И КонтрагентыКонтрольДокументов.ВидДокумента.ДляСотр = ИСТИНА
		|	И КонтрагентыКонтрольДокументов.ВидДокумента.КонтрольВПЛ = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыКонтрольДокументов.ВидДокумента,
		|	ЕСТЬNULL(уатДокументыТС.ДатаОкончания, ""Не указана""),
		|	&ТипТС,
		|	уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля
		|ИЗ
		|	Справочник.Контрагенты.КонтрольДокументов КАК КонтрагентыКонтрольДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатДокументыТС КАК уатДокументыТС
		|		ПО КонтрагентыКонтрольДокументов.ВидДокумента = уатДокументыТС.ВидДокумента
		|			И (уатДокументыТС.ТС = &ТС)
		|			И (уатДокументыТС.Архив = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыДДД.ИсключаемыеОбъектыКонтроля КАК уатВидыДДДИсключаемыеОбъектыКонтроля
		|		ПО КонтрагентыКонтрольДокументов.ВидДокумента = уатВидыДДДИсключаемыеОбъектыКонтроля.Ссылка
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатТипыТС)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &ТипТС
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатМоделиТС)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &МодельТС
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатТС)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &ТС
		|				КОГДА ТИПЗНАЧЕНИЯ(уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля) = ТИП(Справочник.уатСотрудники)
		|					ТОГДА уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля = &Сотрудник
		|			КОНЕЦ)
		|ГДЕ
		|	КонтрагентыКонтрольДокументов.Ссылка = &Контрагент
		|	И (уатДокументыТС.ДатаОкончания < &ДатаЗапроса
		|			ИЛИ уатДокументыТС.ДатаОкончания ЕСТЬ NULL)
		|	И уатВидыДДДИсключаемыеОбъектыКонтроля.ОбъектКонтроля ЕСТЬ NULL
		|	И КонтрагентыКонтрольДокументов.ВидДокумента.ДляТС = ИСТИНА
		|	И КонтрагентыКонтрольДокументов.ВидДокумента.КонтрольВПЛ = ИСТИНА";
		
		
		
		Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ТипТС", ТранспортноеСредство.ТипТС);
		Запрос.УстановитьПараметр("МодельТС", ТранспортноеСредство.Модель);
		Запрос.УстановитьПараметр("ТС", ТранспортноеСредство);
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		Если ТЗ.Количество() <> 0 Тогда
			ТекстСообщ = "";
			Для Каждого ХХХ Из ТЗ Цикл
				Если ХХХ.ДатаОкончания = "Не указана" Тогда
					ТекстСообщ = ТекстСообщ + "По документу - " + СокрЛП(ХХХ.ВидДокумента) + " - не указана дата окончания!" + Символы.ПС;
				Иначе
					ТекстСообщ = ТекстСообщ + "По документу - " + СокрЛП(ХХХ.ВидДокумента) + " - просрочена дата окончания - " + Строка(ХХХ.ДатаОкончания) + "!!!" + Символы.ПС;
				КонецЕсли;	
			КонецЦикла;	
			ТекстСообщ = ТекстСообщ + "Выписка путевого листа невозможна!";
			Сообщить(ТекстСообщ);
			Возврат Истина; 
		КонецЕсли;	
		
	#КонецЕсли
	Возврат Ложь; 
КонецФункции	

