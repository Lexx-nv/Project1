///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает модель терминала для переданного объекта
//
Функция ПолучитьМодельТерминалаПоОбъекту(ТекущийОбъект, НаДату=Неопределено) Экспорт

	Результат = Справочники.ItobМоделиТерминалов.ПустаяСсылка();
	
	Терминал = ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату);
	
	Если ЗначениеЗаполнено(Терминал) Тогда
		Результат = Терминал.Модель;			
	
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции // ПолучитьМодельТерминалаПоОбъекту()

// Функция возвращает терминал, привязанный к переданному объекту
//
Функция ПолучитьПривязанныйТерминал(ТекущийОбъект, НаДату=Неопределено) Экспорт

	Результат = Справочники.ItobТерминалы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
				
		СрезНаНачало = РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(
			?(НаДату=Неопределено,ТекущаяДата(),НаДату), Новый Структура("Объект", ТекущийОбъект));
		Если ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
			Результат = СрезНаНачало.Терминал;
						
		КонецЕсли;	
	
	КонецЕсли;
	
	Возврат Результат;			

КонецФункции // ПолучитьПривязанныйТерминал()

// Расчитывает пробег по переданному массиву точек
//
Функция ПолучитьПробег(МассивТочек) Экспорт
	
	ОбщРасстояние = 0;
	Для п = 1 По МассивТочек.Количество()/2-1 Цикл		
		
		НачШирота = МассивТочек[п*2-2];
		НачДолгота = МассивТочек[п*2-1];
		КонШирота = МассивТочек[п*2];
		КонДолгота = МассивТочек[п*2+1];
		
		ОбщРасстояние = ОбщРасстояние + 
			ПолучитьРасстояниеМеждуТочками(НачШирота, НачДолгота, КонШирота, КонДолгота);
	
	КонецЦикла;	
	
	Возврат ОбщРасстояние;

КонецФункции // ПолучитьПробег()

// Вычисление поправочного коэффициента на пробег ТС
//
Функция ПолучитьПоправочныйКоэффициентПробега(МаркаТС, ТС) Экспорт
	
	Если Метаданные.РегистрыСведений.Найти("ItobПоправочныеКоэффициентыПробега") = Неопределено Тогда
		Возврат 1;
	
	КонецЕсли;
	
	
	МассивМаркаТС = Новый Массив();
	МассивТС      = Новый Массив();
	
	МассивМаркаТС.Добавить(Справочники.уатМоделиТС.ПустаяСсылка());
	МассивТС.Добавить(Справочники.уатТС.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(МаркаТС) Тогда
		МассивМаркаТС.Добавить(МаркаТС);	
	
	КонецЕсли;
	
	МассивТС.Добавить(ТС);
	СписокГрупп = ItobОбщегоНазначенияСервер.ПолучитьСписокВышеСтоящихГрупп(ТС);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивТС.Добавить(Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаркаТранспорта", МассивМаркаТС);
	Запрос.УстановитьПараметр("ТранспортноеСредство", МассивТС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПоправочныеКоэффициентыПробега.МаркаТранспорта,
	               |	ItobПоправочныеКоэффициентыПробега.ТранспортноеСредство,
	               |	ItobПоправочныеКоэффициентыПробега.Коэффициент
	               |ИЗ
	               |	РегистрСведений.ItobПоправочныеКоэффициентыПробега КАК ItobПоправочныеКоэффициентыПробега
	               |ГДЕ
	               |	ItobПоправочныеКоэффициентыПробега.МаркаТранспорта В(&МаркаТранспорта)
	               |	И ItobПоправочныеКоэффициентыПробега.ТранспортноеСредство В(&ТранспортноеСредство)";
				   
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.ТранспортноеСредство = Справочники.уатТС.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.ТранспортноеСредство.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, МаркаТранспорта Убыв");
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		Результат = ТаблицаЗапроса[0].Коэффициент;
		
	Иначе
		Результат = 1;
		
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции // ПолучитьПоправочныйКоэффициентПробега()

// Вычисляет промежуточную точку по правилам простых пропорций
//
Функция ПолучитьТочкуНаДату(Точка1,Точка2,НаДату)
	
	Результат = Новый Структура("Период,Широта,Долгота,Скорость,Направление",НаДату,0,0,0,0);
	
	Если НЕ (Точка1.Период < НаДату И НаДату < Точка2.Период) Тогда	
		Возврат Результат;
		
	КонецЕсли;
	
	x1 = Точка1.Долгота;
	y1 = Точка1.Широта;
	x2 = Точка2.Долгота;
	y2 = Точка2.Широта;
	
	t1 = Точка1.Период;
	t2 = Точка2.Период;
	
	dT = t2 - t1;
	dT3 = НаДату - t1;
		
	Результат.Широта = (y2-y1)*dT3/dT + y1;
	Результат.Долгота = (x2-x1)*dT3/dT + x1;
	Результат.Скорость = (Точка1.Скорость + Точка2.Скорость)/2;
	
	Возврат Результат;	

КонецФункции // ПолучитьТочкуНаДату()

// Возвращает представление времени
// Параметр в секундах
//
Функция ПредставлениеВремени(Знач ВремяСек, ПоказыватьСекунды=Истина) Экспорт
	
	Сек = ВремяСек % 60;
	ВремяСек = (ВремяСек - Сек)/60;
	
	Мин = ВремяСек % 60;
	ВремяСек = (ВремяСек - Мин)/60;
	
	Час = ВремяСек % 24;
	ВремяСек = (ВремяСек - Час)/24;
	
	Сут = ВремяСек;
	
	Рез = "";
	Если Сут <> 0 Тогда
		Рез = ?(Рез="","",Рез+" ")+Сут+" сут";	
	КонецЕсли;
	Если Час <> 0 Тогда
		Рез = ?(Рез="","",Рез+" ")+Час+" ч";	
	КонецЕсли;
	Если Мин <> 0 Тогда
		Рез = ?(Рез="","",Рез+" ")+Мин+" мин";	
	КонецЕсли;
	Если Сек <> 0 И ПоказыватьСекунды Тогда
		Рез = ?(Рез="","",Рез+" ")+Сек+" сек";	
	КонецЕсли;	
	
	Возврат Рез;

КонецФункции // ПредставлениеВремени()

// Функция Возвращает ближайший адрес, найденный на карте
//
// Параметры
//  Широта,Долгота - географические координаты точки
//
// Возвращаемое значение:
//   Строка   - строковое представление адреса
//
Функция НайтиБлижайшийАдрес(Широта, Долгота) Экспорт
		
	Возврат ItobРаботаСКартой.ОпределитьБлижайшийОбъектНаКарте(Широта, Долгота);
	
КонецФункции // НайтиБлижайшийАдрес()

// Возвращает расстояние между точками
// Параметры:
//   StartLat, StartLong - начальные Широта и Долгота
//   EndLat, EndLong - конечные Широта и Долгота
//
Функция ПолучитьРасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong) Экспорт
	
	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	
	КонецЕсли;
	
	// Константы, используемые для вычисления смещения и расстояния
	Pi=3.1415926535897932;
	D2R = Pi/180; // Константа для преобразования градусов в радианы
	R2D = 180/Pi; // Константа для преобразования радиан в градусы
	a = 6378137.0; // Основные полуоси
	b = 6356752.314245; // Неосновные полуоси
	e2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида
	f = 0.003352810664747; // Выравнивание эллипсоида
	
	// Вычисляем разницу между двумя долготами и широтами и получаем среднюю широту
	fdLambda = (StartLong - EndLong) * D2R;
	fdPhi = (StartLat - EndLat) * D2R;
	fPhimean = ((StartLat + EndLat) / 2.0) * D2R;
	
	// Вычисляем меридианные и поперечные радиусы кривизны средней широты
	fTemp = 1 - e2 * (Pow(Sin(fPhimean), 2));
	fRho = (a * (1 - e2)) / Pow(fTemp, 1.5);
	fNu = a / (Sqrt(1 - e2 * (Sin(fPhimean) * Sin(fPhimean))));
	
	// Вычисляем угловое расстояние
	fz = Sqrt(Pow(Sin(fdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(fdLambda / 2.0), 2));
	
	fz = 2 * ASin(fz);
	
	// Вычисляем смещение
	fAlpha = Cos(EndLat * D2R) * Sin(fdLambda) * 1 / Sin(fz);
	fAlpha = ASin(МАКС(МИН(Окр(fAlpha,12),1),-1));
	
	// Вычисляем радиус Земли
	fR = (fRho * fNu) / ((fRho * Pow(Sin(fAlpha), 2)) + (fNu * Pow(Cos(fAlpha), 2)));
	
	// Получаем смещение и расстояние
	Distance = (fz * fR);
	Если ((StartLat < EndLat) И (StartLong < EndLong)) Тогда
		Bearing = ItobОбщегоНазначенияКлиентСервер.Abs(fAlpha * R2D)
	ИначеЕсли ((StartLat < EndLat) И (StartLong > EndLong)) Тогда
		Bearing = 360 - ItobОбщегоНазначенияКлиентСервер.Abs(fAlpha * R2D)
	ИначеЕсли ((StartLat > EndLat) И (StartLong > EndLong)) Тогда
		Bearing = 180 + ItobОбщегоНазначенияКлиентСервер.Abs(fAlpha * R2D)
	ИначеЕсли ((StartLat > EndLat) И (StartLong < EndLong)) Тогда
		Bearing = 180 - ItobОбщегоНазначенияКлиентСервер.Abs(fAlpha * R2D);
	КонецЕсли;
	
	Возврат Distance;
					
КонецФункции // ПолучитьРасстояниеМеждуТочками()

// Возвращает булево значение - входит ли точка в геозону
//
Функция ТочкаВнутриГеозоны(х, у, Мх, Му) Экспорт
	
	ToTheLeftofPoint = 0;
	ToTheRightofPoint = 0;
	OpenPolygon = Ложь;
	
	Если НЕ ((Мх[0] = Мх[Мх.Количество()-1]) И (Му[0] = Му[Му.Количество()-1])) Тогда
		OpenPolygon = Истина;
	КонецЕсли;
	
	Для np = 1 По Мх.Количество()-1 Цикл
		
		Если ((Му[np - 1] <= у) И
			(Му[np] > у)) ИЛИ
			((Му[np - 1] > у) И
			(Му[np] <= у)) Тогда
			
			
			XIntersection = Мх[np - 1] +
			((Мх[np] - Мх[np - 1]) /
			(Му[np] - Му[np - 1])) * (у - Му[np - 1]);
			
			
			Если XIntersection < х Тогда ToTheLeftofPoint = ToTheLeftofPoint + 1;   КонецЕсли;
			Если XIntersection > х Тогда ToTheRightofPoint = ToTheRightofPoint + 1;  КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если OpenPolygon Тогда
		
		np = Мх.Количество()-1;
		Если ((Му[np] <= у) И
			(Му[0] > у)) ИЛИ
			((Му[np] > у) И
			(Му[0] <= у)) Тогда
			
			
			XIntersection = Мх[np] + ((Мх[0] - Мх[np]) / (Му[0] - Му[np])) * (у - Му[np]);
			
			Если XIntersection < х Тогда ToTheLeftofPoint = ToTheLeftofPoint+1;   КонецЕсли;
			Если XIntersection > х Тогда ToTheRightofPoint = ToTheRightofPoint+1;  КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОстатокОтДеления(ToTheLeftofPoint,2) = 1 И ОстатокОтДеления(ToTheRightofPoint,2) = 1;
	
	Возврат Результат;

КонецФункции // PtInRgn()

// Возвращает остаток от деления
//
Функция ОстатокОтДеления(Число, Делитель)
	
	Возврат Число-Делитель*Цел(Число/Делитель);

КонецФункции // ОстатокОтДеления()


///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С СЕРВИСОМ CSMCVS

// Возвращает версию сервиса CsmSvc
//
Функция ПолучитьВерсиюCsmSvc()
	
	АдресСервера = Константы.ItobАдресСервисаCsmSvc.Получить();
	Сервер = Лев(АдресСервера, Найти(АдресСервера,":")-1);
	Порт = Сред(АдресСервера, Найти(АдресСервера,":")+1);
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ".html";
	
	Результат = "";
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	Попытка
		HTTP.Получить("Version",  ИмяВременногоФайла);
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ИмяВременногоФайла);
		
		Результат = ТекстДок.ПолучитьСтроку(1);
		
	Исключение
		ЗаписьЖурналаРегистрации("CsmSvc",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка обращения к странице /Version");
	КонецПопытки;
	
	УдалитьФайлы(ИмяВременногоФайла);	
	
	Возврат Результат;

КонецФункции // ПолучитьВерсиюCsmSvc()

// Возвращает адрес сервиса CsmSvc
//
Функция ПолучитьАдресСервисаCsmSvc() Экспорт

	Возврат Константы.ItobАдресСервисаCsmSvc.Получить();	

КонецФункции // ПолучитьАдресСервисаCsmSvc()

// Проверка доступности сервера CsmSvc
// При этом заправшивается тестовая страница по протоколу HTTP
//
// Параметры
//   АдресСервера  - Адрес сервера в формате <IP>:<Порт>, или <DNS имя>:<Порт>
//
// Возвращаемое значение:
//   Булево   - Истина если доступен, Ложь если не доступен
//
Функция ПроверитьДоступностьСервисаCsmSvc(АдресСервера) Экспорт
	
	ПозицияДвТч = Найти(АдресСервера,":"); 
	Если ПозицияДвТч > 0 Тогда
		ИмяСервера = Лев(АдресСервера, ПозицияДвТч-1);
		Порт = Число(Сред(АдресСервера, ПозицияДвТч+1));
		
	Иначе
		ИмяСервера = АдресСервера;
		Порт = 80;
	
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ИмяСервера, Порт);
	
	Попытка
		Соединение.Получить("/index.html", КаталогВременныхФайлов()+"TestRequest.html");		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	
	КонецПопытки;	

КонецФункции // ПроверитьДоступностьСервисаCsmSvc()

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С КАРТОЙ

// Возвращает ссылку на html страницу карты
//
Функция ПолучитьСсылкуНаСтраницуКарты(СодержаниеСтраницы)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ".html";
	ИмяФайлаОтвета = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ".txt";
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(СодержаниеСтраницы);
	ТекстДок.Записать(ИмяВременногоФайла);		
	
	АдресСервера = Константы.ItobАдресСервисаCsmSvc.Получить();
	Сервер = Лев(АдресСервера, Найти(АдресСервера,":")-1);
	Порт = Сред(АдресСервера, Найти(АдресСервера,":")+1);
	
	Результат = "http://" + АдресСервера + "/map/map.html";
	
	HTTP = Новый HTTPСоединение(Сервер,Порт);
	Попытка
		HTTP.ОтправитьДляОбработки(ИмяВременногоФайла, "/SetMapData", ИмяФайлаОтвета);
		
		ТекстДок2 = Новый ТекстовыйДокумент;
		ТекстДок2.Прочитать(ИмяФайлаОтвета);
		
		Результат = "http://" + АдресСервера + ТекстДок2.ПолучитьСтроку(1);
				
	Исключение
		Сообщить("Ошибка установки карты: "+ОписаниеОшибки());
	КонецПопытки;
	
	ТекстДок = Неопределено;
	ТекстДок2 = Неопределено;
	
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяФайлаОтвета);
	
	Возврат Результат;	

КонецФункции // ПолучитьСсылкуНаСтраницуКарты()

// Возвращает контент HTML страницы карты
//
Функция ПолучитьКонтентКарты()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobГеографическиеКарты.Наименование КАК Наименование,
	               |	ItobГеографическиеКарты.Сервер,
	               |	ItobГеографическиеКарты.Правообладатель,
	               |	ItobГеографическиеКарты.СайтПравообладателя,
	               |	ItobГеографическиеКарты.Атрибуты,
	               |	ItobГеографическиеКарты.СлойПодложки,
	               |	ItobГеографическиеКарты.Идентификатор
	               |ИЗ
	               |	Справочник.ItobГеографическиеКарты КАК ItobГеографическиеКарты
	               |ГДЕ
	               |	(НЕ ItobГеографическиеКарты.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ItobГеографическиеКарты.Сортировка,
	               |	Наименование";
				   
	Результат = "";
	
	ИспользоватьIHTS = ХранилищеОбщихНастроек.Загрузить("НастройкиКарты", "ИспользоватьIHTS");
	АдресIHTS        = ХранилищеОбщихНастроек.Загрузить("НастройкиКарты", "АдресIHTS");
	Если ПустаяСтрока(АдресIHTS) И (ИспользоватьIHTS = Истина) Тогда
		ИспользоватьIHTS = Ложь;		
	
	КонецЕсли;
		
	Счетчик = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		АтрибутыКарты = Выборка.Атрибуты;
		Если ИспользоватьIHTS = Истина Тогда
			АтрибутыКарты = СтрЗаменить(АтрибутыКарты, "getTileAddress", "getTileAddressCustom");
			АтрибутыКарты = 
				АтрибутыКарты+",
			    |getTileAddress: function(bounds,x,y,z) {
				|    return ""http://"+АдресIHTS+"/?itob_host="" + this.getTileAddressCustom(bounds,x,y,z).replace(new RegExp(""&"",'g'),""%26"") + ""&itob_map_id="+Выборка.Идентификатор+"&itob_x="" + x + ""&itob_y="" + y + ""&itob_z="" + z; 
				|}";
		
		КонецЕсли;
		
		Если НЕ Выборка.СлойПодложки.Пустая() Тогда
			
			АтрибутыПодложки = Выборка.СлойПодложки.Атрибуты;
			Если ИспользоватьIHTS = Истина Тогда
				АтрибутыПодложки = СтрЗаменить(АтрибутыПодложки, "getTileAddress", "getTileAddressCustom");
				АтрибутыПодложки = 
					АтрибутыПодложки+",
				    |getTileAddress: function(bounds,x,y,z) {
					|    return ""http://"+АдресIHTS+"/?itob_host="" + this.getTileAddressCustom(bounds,x,y,z).replace(new RegExp(""&"",'g'),""%26"") + ""&itob_map_id="+Выборка.СлойПодложки.Идентификатор+"&itob_x="" + x + ""&itob_y="" + y + ""&itob_z="" + z; 
					|}";				
			
			КонецЕсли;			
			
			ИмяСлоя = "Layer"+Формат(Счетчик,"ЧГ=0");
			
			Результат = Результат + "	
			    |var "+ИмяСлоя+" = new OpenLayers.Layer.MapEPSG_900913('"+ИмяСлоя+"',
				|	'"+СтрЗаменить(Выборка.Сервер,"'","''")+"',
				|	{ 
				|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>'
				|		,isBaseLayer:false, visibility:false, displayInLayerSwitcher:false
				|		"+?(ПустаяСтрока(АтрибутыКарты),"",",")+АтрибутыКарты+"					
				|	});
				|layers.push("+ИмяСлоя+");
				|				
				|var Base"+ИмяСлоя+" = new OpenLayers.Layer.MapEPSG_900913('"+СтрЗаменить(Выборка.Наименование,"'","''")+"',
				|	'"+СтрЗаменить(Выборка.СлойПодложки.Сервер,"'","''")+"',
				|	{ 
				|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>',
				|		top_layer: "+ИмяСлоя+"
				|		"+?(ПустаяСтрока(АтрибутыПодложки),"",",")+АтрибутыПодложки+"					
				|	});				
				|
				|LayersWithBackingLayers.push(Base"+ИмяСлоя+");
				|layers.push(Base"+ИмяСлоя+");";
			
				
			Счетчик = Счетчик+1;
			
		Иначе
			
			Результат = Результат + "	
				|layers.push(new OpenLayers.Layer.MapEPSG_900913('"+СтрЗаменить(Выборка.Наименование,"'","''")+"',
				|	'"+СтрЗаменить(Выборка.Сервер,"'","''")+"',
				|	{ 
				|		attribution: '<a href="""+Выборка.СайтПравообладателя+""">"+Выборка.Правообладатель+"</a>'
				|		"+?(ПустаяСтрока(АтрибутыКарты),"",",")+АтрибутыКарты+"					
				|	})				
				|);";
	
				
		КонецЕсли;		
	
	КонецЦикла;
		
	Если ПустаяСтрока(Результат) Тогда
		Результат = 
			"layers.push(new OpenLayers.Layer.MapEPSG_900913(""OSM (Mapnik)"",
	        |        	""http://tile.openstreetmap.org/"",
			|			{ 
			|				attribution: '<a href=""http://www.openstreetmap.org/"">OpenStreetMap</a>',
			|				getTileAddress: function(bounds,x,y,z) {
			|					var subs = [ 'a', 'b', 'c' ];	
			|					return ""http://"" + subs[(x+y)%3] + "".tile.openstreetmap.org/"" + z + ""/"" + x + ""/"" + y + "".png"";
			|				}					
	        |           })				
			|		);";	
	
	КонецЕсли;
		
	Результат = 
		"try {
		|"+Результат+"
		|} catch(err) {}";	
		
	Возврат Результат;

КонецФункции // ПолучитьКонтентКарты()

// Возвращает адрес карты
//
Функция ПолучитьАдресКарты(АтрибутыКарты="") Экспорт

	АдресСервера = Константы.ItobАдресСервисаCsmSvc.Получить();
	Если ПустаяСтрока(АдресСервера) Тогда
		Результат = "<html>
					|<head>
					|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
					|<title>Ошибка отображения карты</title>
					|</head>
					|<body>
					|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
					|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
					|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
  					|В настройках системы не указан<br>
  					|адрес сервера CsmSvc!</font>
					|</div></div></body></html>";
					
		Возврат Результат;
			
	КонецЕсли;
	
	ВерсияCsmSvc = ПолучитьВерсиюCsmSvc();
	ПолныйНомерВерсииЧисло = 0;
	
	Если НЕ ПустаяСтрока(ВерсияCsmSvc) Тогда
		
		Стр2 = СтрЗаменить(ВерсияCsmSvc,".",Символы.ПС);
		
		Редакция = СтрПолучитьСтроку(Стр2,1);
		Подредакция  = СтрПолучитьСтроку(Стр2,2);
		Релиз = СтрПолучитьСтроку(Стр2,3);
		
		ПолныйНомерВерсииЧисло = Редакция*10000 + Подредакция*100 + Релиз;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ВерсияCsmSvc) 
		ИЛИ ПолныйНомерВерсииЧисло < 10104 Тогда
		
		Результат = "<html>
					|<head>
					|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
					|<title>Ошибка отображения карты</title>
					|</head>
					|<body>
					|<div style=""left:0;right:0;top:0;bottom:0;text-align:center;"">
					|<div style=""width:300px;height:100px;text-align:center;border-color:#F00;border-style:solid;border-width:2px;"">
					|<font style=""font:'Courier New', Courier, monospace;font-size:13px;"">Ошибка отображения карты!<br>
  					|Требуется версия CsmSvc не ниже 1.1.4</font>
					|</div></div></body></html>";
					
		Возврат Результат;			
	
	КонецЕсли;
							
	ТекстHTML = ПолучитьОбщийМакет("ItobКарта").ПолучитьТекст();
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "// $MAPS", "// $MAPS"+Символы.ПС+ПолучитьКонтентКарты());
	ТекстHTML = СтрЗаменить(ТекстHTML, "// $ATTRIBUTES", "// $ATTRIBUTES"+Символы.ПС+АтрибутыКарты);
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда
		// Толстый, или тонкий клиент
		// В качестве результата выдаем ссылку
		
		ТекстHTML = СтрЗаменить(ТекстHTML,"$MapServerName","/map");
		Результат = ПолучитьСсылкуНаСтраницуКарты(ТекстHTML);
		
	Иначе
		
		// Веб клиент, в качестве результата - контент страницы
		ТекстHTML = СтрЗаменить(ТекстHTML,"$MapServerName","http://"+АдресСервера+"/map");
		Результат = ТекстHTML;
		
	КонецЕсли;					
	
	Возврат Результат;

КонецФункции // ПолучитьАдресСервераCsmSvc()


///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ВРЕМЕНЕМ

// Возвращает параметры сдвига времени.
//
Функция ПолучитьПараметрыСдвигаВремени() Экспорт
	
	СдвигВремени = СмещениеСтандартногоВремени(ЧасовойПоясСеанса());
	СдвигЛетнееВремя = СмещениеЛетнегоВремени(,'20100801');
	Если СдвигЛетнееВремя > 0 Тогда
		ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Европейский;		
	Иначе
		ВариантПереводаВремени = Неопределено;	
	КонецЕсли;
	
	Возврат Новый Структура("СдвигВремени,СдвигЛетнееВремя,ВариантПереводаВремени", СдвигВремени, СдвигЛетнееВремя, ВариантПереводаВремени);

КонецФункции // ПолучитьПараметрыСдвигаВремени()

// Приводит переданную дату к универсальному времени
// (Стандартная функция некорреткно работает с летним временем)
//
Функция ПривестиКДатеВремениПоГринвичу(ДатаВремя) Экспорт
	
	// по умолчанию - ВариантПереводаВремени - европейский
	ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Европейский;
	
	// Сначала убираем летнее время
	
	Рез = ДатаВремя;
	
	Если ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Европейский Тогда
		
		// Перевод вперед в крайнее воскресенье марта в 2 часа
		НачалоИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),4,1,0,0,0))-7*24*3600)+3*3600;
		// перевод назад в крайнее воскресенье октября в 3 часа
		КонецИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),11,1,0,0,0))-7*24*3600)+3*3600;
				
		Если НачалоИнтервала <= ДатаВремя И ДатаВремя <= КонецИнтервала Тогда
			
			Рез = ДатаВремя - 60*60; 	
		
		КонецЕсли;
		
	ИначеЕсли ВариантПереводаВремени = Перечисления.ItobВариантыПереводаВремени.Американский Тогда
		
		// Перевод вперед во второе воскресенье марта в 2:00
		НачалоИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),3,1,0,0,0))+7*24*3600)+3*3600;
		// Перевод назад в первое воскресенье ноября в 3:00
		КонецИнтервала = НачалоДня(КонецНедели(Дата(Год(ДатаВремя),11,1,0,0,0)))+3*3600;
		
		Если НачалоИнтервала <= ДатаВремя И ДатаВремя <= КонецИнтервала Тогда
			
			Рез = ДатаВремя - 60*60; 	
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УниверсальноеВремя(Рез, ЧасовойПоясСеанса());	

КонецФункции // ПривестиКДатеВремениПоГринвичу()

// Производит установку часового пояса текущего сеанса
//
Процедура УстановкаЧасовогоПоясаСеанса(МестныйЧасовойПояс) Экспорт
	
	УстановитьЧасовойПоясСеанса(МестныйЧасовойПояс);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБРАБОТКИ ДАННЫХ ТРЕКЕРОВ

// Возвращает данные датчика по терминалу
//
Функция ПолучитьДанныеДатчикаПоТерминалу(НачДата, КонДата, Терминал, Датчик, РасширитьГраницыКолвоЗаписей=0)

	// Проверка, есть ли вообще данные по данному датчику
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(ItobДанныеДатчиков.Период) КАК КоличествоЗаписей
	                      |ИЗ
	                      |	РегистрСведений.ItobДанныеДатчиков КАК ItobДанныеДатчиков
	                      |ГДЕ
	                      |	ItobДанныеДатчиков.Период МЕЖДУ &НачДата И &КонДата
	                      |	И ItobДанныеДатчиков.Терминал = &Терминал
	                      |	И ItobДанныеДатчиков.Датчик = &Датчик");
	
	Запрос.УстановитьПараметр("НачДата", ПривестиКДатеВремениПоГринвичу(НачДата));
	Запрос.УстановитьПараметр("КонДата", ПривестиКДатеВремениПоГринвичу(КонДата));
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.УстановитьПараметр("Датчик", Датчик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.КоличествоЗаписей = 0 Тогда
			Возврат Неопределено;
		
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	
	КонецЕсли;
	
	Подзапрос = "ВЫБРАТЬ
	            |	ItobДанныеТерминалов.Терминал КАК Терминал,
	            |	ItobДанныеТерминалов.Период КАК Период,
	            |	ЕСТЬNULL(ItobДанныеТерминалов.Широта, 0) КАК Широта,
	            |	ЕСТЬNULL(ItobДанныеТерминалов.Долгота, 0) КАК Долгота,
	            |	ЕСТЬNULL(ItobДанныеТерминалов.Скорость, 0) КАК Скорость,
	            |	ЕСТЬNULL(ItobДанныеТерминалов.Направление, 0) КАК Направление
	            |ИЗ
	            |	РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
	            |ГДЕ
	            |	ItobДанныеТерминалов.Терминал = &Терминал
	            |	И ItobДанныеТерминалов.Период МЕЖДУ &НачДата И &КонДата";
				
	Если РасширитьГраницыКолвоЗаписей > 0 Тогда
		
		Подзапрос = "ВЫБРАТЬ
		            |	ВложенныйЗапросНачалоИнтервала.Терминал КАК Терминал,
		            |	ВложенныйЗапросНачалоИнтервала.Период КАК Период,
		            |	ВложенныйЗапросНачалоИнтервала.Широта КАК Широта,
		            |	ВложенныйЗапросНачалоИнтервала.Долгота КАК Долгота,
		            |	ВложенныйЗапросНачалоИнтервала.Скорость КАК Скорость,
		            |	ВложенныйЗапросНачалоИнтервала.Направление КАК Направление
		            |ИЗ
		            |	(ВЫБРАТЬ ПЕРВЫЕ "+Формат(РасширитьГраницыКолвоЗаписей,"ЧГ=0")+"
		            |		ItobДанныеТерминалов.Терминал КАК Терминал,
		            |		ItobДанныеТерминалов.Период КАК Период,
		            |		ЕСТЬNULL(ItobДанныеТерминалов.Широта, 0) КАК Широта,
		            |		ЕСТЬNULL(ItobДанныеТерминалов.Долгота, 0) КАК Долгота,
		            |		ЕСТЬNULL(ItobДанныеТерминалов.Скорость, 0) КАК Скорость,
		            |		ЕСТЬNULL(ItobДанныеТерминалов.Направление, 0) КАК Направление
		            |	ИЗ
		            |		РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
		            |	ГДЕ
		            |		ItobДанныеТерминалов.Терминал = &Терминал
		            |		И ItobДанныеТерминалов.Период < &НачДата
		            |	
		            |	УПОРЯДОЧИТЬ ПО
		            |		Период УБЫВ) КАК ВложенныйЗапросНачалоИнтервала"+
					
					"				   
		            |	ОБЪЕДИНИТЬ ВСЕ
		            |"+Подзапрос+"
		            |	ОБЪЕДИНИТЬ ВСЕ
					|"+
					
					"ВЫБРАТЬ
					|	ВложенныйЗапросКонецИнтервала.Терминал,
					|	ВложенныйЗапросКонецИнтервала.Период,
					|	ВложенныйЗапросКонецИнтервала.Широта,
					|	ВложенныйЗапросКонецИнтервала.Долгота,
					|	ВложенныйЗапросКонецИнтервала.Скорость,
					|	ВложенныйЗапросКонецИнтервала.Направление
					|ИЗ
					|	(ВЫБРАТЬ ПЕРВЫЕ "+Формат(РасширитьГраницыКолвоЗаписей,"ЧГ=0")+"
					|		ItobДанныеТерминалов.Терминал КАК Терминал,
					|		ItobДанныеТерминалов.Период КАК Период,
					|		ЕСТЬNULL(ItobДанныеТерминалов.Широта, 0) КАК Широта,
					|		ЕСТЬNULL(ItobДанныеТерминалов.Долгота, 0) КАК Долгота,
					|		ЕСТЬNULL(ItobДанныеТерминалов.Скорость, 0) КАК Скорость,
					|		ЕСТЬNULL(ItobДанныеТерминалов.Направление, 0) КАК Направление
					|	ИЗ
					|		РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
					|	ГДЕ
					|		ItobДанныеТерминалов.Терминал = &Терминал
					|		И ItobДанныеТерминалов.Период > &КонДата
					|	
					|	УПОРЯДОЧИТЬ ПО
					|		Период) КАК ВложенныйЗапросКонецИнтервала";
	
	КонецЕсли;			
	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеТерминалов.Терминал,
	               |	&Датчик КАК Датчик,
	               |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДанныеТерминалов.Период, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Период,
	               |	ЕСТЬNULL(ItobДанныеДатчиков.Значение, 0) КАК Значение,
	               |	ДанныеТерминалов.Широта,
	               |	ДанныеТерминалов.Долгота,
	               |	ДанныеТерминалов.Скорость,
	               |	ДанныеТерминалов.Направление,
	               |	ЕСТЬNULL(РасшифровкаПоказаний.Расшифровка, """""""") КАК Расшифровка
	               |ИЗ
	               |	("+Подзапрос+") КАК ДанныеТерминалов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ItobДанныеДатчиков КАК ItobДанныеДатчиков
	               |		ПО (ItobДанныеДатчиков.Период = ДанныеТерминалов.Период)
	               |			И (ItobДанныеДатчиков.Терминал = ДанныеТерминалов.Терминал)
	               |			И (ItobДанныеДатчиков.Датчик = &Датчик)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ItobТерминалыДатчики.Ссылка КАК Терминал,
	               |			ItobТерминалыДатчики.Датчик КАК Датчик,
	               |			ItobНазначенияДатчиковРасшифровкаПоказаний.Показание КАК Показание,
	               |			ItobНазначенияДатчиковРасшифровкаПоказаний.Расшифровка КАК Расшифровка
	               |		ИЗ
	               |			Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobНазначенияДатчиков.РасшифровкаПоказаний КАК ItobНазначенияДатчиковРасшифровкаПоказаний
	               |				ПО ItobТерминалыДатчики.Назначение = ItobНазначенияДатчиковРасшифровкаПоказаний.Ссылка
	               |		ГДЕ
	               |			ItobТерминалыДатчики.Ссылка = &Терминал
	               |			И ItobТерминалыДатчики.Датчик = &Датчик) КАК РасшифровкаПоказаний
	               |		ПО (РасшифровкаПоказаний.Показание = ЕСТЬNULL(ItobДанныеДатчиков.Значение, 0))
				   |
				   |ГДЕ
	               |	НЕ ItobДанныеДатчиков.Значение ЕСТЬ NULL
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДанныеДатчикаПоТерминалу()

// Возвращает данные датчика объекта мониторинга
//
Функция ПолучитьДанныеДатчикаОбъекта(Объект, НачДата, КонДата, Датчик, РасширитьГраницыКолвоЗаписей=0) Экспорт
	
	ОбщаяТаблицаДанных = Новый ТаблицаЗначений;
	ОбщаяТаблицаДанных.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.ItobТерминалы"));
	ОбщаяТаблицаДанных.Колонки.Добавить("Датчик", Новый ОписаниеТипов("СправочникСсылка.ItobДатчики"));
	ОбщаяТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));	
	ОбщаяТаблицаДанных.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщаяТаблицаДанных.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки()));
	
	// Срез первых
	СрезНаНачало = РегистрыСведений.ItobПривязкиТерминалов.ПолучитьПоследнее(НачалоДня(НачДата)-1, Новый Структура("Объект", Объект));
	
	ТекущаяСтруктураПривязки = Новый Структура("Период,Терминал,ТерминалУстановлен");
	ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, СрезНаНачало);	
	ТекущаяСтруктураПривязки.Период = НачДата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПривязкиТерминалов.Период КАК Период,
	               |	ItobПривязкиТерминалов.Терминал,
	               |	ItobПривязкиТерминалов.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов КАК ItobПривязкиТерминалов
	               |ГДЕ
	               |	ItobПривязкиТерминалов.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ) И &КонДата
	               |	И ItobПривязкиТерминалов.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяСтруктураПривязки.Период = Выборка.Период Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
			Продолжить;
		
		КонецЕсли;
				
		Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
			
			ТабДанных = ПолучитьДанныеДатчикаПоТерминалу(ТекущаяСтруктураПривязки.Период, НачалоДня(Выборка.Период)-1, ТекущаяСтруктураПривязки.Терминал, Датчик, РасширитьГраницыКолвоЗаписей);
			Если ТабДанных <> Неопределено Тогда
				Для Каждого ТекСтрокаДанных Из ТабДанных Цикл
					ЗаполнитьЗначенияСвойств(ОбщаяТаблицаДанных.Добавить(), ТекСтрокаДанных);				
				КонецЦикла;
			
			КонецЕсли;
		
		КонецЕсли;		
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	
	КонецЦикла;
	
	Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
		
		ТабДанных = ПолучитьДанныеДатчикаПоТерминалу(ТекущаяСтруктураПривязки.Период, КонДата, ТекущаяСтруктураПривязки.Терминал, Датчик, РасширитьГраницыКолвоЗаписей);
		Если ТабДанных <> Неопределено Тогда
			Для Каждого ТекСтрокаДанных Из ТабДанных Цикл
				ЗаполнитьЗначенияСвойств(ОбщаяТаблицаДанных.Добавить(), ТекСтрокаДанных);
			КонецЦикла;			
		
		КонецЕсли;
	
	КонецЕсли;	
		
	Возврат ОбщаяТаблицаДанных;	

КонецФункции // ПолучитьДанныеДатчикаОбъекта()

// Раскладывает маршрут объекта по состояниям - Движение/Стоянка
//
Функция ОбработатьМаршрутОбъекта(ТаблицаТочекМаршрута)
			
	МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ_ДВИЖЕНИЕ = 60*60;
	
	п = 1;
	Пока п <= ТаблицаТочекМаршрута.Количество()-1 Цикл
		Если (ТаблицаТочекМаршрута[п-1].Состояние = Перечисления.ItobСостоянияТерминалов.Движение
			ИЛИ ТаблицаТочекМаршрута[п].Состояние = Перечисления.ItobСостоянияТерминалов.Движение)
			И 
			ТаблицаТочекМаршрута[п].Период-ТаблицаТочекМаршрута[п-1].Период > МИНИМАЛЬНЫЙ_ИНТЕВАЛ_ОТПРАВКИ_ДВИЖЕНИЕ Тогда
			
			Строка1 = ТаблицаТочекМаршрута[п-1];
			Строка2 = ТаблицаТочекМаршрута[п];
			
			// Ставим стоянку
			ДанныеТочки = ПолучитьТочкуНаДату(Строка1, Строка2,
				'00010101'+Цел(((Строка1.Период-'00010101')+(Строка2.Период-'00010101'))/2) );
			
			НовСтрока = ТаблицаТочекМаршрута.Вставить(п);
			ЗаполнитьЗначенияСвойств(НовСтрока, ДанныеТочки);
			НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка;			
			
			Если Строка1.Состояние = Перечисления.ItobСостоянияТерминалов.Движение
				И Строка2.Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
			
				НовСтрока.Период = '00010101'+Цел(((Строка1.Период-'00010101')+(Строка2.Период-'00010101'))/2) ;
				
			ИначеЕсли Строка1.Состояние <> Перечисления.ItobСостоянияТерминалов.Движение
				И Строка2.Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
				
				НовСтрока.Период = Строка2.Период - 60;
				
			ИначеЕсли Строка1.Состояние = Перечисления.ItobСостоянияТерминалов.Движение
				И Строка2.Состояние <> Перечисления.ItobСостоянияТерминалов.Движение Тогда
				
				НовСтрока.Период = Строка1.Период + 60;
			
			КонецЕсли;			
			
			п = п+1;
			
		КонецЕсли;
		
		п = п+1;
	
	КонецЦикла;
	
	ТаблицаТочекМаршрута.Колонки.Добавить("ПериодКон");
	ТаблицаТочекМаршрута.Колонки.Добавить("ВремяСтоянки");	
		
	МинимальноеВремяСтоянкиСек = Константы.ItobМинимальноеВремяСтоянки.Получить()-'00010101';
	НачалоСтоянки = Неопределено;
	
	МассивСтрокКУдалению = Новый Массив;
	МассивСтрокТекСтоянка = Новый Массив;
	
	Для п = 0 По ТаблицаТочекМаршрута.Количество()-1 Цикл
		
		СтрокаТаб = ТаблицаТочекМаршрута[п];
		
		Если СтрокаТаб.Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка Тогда
			
			МассивСтрокТекСтоянка.Добавить(СтрокаТаб);
			
			Если п = ТаблицаТочекМаршрута.Количество()-1 ИЛИ
				ТаблицаТочекМаршрута[п+1].Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
									
				ПродолжительностьСтоянки = 
					МассивСтрокТекСтоянка[МассивСтрокТекСтоянка.Количество()-1].Период - МассивСтрокТекСтоянка[0].Период;
					
				Если ПродолжительностьСтоянки >= МинимальноеВремяСтоянкиСек Тогда
					// это стоянка
					
					ИтогоШирота = 0;
					ИтогоДолгота = 0;					
					
					Для р = 0 По МассивСтрокТекСтоянка.Количество()-1 Цикл
						Если р > 0 Тогда
							МассивСтрокКУдалению.Добавить(МассивСтрокТекСтоянка[р]);								
						
						КонецЕсли;
						
						ИтогоШирота = ИтогоШирота + МассивСтрокТекСтоянка[р].Широта;
						ИтогоДолгота = ИтогоДолгота + МассивСтрокТекСтоянка[р].Долгота;
					
					КонецЦикла;
					
					МассивСтрокТекСтоянка[0].ПериодКон = МассивСтрокТекСтоянка[МассивСтрокТекСтоянка.Количество()-1].Период;
					МассивСтрокТекСтоянка[0].ВремяСтоянки = '00010101' + ПродолжительностьСтоянки;
					МассивСтрокТекСтоянка[0].Широта = ИтогоШирота/МассивСтрокТекСтоянка.Количество();
					МассивСтрокТекСтоянка[0].Долгота = ИтогоДолгота/МассивСтрокТекСтоянка.Количество();					
					
				Иначе
					// по продолжительности это не стоянка
					Для р = 0 По МассивСтрокТекСтоянка.Количество()-1 Цикл
						МассивСтрокТекСтоянка[р].Состояние = Перечисления.ItobСостоянияТерминалов.Движение;	
						
					КонецЦикла;
				
				КонецЕсли;				
				
				МассивСтрокТекСтоянка.Очистить();
			
			КонецЕсли;
		
		КонецЕсли;		
	
	КонецЦикла;
	
	Для каждого СтрокаТаб Из МассивСтрокКУдалению Цикл
		ТаблицаТочекМаршрута.Удалить(СтрокаТаб);	
	
	КонецЦикла;
	
	// обработаем движение
	МассивСтрокДвижения = Новый Массив;
	п = 0;
	Пока п <= ТаблицаТочекМаршрута.Количество()-1 Цикл	
		
		Если ТаблицаТочекМаршрута[п].Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
			МассивСтрокДвижения.Добавить(ТаблицаТочекМаршрута[п]);
		
		КонецЕсли;
		
		Если (ТаблицаТочекМаршрута[п].Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка ИЛИ п = ТаблицаТочекМаршрута.Количество()-1)
			И МассивСтрокДвижения.Количество() > 0 Тогда
			
			// смотрим продолжительность движения
			ПродолжительностьДвижения = МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1].Период - МассивСтрокДвижения[0].Период;
			Если ПродолжительностьДвижения < 60 Тогда
				
				// подсчет примерного пройденного расстояния
				ПройденноеРасстояние = 0;
				Для м = 1 По МассивСтрокДвижения.Количество()-1 Цикл
					ПройденноеРасстояние = ПройденноеРасстояние + 
						73000*Pow(Pow(МассивСтрокДвижения[м].Широта-МассивСтрокДвижения[м-1].Широта,2)+Pow(МассивСтрокДвижения[м].Долгота-МассивСтрокДвижения[м-1].Долгота,2),0.5);
				
				КонецЦикла;
					
				Если ПройденноеРасстояние < 50 Тогда
					// Считаем данные точки - стоянкой					
					
					ЕстьСтоянкаДо = ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[0]) > 0;
					ЕстьСтоянкаПосле = ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1]) < ТаблицаТочекМаршрута.Количество()-1;
					СтрокаСтоянкиДо = ?(ЕстьСтоянкаДо,ТаблицаТочекМаршрута[ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[0])-1],Неопределено);
					СтрокаСтоянкиПосле = ?(ЕстьСтоянкаПосле,ТаблицаТочекМаршрута[ТаблицаТочекМаршрута.Индекс(МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1])+1],Неопределено);
					Если ЕстьСтоянкаДо И ЕстьСтоянкаПосле Тогда
						СтрокаСтоянкиДо.ПериодКон = СтрокаСтоянкиПосле.ПериодКон;
						СтрокаСтоянкиДо.ВремяСтоянки = СтрокаСтоянкиДо.ВремяСтоянки + ПродолжительностьДвижения + (СтрокаСтоянкиПосле.ВремяСтоянки-'00010101');
						СтрокаСтоянкиДо.Широта = (СтрокаСтоянкиДо.Широта + СтрокаСтоянкиПосле.Широта)/2;
						СтрокаСтоянкиДо.Долгота = (СтрокаСтоянкиДо.Долгота + СтрокаСтоянкиПосле.Долгота)/2;
						
						ТаблицаТочекМаршрута.Удалить(СтрокаСтоянкиПосле);
						Для каждого СтрокаУдаления Из МассивСтрокДвижения Цикл
							ТаблицаТочекМаршрута.Удалить(СтрокаУдаления);	
						КонецЦикла;
						
						п = п - 1 - МассивСтрокДвижения.Количество();
						
					ИначеЕсли ЕстьСтоянкаДо Тогда
						СтрокаСтоянкиДо.ПериодКон = МассивСтрокДвижения[МассивСтрокДвижения.Количество()-1].Период;
						СтрокаСтоянкиДо.ВремяСтоянки = СтрокаСтоянкиДо.ВремяСтоянки + ПродолжительностьДвижения;
												
						Для каждого СтрокаУдаления Из МассивСтрокДвижения Цикл
							ТаблицаТочекМаршрута.Удалить(СтрокаУдаления);	
						КонецЦикла;
						
						п = п - МассивСтрокДвижения.Количество();
						
					ИначеЕсли ЕстьСтоянкаПосле Тогда
						СтрокаСтоянкиПосле.Период = МассивСтрокДвижения[0].Период;
						СтрокаСтоянкиПосле.ВремяСтоянки = СтрокаСтоянкиПосле.ВремяСтоянки + ПродолжительностьДвижения;
												
						Для каждого СтрокаУдаления Из МассивСтрокДвижения Цикл
							ТаблицаТочекМаршрута.Удалить(СтрокаУдаления);	
						КонецЦикла;
						
						п = п - МассивСтрокДвижения.Количество();
					
					КонецЕсли;					
				
				КонецЕсли;	
			
			КонецЕсли;
			
			МассивСтрокДвижения.Очистить();
			
		КонецЕсли;
		
		п = п + 1;
		
	КонецЦикла;	
	
	Возврат ТаблицаТочекМаршрута;
	
КонецФункции

// Формирует маршрут терминала по координатам трека
//
Функция СформироватьМаршрутПоТерминалу(ТерминалСсылка, НачДата, КонДата, Маршрут, ВыводитьСообщения=Истина) Экспорт
		
	ПараметрыСдвигаВремени = ПолучитьПараметрыСдвигаВремени();
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("НачДата", ПривестиКДатеВремениПоГринвичу(НачДата));
	Запрос.УстановитьПараметр("КонДата", ПривестиКДатеВремениПоГринвичу(КонДата));
	Запрос.УстановитьПараметр("Терминал", ТерминалСсылка);
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", Константы.ItobМинимальнаяСкоростьДвижения.Получить());	
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ItobДанныеТерминалов.Период, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ItobДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobДанныеТерминалов.Период, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ItobДанныеТерминалов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobДанныеТерминалов.Период, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ItobДанныеТерминалов.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	               |							ТОГДА &СдвигЛетнееВремя
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Период,
	               |	ItobДанныеТерминалов.Широта,
	               |	ItobДанныеТерминалов.Долгота,
	               |	ItobДанныеТерминалов.Скорость,
	               |	ItobДанныеТерминалов.Направление,
	               |	ItobДанныеТерминалов.Терминал КАК Терминал,
	               |	ВЫБОР
	               |		КОГДА ItobДанныеТерминалов.Скорость > &МинимальнаяСкоростьДвижения
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Движение)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ItobСостоянияТерминалов.Стоянка)
	               |	КОНЕЦ КАК Состояние,
				   |	ItobДанныеТерминалов.Период КАК ПериодUTC0
	               |ИЗ
	               |	РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
	               |ГДЕ
	               |	ItobДанныеТерминалов.Период В
	               |			(ВЫБРАТЬ
	               |				ТаблицаПериодов.Период
	               |			ИЗ
	               |				(ВЫБРАТЬ
	               |					ВложенныйЗапрос.Период КАК Период
	               |				ИЗ
	               |					(ВЫБРАТЬ ПЕРВЫЕ 1
	               |						ItobДанныеТерминалов.Период КАК Период
	               |					ИЗ
	               |						РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
	               |					ГДЕ
	               |						ItobДанныеТерминалов.Терминал = &Терминал
	               |						И ItobДанныеТерминалов.Период <= &НачДата
	               |					УПОРЯДОЧИТЬ ПО
	               |						Период УБЫВ
	               |					) КАК ВложенныйЗапрос
	               |		
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |				ВЫБРАТЬ
	               |					ItobДанныеТерминалов.Период
	               |				ИЗ
	               |					РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
	               |				ГДЕ
	               |					ItobДанныеТерминалов.Терминал = &Терминал
	               |					И ItobДанныеТерминалов.Период МЕЖДУ &НачДата И &КонДата
	               |		
	               |				ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |				ВЫБРАТЬ
	               |					ВложенныйЗапрос.Период
	               |				ИЗ
	               |					(ВЫБРАТЬ ПЕРВЫЕ 1
	               |						ItobДанныеТерминалов.Период КАК Период
	               |					ИЗ
	               |						РегистрСведений.ItobДанныеТерминалов КАК ItobДанныеТерминалов
	               |					ГДЕ
	               |						ItobДанныеТерминалов.Терминал = &Терминал
	               |						И ItobДанныеТерминалов.Период >= &КонДата
	               |					УПОРЯДОЧИТЬ ПО
	               |						Период
	               |					) КАК ВложенныйЗапрос
	               |				) КАК ТаблицаПериодов
	               |			СГРУППИРОВАТЬ ПО
	               |						ТаблицаПериодов.Период)
	               |	И ItobДанныеТерминалов.Терминал = &Терминал
	               |	И ItobДанныеТерминалов.Широта <> 0
	               |	И ItobДанныеТерминалов.Долгота <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	ТаблицаТочекМаршрута = Запрос.Выполнить().Выгрузить();
	КоличествоТочек = ТаблицаТочекМаршрута.Количество();
	Если КоличествоТочек = 0 Тогда
		Если ВыводитьСообщения Тогда
			Сообщить("По объекту "+СокрЛП(ТерминалСсылка)+" за выбранный период сведения отсутствуют!");		
		КонецЕсли;
		
		Возврат Ложь;		
	
	КонецЕсли;
	
	// Обработаем крайние точки
	Если ТаблицаТочекМаршрута.Количество() >= 2 И ТаблицаТочекМаршрута[0].Период < НачДата
		И ТаблицаТочекМаршрута[1].Период > НачДата Тогда
		ПараметрыТочки = ПолучитьТочкуНаДату(ТаблицаТочекМаршрута[0],ТаблицаТочекМаршрута[1],НачДата);
		Если ПараметрыТочки.Широта <> 0 ИЛИ ПараметрыТочки.Долгота <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаТочекМаршрута[0],ПараметрыТочки);		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТаблицаТочекМаршрута.Количество() >= 2 И ТаблицаТочекМаршрута[КоличествоТочек-1].Период > КонДата
		И ТаблицаТочекМаршрута[КоличествоТочек-2].Период < КонДата Тогда
		ПараметрыТочки = ПолучитьТочкуНаДату(ТаблицаТочекМаршрута[КоличествоТочек-2],ТаблицаТочекМаршрута[КоличествоТочек-1],КонДата);
		Если ПараметрыТочки.Широта <> 0 ИЛИ ПараметрыТочки.Долгота <> 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаТочекМаршрута[КоличествоТочек-1],ПараметрыТочки);
		КонецЕсли;		
	
	КонецЕсли;
		
	Маршрут = ОбработатьМаршрутОбъекта(ТаблицаТочекМаршрута);
	Возврат Истина;
		
КонецФункции

// Формирует таблицу маршрута для заданного объекта мониторинга
//
Функция СформироватьМаршрутОбъектаМониторинга(Объект, НачДата, КонДата) Экспорт
	
	ОбщийМаршрут = Новый ТаблицаЗначений;
	ОбщийМаршрут.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщийМаршрут.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщийМаршрут.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	ОбщийМаршрут.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщийМаршрут.Колонки.Добавить("Направление", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	ОбщийМаршрут.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.ItobСостоянияТерминалов"));	
	ОбщийМаршрут.Колонки.Добавить("ПериодКон", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщийМаршрут.Колонки.Добавить("ВремяСтоянки", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОбщийМаршрут.Колонки.Добавить("Терминал", Новый ОписаниеТипов("СправочникСсылка.ItobТерминалы"));
	ОбщийМаршрут.Колонки.Добавить("ПериодUTC0", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));	
	
	// Срез первых
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", НачалоДня(НачДата)-1);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПривязкиТерминаловСрезПоследних.Период КАК Период,
	               |	ItobПривязкиТерминаловСрезПоследних.Терминал,
	               |	ItobПривязкиТерминаловСрезПоследних.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов.СрезПоследних(&Период, Объект = &Объект) КАК ItobПривязкиТерминаловСрезПоследних";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяСтруктураПривязки = Новый Структура("Период,Терминал,ТерминалУстановлен");		
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	Иначе
		ТекущаяСтруктураПривязки.ТерминалУстановлен = Ложь;	
	КонецЕсли;
	ТекущаяСтруктураПривязки.Период = НачДата;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("Объект", Объект);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ItobПривязкиТерминалов.Период КАК Период,
	               |	ItobПривязкиТерминалов.Терминал,
	               |	ItobПривязкиТерминалов.ТерминалУстановлен
	               |ИЗ
	               |	РегистрСведений.ItobПривязкиТерминалов КАК ItobПривязкиТерминалов
	               |ГДЕ
	               |	ItobПривязкиТерминалов.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ) И &КонДата
	               |	И ItobПривязкиТерминалов.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяСтруктураПривязки.Период = Выборка.Период Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
			Продолжить;
		
		КонецЕсли;
		
		ФлагНетДанных = Ложь;		
		Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
			
			ТекущийМаршрут = Неопределено;
			Рез = СформироватьМаршрутПоТерминалу(ТекущаяСтруктураПривязки.Терминал, ТекущаяСтруктураПривязки.Период, НачалоДня(Выборка.Период)-1, ТекущийМаршрут);
			Если Рез Тогда
				Для Каждого ТекСтрокаМаршрута Из ТекущийМаршрут Цикл
					ЗаполнитьЗначенияСвойств(ОбщийМаршрут.Добавить(), ТекСтрокаМаршрута);				
				КонецЦикла;
				
			Иначе
				ФлагНетДанных = Истина;
			
			КонецЕсли;
			
		Иначе
			ФлагНетДанных = Истина;
		
		КонецЕсли;
		
		Если ФлагНетДанных Тогда
			НовСтрока = ОбщийМаршрут.Добавить();
			НовСтрока.Период = ТекущаяСтруктураПривязки.Период;
			НовСтрока.ПериодКон = НачалоДня(Выборка.Период)-1;
			НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтруктураПривязки, Выборка);
	
	КонецЦикла;
	
	ФлагНетДанных = Ложь;
	Если ТекущаяСтруктураПривязки.ТерминалУстановлен = Истина Тогда
		
		ТекущийМаршрут = Неопределено;
		Рез = СформироватьМаршрутПоТерминалу(ТекущаяСтруктураПривязки.Терминал, ТекущаяСтруктураПривязки.Период, КонДата, ТекущийМаршрут);
		Если Рез Тогда
			Для Каждого ТекСтрокаМаршрута Из ТекущийМаршрут Цикл
				ЗаполнитьЗначенияСвойств(ОбщийМаршрут.Добавить(), ТекСтрокаМаршрута);				
			КонецЦикла;
			
		Иначе
			ФлагНетДанных = Истина;			
		КонецЕсли;
		
	Иначе
		ФлагНетДанных = Истина;		
	КонецЕсли;
	
	Если ФлагНетДанных Тогда
		НовСтрока = ОбщийМаршрут.Добавить();
		НовСтрока.Период = ТекущаяСтруктураПривязки.Период;
		НовСтрока.ПериодКон = КонДата;
		НовСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.НетДанных;		
	КонецЕсли;
	
	Возврат ОбщийМаршрут;

КонецФункции // СформироватьМаршрутОбъектаМониторинга()


///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ СВОДНОЙ ИНФОРМАЦИИ

// Формирует таблицу интервалов движения для заданного объекта мониторинга
//
Функция ПолучитьИнтервалыДвижения(Объект, НачДата, КонДата, ГеокодироватьАдреса=Ложь) Экспорт
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("ВремяНач");
	ТаблицаИнтервалов.Колонки.Добавить("ВремяКон");
	ТаблицаИнтервалов.Колонки.Добавить("Состояние");
	ТаблицаИнтервалов.Колонки.Добавить("СостояниеСтрока");
	ТаблицаИнтервалов.Колонки.Добавить("Длительность");
	ТаблицаИнтервалов.Колонки.Добавить("СредняяСкорость");
	ТаблицаИнтервалов.Колонки.Добавить("МаксимальнаяСкорость");
	ТаблицаИнтервалов.Колонки.Добавить("Пробег");
	ТаблицаИнтервалов.Колонки.Добавить("МестоСтоянки");
	
	Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(Объект, НачДата, КонДата);
	
	Если Маршрут = Неопределено ИЛИ Маршрут.Количество()=0 Тогда
		Возврат ТаблицаИнтервалов;
		
	ИначеЕсли Маршрут.Количество()=1 И Маршрут[0].Период < НачДата Тогда
		Возврат ТаблицаИнтервалов;
	
	КонецЕсли;
	
	ПоправочныйКоэффициентНаПробег = 1;
	
	МассивСтрокДвижение = Новый Массив;
	
	Для НомСтроки = 0 По Маршрут.Количество()-1 Цикл
		ТекТочкаМаршрута = Маршрут[НомСтроки];
		Если ТекТочкаМаршрута.Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка Тогда
			
			НовСтрокаТаб = ТаблицаИнтервалов.Добавить();
			НовСтрокаТаб.ВремяНач = ТекТочкаМаршрута.Период;
			НовСтрокаТаб.ВремяКон = ТекТочкаМаршрута.ПериодКон;
			НовСтрокаТаб.Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка;
			НовСтрокаТаб.СостояниеСтрока = "Стоянка";
			НовСтрокаТаб.СредняяСкорость = 0;
			НовСтрокаТаб.МаксимальнаяСкорость = 0;
			НовСтрокаТаб.Пробег = 0;
			НовСтрокаТаб.МестоСтоянки = ?(ГеокодироватьАдреса, НайтиБлижайшийАдрес(ТекТочкаМаршрута.Широта, ТекТочкаМаршрута.Долгота) ,"");
			
		ИначеЕсли ТекТочкаМаршрута.Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
			
			МассивСтрокДвижение.Добавить(ТекТочкаМаршрута);
			
			Если НомСтроки = Маршрут.Количество()-1 ИЛИ Маршрут[НомСтроки+1].Состояние <> Перечисления.ItobСостоянияТерминалов.Движение Тогда
									
				// Считаем пробег и среднюю скорость
				СредСкорость = 0;
				МаксСкорость = 0;
				МассивТочек = Новый Массив;
								
				Если МассивСтрокДвижение.Количество() > 0 Тогда
					Если Маршрут.Индекс(МассивСтрокДвижение[0]) > 0 Тогда
						МассивТочек.Добавить(Маршрут[Маршрут.Индекс(МассивСтрокДвижение[0])-1].Широта);
						МассивТочек.Добавить(Маршрут[Маршрут.Индекс(МассивСтрокДвижение[0])-1].Долгота);						
					КонецЕсли;				
				КонецЕсли;
				
				Для п = 0 По МассивСтрокДвижение.Количество()-1 Цикл
					СредСкорость = СредСкорость + МассивСтрокДвижение[п].Скорость;
					МаксСкорость = МАКС(МаксСкорость, МассивСтрокДвижение[п].Скорость);
					
					МассивТочек.Добавить(МассивСтрокДвижение[п].Широта);
					МассивТочек.Добавить(МассивСтрокДвижение[п].Долгота);
				
				КонецЦикла;
				
				Если МассивСтрокДвижение.Количество() > 0 Тогда
					Если Маршрут.Индекс(МассивСтрокДвижение[МассивСтрокДвижение.Количество()-1]) < Маршрут.Количество()-1 Тогда
						ИндексТочки = Маршрут.Индекс(МассивСтрокДвижение[МассивСтрокДвижение.Количество()-1])+1;
						МассивТочек.Добавить(Маршрут[ИндексТочки].Широта);
						МассивТочек.Добавить(Маршрут[ИндексТочки].Долгота);
						
					КонецЕсли;				
				КонецЕсли;				
				
				Пробег = ПоправочныйКоэффициентНаПробег*ПолучитьПробег(МассивТочек)/1000;					
				
				НовСтрокаТаб = ТаблицаИнтервалов.Добавить();
				НовСтрокаТаб.ВремяНач = МассивСтрокДвижение[0].Период;
				НовСтрокаТаб.ВремяКон = МассивСтрокДвижение[МассивСтрокДвижение.Количество()-1].Период;
				НовСтрокаТаб.Состояние = Перечисления.ItobСостоянияТерминалов.Движение;
				НовСтрокаТаб.СостояниеСтрока = "Движение";
				НовСтрокаТаб.МаксимальнаяСкорость = МаксСкорость;
				НовСтрокаТаб.Пробег = Пробег;
									
				МассивСтрокДвижение.Очистить();				
				
			КонецЕсли;
			
		КонецЕсли;		
	
	КонецЦикла;
	
	// Нормализация времени в таблице
	Для п = 0 По ТаблицаИнтервалов.Количество()-1 Цикл
		ТекСтрока = ТаблицаИнтервалов[п];
		
		Если п < ТаблицаИнтервалов.Количество()-1 Тогда
			ТекСтрока.ВремяКон = ТаблицаИнтервалов[п+1].ВремяНач-1;
					
		КонецЕсли;		
		
		ТекСтрока.Длительность = ТекСтрока.ВремяКон-ТекСтрока.ВремяНач+1;
		Если ТекСтрока.Состояние = Перечисления.ItobСостоянияТерминалов.Движение Тогда
			ТекСтрока.СредняяСкорость = ?(ТекСтрока.Длительность=0,0,Окр(ТекСтрока.Пробег/ТекСтрока.Длительность*3600,1));	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИнтервалов;

КонецФункции // ПолучитьИнтервалыДвижения()
